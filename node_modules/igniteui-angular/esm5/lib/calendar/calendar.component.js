/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { transition, trigger, useAnimation } from '@angular/animations';
import { Component, ContentChild, EventEmitter, forwardRef, HostBinding, HostListener, Input, Output, QueryList, ViewChildren } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';
import { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../animations/main';
import { Calendar, range } from './calendar';
import { IgxCalendarDateDirective, IgxCalendarHeaderTemplateDirective, IgxCalendarSubheaderTemplateDirective } from './calendar.directives';
import { DateRangeType } from '../core/dates/dateRange';
import { isDate } from 'util';
var /** @type {?} */ NEXT_ID = 0;
/** @enum {number} */
var CalendarView = {
    DEFAULT: 0,
    YEAR: 1,
    DECADE: 2,
};
export { CalendarView };
CalendarView[CalendarView.DEFAULT] = "DEFAULT";
CalendarView[CalendarView.YEAR] = "YEAR";
CalendarView[CalendarView.DECADE] = "DECADE";
/** @enum {string} */
var CalendarSelection = {
    SINGLE: 'single',
    MULTI: 'multi',
    RANGE: 'range',
};
export { CalendarSelection };
var CalendarHammerConfig = /** @class */ (function (_super) {
    tslib_1.__extends(CalendarHammerConfig, _super);
    function CalendarHammerConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.overrides = {
            pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }
        };
        return _this;
    }
    return CalendarHammerConfig;
}(HammerGestureConfig));
export { CalendarHammerConfig };
function CalendarHammerConfig_tsickle_Closure_declarations() {
    /** @type {?} */
    CalendarHammerConfig.prototype.overrides;
}
/**
 * **Ignite UI for Angular Calendar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/calendar.html)
 *
 * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple
 * or range selection.
 *
 * Example:
 * ```html
 * <igx-calendar selection="range"></igx-calendar>
 * ```
 */
var IgxCalendarComponent = /** @class */ (function () {
    /**
     * @hidden
     */
    function IgxCalendarComponent() {
        /**
         * Sets/gets the `id` of the calendar.
         * If not set, the `id` will have value `"igx-calendar-0"`.
         * ```html
         * <igx-calendar id = "my-first-calendar"></igx-calendar>
         * ```
         * ```typescript
         * let calendarId =  this.calendar.id;
         * ```
         * \@memberof IgxCalendarComponent
         */
        this.id = "igx-calendar-" + NEXT_ID++;
        /**
         * Sets/gets whether the calendar header will be in vertical position.
         * Default value is `false`.
         * ```html
         * <igx-calendar [vertical] = "true"></igx-calendar>
         * ```
         * ```typescript
         * let isVertical = this.calendar.vertical;
         * ```
         */
        this.vertical = false;
        /**
         * Emits an event when a selection is made in the calendar.
         * Provides reference the `selectedDates` property in the `IgxCalendarComponent`.
         * ```html
         * <igx-calendar (onSelection) = "onSelection($event)"></igx-calendar>
         * ```
         * \@memberof IgxCalendarComponent
         */
        this.onSelection = new EventEmitter();
        /**
         * The default `tabindex` attribute for the component.
         *
         * @hidden
         */
        this.tabindex = 0;
        /**
         * The default aria role attribute for the component.
         *
         * @hidden
         */
        this.role = 'grid';
        /**
         * The default aria lebelled by attribute for the component.
         *
         * @hidden
         */
        this.ariaLabelledBy = 'calendar';
        /**
         * @hidden
         */
        this._activeView = CalendarView.DEFAULT;
        /**
         * @hidden
         */
        this._selection = CalendarSelection.SINGLE;
        /**
         * @hidden
         */
        this.rangeStarted = false;
        /**
         * @hidden
         */
        this._monthAction = '';
        /**
         * @hidden
         */
        this._locale = 'en';
        /**
         * @hidden
         */
        this._formatOptions = {
            day: 'numeric',
            month: 'short',
            weekday: 'short',
            year: 'numeric'
        };
        /**
         * @hidden
         */
        this._formatViews = {
            day: false,
            month: true,
            year: false
        };
        /**
         * @hidden
         */
        this._disabledDates = null;
        /**
         * @hidden
         */
        this._specialDates = null;
        /**
         * @hidden
         */
        this._onTouchedCallback = function () { };
        /**
         * @hidden
         */
        this._onChangeCallback = function () { };
        this.calendarModel = new Calendar();
    }
    Object.defineProperty(IgxCalendarComponent.prototype, "weekStart", {
        get: /**
         * Gets the start day of the week.
         * Can return a numeric or an enum representation of the week day.
         * Defaults to `Sunday` / `0`.
         * ```typescript
         * let weekStart =  this.calendar.weekStart;
         * ```
         * \@memberof IgxCalendarComponent
         * @return {?}
         */
        function () {
            return this.calendarModel.firstWeekDay;
        },
        set: /**
         * Sets the start day of the week.
         * Can be assigned to a numeric value or to `WEEKDAYS` enum value.
         * ```html
         * <igx-calendar [weekStart] = "1"></igx-calendar>
         * ```
         * \@memberof IgxCalendarComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.calendarModel.firstWeekDay = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "locale", {
        get: /**
         * Gets the `locale` of the calendar.
         * Default value is `"en"`.
         * ```typescript
         * let locale =  this.calendar.locale;
         * ```
         * \@memberof IgxCalendarComponent
         * @return {?}
         */
        function () {
            return this._locale;
        },
        set: /**
         * Sets the `locale` of the calendar.
         * Expects a valid BCP 47 language tag.
         * Default value is `"en"`.
         * ```html
         * <igx-calendar [locale] = "de"></igx-calendar>
         * ```
         * \@memberof IgxCalendarComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._locale = value;
            this.initFormatters();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "selection", {
        get: /**
         *
         * Gets the selection type of the calendar.
         * Default value is `"single"`.
         * Changing the type of selection in the calendar resets the currently
         * selected values if any.
         * ```typescript
         * let selectionType =  this.calendar.selection;
         * ```
         * \@memberof IgxCalendarComponent
         * @return {?}
         */
        function () {
            return this._selection;
        },
        set: /**
         * Sets the selection type of the calendar.
         * ```html
         * <igx-calendar [selection] = "'multi'"></igx-calendar>
         * ```
         * \@memberof IgxCalendarComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            switch (value) {
                case 'single':
                    this.selectedDates = null;
                    break;
                case 'multi':
                case 'range':
                    this.selectedDates = [];
                    break;
                default:
                    throw new Error('Invalid selection value');
            }
            this._onChangeCallback(this.selectedDates);
            this.rangeStarted = false;
            this._selection = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "viewDate", {
        get: /**
         * Gets the date that is presented in the calendar.
         * By default it is the current date.
         * ```typescript
         * let date = this.calendar.viewDate;
         * ```
         * \@memberof IgxCalendarComponent
         * @return {?}
         */
        function () {
            return this._viewDate;
        },
        set: /**
         * Sets the date that will be presented in the default view when the calendar renders.
         * ```html
         * <igx-calendar viewDate = "15/06/2018"></igx-calendar>
         * ```
         * \@memberof IgxCalendarComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._viewDate = this.getDateOnly(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "value", {
        get: /**
         * Gets the selected date(s) of the calendar.
         *
         * When the calendar selection is set to `single`, it returns
         * a single `Date` object.
         * Otherwise it is an array of `Date` objects.
         * ```typescript
         * let selectedDates =  this.calendar.value;
         * ```
         * \@memberof IgxCalendarComponent
         * @return {?}
         */
        function () {
            return this.selectedDates;
        },
        set: /**
         * Sets the selected date(s) of the calendar.
         *
         * When the calendar selection is set to `single`, it accepts
         * a single `Date` object.
         * Otherwise it is an array of `Date` objects.
         * ```typescript
         *  this.calendar.value =  new Date(`2016-06-12`);
         * ```
         * \@memberof IgxCalendarComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.selectDate(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "formatOptions", {
        get: /**
         * Gets the date format options of the calendar.
         * ```typescript
         * let dateFormatOptions = this.calendar.formatOptions.
         * ```
         * @return {?}
         */
        function () {
            return this._formatOptions;
        },
        set: /**
         * Sets the date format options of the calendar.
         * ```html
         * <igx-calendar> [formatOptions] = "{ day: '2-digit', month: 'short', weekday: 'long', year: 'numeric' }"</igx-calendar>
         * ```
         * \@memberof IgxCalendarComponent
         * @param {?} formatOptions
         * @return {?}
         */
        function (formatOptions) {
            this._formatOptions = Object.assign(this._formatOptions, formatOptions);
            this.initFormatters();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "formatViews", {
        get: /**
         * Gets whether the `day`, `month` and `year` should be rendered
         * according to the locale and formatOptions, if any.
         * ```typescript
         * let formatViews = this.calendar.formatViews;
         * ```
         * @return {?}
         */
        function () {
            return this._formatViews;
        },
        set: /**
         * Gets whether the `day`, `month` and `year` should be rendered
         * according to the locale and formatOptions, if any.
         * ```html
         * <igx-calendar [formatViews] = "{ day: true, month: false, year: true }"></igx-calendar>
         * ```
         * \@memberof IgxCalendarComponent
         * @param {?} formatViews
         * @return {?}
         */
        function (formatViews) {
            this._formatViews = Object.assign(this._formatViews, formatViews);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "disabledDates", {
        get: /**
         * Gets the disabled dates descriptors.
         * ```typescript
         * let disabledDates = this.calendar.disabledDates;
         * ```
         * @return {?}
         */
        function () {
            return this._disabledDates;
        },
        set: /**
         * Sets the disabled dates' descriptors.
         * ```typescript
         * \@ViewChild("MyCalendar")
         * public calendar: IgCalendarComponent;
         * ngOnInit(){
         *    this.calendar.disabledDates = [
         *      new DateRangeDescriptor(DateRangeType.Between, [new Date("2020-1-1"), new Date("2020-1-15")]),
         *      new DateRangeDescriptor(DateRangeType.Weekends)];
         * }
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabledDates = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "specialDates", {
        get: /**
         * Gets the special dates descriptors.
         * ```typescript
         * let specialDates = this.calendar.specialDates;
         * ```
         * @return {?}
         */
        function () {
            return this._specialDates;
        },
        set: /**
         * Sets the special dates' descriptors.
         * ```typescript
         * \@ViewChild("MyCalendar")
         * public calendar: IgCalendarComponent;
         * ngOnInit(){
         *    this.calendar.specialDates = [
         *      new DateRangeDescriptor(DateRangeType.Between, [new Date("2020-1-1"), new Date("2020-1-15")]),
         *      new DateRangeDescriptor(DateRangeType.Weekends)];
         * }
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._specialDates = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "styleClass", {
        get: /**
         * The default css class applied to the component.
         *
         * @hidden
         * @return {?}
         */
        function () {
            if (this.vertical) {
                return 'igx-calendar--vertical';
            }
            return 'igx-calendar';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "months", {
        /**
         * Returns an array of date objects which are then used to
         * properly render the month names.
         *
         * Used in the template of the component
         *
         * @hidden
         */
        get: /**
         * Returns an array of date objects which are then used to
         * properly render the month names.
         *
         * Used in the template of the component
         *
         * @hidden
         * @return {?}
         */
        function () {
            var /** @type {?} */ start = new Date(this._viewDate.getFullYear(), 0, 1);
            var /** @type {?} */ result = [];
            for (var /** @type {?} */ i = 0; i < 12; i++) {
                result.push(start);
                start = this.calendarModel.timedelta(start, 'month', 1);
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "decade", {
        /**
         * Returns an array of date objects which are then used to properly
         * render the years.
         *
         * Used in the template of the component.
         *
         * @hidden
         */
        get: /**
         * Returns an array of date objects which are then used to properly
         * render the years.
         *
         * Used in the template of the component.
         *
         * @hidden
         * @return {?}
         */
        function () {
            var /** @type {?} */ result = [];
            var /** @type {?} */ start = this._viewDate.getFullYear() - 3;
            var /** @type {?} */ end = this._viewDate.getFullYear() + 4;
            try {
                for (var _a = tslib_1.__values(range(start, end)), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var year = _b.value;
                    result.push(new Date(year, this._viewDate.getMonth(), this._viewDate.getDate()));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return result;
            var e_1, _c;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "isDefaultView", {
        get: /**
         * @return {?}
         */
        function () {
            return this._activeView === CalendarView.DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "isYearView", {
        get: /**
         * @return {?}
         */
        function () {
            return this._activeView === CalendarView.YEAR;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "isDecadeView", {
        get: /**
         * @return {?}
         */
        function () {
            return this._activeView === CalendarView.DECADE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "activeView", {
        /**
         * Gets the current active view of the calendar.
         * ```typescript
         * let activeView =  this.calendar.activeView;
         * ```
         */
        get: /**
         * Gets the current active view of the calendar.
         * ```typescript
         * let activeView =  this.calendar.activeView;
         * ```
         * @return {?}
         */
        function () {
            return this._activeView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "monthAction", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._monthAction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "headerTemplate", {
        /**
         * Gets the header template.
         * ```typescript
         * let headerTemplate =  this.calendar.headerTeamplate;
         * ```
         * @memberof IgxCalendarComponent
         */
        get: /**
         * Gets the header template.
         * ```typescript
         * let headerTemplate =  this.calendar.headerTeamplate;
         * ```
         * \@memberof IgxCalendarComponent
         * @return {?}
         */
        function () {
            if (this.headerTemplateDirective) {
                return this.headerTemplateDirective.template;
            }
            return null;
        },
        /**
         * Sets the header template.
         * ```html
         * <igx-calendar headerTemplateDirective = "igxCalendarHeader"></igx-calendar>
         * ```
         * @memberof IgxCalendarComponent
         */
        set: /**
         * Sets the header template.
         * ```html
         * <igx-calendar headerTemplateDirective = "igxCalendarHeader"></igx-calendar>
         * ```
         * \@memberof IgxCalendarComponent
         * @param {?} directive
         * @return {?}
         */
        function (directive) {
            this.headerTemplateDirective = directive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "subheaderTemplate", {
        /**
         * Gets the subheader template.
         * ```typescript
         * let subheaderTemplate = this.calendar.subheaderTemplate;
         * ```
         */
        get: /**
         * Gets the subheader template.
         * ```typescript
         * let subheaderTemplate = this.calendar.subheaderTemplate;
         * ```
         * @return {?}
         */
        function () {
            if (this.subheaderTemplateDirective) {
                return this.subheaderTemplateDirective.template;
            }
            return null;
        },
        /**
         * Sets the subheader template.
         * ```html
         * <igx-calendar subheaderTemplate = "igxCalendarSubheader"></igx-calendar>
         * ```
         * @memberof IgxCalendarComponent
         */
        set: /**
         * Sets the subheader template.
         * ```html
         * <igx-calendar subheaderTemplate = "igxCalendarSubheader"></igx-calendar>
         * ```
         * \@memberof IgxCalendarComponent
         * @param {?} directive
         * @return {?}
         */
        function (directive) {
            this.subheaderTemplateDirective = directive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "headerContext", {
        /**
         * Gets the context for the template marked with the `igxCalendarHeader` directive.
         * ```typescript
         * let headerContext =  this.calendar.headerContext;
         * ```
         */
        get: /**
         * Gets the context for the template marked with the `igxCalendarHeader` directive.
         * ```typescript
         * let headerContext =  this.calendar.headerContext;
         * ```
         * @return {?}
         */
        function () {
            var /** @type {?} */ date = this.headerDate;
            return this.generateContext(date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "context", {
        /**
         * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`
         * or `igxCalendarSubHeaderYear` directive.
         * ```typescript
         * let context =  this.calendar.context;
         * ```
         */
        get: /**
         * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`
         * or `igxCalendarSubHeaderYear` directive.
         * ```typescript
         * let context =  this.calendar.context;
         * ```
         * @return {?}
         */
        function () {
            var /** @type {?} */ date = this._viewDate;
            return this.generateContext(date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarComponent.prototype, "headerDate", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.selectedDates ? this.selectedDates : new Date();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @return {?}
     */
    IgxCalendarComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var /** @type {?} */ today = new Date();
        this.calendarModel.firstWeekDay = this.weekStart;
        this._viewDate = this._viewDate ? this._viewDate : today;
        this.initFormatters();
    };
    /**
     * Resets the formatters when locale or formatOptions are changed
     *
     * @hidden
     * @return {?}
     */
    IgxCalendarComponent.prototype.initFormatters = /**
     * Resets the formatters when locale or formatOptions are changed
     *
     * @hidden
     * @return {?}
     */
    function () {
        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });
        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });
        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });
        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });
        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });
    };
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxCalendarComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChangeCallback = fn;
    };
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxCalendarComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouchedCallback = fn;
    };
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.writeValue = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.selectedDates = value;
    };
    /**
     * Returns the locale representation of the month in the month view if enabled,
     * otherwise returns the default `Date.getMonth()` value.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.formattedMonth = /**
     * Returns the locale representation of the month in the month view if enabled,
     * otherwise returns the default `Date.getMonth()` value.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this._formatViews.month) {
            return this.formatterMonth.format(value);
        }
        return "" + value.getMonth();
    };
    /**
     * Returns the locale representation of the date in the default view if enabled,
     * otherwise returns the default `Date.getDate()` value.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.formattedDate = /**
     * Returns the locale representation of the date in the default view if enabled,
     * otherwise returns the default `Date.getDate()` value.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this._formatViews.day) {
            return this.formatterDay.format(value);
        }
        return "" + value.getDate();
    };
    /**
     * Returns the locale representation of the year in the year view if enabled,
     * otherwise returns the default `Date.getFullYear()` value.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.formattedYear = /**
     * Returns the locale representation of the year in the year view if enabled,
     * otherwise returns the default `Date.getFullYear()` value.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this._formatViews.year) {
            return this.formatterYear.format(value);
        }
        return "" + value.getFullYear();
    };
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.isCurrentMonth = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.viewDate.getMonth() === value.getMonth();
    };
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.isCurrentYear = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.viewDate.getFullYear() === value.getFullYear();
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxCalendarComponent.prototype.previousMonth = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'month', -1);
        this._monthAction = 'prev';
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxCalendarComponent.prototype.nextMonth = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'month', 1);
        this._monthAction = 'next';
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxCalendarComponent.prototype.previousYear = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'year', -1);
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxCalendarComponent.prototype.nextYear = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'year', 1);
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxCalendarComponent.prototype.getFormattedDate = /**
     * @hidden
     * @return {?}
     */
    function () {
        var /** @type {?} */ date = this.headerDate;
        return {
            monthday: this.formatterMonthday.format(date),
            weekday: this.formatterWeekday.format(date),
        };
    };
    /**
     * @hidden
     * @param {?} instance
     * @return {?}
     */
    IgxCalendarComponent.prototype.childClicked = /**
     * @hidden
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        if (instance.isPrevMonth) {
            this.previousMonth();
        }
        if (instance.isNextMonth) {
            this.nextMonth();
        }
        this.selectDateFromClient(instance.date);
        this.onSelection.emit(this.selectedDates);
    };
    /**
     * @param {?} event
     * @param {?} isLast
     * @return {?}
     */
    IgxCalendarComponent.prototype.animationDone = /**
     * @param {?} event
     * @param {?} isLast
     * @return {?}
     */
    function (event, isLast) {
        if (isLast) {
            var /** @type {?} */ date_1 = this.dates.find(function (d) { return d.selected; });
            if (date_1) {
                setTimeout(function () { return date_1.nativeElement.focus(); }, parseInt(slideInRight.options.params["duration"], 10));
            }
        }
    };
    /**
     * Selects date(s) (based on the selection type).
     * ```typescript
     * this.calendar.selectDate(new Date(`2018-06-12`));
     * ```
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.selectDate = /**
     * Selects date(s) (based on the selection type).
     * ```typescript
     * this.calendar.selectDate(new Date(`2018-06-12`));
     * ```
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {
            throw new Error('Date or array should be set for the selectDate method.');
        }
        switch (this.selection) {
            case 'single':
                this.selectSingle(/** @type {?} */ (value));
                break;
            case 'multi':
                this.selectMultiple(value);
                break;
            case 'range':
                this.selectRange(value);
                break;
        }
    };
    /**
     * Deselects date(s) (based on the selection type).
     * ```typescript
     * this.calendar.deselectDate(new Date(`2018-06-12`));
     * ````
     * @param {?=} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.deselectDate = /**
     * Deselects date(s) (based on the selection type).
     * ```typescript
     * this.calendar.deselectDate(new Date(`2018-06-12`));
     * ````
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (this.selectedDates === null || this.selectedDates === []) {
            return;
        }
        if (value === null || value === undefined) {
            this.selectedDates = this.selection === 'single' ? null : [];
            this._onChangeCallback(this.selectedDates);
            return;
        }
        switch (this.selection) {
            case 'single':
                this.deselectSingle(/** @type {?} */ (value));
                break;
            case 'multi':
                this.deselectMultiple(/** @type {?} */ (value));
                break;
            case 'range':
                this.deselectRange(/** @type {?} */ (value));
                break;
        }
    };
    /**
     * Checks whether a date is disabled.
     * ```typescript
     * this.calendar.isDateDisabled(new Date(`2018-06-12`));
     * ```
     * @hidden
     * @param {?} date
     * @return {?}
     */
    IgxCalendarComponent.prototype.isDateDisabled = /**
     * Checks whether a date is disabled.
     * ```typescript
     * this.calendar.isDateDisabled(new Date(`2018-06-12`));
     * ```
     * @hidden
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.disabledDates === null) {
            return false;
        }
        return this.isDateInRanges(date, this.disabledDates);
    };
    /**
     * Checks whether a date is special.
     * ```typescript
     * this.calendar.isDateSpecial(new Date(`2018-06-12`));
     * ```
     * @hidden
     * @param {?} date
     * @return {?}
     */
    IgxCalendarComponent.prototype.isDateSpecial = /**
     * Checks whether a date is special.
     * ```typescript
     * this.calendar.isDateSpecial(new Date(`2018-06-12`));
     * ```
     * @hidden
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.specialDates === null) {
            return false;
        }
        return this.isDateInRanges(date, this.specialDates);
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxCalendarComponent.prototype.generateWeekHeader = /**
     * @hidden
     * @return {?}
     */
    function () {
        var /** @type {?} */ dayNames = [];
        var /** @type {?} */ rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];
        try {
            for (var rv_1 = tslib_1.__values(rv), rv_1_1 = rv_1.next(); !rv_1_1.done; rv_1_1 = rv_1.next()) {
                var day = rv_1_1.value;
                dayNames.push(this.formatterWeekday.format(day.date));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (rv_1_1 && !rv_1_1.done && (_a = rv_1.return)) _a.call(rv_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return dayNames;
        var e_2, _a;
    };
    Object.defineProperty(IgxCalendarComponent.prototype, "getCalendarMonth", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.changeYear = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._viewDate = new Date(event.getFullYear(), this._viewDate.getMonth());
        this._activeView = CalendarView.DEFAULT;
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.changeMonth = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._viewDate = new Date(this._viewDate.getFullYear(), event.getMonth());
        this._activeView = CalendarView.DEFAULT;
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxCalendarComponent.prototype.activeViewYear = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._activeView = CalendarView.YEAR;
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxCalendarComponent.prototype.activeViewDecade = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._activeView = CalendarView.DECADE;
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.onScroll = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        var /** @type {?} */ delta = event.deltaY < 0 ? -1 : 1;
        this.generateYearRange(delta);
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.onPan = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ delta = event.deltaY < 0 ? 1 : -1;
        this.generateYearRange(delta);
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.onKeydownPageUp = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.previousMonth();
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.onKeydownPageDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.nextMonth();
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.onKeydownShiftPageUp = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.previousYear();
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.onKeydownShiftPageDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.nextYear();
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.onKeydownArrowUp = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        var /** @type {?} */ node = this.dates.find(function (date) { return date.nativeElement === event.target; });
        if (!node) {
            return;
        }
        var /** @type {?} */ dates = this.dates.toArray();
        for (var /** @type {?} */ index = dates.indexOf(node); index - 7 > -1; index -= 7) {
            var /** @type {?} */ date = dates[index - 7];
            if (!date.isDisabled) {
                date.nativeElement.focus();
                break;
            }
        }
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.onKeydownArrowDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        var /** @type {?} */ node = this.dates.find(function (date) { return date.nativeElement === event.target; });
        if (!node) {
            return;
        }
        var /** @type {?} */ dates = this.dates.toArray();
        for (var /** @type {?} */ index = dates.indexOf(node); index + 7 < this.dates.length; index += 7) {
            var /** @type {?} */ date = dates[index + 7];
            if (!date.isDisabled) {
                date.nativeElement.focus();
                break;
            }
        }
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.onKeydownArrowLeft = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        var /** @type {?} */ node = this.dates.find(function (date) { return date.nativeElement === event.target; });
        if (!node) {
            return;
        }
        var /** @type {?} */ dates = this.dates.toArray();
        for (var /** @type {?} */ index = dates.indexOf(node); index > 0; index--) {
            var /** @type {?} */ date = dates[index - 1];
            if (!date.isDisabled) {
                date.nativeElement.focus();
                break;
            }
        }
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.onKeydownArrowRight = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        var /** @type {?} */ node = this.dates.find(function (date) { return date.nativeElement === event.target; });
        if (!node) {
            return;
        }
        var /** @type {?} */ dates = this.dates.toArray();
        for (var /** @type {?} */ index = dates.indexOf(node); index < this.dates.length - 1; index++) {
            var /** @type {?} */ date = dates[index + 1];
            if (!date.isDisabled) {
                date.nativeElement.focus();
                break;
            }
        }
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.onKeydownHome = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        var /** @type {?} */ dates = this.dates.filter(function (d) { return d.isCurrentMonth; });
        for (var /** @type {?} */ i = 0; i < dates.length; i++) {
            if (!dates[i].isDisabled) {
                dates[i].nativeElement.focus();
                break;
            }
        }
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxCalendarComponent.prototype.onKeydownEnd = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        var /** @type {?} */ dates = this.dates.filter(function (d) { return d.isCurrentMonth; });
        for (var /** @type {?} */ i = dates.length - 1; i >= 0; i--) {
            if (!dates[i].isDisabled) {
                dates[i].nativeElement.focus();
                break;
            }
        }
    };
    /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    IgxCalendarComponent.prototype.dateTracker = /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return item.date.getMonth() + "--" + item.date.getDate();
    };
    /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    IgxCalendarComponent.prototype.rowTracker = /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return "" + item[index].date.getMonth() + item[index].date.getDate();
    };
    /**
     * Performs a single selection.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.selectSingle = /**
     * Performs a single selection.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.selectedDates = this.getDateOnly(value);
        this._onChangeCallback(this.selectedDates);
    };
    /**
     * Performs a multiple selection
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.selectMultiple = /**
     * Performs a multiple selection
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (Array.isArray(value)) {
            this.selectedDates = this.selectedDates.concat(value.map(function (v) { return _this.getDateOnly(v); }));
        }
        else {
            var /** @type {?} */ valueDateOnly_1 = this.getDateOnly(value);
            if (this.selectedDates.every(function (date) { return date.getTime() !== valueDateOnly_1.getTime(); })) {
                this.selectedDates.push(valueDateOnly_1);
            }
            else {
                this.selectedDates = this.selectedDates.filter(function (date) { return date.getTime() !== valueDateOnly_1.getTime(); });
            }
        }
        this._onChangeCallback(this.selectedDates);
    };
    /**
     * @hidden
     * @param {?} value
     * @param {?=} excludeDisabledDates
     * @return {?}
     */
    IgxCalendarComponent.prototype.selectRange = /**
     * @hidden
     * @param {?} value
     * @param {?=} excludeDisabledDates
     * @return {?}
     */
    function (value, excludeDisabledDates) {
        var _this = this;
        if (excludeDisabledDates === void 0) { excludeDisabledDates = false; }
        var /** @type {?} */ start;
        var /** @type {?} */ end;
        if (Array.isArray(value)) {
            this.rangeStarted = false;
            value.sort(function (a, b) { return a.valueOf() - b.valueOf(); });
            start = this.getDateOnly(value[0]);
            end = this.getDateOnly(value[value.length - 1]);
            this.selectedDates = tslib_1.__spread([start], this.generateDateRange(start, end));
        }
        else {
            if (!this.rangeStarted) {
                this.rangeStarted = true;
                this.selectedDates = [value];
            }
            else {
                this.rangeStarted = false;
                if (this.selectedDates[0].getTime() === value.getTime()) {
                    this.selectedDates = [];
                    this._onChangeCallback(this.selectedDates);
                    return;
                }
                this.selectedDates.push(value);
                this.selectedDates.sort(function (a, b) { return a.valueOf() - b.valueOf(); });
                start = this.selectedDates.shift();
                end = this.selectedDates.pop();
                this.selectedDates = tslib_1.__spread([start], this.generateDateRange(start, end));
            }
        }
        if (excludeDisabledDates) {
            this.selectedDates = this.selectedDates.filter(function (d) { return !_this.isDateDisabled(d); });
        }
        this._onChangeCallback(this.selectedDates);
    };
    /**
     * Performs a single deselection.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.deselectSingle = /**
     * Performs a single deselection.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.selectedDates !== null &&
            this.getDateOnlyInMs(/** @type {?} */ (value)) === this.getDateOnlyInMs(this.selectedDates)) {
            this.selectedDates = null;
            this._onChangeCallback(this.selectedDates);
        }
    };
    /**
     * Performs a multiple deselection.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.deselectMultiple = /**
     * Performs a multiple deselection.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        value = value.filter(function (v) { return v !== null; });
        var /** @type {?} */ selectedDatesCount = this.selectedDates.length;
        var /** @type {?} */ datesInMsToDeselect = new Set(value.map(function (v) { return _this.getDateOnlyInMs(v); }));
        for (var /** @type {?} */ i = this.selectedDates.length - 1; i >= 0; i--) {
            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {
                this.selectedDates.splice(i, 1);
            }
        }
        if (this.selectedDates.length !== selectedDatesCount) {
            this._onChangeCallback(this.selectedDates);
        }
    };
    /**
     * Performs a range deselection.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.deselectRange = /**
     * Performs a range deselection.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        value = value.filter(function (v) { return v !== null && isDate(v); });
        if (value.length < 1) {
            return;
        }
        value.sort(function (a, b) { return a.valueOf() - b.valueOf(); });
        var /** @type {?} */ valueStart = this.getDateOnlyInMs(value[0]);
        var /** @type {?} */ valueEnd = this.getDateOnlyInMs(value[value.length - 1]);
        this.selectedDates.sort(function (a, b) { return a.valueOf() - b.valueOf(); });
        var /** @type {?} */ selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);
        var /** @type {?} */ selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);
        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {
            this.selectedDates = [];
            this._onChangeCallback(this.selectedDates);
        }
    };
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.selectDateFromClient = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        switch (this.selection) {
            case 'single':
            case 'multi':
                if (!this.isDateDisabled(value)) {
                    this.selectDate(value);
                }
                break;
            case 'range':
                this.selectRange(value, true);
                break;
        }
    };
    /**
     * @hidden
     * @param {?} date
     * @param {?} ranges
     * @return {?}
     */
    IgxCalendarComponent.prototype.isDateInRanges = /**
     * @hidden
     * @param {?} date
     * @param {?} ranges
     * @return {?}
     */
    function (date, ranges) {
        date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
        var /** @type {?} */ dateInMs = date.getTime();
        try {
            for (var ranges_1 = tslib_1.__values(ranges), ranges_1_1 = ranges_1.next(); !ranges_1_1.done; ranges_1_1 = ranges_1.next()) {
                var descriptor = ranges_1_1.value;
                var /** @type {?} */ dRanges = descriptor.dateRange ? descriptor.dateRange.map(function (r) { return new Date(r.getFullYear(), r.getMonth(), r.getDate()); }) : undefined;
                switch (descriptor.type) {
                    case (DateRangeType.After):
                        if (dateInMs > dRanges[0].getTime()) {
                            return true;
                        }
                        break;
                    case (DateRangeType.Before):
                        if (dateInMs < dRanges[0].getTime()) {
                            return true;
                        }
                        break;
                    case (DateRangeType.Between):
                        var /** @type {?} */ dRange = dRanges.map(function (d) { return d.getTime(); });
                        var /** @type {?} */ min = Math.min(dRange[0], dRange[1]);
                        var /** @type {?} */ max = Math.max(dRange[0], dRange[1]);
                        if (dateInMs >= min && dateInMs <= max) {
                            return true;
                        }
                        break;
                    case (DateRangeType.Specific):
                        var /** @type {?} */ datesInMs = dRanges.map(function (d) { return d.getTime(); });
                        try {
                            for (var datesInMs_1 = tslib_1.__values(datesInMs), datesInMs_1_1 = datesInMs_1.next(); !datesInMs_1_1.done; datesInMs_1_1 = datesInMs_1.next()) {
                                var specificDateInMs = datesInMs_1_1.value;
                                if (dateInMs === specificDateInMs) {
                                    return true;
                                }
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (datesInMs_1_1 && !datesInMs_1_1.done && (_a = datesInMs_1.return)) _a.call(datesInMs_1);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        break;
                    case (DateRangeType.Weekdays):
                        var /** @type {?} */ day = date.getDay();
                        if (day % 6 !== 0) {
                            return true;
                        }
                        break;
                    case (DateRangeType.Weekends):
                        var /** @type {?} */ weekday = date.getDay();
                        if (weekday % 6 === 0) {
                            return true;
                        }
                        break;
                    default:
                        return false;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (ranges_1_1 && !ranges_1_1.done && (_b = ranges_1.return)) _b.call(ranges_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return false;
        var e_4, _b, e_3, _a;
    };
    /**
     * Helper method building and returning the context object inside
     * the calendar templates.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxCalendarComponent.prototype.generateContext = /**
     * Helper method building and returning the context object inside
     * the calendar templates.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        var /** @type {?} */ formatObject = tslib_1.__assign({ monthView: function () { return _this.activeViewYear(); }, yearView: function () { return _this.activeViewDecade(); } }, this.calendarModel.formatToParts(value, this.locale, this._formatOptions, ['era', 'year', 'month', 'day', 'weekday']));
        return { $implicit: formatObject };
    };
    /**
     * @hidden
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    IgxCalendarComponent.prototype.generateDateRange = /**
     * @hidden
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    function (start, end) {
        var /** @type {?} */ result = [];
        start = this.getDateOnly(start);
        end = this.getDateOnly(end);
        while (start.getTime() !== end.getTime()) {
            start = this.calendarModel.timedelta(start, 'day', 1);
            result.push(start);
        }
        return result;
    };
    /**
     * @hidden
     * @param {?} delta
     * @return {?}
     */
    IgxCalendarComponent.prototype.generateYearRange = /**
     * @hidden
     * @param {?} delta
     * @return {?}
     */
    function (delta) {
        var /** @type {?} */ currentYear = new Date().getFullYear();
        if ((delta > 0 && this._viewDate.getFullYear() - currentYear >= 95) ||
            (delta < 0 && currentYear - this._viewDate.getFullYear() >= 95)) {
            return;
        }
        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'year', delta);
    };
    /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    IgxCalendarComponent.prototype.getDateOnlyInMs = /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.getDateOnly(date).getTime();
    };
    /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    IgxCalendarComponent.prototype.getDateOnly = /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    };
    IgxCalendarComponent.decorators = [
        { type: Component, args: [{
                    animations: [
                        trigger('animateView', [
                            transition('void => 0', useAnimation(fadeIn)),
                            transition('void => *', useAnimation(scaleInCenter, {
                                params: {
                                    duration: '.2s',
                                    fromScale: .9
                                }
                            }))
                        ]),
                        trigger('animateChange', [
                            transition('* => prev', useAnimation(slideInLeft, {
                                params: {
                                    fromPosition: 'translateX(-30%)'
                                }
                            })),
                            transition('* => next', useAnimation(slideInRight, {
                                params: {
                                    fromPosition: 'translateX(30%)'
                                }
                            }))
                        ])
                    ],
                    providers: [
                        {
                            multi: true,
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: IgxCalendarComponent
                        },
                        {
                            provide: HAMMER_GESTURE_CONFIG,
                            useClass: CalendarHammerConfig
                        }
                    ],
                    selector: 'igx-calendar',
                    template: "<ng-template let-result #defaultHeader>\n    <span class=\"date-text\">{{ getFormattedDate().weekday }},&nbsp;</span>\n    <span class=\"date-text\">{{ getFormattedDate().monthday }}</span>\n</ng-template>\n\n<ng-template let-result #defaultMonth>\n    <span (click)=\"activeViewYear()\" class=\"date__el\">\n        {{ formattedMonth(viewDate) }}\n    </span>\n    <span (click)=\"activeViewDecade()\" class=\"date__el\">\n        {{ formattedYear(viewDate) }}\n    </span>\n</ng-template>\n\n<div *ngIf=\"selection === 'single'\" class=\"igx-calendar__header\">\n    <h5 class=\"igx-calendar__header-year\">{{ formattedYear(headerDate) }}</h5>\n    <h2 class=\"igx-calendar__header-date\">\n        <ng-container *ngTemplateOutlet=\"headerTemplate ? headerTemplate : defaultHeader; context: headerContext\">\n        </ng-container>\n    </h2>\n</div>\n\n<div *ngIf=\"isDefaultView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\" (swiperight)=\"previousMonth()\" (swipeleft)=\"nextMonth()\">\n    <div class=\"igx-calendar__body-picker\">\n        <div class=\"prev\" (click)=\"previousMonth()\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_left</igx-icon>\n        </div>\n        <div class=\"date\">\n            <ng-container *ngTemplateOutlet=\"subheaderTemplate ? subheaderTemplate : defaultMonth; context: context\">\n            </ng-container>\n        </div>\n        <div class=\"next\" (click)=\"nextMonth()\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_right</igx-icon>\n        </div>\n    </div>\n\n    <div class=\"igx-calendar__body-row\">\n        <span *ngFor=\"let dayName of generateWeekHeader()\" class=\"igx-calendar__label\">\n            {{ dayName | titlecase }}\n        </span>\n    </div>\n\n    <div *ngFor=\"let week of getCalendarMonth; last as isLast; index as i; trackBy: rowTracker\" class=\"igx-calendar__body-row\" [@animateChange]=\"monthAction\"\n        (@animateChange.done)=\"animationDone($event, isLast)\">\n        <span [igxCalendarDate]=\"day\" (onDateSelection)=\"childClicked($event)\" *ngFor=\"let day of week; trackBy: dateTracker\">\n            {{ formattedDate(day.date) }}\n        </span>\n    </div>\n</div>\n\n<div *ngIf=\"isYearView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\">\n    <div class=\"igx-calendar__body-row--wrap\">\n        <div (onMonthSelection)=\"changeMonth($event)\" [igxCalendarMonth]=\"month\" [index]=\"i\" *ngFor=\"let month of months; index as i;\">\n            {{ formattedMonth(month) | titlecase }}\n        </div>\n    </div>\n</div>\n\n<div *ngIf=\"isDecadeView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\">\n    <div class=\"igx-calendar__body-column\" (wheel)=\"onScroll($event)\" (pan)=\"onPan($event)\">\n        <span (onYearSelection)=\"changeYear($event)\" [igxCalendarYear]=\"year\" *ngFor=\"let year of decade\">\n            {{ formattedYear(year) }}\n        </span>\n    </div>\n</div>\n"
                },] },
    ];
    /** @nocollapse */
    IgxCalendarComponent.ctorParameters = function () { return []; };
    IgxCalendarComponent.propDecorators = {
        "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
        "weekStart": [{ type: Input },],
        "locale": [{ type: Input },],
        "selection": [{ type: Input },],
        "viewDate": [{ type: Input },],
        "value": [{ type: Input },],
        "formatOptions": [{ type: Input },],
        "formatViews": [{ type: Input },],
        "vertical": [{ type: Input },],
        "onSelection": [{ type: Output },],
        "dates": [{ type: ViewChildren, args: [forwardRef(function () { return IgxCalendarDateDirective; }), { read: IgxCalendarDateDirective },] },],
        "tabindex": [{ type: HostBinding, args: ['attr.tabindex',] },],
        "role": [{ type: HostBinding, args: ['attr.role',] },],
        "ariaLabelledBy": [{ type: HostBinding, args: ['attr.aria-labelledby',] },],
        "styleClass": [{ type: HostBinding, args: ['class',] },],
        "headerTemplateDirective": [{ type: ContentChild, args: [forwardRef(function () { return IgxCalendarHeaderTemplateDirective; }), { read: IgxCalendarHeaderTemplateDirective },] },],
        "subheaderTemplateDirective": [{ type: ContentChild, args: [forwardRef(function () { return IgxCalendarSubheaderTemplateDirective; }), { read: IgxCalendarSubheaderTemplateDirective },] },],
        "onKeydownPageUp": [{ type: HostListener, args: ['keydown.pageup', ['$event'],] },],
        "onKeydownPageDown": [{ type: HostListener, args: ['keydown.pagedown', ['$event'],] },],
        "onKeydownShiftPageUp": [{ type: HostListener, args: ['keydown.shift.pageup', ['$event'],] },],
        "onKeydownShiftPageDown": [{ type: HostListener, args: ['keydown.shift.pagedown', ['$event'],] },],
        "onKeydownArrowUp": [{ type: HostListener, args: ['keydown.arrowup', ['$event'],] },],
        "onKeydownArrowDown": [{ type: HostListener, args: ['keydown.arrowdown', ['$event'],] },],
        "onKeydownArrowLeft": [{ type: HostListener, args: ['keydown.arrowleft', ['$event'],] },],
        "onKeydownArrowRight": [{ type: HostListener, args: ['keydown.arrowright', ['$event'],] },],
        "onKeydownHome": [{ type: HostListener, args: ['keydown.home', ['$event'],] },],
        "onKeydownEnd": [{ type: HostListener, args: ['keydown.end', ['$event'],] },],
    };
    return IgxCalendarComponent;
}());
export { IgxCalendarComponent };
function IgxCalendarComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCalendarComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCalendarComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxCalendarComponent.propDecorators;
    /**
     * Sets/gets the `id` of the calendar.
     * If not set, the `id` will have value `"igx-calendar-0"`.
     * ```html
     * <igx-calendar id = "my-first-calendar"></igx-calendar>
     * ```
     * ```typescript
     * let calendarId =  this.calendar.id;
     * ```
     * \@memberof IgxCalendarComponent
     * @type {?}
     */
    IgxCalendarComponent.prototype.id;
    /**
     * Sets/gets whether the calendar header will be in vertical position.
     * Default value is `false`.
     * ```html
     * <igx-calendar [vertical] = "true"></igx-calendar>
     * ```
     * ```typescript
     * let isVertical = this.calendar.vertical;
     * ```
     * @type {?}
     */
    IgxCalendarComponent.prototype.vertical;
    /**
     * Emits an event when a selection is made in the calendar.
     * Provides reference the `selectedDates` property in the `IgxCalendarComponent`.
     * ```html
     * <igx-calendar (onSelection) = "onSelection($event)"></igx-calendar>
     * ```
     * \@memberof IgxCalendarComponent
     * @type {?}
     */
    IgxCalendarComponent.prototype.onSelection;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.dates;
    /**
     * The default `tabindex` attribute for the component.
     *
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.tabindex;
    /**
     * The default aria role attribute for the component.
     *
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.role;
    /**
     * The default aria lebelled by attribute for the component.
     *
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.ariaLabelledBy;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.headerTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.subheaderTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._viewDate;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.calendarModel;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._activeView;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.selectedDates;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._selection;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.rangeStarted;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._monthAction;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._locale;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._formatOptions;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._formatViews;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._disabledDates;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.formatterMonth;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.formatterDay;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.formatterYear;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.formatterMonthday;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.formatterWeekday;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._specialDates;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._onTouchedCallback;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._onChangeCallback;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9jYWxlbmRhci9jYWxlbmRhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RSxPQUFPLEVBQ0gsU0FBUyxFQUNULFlBQVksRUFDWixZQUFZLEVBQ1osVUFBVSxFQUNWLFdBQVcsRUFDWCxZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sRUFDTixTQUFTLEVBQ1QsWUFBWSxFQUNmLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN2RixPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdEYsT0FBTyxFQUFFLFFBQVEsRUFBaUIsS0FBSyxFQUFZLE1BQU0sWUFBWSxDQUFDO0FBQ3RFLE9BQU8sRUFDSCx3QkFBd0IsRUFDeEIsa0NBQWtDLEVBQ2xDLHFDQUFxQyxFQUN4QyxNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBdUIsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDN0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUU5QixxQkFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7O1lBU0gsUUFBUTtXQUNULE9BQU87V0FDUCxPQUFPOzs7QUFHbkIsSUFBQTtJQUEwQyxnREFBbUI7OzswQkFDdEM7WUFDZixHQUFHLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixFQUFFLFNB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QVksU0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsQ0FBQztzQ0FTekMsWUFBWSxTQUFDLGtCQUFrQixFQUFFLENBQUMsUUFBUSxDQUFDO3lDQVMzQyxZQUFZLFNBQUMsc0JBQXNCLEVBQUUsQ0FBQyxRQUFRLENBQUM7MkNBUy9DLFlBQVksU0FBQyx3QkFBd0IsRUFBRSxDQUFDLFFBQVEsQ0FBQztxQ0FTakQsWUFBWSxTQUFDLGlCQUFpQixFQUFFLENBQUMsUUFBUSxDQUFDO3VDQW1CMUMsWUFBWSxTQUFDLG1CQUFtQixFQUFFLENBQUMsUUFBUSxDQUFDO3VDQW1CNUMsWUFBWSxTQUFDLG1CQUFtQixFQUFFLENBQUMsUUFBUSxDQUFDO3dDQW1CNUMsWUFBWSxTQUFDLG9CQUFvQixFQUFFLENBQUMsUUFBUSxDQUFDO2tDQW1CN0MsWUFBWSxTQUFDLGNBQWMsRUFBRSxDQUFDLFFBQVEsQ0FBQztpQ0FnQnZDLFlBQVksU0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLENBQUM7OytCQXZwQzNDOztTQWlLYSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cmFuc2l0aW9uLCB0cmlnZ2VyLCB1c2VBbmltYXRpb24gfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgZm9yd2FyZFJlZixcbiAgICBIb3N0QmluZGluZyxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5wdXQsXG4gICAgT25Jbml0LFxuICAgIE91dHB1dCxcbiAgICBRdWVyeUxpc3QsXG4gICAgVmlld0NoaWxkcmVuXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgSEFNTUVSX0dFU1RVUkVfQ09ORklHLCBIYW1tZXJHZXN0dXJlQ29uZmlnIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBmYWRlSW4sIHNjYWxlSW5DZW50ZXIsIHNsaWRlSW5MZWZ0LCBzbGlkZUluUmlnaHQgfSBmcm9tICcuLi9hbmltYXRpb25zL21haW4nO1xuaW1wb3J0IHsgQ2FsZW5kYXIsIElDYWxlbmRhckRhdGUsIHJhbmdlLCBXRUVLREFZUyB9IGZyb20gJy4vY2FsZW5kYXInO1xuaW1wb3J0IHtcbiAgICBJZ3hDYWxlbmRhckRhdGVEaXJlY3RpdmUsXG4gICAgSWd4Q2FsZW5kYXJIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICBJZ3hDYWxlbmRhclN1YmhlYWRlclRlbXBsYXRlRGlyZWN0aXZlXG59IGZyb20gJy4vY2FsZW5kYXIuZGlyZWN0aXZlcyc7XG5pbXBvcnQgeyBEYXRlUmFuZ2VEZXNjcmlwdG9yLCBEYXRlUmFuZ2VUeXBlIH0gZnJvbSAnLi4vY29yZS9kYXRlcy9kYXRlUmFuZ2UnO1xuaW1wb3J0IHsgaXNEYXRlIH0gZnJvbSAndXRpbCc7XG5cbmxldCBORVhUX0lEID0gMDtcblxuZXhwb3J0IGVudW0gQ2FsZW5kYXJWaWV3IHtcbiAgICBERUZBVUxULFxuICAgIFlFQVIsXG4gICAgREVDQURFXG59XG5cbmV4cG9ydCBlbnVtIENhbGVuZGFyU2VsZWN0aW9uIHtcbiAgICBTSU5HTEUgPSAnc2luZ2xlJyxcbiAgICBNVUxUSSA9ICdtdWx0aScsXG4gICAgUkFOR0UgPSAncmFuZ2UnXG59XG5cbmV4cG9ydCBjbGFzcyBDYWxlbmRhckhhbW1lckNvbmZpZyBleHRlbmRzIEhhbW1lckdlc3R1cmVDb25maWcge1xuICAgIHB1YmxpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIHBhbjogeyBkaXJlY3Rpb246IEhhbW1lci5ESVJFQ1RJT05fVkVSVElDQUwsIHRocmVzaG9sZDogMSB9XG4gICAgfTtcbn1cblxuLyoqXG4gKiAqKklnbml0ZSBVSSBmb3IgQW5ndWxhciBDYWxlbmRhcioqIC1cbiAqIFtEb2N1bWVudGF0aW9uXShodHRwczovL3d3dy5pbmZyYWdpc3RpY3MuY29tL3Byb2R1Y3RzL2lnbml0ZS11aS1hbmd1bGFyL2FuZ3VsYXIvY29tcG9uZW50cy9jYWxlbmRhci5odG1sKVxuICpcbiAqIFRoZSBJZ25pdGUgVUkgQ2FsZW5kYXIgcHJvdmlkZXMgYW4gZWFzeSB3YXkgdG8gZGlzcGxheSBhIGNhbGVuZGFyIGFuZCBhbGxvdyB1c2VycyB0byBzZWxlY3QgZGF0ZXMgdXNpbmcgc2luZ2xlLCBtdWx0aXBsZVxuICogb3IgcmFuZ2Ugc2VsZWN0aW9uLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGBodG1sXG4gKiA8aWd4LWNhbGVuZGFyIHNlbGVjdGlvbj1cInJhbmdlXCI+PC9pZ3gtY2FsZW5kYXI+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgYW5pbWF0aW9uczogW1xuICAgICAgICB0cmlnZ2VyKCdhbmltYXRlVmlldycsIFtcbiAgICAgICAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gMCcsIHVzZUFuaW1hdGlvbihmYWRlSW4pKSxcbiAgICAgICAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gKicsIHVzZUFuaW1hdGlvbihzY2FsZUluQ2VudGVyLCB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAnLjJzJyxcbiAgICAgICAgICAgICAgICAgICAgZnJvbVNjYWxlOiAuOVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKVxuICAgICAgICBdKSxcbiAgICAgICAgdHJpZ2dlcignYW5pbWF0ZUNoYW5nZScsIFtcbiAgICAgICAgICAgIHRyYW5zaXRpb24oJyogPT4gcHJldicsIHVzZUFuaW1hdGlvbihzbGlkZUluTGVmdCwge1xuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICBmcm9tUG9zaXRpb246ICd0cmFuc2xhdGVYKC0zMCUpJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIHRyYW5zaXRpb24oJyogPT4gbmV4dCcsIHVzZUFuaW1hdGlvbihzbGlkZUluUmlnaHQsIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbVBvc2l0aW9uOiAndHJhbnNsYXRlWCgzMCUpJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKVxuICAgICAgICBdKVxuICAgIF0sXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogSWd4Q2FsZW5kYXJDb21wb25lbnRcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogSEFNTUVSX0dFU1RVUkVfQ09ORklHLFxuICAgICAgICAgICAgdXNlQ2xhc3M6IENhbGVuZGFySGFtbWVyQ29uZmlnXG4gICAgICAgIH1cbiAgICBdLFxuICAgIHNlbGVjdG9yOiAnaWd4LWNhbGVuZGFyJyxcbiAgICB0ZW1wbGF0ZTogYDxuZy10ZW1wbGF0ZSBsZXQtcmVzdWx0ICNkZWZhdWx0SGVhZGVyPlxuICAgIDxzcGFuIGNsYXNzPVwiZGF0ZS10ZXh0XCI+e3sgZ2V0Rm9ybWF0dGVkRGF0ZSgpLndlZWtkYXkgfX0sJm5ic3A7PC9zcGFuPlxuICAgIDxzcGFuIGNsYXNzPVwiZGF0ZS10ZXh0XCI+e3sgZ2V0Rm9ybWF0dGVkRGF0ZSgpLm1vbnRoZGF5IH19PC9zcGFuPlxuPC9uZy10ZW1wbGF0ZT5cblxuPG5nLXRlbXBsYXRlIGxldC1yZXN1bHQgI2RlZmF1bHRNb250aD5cbiAgICA8c3BhbiAoY2xpY2spPVwiYWN0aXZlVmlld1llYXIoKVwiIGNsYXNzPVwiZGF0ZV9fZWxcIj5cbiAgICAgICAge3sgZm9ybWF0dGVkTW9udGgodmlld0RhdGUpIH19XG4gICAgPC9zcGFuPlxuICAgIDxzcGFuIChjbGljayk9XCJhY3RpdmVWaWV3RGVjYWRlKClcIiBjbGFzcz1cImRhdGVfX2VsXCI+XG4gICAgICAgIHt7IGZvcm1hdHRlZFllYXIodmlld0RhdGUpIH19XG4gICAgPC9zcGFuPlxuPC9uZy10ZW1wbGF0ZT5cblxuPGRpdiAqbmdJZj1cInNlbGVjdGlvbiA9PT0gJ3NpbmdsZSdcIiBjbGFzcz1cImlneC1jYWxlbmRhcl9faGVhZGVyXCI+XG4gICAgPGg1IGNsYXNzPVwiaWd4LWNhbGVuZGFyX19oZWFkZXIteWVhclwiPnt7IGZvcm1hdHRlZFllYXIoaGVhZGVyRGF0ZSkgfX08L2g1PlxuICAgIDxoMiBjbGFzcz1cImlneC1jYWxlbmRhcl9faGVhZGVyLWRhdGVcIj5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cImhlYWRlclRlbXBsYXRlID8gaGVhZGVyVGVtcGxhdGUgOiBkZWZhdWx0SGVhZGVyOyBjb250ZXh0OiBoZWFkZXJDb250ZXh0XCI+XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvaDI+XG48L2Rpdj5cblxuPGRpdiAqbmdJZj1cImlzRGVmYXVsdFZpZXdcIiBjbGFzcz1cImlneC1jYWxlbmRhcl9fYm9keVwiIFtAYW5pbWF0ZVZpZXddPVwiYWN0aXZlVmlld1wiIChzd2lwZXJpZ2h0KT1cInByZXZpb3VzTW9udGgoKVwiIChzd2lwZWxlZnQpPVwibmV4dE1vbnRoKClcIj5cbiAgICA8ZGl2IGNsYXNzPVwiaWd4LWNhbGVuZGFyX19ib2R5LXBpY2tlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJldlwiIChjbGljayk9XCJwcmV2aW91c01vbnRoKClcIj5cbiAgICAgICAgICAgIDxpZ3gtaWNvbiBmb250U2V0PVwibWF0ZXJpYWxcIj5rZXlib2FyZF9hcnJvd19sZWZ0PC9pZ3gtaWNvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkYXRlXCI+XG4gICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwic3ViaGVhZGVyVGVtcGxhdGUgPyBzdWJoZWFkZXJUZW1wbGF0ZSA6IGRlZmF1bHRNb250aDsgY29udGV4dDogY29udGV4dFwiPlxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibmV4dFwiIChjbGljayk9XCJuZXh0TW9udGgoKVwiPlxuICAgICAgICAgICAgPGlneC1pY29uIGZvbnRTZXQ9XCJtYXRlcmlhbFwiPmtleWJvYXJkX2Fycm93X3JpZ2h0PC9pZ3gtaWNvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiaWd4LWNhbGVuZGFyX19ib2R5LXJvd1wiPlxuICAgICAgICA8c3BhbiAqbmdGb3I9XCJsZXQgZGF5TmFtZSBvZiBnZW5lcmF0ZVdlZWtIZWFkZXIoKVwiIGNsYXNzPVwiaWd4LWNhbGVuZGFyX19sYWJlbFwiPlxuICAgICAgICAgICAge3sgZGF5TmFtZSB8IHRpdGxlY2FzZSB9fVxuICAgICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2ICpuZ0Zvcj1cImxldCB3ZWVrIG9mIGdldENhbGVuZGFyTW9udGg7IGxhc3QgYXMgaXNMYXN0OyBpbmRleCBhcyBpOyB0cmFja0J5OiByb3dUcmFja2VyXCIgY2xhc3M9XCJpZ3gtY2FsZW5kYXJfX2JvZHktcm93XCIgW0BhbmltYXRlQ2hhbmdlXT1cIm1vbnRoQWN0aW9uXCJcbiAgICAgICAgKEBhbmltYXRlQ2hhbmdlLmRvbmUpPVwiYW5pbWF0aW9uRG9uZSgkZXZlbnQsIGlzTGFzdClcIj5cbiAgICAgICAgPHNwYW4gW2lneENhbGVuZGFyRGF0ZV09XCJkYXlcIiAob25EYXRlU2VsZWN0aW9uKT1cImNoaWxkQ2xpY2tlZCgkZXZlbnQpXCIgKm5nRm9yPVwibGV0IGRheSBvZiB3ZWVrOyB0cmFja0J5OiBkYXRlVHJhY2tlclwiPlxuICAgICAgICAgICAge3sgZm9ybWF0dGVkRGF0ZShkYXkuZGF0ZSkgfX1cbiAgICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxkaXYgKm5nSWY9XCJpc1llYXJWaWV3XCIgY2xhc3M9XCJpZ3gtY2FsZW5kYXJfX2JvZHlcIiBbQGFuaW1hdGVWaWV3XT1cImFjdGl2ZVZpZXdcIj5cbiAgICA8ZGl2IGNsYXNzPVwiaWd4LWNhbGVuZGFyX19ib2R5LXJvdy0td3JhcFwiPlxuICAgICAgICA8ZGl2IChvbk1vbnRoU2VsZWN0aW9uKT1cImNoYW5nZU1vbnRoKCRldmVudClcIiBbaWd4Q2FsZW5kYXJNb250aF09XCJtb250aFwiIFtpbmRleF09XCJpXCIgKm5nRm9yPVwibGV0IG1vbnRoIG9mIG1vbnRoczsgaW5kZXggYXMgaTtcIj5cbiAgICAgICAgICAgIHt7IGZvcm1hdHRlZE1vbnRoKG1vbnRoKSB8IHRpdGxlY2FzZSB9fVxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuXG48ZGl2ICpuZ0lmPVwiaXNEZWNhZGVWaWV3XCIgY2xhc3M9XCJpZ3gtY2FsZW5kYXJfX2JvZHlcIiBbQGFuaW1hdGVWaWV3XT1cImFjdGl2ZVZpZXdcIj5cbiAgICA8ZGl2IGNsYXNzPVwiaWd4LWNhbGVuZGFyX19ib2R5LWNvbHVtblwiICh3aGVlbCk9XCJvblNjcm9sbCgkZXZlbnQpXCIgKHBhbik9XCJvblBhbigkZXZlbnQpXCI+XG4gICAgICAgIDxzcGFuIChvblllYXJTZWxlY3Rpb24pPVwiY2hhbmdlWWVhcigkZXZlbnQpXCIgW2lneENhbGVuZGFyWWVhcl09XCJ5ZWFyXCIgKm5nRm9yPVwibGV0IHllYXIgb2YgZGVjYWRlXCI+XG4gICAgICAgICAgICB7eyBmb3JtYXR0ZWRZZWFyKHllYXIpIH19XG4gICAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuYFxufSlcbmV4cG9ydCBjbGFzcyBJZ3hDYWxlbmRhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgYGlkYCBvZiB0aGUgY2FsZW5kYXIuXG4gICAgICogSWYgbm90IHNldCwgdGhlIGBpZGAgd2lsbCBoYXZlIHZhbHVlIGBcImlneC1jYWxlbmRhci0wXCJgLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNhbGVuZGFyIGlkID0gXCJteS1maXJzdC1jYWxlbmRhclwiPjwvaWd4LWNhbGVuZGFyPlxuICAgICAqIGBgYFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgY2FsZW5kYXJJZCA9ICB0aGlzLmNhbGVuZGFyLmlkO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hDYWxlbmRhckNvbXBvbmVudFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5pZCcpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaWQgPSBgaWd4LWNhbGVuZGFyLSR7TkVYVF9JRCsrfWA7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhcnQgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAqIENhbiByZXR1cm4gYSBudW1lcmljIG9yIGFuIGVudW0gcmVwcmVzZW50YXRpb24gb2YgdGhlIHdlZWsgZGF5LlxuICAgICAqIERlZmF1bHRzIHRvIGBTdW5kYXlgIC8gYDBgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgd2Vla1N0YXJ0ID0gIHRoaXMuY2FsZW5kYXIud2Vla1N0YXJ0O1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hDYWxlbmRhckNvbXBvbmVudFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCB3ZWVrU3RhcnQoKTogV0VFS0RBWVMgfCBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhck1vZGVsLmZpcnN0V2Vla0RheTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhcnQgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAqIENhbiBiZSBhc3NpZ25lZCB0byBhIG51bWVyaWMgdmFsdWUgb3IgdG8gYFdFRUtEQVlTYCBlbnVtIHZhbHVlLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNhbGVuZGFyIFt3ZWVrU3RhcnRdID0gXCIxXCI+PC9pZ3gtY2FsZW5kYXI+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneENhbGVuZGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIHNldCB3ZWVrU3RhcnQodmFsdWU6IFdFRUtEQVlTIHwgbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuY2FsZW5kYXJNb2RlbC5maXJzdFdlZWtEYXkgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgbG9jYWxlYCBvZiB0aGUgY2FsZW5kYXIuXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgXCJlblwiYC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGxvY2FsZSA9ICB0aGlzLmNhbGVuZGFyLmxvY2FsZTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4Q2FsZW5kYXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgbG9jYWxlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYGxvY2FsZWAgb2YgdGhlIGNhbGVuZGFyLlxuICAgICAqIEV4cGVjdHMgYSB2YWxpZCBCQ1AgNDcgbGFuZ3VhZ2UgdGFnLlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYFwiZW5cImAuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2FsZW5kYXIgW2xvY2FsZV0gPSBcImRlXCI+PC9pZ3gtY2FsZW5kYXI+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneENhbGVuZGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIHNldCBsb2NhbGUodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9sb2NhbGUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5pbml0Rm9ybWF0dGVycygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogR2V0cyB0aGUgc2VsZWN0aW9uIHR5cGUgb2YgdGhlIGNhbGVuZGFyLlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYFwic2luZ2xlXCJgLlxuICAgICAqIENoYW5naW5nIHRoZSB0eXBlIG9mIHNlbGVjdGlvbiBpbiB0aGUgY2FsZW5kYXIgcmVzZXRzIHRoZSBjdXJyZW50bHlcbiAgICAgKiBzZWxlY3RlZCB2YWx1ZXMgaWYgYW55LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgc2VsZWN0aW9uVHlwZSA9ICB0aGlzLmNhbGVuZGFyLnNlbGVjdGlvbjtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4Q2FsZW5kYXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgc2VsZWN0aW9uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHNlbGVjdGlvbiB0eXBlIG9mIHRoZSBjYWxlbmRhci5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jYWxlbmRhciBbc2VsZWN0aW9uXSA9IFwiJ211bHRpJ1wiPjwvaWd4LWNhbGVuZGFyPlxuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hDYWxlbmRhckNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgc2VsZWN0aW9uKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnc2luZ2xlJzpcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZXMgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbXVsdGknOlxuICAgICAgICAgICAgY2FzZSAncmFuZ2UnOlxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2VsZWN0aW9uIHZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb25DaGFuZ2VDYWxsYmFjayh0aGlzLnNlbGVjdGVkRGF0ZXMpO1xuICAgICAgICB0aGlzLnJhbmdlU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zZWxlY3Rpb24gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRlIHRoYXQgaXMgcHJlc2VudGVkIGluIHRoZSBjYWxlbmRhci5cbiAgICAgKiBCeSBkZWZhdWx0IGl0IGlzIHRoZSBjdXJyZW50IGRhdGUuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBkYXRlID0gdGhpcy5jYWxlbmRhci52aWV3RGF0ZTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4Q2FsZW5kYXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgdmlld0RhdGUoKTogRGF0ZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aWV3RGF0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGF0ZSB0aGF0IHdpbGwgYmUgcHJlc2VudGVkIGluIHRoZSBkZWZhdWx0IHZpZXcgd2hlbiB0aGUgY2FsZW5kYXIgcmVuZGVycy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jYWxlbmRhciB2aWV3RGF0ZSA9IFwiMTUvMDYvMjAxOFwiPjwvaWd4LWNhbGVuZGFyPlxuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hDYWxlbmRhckNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgdmlld0RhdGUodmFsdWU6IERhdGUpIHtcbiAgICAgICAgdGhpcy5fdmlld0RhdGUgPSB0aGlzLmdldERhdGVPbmx5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzZWxlY3RlZCBkYXRlKHMpIG9mIHRoZSBjYWxlbmRhci5cbiAgICAgKlxuICAgICAqIFdoZW4gdGhlIGNhbGVuZGFyIHNlbGVjdGlvbiBpcyBzZXQgdG8gYHNpbmdsZWAsIGl0IHJldHVybnNcbiAgICAgKiBhIHNpbmdsZSBgRGF0ZWAgb2JqZWN0LlxuICAgICAqIE90aGVyd2lzZSBpdCBpcyBhbiBhcnJheSBvZiBgRGF0ZWAgb2JqZWN0cy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHNlbGVjdGVkRGF0ZXMgPSAgdGhpcy5jYWxlbmRhci52YWx1ZTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4Q2FsZW5kYXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgdmFsdWUoKTogRGF0ZSB8IERhdGVbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkRGF0ZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHNlbGVjdGVkIGRhdGUocykgb2YgdGhlIGNhbGVuZGFyLlxuICAgICAqXG4gICAgICogV2hlbiB0aGUgY2FsZW5kYXIgc2VsZWN0aW9uIGlzIHNldCB0byBgc2luZ2xlYCwgaXQgYWNjZXB0c1xuICAgICAqIGEgc2luZ2xlIGBEYXRlYCBvYmplY3QuXG4gICAgICogT3RoZXJ3aXNlIGl0IGlzIGFuIGFycmF5IG9mIGBEYXRlYCBvYmplY3RzLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgdGhpcy5jYWxlbmRhci52YWx1ZSA9ICBuZXcgRGF0ZShgMjAxNi0wNi0xMmApO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hDYWxlbmRhckNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgdmFsdWUodmFsdWU6IERhdGUgfCBEYXRlW10pIHtcbiAgICAgICAgdGhpcy5zZWxlY3REYXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRlIGZvcm1hdCBvcHRpb25zIG9mIHRoZSBjYWxlbmRhci5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGRhdGVGb3JtYXRPcHRpb25zID0gdGhpcy5jYWxlbmRhci5mb3JtYXRPcHRpb25zLlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCBmb3JtYXRPcHRpb25zKCk6IG9iamVjdCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXRPcHRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkYXRlIGZvcm1hdCBvcHRpb25zIG9mIHRoZSBjYWxlbmRhci5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jYWxlbmRhcj4gW2Zvcm1hdE9wdGlvbnNdID0gXCJ7IGRheTogJzItZGlnaXQnLCBtb250aDogJ3Nob3J0Jywgd2Vla2RheTogJ2xvbmcnLCB5ZWFyOiAnbnVtZXJpYycgfVwiPC9pZ3gtY2FsZW5kYXI+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneENhbGVuZGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgcHVibGljIHNldCBmb3JtYXRPcHRpb25zKGZvcm1hdE9wdGlvbnM6IG9iamVjdCkge1xuICAgICAgICB0aGlzLl9mb3JtYXRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLl9mb3JtYXRPcHRpb25zLCBmb3JtYXRPcHRpb25zKTtcbiAgICAgICAgdGhpcy5pbml0Rm9ybWF0dGVycygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgd2hldGhlciB0aGUgYGRheWAsIGBtb250aGAgYW5kIGB5ZWFyYCBzaG91bGQgYmUgcmVuZGVyZWRcbiAgICAgKiBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsZSBhbmQgZm9ybWF0T3B0aW9ucywgaWYgYW55LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZm9ybWF0Vmlld3MgPSB0aGlzLmNhbGVuZGFyLmZvcm1hdFZpZXdzO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdldCBmb3JtYXRWaWV3cygpOiBvYmplY3Qge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0Vmlld3M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgd2hldGhlciB0aGUgYGRheWAsIGBtb250aGAgYW5kIGB5ZWFyYCBzaG91bGQgYmUgcmVuZGVyZWRcbiAgICAgKiBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsZSBhbmQgZm9ybWF0T3B0aW9ucywgaWYgYW55LlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNhbGVuZGFyIFtmb3JtYXRWaWV3c10gPSBcInsgZGF5OiB0cnVlLCBtb250aDogZmFsc2UsIHllYXI6IHRydWUgfVwiPjwvaWd4LWNhbGVuZGFyPlxuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hDYWxlbmRhckNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgZm9ybWF0Vmlld3MoZm9ybWF0Vmlld3M6IG9iamVjdCkge1xuICAgICAgICB0aGlzLl9mb3JtYXRWaWV3cyA9IE9iamVjdC5hc3NpZ24odGhpcy5fZm9ybWF0Vmlld3MsIGZvcm1hdFZpZXdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgd2hldGhlciB0aGUgY2FsZW5kYXIgaGVhZGVyIHdpbGwgYmUgaW4gdmVydGljYWwgcG9zaXRpb24uXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWNhbGVuZGFyIFt2ZXJ0aWNhbF0gPSBcInRydWVcIj48L2lneC1jYWxlbmRhcj5cbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGlzVmVydGljYWwgPSB0aGlzLmNhbGVuZGFyLnZlcnRpY2FsO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHZlcnRpY2FsID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkaXNhYmxlZCBkYXRlcyBkZXNjcmlwdG9ycy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGRpc2FibGVkRGF0ZXMgPSB0aGlzLmNhbGVuZGFyLmRpc2FibGVkRGF0ZXM7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIGdldCBkaXNhYmxlZERhdGVzKCk6IERhdGVSYW5nZURlc2NyaXB0b3JbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZERhdGVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRpc2FibGVkIGRhdGVzJyBkZXNjcmlwdG9ycy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICpAVmlld0NoaWxkKFwiTXlDYWxlbmRhclwiKVxuICAgICAqcHVibGljIGNhbGVuZGFyOiBJZ0NhbGVuZGFyQ29tcG9uZW50O1xuICAgICAqbmdPbkluaXQoKXtcbiAgICAgKiAgICB0aGlzLmNhbGVuZGFyLmRpc2FibGVkRGF0ZXMgPSBbXG4gICAgICogICAgICBuZXcgRGF0ZVJhbmdlRGVzY3JpcHRvcihEYXRlUmFuZ2VUeXBlLkJldHdlZW4sIFtuZXcgRGF0ZShcIjIwMjAtMS0xXCIpLCBuZXcgRGF0ZShcIjIwMjAtMS0xNVwiKV0pLFxuICAgICAqICAgICAgbmV3IERhdGVSYW5nZURlc2NyaXB0b3IoRGF0ZVJhbmdlVHlwZS5XZWVrZW5kcyldO1xuICAgICAqfVxuICAgICAqYGBgXG4gICAgICovXG4gICAgcHVibGljIHNldCBkaXNhYmxlZERhdGVzKHZhbHVlOiBEYXRlUmFuZ2VEZXNjcmlwdG9yW10pIHtcbiAgICAgICAgdGhpcy5fZGlzYWJsZWREYXRlcyA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNwZWNpYWwgZGF0ZXMgZGVzY3JpcHRvcnMuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBzcGVjaWFsRGF0ZXMgPSB0aGlzLmNhbGVuZGFyLnNwZWNpYWxEYXRlcztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHNwZWNpYWxEYXRlcygpOiBEYXRlUmFuZ2VEZXNjcmlwdG9yW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3BlY2lhbERhdGVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHNwZWNpYWwgZGF0ZXMnIGRlc2NyaXB0b3JzLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJNeUNhbGVuZGFyXCIpXG4gICAgICpwdWJsaWMgY2FsZW5kYXI6IElnQ2FsZW5kYXJDb21wb25lbnQ7XG4gICAgICpuZ09uSW5pdCgpe1xuICAgICAqICAgIHRoaXMuY2FsZW5kYXIuc3BlY2lhbERhdGVzID0gW1xuICAgICAqICAgICAgbmV3IERhdGVSYW5nZURlc2NyaXB0b3IoRGF0ZVJhbmdlVHlwZS5CZXR3ZWVuLCBbbmV3IERhdGUoXCIyMDIwLTEtMVwiKSwgbmV3IERhdGUoXCIyMDIwLTEtMTVcIildKSxcbiAgICAgKiAgICAgIG5ldyBEYXRlUmFuZ2VEZXNjcmlwdG9yKERhdGVSYW5nZVR5cGUuV2Vla2VuZHMpXTtcbiAgICAgKn1cbiAgICAgKmBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgc3BlY2lhbERhdGVzKHZhbHVlOiBEYXRlUmFuZ2VEZXNjcmlwdG9yW10pIHtcbiAgICAgICAgdGhpcy5fc3BlY2lhbERhdGVzID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW1pdHMgYW4gZXZlbnQgd2hlbiBhIHNlbGVjdGlvbiBpcyBtYWRlIGluIHRoZSBjYWxlbmRhci5cbiAgICAgKiBQcm92aWRlcyByZWZlcmVuY2UgdGhlIGBzZWxlY3RlZERhdGVzYCBwcm9wZXJ0eSBpbiB0aGUgYElneENhbGVuZGFyQ29tcG9uZW50YC5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1jYWxlbmRhciAob25TZWxlY3Rpb24pID0gXCJvblNlbGVjdGlvbigkZXZlbnQpXCI+PC9pZ3gtY2FsZW5kYXI+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneENhbGVuZGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIG9uU2VsZWN0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxEYXRlIHwgRGF0ZVtdPigpO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGRyZW4oZm9yd2FyZFJlZigoKSA9PiBJZ3hDYWxlbmRhckRhdGVEaXJlY3RpdmUpLCB7IHJlYWQ6IElneENhbGVuZGFyRGF0ZURpcmVjdGl2ZSB9KVxuICAgIHB1YmxpYyBkYXRlczogUXVlcnlMaXN0PElneENhbGVuZGFyRGF0ZURpcmVjdGl2ZT47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCBgdGFiaW5kZXhgIGF0dHJpYnV0ZSBmb3IgdGhlIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIudGFiaW5kZXgnKVxuICAgIHB1YmxpYyB0YWJpbmRleCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCBhcmlhIHJvbGUgYXR0cmlidXRlIGZvciB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5yb2xlJylcbiAgICBwdWJsaWMgcm9sZSA9ICdncmlkJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IGFyaWEgbGViZWxsZWQgYnkgYXR0cmlidXRlIGZvciB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWxhYmVsbGVkYnknKVxuICAgIHB1YmxpYyBhcmlhTGFiZWxsZWRCeSA9ICdjYWxlbmRhcic7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCBjc3MgY2xhc3MgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MnKVxuICAgIGdldCBzdHlsZUNsYXNzKCk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2lneC1jYWxlbmRhci0tdmVydGljYWwnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnaWd4LWNhbGVuZGFyJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGRhdGUgb2JqZWN0cyB3aGljaCBhcmUgdGhlbiB1c2VkIHRvXG4gICAgICogcHJvcGVybHkgcmVuZGVyIHRoZSBtb250aCBuYW1lcy5cbiAgICAgKlxuICAgICAqIFVzZWQgaW4gdGhlIHRlbXBsYXRlIG9mIHRoZSBjb21wb25lbnRcbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgbW9udGhzKCk6IERhdGVbXSB7XG4gICAgICAgIGxldCBzdGFydCA9IG5ldyBEYXRlKHRoaXMuX3ZpZXdEYXRlLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHN0YXJ0KTtcbiAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5jYWxlbmRhck1vZGVsLnRpbWVkZWx0YShzdGFydCwgJ21vbnRoJywgMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgZGF0ZSBvYmplY3RzIHdoaWNoIGFyZSB0aGVuIHVzZWQgdG8gcHJvcGVybHlcbiAgICAgKiByZW5kZXIgdGhlIHllYXJzLlxuICAgICAqXG4gICAgICogVXNlZCBpbiB0aGUgdGVtcGxhdGUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgZGVjYWRlKCk6IG51bWJlcltdIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fdmlld0RhdGUuZ2V0RnVsbFllYXIoKSAtIDM7XG4gICAgICAgIGNvbnN0IGVuZCA9IHRoaXMuX3ZpZXdEYXRlLmdldEZ1bGxZZWFyKCkgKyA0O1xuXG4gICAgICAgIGZvciAoY29uc3QgeWVhciBvZiByYW5nZShzdGFydCwgZW5kKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3IERhdGUoeWVhciwgdGhpcy5fdmlld0RhdGUuZ2V0TW9udGgoKSwgdGhpcy5fdmlld0RhdGUuZ2V0RGF0ZSgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGdldCBpc0RlZmF1bHRWaWV3KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlVmlldyA9PT0gQ2FsZW5kYXJWaWV3LkRFRkFVTFQ7XG4gICAgfVxuXG4gICAgZ2V0IGlzWWVhclZpZXcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVWaWV3ID09PSBDYWxlbmRhclZpZXcuWUVBUjtcbiAgICB9XG5cbiAgICBnZXQgaXNEZWNhZGVWaWV3KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlVmlldyA9PT0gQ2FsZW5kYXJWaWV3LkRFQ0FERTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IGFjdGl2ZSB2aWV3IG9mIHRoZSBjYWxlbmRhci5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGFjdGl2ZVZpZXcgPSAgdGhpcy5jYWxlbmRhci5hY3RpdmVWaWV3O1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBhY3RpdmVWaWV3KCk6IENhbGVuZGFyVmlldyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVWaWV3O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgbW9udGhBY3Rpb24oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoQWN0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoZWFkZXIgdGVtcGxhdGUuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBoZWFkZXJUZW1wbGF0ZSA9ICB0aGlzLmNhbGVuZGFyLmhlYWRlclRlYW1wbGF0ZTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4Q2FsZW5kYXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBnZXQgaGVhZGVyVGVtcGxhdGUoKTogYW55IHtcbiAgICAgICAgaWYgKHRoaXMuaGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhlYWRlclRlbXBsYXRlRGlyZWN0aXZlLnRlbXBsYXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoZWFkZXIgdGVtcGxhdGUuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2FsZW5kYXIgaGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUgPSBcImlneENhbGVuZGFySGVhZGVyXCI+PC9pZ3gtY2FsZW5kYXI+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneENhbGVuZGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgc2V0IGhlYWRlclRlbXBsYXRlKGRpcmVjdGl2ZTogYW55KSB7XG4gICAgICAgIHRoaXMuaGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN1YmhlYWRlciB0ZW1wbGF0ZS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHN1YmhlYWRlclRlbXBsYXRlID0gdGhpcy5jYWxlbmRhci5zdWJoZWFkZXJUZW1wbGF0ZTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgc3ViaGVhZGVyVGVtcGxhdGUoKTogYW55IHtcbiAgICAgICAgaWYgKHRoaXMuc3ViaGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN1YmhlYWRlclRlbXBsYXRlRGlyZWN0aXZlLnRlbXBsYXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdWJoZWFkZXIgdGVtcGxhdGUuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtY2FsZW5kYXIgc3ViaGVhZGVyVGVtcGxhdGUgPSBcImlneENhbGVuZGFyU3ViaGVhZGVyXCI+PC9pZ3gtY2FsZW5kYXI+XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneENhbGVuZGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgc2V0IHN1YmhlYWRlclRlbXBsYXRlKGRpcmVjdGl2ZTogYW55KSB7XG4gICAgICAgIHRoaXMuc3ViaGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY29udGV4dCBmb3IgdGhlIHRlbXBsYXRlIG1hcmtlZCB3aXRoIHRoZSBgaWd4Q2FsZW5kYXJIZWFkZXJgIGRpcmVjdGl2ZS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGhlYWRlckNvbnRleHQgPSAgdGhpcy5jYWxlbmRhci5oZWFkZXJDb250ZXh0O1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBoZWFkZXJDb250ZXh0KCkge1xuICAgICAgICBjb25zdCBkYXRlOiBEYXRlID0gdGhpcy5oZWFkZXJEYXRlO1xuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUNvbnRleHQoZGF0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY29udGV4dCBmb3IgdGhlIHRlbXBsYXRlIG1hcmtlZCB3aXRoIGVpdGhlciBgaWd4Q2FsZW5kYXJTdWJIZWFkZXJNb250aGBcbiAgICAgKiBvciBgaWd4Q2FsZW5kYXJTdWJIZWFkZXJZZWFyYCBkaXJlY3RpdmUuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBjb250ZXh0ID0gIHRoaXMuY2FsZW5kYXIuY29udGV4dDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgY29udGV4dCgpIHtcbiAgICAgICAgY29uc3QgZGF0ZTogRGF0ZSA9IHRoaXMuX3ZpZXdEYXRlO1xuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUNvbnRleHQoZGF0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldCBoZWFkZXJEYXRlKCk6IERhdGUge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZERhdGVzID8gdGhpcy5zZWxlY3RlZERhdGVzIDogbmV3IERhdGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQENvbnRlbnRDaGlsZChmb3J3YXJkUmVmKCgpID0+IElneENhbGVuZGFySGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUpLCB7IHJlYWQ6IElneENhbGVuZGFySGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUgfSlcbiAgICBwcml2YXRlIGhlYWRlclRlbXBsYXRlRGlyZWN0aXZlOiBJZ3hDYWxlbmRhckhlYWRlclRlbXBsYXRlRGlyZWN0aXZlO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgICBAQ29udGVudENoaWxkKGZvcndhcmRSZWYoKCkgPT4gSWd4Q2FsZW5kYXJTdWJoZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSksIHsgcmVhZDogSWd4Q2FsZW5kYXJTdWJoZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSB9KVxuICAgIHByaXZhdGUgc3ViaGVhZGVyVGVtcGxhdGVEaXJlY3RpdmU6IElneENhbGVuZGFyU3ViaGVhZGVyVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfdmlld0RhdGU6IERhdGU7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBjYWxlbmRhck1vZGVsOiBDYWxlbmRhcjtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9hY3RpdmVWaWV3ID0gQ2FsZW5kYXJWaWV3LkRFRkFVTFQ7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZWxlY3RlZERhdGVzO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX3NlbGVjdGlvbjogQ2FsZW5kYXJTZWxlY3Rpb24gfCBzdHJpbmcgPSBDYWxlbmRhclNlbGVjdGlvbi5TSU5HTEU7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSByYW5nZVN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9tb250aEFjdGlvbiA9ICcnO1xuICAgIC8qKlxuICAgICpAaGlkZGVuXG4gICAgKi9cbiAgICBwcml2YXRlIF9sb2NhbGUgPSAnZW4nO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX2Zvcm1hdE9wdGlvbnMgPSB7XG4gICAgICAgIGRheTogJ251bWVyaWMnLFxuICAgICAgICBtb250aDogJ3Nob3J0JyxcbiAgICAgICAgd2Vla2RheTogJ3Nob3J0JyxcbiAgICAgICAgeWVhcjogJ251bWVyaWMnXG4gICAgfTtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9mb3JtYXRWaWV3cyA9IHtcbiAgICAgICAgZGF5OiBmYWxzZSxcbiAgICAgICAgbW9udGg6IHRydWUsXG4gICAgICAgIHllYXI6IGZhbHNlXG4gICAgfTtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9kaXNhYmxlZERhdGVzOiBEYXRlUmFuZ2VEZXNjcmlwdG9yW10gPSBudWxsO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZm9ybWF0dGVyTW9udGg7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBmb3JtYXR0ZXJEYXk7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBmb3JtYXR0ZXJZZWFyO1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZm9ybWF0dGVyTW9udGhkYXk7XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBmb3JtYXR0ZXJXZWVrZGF5O1xuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX3NwZWNpYWxEYXRlczogRGF0ZVJhbmdlRGVzY3JpcHRvcltdID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2FsZW5kYXJNb2RlbCA9IG5ldyBDYWxlbmRhcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcblxuICAgICAgICB0aGlzLmNhbGVuZGFyTW9kZWwuZmlyc3RXZWVrRGF5ID0gdGhpcy53ZWVrU3RhcnQ7XG4gICAgICAgIHRoaXMuX3ZpZXdEYXRlID0gdGhpcy5fdmlld0RhdGUgPyB0aGlzLl92aWV3RGF0ZSA6IHRvZGF5O1xuICAgICAgICB0aGlzLmluaXRGb3JtYXR0ZXJzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBmb3JtYXR0ZXJzIHdoZW4gbG9jYWxlIG9yIGZvcm1hdE9wdGlvbnMgYXJlIGNoYW5nZWRcbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIGluaXRGb3JtYXR0ZXJzKCkge1xuICAgICAgICB0aGlzLmZvcm1hdHRlck1vbnRoID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQodGhpcy5fbG9jYWxlLCB7IG1vbnRoOiB0aGlzLl9mb3JtYXRPcHRpb25zLm1vbnRoIH0pO1xuICAgICAgICB0aGlzLmZvcm1hdHRlckRheSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KHRoaXMuX2xvY2FsZSwgeyBkYXk6IHRoaXMuX2Zvcm1hdE9wdGlvbnMuZGF5IH0pO1xuICAgICAgICB0aGlzLmZvcm1hdHRlclllYXIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCh0aGlzLl9sb2NhbGUsIHsgeWVhcjogdGhpcy5fZm9ybWF0T3B0aW9ucy55ZWFyIH0pO1xuICAgICAgICB0aGlzLmZvcm1hdHRlck1vbnRoZGF5ID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQodGhpcy5fbG9jYWxlLCB7IG1vbnRoOiB0aGlzLl9mb3JtYXRPcHRpb25zLm1vbnRoLCBkYXk6IHRoaXMuX2Zvcm1hdE9wdGlvbnMuZGF5IH0pO1xuICAgICAgICB0aGlzLmZvcm1hdHRlcldlZWtkYXkgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCh0aGlzLl9sb2NhbGUsIHsgd2Vla2RheTogdGhpcy5fZm9ybWF0T3B0aW9ucy53ZWVrZGF5IH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHY6IERhdGUpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb25DaGFuZ2VDYWxsYmFjayA9IGZuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fb25Ub3VjaGVkQ2FsbGJhY2sgPSBmbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIHdyaXRlVmFsdWUodmFsdWU6IERhdGUgfCBEYXRlW10pIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZERhdGVzID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbG9jYWxlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb250aCBpbiB0aGUgbW9udGggdmlldyBpZiBlbmFibGVkLFxuICAgICAqIG90aGVyd2lzZSByZXR1cm5zIHRoZSBkZWZhdWx0IGBEYXRlLmdldE1vbnRoKClgIHZhbHVlLlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBmb3JtYXR0ZWRNb250aCh2YWx1ZTogRGF0ZSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLl9mb3JtYXRWaWV3cy5tb250aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyTW9udGguZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dmFsdWUuZ2V0TW9udGgoKX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxvY2FsZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZGF0ZSBpbiB0aGUgZGVmYXVsdCB2aWV3IGlmIGVuYWJsZWQsXG4gICAgICogb3RoZXJ3aXNlIHJldHVybnMgdGhlIGRlZmF1bHQgYERhdGUuZ2V0RGF0ZSgpYCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZm9ybWF0dGVkRGF0ZSh2YWx1ZTogRGF0ZSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLl9mb3JtYXRWaWV3cy5kYXkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlckRheS5mb3JtYXQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHt2YWx1ZS5nZXREYXRlKCl9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsb2NhbGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIHllYXIgaW4gdGhlIHllYXIgdmlldyBpZiBlbmFibGVkLFxuICAgICAqIG90aGVyd2lzZSByZXR1cm5zIHRoZSBkZWZhdWx0IGBEYXRlLmdldEZ1bGxZZWFyKClgIHZhbHVlLlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBmb3JtYXR0ZWRZZWFyKHZhbHVlOiBEYXRlKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuX2Zvcm1hdFZpZXdzLnllYXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlclllYXIuZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dmFsdWUuZ2V0RnVsbFllYXIoKX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgaXNDdXJyZW50TW9udGgodmFsdWU6IERhdGUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0RhdGUuZ2V0TW9udGgoKSA9PT0gdmFsdWUuZ2V0TW9udGgoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGlzQ3VycmVudFllYXIodmFsdWU6IERhdGUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0RhdGUuZ2V0RnVsbFllYXIoKSA9PT0gdmFsdWUuZ2V0RnVsbFllYXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIHByZXZpb3VzTW9udGgoKSB7XG4gICAgICAgIHRoaXMuX3ZpZXdEYXRlID0gdGhpcy5jYWxlbmRhck1vZGVsLnRpbWVkZWx0YSh0aGlzLl92aWV3RGF0ZSwgJ21vbnRoJywgLTEpO1xuICAgICAgICB0aGlzLl9tb250aEFjdGlvbiA9ICdwcmV2JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIG5leHRNb250aCgpIHtcbiAgICAgICAgdGhpcy5fdmlld0RhdGUgPSB0aGlzLmNhbGVuZGFyTW9kZWwudGltZWRlbHRhKHRoaXMuX3ZpZXdEYXRlLCAnbW9udGgnLCAxKTtcbiAgICAgICAgdGhpcy5fbW9udGhBY3Rpb24gPSAnbmV4dCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBwcmV2aW91c1llYXIoKSB7XG4gICAgICAgIHRoaXMuX3ZpZXdEYXRlID0gdGhpcy5jYWxlbmRhck1vZGVsLnRpbWVkZWx0YSh0aGlzLl92aWV3RGF0ZSwgJ3llYXInLCAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBuZXh0WWVhcigpIHtcbiAgICAgICAgdGhpcy5fdmlld0RhdGUgPSB0aGlzLmNhbGVuZGFyTW9kZWwudGltZWRlbHRhKHRoaXMuX3ZpZXdEYXRlLCAneWVhcicsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Rm9ybWF0dGVkRGF0ZSgpOiB7IHdlZWtkYXk6IHN0cmluZywgbW9udGhkYXk6IHN0cmluZyB9IHtcblxuICAgICAgICBjb25zdCBkYXRlID0gdGhpcy5oZWFkZXJEYXRlO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtb250aGRheTogdGhpcy5mb3JtYXR0ZXJNb250aGRheS5mb3JtYXQoZGF0ZSksXG4gICAgICAgICAgICB3ZWVrZGF5OiB0aGlzLmZvcm1hdHRlcldlZWtkYXkuZm9ybWF0KGRhdGUpLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2hpbGRDbGlja2VkKGluc3RhbmNlOiBJQ2FsZW5kYXJEYXRlKSB7XG4gICAgICAgIGlmIChpbnN0YW5jZS5pc1ByZXZNb250aCkge1xuICAgICAgICAgICAgdGhpcy5wcmV2aW91c01vbnRoKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5zdGFuY2UuaXNOZXh0TW9udGgpIHtcbiAgICAgICAgICAgIHRoaXMubmV4dE1vbnRoKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlbGVjdERhdGVGcm9tQ2xpZW50KGluc3RhbmNlLmRhdGUpO1xuICAgICAgICB0aGlzLm9uU2VsZWN0aW9uLmVtaXQodGhpcy5zZWxlY3RlZERhdGVzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYW5pbWF0aW9uRG9uZShldmVudCwgaXNMYXN0OiBib29sZWFuKSB7XG4gICAgICAgIGlmIChpc0xhc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSB0aGlzLmRhdGVzLmZpbmQoKGQpID0+IGQuc2VsZWN0ZWQpO1xuICAgICAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGRhdGUubmF0aXZlRWxlbWVudC5mb2N1cygpLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChzbGlkZUluUmlnaHQub3B0aW9ucy5wYXJhbXMuZHVyYXRpb24sIDEwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIGRhdGUocykgKGJhc2VkIG9uIHRoZSBzZWxlY3Rpb24gdHlwZSkuXG4gICAgICpgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5jYWxlbmRhci5zZWxlY3REYXRlKG5ldyBEYXRlKGAyMDE4LTA2LTEyYCkpO1xuICAgICAqYGBgXG4gICAgICovXG4gICAgcHVibGljIHNlbGVjdERhdGUodmFsdWU6IERhdGUgfCBEYXRlW10pIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGF0ZSBvciBhcnJheSBzaG91bGQgYmUgc2V0IGZvciB0aGUgc2VsZWN0RGF0ZSBtZXRob2QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHRoaXMuc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlICdzaW5nbGUnOlxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0U2luZ2xlKHZhbHVlIGFzIERhdGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbXVsdGknOlxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0TXVsdGlwbGUodmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmFuZ2UnOlxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0UmFuZ2UodmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzZWxlY3RzIGRhdGUocykgKGJhc2VkIG9uIHRoZSBzZWxlY3Rpb24gdHlwZSkuXG4gICAgICpgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5jYWxlbmRhci5kZXNlbGVjdERhdGUobmV3IERhdGUoYDIwMTgtMDYtMTJgKSk7XG4gICAgICpgYGBgXG4gICAgICovXG4gICAgcHVibGljIGRlc2VsZWN0RGF0ZSh2YWx1ZT86IERhdGUgfCBEYXRlW10pIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWREYXRlcyA9PT0gbnVsbCB8fCB0aGlzLnNlbGVjdGVkRGF0ZXMgPT09IFtdKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERhdGVzID0gdGhpcy5zZWxlY3Rpb24gPT09ICdzaW5nbGUnID8gbnVsbCA6IFtdO1xuICAgICAgICAgICAgdGhpcy5fb25DaGFuZ2VDYWxsYmFjayh0aGlzLnNlbGVjdGVkRGF0ZXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoICh0aGlzLnNlbGVjdGlvbikge1xuICAgICAgICAgICAgY2FzZSAnc2luZ2xlJzpcbiAgICAgICAgICAgICAgICB0aGlzLmRlc2VsZWN0U2luZ2xlKHZhbHVlIGFzIERhdGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbXVsdGknOlxuICAgICAgICAgICAgICAgIHRoaXMuZGVzZWxlY3RNdWx0aXBsZSh2YWx1ZSBhcyBEYXRlW10pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmFuZ2UnOlxuICAgICAgICAgICAgICAgIHRoaXMuZGVzZWxlY3RSYW5nZSh2YWx1ZSBhcyBEYXRlW10pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgYSBkYXRlIGlzIGRpc2FibGVkLlxuICAgICAqYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuY2FsZW5kYXIuaXNEYXRlRGlzYWJsZWQobmV3IERhdGUoYDIwMTgtMDYtMTJgKSk7XG4gICAgICpgYGBcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGlzRGF0ZURpc2FibGVkKGRhdGU6IERhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWREYXRlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaXNEYXRlSW5SYW5nZXMoZGF0ZSwgdGhpcy5kaXNhYmxlZERhdGVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBhIGRhdGUgaXMgc3BlY2lhbC5cbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmNhbGVuZGFyLmlzRGF0ZVNwZWNpYWwobmV3IERhdGUoYDIwMTgtMDYtMTJgKSk7XG4gICAgICpgYGBcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGlzRGF0ZVNwZWNpYWwoZGF0ZTogRGF0ZSkge1xuICAgICAgICBpZiAodGhpcy5zcGVjaWFsRGF0ZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmlzRGF0ZUluUmFuZ2VzKGRhdGUsIHRoaXMuc3BlY2lhbERhdGVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGdlbmVyYXRlV2Vla0hlYWRlcigpOiBzdHJpbmdbXSB7XG4gICAgICAgIGNvbnN0IGRheU5hbWVzID0gW107XG4gICAgICAgIGNvbnN0IHJ2ID0gdGhpcy5jYWxlbmRhck1vZGVsLm1vbnRoZGF0ZXNjYWxlbmRhcih0aGlzLnZpZXdEYXRlLmdldEZ1bGxZZWFyKCksIHRoaXMudmlld0RhdGUuZ2V0TW9udGgoKSlbMF07XG4gICAgICAgIGZvciAoY29uc3QgZGF5IG9mIHJ2KSB7XG4gICAgICAgICAgICBkYXlOYW1lcy5wdXNoKHRoaXMuZm9ybWF0dGVyV2Vla2RheS5mb3JtYXQoZGF5LmRhdGUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXlOYW1lcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGdldCBnZXRDYWxlbmRhck1vbnRoKCk6IElDYWxlbmRhckRhdGVbXVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXJNb2RlbC5tb250aGRhdGVzY2FsZW5kYXIodGhpcy52aWV3RGF0ZS5nZXRGdWxsWWVhcigpLCB0aGlzLnZpZXdEYXRlLmdldE1vbnRoKCksIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2hhbmdlWWVhcihldmVudDogRGF0ZSkge1xuICAgICAgICB0aGlzLl92aWV3RGF0ZSA9IG5ldyBEYXRlKGV2ZW50LmdldEZ1bGxZZWFyKCksIHRoaXMuX3ZpZXdEYXRlLmdldE1vbnRoKCkpO1xuICAgICAgICB0aGlzLl9hY3RpdmVWaWV3ID0gQ2FsZW5kYXJWaWV3LkRFRkFVTFQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBjaGFuZ2VNb250aChldmVudDogRGF0ZSkge1xuICAgICAgICB0aGlzLl92aWV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMuX3ZpZXdEYXRlLmdldEZ1bGxZZWFyKCksIGV2ZW50LmdldE1vbnRoKCkpO1xuICAgICAgICB0aGlzLl9hY3RpdmVWaWV3ID0gQ2FsZW5kYXJWaWV3LkRFRkFVTFQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBhY3RpdmVWaWV3WWVhcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlVmlldyA9IENhbGVuZGFyVmlldy5ZRUFSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aXZlVmlld0RlY2FkZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlVmlldyA9IENhbGVuZGFyVmlldy5ERUNBREU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBvblNjcm9sbChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBjb25zdCBkZWx0YSA9IGV2ZW50LmRlbHRhWSA8IDAgPyAtMSA6IDE7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVZZWFyUmFuZ2UoZGVsdGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgb25QYW4oZXZlbnQpIHtcbiAgICAgICAgY29uc3QgZGVsdGEgPSBldmVudC5kZWx0YVkgPCAwID8gMSA6IC0xO1xuICAgICAgICB0aGlzLmdlbmVyYXRlWWVhclJhbmdlKGRlbHRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5wYWdldXAnLCBbJyRldmVudCddKVxuICAgIHB1YmxpYyBvbktleWRvd25QYWdlVXAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5wcmV2aW91c01vbnRoKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24ucGFnZWRvd24nLCBbJyRldmVudCddKVxuICAgIHB1YmxpYyBvbktleWRvd25QYWdlRG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLm5leHRNb250aCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duLnNoaWZ0LnBhZ2V1cCcsIFsnJGV2ZW50J10pXG4gICAgcHVibGljIG9uS2V5ZG93blNoaWZ0UGFnZVVwKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMucHJldmlvdXNZZWFyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uc2hpZnQucGFnZWRvd24nLCBbJyRldmVudCddKVxuICAgIHB1YmxpYyBvbktleWRvd25TaGlmdFBhZ2VEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMubmV4dFllYXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5hcnJvd3VwJywgWyckZXZlbnQnXSlcbiAgICBwdWJsaWMgb25LZXlkb3duQXJyb3dVcChldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmRhdGVzLmZpbmQoKGRhdGUpID0+IGRhdGUubmF0aXZlRWxlbWVudCA9PT0gZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgaWYgKCFub2RlKSB7IHJldHVybjsgfVxuICAgICAgICBjb25zdCBkYXRlcyA9IHRoaXMuZGF0ZXMudG9BcnJheSgpO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IGRhdGVzLmluZGV4T2Yobm9kZSk7IGluZGV4IC0gNyA+IC0xOyBpbmRleCAtPSA3KSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gZGF0ZXNbaW5kZXggLSA3XTtcbiAgICAgICAgICAgIGlmICghZGF0ZS5pc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5hcnJvd2Rvd24nLCBbJyRldmVudCddKVxuICAgIHB1YmxpYyBvbktleWRvd25BcnJvd0Rvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5kYXRlcy5maW5kKChkYXRlKSA9PiBkYXRlLm5hdGl2ZUVsZW1lbnQgPT09IGV2ZW50LnRhcmdldCk7XG4gICAgICAgIGlmICghbm9kZSkgeyByZXR1cm47IH1cbiAgICAgICAgY29uc3QgZGF0ZXMgPSB0aGlzLmRhdGVzLnRvQXJyYXkoKTtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSBkYXRlcy5pbmRleE9mKG5vZGUpOyBpbmRleCArIDcgPCB0aGlzLmRhdGVzLmxlbmd0aDsgaW5kZXggKz0gNykge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IGRhdGVzW2luZGV4ICsgN107XG4gICAgICAgICAgICBpZiAoIWRhdGUuaXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGRhdGUubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uYXJyb3dsZWZ0JywgWyckZXZlbnQnXSlcbiAgICBwdWJsaWMgb25LZXlkb3duQXJyb3dMZWZ0KGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZGF0ZXMuZmluZCgoZGF0ZSkgPT4gZGF0ZS5uYXRpdmVFbGVtZW50ID09PSBldmVudC50YXJnZXQpO1xuICAgICAgICBpZiAoIW5vZGUpIHsgcmV0dXJuOyB9XG4gICAgICAgIGNvbnN0IGRhdGVzID0gdGhpcy5kYXRlcy50b0FycmF5KCk7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gZGF0ZXMuaW5kZXhPZihub2RlKTsgaW5kZXggPiAwOyBpbmRleC0tKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gZGF0ZXNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgIGlmICghZGF0ZS5pc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5hcnJvd3JpZ2h0JywgWyckZXZlbnQnXSlcbiAgICBwdWJsaWMgb25LZXlkb3duQXJyb3dSaWdodChldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmRhdGVzLmZpbmQoKGRhdGUpID0+IGRhdGUubmF0aXZlRWxlbWVudCA9PT0gZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgaWYgKCFub2RlKSB7IHJldHVybjsgfVxuICAgICAgICBjb25zdCBkYXRlcyA9IHRoaXMuZGF0ZXMudG9BcnJheSgpO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IGRhdGVzLmluZGV4T2Yobm9kZSk7IGluZGV4IDwgdGhpcy5kYXRlcy5sZW5ndGggLSAxOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gZGF0ZXNbaW5kZXggKyAxXTtcbiAgICAgICAgICAgIGlmICghZGF0ZS5pc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5ob21lJywgWyckZXZlbnQnXSlcbiAgICBwdWJsaWMgb25LZXlkb3duSG9tZShldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGNvbnN0IGRhdGVzID0gdGhpcy5kYXRlcy5maWx0ZXIoZCA9PiBkLmlzQ3VycmVudE1vbnRoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFkYXRlc1tpXS5pc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgZGF0ZXNbaV0ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uZW5kJywgWyckZXZlbnQnXSlcbiAgICBwdWJsaWMgb25LZXlkb3duRW5kKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3QgZGF0ZXMgPSB0aGlzLmRhdGVzLmZpbHRlcihkID0+IGQuaXNDdXJyZW50TW9udGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gZGF0ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmICghZGF0ZXNbaV0uaXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGRhdGVzW2ldLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGF0ZVRyYWNrZXIoaW5kZXgsIGl0ZW0pOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7aXRlbS5kYXRlLmdldE1vbnRoKCl9LS0ke2l0ZW0uZGF0ZS5nZXREYXRlKCl9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIHJvd1RyYWNrZXIoaW5kZXgsIGl0ZW0pOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7aXRlbVtpbmRleF0uZGF0ZS5nZXRNb250aCgpfSR7aXRlbVtpbmRleF0uZGF0ZS5nZXREYXRlKCl9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHNpbmdsZSBzZWxlY3Rpb24uXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgc2VsZWN0U2luZ2xlKHZhbHVlOiBEYXRlKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcyA9IHRoaXMuZ2V0RGF0ZU9ubHkodmFsdWUpO1xuICAgICAgICB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKHRoaXMuc2VsZWN0ZWREYXRlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBtdWx0aXBsZSBzZWxlY3Rpb25cbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZWxlY3RNdWx0aXBsZSh2YWx1ZTogRGF0ZSB8IERhdGVbXSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcyA9IHRoaXMuc2VsZWN0ZWREYXRlcy5jb25jYXQodmFsdWUubWFwKHYgPT4gdGhpcy5nZXREYXRlT25seSh2KSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRlT25seSA9IHRoaXMuZ2V0RGF0ZU9ubHkodmFsdWUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWREYXRlcy5ldmVyeSgoZGF0ZTogRGF0ZSkgPT4gZGF0ZS5nZXRUaW1lKCkgIT09IHZhbHVlRGF0ZU9ubHkuZ2V0VGltZSgpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcy5wdXNoKHZhbHVlRGF0ZU9ubHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZXMgPSB0aGlzLnNlbGVjdGVkRGF0ZXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAoZGF0ZTogRGF0ZSkgPT4gZGF0ZS5nZXRUaW1lKCkgIT09IHZhbHVlRGF0ZU9ubHkuZ2V0VGltZSgpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sodGhpcy5zZWxlY3RlZERhdGVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZWxlY3RSYW5nZSh2YWx1ZTogRGF0ZSB8IERhdGVbXSwgZXhjbHVkZURpc2FibGVkRGF0ZXM6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBsZXQgc3RhcnQ6IERhdGU7XG4gICAgICAgIGxldCBlbmQ6IERhdGU7XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLnJhbmdlU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFsdWUuc29ydCgoYTogRGF0ZSwgYjogRGF0ZSkgPT4gYS52YWx1ZU9mKCkgLSBiLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICBzdGFydCA9IHRoaXMuZ2V0RGF0ZU9ubHkodmFsdWVbMF0pO1xuICAgICAgICAgICAgZW5kID0gdGhpcy5nZXREYXRlT25seSh2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZXMgPSBbc3RhcnQsIC4uLnRoaXMuZ2VuZXJhdGVEYXRlUmFuZ2Uoc3RhcnQsIGVuZCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnJhbmdlU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmFuZ2VTdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZXMgPSBbdmFsdWVdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJhbmdlU3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCkgPT09IHZhbHVlLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25DaGFuZ2VDYWxsYmFjayh0aGlzLnNlbGVjdGVkRGF0ZXMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERhdGVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcy5zb3J0KChhOiBEYXRlLCBiOiBEYXRlKSA9PiBhLnZhbHVlT2YoKSAtIGIudmFsdWVPZigpKTtcblxuICAgICAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5zZWxlY3RlZERhdGVzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgZW5kID0gdGhpcy5zZWxlY3RlZERhdGVzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcyA9IFtzdGFydCwgLi4udGhpcy5nZW5lcmF0ZURhdGVSYW5nZShzdGFydCwgZW5kKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXhjbHVkZURpc2FibGVkRGF0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcyA9IHRoaXMuc2VsZWN0ZWREYXRlcy5maWx0ZXIoZCA9PiAhdGhpcy5pc0RhdGVEaXNhYmxlZChkKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKHRoaXMuc2VsZWN0ZWREYXRlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBzaW5nbGUgZGVzZWxlY3Rpb24uXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZGVzZWxlY3RTaW5nbGUodmFsdWU6IERhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWREYXRlcyAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5nZXREYXRlT25seUluTXModmFsdWUgYXMgRGF0ZSkgPT09IHRoaXMuZ2V0RGF0ZU9ubHlJbk1zKHRoaXMuc2VsZWN0ZWREYXRlcykpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKHRoaXMuc2VsZWN0ZWREYXRlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIG11bHRpcGxlIGRlc2VsZWN0aW9uLlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIGRlc2VsZWN0TXVsdGlwbGUodmFsdWU6IERhdGVbXSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLmZpbHRlcih2ID0+IHYgIT09IG51bGwpO1xuICAgICAgICBjb25zdCBzZWxlY3RlZERhdGVzQ291bnQgPSB0aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCBkYXRlc0luTXNUb0Rlc2VsZWN0OiBTZXQ8bnVtYmVyPiA9IG5ldyBTZXQ8bnVtYmVyPihcbiAgICAgICAgICAgIHZhbHVlLm1hcCh2ID0+IHRoaXMuZ2V0RGF0ZU9ubHlJbk1zKHYpKSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKGRhdGVzSW5Nc1RvRGVzZWxlY3QuaGFzKHRoaXMuZ2V0RGF0ZU9ubHlJbk1zKHRoaXMuc2VsZWN0ZWREYXRlc1tpXSkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERhdGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoICE9PSBzZWxlY3RlZERhdGVzQ291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sodGhpcy5zZWxlY3RlZERhdGVzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcmFuZ2UgZGVzZWxlY3Rpb24uXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZGVzZWxlY3RSYW5nZSh2YWx1ZTogRGF0ZVtdKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuZmlsdGVyKHYgPT4gdiAhPT0gbnVsbCAmJiBpc0RhdGUodikpO1xuICAgICAgICBpZiAodmFsdWUubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUuc29ydCgoYTogRGF0ZSwgYjogRGF0ZSkgPT4gYS52YWx1ZU9mKCkgLSBiLnZhbHVlT2YoKSk7XG4gICAgICAgIGNvbnN0IHZhbHVlU3RhcnQgPSB0aGlzLmdldERhdGVPbmx5SW5Ncyh2YWx1ZVswXSk7XG4gICAgICAgIGNvbnN0IHZhbHVlRW5kID0gdGhpcy5nZXREYXRlT25seUluTXModmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0pO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlcy5zb3J0KChhOiBEYXRlLCBiOiBEYXRlKSA9PiBhLnZhbHVlT2YoKSAtIGIudmFsdWVPZigpKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWREYXRlc1N0YXJ0ID0gdGhpcy5nZXREYXRlT25seUluTXModGhpcy5zZWxlY3RlZERhdGVzWzBdKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWREYXRlc0VuZCA9IHRoaXMuZ2V0RGF0ZU9ubHlJbk1zKHRoaXMuc2VsZWN0ZWREYXRlc1t0aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoIC0gMV0pO1xuXG4gICAgICAgIGlmICghKHZhbHVlRW5kIDwgc2VsZWN0ZWREYXRlc1N0YXJ0KSAmJiAhKHZhbHVlU3RhcnQgPiBzZWxlY3RlZERhdGVzRW5kKSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERhdGVzID0gW107XG4gICAgICAgICAgICB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKHRoaXMuc2VsZWN0ZWREYXRlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZWxlY3REYXRlRnJvbUNsaWVudCh2YWx1ZTogRGF0ZSkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlICdzaW5nbGUnOlxuICAgICAgICAgICAgY2FzZSAnbXVsdGknOlxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0RhdGVEaXNhYmxlZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3REYXRlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3JhbmdlJzpcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdFJhbmdlKHZhbHVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIGlzRGF0ZUluUmFuZ2VzKGRhdGU6IERhdGUsIHJhbmdlczogRGF0ZVJhbmdlRGVzY3JpcHRvcltdKTogYm9vbGVhbiB7XG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpO1xuICAgICAgICBjb25zdCBkYXRlSW5NcyA9IGRhdGUuZ2V0VGltZSgpO1xuXG4gICAgICAgIGZvciAoY29uc3QgZGVzY3JpcHRvciBvZiByYW5nZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRSYW5nZXMgPSBkZXNjcmlwdG9yLmRhdGVSYW5nZSA/IGRlc2NyaXB0b3IuZGF0ZVJhbmdlLm1hcChcbiAgICAgICAgICAgICAgICByID0+IG5ldyBEYXRlKHIuZ2V0RnVsbFllYXIoKSwgci5nZXRNb250aCgpLCByLmdldERhdGUoKSkpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgc3dpdGNoIChkZXNjcmlwdG9yLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIChEYXRlUmFuZ2VUeXBlLkFmdGVyKTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGVJbk1zID4gZFJhbmdlc1swXS5nZXRUaW1lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAoRGF0ZVJhbmdlVHlwZS5CZWZvcmUpOlxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZUluTXMgPCBkUmFuZ2VzWzBdLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIChEYXRlUmFuZ2VUeXBlLkJldHdlZW4pOlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkUmFuZ2UgPSBkUmFuZ2VzLm1hcChkID0+IGQuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluID0gTWF0aC5taW4oZFJhbmdlWzBdLCBkUmFuZ2VbMV0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChkUmFuZ2VbMF0sIGRSYW5nZVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRlSW5NcyA+PSBtaW4gJiYgZGF0ZUluTXMgPD0gbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgKERhdGVSYW5nZVR5cGUuU3BlY2lmaWMpOlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlc0luTXMgPSBkUmFuZ2VzLm1hcChkID0+IGQuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcGVjaWZpY0RhdGVJbk1zIG9mIGRhdGVzSW5Ncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGVJbk1zID09PSBzcGVjaWZpY0RhdGVJbk1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIChEYXRlUmFuZ2VUeXBlLldlZWtkYXlzKTpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF5ID0gZGF0ZS5nZXREYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRheSAlIDYgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAoRGF0ZVJhbmdlVHlwZS5XZWVrZW5kcyk6XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdlZWtkYXkgPSBkYXRlLmdldERheSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2Vla2RheSAlIDYgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBtZXRob2QgYnVpbGRpbmcgYW5kIHJldHVybmluZyB0aGUgY29udGV4dCBvYmplY3QgaW5zaWRlXG4gICAgICogdGhlIGNhbGVuZGFyIHRlbXBsYXRlcy5cbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZUNvbnRleHQodmFsdWU6IERhdGUpIHtcbiAgICAgICAgY29uc3QgZm9ybWF0T2JqZWN0ID0ge1xuICAgICAgICAgICAgbW9udGhWaWV3OiAoKSA9PiB0aGlzLmFjdGl2ZVZpZXdZZWFyKCksXG4gICAgICAgICAgICB5ZWFyVmlldzogKCkgPT4gdGhpcy5hY3RpdmVWaWV3RGVjYWRlKCksXG4gICAgICAgICAgICAuLi50aGlzLmNhbGVuZGFyTW9kZWwuZm9ybWF0VG9QYXJ0cyh2YWx1ZSwgdGhpcy5sb2NhbGUsIHRoaXMuX2Zvcm1hdE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgWydlcmEnLCAneWVhcicsICdtb250aCcsICdkYXknLCAnd2Vla2RheSddKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4geyAkaW1wbGljaXQ6IGZvcm1hdE9iamVjdCB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIGdlbmVyYXRlRGF0ZVJhbmdlKHN0YXJ0OiBEYXRlLCBlbmQ6IERhdGUpOiBEYXRlW10ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgc3RhcnQgPSB0aGlzLmdldERhdGVPbmx5KHN0YXJ0KTtcbiAgICAgICAgZW5kID0gdGhpcy5nZXREYXRlT25seShlbmQpO1xuICAgICAgICB3aGlsZSAoc3RhcnQuZ2V0VGltZSgpICE9PSBlbmQuZ2V0VGltZSgpKSB7XG4gICAgICAgICAgICBzdGFydCA9IHRoaXMuY2FsZW5kYXJNb2RlbC50aW1lZGVsdGEoc3RhcnQsICdkYXknLCAxKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHN0YXJ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZ2VuZXJhdGVZZWFyUmFuZ2UoZGVsdGE6IG51bWJlcikge1xuICAgICAgICBjb25zdCBjdXJyZW50WWVhciA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTtcblxuICAgICAgICBpZiAoKGRlbHRhID4gMCAmJiB0aGlzLl92aWV3RGF0ZS5nZXRGdWxsWWVhcigpIC0gY3VycmVudFllYXIgPj0gOTUpIHx8XG4gICAgICAgICAgICAoZGVsdGEgPCAwICYmIGN1cnJlbnRZZWFyIC0gdGhpcy5fdmlld0RhdGUuZ2V0RnVsbFllYXIoKSA+PSA5NSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92aWV3RGF0ZSA9IHRoaXMuY2FsZW5kYXJNb2RlbC50aW1lZGVsdGEodGhpcy5fdmlld0RhdGUsICd5ZWFyJywgZGVsdGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIGdldERhdGVPbmx5SW5NcyhkYXRlOiBEYXRlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGVPbmx5KGRhdGUpLmdldFRpbWUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXREYXRlT25seShkYXRlOiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9vblRvdWNoZWRDYWxsYmFjazogKCkgPT4gdm9pZCA9ICgpID0+IHsgfTtcbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9vbkNoYW5nZUNhbGxiYWNrOiAoXzogRGF0ZSkgPT4gdm9pZCA9ICgpID0+IHsgfTtcbn1cbiJdfQ==