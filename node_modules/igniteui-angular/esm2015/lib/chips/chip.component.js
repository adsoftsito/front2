/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ChangeDetectorRef, EventEmitter, ElementRef, HostBinding, Input, Output, ViewChild, Renderer2, TemplateRef } from '@angular/core';
import { IgxDragDirective } from '../directives/dragdrop/dragdrop.directive';
/**
 * @record
 */
export function IBaseChipEventArgs() { }
function IBaseChipEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IBaseChipEventArgs.prototype.originalEvent;
    /** @type {?} */
    IBaseChipEventArgs.prototype.owner;
}
/**
 * @record
 */
export function IChipClickEventArgs() { }
function IChipClickEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IChipClickEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function IChipKeyDownEventArgs() { }
function IChipKeyDownEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IChipKeyDownEventArgs.prototype.originalEvent;
    /** @type {?} */
    IChipKeyDownEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function IChipEnterDragAreaEventArgs() { }
function IChipEnterDragAreaEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IChipEnterDragAreaEventArgs.prototype.dragChip;
}
/**
 * @record
 */
export function IChipSelectEventArgs() { }
function IChipSelectEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IChipSelectEventArgs.prototype.cancel;
    /** @type {?} */
    IChipSelectEventArgs.prototype.selected;
}
let /** @type {?} */ CHIP_ID = 0;
export class IgxChipComponent {
    /**
     * @param {?} cdr
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(cdr, elementRef, renderer) {
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.renderer = renderer;
        /**
         * An \@Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
         * ```html
         * <igx-chip [id]="'igx-chip-1'"></igx-chip>
         * ```
         */
        this.id = `igx-chip-${CHIP_ID++}`;
        /**
         * An \@Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.
         * By default it is set to false.
         * ```html
         * <igx-chip [id]="'igx-chip-1'" [draggable]="true"></igx-chip>
         * ```
         */
        this.draggable = false;
        /**
         * An \@Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.
         * By default it is set to false.
         * ```html
         * <igx-chip [id]="'igx-chip-1'" [draggable]="true" [removable]="true"></igx-chip>
         * ```
         */
        this.removable = false;
        /**
         * An \@Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,
         * By default it is set to false.
         * ```html
         * <igx-chip [id]="chip.id" [draggable]="true" [removable]="true" [selectable]="true"></igx-chip>
         * ```
         */
        this.selectable = false;
        /**
         * @hidden
         */
        this.class = '';
        /**
         * An \@Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions
         * like focusing on click or tab, selection on click or Space, dragging.
         * By default it is set to false.
         * ```html
         * <igx-chip [id]="chip.id" [disabled]="true"></igx-chip>
         * ```
         */
        this.disabled = false;
        /**
         * Emits an event when the `IgxChipComponent` moving starts.
         * Returns the moving `IgxChipComponent`.
         * ```typescript
         * moveStarted(event: IBaseChipEventArgs){
         *     let movingChip = event.owner;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onMoveStart)="moveStarted($event)">
         * ```
         */
        this.onMoveStart = new EventEmitter();
        /**
         * Emits an event when the `IgxChipComponent` moving ends.
         * Returns the moved `IgxChipComponent`.
         * ```typescript
         * moveEnded(event: IBaseChipEventArgs){
         *     let movedChip = event.owner;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onMoveEnd)="moveEnded($event)">
         * ```
         */
        this.onMoveEnd = new EventEmitter();
        /**
         * Emits an event when the `IgxChipComponent` is removed.
         * Returns the removed `IgxChipComponent`.
         * ```typescript
         * remove(event: IBaseChipEventArgs){
         *     let removedChip = event.owner;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onRemove)="remove($event)">
         * ```
         */
        this.onRemove = new EventEmitter();
        /**
         * Emits an event when the `IgxChipComponent` is clicked.
         * Returns the clicked `IgxChipComponent`, whether the event should be canceled.
         * ```typescript
         * chipClick(event: IChipClickEventArgs){
         *     let clickedChip = event.owner;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onClick)="chipClick($event)">
         * ```
         */
        this.onClick = new EventEmitter();
        /**
         * Emits event when the `IgxChipComponent` is selected/deselected.
         * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and
         * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.
         * ```typescript
         * chipSelect(event: IChipSelectEventArgs){
         *     let selectedChip = event.owner;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onSelection)="chipSelect($event)">
         * ```
         */
        this.onSelection = new EventEmitter();
        /**
         * Emits an event when the `IgxChipComponent` keyboard navigation is being used.
         * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,
         * if the `alt`, `shift` or `control` key is pressed and the pressed key name.
         * ```typescript
         * chipKeyDown(event: IChipKeyDownEventArgs){
         *     let keyDown = event.key;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onKeyDown)="chipKeyDown($event)">
         * ```
         */
        this.onKeyDown = new EventEmitter();
        /**
         * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.
         * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as
         * the original drop event arguments.
         * ```typescript
         * chipEnter(event: IChipEnterDragAreaEventArgs){
         *     let targetChip = event.targetChip;
         * }
         * ```
         * ```html
         * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onDragEnter)="chipEnter($event)">
         * ```
         */
        this.onDragEnter = new EventEmitter();
        this._displayDensity = "comfortable" /* comfortable */;
        this._selected = false;
        this._selectedItemClass = 'igx-chip__item--selected';
        this._movedWhileRemoving = false;
    }
    /**
     * Sets the `IgxChipComponent` selected state.
     * ```html
     * <igx-chip #myChip [id]="'igx-chip-1'" [selectable]="true" [selected]="true">
     * ```
     * @param {?} newValue
     * @return {?}
     */
    set selected(newValue) {
        this.changeSelection(newValue);
    }
    /**
     * Returns if the `IgxChipComponent` is selected.
     * ```typescript
     * \@ViewChild('myChip')
     * public chip: IgxChipComponent;
     * selectedChip(){
     *     let selectedChip = this.chip.selected;
     * }
     * ```
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * Returns the `IgxChipComponent` theme.
     * ```typescript
     * \@ViewChild('myChip')
     * public chip: IgxChipComponent;
     *     ngAfterViewInit(){
     *     let chipTheme = this.chip.displayDensity;
     * }
     * ```
     * @return {?}
     */
    get displayDensity() {
        return this._displayDensity;
    }
    /**
     * An \@Input property that sets the `IgxChipComponent` theme.
     * Available options are `compact`, `cosy`, `comfortable`.
     * The default theme is `comfortable`.
     * ```html
     * <igx-chip #myChip [id]="'igx-chip-1'" [displayDensity]="'compact'"></igx-chip>
     * ```
     * @param {?} val
     * @return {?}
     */
    set displayDensity(val) {
        switch (val) {
            case 'compact':
                this._displayDensity = "compact" /* compact */;
                break;
            case 'cosy':
                this._displayDensity = "cosy" /* cosy */;
                break;
            case 'comfortable':
            default:
                this._displayDensity = "comfortable" /* comfortable */;
        }
    }
    /**
     * An \@Input property that sets the `IgxChipComponent` background color.
     * The `color` property supports string, rgb, hex.
     * ```html
     * <igx-chip #myChip [id]="'igx-chip-1'" [color]="'#ff0000'"></igx-chip>
     * ```
     * @param {?} newColor
     * @return {?}
     */
    set color(newColor) {
        this.chipArea.nativeElement.style.backgroundColor = newColor;
    }
    /**
     * Returns the background color of the `IgxChipComponent`.
     * ```typescript
     * \@ViewChild('myChip')
     * public chip: IgxChipComponent;
     * ngAfterViewInit(){
     *     let chipColor = this.chip.color;
     * }
     * ```
     * @return {?}
     */
    get color() {
        return this.chipArea.nativeElement.style.backgroundColor;
    }
    /**
     * @hidden
     * @return {?}
     */
    get hostClass() {
        const /** @type {?} */ classes = [];
        switch (this._displayDensity) {
            case "cosy" /* cosy */:
                classes.push('igx-chip--cosy');
                break;
            case "compact" /* compact */:
                classes.push('igx-chip--compact');
                break;
            default:
                classes.push('igx-chip');
        }
        classes.push(this.disabled ? 'igx-chip--disabled' : '');
        // The custom classes should be at the end.
        classes.push(this.class);
        return classes.join(' ');
    }
    /**
     * @hidden
     * @return {?}
     */
    get removeButtonTemplate() {
        return this.removeIcon || this.defaultRemoveIcon;
    }
    /**
     * @hidden
     * @return {?}
     */
    get selectIconTemplate() {
        return this.selectIcon || this.defaultSelectIcon;
    }
    /**
     * @hidden
     * @return {?}
     */
    get ghostClass() {
        switch (this._displayDensity) {
            case "cosy" /* cosy */:
                return 'igx-chip__ghost--cosy';
            case "compact" /* compact */:
                return 'igx-chip__ghost--compact';
            default:
                return 'igx-chip__ghost';
        }
    }
    /**
     * @return {?}
     */
    get chipTabindex() {
        return !this.disabled ? 0 : '';
    }
    /**
     * @hidden
     * @param {?} condition
     * @return {?}
     */
    selectClass(condition) {
        const /** @type {?} */ SELECT_CLASS = 'igx-chip__select';
        return {
            [SELECT_CLASS]: condition,
            [`${SELECT_CLASS}--hidden`]: !condition
        };
    }
    /**
     * @param {?} newValue
     * @param {?=} srcEvent
     * @return {?}
     */
    changeSelection(newValue, srcEvent = null) {
        const /** @type {?} */ onSelectArgs = {
            originalEvent: srcEvent,
            owner: this,
            selected: false,
            cancel: false
        };
        if (newValue && !this._selected) {
            onSelectArgs.selected = true;
            this.onSelection.emit(onSelectArgs);
            if (!onSelectArgs.cancel) {
                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);
                this._selected = newValue;
            }
        }
        else if (!newValue && this._selected) {
            this.onSelection.emit(onSelectArgs);
            if (!onSelectArgs.cancel) {
                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);
                this._selected = newValue;
            }
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onChipKeyDown(event) {
        const /** @type {?} */ keyDownArgs = {
            originalEvent: event,
            owner: this,
            cancel: false
        };
        this.onKeyDown.emit(keyDownArgs);
        if (keyDownArgs.cancel) {
            return;
        }
        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {
            this.onRemove.emit({
                originalEvent: event,
                owner: this
            });
        }
        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {
            this.changeSelection(!this.selected, event);
        }
        if (event.key !== 'Tab') {
            event.preventDefault();
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onRemoveBtnKeyDown(event) {
        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {
            this.onRemove.emit({
                originalEvent: event,
                owner: this
            });
            event.preventDefault();
            event.stopPropagation();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onRemoveMouseDown(event) {
        event.stopPropagation();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onRemoveClick(event) {
        this.onRemove.emit({
            originalEvent: event,
            owner: this
        });
    }
    /**
     * @hidden
     * @return {?}
     */
    onRemoveTouchMove() {
        // We don't remove chip if user starting touch interacting on the remove button moves the chip
        this._movedWhileRemoving = true;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onRemoveTouchEnd(event) {
        if (!this._movedWhileRemoving) {
            this.onRemoveClick(event);
        }
        this._movedWhileRemoving = false;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onChipDragStart(event) {
        this.onMoveStart.emit({
            originalEvent: event.originalEvent,
            owner: this
        });
        event.cancel = !this.draggable || this.disabled;
    }
    /**
     * @hidden
     * @return {?}
     */
    onChipDragEnd() {
        this.dragDir.dropFinished();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onChipMoveEnd(event) {
        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.
        this.onMoveEnd.emit({
            originalEvent: event.originalEvent,
            owner: this
        });
        if (this.selected) {
            this.chipArea.nativeElement.focus();
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onChipDragClicked(event) {
        const /** @type {?} */ clickEventArgs = {
            originalEvent: event.originalEvent,
            owner: this,
            cancel: false
        };
        this.onClick.emit(clickEventArgs);
        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {
            this.changeSelection(!this.selected, event.originalEvent);
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onChipDragEnterHandler(event) {
        if (this.dragDir === event.drag || !event.dragData || !event.dragData.chip) {
            return;
        }
        const /** @type {?} */ eventArgs = {
            owner: this,
            dragChip: event.dragData.chip,
            originalEvent: event
        };
        this.onDragEnter.emit(eventArgs);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onChipDrop(event) {
        // Cancel the default drop logic
        event.cancel = true;
    }
}
IgxChipComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-chip',
                template: `<div #chipArea class="igx-chip__item"
    [attr.tabindex]="chipTabindex"
    (keydown)="onChipKeyDown($event)"
    [igxDrag]="{chip: this}"
    [hideBaseOnDrag]="true"
    [animateOnRelease]="true"
    [ghostImageClass]="ghostClass"
    (dragStart)="onChipDragStart($event)"
    (dragEnd)="onChipDragEnd()"
    (returnMoveEnd)="onChipMoveEnd($event)"
    (dragClicked)="onChipDragClicked($event)"
    igxDrop
    (onEnter)="onChipDragEnterHandler($event)"
    (onDrop)="onChipDrop($event)">

    <div [ngClass]="selectClass(selected)" *ngIf="selectable">
        <ng-container *ngTemplateOutlet="selectIconTemplate"></ng-container>
    </div>

    <ng-content select="igx-prefix,[igxPrefix]"></ng-content>

    <div class="igx-chip__content">
        <ng-content></ng-content>
    </div>

    <ng-content select="igx-suffix,[igxSuffix]"></ng-content>

    <div class="igx-chip__remove" *ngIf="removable"
        tabindex="0"
        (keydown)="onRemoveBtnKeyDown($event)"
        (pointerdown)="onRemoveMouseDown($event)"
        (mousedown)="onRemoveMouseDown($event)"
        (click)="onRemoveClick($event)"
        (touchmove)="onRemoveTouchMove()"
        (touchend)="onRemoveTouchEnd($event)">
        <ng-container *ngTemplateOutlet="removeButtonTemplate"></ng-container>
    </div>
</div>

<ng-template #defaultSelectIcon>
    <igx-icon>done</igx-icon>
</ng-template>

<ng-template #defaultRemoveIcon>
    <igx-icon>cancel</igx-icon>
</ng-template>
`
            },] },
];
// End chip igxDrop behaviour
/** @nocollapse */
IgxChipComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
    { type: Renderer2, },
];
IgxChipComponent.propDecorators = {
    "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
    "data": [{ type: Input },],
    "draggable": [{ type: Input },],
    "removable": [{ type: Input },],
    "removeIcon": [{ type: Input },],
    "selectable": [{ type: Input },],
    "selectIcon": [{ type: Input },],
    "class": [{ type: Input },],
    "disabled": [{ type: Input },],
    "selected": [{ type: Input },],
    "displayDensity": [{ type: Input },],
    "color": [{ type: Input },],
    "onMoveStart": [{ type: Output },],
    "onMoveEnd": [{ type: Output },],
    "onRemove": [{ type: Output },],
    "onClick": [{ type: Output },],
    "onSelection": [{ type: Output },],
    "onKeyDown": [{ type: Output },],
    "onDragEnter": [{ type: Output },],
    "hostClass": [{ type: HostBinding, args: ['attr.class',] },],
    "chipArea": [{ type: ViewChild, args: ['chipArea', { read: ElementRef },] },],
    "dragDir": [{ type: ViewChild, args: ['chipArea', { read: IgxDragDirective },] },],
    "defaultRemoveIcon": [{ type: ViewChild, args: ['defaultRemoveIcon', { read: TemplateRef },] },],
    "defaultSelectIcon": [{ type: ViewChild, args: ['defaultSelectIcon', { read: TemplateRef },] },],
};
function IgxChipComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxChipComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxChipComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxChipComponent.propDecorators;
    /**
     * An \@Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
     * ```html
     * <igx-chip [id]="'igx-chip-1'"></igx-chip>
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.id;
    /**
     * An \@Input property that stores data related to the chip.
     * ```html
     * <igx-chip [data]="{ value: 'Country' }"></igx-chip>
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.data;
    /**
     * An \@Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.
     * By default it is set to false.
     * ```html
     * <igx-chip [id]="'igx-chip-1'" [draggable]="true"></igx-chip>
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.draggable;
    /**
     * An \@Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.
     * By default it is set to false.
     * ```html
     * <igx-chip [id]="'igx-chip-1'" [draggable]="true" [removable]="true"></igx-chip>
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.removable;
    /**
     * An \@Input property that overrides the default icon that the chip applies to the remove button.
     * ```html
     * <igx-chip [id]="chip.id" [removable]="true" [removeIcon]="iconTemplate"></igx-chip>
     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.removeIcon;
    /**
     * An \@Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,
     * By default it is set to false.
     * ```html
     * <igx-chip [id]="chip.id" [draggable]="true" [removable]="true" [selectable]="true"></igx-chip>
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.selectable;
    /**
     * An \@Input property that overrides the default icon that the chip applies when it is selected.
     * ```html
     * <igx-chip [id]="chip.id" [selectable]="true" [selectIcon]="iconTemplate"></igx-chip>
     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.selectIcon;
    /**
     * @hidden
     * @type {?}
     */
    IgxChipComponent.prototype.class;
    /**
     * An \@Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions
     * like focusing on click or tab, selection on click or Space, dragging.
     * By default it is set to false.
     * ```html
     * <igx-chip [id]="chip.id" [disabled]="true"></igx-chip>
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.disabled;
    /**
     * Emits an event when the `IgxChipComponent` moving starts.
     * Returns the moving `IgxChipComponent`.
     * ```typescript
     * moveStarted(event: IBaseChipEventArgs){
     *     let movingChip = event.owner;
     * }
     * ```
     * ```html
     * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onMoveStart)="moveStarted($event)">
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.onMoveStart;
    /**
     * Emits an event when the `IgxChipComponent` moving ends.
     * Returns the moved `IgxChipComponent`.
     * ```typescript
     * moveEnded(event: IBaseChipEventArgs){
     *     let movedChip = event.owner;
     * }
     * ```
     * ```html
     * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onMoveEnd)="moveEnded($event)">
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.onMoveEnd;
    /**
     * Emits an event when the `IgxChipComponent` is removed.
     * Returns the removed `IgxChipComponent`.
     * ```typescript
     * remove(event: IBaseChipEventArgs){
     *     let removedChip = event.owner;
     * }
     * ```
     * ```html
     * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onRemove)="remove($event)">
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.onRemove;
    /**
     * Emits an event when the `IgxChipComponent` is clicked.
     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.
     * ```typescript
     * chipClick(event: IChipClickEventArgs){
     *     let clickedChip = event.owner;
     * }
     * ```
     * ```html
     * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onClick)="chipClick($event)">
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.onClick;
    /**
     * Emits event when the `IgxChipComponent` is selected/deselected.
     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and
     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.
     * ```typescript
     * chipSelect(event: IChipSelectEventArgs){
     *     let selectedChip = event.owner;
     * }
     * ```
     * ```html
     * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onSelection)="chipSelect($event)">
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.onSelection;
    /**
     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.
     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,
     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.
     * ```typescript
     * chipKeyDown(event: IChipKeyDownEventArgs){
     *     let keyDown = event.key;
     * }
     * ```
     * ```html
     * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onKeyDown)="chipKeyDown($event)">
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.onKeyDown;
    /**
     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.
     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as
     * the original drop event arguments.
     * ```typescript
     * chipEnter(event: IChipEnterDragAreaEventArgs){
     *     let targetChip = event.targetChip;
     * }
     * ```
     * ```html
     * <igx-chip #myChip [id]="'igx-chip-1'" [draggable]="true" (onDragEnter)="chipEnter($event)">
     * ```
     * @type {?}
     */
    IgxChipComponent.prototype.onDragEnter;
    /**
     * @hidden
     * @type {?}
     */
    IgxChipComponent.prototype.chipArea;
    /**
     * @hidden
     * @type {?}
     */
    IgxChipComponent.prototype.dragDir;
    /**
     * @hidden
     * @type {?}
     */
    IgxChipComponent.prototype.defaultRemoveIcon;
    /**
     * @hidden
     * @type {?}
     */
    IgxChipComponent.prototype.defaultSelectIcon;
    /** @type {?} */
    IgxChipComponent.prototype._displayDensity;
    /** @type {?} */
    IgxChipComponent.prototype._selected;
    /** @type {?} */
    IgxChipComponent.prototype._selectedItemClass;
    /** @type {?} */
    IgxChipComponent.prototype._movedWhileRemoving;
    /** @type {?} */
    IgxChipComponent.prototype.cdr;
    /** @type {?} */
    IgxChipComponent.prototype.elementRef;
    /** @type {?} */
    IgxChipComponent.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,