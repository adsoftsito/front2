/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ContentChild, ElementRef, forwardRef, Inject } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { IgxDropDownBase, Navigate } from '../drop-down/drop-down.component';
import { IgxComboComponent } from './combo.component';
import { IgxSelectionAPIService } from '../core/selection';
import { IgxForOfDirective } from '../directives/for-of/for_of.directive';
import { Subject } from 'rxjs';
/**
 * @hidden
 */
var IgxComboDropDownComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxComboDropDownComponent, _super);
    function IgxComboDropDownComponent(elementRef, cdr, selection, combo) {
        var _this = _super.call(this, elementRef, cdr, selection) || this;
        _this.elementRef = elementRef;
        _this.cdr = cdr;
        _this.selection = selection;
        _this.combo = combo;
        _this._scrollPosition = 0;
        _this.destroy$ = new Subject();
        /**
         *  Event emitter overrides
         *
         * @hidden
         */
        _this.onOpened = _this.combo.onOpened;
        /**
         * @hidden
         */
        _this.onOpening = _this.combo.onOpening;
        /**
         * @hidden
         */
        _this.onClosing = _this.combo.onClosing;
        /**
         * @hidden
         */
        _this.onClosed = _this.combo.onClosed;
        return _this;
    }
    Object.defineProperty(IgxComboDropDownComponent.prototype, "scrollContainer", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.verticalScrollContainer.dc.location.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboDropDownComponent.prototype, "isScrolledToLast", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            var /** @type {?} */ scrollTop = this.verticalScrollContainer.getVerticalScroll().scrollTop;
            var /** @type {?} */ scrollHeight = this.verticalScrollContainer.getVerticalScroll().scrollHeight;
            return Math.floor(scrollTop + this.verticalScrollContainer.igxForContainerSize) === scrollHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboDropDownComponent.prototype, "lastVisibleIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.combo.totalItemCount ?
                Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :
                this.items.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboDropDownComponent.prototype, "children", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.combo.children;
        },
        set: /**
         * @param {?} list
         * @return {?}
         */
        function (list) {
            this._children = list;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.onFocus = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._focusedItem = this._focusedItem ? this._focusedItem : this.items.length ? this.items[0] : this.children.first;
        if (this._focusedItem) {
            this._focusedItem.isFocused = true;
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} evt
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.onBlur = /**
     * @hidden
     * @param {?=} evt
     * @return {?}
     */
    function (evt) {
        if (this._focusedItem) {
            this._focusedItem.isFocused = false;
            this._focusedItem = null;
        }
    };
    Object.defineProperty(IgxComboDropDownComponent.prototype, "selectedItem", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            var /** @type {?} */ sel = this.selection.get(this.combo.id);
            return sel ? Array.from(sel) : [];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.navigatePrev = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this._focusedItem.index === 0 && this.verticalScrollContainer.state.startIndex === 0) {
            this.combo.searchInput.nativeElement.focus();
        }
        else {
            _super.prototype.navigatePrev.call(this);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.navigateFirst = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ vContainer = this.verticalScrollContainer;
        if (vContainer.state.startIndex === 0) {
            this.focusItem(0);
            return;
        }
        vContainer.scrollTo(0);
        this.subscribeNext(vContainer, function () {
            _this.combo.triggerCheck();
            _this.focusItem(0);
            _this.combo.triggerCheck();
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.navigateLast = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ vContainer = this.verticalScrollContainer;
        var /** @type {?} */ scrollTarget = this.combo.totalItemCount ?
            this.combo.totalItemCount - 1 :
            Math.max(this.combo.data.length - 1, vContainer.igxForOf.length - 1);
        if (vContainer.igxForOf.length <= vContainer.state.startIndex + vContainer.state.chunkSize) {
            this.focusItem(this.items.length - 1);
            return;
        }
        vContainer.scrollTo(scrollTarget);
        this.subscribeNext(vContainer, function () {
            _this.combo.triggerCheck();
            _this.focusItem(_this.items.length - 1);
            _this.combo.triggerCheck();
        });
    };
    /**
     * @hidden
     * @param {?} direction
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.navigateRemoteItem = /**
     * @hidden
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        var _this = this;
        this.verticalScrollContainer.addScrollTop(direction * this.combo.itemHeight);
        this.subscribeNext(this.verticalScrollContainer, function () {
            if (direction === Navigate.Up) {
                _this.focusItem(0);
            }
            else {
                _this.focusItem(_this.focusedItem.index);
            }
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} itemID
     * @param {?=} select
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.setSelectedItem = /**
     * @hidden
     * @param {?} itemID
     * @param {?=} select
     * @return {?}
     */
    function (itemID, select) {
        if (select === void 0) { select = true; }
        this.combo.setSelectedItem(itemID, select);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} item
     * @param {?=} event
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.selectItem = /**
     * @hidden
     * @param {?} item
     * @param {?=} event
     * @return {?}
     */
    function (item, event) {
        if (item.value === 'ADD ITEM') {
            if (event) {
                this.combo.addItemToCollection();
            }
        }
        else {
            this.setSelectedItem(item.itemID);
            this._focusedItem = item;
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} newIndex
     * @param {?=} direction
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.navigateItem = /**
     * @hidden
     * @param {?} newIndex
     * @param {?=} direction
     * @return {?}
     */
    function (newIndex, direction) {
        var _this = this;
        // Virtual scrolling holds one hidden loaded element at the bottom of the drop down list.
        // At the top there isn't such a hidden element.
        // That's why we hold the first or the one before the last list item as focused, during keyboard navigation.
        // This means that if we want to focus next element, it's the last hidden element when scrolling down
        // and when scrolling up it is not loaded at all.
        // It's more special case when srcolling down and the hidden element is group header,
        // which is not part of the this.items collection.
        // In that case the real item is not hidden, but not loaded at all by the virtualization,
        // and this is the same case as normal scroll up.
        var /** @type {?} */ vContainer = this.verticalScrollContainer;
        var /** @type {?} */ extraScroll = this.combo.isAddButtonVisible();
        if (direction) {
            if (direction === Navigate.Down && extraScroll) {
                if (vContainer.igxForOf[vContainer.igxForOf.length - 1] === this.focusedItem.value) {
                    if (this.focusedItem) {
                        this.focusedItem.isFocused = false;
                    }
                    this.focusedItem = this.children.last;
                    this.focusedItem.isFocused = true;
                    return;
                }
                else if (vContainer.igxForOf[vContainer.state.chunkSize + vContainer.state.startIndex - 2] ===
                    this.focusedItem.value) {
                    this.subscribeNext(vContainer, function () {
                        if (_this.focusedItem.isHeader &&
                            vContainer.state.startIndex + vContainer.state.chunkSize < vContainer.igxForOf.length) {
                            vContainer.scrollNext();
                        }
                    });
                    vContainer.scrollNext();
                    return;
                }
            }
        }
        if (newIndex === -1) {
            this.navigateVirtualItem(direction, extraScroll ? 1 : 0);
        }
        else if (newIndex === this.lastVisibleIndex && !this.isScrolledToLast) {
            this.navigateVirtualItem(direction, extraScroll ? 1 : 0);
        }
        else if (newIndex === this.lastVisibleIndex && this.isScrolledToLast) {
            // When initially scrolling to the last item, a pseudo element is present in the children list
            // We need to check if the element we're on is an actual element or an empty 'igx-combo-item' child
            if (this.items[newIndex].element && this.items[newIndex].element.nativeElement.clientHeight) {
                _super.prototype.navigateItem.call(this, newIndex);
            }
            return;
        }
        else {
            _super.prototype.navigateItem.call(this, newIndex);
        }
    };
    /**
     * @param {?} direction
     * @param {?=} extraScroll
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.navigateVirtualItem = /**
     * @param {?} direction
     * @param {?=} extraScroll
     * @return {?}
     */
    function (direction, extraScroll) {
        var _this = this;
        var /** @type {?} */ vContainer = this.verticalScrollContainer;
        // If the data is vitualized, data.length === vContainer.chunkSize, so the below checks are no-longer valid
        if (vContainer && vContainer.totalItemCount && vContainer.totalItemCount !== 0) {
            this.navigateRemoteItem(direction);
            return;
        }
        var /** @type {?} */ state = vContainer.state;
        if (this.isScrolledToLast && direction === Navigate.Down) {
            // If on the bottom most item, do not subscribe
            return;
        }
        // If on the topmost item, do not subscribe
        if (this.verticalScrollContainer.getVerticalScroll().scrollTop === 0 && direction === Navigate.Up) {
            return;
        }
        var /** @type {?} */ isScrollUp = direction === Navigate.Up;
        var /** @type {?} */ newScrollStartIndex = isScrollUp ? state.startIndex - 1 : state.startIndex + 1;
        if (newScrollStartIndex < 0) {
            newScrollStartIndex = 0;
        }
        var /** @type {?} */ data = vContainer.igxForOf;
        if (data.length === 0) {
            var /** @type {?} */ newItem = this.children.first;
            if (!newItem) {
                return;
            }
            newItem.isFocused = true;
            this._focusedItem = newItem;
            return;
        }
        // Following the big comment above, when the new item is group header, then we need to load 2 elements at once.
        if (data[newScrollStartIndex].isHeader && direction === Navigate.Up ||
            data[newScrollStartIndex + state.chunkSize - 2].isHeader && direction === Navigate.Down) {
            newScrollStartIndex = isScrollUp ? newScrollStartIndex - 1 : newScrollStartIndex + 1;
            // newScrollStartIndex = mod && direction === Navigate.Down ? newScrollStartIndex + 1 : newScrollStartIndex;
            if (newScrollStartIndex < 0) {
                // If the next item loaded is a header and is also the very first item in the list.
                vContainer.scrollTo(0); // Scrolls to the beginning of the list and switches focus to the searchInput
                this.subscribeNext(vContainer, function () {
                    _this.combo.searchInput.nativeElement.focus();
                    if (_this.focusedItem) {
                        _this.focusedItem.isFocused = false;
                    }
                    _this.focusedItem = null;
                });
                return;
            }
        }
        // If it is the very last item in the collection, when moving down
        if (newScrollStartIndex + state.chunkSize === data.length + 1) {
            vContainer.scrollTo(newScrollStartIndex);
            return;
        }
        vContainer.scrollTo(newScrollStartIndex);
        this.subscribeNext(vContainer, function () {
            state = vContainer.state;
            data = vContainer.igxForOf;
            // Because we are sure that if we scroll up then the top element is not a header, then we focus the first one.
            // When we scroll down, if the newly loaded element that is hidden is group header,
            // then we focus the last item from the this.items array.
            // This is because the this.items doens't contains the group headers, while there are rendered in the combo drop down.
            // If the newly loaded element that is hidden isn't a header, this means that the first visible item, the one that needs focus,
            // should be either the one that is before the last item (this.items).
            var /** @type {?} */ isBottomHiddenHeader = data[state.startIndex + state.chunkSize - 1].isHeader;
            var /** @type {?} */ index = isScrollUp ? 0 : isBottomHiddenHeader ? _this.items.length - 1 - extraScroll : _this.items.length - 2 - extraScroll;
            _this.focusItem(index);
        });
    };
    /**
     * @param {?} virtualContainer
     * @param {?} callback
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.subscribeNext = /**
     * @param {?} virtualContainer
     * @param {?} callback
     * @return {?}
     */
    function (virtualContainer, callback) {
        virtualContainer.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe({
            next: function (e) {
                callback(e);
            }
        });
    };
    /**
     * @param {?} visibleIndex
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.focusItem = /**
     * @param {?} visibleIndex
     * @return {?}
     */
    function (visibleIndex) {
        var /** @type {?} */ oldItem = this._focusedItem;
        if (oldItem) {
            oldItem.isFocused = false;
        }
        var /** @type {?} */ newItem = this.items[visibleIndex];
        newItem.isFocused = true;
        this._focusedItem = newItem;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.onToggleOpening = /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var /** @type {?} */ eventArgs = { cancel: false };
        this.onOpening.emit(eventArgs);
        e.cancel = eventArgs.cancel;
        if (eventArgs.cancel) {
            return;
        }
        this.combo.handleInputChange();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.onToggleOpened = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.combo.triggerCheck();
        this.combo.searchInput.nativeElement.focus();
        this.onOpened.emit();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.onToggleClosed = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.combo.comboInput.nativeElement.focus();
        this.onClosed.emit();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.onToggleClosing = /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.combo.searchValue = '';
        _super.prototype.onToggleClosing.call(this, e);
        this._scrollPosition = this.verticalScrollContainer.getVerticalScroll().scrollTop;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.updateScrollPosition = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.verticalScrollContainer.getVerticalScroll().scrollTop = this._scrollPosition;
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    IgxComboDropDownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-combo-drop-down',
                    template: "<div class=\"igx-drop-down\">\n    <div class=\"igx-drop-down__list\" igxToggle (onOpening)=\"onToggleOpening($event)\" (onOpened)=\"onToggleOpened()\" (onClosing)=\"onToggleClosing($event)\" (onClosed)=\"onToggleClosed()\">\n        <ng-container *ngIf=\"!collapsed\">\n            <ng-content></ng-content>\n        </ng-container>\n    </div>\n</div>"
                },] },
    ];
    /** @nocollapse */
    IgxComboDropDownComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
        { type: IgxSelectionAPIService, },
        { type: IgxComboComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return IgxComboComponent; }),] },] },
    ]; };
    IgxComboDropDownComponent.propDecorators = {
        "verticalScrollContainer": [{ type: ContentChild, args: [forwardRef(function () { return IgxForOfDirective; }), { read: IgxForOfDirective },] },],
    };
    return IgxComboDropDownComponent;
}(IgxDropDownBase));
export { IgxComboDropDownComponent };
function IgxComboDropDownComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxComboDropDownComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxComboDropDownComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxComboDropDownComponent.propDecorators;
    /** @type {?} */
    IgxComboDropDownComponent.prototype._children;
    /** @type {?} */
    IgxComboDropDownComponent.prototype._scrollPosition;
    /** @type {?} */
    IgxComboDropDownComponent.prototype.destroy$;
    /**
     *  Event emitter overrides
     *
     * @hidden
     * @type {?}
     */
    IgxComboDropDownComponent.prototype.onOpened;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboDropDownComponent.prototype.onOpening;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboDropDownComponent.prototype.onClosing;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboDropDownComponent.prototype.onClosed;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboDropDownComponent.prototype.verticalScrollContainer;
    /** @type {?} */
    IgxComboDropDownComponent.prototype.elementRef;
    /** @type {?} */
    IgxComboDropDownComponent.prototype.cdr;
    /** @type {?} */
    IgxComboDropDownComponent.prototype.selection;
    /** @type {?} */
    IgxComboDropDownComponent.prototype.combo;
}

//# sourceMappingURL=data:application/json;base64,