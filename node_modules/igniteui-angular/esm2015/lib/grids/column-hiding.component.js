/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { ChangeDetectorRef, Component, EventEmitter, Input, NgModule, Output } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { IgxCheckboxModule } from '../checkbox/checkbox.component';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxColumnHidingItemDirective } from './column-hiding-item.directive';
import { IgxInputGroupModule } from '../input-group/input-group.component';
import { ColumnChooserBase } from './column-chooser-base';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class IgxColumnHidingComponent extends ColumnChooserBase {
    /**
     * @param {?} cdr
     */
    constructor(cdr) {
        super(cdr);
        this.cdr = cdr;
        /**
         * Sets/gets the text of the button that shows all columns if they are hidden.
         * ```typescript
         * let showAllButtonText =  this.columnHiding.showAllText;
         * ```
         *
         * ```html
         * <igx-column-hiding [showAllText] = "'Show Columns'"></igx-column-hiding>
         * ```
         * \@memberof IgxColumnHidingComponent
         */
        this.showAllText = 'Show All';
        /**
         * Sets/gets the text of the button that hides all columns if they are shown.
         * ```typescript
         * let hideAllButtonText =  this.columnHiding.hideAllText;
         * ```
         *
         * ```html
         * <igx-column-hiding [hideAllText] = "'Hide Columns'"></igx-column-hiding>
         * ```
         * \@memberof IgxColumnHidingComponent
         */
        this.hideAllText = 'Hide All';
        /**
         * An event that is emitted after the columns visibility is changed.
         * Provides references to the `column` and the `newValue` properties as event arguments.
         * ```html
         *  <igx-column-hiding (onColumnVisibilityChanged) = "onColumnVisibilityChanged($event)"></igx-column-hiding>
         * ```
         * \@memberof IgxColumnHidingComponent
         */
        this.onColumnVisibilityChanged = new EventEmitter();
        this.destroy$ = new Subject();
    }
    /**
     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.
     * ```html
     * <igx-column-hiding #columnHidingUI
     *     [columns]="grid.columns" [title]="'Column Hiding'">
     * </igx-column-hiding>
     * ```
     * ```typescript
     * \@ViewChild("'columnHidingUI'")
     * public columnHiding: IgxColumnHidingComponent;
     * let isHideAlldisabled =  this.columnHiding.disableHideAll;
     * ```
     * \@memberof IgxColumnHidingComponent
     * @return {?}
     */
    get disableHideAll() {
        if (!this.columnItems || this.columnItems.length < 1 ||
            this.hiddenColumnsCount === this.columns.length) {
            return true;
        }
        else if (this.hidableColumns.length < 1 ||
            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.
     * ```typescript
     * let isShowAlldisabled =  this.columnHiding.disableShowAll;
     * ```
     * \@memberof IgxColumnHidingComponent
     * @return {?}
     */
    get disableShowAll() {
        if (!this.columnItems || this.columnItems.length < 1 ||
            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {
            return true;
        }
        else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * Gets the count of the hidden columns.
     * ```typescript
     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;
     * ```
     * \@memberof IgxColumnHidingComponent
     * @return {?}
     */
    get hiddenColumnsCount() {
        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;
    }
    /**
     * @return {?}
     */
    get hidableColumns() {
        return this.columnItems.filter((col) => !col.disabled);
    }
    /**
     * @hidden
     * @param {?} container
     * @param {?} column
     * @return {?}
     */
    createColumnItem(container, column) {
        const /** @type {?} */ item = new IgxColumnHidingItemDirective();
        item.container = container;
        item.column = column;
        if (!item.column.columnGroup) {
            item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {
                this.onVisibilityChanged({ column: item.column, newValue: args.newValue });
            });
        }
        return item;
    }
    /**
     * Shows all columns in the grid.
     * ```typescript
     * this.columnHiding.showAllColumns();
     * ```
     * \@memberof IgxColumnHidingComponent
     * @return {?}
     */
    showAllColumns() {
        for (const /** @type {?} */ col of this.hidableColumns) {
            col.value = false;
        }
    }
    /**
     * Hides all columns in the grid.
     * ```typescript
     * this.columnHiding.hideAllColumns();
     * ```
     * \@memberof IgxColumnHidingComponent
     * @return {?}
     */
    hideAllColumns() {
        for (const /** @type {?} */ col of this.hidableColumns) {
            col.value = true;
        }
    }
    /**
     * @hidden
     * @param {?} args
     * @return {?}
     */
    onVisibilityChanged(args) {
        this.onColumnVisibilityChanged.emit(args);
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
}
IgxColumnHidingComponent.decorators = [
    { type: Component, args: [{
                preserveWhitespaces: false,
                selector: 'igx-column-hiding',
                template: `<div class="igx-column-hiding__header">
    <h4 class="igx-column-hiding__header-title" *ngIf="title">{{ title }}</h4>

    <igx-input-group class="igx-column-hiding__header-input">
        <input igxInput
            type="text"
            [(ngModel)]="filterCriteria"
            [placeholder]="filterColumnsPrompt"
            autocomplete="off" />
    </igx-input-group>
</div>

<div class="igx-column-hiding__columns"
    [style.max-height]="columnsAreaMaxHeight">
    <igx-checkbox igxColumnHidingItem
        *ngFor="let columnItem of columnItems"
        class="igx-column-hiding__columns-item"
        (onColumnVisibilityChanged)="onVisibilityChanged($event)"
        (change)="columnItem.value = !columnItem.value"
        [checked]="columnItem.value"
        [disabled]="columnItem.disabled"
        [style.margin-left.px]="columnItem.calcIndent">
        {{ columnItem.name }}
    </igx-checkbox>
</div>

<div class="igx-column-hiding__buttons">
    <button igxButton igxRipple (click)="showAllColumns()" [disabled]="disableShowAll">{{ showAllText }}</button>
    <button igxButton igxRipple (click)="hideAllColumns()" [disabled]="disableHideAll">{{ hideAllText }}</button>
</div>
`
            },] },
];
/** @nocollapse */
IgxColumnHidingComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
];
IgxColumnHidingComponent.propDecorators = {
    "disableHideAll": [{ type: Input },],
    "disableShowAll": [{ type: Input },],
    "showAllText": [{ type: Input },],
    "hideAllText": [{ type: Input },],
    "onColumnVisibilityChanged": [{ type: Output },],
};
function IgxColumnHidingComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnHidingComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnHidingComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxColumnHidingComponent.propDecorators;
    /**
     * Sets/gets the text of the button that shows all columns if they are hidden.
     * ```typescript
     * let showAllButtonText =  this.columnHiding.showAllText;
     * ```
     *
     * ```html
     * <igx-column-hiding [showAllText] = "'Show Columns'"></igx-column-hiding>
     * ```
     * \@memberof IgxColumnHidingComponent
     * @type {?}
     */
    IgxColumnHidingComponent.prototype.showAllText;
    /**
     * Sets/gets the text of the button that hides all columns if they are shown.
     * ```typescript
     * let hideAllButtonText =  this.columnHiding.hideAllText;
     * ```
     *
     * ```html
     * <igx-column-hiding [hideAllText] = "'Hide Columns'"></igx-column-hiding>
     * ```
     * \@memberof IgxColumnHidingComponent
     * @type {?}
     */
    IgxColumnHidingComponent.prototype.hideAllText;
    /**
     * An event that is emitted after the columns visibility is changed.
     * Provides references to the `column` and the `newValue` properties as event arguments.
     * ```html
     *  <igx-column-hiding (onColumnVisibilityChanged) = "onColumnVisibilityChanged($event)"></igx-column-hiding>
     * ```
     * \@memberof IgxColumnHidingComponent
     * @type {?}
     */
    IgxColumnHidingComponent.prototype.onColumnVisibilityChanged;
    /** @type {?} */
    IgxColumnHidingComponent.prototype.destroy$;
    /** @type {?} */
    IgxColumnHidingComponent.prototype.cdr;
}
/**
 * The `IgxColumnHidingModule` provides the {\@link IgxColumnHidingComponent} inside your application.
 */
export class IgxColumnHidingModule {
}
IgxColumnHidingModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxColumnHidingComponent, IgxColumnHidingItemDirective],
                exports: [IgxColumnHidingComponent],
                imports: [
                    IgxButtonModule,
                    IgxCheckboxModule,
                    IgxInputGroupModule,
                    CommonModule,
                    FormsModule,
                ]
            },] },
];
function IgxColumnHidingModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnHidingModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnHidingModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,