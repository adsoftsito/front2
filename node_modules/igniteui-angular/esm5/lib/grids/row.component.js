/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, forwardRef, HostBinding, Input, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { IgxCheckboxComponent } from '../checkbox/checkbox.component';
import { IgxSelectionAPIService } from '../core/selection';
import { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';
import { GridBaseAPIService } from './api.service';
import { IgxGridCellComponent } from './cell.component';
import { TransactionType } from '../services';
// unsupported: template constraints.
/**
 * @template T
 */
var IgxRowComponent = /** @class */ (function () {
    function IgxRowComponent(gridAPI, selection, element, cdr) {
        this.gridAPI = gridAPI;
        this.selection = selection;
        this.element = element;
        this.cdr = cdr;
        /**
         * @hidden
         */
        this.role = 'row';
        /**
         * @hidden
         */
        this.focused = false;
        /**
         * @hidden
         */
        this.defaultCssClass = 'igx-grid__tr';
        /**
         * @hidden
         */
        this._rowSelection = false;
    }
    Object.defineProperty(IgxRowComponent.prototype, "rowData", {
        get: /**
         *  The data passed to the row component.
         *
         * ```typescript
         * // get the row data for the first selected row
         * let selectedRowData = this.grid.selectedRows[0].rowData;
         * ```
         * @return {?}
         */
        function () {
            if (this.inEditMode) {
                return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));
            }
            return this._rowData;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._rowData = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowComponent.prototype, "dataRowIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowComponent.prototype, "styleClasses", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.resolveClasses();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowComponent.prototype, "columns", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.grid.visibleColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowComponent.prototype, "pinnedColumns", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.grid.pinnedColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowComponent.prototype, "unpinnedColumns", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.grid.unpinnedColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowComponent.prototype, "rowSelectable", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.grid.rowSelectable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowComponent.prototype, "dirty", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            var /** @type {?} */ row = this.grid.transactions.getState(this.rowID);
            if (row) {
                return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowComponent.prototype, "deleted", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.isRowDeleted();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowComponent.prototype, "inEditMode", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.grid.rowEditable) {
                var /** @type {?} */ editRowState = this.gridAPI.get_edit_row_state(this.gridID);
                return (editRowState && editRowState.rowID === this.rowID) || false;
            }
            else {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowComponent.prototype, "grid", {
        /**
         * Get a reference to the grid that contains the selected row.
         *
         * ```typescript
         * handleRowSelection(event) {
         *  // the grid on which the onRowSelectionChange event was triggered
         *  const grid = event.row.grid;
         * }
         * ```
         *
         * ```html
         *  <igx-grid
         *    [data]="data"
         *    (onRowSelectionChange)="handleRowSelection($event)">
         *  </igx-grid>
         * ```
         */
        get: /**
         * Get a reference to the grid that contains the selected row.
         *
         * ```typescript
         * handleRowSelection(event) {
         *  // the grid on which the onRowSelectionChange event was triggered
         *  const grid = event.row.grid;
         * }
         * ```
         *
         * ```html
         *  <igx-grid
         *    [data]="data"
         *    (onRowSelectionChange)="handleRowSelection($event)">
         *  </igx-grid>
         * ```
         * @return {?}
         */
        function () {
            return this.gridAPI.get(this.gridID);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowComponent.prototype, "rowID", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            // A row in the grid is identified either by:
            // primaryKey data value,
            // or if the primaryKey is omitted, then the whole rowData is used instead.
            var /** @type {?} */ primaryKey = this.grid.primaryKey;
            return primaryKey ? this._rowData[primaryKey] : this._rowData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRowComponent.prototype, "nativeElement", {
        /**
         * The native DOM element representing the row. Could be null in certain environments.
         *
         * ```typescript
         * // get the nativeElement of the second selected row
         * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;
         * ```
         */
        get: /**
         * The native DOM element representing the row. Could be null in certain environments.
         *
         * ```typescript
         * // get the nativeElement of the second selected row
         * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;
         * ```
         * @return {?}
         */
        function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxRowComponent.prototype.onCheckboxClick = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ newSelection = (event.checked) ?
            this.selection.add_item(this.gridID, this.rowID) :
            this.selection.delete_item(this.gridID, this.rowID);
        this.grid.triggerRowSelectionChange(newSelection, this, event);
    };
    /**
     * Updates the specified row object and the data source record with the passed value.
     * This method emits `onEditDone` event.
     *
     * ```typescript
     * // update the second selected row's value
     * let newValue = "Apple";
     * this.grid.selectedRows[1].update(newValue);
     * ```
     * @param {?} value
     * @return {?}
     */
    IgxRowComponent.prototype.update = /**
     * Updates the specified row object and the data source record with the passed value.
     * This method emits `onEditDone` event.
     *
     * ```typescript
     * // update the second selected row's value
     * let newValue = "Apple";
     * this.grid.selectedRows[1].update(newValue);
     * ```
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ editableCell = this.gridAPI.get_cell_inEditMode(this.gridID);
        if (editableCell && editableCell.cellID.rowID === this.rowID) {
            this.grid.endEdit(false);
        }
        this.gridAPI.update_row(value, this.gridID, this.rowID);
        this.cdr.markForCheck();
        this.grid.refreshSearch();
    };
    /**
     * Removes the specified row from the grid's data source.
     * This method emits `onRowDeleted` event.
     *
     * ```typescript
     * // delete the third selected row from the grid
     * this.grid.selectedRows[2].delete();
     * ```
     * @return {?}
     */
    IgxRowComponent.prototype.delete = /**
     * Removes the specified row from the grid's data source.
     * This method emits `onRowDeleted` event.
     *
     * ```typescript
     * // delete the third selected row from the grid
     * this.grid.selectedRows[2].delete();
     * ```
     * @return {?}
     */
    function () {
        this.grid.deleteRowById(this.rowID);
    };
    Object.defineProperty(IgxRowComponent.prototype, "rowCheckboxAriaLabel", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.grid.primaryKey ?
                this.isSelected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :
                this.isSelected ? 'Deselect row' : 'Select row';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @return {?}
     */
    IgxRowComponent.prototype.ngDoCheck = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.isSelected = this.rowSelectable ?
            this.grid.allRowsSelected ? true : this.selection.is_item_selected(this.gridID, this.rowID) :
            this.selection.is_item_selected(this.gridID, this.rowID);
        this.cdr.markForCheck();
        if (this.checkboxElement) {
            this.checkboxElement.checked = this.isSelected;
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} arr
     * @return {?}
     */
    IgxRowComponent.prototype.notGroups = /**
     * @hidden
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        return arr.filter(function (c) { return !c.columnGroup; });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxRowComponent.prototype.resolveClasses = /**
     * @hidden
     * @return {?}
     */
    function () {
        var /** @type {?} */ indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;
        var /** @type {?} */ selectedClass = this.isSelected ? 'igx-grid__tr--selected' : '';
        var /** @type {?} */ editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';
        var /** @type {?} */ dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';
        var /** @type {?} */ deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';
        return (this.defaultCssClass + " " + indexClass + " " + selectedClass + " " + editClass + " " + dirtyClass + " " + deletedClass).trim();
    };
    /**
     * @return {?}
     */
    IgxRowComponent.prototype.isRowDeleted = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ state = this.grid.transactions.getState(this.rowID);
        if (state) {
            return state.type === TransactionType.DELETE;
        }
        return false;
    };
    IgxRowComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    selector: 'igx-row',
                    template: "<ng-container *ngIf=\"grid.groupingExpressions.length > 0\">\n    <div class=\"igx-grid__row-indentation igx-grid__row-indentation--level-{{grid.groupingExpressions.length}}\"></div>\n</ng-container>\n<ng-container *ngIf=\"rowSelectable\">\n    <div class=\"igx-grid__cbx-selection\">\n        <igx-checkbox [checked]=\"isSelected\" (change)=\"onCheckboxClick($event)\" disableRipple=\"true\" [aria-label]=\"rowCheckboxAriaLabel\"></igx-checkbox>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"pinnedColumns.length > 0\">\n    <igx-grid-cell *ngFor=\"let col of notGroups(pinnedColumns)\" [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\"></igx-grid-cell>\n</ng-container>\n<ng-template igxGridFor let-col [igxGridForOf]=\"notGroups(unpinnedColumns)\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]='grid.unpinnedWidth' [igxForTrackBy]='grid.trackColumnChanges' #igxDirRef>\n    <igx-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\"></igx-grid-cell>\n</ng-template>\n"
                },] },
    ];
    /** @nocollapse */
    IgxRowComponent.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
        { type: IgxSelectionAPIService, },
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
    ]; };
    IgxRowComponent.propDecorators = {
        "rowData": [{ type: Input },],
        "index": [{ type: Input },],
        "gridID": [{ type: Input },],
        "virtDirRow": [{ type: ViewChild, args: ['igxDirRef', { read: IgxGridForOfDirective },] },],
        "checkboxElement": [{ type: ViewChild, args: [forwardRef(function () { return IgxCheckboxComponent; }), { read: IgxCheckboxComponent },] },],
        "cells": [{ type: ViewChildren, args: [forwardRef(function () { return IgxGridCellComponent; }), { read: IgxGridCellComponent },] },],
        "role": [{ type: HostBinding, args: ['attr.role',] },],
        "dataRowIndex": [{ type: HostBinding, args: ['attr.data-rowIndex',] },],
        "styleClasses": [{ type: HostBinding, args: ['class',] },],
        "isSelected": [{ type: HostBinding, args: ['attr.aria-selected',] },],
    };
    return IgxRowComponent;
}());
export { IgxRowComponent };
function IgxRowComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxRowComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxRowComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxRowComponent.propDecorators;
    /** @type {?} */
    IgxRowComponent.prototype._rowData;
    /**
     * The index of the row.
     *
     * ```typescript
     * // get the index of the second selected row
     * let selectedRowIndex = this.grid.selectedRows[1].index;
     * ```
     * @type {?}
     */
    IgxRowComponent.prototype.index;
    /**
     * @hidden
     * @type {?}
     */
    IgxRowComponent.prototype.gridID;
    /**
     * @hidden
     * @type {?}
     */
    IgxRowComponent.prototype.virtDirRow;
    /**
     * @hidden
     * @type {?}
     */
    IgxRowComponent.prototype.checkboxElement;
    /**
     * The rendered cells in the row component.
     *
     * ```typescript
     * // get the cells of the third selected row
     * let selectedRowCells = this.grid.selectedRows[2].cells;
     * ```
     * @type {?}
     */
    IgxRowComponent.prototype.cells;
    /**
     * @hidden
     * @type {?}
     */
    IgxRowComponent.prototype.role;
    /**
     * @hidden
     * @type {?}
     */
    IgxRowComponent.prototype.isSelected;
    /**
     * @hidden
     * @type {?}
     */
    IgxRowComponent.prototype.focused;
    /**
     * @hidden
     * @type {?}
     */
    IgxRowComponent.prototype.defaultCssClass;
    /**
     * @hidden
     * @type {?}
     */
    IgxRowComponent.prototype._rowSelection;
    /** @type {?} */
    IgxRowComponent.prototype.gridAPI;
    /** @type {?} */
    IgxRowComponent.prototype.selection;
    /** @type {?} */
    IgxRowComponent.prototype.element;
    /** @type {?} */
    IgxRowComponent.prototype.cdr;
}

//# sourceMappingURL=data:application/json;base64,