"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const Util_1 = require("../Util");
class ReactTemplate {
    /**
     * Base ReactTemplate constructor
     * @param rootPath The template folder path. Pass in `__dirname`
     */
    constructor(rootPath) {
        this.rootPath = rootPath;
        this.listInComponentTemplates = true;
        this.listInCustomTemplates = false;
        this.dependencies = [];
        this.framework = "react";
        this.hasExtraConfiguration = false;
        this.packages = [];
        this.configFile = "./client/pages/routesTemplate.js";
        this.replacePattern = /\[[\s\S]*\](?=;)/;
    }
    generateFiles(projectPath, name, options) {
        let config = {};
        if (options["extraConfig"]) {
            config = options["extraConfig"];
        }
        const pathsConfig = {};
        config["__path__"] = this.folderName(name); //folder name allowed spaces, any casing
        config["$(name)"] = name; // this name should not have restrictions
        config["$(ClassName)"] = Util_1.Util.className(name); //first letter capital, no spaces and no dashes,
        config["$(cliVersion)"] = Util_1.Util.version();
        if (this.widget) {
            config["$(widget)"] = this.widget;
            config["$(Control)"] = Util_1.Util.className(this.widget);
        }
        config["$(igniteImports)"] = this.getImports();
        if (this.description) {
            config["$(description)"] = this.description;
        }
        // copy/template files to project
        if (!Util_1.Util.validateTemplate(path.join(this.rootPath, "files"), projectPath, config, pathsConfig)) {
            return Promise.resolve(false);
        }
        return Util_1.Util.processTemplates(path.join(this.rootPath, "files"), projectPath, config, pathsConfig);
    }
    registerInProject(projectPath, name) {
        let configFile = fs.readFileSync(path.join(projectPath, this.configFile), "utf8");
        const viewsArr = JSON.parse(this.replacePattern.exec(configFile)[0]);
        viewsArr.push({ path: "/" + this.folderName(name), folder: this.getViewLink(name), text: this.getToolbarLink(name) });
        configFile = configFile.replace(this.replacePattern, JSON.stringify(viewsArr, null, 4));
        fs.writeFileSync(path.join(projectPath, this.configFile), configFile);
    }
    getExtraConfiguration() {
        throw new Error("Method not implemented.");
    }
    setExtraConfiguration(extraConfigKeys) {
        throw new Error("Method not implemented.");
    }
    getImports() {
        const config = require("../packages/components");
        let builder = "";
        builder += "\r\n";
        builder += "// Ignite UI Required Combined JavaScript Files\r\n";
        builder += `import "ignite-ui/js/infragistics.core.js";\r\n`;
        builder += `import "ignite-ui/js/infragistics.lob.js";\r\n`;
        if (this.dependencies.filter(x => config.dv.indexOf(x) !== -1).length) {
            builder += `import "ignite-ui/js/infragistics.dv.js";\r\n`;
        }
        return builder;
    }
    folderName(name) {
        //TODO: should remove the spaces
        return Util_1.Util.lowerDashed(name);
    }
    getViewLink(name) {
        const filePath = this.folderName(name) + "/index.js";
        return filePath;
    }
    getToolbarLink(name) {
        const toolbarLink = name.replace(/\w\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());
        return toolbarLink;
    }
}
exports.ReactTemplate = ReactTemplate;
