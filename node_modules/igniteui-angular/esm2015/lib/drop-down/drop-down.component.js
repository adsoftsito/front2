/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, Input, NgModule, Output, QueryList, ViewChild, Self, Optional, HostListener, Directive, Inject } from '@angular/core';
import { IgxSelectionAPIService } from '../core/selection';
import { IgxToggleDirective, IgxToggleModule } from '../directives/toggle/toggle.directive';
import { IgxDropDownItemComponent } from './drop-down-item.component';
let /** @type {?} */ NEXT_ID = 0;
/**
 * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.
 *
 * @export
 * @record
 */
export function ISelectionEventArgs() { }
function ISelectionEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    ISelectionEventArgs.prototype.oldSelection;
    /** @type {?} */
    ISelectionEventArgs.prototype.newSelection;
}
/** @enum {number} */
const Navigate = {
    Up: -1,
    Down: 1,
};
export { Navigate };
Navigate[Navigate.Up] = "Up";
Navigate[Navigate.Down] = "Down";
export class IgxDropDownBase {
    /**
     * @param {?} elementRef
     * @param {?} cdr
     * @param {?} selection
     */
    constructor(elementRef, cdr, selection) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.selection = selection;
        this._initiallySelectedItem = null;
        this._focusedItem = null;
        this._id = `igx-drop-down-${NEXT_ID++}`;
        /**
         * Emitted when item selection is changing, before the selection completes
         *
         * ```html
         * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>
         * ```
         */
        this.onSelection = new EventEmitter();
        /**
         * Emitted before the dropdown is opened
         *
         * ```html
         * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>
         * ```
         */
        this.onOpening = new EventEmitter();
        /**
         * Emitted after the dropdown is opened
         *
         * ```html
         * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>
         * ```
         */
        this.onOpened = new EventEmitter();
        /**
         * Emitted before the dropdown is closed
         *
         * ```html
         * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>
         * ```
         */
        this.onClosing = new EventEmitter();
        /**
         * Emitted after the dropdown is closed
         *
         * ```html
         * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>
         * ```
         */
        this.onClosed = new EventEmitter();
        /**
         * Gets/sets whether items take focus. Disabled by default.
         * When enabled, drop down items gain tab index and are focused when active -
         * this includes activating the selected item when opening the drop down and moving with keyboard navigation.
         *
         * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive
         * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.
         *
         * ```typescript
         * // get
         * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>
         * ```
         */
        this.allowItemsFocus = false;
    }
    /**
     *  Gets the width of the drop down
     *
     * ```typescript
     * // get
     * let myDropDownCurrentWidth = this.dropdown.width;
     * ```
     * @return {?}
     */
    get width() {
        return this._width;
    }
    /**
     * Sets the width of the drop down
     *
     * ```html
     * <!--set-->
     * <igx-drop-down [width]='160px'></igx-drop-down>
     * ```
     * @param {?} value
     * @return {?}
     */
    set width(value) {
        this._width = value;
        this.toggleDirective.element.style.width = value;
    }
    /**
     * Gets the height of the drop down
     *
     * ```typescript
     * // get
     * let myDropDownCurrentHeight = this.dropdown.height;
     * ```
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * Sets the height of the drop down
     *
     * ```html
     * <!--set-->
     * <igx-drop-down [height]='400px'></igx-drop-down>
     * ```
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = value;
        this.toggleDirective.element.style.height = value;
    }
    /**
     * Gets the drop down's id
     *
     * ```typescript
     * // get
     * let myDropDownCurrentId = this.dropdown.id;
     * ```
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * Sets the drop down's id
     *
     * ```html
     * <!--set-->
     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>
     * ```
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        this.selection.set(value, this.selection.get(this.id));
        this._id = value;
        this.toggleDirective.id = value;
    }
    /**
     * Gets if the dropdown is collapsed
     *
     * ```typescript
     * let isCollapsed = this.dropdown.collapsed;
     * ```
     * @return {?}
     */
    get collapsed() {
        return this.toggleDirective.collapsed;
    }
    /**
     * Get currently selected item
     *
     * ```typescript
     * let currentItem = this.dropdown.selectedItem;
     * ```
     * @return {?}
     */
    get selectedItem() {
        const /** @type {?} */ selectedItem = this.selection.first_item(this.id);
        if (selectedItem) {
            if (selectedItem.isSelected) {
                return selectedItem;
            }
            this.selection.clear(this.id);
        }
        return null;
    }
    /**
     * Get all non-header items
     *
     * ```typescript
     * let myDropDownItems = this.dropdown.items;
     * ```
     * @return {?}
     */
    get items() {
        const /** @type {?} */ items = [];
        if (this.children !== undefined) {
            for (const /** @type {?} */ child of this.children.toArray()) {
                if (!child.isHeader) {
                    items.push(child);
                }
            }
        }
        return items;
    }
    /**
     * Get all header items
     *
     * ```typescript
     * let myDropDownHeaderItems = this.dropdown.headers;
     * ```
     * @return {?}
     */
    get headers() {
        const /** @type {?} */ headers = [];
        if (this.children !== undefined) {
            for (const /** @type {?} */ child of this.children.toArray()) {
                if (child.isHeader) {
                    headers.push(child);
                }
            }
        }
        return headers;
    }
    /**
     * Get dropdown html element
     *
     * ```typescript
     * let myDropDownElement = this.dropdown.element;
     * ```
     * @return {?}
     */
    get element() {
        return this.elementRef.nativeElement;
    }
    /**
     * Get dropdown's html element of it scroll container
     * @return {?}
     */
    get scrollContainer() {
        return this.toggleDirective.element;
    }
    /**
     * Select an item by index
     * @param {?} index of the item to select
     * @return {?}
     */
    setSelectedItem(index) {
        if (index < 0 || index >= this.items.length) {
            return;
        }
        const /** @type {?} */ newSelection = this.items.find((item) => item.index === index);
        if (newSelection.isHeader) {
            return;
        }
        this.changeSelectedItem(newSelection);
    }
    /**
     * Opens the dropdown
     *
     * ```typescript
     * this.dropdown.open();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    open(overlaySettings) {
        this.toggleDirective.open(overlaySettings);
    }
    /**
     * Closes the dropdown
     *
     * ```typescript
     * this.dropdown.close();
     * ```
     * @return {?}
     */
    close() {
        this.toggleDirective.close();
    }
    /**
     * Toggles the dropdown
     *
     * ```typescript
     * this.dropdown.toggle();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    toggle(overlaySettings) {
        if (this.toggleDirective.collapsed) {
            this.open(overlaySettings);
        }
        else {
            this.close();
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    get focusedItem() {
        return this._focusedItem;
    }
    /**
     * @hidden
     * @param {?} item
     * @return {?}
     */
    set focusedItem(item) {
        this._focusedItem = item;
    }
    /**
     * @hidden
     * @param {?} direction
     * @param {?=} currentIndex
     * @return {?}
     */
    navigate(direction, currentIndex) {
        let /** @type {?} */ index = -1;
        if (this._focusedItem) {
            index = currentIndex ? currentIndex : this._focusedItem.index;
        }
        const /** @type {?} */ newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);
        this.navigateItem(newIndex, direction);
    }
    /**
     * @hidden
     * @return {?}
     */
    navigateFirst() {
        this.navigate(Navigate.Down, -1);
    }
    /**
     * @hidden
     * @return {?}
     */
    navigateLast() {
        this.navigate(Navigate.Up, this.items.length);
    }
    /**
     * @hidden
     * @return {?}
     */
    navigateNext() {
        this.navigate(Navigate.Down);
    }
    /**
     * @hidden
     * @return {?}
     */
    navigatePrev() {
        this.navigate(Navigate.Up);
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        this.toggleDirective.id = this.id;
        this.selection.clear(this.id);
    }
    /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    onToggleOpening(e) {
        const /** @type {?} */ eventArgs = { cancel: false };
        this.onOpening.emit(eventArgs);
        e.cancel = eventArgs.cancel;
        if (eventArgs.cancel) {
            return;
        }
        this.scrollToItem(this.selectedItem);
    }
    /**
     * @hidden
     * @return {?}
     */
    onToggleOpened() {
        this._initiallySelectedItem = this.selectedItem;
        this._focusedItem = this.selectedItem;
        if (this._focusedItem) {
            this._focusedItem.isFocused = true;
        }
        else if (this.allowItemsFocus) {
            const /** @type {?} */ firstItemIndex = this.getNearestSiblingFocusableItemIndex(-1, Navigate.Down);
            if (firstItemIndex !== -1) {
                this.navigateItem(firstItemIndex);
            }
        }
        this.onOpened.emit();
    }
    /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    onToggleClosing(e) {
        const /** @type {?} */ eventArgs = { cancel: false };
        this.onClosing.emit(eventArgs);
        e.cancel = eventArgs.cancel;
    }
    /**
     * @hidden
     * @return {?}
     */
    onToggleClosed() {
        if (this._focusedItem) {
            this._focusedItem.isFocused = false;
        }
        this.onClosed.emit();
    }
    /**
     * @hidden
     * @param {?} item
     * @return {?}
     */
    scrollToItem(item) {
        const /** @type {?} */ itemPosition = this.calculateScrollPosition(item);
        this.scrollContainer.scrollTop = (itemPosition);
    }
    /**
     * @hidden
     * @param {?} newItem
     * @return {?}
     */
    scrollToHiddenItem(newItem) {
        const /** @type {?} */ elementRect = newItem.element.nativeElement.getBoundingClientRect();
        const /** @type {?} */ parentRect = this.scrollContainer.getBoundingClientRect();
        if (parentRect.top > elementRect.top) {
            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);
        }
        if (parentRect.bottom < elementRect.bottom) {
            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);
        }
    }
    /**
     * @hidden
     * @param {?} item
     * @param {?=} event
     * @return {?}
     */
    selectItem(item, event) {
        if (item === null) {
            return;
        }
        this.changeSelectedItem(item);
        if (event) {
            this.toggleDirective.close();
        }
    }
    /**
     * @hidden
     * @param {?=} newSelection
     * @return {?}
     */
    changeSelectedItem(newSelection) {
        const /** @type {?} */ oldSelection = this.selectedItem;
        if (!newSelection) {
            newSelection = this._focusedItem;
        }
        const /** @type {?} */ args = { oldSelection, newSelection, cancel: false };
        this.onSelection.emit(args);
        if (!args.cancel) {
            this.selection.set(this.id, new Set([newSelection]));
        }
        return !args.cancel;
    }
    /**
     * @hidden
     * @param {?} item
     * @return {?}
     */
    calculateScrollPosition(item) {
        if (!item) {
            return 0;
        }
        const /** @type {?} */ elementRect = item.element.nativeElement.getBoundingClientRect();
        const /** @type {?} */ parentRect = this.scrollContainer.getBoundingClientRect();
        const /** @type {?} */ scrollDelta = parentRect.top - elementRect.top;
        let /** @type {?} */ scrollPosition = this.scrollContainer.scrollTop - scrollDelta;
        const /** @type {?} */ dropDownHeight = this.scrollContainer.clientHeight;
        scrollPosition -= dropDownHeight / 2;
        scrollPosition += item.elementHeight / 2;
        return Math.floor(scrollPosition);
    }
    /**
     * @param {?} startIndex
     * @param {?} direction
     * @return {?}
     */
    getNearestSiblingFocusableItemIndex(startIndex, direction) {
        let /** @type {?} */ index = startIndex;
        while (this.items[index + direction] && this.items[index + direction].disabled) {
            index += direction;
        }
        index += direction;
        if (index >= 0 && index < this.items.length) {
            return index;
        }
        else {
            return -1;
        }
    }
    /**
     * @hidden
     * @param {?} newIndex
     * @param {?=} direction
     * @return {?}
     */
    navigateItem(newIndex, direction) {
        if (newIndex !== -1) {
            const /** @type {?} */ oldItem = this._focusedItem;
            const /** @type {?} */ newItem = this.items[newIndex];
            if (oldItem) {
                oldItem.isFocused = false;
            }
            this._focusedItem = newItem;
            this.scrollToHiddenItem(newItem);
            this._focusedItem.isFocused = true;
        }
    }
}
IgxDropDownBase.propDecorators = {
    "children": [{ type: ContentChildren, args: [forwardRef(() => IgxDropDownItemComponent),] },],
    "toggleDirective": [{ type: ViewChild, args: [IgxToggleDirective,] },],
    "onSelection": [{ type: Output },],
    "onOpening": [{ type: Output },],
    "onOpened": [{ type: Output },],
    "onClosing": [{ type: Output },],
    "onClosed": [{ type: Output },],
    "width": [{ type: Input },],
    "height": [{ type: Input },],
    "allowItemsFocus": [{ type: Input },],
    "id": [{ type: Input },],
};
function IgxDropDownBase_tsickle_Closure_declarations() {
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxDropDownBase.propDecorators;
    /** @type {?} */
    IgxDropDownBase.prototype._initiallySelectedItem;
    /** @type {?} */
    IgxDropDownBase.prototype._focusedItem;
    /** @type {?} */
    IgxDropDownBase.prototype._width;
    /** @type {?} */
    IgxDropDownBase.prototype._height;
    /** @type {?} */
    IgxDropDownBase.prototype._id;
    /** @type {?} */
    IgxDropDownBase.prototype.children;
    /** @type {?} */
    IgxDropDownBase.prototype.toggleDirective;
    /**
     * Emitted when item selection is changing, before the selection completes
     *
     * ```html
     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownBase.prototype.onSelection;
    /**
     * Emitted before the dropdown is opened
     *
     * ```html
     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownBase.prototype.onOpening;
    /**
     * Emitted after the dropdown is opened
     *
     * ```html
     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownBase.prototype.onOpened;
    /**
     * Emitted before the dropdown is closed
     *
     * ```html
     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownBase.prototype.onClosing;
    /**
     * Emitted after the dropdown is closed
     *
     * ```html
     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownBase.prototype.onClosed;
    /**
     * Gets/sets whether items take focus. Disabled by default.
     * When enabled, drop down items gain tab index and are focused when active -
     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.
     *
     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive
     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.
     *
     * ```typescript
     * // get
     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownBase.prototype.allowItemsFocus;
    /** @type {?} */
    IgxDropDownBase.prototype.elementRef;
    /** @type {?} */
    IgxDropDownBase.prototype.cdr;
    /** @type {?} */
    IgxDropDownBase.prototype.selection;
}
export class IgxDropDownItemNavigationDirective {
    /**
     * @param {?} element
     * @param {?} dropdown
     */
    constructor(element, dropdown) {
        this.element = element;
        this.dropdown = dropdown;
    }
    /**
     * @hidden
     * @return {?}
     */
    get target() {
        return this._target;
    }
    /**
     * @hidden
     * @param {?} target
     * @return {?}
     */
    set target(target) {
        this._target = target ? target : this.dropdown;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    handleKeyDown(event) {
        if (event) {
            const /** @type {?} */ key = event.key.toLowerCase();
            if (!this.target.collapsed) {
                // If dropdown is opened
                const /** @type {?} */ navKeys = ['esc', 'escape', 'enter', 'tab', 'space', 'spacebar', ' ',
                    'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];
                if (navKeys.indexOf(key) === -1) {
                    // If key has appropriate function in DD
                    return;
                }
                event.preventDefault();
                event.stopPropagation();
            }
            else {
                // If dropdown is closed, do nothing
                return;
            }
            switch (key) {
                case 'esc':
                case 'escape':
                    this.onEscapeKeyDown(event);
                    break;
                case 'enter':
                case 'tab':
                    this.onEnterKeyDown(event);
                    break;
                case 'space':
                case 'spacebar':
                case ' ':
                    this.onSpaceKeyDown(event);
                    break;
                case 'arrowup':
                case 'up':
                    this.onArrowUpKeyDown(event);
                    break;
                case 'arrowdown':
                case 'down':
                    this.onArrowDownKeyDown(event);
                    break;
                case 'home':
                    this.onHomeKeyDown(event);
                    break;
                case 'end':
                    this.onEndKeyDown(event);
                    break;
                default:
                    return;
            }
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onEscapeKeyDown(event) {
        this.target.close();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onSpaceKeyDown(event) {
        // V.S. : IgxDropDownComponent.selectItem needs event to be true in order to close DD as per specification
        this.target.selectItem(this.target.focusedItem, this.target instanceof IgxDropDownComponent);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onEnterKeyDown(event) {
        if (!(this.target instanceof IgxDropDownComponent)) {
            if (this.target.focusedItem.value === 'ADD ITEM') {
                const /** @type {?} */ targetC = /** @type {?} */ (this.target);
                targetC.combo.addItemToCollection();
            }
            else {
                this.target.close();
            }
            return;
        }
        this.target.selectItem(this.target.focusedItem, event);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onArrowDownKeyDown(event) {
        this.target.navigateNext();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onArrowUpKeyDown(event) {
        this.target.navigatePrev();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onEndKeyDown(event) {
        this.target.navigateLast();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onHomeKeyDown(event) {
        this.target.navigateFirst();
    }
}
IgxDropDownItemNavigationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxDropDownItemNavigation]'
            },] },
];
/** @nocollapse */
IgxDropDownItemNavigationDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: IgxDropDownComponent, decorators: [{ type: Inject, args: [forwardRef(() => IgxDropDownComponent),] }, { type: Self }, { type: Optional },] },
];
IgxDropDownItemNavigationDirective.propDecorators = {
    "target": [{ type: Input, args: ['igxDropDownItemNavigation',] },],
    "handleKeyDown": [{ type: HostListener, args: ['keydown', ['$event'],] },],
};
function IgxDropDownItemNavigationDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDropDownItemNavigationDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDropDownItemNavigationDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxDropDownItemNavigationDirective.propDecorators;
    /** @type {?} */
    IgxDropDownItemNavigationDirective.prototype._target;
    /** @type {?} */
    IgxDropDownItemNavigationDirective.prototype.element;
    /** @type {?} */
    IgxDropDownItemNavigationDirective.prototype.dropdown;
}
/**
 * **Ignite UI for Angular DropDown** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop-down.html)
 *
 * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and
 * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down
 *
 * Example:
 * ```html
 * <igx-drop-down>
 *   <igx-drop-down-item *ngFor="let item of items" disabled={{item.disabled}} isHeader={{item.header}}>
 *     {{ item.value }}
 *   </igx-drop-down-item>
 * </igx-drop-down>
 * ```
 */
export class IgxDropDownComponent extends IgxDropDownBase {
    /**
     * @param {?} elementRef
     * @param {?} cdr
     * @param {?} selection
     */
    constructor(elementRef, cdr, selection) {
        super(elementRef, cdr, selection);
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.selection = selection;
    }
    /**
     * @param {?=} newSelection
     * @return {?}
     */
    changeSelectedItem(newSelection) {
        const /** @type {?} */ oldSelection = this.selectedItem;
        const /** @type {?} */ selectionChanged = super.changeSelectedItem(newSelection);
        if (selectionChanged) {
            if (oldSelection) {
                oldSelection.isSelected = false;
            }
            if (newSelection) {
                newSelection.isSelected = true;
            }
        }
        return selectionChanged;
    }
}
IgxDropDownComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-drop-down',
                template: `<div class="igx-drop-down">
    <div class="igx-drop-down__list" igxToggle (onOpening)="onToggleOpening($event)" (onOpened)="onToggleOpened()" (onClosing)="onToggleClosing($event)" (onClosed)="onToggleClosed()">
        <ng-container *ngIf="!collapsed">
            <ng-content></ng-content>
        </ng-container>
    </div>
</div>`
            },] },
];
/** @nocollapse */
IgxDropDownComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
    { type: IgxSelectionAPIService, },
];
function IgxDropDownComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDropDownComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDropDownComponent.ctorParameters;
    /** @type {?} */
    IgxDropDownComponent.prototype.elementRef;
    /** @type {?} */
    IgxDropDownComponent.prototype.cdr;
    /** @type {?} */
    IgxDropDownComponent.prototype.selection;
}
/**
 * @hidden
 */
export class IgxDropDownModule {
}
IgxDropDownModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownItemNavigationDirective],
                exports: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownItemNavigationDirective],
                imports: [CommonModule, IgxToggleModule],
                providers: [IgxSelectionAPIService]
            },] },
];
function IgxDropDownModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDropDownModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDropDownModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,