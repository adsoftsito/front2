/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { cloneArray, isEqual, mergeObjects } from '../core/utils';
import { DataUtil, DataType } from '../data-operations/data-util';
import { SortingDirection } from '../data-operations/sorting-expression.interface';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { TransactionType } from '../services/index';
// unsupported: template constraints.
/**
 * @hidden
 * @template T
 */
export class GridBaseAPIService {
    constructor() {
        this.change = new Subject();
        this.state = new Map();
        this.editCellState = new Map();
        this.editRowState = new Map();
        this.summaryCacheMap = new Map();
        this.destroyMap = new Map();
    }
    /**
     * @param {?} grid
     * @return {?}
     */
    register(grid) {
        this.state.set(grid.id, grid);
        this.destroyMap.set(grid.id, new Subject());
    }
    /**
     * @param {?} grid
     * @return {?}
     */
    unsubscribe(grid) {
        this.state.delete(grid.id);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    get(id) {
        return this.state.get(id);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    unset(id) {
        this.state.delete(id);
        this.summaryCacheMap.delete(id);
        this.editCellState.delete(id);
        this.editRowState.delete(id);
        this.destroyMap.delete(id);
    }
    /**
     * @param {?} oldId
     * @param {?} newId
     * @return {?}
     */
    reset(oldId, newId) {
        const /** @type {?} */ destroy = this.destroyMap.get(oldId);
        const /** @type {?} */ summary = this.summaryCacheMap.get(oldId);
        const /** @type {?} */ editCellState = this.editCellState.get(oldId);
        const /** @type {?} */ editRowState = this.editRowState.get(oldId);
        const /** @type {?} */ grid = this.get(oldId);
        this.unset(oldId);
        if (grid) {
            this.state.set(newId, grid);
        }
        if (destroy) {
            this.destroyMap.set(newId, destroy);
        }
        if (summary) {
            this.summaryCacheMap.set(newId, summary);
        }
        if (editCellState) {
            this.editCellState.set(newId, editCellState);
        }
        if (editRowState) {
            this.editRowState.set(newId, editRowState);
        }
    }
    /**
     * @param {?} id
     * @param {?} name
     * @return {?}
     */
    get_column_by_name(id, name) {
        return this.get(id).columnList.find((col) => col.field === name);
    }
    /**
     * @param {?} id
     * @param {?} name
     * @return {?}
     */
    set_summary_by_column_name(id, name) {
        if (!this.summaryCacheMap.get(id)) {
            this.summaryCacheMap.set(id, new Map());
        }
        const /** @type {?} */ column = this.get_column_by_name(id, name);
        const /** @type {?} */ grid = this.get(id);
        let /** @type {?} */ data = grid.filteredData;
        if (!data) {
            if (grid.transactions.enabled) {
                data = DataUtil.mergeTransactions(cloneArray(grid.data), grid.transactions.getAggregatedChanges(true), grid.primaryKey);
            }
            else {
                data = grid.data;
            }
        }
        if (data) {
            const /** @type {?} */ columnValues = data.map((rec) => rec[column.field]);
            this.calculateSummaries(id, column, columnValues);
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    get_summaries(id) {
        return this.summaryCacheMap.get(id);
    }
    /**
     * @param {?} id
     * @param {?=} name
     * @return {?}
     */
    remove_summary(id, name) {
        if (this.summaryCacheMap.has(id)) {
            if (!name) {
                this.summaryCacheMap.delete(id);
            }
            else {
                this.summaryCacheMap.get(id).delete(name);
            }
        }
    }
    /**
     * @param {?} gridId
     * @param {?} cell
     * @return {?}
     */
    set_cell_inEditMode(gridId, cell) {
        const /** @type {?} */ grid = this.get(gridId);
        const /** @type {?} */ args = {
            rowID: cell.cellID.rowID,
            cellID: cell.cellID,
            oldValue: cell.value,
            cancel: false
        };
        grid.onCellEditEnter.emit(args);
        if (args.cancel) {
            return;
        }
        if (grid.rowEditable) {
            const /** @type {?} */ currentEditRow = this.get_edit_row_state(gridId);
            if (currentEditRow && currentEditRow.rowID !== cell.cellID.rowID) {
                grid.endEdit(true);
                grid.startRowEdit(cell.cellID);
            }
            if (!currentEditRow) {
                grid.startRowEdit(cell.cellID);
            }
        }
        if (!this.get_cell_inEditMode(gridId)) {
            const /** @type {?} */ cellCopy = Object.assign({}, cell);
            cellCopy.row = Object.assign({}, cell.row);
            this.editCellState.set(gridId, { cellID: cell.cellID, cell: cellCopy });
        }
    }
    /**
     * @param {?} gridId
     * @param {?=} cellId
     * @return {?}
     */
    escape_editMode(gridId, cellId) {
        const /** @type {?} */ editableCell = this.get_cell_inEditMode(gridId);
        if (editableCell) {
            if (cellId) {
                if (cellId.rowID === editableCell.cellID.rowID &&
                    cellId.columnID === editableCell.cellID.columnID) {
                    this.editCellState.delete(gridId);
                }
            }
            else {
                const /** @type {?} */ grid = this.get(gridId);
                this.editCellState.delete(gridId);
            }
        }
        this.get(gridId).refreshSearch();
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    get_cell_inEditMode(gridId) {
        const /** @type {?} */ editCellId = this.editCellState.get(gridId);
        if (editCellId) {
            return editCellId;
        }
        else {
            return null;
        }
    }
    /**
     * @param {?} id
     * @param {?} rowID
     * @return {?}
     */
    get_row_index_in_data(id, rowID) {
        const /** @type {?} */ grid = /** @type {?} */ (this.get(id));
        if (!grid) {
            return -1;
        }
        const /** @type {?} */ data = this.get_all_data(id);
        return grid.primaryKey ? data.findIndex(record => record[grid.primaryKey] === rowID) : data.indexOf(rowID);
    }
    /**
     * @param {?} id
     * @param {?} rowSelector
     * @return {?}
     */
    get_row_by_key(id, rowSelector) {
        const /** @type {?} */ primaryKey = this.get(id).primaryKey;
        if (primaryKey !== undefined && primaryKey !== null) {
            return this.get(id).dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);
        }
        else {
            return this.get(id).dataRowList.find((row) => row.rowData === rowSelector);
        }
    }
    /**
     * @param {?} id
     * @param {?} rowIndex
     * @return {?}
     */
    get_row_by_index(id, rowIndex) {
        return this.get(id).rowList.find((row) => row.index === rowIndex);
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    get_edit_row_state(gridId) {
        const /** @type {?} */ editRow = this.editRowState.get(gridId);
        return editRow ? editRow : null;
    }
    /**
     * @param {?} gridId
     * @param {?} row
     * @return {?}
     */
    set_edit_row_state(gridId, row) {
        if (!row) {
            this.editRowState.delete(gridId);
        }
        else {
            this.editRowState.set(gridId, row);
        }
    }
    /**
     * @param {?} id
     * @param {?} rowSelector
     * @param {?} field
     * @return {?}
     */
    get_cell_by_key(id, rowSelector, field) {
        const /** @type {?} */ row = this.get_row_by_key(id, rowSelector);
        if (row && row.cells) {
            return row.cells.find((cell) => cell.column.field === field);
        }
    }
    /**
     * @param {?} id
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    get_cell_by_index(id, rowIndex, columnIndex) {
        const /** @type {?} */ row = this.get_row_by_index(id, rowIndex);
        if (row && row.cells) {
            return row.cells.find((cell) => cell.columnIndex === columnIndex);
        }
    }
    /**
     * @param {?} id
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    get_cell_by_visible_index(id, rowIndex, columnIndex) {
        const /** @type {?} */ row = this.get_row_by_index(id, rowIndex);
        if (row && row.cells) {
            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);
        }
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    submit_value(gridId) {
        const /** @type {?} */ editableCell = this.get_cell_inEditMode(gridId);
        if (editableCell) {
            const /** @type {?} */ gridEditState = this.create_grid_edit_args(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID, editableCell.cell.editValue);
            if (!editableCell.cell.column.inlineEditorTemplate && editableCell.cell.column.dataType === 'number') {
                if (!editableCell.cell.editValue) {
                    gridEditState.args.newValue = 0;
                    this.update_cell(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID, 0, gridEditState);
                }
                else {
                    const /** @type {?} */ val = parseFloat(editableCell.cell.editValue);
                    if (!isNaN(val) || isFinite(val)) {
                        gridEditState.args.newValue = val;
                        this.update_cell(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID, val, gridEditState);
                    }
                }
            }
            else {
                this.update_cell(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID, editableCell.cell.editValue, gridEditState);
            }
            if (gridEditState.args.cancel) {
                return;
            }
            this.escape_editMode(gridId, editableCell.cellID);
        }
    }
    /**
     * @param {?} id
     * @param {?} rowID
     * @param {?} columnID
     * @param {?} editValue
     * @return {?}
     */
    create_grid_edit_args(id, rowID, columnID, editValue) {
        const /** @type {?} */ grid = this.get(id);
        const /** @type {?} */ data = this.get_all_data(id);
        const /** @type {?} */ isRowSelected = grid.selection.is_item_selected(id, rowID);
        const /** @type {?} */ editableCell = this.get_cell_inEditMode(id);
        const /** @type {?} */ column = grid.columnList.toArray()[columnID];
        columnID = columnID !== undefined && columnID !== null ? columnID : null;
        let /** @type {?} */ cellObj;
        if (columnID !== null) {
            if ((editableCell && editableCell.cellID.rowID === rowID && editableCell.cellID.columnID === columnID)) {
                cellObj = editableCell;
            }
            else {
                cellObj = grid.columnList.toArray()[columnID].cells.find((cell) => cell.cellID.rowID === rowID);
            }
        }
        let /** @type {?} */ rowIndex = this.get_row_index_in_data(id, rowID);
        let /** @type {?} */ oldValue;
        let /** @type {?} */ rowData;
        if (rowIndex !== -1) {
            oldValue = columnID !== null ? data[rowIndex][column.field] : null;
            rowData = data[rowIndex];
        }
        //  if we have transactions and add row was edited look for old value and row data in added rows
        if (rowIndex < 0 && grid.transactions.enabled) {
            const /** @type {?} */ dataWithTransactions = grid.dataWithAddedInTransactionRows;
            rowIndex = grid.primaryKey ?
                dataWithTransactions.map((record) => record[grid.primaryKey]).indexOf(rowID) :
                dataWithTransactions.indexOf(rowID);
            if (rowIndex !== -1) {
                //  Check if below change will work on added rows with transactions
                // oldValue = this.get_all_data(id, true)[rowIndex][column.field];
                // rowData = this.get_all_data(id, true)[rowIndex];
                oldValue = columnID !== null ? dataWithTransactions[rowIndex][column.field] : null;
                rowData = dataWithTransactions[rowIndex];
            }
        }
        const /** @type {?} */ args = {
            rowID,
            oldValue: oldValue,
            newValue: editValue,
            cancel: false
        };
        if (cellObj) {
            Object.assign(args, {
                cellID: cellObj.cellID
            });
        }
        return {
            args,
            isRowSelected,
            rowData
        };
    }
    /**
     * @param {?} id
     * @param {?} rowID
     * @param {?} columnID
     * @param {?} editValue
     * @param {?=} gridEditState
     * @return {?}
     */
    update_cell(id, rowID, columnID, editValue, gridEditState) {
        const /** @type {?} */ grid = this.get(id);
        const /** @type {?} */ data = this.get_all_data(id);
        const /** @type {?} */ currentGridEditState = gridEditState || this.create_grid_edit_args(id, rowID, columnID, editValue);
        const /** @type {?} */ emittedArgs = currentGridEditState.args;
        const /** @type {?} */ column = grid.columnList.toArray()[columnID];
        const /** @type {?} */ rowIndex = this.get_row_index_in_data(id, rowID);
        if (emittedArgs.oldValue !== undefined && currentGridEditState.rowData !== undefined) {
            grid.onCellEdit.emit(emittedArgs);
            if (emittedArgs.cancel) {
                return;
            }
            //  if we are editing the cell for second or next time, get the old value from transaction
            const /** @type {?} */ oldValueInTransaction = grid.transactions.getAggregatedValue(rowID, true);
            if (oldValueInTransaction) {
                emittedArgs.oldValue = oldValueInTransaction[column.field];
            }
            //  if edit (new) value is same as old value do nothing here
            if (emittedArgs.oldValue !== undefined
                && isEqual(emittedArgs.oldValue, emittedArgs.newValue)) {
                return;
            }
            const /** @type {?} */ transaction = {
                id: rowID, type: TransactionType.UPDATE, newValue: { [column.field]: emittedArgs.newValue }
            };
            if (grid.transactions.enabled) {
                grid.transactions.add(transaction, currentGridEditState.rowData);
            }
            else {
                const /** @type {?} */ rowValue = this.get_all_data(id)[rowIndex];
                mergeObjects(rowValue, { [column.field]: emittedArgs.newValue });
            }
            if (grid.primaryKey === column.field && currentGridEditState.isRowSelected) {
                grid.selection.deselect_item(id, rowID);
                grid.selection.select_item(id, emittedArgs.newValue);
            }
            if (!grid.rowEditable || !grid.rowInEditMode || grid.rowInEditMode.rowID !== rowID) {
                (/** @type {?} */ (grid))._pipeTrigger++;
            }
        }
    }
    /**
     * @param {?} value
     * @param {?} id
     * @param {?} rowID
     * @param {?=} gridState
     * @return {?}
     */
    update_row(value, id, rowID, gridState) {
        const /** @type {?} */ grid = this.get(id);
        const /** @type {?} */ data = this.get_all_data(id);
        const /** @type {?} */ currentGridState = gridState ? gridState : this.create_grid_edit_args(id, rowID, null, value);
        const /** @type {?} */ emitArgs = currentGridState.args;
        const /** @type {?} */ index = this.get_row_index_in_data(id, rowID);
        const /** @type {?} */ currentRowInEditMode = this.get_edit_row_state(id);
        let /** @type {?} */ oldValue = Object.assign({}, data[index]);
        if (grid.currentRowState && grid.currentRowState[grid.primaryKey] === rowID
            || currentRowInEditMode && currentRowInEditMode.rowID === rowID) {
            oldValue = Object.assign(oldValue, grid.currentRowState);
        }
        else if (grid.transactions.enabled) {
            // If transactions are enabled, old value == last commited value (as it's not applied in data yet)
            const /** @type {?} */ lastCommitedValue = 
            // Last commited value (w/o pending)
            grid.transactions.getState(rowID) ? Object.assign({}, grid.transactions.getState(rowID).value) : null;
            oldValue = lastCommitedValue ? Object.assign(oldValue, lastCommitedValue) : oldValue;
        }
        Object.assign(emitArgs, { oldValue, rowID });
        if (index !== -1) {
            grid.onRowEdit.emit(emitArgs);
            if (emitArgs.cancel) {
                return;
            }
            if (currentRowInEditMode) {
                grid.transactions.endPending(false);
            }
            if (grid.transactions.enabled && emitArgs.newValue !== null) {
                grid.transactions.add({ id: rowID, newValue: emitArgs.newValue, type: TransactionType.UPDATE }, emitArgs.oldValue);
            }
            else if (emitArgs.newValue !== null && emitArgs.newValue !== undefined) {
                Object.assign(data[index], emitArgs.newValue);
            }
            if (currentGridState.isRowSelected) {
                grid.selection.deselect_item(id, rowID);
                const /** @type {?} */ newRowID = (grid.primaryKey) ? emitArgs.newValue[grid.primaryKey] : emitArgs.newValue;
                grid.selection.select_item(id, newRowID);
            }
            (/** @type {?} */ (grid))._pipeTrigger++;
        }
    }
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    update_row_in_array(id, value, rowID, index) {
        const /** @type {?} */ grid = this.get(id);
        grid.data[index] = value;
    }
    /**
     * @param {?} id
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @param {?} strategy
     * @return {?}
     */
    sort(id, fieldName, dir, ignoreCase, strategy) {
        if (dir === SortingDirection.None) {
            this.remove_grouping_expression(id, fieldName);
        }
        const /** @type {?} */ sortingState = cloneArray(this.get(id).sortingExpressions);
        strategy = strategy ? strategy : this.getSortStrategyPerColumn(id, fieldName);
        this.prepare_sorting_expression([sortingState], { fieldName, dir, ignoreCase, strategy });
        this.get(id).sortingExpressions = sortingState;
    }
    /**
     * @param {?} id
     * @param {?} expressions
     * @return {?}
     */
    sort_multiple(id, expressions) {
        const /** @type {?} */ sortingState = cloneArray(this.get(id).sortingExpressions);
        for (const /** @type {?} */ each of expressions) {
            if (each.dir === SortingDirection.None) {
                this.remove_grouping_expression(id, each.fieldName);
            }
            each.strategy = each.strategy ? each.strategy : this.getSortStrategyPerColumn(id, each.fieldName);
            this.prepare_sorting_expression([sortingState], each);
        }
        this.get(id).sortingExpressions = sortingState;
    }
    /**
     * @param {?} id
     * @param {?} fieldName
     * @param {?} term
     * @param {?} conditionOrExpressionsTree
     * @param {?} ignoreCase
     * @return {?}
     */
    filter(id, fieldName, term, conditionOrExpressionsTree, ignoreCase) {
        const /** @type {?} */ grid = this.get(id);
        const /** @type {?} */ filteringTree = grid.filteringExpressionsTree;
        grid.endEdit(false);
        if (grid.paging) {
            grid.page = 0;
        }
        const /** @type {?} */ fieldFilterIndex = filteringTree.findIndex(fieldName);
        if (fieldFilterIndex > -1) {
            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);
        }
        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase);
        grid.filteringExpressionsTree = filteringTree;
    }
    /**
     * @param {?} id
     * @param {?} term
     * @param {?} condition
     * @param {?} ignoreCase
     * @return {?}
     */
    filter_global(id, term, condition, ignoreCase) {
        const /** @type {?} */ grid = this.get(id);
        const /** @type {?} */ filteringTree = grid.filteringExpressionsTree;
        if (grid.paging) {
            grid.page = 0;
        }
        filteringTree.filteringOperands = [];
        this.remove_summary(id);
        if (condition) {
            for (const /** @type {?} */ column of grid.columns) {
                this.prepare_filtering_expression(filteringTree, column.field, term, condition, ignoreCase || column.filteringIgnoreCase);
            }
        }
        grid.filteringExpressionsTree = filteringTree;
    }
    /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    clear_filter(id, fieldName) {
        if (fieldName) {
            const /** @type {?} */ column = this.get_column_by_name(id, fieldName);
            if (!column) {
                return;
            }
        }
        const /** @type {?} */ grid = this.get(id);
        const /** @type {?} */ filteringState = grid.filteringExpressionsTree;
        const /** @type {?} */ index = filteringState.findIndex(fieldName);
        if (index > -1) {
            filteringState.filteringOperands.splice(index, 1);
            this.remove_summary(id, fieldName);
        }
        else {
            filteringState.filteringOperands = [];
            this.remove_summary(id);
        }
        grid.filteredData = null;
        grid.filteringExpressionsTree = filteringState;
    }
    /**
     * @param {?} id
     * @param {?} column
     * @param {?} data
     * @return {?}
     */
    calculateSummaries(id, column, data) {
        if (!this.summaryCacheMap.get(id).get(column.field)) {
            this.summaryCacheMap.get(id).set(column.field, column.summaries.operate(data));
        }
    }
    /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    clear_sort(id, fieldName) {
        const /** @type {?} */ sortingState = this.get(id).sortingExpressions;
        const /** @type {?} */ index = sortingState.findIndex((expr) => expr.fieldName === fieldName);
        if (index > -1) {
            sortingState.splice(index, 1);
            this.get(id).sortingExpressions = sortingState;
        }
    }
    /**
     * @param {?} filteringState
     * @param {?} fieldName
     * @param {?} searchVal
     * @param {?} conditionOrExpressionsTree
     * @param {?} ignoreCase
     * @return {?}
     */
    prepare_filtering_expression(filteringState, fieldName, searchVal, conditionOrExpressionsTree, ignoreCase) {
        let /** @type {?} */ newExpressionsTree;
        const /** @type {?} */ oldExpressionsTreeIndex = filteringState.findIndex(fieldName);
        const /** @type {?} */ expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ? /** @type {?} */ (conditionOrExpressionsTree) : null;
        const /** @type {?} */ condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?
            null : /** @type {?} */ (conditionOrExpressionsTree);
        const /** @type {?} */ newExpression = { fieldName, searchVal, condition, ignoreCase };
        if (oldExpressionsTreeIndex === -1) {
            // no expressions tree found for this field
            if (expressionsTree) {
                filteringState.filteringOperands.push(expressionsTree);
            }
            else if (condition) {
                // create expressions tree for this field and add the new expression to it
                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);
                newExpressionsTree.filteringOperands.push(newExpression);
                filteringState.filteringOperands.push(newExpressionsTree);
            }
        }
    }
    /**
     * @param {?} stateCollections
     * @param {?} expression
     * @return {?}
     */
    prepare_sorting_expression(stateCollections, expression) {
        if (expression.dir === SortingDirection.None) {
            stateCollections.forEach(state => {
                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);
            });
            return;
        }
        /**
         * We need to make sure the states in each collection with same fields point to the same object reference.
         * If the different state collections provided have different sizes we need to get the largest one.
         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.
         */
        let /** @type {?} */ maxCollection = stateCollections[0];
        for (let /** @type {?} */ i = 1; i < stateCollections.length; i++) {
            if (maxCollection.length < stateCollections[i].length) {
                maxCollection = stateCollections[i];
            }
        }
        const /** @type {?} */ maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);
        stateCollections.forEach(collection => {
            const /** @type {?} */ myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);
            if (!myExpr && !maxExpr) {
                // Expression with this fieldName is missing from the current and the max collection.
                collection.push(expression);
            }
            else if (!myExpr && maxExpr) {
                // Expression with this fieldName is missing from the current and but the max collection has.
                collection.push(maxExpr);
                Object.assign(maxExpr, expression);
            }
            else {
                // The current collection has the expression so just update it.
                Object.assign(myExpr, expression);
            }
        });
    }
    /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    remove_grouping_expression(id, fieldName) {
    }
    /**
     * @param {?} column
     * @return {?}
     */
    should_apply_number_style(column) {
        return column.dataType === DataType.Number;
    }
    /**
     * @param {?} id
     * @param {?=} transactions
     * @return {?}
     */
    get_all_data(id, transactions) {
        const /** @type {?} */ grid = this.get(id);
        const /** @type {?} */ data = transactions ? grid.dataWithAddedInTransactionRows : grid.data;
        return data ? data : [];
    }
    /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    getSortStrategyPerColumn(id, fieldName) {
        return this.get_column_by_name(this.get(id).id, fieldName) ?
            this.get_column_by_name(id, fieldName).sortStrategy : undefined;
    }
}
GridBaseAPIService.decorators = [
    { type: Injectable },
];
function GridBaseAPIService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GridBaseAPIService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GridBaseAPIService.ctorParameters;
    /** @type {?} */
    GridBaseAPIService.prototype.change;
    /** @type {?} */
    GridBaseAPIService.prototype.state;
    /** @type {?} */
    GridBaseAPIService.prototype.editCellState;
    /** @type {?} */
    GridBaseAPIService.prototype.editRowState;
    /** @type {?} */
    GridBaseAPIService.prototype.summaryCacheMap;
    /** @type {?} */
    GridBaseAPIService.prototype.destroyMap;
}

//# sourceMappingURL=data:application/json;base64,