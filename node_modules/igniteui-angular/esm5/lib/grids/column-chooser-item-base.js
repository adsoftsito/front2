/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
/**
 * @record
 */
export function IValueChangedEventArgs() { }
function IValueChangedEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IValueChangedEventArgs.prototype.oldValue;
    /** @type {?} */
    IValueChangedEventArgs.prototype.newValue;
}
/**
 * @hidden
 * @abstract
 */
var ItemPropertyValueChanged = /** @class */ (function () {
    function ItemPropertyValueChanged(propName) {
        this.valueChanged = new EventEmitter();
        this._propName = propName;
    }
    Object.defineProperty(ItemPropertyValueChanged.prototype, "object", {
        get: /**
         * @return {?}
         */
        function () {
            return this._object;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._object = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ItemPropertyValueChanged.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.object) ? this.object[this._propName] : null;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.onValueChanged(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    ItemPropertyValueChanged.prototype.onValueChanged = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ currentValue = this.value;
        if (value !== currentValue) {
            this.object[this._propName] = value;
            this.valueChanged.emit({ oldValue: currentValue, newValue: value });
        }
    };
    ItemPropertyValueChanged.propDecorators = {
        "value": [{ type: Input },],
        "valueChanged": [{ type: Output },],
    };
    return ItemPropertyValueChanged;
}());
export { ItemPropertyValueChanged };
function ItemPropertyValueChanged_tsickle_Closure_declarations() {
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ItemPropertyValueChanged.propDecorators;
    /** @type {?} */
    ItemPropertyValueChanged.prototype._object;
    /** @type {?} */
    ItemPropertyValueChanged.prototype._propName;
    /** @type {?} */
    ItemPropertyValueChanged.prototype.valueChanged;
}
/**
 * @hidden
 */
var ColumnChooserItemBase = /** @class */ (function (_super) {
    tslib_1.__extends(ColumnChooserItemBase, _super);
    function ColumnChooserItemBase(prop) {
        var _this = _super.call(this, prop) || this;
        _this.prop = prop;
        _this.indentation = 30;
        return _this;
    }
    Object.defineProperty(ColumnChooserItemBase.prototype, "column", {
        get: /**
         * @return {?}
         */
        function () {
            return this.object;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this.object = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserItemBase.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserItemBase.prototype, "level", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnChooserItemBase.prototype, "calcIndent", {
        get: /**
         * @return {?}
         */
        function () {
            return this.indentation * this.level;
        },
        enumerable: true,
        configurable: true
    });
    ColumnChooserItemBase.propDecorators = {
        "column": [{ type: Input },],
        "indentation": [{ type: Input },],
        "container": [{ type: Input },],
    };
    return ColumnChooserItemBase;
}(ItemPropertyValueChanged));
export { ColumnChooserItemBase };
function ColumnChooserItemBase_tsickle_Closure_declarations() {
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ColumnChooserItemBase.propDecorators;
    /** @type {?} */
    ColumnChooserItemBase.prototype.indentation;
    /** @type {?} */
    ColumnChooserItemBase.prototype.container;
    /** @type {?} */
    ColumnChooserItemBase.prototype.prop;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWNob29zZXItaXRlbS1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9jb2x1bW4tY2hvb3Nlci1pdGVtLWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7SUFvQ3hELGtDQUFZLFFBQWdCOzRCQUZOLElBQUksWUFBWSxFQUEwQjtRQUc1RCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztLQUM3QjtJQXhCRCxzQkFBSSw0Q0FBTTs7OztRQUFWO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDdkI7Ozs7O1FBRUQsVUFBVyxLQUFLO1lBQ1osRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDUixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQzthQUN4QjtTQUNKOzs7T0FOQTswQkFTRywyQ0FBSzs7Ozs7WUFDTCxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Ozs7OztRQUc5RCxVQUFVLEtBQUs7WUFDWCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlCOzs7Ozs7OztJQVNTLGlEQUFjOzs7O0lBQXhCLFVBQXlCLEtBQUs7UUFDMUIscUJBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDaEMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUN2RTtLQUNKOzswQkF0QkEsS0FBSztpQ0FTTCxNQUFNOzttQ0FqQ1g7O1NBVXNCLHdCQUF3Qjs7Ozs7Ozs7Ozs7Ozs7O0lBd0NILGlEQUF3QjtJQWtCL0QsK0JBQW1CLElBQVk7UUFBL0IsWUFDSSxrQkFBTSxJQUFJLENBQUMsU0FDZDtRQUZrQixVQUFJLEdBQUosSUFBSSxDQUFROzRCQUxWLEVBQUU7O0tBT3RCOzBCQWxCRyx5Q0FBTTs7Ozs7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7Ozs7O1FBR3ZCLFVBQVcsS0FBSztZQUNaLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7YUFDdkI7U0FDSjs7OztJQVlELHNCQUFJLHVDQUFJOzs7O1FBQVI7WUFDSSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQy9GOzs7T0FBQTtJQUVELHNCQUFJLHdDQUFLOzs7O1FBQVQ7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDNUI7OztPQUFBO0lBRUQsc0JBQUksNkNBQVU7Ozs7UUFBZDtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDeEM7OztPQUFBOzsyQkEvQkEsS0FBSztnQ0FXTCxLQUFLOzhCQUdMLEtBQUs7O2dDQWpFVjtFQWtEMkMsd0JBQXdCO1NBQXRELHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElWYWx1ZUNoYW5nZWRFdmVudEFyZ3Mge1xuICAgIG9sZFZhbHVlOiBhbnk7XG4gICAgbmV3VmFsdWU6IGFueTtcbn1cblxuLyoqXG4gKkBoaWRkZW5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEl0ZW1Qcm9wZXJ0eVZhbHVlQ2hhbmdlZCB7XG4gICAgcHJpdmF0ZSBfb2JqZWN0OiBhbnk7XG4gICAgcHJpdmF0ZSBfcHJvcE5hbWU6IHN0cmluZztcblxuICAgIGdldCBvYmplY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vYmplY3Q7XG4gICAgfVxuXG4gICAgc2V0IG9iamVjdCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX29iamVjdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5vYmplY3QpID8gdGhpcy5vYmplY3RbdGhpcy5fcHJvcE5hbWVdIDogbnVsbDtcbiAgICB9XG5cbiAgICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlZCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIHZhbHVlQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8SVZhbHVlQ2hhbmdlZEV2ZW50QXJncz4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fcHJvcE5hbWUgPSBwcm9wTmFtZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25WYWx1ZUNoYW5nZWQodmFsdWUpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0W3RoaXMuX3Byb3BOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy52YWx1ZUNoYW5nZWQuZW1pdCh7IG9sZFZhbHVlOiBjdXJyZW50VmFsdWUsIG5ld1ZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBjbGFzcyBDb2x1bW5DaG9vc2VySXRlbUJhc2UgZXh0ZW5kcyBJdGVtUHJvcGVydHlWYWx1ZUNoYW5nZWQge1xuICAgIEBJbnB1dCgpXG4gICAgZ2V0IGNvbHVtbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2JqZWN0O1xuICAgIH1cblxuICAgIHNldCBjb2x1bW4odmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaW5kZW50YXRpb24gPSAzMDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGNvbnRhaW5lcjogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHByb3A6IHN0cmluZykge1xuICAgICAgICBzdXBlcihwcm9wKTtcbiAgICB9XG5cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmNvbHVtbikgPyAoKHRoaXMuY29sdW1uLmhlYWRlcikgPyB0aGlzLmNvbHVtbi5oZWFkZXIgOiB0aGlzLmNvbHVtbi5maWVsZCkgOiAnJztcbiAgICB9XG5cbiAgICBnZXQgbGV2ZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbi5sZXZlbDtcbiAgICB9XG5cbiAgICBnZXQgY2FsY0luZGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZW50YXRpb24gKiB0aGlzLmxldmVsO1xuICAgIH1cbn1cbiJdfQ==