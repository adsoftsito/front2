/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { animate, animation, style } from '@angular/animations';
import { EaseIn, EaseOut } from '../easings';
const /** @type {?} */ baseRecipe = [
    style({
        opacity: `{{startOpacity}}`,
        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,
        transformOrigin: `{{xPos}} {{yPos}}`
    }),
    animate(`{{duration}} {{delay}} {{easing}}`, style({
        offset: 0,
        opacity: `{{endOpacity}}`,
        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,
        transformOrigin: `{{xPos}} {{yPos}}`
    }))
];
const /** @type {?} */ baseInParams = {
    delay: '0s',
    duration: '600ms',
    easing: EaseOut.quad,
    endAngle: 0,
    endOpacity: 1,
    rotateX: 0,
    rotateY: 0,
    rotateZ: 1,
    startAngle: -360,
    startOpacity: 0,
    xPos: 'center',
    yPos: 'center'
};
const /** @type {?} */ baseOutParams = Object.assign({}, baseInParams, { easing: EaseIn.quad, endOpacity: 0, startOpacity: 1 });
const /** @type {?} */ rotateInCenter = animation(baseRecipe, {
    params: Object.assign({}, baseInParams)
});
const /** @type {?} */ rotateOutCenter = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams)
});
const /** @type {?} */ rotateInTop = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'top' })
});
const /** @type {?} */ rotateOutTop = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'top' })
});
const /** @type {?} */ rotateInRight = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'right' })
});
const /** @type {?} */ rotateOutRight = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'right' })
});
const /** @type {?} */ rotateInBottom = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'bottom' })
});
const /** @type {?} */ rotateOutBottom = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'bottom' })
});
const /** @type {?} */ rotateInLeft = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'left' })
});
const /** @type {?} */ rotateOutLeft = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'left' })
});
const /** @type {?} */ rotateInTr = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'right', yPos: 'top' })
});
const /** @type {?} */ rotateOutTr = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'right', yPos: 'top' })
});
const /** @type {?} */ rotateInBr = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'right', yPos: 'bottom' })
});
const /** @type {?} */ rotateOutBr = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'right', yPos: 'bottom' })
});
const /** @type {?} */ rotateInBl = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'left', yPos: 'bottom' })
});
const /** @type {?} */ rotateOutBl = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'left', yPos: 'bottom' })
});
const /** @type {?} */ rotateInTl = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { xPos: 'left', yPos: 'top' })
});
const /** @type {?} */ rotateOutTl = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { xPos: 'left', yPos: 'top' })
});
const /** @type {?} */ rotateInDiagonal1 = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { rotateX: 1, rotateY: 1, rotateZ: 0 })
});
const /** @type {?} */ rotateOutDiagonal1 = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { rotateX: 1, rotateY: 1, rotateZ: 0 })
});
const /** @type {?} */ rotateInDiagonal2 = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { rotateX: -1, rotateY: 1, rotateZ: 0 })
});
const /** @type {?} */ rotateOutDiagonal2 = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { rotateX: -1, rotateY: 1, rotateZ: 0 })
});
const /** @type {?} */ rotateInHor = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { rotateX: 0, rotateY: 1, rotateZ: 0 })
});
const /** @type {?} */ rotateOutHor = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { rotateX: 0, rotateY: 1, rotateZ: 0 })
});
const /** @type {?} */ rotateInVer = animation(baseRecipe, {
    params: Object.assign({}, baseInParams, { rotateX: 1, rotateY: 0, rotateZ: 0 })
});
const /** @type {?} */ rotateOutVer = animation(baseRecipe, {
    params: Object.assign({}, baseOutParams, { rotateX: 1, rotateY: 0, rotateZ: 0 })
});
export { rotateInCenter, rotateInTop, rotateInRight, rotateInLeft, rotateInBottom, rotateInTr, rotateInBr, rotateInBl, rotateInTl, rotateInDiagonal1, rotateInDiagonal2, rotateInHor, rotateInVer, rotateOutCenter, rotateOutTop, rotateOutRight, rotateOutLeft, rotateOutBottom, rotateOutTr, rotateOutBr, rotateOutBl, rotateOutTl, rotateOutDiagonal1, rotateOutDiagonal2, rotateOutHor, rotateOutVer };

//# sourceMappingURL=data:application/json;base64,