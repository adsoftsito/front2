/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
var HorizontalAlignment = {
    Left: -1,
    Center: -0.5,
    Right: 0,
};
export { HorizontalAlignment };
HorizontalAlignment[HorizontalAlignment.Left] = "Left";
HorizontalAlignment[HorizontalAlignment.Center] = "Center";
HorizontalAlignment[HorizontalAlignment.Right] = "Right";
/** @enum {number} */
var VerticalAlignment = {
    Top: -1,
    Middle: -0.5,
    Bottom: 0,
};
export { VerticalAlignment };
VerticalAlignment[VerticalAlignment.Top] = "Top";
VerticalAlignment[VerticalAlignment.Middle] = "Middle";
VerticalAlignment[VerticalAlignment.Bottom] = "Bottom";
var Point = /** @class */ (function () {
    function Point(x, y) {
        this.x = x;
        this.y = y;
    }
    return Point;
}());
export { Point };
function Point_tsickle_Closure_declarations() {
    /** @type {?} */
    Point.prototype.x;
    /** @type {?} */
    Point.prototype.y;
}
/**
 * @record
 */
export function PositionSettings() { }
function PositionSettings_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    PositionSettings.prototype.target;
    /** @type {?|undefined} */
    PositionSettings.prototype.horizontalDirection;
    /** @type {?|undefined} */
    PositionSettings.prototype.verticalDirection;
    /** @type {?|undefined} */
    PositionSettings.prototype.horizontalStartPoint;
    /** @type {?|undefined} */
    PositionSettings.prototype.verticalStartPoint;
    /** @type {?|undefined} */
    PositionSettings.prototype.openAnimation;
    /** @type {?|undefined} */
    PositionSettings.prototype.closeAnimation;
}
/**
 * @record
 */
export function OverlaySettings() { }
function OverlaySettings_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    OverlaySettings.prototype.positionStrategy;
    /** @type {?|undefined} */
    OverlaySettings.prototype.scrollStrategy;
    /** @type {?|undefined} */
    OverlaySettings.prototype.modal;
    /** @type {?|undefined} */
    OverlaySettings.prototype.closeOnOutsideClick;
    /** @type {?|undefined} */
    OverlaySettings.prototype.outlet;
}
/**
 * @record
 */
export function OverlayEventArgs() { }
function OverlayEventArgs_tsickle_Closure_declarations() {
    /**
     * Id of the overlay as returned by the `show()` method
     * @type {?}
     */
    OverlayEventArgs.prototype.id;
    /**
     * Available when `Type<T>` is provided to the `show()` method and allows access to the created Component instance
     * @type {?|undefined}
     */
    OverlayEventArgs.prototype.componentRef;
}
/**
 * @record
 */
export function OverlayCancelableEventArgs() { }
function OverlayCancelableEventArgs_tsickle_Closure_declarations() {
}
/**
 * @record
 */
export function OverlayAnimationEventArgs() { }
function OverlayAnimationEventArgs_tsickle_Closure_declarations() {
    /**
     * Id of the overlay as returned by the `show()` method
     * @type {?}
     */
    OverlayAnimationEventArgs.prototype.id;
    /**
     * Animation player that will play the animation
     * @type {?}
     */
    OverlayAnimationEventArgs.prototype.animationPlayer;
    /**
     * Type of animation to be played. It should be either 'open' or 'close'
     * @type {?}
     */
    OverlayAnimationEventArgs.prototype.animationType;
}
/**
 * @hidden
 * @param {?} settings
 * @param {?} overlayWrapper
 * @return {?}
 */
export function getPointFromPositionsSettings(settings, overlayWrapper) {
    var /** @type {?} */ result = new Point(0, 0);
    if (settings.target instanceof HTMLElement) {
        var /** @type {?} */ rect = (/** @type {?} */ (settings.target)).getBoundingClientRect();
        result.x = rect.right + rect.width * settings.horizontalStartPoint;
        result.y = rect.bottom + rect.height * settings.verticalStartPoint;
    }
    else if (settings.target instanceof Point) {
        result = settings.target;
    }
    //  if for some reason overlayWrapper is not at 0,0 position, e.g. overlay is in outlet
    //  which is in element with transform,perspective or filter set, we should translate the result
    //  accordingly
    if (overlayWrapper) {
        var /** @type {?} */ overlayWrapperPosition = overlayWrapper.getBoundingClientRect();
        result.x -= overlayWrapperPosition.left;
        result.y -= overlayWrapperPosition.top;
    }
    return result;
}
/**
 * @hidden
 * @record
 */
export function OverlayInfo() { }
function OverlayInfo_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    OverlayInfo.prototype.id;
    /** @type {?|undefined} */
    OverlayInfo.prototype.elementRef;
    /** @type {?|undefined} */
    OverlayInfo.prototype.componentRef;
    /** @type {?|undefined} */
    OverlayInfo.prototype.settings;
    /** @type {?|undefined} */
    OverlayInfo.prototype.initialSize;
    /** @type {?|undefined} */
    OverlayInfo.prototype.hook;
    /** @type {?|undefined} */
    OverlayInfo.prototype.openAnimationPlayer;
    /** @type {?|undefined} */
    OverlayInfo.prototype.closeAnimationPlayer;
    /** @type {?|undefined} */
    OverlayInfo.prototype.openAnimationInnerPlayer;
    /** @type {?|undefined} */
    OverlayInfo.prototype.closeAnimationInnerPlayer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9vdmVybGF5L3V0aWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQkEsSUFBQTtJQUNJLGVBQW1CLENBQVMsRUFBUyxDQUFTO1FBQTNCLE1BQUMsR0FBRCxDQUFDLENBQVE7UUFBUyxNQUFDLEdBQUQsQ0FBQyxDQUFRO0tBQUs7Z0JBdEJ2RDtJQXVCQyxDQUFBO0FBRkQsaUJBRUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0NELE1BQU0sd0NBQXdDLFFBQTBCLEVBQUUsY0FBMkI7SUFDakcscUJBQUksTUFBTSxHQUFVLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVwQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxZQUFZLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDekMscUJBQU0sSUFBSSxHQUFHLG1CQUFjLFFBQVEsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQ3BFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQztRQUNuRSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsa0JBQWtCLENBQUM7S0FDdEU7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0tBQzVCOzs7O0lBS0QsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUNqQixxQkFBTSxzQkFBc0IsR0FBRyxjQUFjLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUN0RSxNQUFNLENBQUMsQ0FBQyxJQUFJLHNCQUFzQixDQUFDLElBQUksQ0FBQztRQUN4QyxNQUFNLENBQUMsQ0FBQyxJQUFJLHNCQUFzQixDQUFDLEdBQUcsQ0FBQztLQUMxQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUM7Q0FDakIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHbG9iYWxQb3NpdGlvblN0cmF0ZWd5IH0gZnJvbSAnLi9wb3NpdGlvbi9nbG9iYWwtcG9zaXRpb24tc3RyYXRlZ3knO1xuaW1wb3J0IHsgSVBvc2l0aW9uU3RyYXRlZ3kgfSBmcm9tICcuL3Bvc2l0aW9uL0lQb3NpdGlvblN0cmF0ZWd5JztcblxuaW1wb3J0IHsgSVNjcm9sbFN0cmF0ZWd5LCBOb09wU2Nyb2xsU3RyYXRlZ3kgfSBmcm9tICcuL3Njcm9sbCc7XG5pbXBvcnQgeyBBbmltYXRpb25NZXRhZGF0YSwgQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEsIEFuaW1hdGlvblBsYXllciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQ29tcG9uZW50UmVmLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hPdmVybGF5T3V0bGV0RGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy90b2dnbGUvdG9nZ2xlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBDYW5jZWxhYmxlRXZlbnRBcmdzIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscyc7XG5cbmV4cG9ydCBlbnVtIEhvcml6b250YWxBbGlnbm1lbnQge1xuICAgIExlZnQgPSAtMSxcbiAgICBDZW50ZXIgPSAtMC41LFxuICAgIFJpZ2h0ID0gMFxufVxuXG5leHBvcnQgZW51bSBWZXJ0aWNhbEFsaWdubWVudCB7XG4gICAgVG9wID0gLTEsXG4gICAgTWlkZGxlID0gLTAuNSxcbiAgICBCb3R0b20gPSAwXG59XG5cbmV4cG9ydCBjbGFzcyBQb2ludCB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHg6IG51bWJlciwgcHVibGljIHk6IG51bWJlcikgeyB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zaXRpb25TZXR0aW5ncyB7XG4gICAgdGFyZ2V0PzogUG9pbnQgfCBIVE1MRWxlbWVudDtcbiAgICBob3Jpem9udGFsRGlyZWN0aW9uPzogSG9yaXpvbnRhbEFsaWdubWVudDtcbiAgICB2ZXJ0aWNhbERpcmVjdGlvbj86IFZlcnRpY2FsQWxpZ25tZW50O1xuICAgIGhvcml6b250YWxTdGFydFBvaW50PzogSG9yaXpvbnRhbEFsaWdubWVudDtcbiAgICB2ZXJ0aWNhbFN0YXJ0UG9pbnQ/OiBWZXJ0aWNhbEFsaWdubWVudDtcbiAgICBvcGVuQW5pbWF0aW9uPzogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGE7XG4gICAgY2xvc2VBbmltYXRpb24/OiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPdmVybGF5U2V0dGluZ3Mge1xuICAgIHBvc2l0aW9uU3RyYXRlZ3k/OiBJUG9zaXRpb25TdHJhdGVneTtcbiAgICBzY3JvbGxTdHJhdGVneT86IElTY3JvbGxTdHJhdGVneTtcbiAgICBtb2RhbD86IGJvb2xlYW47XG4gICAgY2xvc2VPbk91dHNpZGVDbGljaz86IGJvb2xlYW47XG4gICAgb3V0bGV0PzogSWd4T3ZlcmxheU91dGxldERpcmVjdGl2ZSB8IEVsZW1lbnRSZWY7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3ZlcmxheUV2ZW50QXJncyB7XG4gICAgLyoqIElkIG9mIHRoZSBvdmVybGF5IGFzIHJldHVybmVkIGJ5IHRoZSBgc2hvdygpYCBtZXRob2QgKi9cbiAgICBpZDogc3RyaW5nO1xuICAgIC8qKiBBdmFpbGFibGUgd2hlbiBgVHlwZTxUPmAgaXMgcHJvdmlkZWQgdG8gdGhlIGBzaG93KClgIG1ldGhvZCBhbmQgYWxsb3dzIGFjY2VzcyB0byB0aGUgY3JlYXRlZCBDb21wb25lbnQgaW5zdGFuY2UgKi9cbiAgICBjb21wb25lbnRSZWY/OiBDb21wb25lbnRSZWY8e30+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJsYXlDYW5jZWxhYmxlRXZlbnRBcmdzIGV4dGVuZHMgT3ZlcmxheUV2ZW50QXJncywgQ2FuY2VsYWJsZUV2ZW50QXJncyB7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3ZlcmxheUFuaW1hdGlvbkV2ZW50QXJncyB7XG4gICAgLyoqIElkIG9mIHRoZSBvdmVybGF5IGFzIHJldHVybmVkIGJ5IHRoZSBgc2hvdygpYCBtZXRob2QgKi9cbiAgICBpZDogc3RyaW5nO1xuICAgIC8qKiBBbmltYXRpb24gcGxheWVyIHRoYXQgd2lsbCBwbGF5IHRoZSBhbmltYXRpb24gKi9cbiAgICBhbmltYXRpb25QbGF5ZXI6IEFuaW1hdGlvblBsYXllcjtcbiAgICAvKiogVHlwZSBvZiBhbmltYXRpb24gdG8gYmUgcGxheWVkLiBJdCBzaG91bGQgYmUgZWl0aGVyICdvcGVuJyBvciAnY2xvc2UnICovXG4gICAgYW5pbWF0aW9uVHlwZTogJ29wZW4nIHwgJ2Nsb3NlJztcbn1cblxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQb2ludEZyb21Qb3NpdGlvbnNTZXR0aW5ncyhzZXR0aW5nczogUG9zaXRpb25TZXR0aW5ncywgb3ZlcmxheVdyYXBwZXI6IEhUTUxFbGVtZW50KTogUG9pbnQge1xuICAgIGxldCByZXN1bHQ6IFBvaW50ID0gbmV3IFBvaW50KDAsIDApO1xuXG4gICAgaWYgKHNldHRpbmdzLnRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHJlY3QgPSAoPEhUTUxFbGVtZW50PnNldHRpbmdzLnRhcmdldCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHJlc3VsdC54ID0gcmVjdC5yaWdodCArIHJlY3Qud2lkdGggKiBzZXR0aW5ncy5ob3Jpem9udGFsU3RhcnRQb2ludDtcbiAgICAgICAgcmVzdWx0LnkgPSByZWN0LmJvdHRvbSArIHJlY3QuaGVpZ2h0ICogc2V0dGluZ3MudmVydGljYWxTdGFydFBvaW50O1xuICAgIH0gZWxzZSBpZiAoc2V0dGluZ3MudGFyZ2V0IGluc3RhbmNlb2YgUG9pbnQpIHtcbiAgICAgICAgcmVzdWx0ID0gc2V0dGluZ3MudGFyZ2V0O1xuICAgIH1cblxuICAgIC8vICBpZiBmb3Igc29tZSByZWFzb24gb3ZlcmxheVdyYXBwZXIgaXMgbm90IGF0IDAsMCBwb3NpdGlvbiwgZS5nLiBvdmVybGF5IGlzIGluIG91dGxldFxuICAgIC8vICB3aGljaCBpcyBpbiBlbGVtZW50IHdpdGggdHJhbnNmb3JtLHBlcnNwZWN0aXZlIG9yIGZpbHRlciBzZXQsIHdlIHNob3VsZCB0cmFuc2xhdGUgdGhlIHJlc3VsdFxuICAgIC8vICBhY2NvcmRpbmdseVxuICAgIGlmIChvdmVybGF5V3JhcHBlcikge1xuICAgICAgICBjb25zdCBvdmVybGF5V3JhcHBlclBvc2l0aW9uID0gb3ZlcmxheVdyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHJlc3VsdC54IC09IG92ZXJsYXlXcmFwcGVyUG9zaXRpb24ubGVmdDtcbiAgICAgICAgcmVzdWx0LnkgLT0gb3ZlcmxheVdyYXBwZXJQb3NpdGlvbi50b3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT3ZlcmxheUluZm8ge1xuICAgIGlkPzogc3RyaW5nO1xuICAgIGVsZW1lbnRSZWY/OiBFbGVtZW50UmVmO1xuICAgIGNvbXBvbmVudFJlZj86IENvbXBvbmVudFJlZjx7fT47XG4gICAgc2V0dGluZ3M/OiBPdmVybGF5U2V0dGluZ3M7XG4gICAgaW5pdGlhbFNpemU/OiB7IHdpZHRoPzogbnVtYmVyLCBoZWlnaHQ/OiBudW1iZXIsIHg/OiBudW1iZXIsIHk/OiBudW1iZXIgfTtcbiAgICBob29rPzogSFRNTEVsZW1lbnQ7XG4gICAgb3BlbkFuaW1hdGlvblBsYXllcj86IEFuaW1hdGlvblBsYXllcjtcbiAgICBjbG9zZUFuaW1hdGlvblBsYXllcj86IEFuaW1hdGlvblBsYXllcjtcbiAgICBvcGVuQW5pbWF0aW9uSW5uZXJQbGF5ZXI/OiBhbnk7XG4gICAgY2xvc2VBbmltYXRpb25Jbm5lclBsYXllcj86IGFueTtcbn1cbiJdfQ==