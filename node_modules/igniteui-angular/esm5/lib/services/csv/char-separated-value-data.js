/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ExportUtilities } from '../exporter-common/export-utilities';
/**
 * @hidden
 */
var /**
 * @hidden
 */
CharSeparatedValueData = /** @class */ (function () {
    function CharSeparatedValueData(_data, valueDelimiter) {
        this._data = _data;
        this._headerRecord = '';
        this._dataRecords = '';
        this._eor = '\r\n';
        this._escapeCharacters = ['\r', '\n', '\r\n'];
        this._delimiterLength = 1;
        this._isSpecialData = false;
        this.setDelimiter(valueDelimiter);
    }
    /**
     * @return {?}
     */
    CharSeparatedValueData.prototype.prepareData = /**
     * @return {?}
     */
    function () {
        if (!this._data || this._data.length === 0) {
            return '';
        }
        var /** @type {?} */ keys = ExportUtilities.getKeysFromData(this._data);
        if (keys.length === 0) {
            return '';
        }
        this._isSpecialData = ExportUtilities.isSpecialData(this._data);
        this._escapeCharacters.push(this._delimiter);
        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);
        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);
        return this._headerRecord + this._dataRecords;
    };
    /**
     * @param {?} value
     * @param {?} escapeChars
     * @return {?}
     */
    CharSeparatedValueData.prototype.processField = /**
     * @param {?} value
     * @param {?} escapeChars
     * @return {?}
     */
    function (value, escapeChars) {
        var /** @type {?} */ safeValue = ExportUtilities.hasValue(value) ? String(value) : '';
        if (escapeChars.some(function (v) { return safeValue.includes(v); })) {
            safeValue = "\"" + safeValue + "\"";
        }
        return safeValue + this._delimiter;
    };
    /**
     * @param {?} keys
     * @param {?} escapeChars
     * @return {?}
     */
    CharSeparatedValueData.prototype.processHeaderRecord = /**
     * @param {?} keys
     * @param {?} escapeChars
     * @return {?}
     */
    function (keys, escapeChars) {
        var /** @type {?} */ recordData = '';
        try {
            for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var keyName = keys_1_1.value;
                recordData += this.processField(keyName, this._escapeCharacters);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return recordData.slice(0, -this._delimiterLength) + this._eor;
        var e_1, _a;
    };
    /**
     * @param {?} record
     * @param {?} keys
     * @param {?} escapeChars
     * @return {?}
     */
    CharSeparatedValueData.prototype.processRecord = /**
     * @param {?} record
     * @param {?} keys
     * @param {?} escapeChars
     * @return {?}
     */
    function (record, keys, escapeChars) {
        var /** @type {?} */ recordData = '';
        try {
            for (var keys_2 = tslib_1.__values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
                var keyName = keys_2_1.value;
                var /** @type {?} */ value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : '';
                recordData += this.processField(value, this._escapeCharacters);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (keys_2_1 && !keys_2_1.done && (_a = keys_2.return)) _a.call(keys_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return recordData.slice(0, -this._delimiterLength) + this._eor;
        var e_2, _a;
    };
    /**
     * @param {?} currentData
     * @param {?} keys
     * @param {?} escapeChars
     * @return {?}
     */
    CharSeparatedValueData.prototype.processDataRecords = /**
     * @param {?} currentData
     * @param {?} keys
     * @param {?} escapeChars
     * @return {?}
     */
    function (currentData, keys, escapeChars) {
        var /** @type {?} */ dataRecords = '';
        try {
            for (var currentData_1 = tslib_1.__values(currentData), currentData_1_1 = currentData_1.next(); !currentData_1_1.done; currentData_1_1 = currentData_1.next()) {
                var row = currentData_1_1.value;
                dataRecords += this.processRecord(row, keys, escapeChars);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (currentData_1_1 && !currentData_1_1.done && (_a = currentData_1.return)) _a.call(currentData_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return dataRecords;
        var e_3, _a;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CharSeparatedValueData.prototype.setDelimiter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._delimiter = value;
        this._delimiterLength = value.length;
    };
    return CharSeparatedValueData;
}());
/**
 * @hidden
 */
export { CharSeparatedValueData };
function CharSeparatedValueData_tsickle_Closure_declarations() {
    /** @type {?} */
    CharSeparatedValueData.prototype._headerRecord;
    /** @type {?} */
    CharSeparatedValueData.prototype._dataRecords;
    /** @type {?} */
    CharSeparatedValueData.prototype._eor;
    /** @type {?} */
    CharSeparatedValueData.prototype._delimiter;
    /** @type {?} */
    CharSeparatedValueData.prototype._escapeCharacters;
    /** @type {?} */
    CharSeparatedValueData.prototype._delimiterLength;
    /** @type {?} */
    CharSeparatedValueData.prototype._isSpecialData;
    /** @type {?} */
    CharSeparatedValueData.prototype._data;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhci1zZXBhcmF0ZWQtdmFsdWUtZGF0YS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvY3N2L2NoYXItc2VwYXJhdGVkLXZhbHVlLWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUNBQXFDLENBQUM7Ozs7QUFLdEU7OztBQUFBO0lBU0ksZ0NBQW9CLEtBQVksRUFBRSxjQUFzQjtRQUFwQyxVQUFLLEdBQUwsS0FBSyxDQUFPOzZCQVJSLEVBQUU7NEJBQ0gsRUFBRTtvQkFDVixNQUFNO2lDQUVPLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUM7Z0NBQ3JCLENBQUM7OEJBQ0gsS0FBSztRQUcxQixJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQ3JDOzs7O0lBRU0sNENBQVc7Ozs7UUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QyxNQUFNLENBQUMsRUFBRSxDQUFDO1NBQ2I7UUFFRCxxQkFBTSxJQUFJLEdBQUcsZUFBZSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFekQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLE1BQU0sQ0FBQyxFQUFFLENBQUM7U0FDYjtRQUVELElBQUksQ0FBQyxjQUFjLEdBQUcsZUFBZSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENB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LEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQzs7aUNBN0U3QztJQStFQyxDQUFBOzs7O0FBMUVELGtDQTBFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cG9ydFV0aWxpdGllcyB9IGZyb20gJy4uL2V4cG9ydGVyLWNvbW1vbi9leHBvcnQtdXRpbGl0aWVzJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBDaGFyU2VwYXJhdGVkVmFsdWVEYXRhIHtcbiAgICBwcml2YXRlIF9oZWFkZXJSZWNvcmQgPSAnJztcbiAgICBwcml2YXRlIF9kYXRhUmVjb3JkcyA9ICcnO1xuICAgIHByaXZhdGUgX2VvciA9ICdcXHJcXG4nO1xuICAgIHByaXZhdGUgX2RlbGltaXRlcjtcbiAgICBwcml2YXRlIF9lc2NhcGVDaGFyYWN0ZXJzID0gWydcXHInLCAnXFxuJywgJ1xcclxcbiddO1xuICAgIHByaXZhdGUgX2RlbGltaXRlckxlbmd0aCA9IDE7XG4gICAgcHJpdmF0ZSBfaXNTcGVjaWFsRGF0YSA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZGF0YTogYW55W10sIHZhbHVlRGVsaW1pdGVyOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZXREZWxpbWl0ZXIodmFsdWVEZWxpbWl0ZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBwcmVwYXJlRGF0YSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhIHx8IHRoaXMuX2RhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBrZXlzID0gRXhwb3J0VXRpbGl0aWVzLmdldEtleXNGcm9tRGF0YSh0aGlzLl9kYXRhKTtcblxuICAgICAgICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2lzU3BlY2lhbERhdGEgPSBFeHBvcnRVdGlsaXRpZXMuaXNTcGVjaWFsRGF0YSh0aGlzLl9kYXRhKTtcbiAgICAgICAgdGhpcy5fZXNjYXBlQ2hhcmFjdGVycy5wdXNoKHRoaXMuX2RlbGltaXRlcik7XG5cbiAgICAgICAgdGhpcy5faGVhZGVyUmVjb3JkID0gdGhpcy5wcm9jZXNzSGVhZGVyUmVjb3JkKGtleXMsIHRoaXMuX2VzY2FwZUNoYXJhY3RlcnMpO1xuICAgICAgICB0aGlzLl9kYXRhUmVjb3JkcyA9IHRoaXMucHJvY2Vzc0RhdGFSZWNvcmRzKHRoaXMuX2RhdGEsIGtleXMsIHRoaXMuX2VzY2FwZUNoYXJhY3RlcnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9oZWFkZXJSZWNvcmQgKyB0aGlzLl9kYXRhUmVjb3JkcztcbiAgICB9XG5cbiAgICBwcml2YXRlIHByb2Nlc3NGaWVsZCh2YWx1ZSwgZXNjYXBlQ2hhcnMpOiBzdHJpbmcge1xuICAgICAgICBsZXQgc2FmZVZhbHVlID0gRXhwb3J0VXRpbGl0aWVzLmhhc1ZhbHVlKHZhbHVlKSA/IFN0cmluZyh2YWx1ZSkgOiAnJztcbiAgICAgICAgaWYgKGVzY2FwZUNoYXJzLnNvbWUoKHYpID0+IHNhZmVWYWx1ZS5pbmNsdWRlcyh2KSkpIHtcbiAgICAgICAgICAgIHNhZmVWYWx1ZSA9IGBcIiR7c2FmZVZhbHVlfVwiYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2FmZVZhbHVlICsgdGhpcy5fZGVsaW1pdGVyO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJvY2Vzc0hlYWRlclJlY29yZChrZXlzLCBlc2NhcGVDaGFycyk6IHN0cmluZyB7XG4gICAgICAgIGxldCByZWNvcmREYXRhID0gJyc7XG4gICAgICAgIGZvciAoY29uc3Qga2V5TmFtZSBvZiBrZXlzKSB7XG4gICAgICAgICAgICByZWNvcmREYXRhICs9IHRoaXMucHJvY2Vzc0ZpZWxkKGtleU5hbWUsIHRoaXMuX2VzY2FwZUNoYXJhY3RlcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlY29yZERhdGEuc2xpY2UoMCwgLXRoaXMuX2RlbGltaXRlckxlbmd0aCkgKyB0aGlzLl9lb3I7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcm9jZXNzUmVjb3JkKHJlY29yZCwga2V5cywgZXNjYXBlQ2hhcnMpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcmVjb3JkRGF0YSA9ICcnO1xuICAgICAgICBmb3IgKGNvbnN0IGtleU5hbWUgb2Yga2V5cykge1xuXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IChyZWNvcmRba2V5TmFtZV0gIT09IHVuZGVmaW5lZCkgPyByZWNvcmRba2V5TmFtZV0gOiB0aGlzLl9pc1NwZWNpYWxEYXRhID8gcmVjb3JkIDogJyc7XG4gICAgICAgICAgICByZWNvcmREYXRhICs9IHRoaXMucHJvY2Vzc0ZpZWxkKHZhbHVlLCB0aGlzLl9lc2NhcGVDaGFyYWN0ZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWNvcmREYXRhLnNsaWNlKDAsIC10aGlzLl9kZWxpbWl0ZXJMZW5ndGgpICsgdGhpcy5fZW9yO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJvY2Vzc0RhdGFSZWNvcmRzKGN1cnJlbnREYXRhLCBrZXlzLCBlc2NhcGVDaGFycykge1xuICAgICAgICBsZXQgZGF0YVJlY29yZHMgPSAnJztcbiAgICAgICAgZm9yIChjb25zdCByb3cgb2YgY3VycmVudERhdGEpIHtcbiAgICAgICAgICAgIGRhdGFSZWNvcmRzICs9IHRoaXMucHJvY2Vzc1JlY29yZChyb3csIGtleXMsIGVzY2FwZUNoYXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhUmVjb3JkcztcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldERlbGltaXRlcih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9kZWxpbWl0ZXIgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fZGVsaW1pdGVyTGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICAgIH1cbn1cbiJdfQ==