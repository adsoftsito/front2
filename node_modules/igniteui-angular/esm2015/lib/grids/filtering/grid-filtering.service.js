/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { IgxIconService } from '../../icon/icon.service';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import icons from './svgIcons';
import { FilteringLogic } from '../../data-operations/filtering-expression.interface';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { IgxGridFilterConditionPipe } from '../grid-common.pipes';
import { TitleCasePipe, DatePipe } from '@angular/common';
const /** @type {?} */ FILTERING_ICONS_FONT_SET = 'filtering-icons';
/**
 * @hidden
 */
export class ExpressionUI {
    constructor() {
        this.isSelected = false;
    }
}
function ExpressionUI_tsickle_Closure_declarations() {
    /** @type {?} */
    ExpressionUI.prototype.expression;
    /** @type {?} */
    ExpressionUI.prototype.beforeOperator;
    /** @type {?} */
    ExpressionUI.prototype.afterOperator;
    /** @type {?} */
    ExpressionUI.prototype.isSelected;
}
/**
 * @hidden
 */
export class IgxFilteringService {
    /**
     * @param {?} gridAPI
     * @param {?} iconService
     */
    constructor(gridAPI, iconService) {
        this.gridAPI = gridAPI;
        this.iconService = iconService;
        this.columnsWithComplexFilter = new Set();
        this.areEventsSubscribed = false;
        this.destroy$ = new Subject();
        this.isFiltering = false;
        this.columnToExpressionsMap = new Map();
        this.filterPipe = new IgxGridFilterConditionPipe();
        this.titlecasePipe = new TitleCasePipe();
        this.datePipe = new DatePipe(window.navigator.language);
        this.isFilterRowVisible = false;
        this.filteredColumn = null;
        this.selectedExpression = null;
        this.columnToChipToFocus = new Map();
        this.columnToMoreIconHidden = new Map();
        this.columnStartIndex = -1;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @return {?}
     */
    get grid() {
        return this.gridAPI.get(this.gridId);
    }
    /**
     * Subscribe to grid's events.
     * @return {?}
     */
    subscribeToEvents() {
        if (!this.areEventsSubscribed) {
            this.areEventsSubscribed = true;
            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs) => {
                this.updateFilteringCell(eventArgs.column.field);
            });
            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs) => {
                if (eventArgs.startIndex !== this.columnStartIndex) {
                    this.columnStartIndex = eventArgs.startIndex;
                    this.grid.filterCellList.forEach((filterCell) => {
                        filterCell.updateFilterCellArea();
                        if (filterCell.getChipToFocus()) {
                            this.columnToChipToFocus.set(filterCell.column.field, false);
                            filterCell.focusChip();
                        }
                    });
                }
            });
            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe((event) => {
                this.grid.filterCellList.forEach((filterCell) => {
                    filterCell.updateFilterCellArea();
                });
            });
        }
    }
    /**
     * Execute filtering on the grid.
     * @param {?} field
     * @param {?} expressionsTree
     * @return {?}
     */
    filter(field, expressionsTree) {
        this.isFiltering = true;
        this.grid.filter(field, null, expressionsTree);
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(() => this.grid.onFilteringDone.emit(expressionsTree));
        this.isFiltering = false;
    }
    /**
     * Clear the filter of a given column.
     * @param {?} field
     * @return {?}
     */
    clearFilter(field) {
        this.isFiltering = true;
        this.grid.clearFilter(field);
        const /** @type {?} */ expr = this.grid.filteringExpressionsTree.find(field);
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(() => this.grid.onFilteringDone.emit(/** @type {?} */ (expr)));
        const /** @type {?} */ expressions = this.getExpressions(field);
        expressions.length = 0;
        this.isFiltering = false;
    }
    /**
     * Register filtering SVG icons in the icon service.
     * @return {?}
     */
    registerSVGIcons() {
        for (const /** @type {?} */ icon of icons) {
            if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {
                this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);
            }
        }
    }
    /**
     * Returns the ExpressionUI array for a given column.
     * @param {?} columnId
     * @return {?}
     */
    getExpressions(columnId) {
        if (!this.columnToExpressionsMap.has(columnId)) {
            const /** @type {?} */ column = this.grid.columns.find((col) => col.field === columnId);
            const /** @type {?} */ expressionUIs = new Array();
            this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);
            this.columnToExpressionsMap.set(columnId, expressionUIs);
            return expressionUIs;
        }
        return this.columnToExpressionsMap.get(columnId);
    }
    /**
     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.
     * @return {?}
     */
    refreshExpressions() {
        if (!this.isFiltering) {
            this.columnsWithComplexFilter.clear();
            this.columnToExpressionsMap.forEach((value, key) => {
                const /** @type {?} */ column = this.grid.columns.find((col) => col.field === key);
                value.length = 0;
                this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);
                const /** @type {?} */ isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);
                if (isComplex) {
                    this.columnsWithComplexFilter.add(key);
                }
                this.updateFilteringCell(key);
            });
        }
    }
    /**
     * Remove an ExpressionUI for a given column.
     * @param {?} columnId
     * @param {?} indexToRemove
     * @return {?}
     */
    removeExpression(columnId, indexToRemove) {
        const /** @type {?} */ expressionsList = this.getExpressions(columnId);
        if (indexToRemove === 0 && expressionsList.length > 1) {
            expressionsList[1].beforeOperator = null;
        }
        else if (indexToRemove === expressionsList.length - 1) {
            expressionsList[indexToRemove - 1].afterOperator = null;
        }
        else {
            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;
            expressionsList[0].beforeOperator = null;
            expressionsList[expressionsList.length - 1].afterOperator = null;
        }
        expressionsList.splice(indexToRemove, 1);
    }
    /**
     * Generate filtering tree for a given column from existing ExpressionUIs.
     * @param {?} columnId
     * @return {?}
     */
    createSimpleFilteringTree(columnId) {
        const /** @type {?} */ expressionsList = this.getExpressions(columnId);
        const /** @type {?} */ expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);
        let /** @type {?} */ currAndBranch;
        let /** @type {?} */ currExpressionUI;
        for (let /** @type {?} */ i = 0; i < expressionsList.length; i++) {
            currExpressionUI = expressionsList[i];
            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||
                currExpressionUI.beforeOperator === FilteringLogic.Or) &&
                currExpressionUI.afterOperator === FilteringLogic.And) {
                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);
                expressionsTree.filteringOperands.push(currAndBranch);
                currAndBranch.filteringOperands.push(currExpressionUI.expression);
            }
            else if (currExpressionUI.beforeOperator === FilteringLogic.And) {
                currAndBranch.filteringOperands.push(currExpressionUI.expression);
            }
            else {
                expressionsTree.filteringOperands.push(currExpressionUI.expression);
                currAndBranch = null;
            }
        }
        return expressionsTree;
    }
    /**
     * Returns whether a complex filter is applied to a given column.
     * @param {?} columnId
     * @return {?}
     */
    isFilterComplex(columnId) {
        if (this.columnsWithComplexFilter.has(columnId)) {
            return true;
        }
        const /** @type {?} */ column = this.grid.columns.find((col) => col.field === columnId);
        const /** @type {?} */ isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);
        if (isComplex) {
            this.columnsWithComplexFilter.add(columnId);
        }
        return isComplex;
    }
    /**
     * Returns the string representation of the FilteringLogic operator.
     * @param {?} operator
     * @return {?}
     */
    getOperatorAsString(operator) {
        return FilteringLogic[operator];
    }
    /**
     * Genererate the label of a chip from a given filtering expression.
     * @param {?} expression
     * @return {?}
     */
    getChipLabel(expression) {
        if (expression.condition.isUnary) {
            return this.titlecasePipe.transform(this.filterPipe.transform(expression.condition.name));
        }
        else if (expression.searchVal instanceof Date) {
            return this.datePipe.transform(expression.searchVal);
        }
        else {
            return expression.searchVal;
        }
    }
    /**
     * @param {?} columnId
     * @return {?}
     */
    updateFilteringCell(columnId) {
        const /** @type {?} */ filterCell = this.grid.filterCellList.find(cell => cell.column.field === columnId);
        if (filterCell) {
            filterCell.updateFilterCellArea();
        }
    }
    /**
     * @param {?} expressions
     * @return {?}
     */
    isFilteringTreeComplex(expressions) {
        if (!expressions) {
            return false;
        }
        if (expressions instanceof FilteringExpressionsTree) {
            const /** @type {?} */ expressionsTree = /** @type {?} */ (expressions);
            if (expressionsTree.operator === FilteringLogic.Or) {
                const /** @type {?} */ andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);
                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.
                return andOperatorsCount > 1;
            }
            let /** @type {?} */ isComplex = false;
            for (let /** @type {?} */ i = 0; i < expressionsTree.filteringOperands.length; i++) {
                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);
            }
            return isComplex;
        }
        return false;
    }
    /**
     * @param {?} expressions
     * @return {?}
     */
    getChildAndOperatorsCount(expressions) {
        let /** @type {?} */ count = 0;
        let /** @type {?} */ operand;
        for (let /** @type {?} */ i = 0; i < expressions.filteringOperands.length; i++) {
            operand = expressions[i];
            if (operand instanceof FilteringExpressionsTree) {
                if (operand.operator === FilteringLogic.And) {
                    count++;
                }
                count = count + this.getChildAndOperatorsCount(operand);
            }
        }
        return count;
    }
    /**
     * @param {?} expressions
     * @param {?} operator
     * @param {?} expressionsUIs
     * @return {?}
     */
    generateExpressionsList(expressions, operator, expressionsUIs) {
        if (!expressions) {
            return;
        }
        if (expressions instanceof FilteringExpressionsTree) {
            const /** @type {?} */ expressionsTree = /** @type {?} */ (expressions);
            for (let /** @type {?} */ i = 0; i < expressionsTree.filteringOperands.length; i++) {
                this.generateExpressionsList(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);
            }
        }
        else {
            const /** @type {?} */ exprUI = new ExpressionUI();
            exprUI.expression = /** @type {?} */ (expressions);
            if (expressionsUIs.length !== 0) {
                exprUI.beforeOperator = operator;
            }
            const /** @type {?} */ prevExprUI = expressionsUIs[expressionsUIs.length - 1];
            if (prevExprUI) {
                prevExprUI.afterOperator = operator;
            }
            expressionsUIs.push(exprUI);
        }
    }
}
IgxFilteringService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
IgxFilteringService.ctorParameters = () => [
    { type: GridBaseAPIService, },
    { type: IgxIconService, },
];
function IgxFilteringService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxFilteringService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxFilteringService.ctorParameters;
    /** @type {?} */
    IgxFilteringService.prototype.columnsWithComplexFilter;
    /** @type {?} */
    IgxFilteringService.prototype.areEventsSubscribed;
    /** @type {?} */
    IgxFilteringService.prototype.destroy$;
    /** @type {?} */
    IgxFilteringService.prototype.isFiltering;
    /** @type {?} */
    IgxFilteringService.prototype.columnToExpressionsMap;
    /** @type {?} */
    IgxFilteringService.prototype.filterPipe;
    /** @type {?} */
    IgxFilteringService.prototype.titlecasePipe;
    /** @type {?} */
    IgxFilteringService.prototype.datePipe;
    /** @type {?} */
    IgxFilteringService.prototype.gridId;
    /** @type {?} */
    IgxFilteringService.prototype.isFilterRowVisible;
    /** @type {?} */
    IgxFilteringService.prototype.filteredColumn;
    /** @type {?} */
    IgxFilteringService.prototype.selectedExpression;
    /** @type {?} */
    IgxFilteringService.prototype.columnToChipToFocus;
    /** @type {?} */
    IgxFilteringService.prototype.columnToMoreIconHidden;
    /** @type {?} */
    IgxFilteringService.prototype.columnStartIndex;
    /** @type {?} */
    IgxFilteringService.prototype.gridAPI;
    /** @type {?} */
    IgxFilteringService.prototype.iconService;
}

//# sourceMappingURL=data:application/json;base64,