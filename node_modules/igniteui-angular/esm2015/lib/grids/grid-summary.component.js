/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Input } from '@angular/core';
import { GridBaseAPIService } from './api.service';
import { IgxColumnComponent } from './column.component';
/**
 * @hidden
 */
export class IgxGridSummaryComponent {
    /**
     * @param {?} gridAPI
     * @param {?} cdr
     */
    constructor(gridAPI, cdr) {
        this.gridAPI = gridAPI;
        this.cdr = cdr;
        this.itemClass = 'igx-grid-summary__item';
    }
    /**
     * @return {?}
     */
    get widthPersistenceClass() {
        return this.column.width !== null;
    }
    /**
     * @return {?}
     */
    get isPinned() {
        return this.column.pinned;
    }
    /**
     * @return {?}
     */
    get isLastPinned() {
        const /** @type {?} */ pinnedCols = this.gridAPI.get(this.gridID).pinnedColumns;
        if (pinnedCols.length === 0) {
            return false;
        }
        else {
            return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;
        }
    }
    /**
     * @return {?}
     */
    get emptyClass() {
        return !this.column.hasSummary;
    }
    /**
     * @return {?}
     */
    get width() {
        return this.column.width;
    }
    /**
     * @return {?}
     */
    get compactCSS() {
        return this.displayDensity === "compact" /* compact */;
    }
    /**
     * @return {?}
     */
    get cosyCSS() {
        return this.displayDensity === "cosy" /* cosy */;
    }
    /**
     * @return {?}
     */
    get defaultCSS() {
        return this.displayDensity === "comfortable" /* comfortable */;
    }
    /**
     * @return {?}
     */
    get dataType() {
        return this.column.dataType;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.displayDensity = this.gridAPI.get(this.gridID).displayDensity;
        this.summaryItemHeight = this.gridAPI.get(this.gridID).defaultRowHeight;
        this.cdr.detectChanges();
    }
    /**
     * @return {?}
     */
    get resolveSummaries() {
        if (this.fieldName) {
            const /** @type {?} */ field = this.fieldName;
            this.fieldName = null;
            this.gridAPI.set_summary_by_column_name(this.gridID, field);
            if (this.column.field === field) {
                return this.gridAPI.get_summaries(this.gridID).get(field);
            }
            else {
                return this.gridAPI.get_summaries(this.gridID).get(this.column.field);
            }
        }
        else {
            this.gridAPI.set_summary_by_column_name(this.gridID, this.column.field);
            return this.gridAPI.get_summaries(this.gridID).get(this.column.field);
        }
    }
}
IgxGridSummaryComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-grid-summary',
                template: `<ng-container *ngIf="column.hasSummary">
    <ng-container *ngFor="let summary of resolveSummaries">
        <div class="{{itemClass}}" [style.height.px]="summaryItemHeight">
            <span class="igx-grid-summary__label" title="{{ summary.label }}">{{ summary.label }}</span>
            <span class="igx-grid-summary__result" title="{{ summary.summaryResult }}">
                {{ column.dataType === 'number' ? (summary.summaryResult | igxdecimal) : column.dataType === 'date' ? (summary.summaryResult | igxdate) : (summary.summaryResult) }}
            </span>
        </div>
    </ng-container>
</ng-container>
`
            },] },
];
/** @nocollapse */
IgxGridSummaryComponent.ctorParameters = () => [
    { type: GridBaseAPIService, },
    { type: ChangeDetectorRef, },
];
IgxGridSummaryComponent.propDecorators = {
    "column": [{ type: Input },],
    "gridID": [{ type: Input },],
    "widthPersistenceClass": [{ type: HostBinding, args: ['class.igx-grid-summary--fw',] },],
    "isPinned": [{ type: HostBinding, args: ['class.igx-grid-summary--pinned',] },],
    "isLastPinned": [{ type: HostBinding, args: ['class.igx-grid-summary--pinned-last',] },],
    "emptyClass": [{ type: HostBinding, args: ['class.igx-grid-summary--empty',] },],
    "width": [{ type: HostBinding, args: ['style.min-width',] }, { type: HostBinding, args: ['style.flex-basis',] },],
    "compactCSS": [{ type: HostBinding, args: ['class.igx-grid-summary--compact',] },],
    "cosyCSS": [{ type: HostBinding, args: ['class.igx-grid-summary--cosy',] },],
    "defaultCSS": [{ type: HostBinding, args: ['class.igx-grid-summary',] },],
};
function IgxGridSummaryComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridSummaryComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridSummaryComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxGridSummaryComponent.propDecorators;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.fieldName;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.column;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.gridID;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.summaryItemHeight;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.itemClass;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.displayDensity;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.gridAPI;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.cdr;
}

//# sourceMappingURL=data:application/json;base64,