/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, Input, NgModule, Output, QueryList, TemplateRef, ViewChild } from '@angular/core';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxListItemComponent } from './list-item.component';
import { IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective, IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective } from './list.common';
let /** @type {?} */ NEXT_ID = 0;
/**
 * @record
 */
export function IPanStateChangeEventArgs() { }
function IPanStateChangeEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IPanStateChangeEventArgs.prototype.oldState;
    /** @type {?} */
    IPanStateChangeEventArgs.prototype.newState;
    /** @type {?} */
    IPanStateChangeEventArgs.prototype.item;
}
/**
 * @record
 */
export function IListItemClickEventArgs() { }
function IListItemClickEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IListItemClickEventArgs.prototype.item;
    /** @type {?} */
    IListItemClickEventArgs.prototype.event;
}
/**
 * @record
 */
export function IListItemPanningEventArgs() { }
function IListItemPanningEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IListItemPanningEventArgs.prototype.item;
    /** @type {?} */
    IListItemPanningEventArgs.prototype.direction;
    /** @type {?} */
    IListItemPanningEventArgs.prototype.keepItem;
}
/**
 * **Ignite UI for Angular List** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)
 *
 * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering
 * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.
 *
 * Example:
 * ```html
 * <igx-list>
 *   <igx-list-item isHeader="true">Contacts</igx-list-item>
 *   <igx-list-item *ngFor="let contact of contacts">
 *     <span class="name">{{ contact.name }}</span>
 *     <span class="phone">{{ contact.phone }}</span>
 *   </igx-list-item>
 * </igx-list>
 * ```
 */
export class IgxListComponent {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        /**
         * Provides a threshold after which the item's panning will be completed automatically.
         * By default this property is set to 0.5 which is 50% of the list item's width.
         * ```typescript
         * this.list.panEndTriggeringThreshold = 0.8;
         * ```
         */
        this.panEndTriggeringThreshold = 0.5;
        /**
         * Sets/gets the `id` of the list.
         * If not set, the `id` of the first list component will be `"igx-list-0"`.
         * ```html
         * <igx-list id = "my-first-list"></igx-list>
         * ```
         * ```typescript
         * let listId =  this.list.id;
         * ```
         * \@memberof IgxListComponent
         */
        this.id = `igx-list-${NEXT_ID++}`;
        /**
         * Sets/gets whether the left panning of an item is allowed.
         * Default value is `false`.
         * ```html
         *  <igx-list [allowLeftPanning] = "true"></igx-list>
         * ```
         * ```typescript
         * let isLeftPanningAllowed = this.list.allowLeftPanning;
         * ```
         * \@memberof IgxListComponent
         */
        this.allowLeftPanning = false;
        /**
         * Sets/gets whether the right panning of an item is allowed.
         * Default value is `false`.
         * ```html
         *  <igx-list [allowRightPanning] = "true"></igx-list>
         * ```
         * ```typescript
         * let isRightPanningAllowed = this.list.allowRightPanning;
         * ```
         * \@memberof IgxListComponent
         */
        this.allowRightPanning = false;
        /**
         * Sets/gets whether the list is currently loading data.
         * Set it to display the dataLoadingTemplate while data is being retrieved.
         * Default value is `false`.
         * ```html
         *  <igx-list [isLoading]="true"></igx-list>
         * ```
         * ```typescript
         * let isLoading = this.list.isLoading;
         * ```
         * \@memberof IgxListComponent
         */
        this.isLoading = false;
        /**
         * Emits an event within the current list when left pan gesture is executed on a list item.
         * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
         * ```html
         * <igx-list [allowLeftPanning]="true" (onLeftPan)="onLeftPan($event)"></igx-list>
         * ```
         * \@memberof IgxListComponent
         */
        this.onLeftPan = new EventEmitter();
        /**
         * Emits an event within the current list when right pan gesture is executed on a list item.
         * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
         * ```html
         * <igx-list [allowRightPanning]="true" (onRightPan)="onRightPan($event)"></igx-list>
         * ```
         * \@memberof IgxListComponent
         */
        this.onRightPan = new EventEmitter();
        /**
         * Emits an event within the current list when pan gesture is executed on list item.
         * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.
         * ```html
         * <igx-list (onPanStateChange) = "onPanStateChange($event)"></igx-list>
         * ```
         * \@memberof IgxListComponent
         */
        this.onPanStateChange = new EventEmitter();
        /**
         * Emits an event within the current list when a list item has been clicked.
         * Provides references to the `IgxListItemComponent` and `Event` as event arguments.
         *  ```html
         * <igx-list (onItemClicked) = "onItemClicked($event)"></igx-list>
         * ```
         * \@memberof IgxListComponent
         */
        this.onItemClicked = new EventEmitter();
    }
    /**
     * Gets the `role` attribute.
     * ```typescript
     * let listRole =  this.list.role;
     * ```
     * \@memberof IgxListComponent
     * @return {?}
     */
    get role() {
        return 'list';
    }
    /**
     * Returns boolean indicating if the list is empty.
     * ```typescript
     * let isEmpty =  this.list.isListEmpty;
     * ```
     * \@memberof IgxListComponent
     * @return {?}
     */
    get isListEmpty() {
        return !this.children || this.children.length === 0;
    }
    /**
     * Returns boolean indicating if the list has a `cssClass` attribute.
     * ```typescript
     * let hasCssClass =  this.list.cssClass;
     * ```
     * \@memberof IgxListComponent
     * @return {?}
     */
    get cssClass() {
        return this.children && this.children.length > 0;
    }
    /**
     * Returns the `items` in the list excluding the headers.
     * ```typescript
     * let listItems: IgxListItemComponent[] = this.list.items;
     * ```
     * \@memberof IgxListComponent
     * @return {?}
     */
    get items() {
        const /** @type {?} */ items = [];
        if (this.children !== undefined) {
            for (const /** @type {?} */ child of this.children.toArray()) {
                if (!child.isHeader) {
                    items.push(child);
                }
            }
        }
        return items;
    }
    /**
     * Returns the headers in the list.
     * ```typescript
     * let listHeaders: IgxListItemComponent[] =  this.list.headers;
     * ```
     * \@memberof IgxListComponent
     * @return {?}
     */
    get headers() {
        const /** @type {?} */ headers = [];
        if (this.children !== undefined) {
            for (const /** @type {?} */ child of this.children.toArray()) {
                if (child.isHeader) {
                    headers.push(child);
                }
            }
        }
        return headers;
    }
    /**
     * Returns the `context` object which represents the `template context` binding into the `list container`
     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.
     * ```typescript
     * let listComponent =  this.list.context;
     * ```
     * @return {?}
     */
    get context() {
        return {
            $implicit: this
        };
    }
    /**
     * Returns the `template` of an empty list.
     * ```typescript
     * let listTemplate = this.list.template;
     * ```
     * \@memberof IgxListComponent
     * @return {?}
     */
    get template() {
        if (this.isLoading) {
            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;
        }
        else {
            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;
        }
    }
}
IgxListComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-list',
                template: `<ng-content></ng-content>

<ng-template #defaultEmptyList>
    <article class="message">
        <p>There are no items in the list.</p>
    </article>
</ng-template>

<ng-template #defaultDataLoading>
    <article class="message">
        <p>Loading data from the server...</p>
    </article>
</ng-template>

<ng-container *ngIf="!children || children.length === 0">
    <ng-container *ngTemplateOutlet="template; context: context">
    </ng-container>
</ng-container>
`
            },] },
];
/** @nocollapse */
IgxListComponent.ctorParameters = () => [
    { type: ElementRef, },
];
IgxListComponent.propDecorators = {
    "children": [{ type: ContentChildren, args: [forwardRef(() => IgxListItemComponent),] },],
    "emptyListTemplate": [{ type: ContentChild, args: [IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective },] },],
    "dataLoadingTemplate": [{ type: ContentChild, args: [IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective },] },],
    "listItemLeftPanningTemplate": [{ type: ContentChild, args: [IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective },] },],
    "listItemRightPanningTemplate": [{ type: ContentChild, args: [IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective },] },],
    "panEndTriggeringThreshold": [{ type: Input },],
    "defaultEmptyListTemplate": [{ type: ViewChild, args: ['defaultEmptyList', { read: TemplateRef },] },],
    "defaultDataLoadingTemplate": [{ type: ViewChild, args: ['defaultDataLoading', { read: TemplateRef },] },],
    "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
    "allowLeftPanning": [{ type: Input },],
    "allowRightPanning": [{ type: Input },],
    "isLoading": [{ type: Input },],
    "onLeftPan": [{ type: Output },],
    "onRightPan": [{ type: Output },],
    "onPanStateChange": [{ type: Output },],
    "onItemClicked": [{ type: Output },],
    "role": [{ type: HostBinding, args: ['attr.role',] },],
    "isListEmpty": [{ type: HostBinding, args: ['class.igx-list-empty',] },],
    "cssClass": [{ type: HostBinding, args: ['class.igx-list',] },],
};
function IgxListComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxListComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxListComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxListComponent.propDecorators;
    /**
     * Returns a collection of all items and headers in the list.
     * ```typescript
     * let listChildren: QueryList = this.list.children;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.children;
    /**
     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `false`.
     * ```typescript
     * let emptyTemplate = this.list.emptyListTemplate;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.emptyListTemplate;
    /**
     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `true`.
     * ```typescript
     * let loadingTemplate = this.list.dataLoadingTemplate;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.dataLoadingTemplate;
    /**
     * Sets/gets the template shown when left panning a list item.
     * Default value is `null`.
     * ```html
     *  <igx-list [allowLeftPanning] = "true"></igx-list>
     * ```
     * ```typescript
     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.listItemLeftPanningTemplate;
    /**
     * Sets/gets the template shown when right panning a list item.
     * Default value is `null`.
     * ```html
     *  <igx-list [allowLeftPanning] = "true"></igx-list>
     * ```
     * ```typescript
     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.listItemRightPanningTemplate;
    /**
     * Provides a threshold after which the item's panning will be completed automatically.
     * By default this property is set to 0.5 which is 50% of the list item's width.
     * ```typescript
     * this.list.panEndTriggeringThreshold = 0.8;
     * ```
     * @type {?}
     */
    IgxListComponent.prototype.panEndTriggeringThreshold;
    /**
     * @hidden
     * @type {?}
     */
    IgxListComponent.prototype.defaultEmptyListTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxListComponent.prototype.defaultDataLoadingTemplate;
    /**
     * Sets/gets the `id` of the list.
     * If not set, the `id` of the first list component will be `"igx-list-0"`.
     * ```html
     * <igx-list id = "my-first-list"></igx-list>
     * ```
     * ```typescript
     * let listId =  this.list.id;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.id;
    /**
     * Sets/gets whether the left panning of an item is allowed.
     * Default value is `false`.
     * ```html
     *  <igx-list [allowLeftPanning] = "true"></igx-list>
     * ```
     * ```typescript
     * let isLeftPanningAllowed = this.list.allowLeftPanning;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.allowLeftPanning;
    /**
     * Sets/gets whether the right panning of an item is allowed.
     * Default value is `false`.
     * ```html
     *  <igx-list [allowRightPanning] = "true"></igx-list>
     * ```
     * ```typescript
     * let isRightPanningAllowed = this.list.allowRightPanning;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.allowRightPanning;
    /**
     * Sets/gets whether the list is currently loading data.
     * Set it to display the dataLoadingTemplate while data is being retrieved.
     * Default value is `false`.
     * ```html
     *  <igx-list [isLoading]="true"></igx-list>
     * ```
     * ```typescript
     * let isLoading = this.list.isLoading;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.isLoading;
    /**
     * Emits an event within the current list when left pan gesture is executed on a list item.
     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
     * ```html
     * <igx-list [allowLeftPanning]="true" (onLeftPan)="onLeftPan($event)"></igx-list>
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.onLeftPan;
    /**
     * Emits an event within the current list when right pan gesture is executed on a list item.
     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
     * ```html
     * <igx-list [allowRightPanning]="true" (onRightPan)="onRightPan($event)"></igx-list>
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.onRightPan;
    /**
     * Emits an event within the current list when pan gesture is executed on list item.
     * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.
     * ```html
     * <igx-list (onPanStateChange) = "onPanStateChange($event)"></igx-list>
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.onPanStateChange;
    /**
     * Emits an event within the current list when a list item has been clicked.
     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.
     *  ```html
     * <igx-list (onItemClicked) = "onItemClicked($event)"></igx-list>
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.onItemClicked;
    /** @type {?} */
    IgxListComponent.prototype.element;
}
/**
 * The IgxListModule provides the {\@link IgxListComponent} and the {\@link IgxListItemComponent} inside your application.
 */
export class IgxListModule {
}
IgxListModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxListComponent, IgxListItemComponent,
                    IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective,
                    IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective],
                exports: [IgxListComponent, IgxListItemComponent,
                    IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective,
                    IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective],
                imports: [CommonModule, IgxRippleModule]
            },] },
];
function IgxListModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxListModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxListModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,