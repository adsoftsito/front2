/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Input, ChangeDetectorRef, TemplateRef, ViewContainerRef, NgModule, NgZone } from '@angular/core';
import { CommonModule } from '@angular/common';
/**
 * @hidden
 */
export class IgxTemplateOutletDirective {
    /**
     * @param {?} _viewContainerRef
     * @param {?} _zone
     * @param {?} cdr
     */
    constructor(_viewContainerRef, _zone, cdr) {
        this._viewContainerRef = _viewContainerRef;
        this._zone = _zone;
        this.cdr = cdr;
        /**
         * The embedded views cache. Collection is key-value paired.
         * Key is the template id, value is the embedded view for the related template.
         */
        this._embeddedViewsMap = new Map();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const /** @type {?} */ recreateView = this._shouldRecreateView(changes);
        if (recreateView) {
            // view should be re-created due to changes in the template or context.
            // check if we have existing view with the new template stored in the cache.
            const /** @type {?} */ tmplID = this.igxTemplateOutletContext['templateID'];
            const /** @type {?} */ cachedView = tmplID ?
                this._embeddedViewsMap.get(tmplID) :
                null;
            if (!this._viewRef || !cachedView) {
                // if view does not exist yet
                // or if there is no template defined in the template outlet context
                // or if there's no such view in the cache - then re-create view.
                this._recreateView();
            }
            else {
                // if view exists, but template has been changed and there is a view in the cache with the related template
                // then detach old view and insert the stored one with the matching template
                // after that update its context.
                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));
                this._viewRef = cachedView;
                this._viewContainerRef.insert(this._viewRef, 0);
                this._updateExistingContext(this.igxTemplateOutletContext);
            }
        }
        else {
            // view should not be re-created. Check if it exists and if context exists and just update it.
            if (this._viewRef && this.igxTemplateOutletContext) {
                this._updateExistingContext(this.igxTemplateOutletContext);
            }
        }
    }
    /**
     * @return {?}
     */
    _recreateView() {
        // remove and recreate
        if (this._viewRef) {
            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
        }
        if (this.igxTemplateOutlet) {
            this._viewRef = this._viewContainerRef.createEmbeddedView(this.igxTemplateOutlet, this.igxTemplateOutletContext);
            const /** @type {?} */ tmplId = this.igxTemplateOutletContext['templateID'];
            if (tmplId) {
                // if context contains a template id, check if we have a view for that template already stored in the cache
                // if not create a copy and add it to the cache in detached state.
                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.
                const /** @type {?} */ res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);
                if (!res) {
                    let /** @type {?} */ emptyView = this._viewContainerRef.createEmbeddedView(this.igxTemplateOutlet, {});
                    emptyView = /** @type {?} */ (this._viewContainerRef.detach(this._viewContainerRef.indexOf(emptyView)));
                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], emptyView);
                }
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    _shouldRecreateView(changes) {
        const /** @type {?} */ ctxChange = changes['igxTemplateOutletContext'];
        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));
    }
    /**
     * @param {?} ctxChange
     * @return {?}
     */
    _hasContextShapeChanged(ctxChange) {
        const /** @type {?} */ prevCtxKeys = Object.keys(ctxChange.previousValue || {});
        const /** @type {?} */ currCtxKeys = Object.keys(ctxChange.currentValue || {});
        if (prevCtxKeys.length === currCtxKeys.length) {
            for (const /** @type {?} */ propName of currCtxKeys) {
                if (prevCtxKeys.indexOf(propName) === -1) {
                    return true;
                }
            }
            return false;
        }
        else {
            return true;
        }
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    _updateExistingContext(ctx) {
        for (const /** @type {?} */ propName of Object.keys(ctx)) {
            (/** @type {?} */ (this._viewRef.context))[propName] = (/** @type {?} */ (this.igxTemplateOutletContext))[propName];
        }
    }
}
IgxTemplateOutletDirective.decorators = [
    { type: Directive, args: [{ selector: '[igxTemplateOutlet]' },] },
];
/** @nocollapse */
IgxTemplateOutletDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
    { type: NgZone, },
    { type: ChangeDetectorRef, },
];
IgxTemplateOutletDirective.propDecorators = {
    "igxTemplateOutletContext": [{ type: Input },],
    "igxTemplateOutlet": [{ type: Input },],
};
function IgxTemplateOutletDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTemplateOutletDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTemplateOutletDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxTemplateOutletDirective.propDecorators;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype._viewRef;
    /**
     * The embedded views cache. Collection is key-value paired.
     * Key is the template id, value is the embedded view for the related template.
     * @type {?}
     */
    IgxTemplateOutletDirective.prototype._embeddedViewsMap;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype.igxTemplateOutletContext;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype.igxTemplateOutlet;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype._viewContainerRef;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype._zone;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype.cdr;
}
/**
 * @hidden
 */
export class IgxTemplateOutletModule {
}
IgxTemplateOutletModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxTemplateOutletDirective],
                entryComponents: [],
                exports: [IgxTemplateOutletDirective],
                imports: [CommonModule]
            },] },
];
function IgxTemplateOutletModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTemplateOutletModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTemplateOutletModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVfb3V0bGV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy90ZW1wbGF0ZS1vdXRsZXQvdGVtcGxhdGVfb3V0bGV0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBbUIsS0FBSyxFQUFhLGlCQUFpQixFQUNyQyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBZ0MsTUFBTSxlQUFlLENBQUM7QUFFdkksT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7O0FBTS9DLE1BQU07Ozs7OztJQWNKLFlBQW9CLGlCQUFtQyxFQUFXLE9BQXVCO1FBQXJFLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBa0I7UUFBVyxVQUFLLEdBQUwsS0FBSztRQUFrQixRQUFHLEdBQUgsR0FBRzs7Ozs7aUNBUDdCLElBQUksR0FBRyxFQUFFO0tBUXZFOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyx1QkFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZELEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7OztZQUdmLHVCQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDM0QsdUJBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxDQUFDO2dCQUN2QixJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ3BDLElBQUksQ0FBQztZQUNULEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Ozs7Z0JBSWhDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUN4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QzlDLEdBQUcsQ0FBQyxDQUFDLHVCQUFNLFFBQVEsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekMsTUFBTSxDQUFDLElBQUksQ0FBQztpQkFDYjthQUNGO1lBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztTQUNkO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFDO1NBQ2I7Ozs7OztJQUdLLHNCQUFzQixDQUFDLEdBQVc7UUFDeEMsR0FBRyxDQUFDLENBQUMsdUJBQU0sUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLG1CQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsbUJBQU0sSUFBSSxDQUFDLHdCQUF3QixFQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdkY7Ozs7WUFoR04sU0FBUyxTQUFDLEVBQUMsUUFBUSxFQUFFLHFCQUFxQixFQUFDOzs7O1lBUEcsZ0JBQWdCO1lBQVksTUFBTTtZQUQzQixpQkFBaUI7Ozt5Q0FrQnBFLEtBQUs7a0NBRUwsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtHUixNQUFNOzs7WUFQTCxRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFLENBQUMsMEJBQTBCLENBQUM7Z0JBQzFDLGVBQWUsRUFBRSxFQUFFO2dCQUNuQixPQUFPLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztnQkFDckMsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO2FBQzFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVtYmVkZGVkVmlld1JlZiwgSW5wdXQsIE9uQ2hhbmdlcywgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgIFNpbXBsZUNoYW5nZSwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYsIE5nTW9kdWxlLCBOZ1pvbmUsIFZpZXdSZWYsIE91dHB1dCwgRXZlbnRFbWl0dGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBEaXJlY3RpdmUoe3NlbGVjdG9yOiAnW2lneFRlbXBsYXRlT3V0bGV0XSd9KVxuZXhwb3J0IGNsYXNzIElneFRlbXBsYXRlT3V0bGV0RGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgcHJpdmF0ZSBfdmlld1JlZiAhOiBFbWJlZGRlZFZpZXdSZWY8YW55PjtcblxuICAgIC8qKlxuICAgICogVGhlIGVtYmVkZGVkIHZpZXdzIGNhY2hlLiBDb2xsZWN0aW9uIGlzIGtleS12YWx1ZSBwYWlyZWQuXG4gICAgKiBLZXkgaXMgdGhlIHRlbXBsYXRlIGlkLCB2YWx1ZSBpcyB0aGUgZW1iZWRkZWQgdmlldyBmb3IgdGhlIHJlbGF0ZWQgdGVtcGxhdGUuXG4gICAgKi9cbiAgcHJpdmF0ZSBfZW1iZWRkZWRWaWV3c01hcDogTWFwPHN0cmluZywgRW1iZWRkZWRWaWV3UmVmPGFueT4+ID0gbmV3IE1hcCgpO1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBpZ3hUZW1wbGF0ZU91dGxldENvbnRleHQgITogT2JqZWN0O1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBpZ3hUZW1wbGF0ZU91dGxldCAhOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgIHByaXZhdGUgX3pvbmU6IE5nWm9uZSwgIHB1YmxpYyBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgY29uc3QgcmVjcmVhdGVWaWV3ID0gdGhpcy5fc2hvdWxkUmVjcmVhdGVWaWV3KGNoYW5nZXMpO1xuICAgIGlmIChyZWNyZWF0ZVZpZXcpIHtcbiAgICAgICAgLy8gdmlldyBzaG91bGQgYmUgcmUtY3JlYXRlZCBkdWUgdG8gY2hhbmdlcyBpbiB0aGUgdGVtcGxhdGUgb3IgY29udGV4dC5cbiAgICAgICAgLy8gY2hlY2sgaWYgd2UgaGF2ZSBleGlzdGluZyB2aWV3IHdpdGggdGhlIG5ldyB0ZW1wbGF0ZSBzdG9yZWQgaW4gdGhlIGNhY2hlLlxuICAgICAgICBjb25zdCB0bXBsSUQgPSB0aGlzLmlneFRlbXBsYXRlT3V0bGV0Q29udGV4dFsndGVtcGxhdGVJRCddO1xuICAgICAgICBjb25zdCBjYWNoZWRWaWV3ID0gdG1wbElEID9cbiAgICAgICAgICAgIHRoaXMuX2VtYmVkZGVkVmlld3NNYXAuZ2V0KHRtcGxJRCkgOlxuICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgaWYgKCF0aGlzLl92aWV3UmVmIHx8ICFjYWNoZWRWaWV3KSB7XG4gICAgICAgICAgICAvLyBpZiB2aWV3IGRvZXMgbm90IGV4aXN0IHlldFxuICAgICAgICAgICAgLy8gb3IgaWYgdGhlcmUgaXMgbm8gdGVtcGxhdGUgZGVmaW5lZCBpbiB0aGUgdGVtcGxhdGUgb3V0bGV0IGNvbnRleHRcbiAgICAgICAgICAgIC8vIG9yIGlmIHRoZXJlJ3Mgbm8gc3VjaCB2aWV3IGluIHRoZSBjYWNoZSAtIHRoZW4gcmUtY3JlYXRlIHZpZXcuXG4gICAgICAgICAgICB0aGlzLl9yZWNyZWF0ZVZpZXcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgLy8gaWYgdmlldyBleGlzdHMsIGJ1dCB0ZW1wbGF0ZSBoYXMgYmVlbiBjaGFuZ2VkIGFuZCB0aGVyZSBpcyBhIHZpZXcgaW4gdGhlIGNhY2hlIHdpdGggdGhlIHJlbGF0ZWQgdGVtcGxhdGVcbiAgICAgICAgICAgLy8gdGhlbiBkZXRhY2ggb2xkIHZpZXcgYW5kIGluc2VydCB0aGUgc3RvcmVkIG9uZSB3aXRoIHRoZSBtYXRjaGluZyB0ZW1wbGF0ZVxuICAgICAgICAgICAvLyBhZnRlciB0aGF0IHVwZGF0ZSBpdHMgY29udGV4dC5cbiAgICAgICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXJSZWYuZGV0YWNoKHRoaXMuX3ZpZXdDb250YWluZXJSZWYuaW5kZXhPZih0aGlzLl92aWV3UmVmKSk7XG4gICAgICAgICAgICB0aGlzLl92aWV3UmVmID0gY2FjaGVkVmlldztcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXJSZWYuaW5zZXJ0KHRoaXMuX3ZpZXdSZWYsIDApO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlRXhpc3RpbmdDb250ZXh0KHRoaXMuaWd4VGVtcGxhdGVPdXRsZXRDb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHZpZXcgc2hvdWxkIG5vdCBiZSByZS1jcmVhdGVkLiBDaGVjayBpZiBpdCBleGlzdHMgYW5kIGlmIGNvbnRleHQgZXhpc3RzIGFuZCBqdXN0IHVwZGF0ZSBpdC5cbiAgICAgIGlmICh0aGlzLl92aWV3UmVmICYmIHRoaXMuaWd4VGVtcGxhdGVPdXRsZXRDb250ZXh0KSB7XG4gICAgICAgICAgdGhpcy5fdXBkYXRlRXhpc3RpbmdDb250ZXh0KHRoaXMuaWd4VGVtcGxhdGVPdXRsZXRDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9yZWNyZWF0ZVZpZXcoKSB7XG4gICAgIC8vIHJlbW92ZSBhbmQgcmVjcmVhdGVcbiAgICAgaWYgKHRoaXMuX3ZpZXdSZWYpIHtcbiAgICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXJSZWYucmVtb3ZlKHRoaXMuX3ZpZXdDb250YWluZXJSZWYuaW5kZXhPZih0aGlzLl92aWV3UmVmKSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pZ3hUZW1wbGF0ZU91dGxldCkge1xuICAgICAgICB0aGlzLl92aWV3UmVmID0gdGhpcy5fdmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcoXG4gICAgICAgICAgICAgIHRoaXMuaWd4VGVtcGxhdGVPdXRsZXQsIHRoaXMuaWd4VGVtcGxhdGVPdXRsZXRDb250ZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IHRtcGxJZCA9IHRoaXMuaWd4VGVtcGxhdGVPdXRsZXRDb250ZXh0Wyd0ZW1wbGF0ZUlEJ107XG4gICAgICAgICAgICBpZiAodG1wbElkKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgY29udGV4dCBjb250YWlucyBhIHRlbXBsYXRlIGlkLCBjaGVjayBpZiB3ZSBoYXZlIGEgdmlldyBmb3IgdGhhdCB0ZW1wbGF0ZSBhbHJlYWR5IHN0b3JlZCBpbiB0aGUgY2FjaGVcbiAgICAgICAgICAgICAgICAvLyBpZiBub3QgY3JlYXRlIGEgY29weSBhbmQgYWRkIGl0IHRvIHRoZSBjYWNoZSBpbiBkZXRhY2hlZCBzdGF0ZS5cbiAgICAgICAgICAgICAgICAvLyBOb3RlOiBWaWV3cyBpbiBkZXRhY2hlZCBzdGF0ZSBkbyBub3QgYXBwZWFyIGluIHRoZSBET00sIGhvd2V2ZXIgdGhleSByZW1haW4gc3RvcmVkIGluIG1lbW9yeS5cbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSB0aGlzLl9lbWJlZGRlZFZpZXdzTWFwLmdldCh0aGlzLmlneFRlbXBsYXRlT3V0bGV0Q29udGV4dFsndGVtcGxhdGVJRCddKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlcykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZW1wdHlWaWV3ID0gdGhpcy5fdmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlneFRlbXBsYXRlT3V0bGV0LCB7fSk7XG4gICAgICAgICAgICAgICAgICAgIGVtcHR5VmlldyA9IHRoaXMuX3ZpZXdDb250YWluZXJSZWYuZGV0YWNoKHRoaXMuX3ZpZXdDb250YWluZXJSZWYuaW5kZXhPZihlbXB0eVZpZXcpKSBhcyBFbWJlZGRlZFZpZXdSZWY8YW55PjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW1iZWRkZWRWaWV3c01hcC5zZXQodGhpcy5pZ3hUZW1wbGF0ZU91dGxldENvbnRleHRbJ3RlbXBsYXRlSUQnXSwgZW1wdHlWaWV3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICB9XG4gIH1cbiAgcHJpdmF0ZSBfc2hvdWxkUmVjcmVhdGVWaWV3KGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiBib29sZWFuIHtcbiAgICBjb25zdCBjdHhDaGFuZ2UgPSBjaGFuZ2VzWydpZ3hUZW1wbGF0ZU91dGxldENvbnRleHQnXTtcbiAgICByZXR1cm4gISFjaGFuZ2VzWydpZ3hUZW1wbGF0ZU91dGxldCddIHx8IChjdHhDaGFuZ2UgJiYgdGhpcy5faGFzQ29udGV4dFNoYXBlQ2hhbmdlZChjdHhDaGFuZ2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgX2hhc0NvbnRleHRTaGFwZUNoYW5nZWQoY3R4Q2hhbmdlOiBTaW1wbGVDaGFuZ2UpOiBib29sZWFuIHtcbiAgICBjb25zdCBwcmV2Q3R4S2V5cyA9IE9iamVjdC5rZXlzKGN0eENoYW5nZS5wcmV2aW91c1ZhbHVlIHx8IHt9KTtcbiAgICBjb25zdCBjdXJyQ3R4S2V5cyA9IE9iamVjdC5rZXlzKGN0eENoYW5nZS5jdXJyZW50VmFsdWUgfHwge30pO1xuXG4gICAgaWYgKHByZXZDdHhLZXlzLmxlbmd0aCA9PT0gY3VyckN0eEtleXMubGVuZ3RoKSB7XG4gICAgICBmb3IgKGNvbnN0IHByb3BOYW1lIG9mIGN1cnJDdHhLZXlzKSB7XG4gICAgICAgIGlmIChwcmV2Q3R4S2V5cy5pbmRleE9mKHByb3BOYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF91cGRhdGVFeGlzdGluZ0NvbnRleHQoY3R4OiBPYmplY3QpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IHByb3BOYW1lIG9mIE9iamVjdC5rZXlzKGN0eCkpIHtcbiAgICAgICg8YW55PnRoaXMuX3ZpZXdSZWYuY29udGV4dClbcHJvcE5hbWVdID0gKDxhbnk+dGhpcy5pZ3hUZW1wbGF0ZU91dGxldENvbnRleHQpW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtJZ3hUZW1wbGF0ZU91dGxldERpcmVjdGl2ZV0sXG4gICAgZW50cnlDb21wb25lbnRzOiBbXSxcbiAgICBleHBvcnRzOiBbSWd4VGVtcGxhdGVPdXRsZXREaXJlY3RpdmVdLFxuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdXG59KVxuXG5leHBvcnQgY2xhc3MgSWd4VGVtcGxhdGVPdXRsZXRNb2R1bGUge1xufVxuIl19