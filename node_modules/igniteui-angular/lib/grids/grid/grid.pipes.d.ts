import { PipeTransform } from '@angular/core';
import { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';
import { IGroupByResult } from '../../data-operations/sorting-strategy';
import { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { ISortingExpression } from '../../data-operations/sorting-expression.interface';
import { IgxGridBaseComponent } from '../grid-base.component';
import { GridBaseAPIService } from '../api.service';
/**
 *@hidden
 */
export declare class IgxGridSortingPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>);
    transform(collection: any[], expressions: ISortingExpression | ISortingExpression[], id: string, pipeTrigger: number): any[];
}
/**
 *@hidden
 */
export declare class IgxGridPreGroupingPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>);
    transform(collection: any[], expression: ISortingExpression | ISortingExpression[], expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean, id: string, pipeTrigger: number): IGroupByResult;
}
/**
 *@hidden
 */
export declare class IgxGridPostGroupingPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>);
    transform(collection: IGroupByResult, expression: ISortingExpression | ISortingExpression[], expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean, id: string, groupsRecords: any[], pipeTrigger: number): any[];
}
/**
 *@hidden
 */
export declare class IgxGridPagingPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>);
    transform(collection: IGroupByResult, page: number, perPage: number, id: string, pipeTrigger: number): IGroupByResult;
}
/**
 *@hidden
 */
export declare class IgxGridFilteringPipe implements PipeTransform {
    private gridAPI;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>);
    transform(collection: any[], expressionsTree: IFilteringExpressionsTree, id: string, pipeTrigger: number): any[];
}
