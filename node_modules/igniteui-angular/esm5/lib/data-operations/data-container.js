/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { DataUtil } from './data-util';
/** @enum {number} */
var DataAccess = {
    OriginalData: 0,
    TransformedData: 1,
};
export { DataAccess };
DataAccess[DataAccess.OriginalData] = "OriginalData";
DataAccess[DataAccess.TransformedData] = "TransformedData";
/**
 * @hidden
 */
var /**
 * @hidden
 */
DataContainer = /** @class */ (function () {
    function DataContainer(data) {
        if (data === void 0) { data = []; }
        this.state = {};
        this.data = data;
        this.transformedData = data;
    }
    /**
     * @param {?=} state
     * @return {?}
     */
    DataContainer.prototype.process = /**
     * @param {?=} state
     * @return {?}
     */
    function (state) {
        if (state) {
            this.state = state;
        }
        this.transformedData = this.data;
        // apply data operations
        this.transformedData = DataUtil.process(this.data, this.state);
        return this;
    };
    /**
     * @param {?} record
     * @param {?=} dataAccess
     * @return {?}
     */
    DataContainer.prototype.getIndexOfRecord = /**
     * @param {?} record
     * @param {?=} dataAccess
     * @return {?}
     */
    function (record, dataAccess) {
        if (dataAccess === void 0) { dataAccess = DataAccess.OriginalData; }
        var /** @type {?} */ data = this.accessData(dataAccess);
        return data.indexOf(record);
    };
    /**
     * @param {?} index
     * @param {?=} dataAccess
     * @return {?}
     */
    DataContainer.prototype.getRecordByIndex = /**
     * @param {?} index
     * @param {?=} dataAccess
     * @return {?}
     */
    function (index, dataAccess) {
        if (dataAccess === void 0) { dataAccess = DataAccess.OriginalData; }
        var /** @type {?} */ data = this.accessData(dataAccess);
        return data[index];
    };
    /**
     * @param {?} fieldName
     * @param {?} value
     * @param {?=} dataAccess
     * @return {?}
     */
    DataContainer.prototype.getRecordInfoByKeyValue = /**
     * @param {?} fieldName
     * @param {?} value
     * @param {?=} dataAccess
     * @return {?}
     */
    function (fieldName, value, dataAccess) {
        if (dataAccess === void 0) { dataAccess = DataAccess.OriginalData; }
        var /** @type {?} */ data = this.accessData(dataAccess);
        var /** @type {?} */ len = data.length;
        var /** @type {?} */ res = { index: -1, record: undefined };
        var /** @type {?} */ i;
        for (i = 0; i < len; i++) {
            if (data[i][fieldName] === value) {
                res.index = i;
                res.record = data[i];
                break;
            }
        }
        return res;
    };
    /**
     * @param {?} record
     * @param {?=} at
     * @return {?}
     */
    DataContainer.prototype.addRecord = /**
     * @param {?} record
     * @param {?=} at
     * @return {?}
     */
    function (record, at) {
        var /** @type {?} */ data = this.accessData(DataAccess.OriginalData);
        if (at === null || at === undefined) {
            data.push(record);
        }
        else {
            data.splice(at, 0, record);
        }
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DataContainer.prototype.deleteRecord = /**
     * @param {?} record
     * @return {?}
     */
    function (record) {
        var /** @type {?} */ index = this.getIndexOfRecord(record, DataAccess.OriginalData);
        return this.deleteRecordByIndex(index);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    DataContainer.prototype.deleteRecordByIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var /** @type {?} */ data = this.accessData(DataAccess.OriginalData);
        return data.splice(index, 1).length === 1;
    };
    /**
     * @param {?} index
     * @param {?} newProperties
     * @return {?}
     */
    DataContainer.prototype.updateRecordByIndex = /**
     * @param {?} index
     * @param {?} newProperties
     * @return {?}
     */
    function (index, newProperties) {
        var /** @type {?} */ dataAccess = DataAccess.OriginalData;
        var /** @type {?} */ foundRec = this.getRecordByIndex(index, dataAccess);
        if (!foundRec) {
            return undefined;
        }
        return Object.assign(foundRec, newProperties);
    };
    /**
     * @param {?} dataAccess
     * @return {?}
     */
    DataContainer.prototype.accessData = /**
     * @param {?} dataAccess
     * @return {?}
     */
    function (dataAccess) {
        var /** @type {?} */ res;
        switch (dataAccess) {
            case DataAccess.OriginalData:
                res = this.data;
                break;
            case DataAccess.TransformedData:
                res = this.transformedData;
                break;
        }
        return res;
    };
    return DataContainer;
}());
/**
 * @hidden
 */
export { DataContainer };
function DataContainer_tsickle_Closure_declarations() {
    /** @type {?} */
    DataContainer.prototype.data;
    /**
     * processed data
     * @type {?}
     */
    DataContainer.prototype.transformedData;
    /** @type {?} */
    DataContainer.prototype.state;
}

//# sourceMappingURL=data:application/json;base64,