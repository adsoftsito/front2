/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ChangeDetectorRef, ElementRef, HostBinding, HostListener, Input, Host, EventEmitter, Output, ContentChild } from '@angular/core';
import { IgxExpansionPanelComponent } from './expansion-panel.component';
import { IgxExpansionPanelIconDirective } from './expansion-panel.directives';
/**
 * @record
 */
export function IExpansionPanelEventArgs() { }
function IExpansionPanelEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IExpansionPanelEventArgs.prototype.event;
    /** @type {?} */
    IExpansionPanelEventArgs.prototype.panel;
}
/** @enum {string} */
const ICON_POSITION = {
    LEFT: 'left',
    NONE: 'none',
    RIGHT: 'right',
};
export { ICON_POSITION };
export class IgxExpansionPanelHeaderComponent {
    /**
     * @param {?} panel
     * @param {?} cdr
     * @param {?} elementRef
     */
    constructor(panel, cdr, elementRef) {
        this.panel = panel;
        this.cdr = cdr;
        this.elementRef = elementRef;
        this._iconTemplate = false;
        this.id = '';
        this.lv = '3';
        this.role = 'heading';
        this.iconPosition = ICON_POSITION.LEFT;
        this.onInteraction = new EventEmitter();
        this.cssClass = 'igx-expansion-panel__header';
        this.disabled = false;
        this.id = `${this.panel.id}-header`;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set iconTemplate(val) {
        this._iconTemplate = /** @type {?} */ (val);
    }
    /**
     * @return {?}
     */
    get iconTemplate() {
        return this._iconTemplate;
    }
    /**
     * @return {?}
     */
    get controls() {
        return this.panel.id;
    }
    /**
     * @return {?}
     */
    get isExpanded() {
        return !this.panel.collapsed;
    }
    /**
     * @param {?=} evt
     * @return {?}
     */
    onAction(evt) {
        if (this.disabled) {
            evt.stopPropagation();
            return;
        }
        this.onInteraction.emit({ event: evt, panel: this.panel });
        this.panel.toggle(evt);
        evt.preventDefault();
    }
    /**
     * @return {?}
     */
    get iconPositionClass() {
        switch (this.iconPosition) {
            case (ICON_POSITION.LEFT):
                return `igx-expansion-panel__header-icon--start`;
            case (ICON_POSITION.RIGHT):
                return `igx-expansion-panel__header-icon--end`;
            case (ICON_POSITION.NONE):
                return `igx-expansion-panel__header-icon--none`;
            default:
                return '';
        }
    }
}
IgxExpansionPanelHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-expansion-panel-header',
                template: `<div class="igx-expansion-panel__header-inner" tabindex="0" role="button" [attr.id]="id"
[attr.aria-disabled]="disabled" [attr.aria-expanded]="isExpanded" [attr.aria-controls]="controls">
    <div class="igx-expansion-panel__title-wrapper">
        <ng-content select="igx-expansion-panel-title"></ng-content>
        <ng-content select="igx-expansion-panel-description"></ng-content>
    </div>
    <ng-content></ng-content>
    <div [class]="iconPositionClass">
        <ng-content *ngIf="iconTemplate" select="igx-expansion-panel-icon"></ng-content>
        <igx-icon *ngIf="!iconTemplate" fontSet="material">
            {{panel.collapsed? 'expand_more':'expand_less'}}
        </igx-icon>
    </div>
</div>
`
            },] },
];
/** @nocollapse */
IgxExpansionPanelHeaderComponent.ctorParameters = () => [
    { type: IgxExpansionPanelComponent, decorators: [{ type: Host },] },
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
];
IgxExpansionPanelHeaderComponent.propDecorators = {
    "iconTemplate": [{ type: ContentChild, args: [IgxExpansionPanelIconDirective,] },],
    "lv": [{ type: HostBinding, args: ['attr.aria-level',] }, { type: Input },],
    "role": [{ type: HostBinding, args: ['attr.role',] }, { type: Input },],
    "iconPosition": [{ type: Input },],
    "onInteraction": [{ type: Output },],
    "cssClass": [{ type: HostBinding, args: ['class.igx-expansion-panel__header',] },],
    "isExpanded": [{ type: HostBinding, args: ['class.igx-expansion-panel__header--expanded',] },],
    "disabled": [{ type: Input }, { type: HostBinding, args: ['class.igx-expansion-panel--disabled',] },],
    "onAction": [{ type: HostListener, args: ['keydown.Enter', ['$event'],] }, { type: HostListener, args: ['keydown.Space', ['$event'],] }, { type: HostListener, args: ['keydown.Spacebar', ['$event'],] }, { type: HostListener, args: ['click', ['$event'],] },],
};
function IgxExpansionPanelHeaderComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxExpansionPanelHeaderComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxExpansionPanelHeaderComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxExpansionPanelHeaderComponent.propDecorators;
    /** @type {?} */
    IgxExpansionPanelHeaderComponent.prototype._iconTemplate;
    /** @type {?} */
    IgxExpansionPanelHeaderComponent.prototype.id;
    /** @type {?} */
    IgxExpansionPanelHeaderComponent.prototype.lv;
    /** @type {?} */
    IgxExpansionPanelHeaderComponent.prototype.role;
    /** @type {?} */
    IgxExpansionPanelHeaderComponent.prototype.iconPosition;
    /** @type {?} */
    IgxExpansionPanelHeaderComponent.prototype.onInteraction;
    /** @type {?} */
    IgxExpansionPanelHeaderComponent.prototype.cssClass;
    /** @type {?} */
    IgxExpansionPanelHeaderComponent.prototype.disabled;
    /** @type {?} */
    IgxExpansionPanelHeaderComponent.prototype.panel;
    /** @type {?} */
    IgxExpansionPanelHeaderComponent.prototype.cdr;
    /** @type {?} */
    IgxExpansionPanelHeaderComponent.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLWhlYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2V4cGFuc2lvbi1wYW5lbC9leHBhbnNpb24tcGFuZWwtaGVhZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxpQkFBaUIsRUFDakIsVUFBVSxFQUNWLFdBQVcsRUFDWCxZQUFZLEVBQ1osS0FBSyxFQUVMLElBQUksRUFDSixZQUFZLEVBQ1osTUFBTSxFQUNOLFlBQVksRUFDZixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsOEJBQThCLEVBQW1DLE1BQU0sOEJBQThCLENBQUM7Ozs7Ozs7Ozs7Ozs7VUFXcEcsTUFBTTtVQUNOLE1BQU07V0FDTCxPQUFPOzs7QUFzQm5CLE1BQU07Ozs7OztJQTZDRixZQUEyQixPQUEwQyxHQUFzQixFQUNuRjtRQURtQixVQUFLLEdBQUwsS0FBSztRQUFxQyxRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUNuRixlQUFVLEdBQVYsVUFBVTs2QkE1Q00sS0FBSztrQkFDakIsRUFBRTtrQkFhRixHQUFHO29CQUlELFNBQVM7NEJBT2MsYUFBYSxDQUFDLElBQUk7NkJBR2hDLElBQUksWUFBWSxFQUE0Qjt3QkFHaEQsNkJBQTZCO3dCQVU5QixLQUFLO1FBSWxCLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxDQUFDO0tBQ3ZDOzs7OztRQTFDUyxZQUFZLENBQUMsR0FBUTtRQUM1QixJQUFJLENBQUMsYUFBYSxxQkFBWSxHQUFHLENBQUEsQ0FBQzs7Ozs7UUFHM0IsWUFBWTtRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzs7Ozs7UUFXbkIsUUFBUTtRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQzs7Ozs7UUFjYixVQUFVO1FBQ2QsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7Ozs7OztJQWdCN0IsUUFBUSxDQUFDLEdBQVc7UUFDdkIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDakIsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3RCLE1BQU0sQ0FBQztTQUNUO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QixHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7Ozs7O1FBR2QsaUJBQWlCO1FBQ3pCLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO2dCQUNyQixNQUFNLENBQUMseUNBQXlDLENBQUM7WUFDckQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7Z0JBQ3RCLE1BQU0sQ0FBQyx1Q0FBdUMsQ0FBQztZQUNuRCxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztnQkFDckIsTUFBTSxDQUFDLHdDQUF3QyxDQUFDO1lBQ3BEO2dCQUNJLE1BQU0sQ0FBQyxFQUFFLENBQUM7U0FDakI7Ozs7WUE1RlIsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSw0QkFBNEI7Z0JBQ3RDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Q0FjYjthQUNBOzs7O1lBbkNRLDBCQUEwQix1QkFpRmxCLElBQUk7WUE1RmpCLGlCQUFpQjtZQUNqQixVQUFVOzs7NkJBbURULFlBQVksU0FBQyw4QkFBOEI7bUJBUzNDLFdBQVcsU0FBQyxpQkFBaUIsY0FDN0IsS0FBSztxQkFHTCxXQUFXLFNBQUMsV0FBVyxjQUN2QixLQUFLOzZCQU9MLEtBQUs7OEJBR0wsTUFBTTt5QkFHTCxXQUFXLFNBQUMsbUNBQW1DOzJCQUkvQyxXQUFXLFNBQUMsNkNBQTZDO3lCQUsxRCxLQUFLLFlBQ0wsV0FBVyxTQUFDLHFDQUFxQzt5QkFRaEQsWUFBWSxTQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUN4QyxZQUFZLFNBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQ3hDLFlBQVksU0FBQyxrQkFBa0IsRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUMzQyxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgRWxlbWVudFJlZixcbiAgICBIb3N0QmluZGluZyxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5wdXQsXG4gICAgUmVuZGVyZXIyLFxuICAgIEhvc3QsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIE91dHB1dCxcbiAgICBDb250ZW50Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hFeHBhbnNpb25QYW5lbENvbXBvbmVudCB9IGZyb20gJy4vZXhwYW5zaW9uLXBhbmVsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hFeHBhbnNpb25QYW5lbEljb25EaXJlY3RpdmUsIElneEV4cGFuc2lvblBhbmVsVGl0bGVEaXJlY3RpdmUgfSBmcm9tICcuL2V4cGFuc2lvbi1wYW5lbC5kaXJlY3RpdmVzJztcblxuZXhwb3J0IGludGVyZmFjZSBJRXhwYW5zaW9uUGFuZWxFdmVudEFyZ3Mge1xuICAgIGV2ZW50OiBFdmVudDtcbiAgICBwYW5lbDogSWd4RXhwYW5zaW9uUGFuZWxDb21wb25lbnQ7XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZW51bSBJQ09OX1BPU0lUSU9OIHtcbiAgICBMRUZUID0gJ2xlZnQnLFxuICAgIE5PTkUgPSAnbm9uZScsXG4gICAgUklHSFQgPSAncmlnaHQnXG59XG5cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcicsXG4gICAgdGVtcGxhdGU6IGA8ZGl2IGNsYXNzPVwiaWd4LWV4cGFuc2lvbi1wYW5lbF9faGVhZGVyLWlubmVyXCIgdGFiaW5kZXg9XCIwXCIgcm9sZT1cImJ1dHRvblwiIFthdHRyLmlkXT1cImlkXCJcblthdHRyLmFyaWEtZGlzYWJsZWRdPVwiZGlzYWJsZWRcIiBbYXR0ci5hcmlhLWV4cGFuZGVkXT1cImlzRXhwYW5kZWRcIiBbYXR0ci5hcmlhLWNvbnRyb2xzXT1cImNvbnRyb2xzXCI+XG4gICAgPGRpdiBjbGFzcz1cImlneC1leHBhbnNpb24tcGFuZWxfX3RpdGxlLXdyYXBwZXJcIj5cbiAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiaWd4LWV4cGFuc2lvbi1wYW5lbC10aXRsZVwiPjwvbmctY29udGVudD5cbiAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiaWd4LWV4cGFuc2lvbi1wYW5lbC1kZXNjcmlwdGlvblwiPjwvbmctY29udGVudD5cbiAgICA8L2Rpdj5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPGRpdiBbY2xhc3NdPVwiaWNvblBvc2l0aW9uQ2xhc3NcIj5cbiAgICAgICAgPG5nLWNvbnRlbnQgKm5nSWY9XCJpY29uVGVtcGxhdGVcIiBzZWxlY3Q9XCJpZ3gtZXhwYW5zaW9uLXBhbmVsLWljb25cIj48L25nLWNvbnRlbnQ+XG4gICAgICAgIDxpZ3gtaWNvbiAqbmdJZj1cIiFpY29uVGVtcGxhdGVcIiBmb250U2V0PVwibWF0ZXJpYWxcIj5cbiAgICAgICAgICAgIHt7cGFuZWwuY29sbGFwc2VkPyAnZXhwYW5kX21vcmUnOidleHBhbmRfbGVzcyd9fVxuICAgICAgICA8L2lneC1pY29uPlxuICAgIDwvZGl2PlxuPC9kaXY+XG5gXG59KVxuZXhwb3J0IGNsYXNzIElneEV4cGFuc2lvblBhbmVsSGVhZGVyQ29tcG9uZW50IHtcbiAgICAgLy8gcHJvcGVydGllcyBzZWN0aW9uXG4gICAgcHJpdmF0ZSBfaWNvblRlbXBsYXRlID0gZmFsc2U7XG4gICAgcHVibGljIGlkID0gJyc7XG5cbiAgICBAQ29udGVudENoaWxkKElneEV4cGFuc2lvblBhbmVsSWNvbkRpcmVjdGl2ZSlcbiAgICBwdWJsaWMgc2V0IGljb25UZW1wbGF0ZSh2YWw6IGFueSkge1xuICAgICAgICB0aGlzLl9pY29uVGVtcGxhdGUgPSA8Ym9vbGVhbj52YWw7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBpY29uVGVtcGxhdGUoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ljb25UZW1wbGF0ZTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1sZXZlbCcpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbHYgPSAnMyc7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIucm9sZScpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgcm9sZSA9ICdoZWFkaW5nJztcblxuICAgIHB1YmxpYyBnZXQgY29udHJvbHMgKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhbmVsLmlkO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGljb25Qb3NpdGlvbjogSUNPTl9QT1NJVElPTiA9IElDT05fUE9TSVRJT04uTEVGVDtcblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvbkludGVyYWN0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxJRXhwYW5zaW9uUGFuZWxFdmVudEFyZ3M+KCk7XG5cbiAgICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZXhwYW5zaW9uLXBhbmVsX19oZWFkZXInKVxuICAgICBwdWJsaWMgY3NzQ2xhc3MgPSAnaWd4LWV4cGFuc2lvbi1wYW5lbF9faGVhZGVyJztcblxuXG4gICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWV4cGFuc2lvbi1wYW5lbF9faGVhZGVyLS1leHBhbmRlZCcpXG4gICAgIHB1YmxpYyBnZXQgaXNFeHBhbmRlZCAoKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMucGFuZWwuY29sbGFwc2VkO1xuICAgICAgICAgfVxuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1leHBhbnNpb24tcGFuZWwtLWRpc2FibGVkJylcbiAgICBwdWJsaWMgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKEBIb3N0KCkgcHVibGljIHBhbmVsOiBJZ3hFeHBhbnNpb25QYW5lbENvbXBvbmVudCwgcHVibGljIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgICAgICB0aGlzLmlkID0gYCR7dGhpcy5wYW5lbC5pZH0taGVhZGVyYDtcbiAgICAgfVxuXG4gICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uRW50ZXInLCBbJyRldmVudCddKVxuICAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duLlNwYWNlJywgWyckZXZlbnQnXSlcbiAgICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5TcGFjZWJhcicsIFsnJGV2ZW50J10pXG4gICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgICAgcHVibGljIG9uQWN0aW9uKGV2dD86IEV2ZW50KSB7XG4gICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgfVxuICAgICAgICAgdGhpcy5vbkludGVyYWN0aW9uLmVtaXQoeyBldmVudDogZXZ0LCBwYW5lbDogdGhpcy5wYW5lbCB9KTtcbiAgICAgICAgIHRoaXMucGFuZWwudG9nZ2xlKGV2dCk7XG4gICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgfVxuXG4gICAgIHB1YmxpYyBnZXQgaWNvblBvc2l0aW9uQ2xhc3MoKTogc3RyaW5nIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmljb25Qb3NpdGlvbikge1xuICAgICAgICAgICAgY2FzZSAoSUNPTl9QT1NJVElPTi5MRUZUKTpcbiAgICAgICAgICAgICAgICByZXR1cm4gYGlneC1leHBhbnNpb24tcGFuZWxfX2hlYWRlci1pY29uLS1zdGFydGA7XG4gICAgICAgICAgICBjYXNlIChJQ09OX1BPU0lUSU9OLlJJR0hUKTpcbiAgICAgICAgICAgICAgICByZXR1cm4gYGlneC1leHBhbnNpb24tcGFuZWxfX2hlYWRlci1pY29uLS1lbmRgO1xuICAgICAgICAgICAgY2FzZSAoSUNPTl9QT1NJVElPTi5OT05FKTpcbiAgICAgICAgICAgICAgICByZXR1cm4gYGlneC1leHBhbnNpb24tcGFuZWxfX2hlYWRlci1pY29uLS1ub25lYDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgIH1cbn1cbiJdfQ==