/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';
import { ChangeDetectorRef, Directive, ElementRef, HostListener, Inject, Injectable, Input, NgZone, Output, Pipe, Renderer2, TemplateRef } from '@angular/core';
import { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';
import { map, switchMap, takeUntil, throttle } from 'rxjs/operators';
import { IgxColumnComponent } from './column.component';
import { IgxDragDirective, IgxDropDirective } from '../directives/dragdrop/dragdrop.directive';
import { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';
import { ConnectedPositioningStrategy } from '../services';
import { getPointFromPositionsSettings, VerticalAlignment } from '../services/overlay/utilities';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
var IgxColumnResizerDirective = /** @class */ (function () {
    function IgxColumnResizerDirective(element, document, zone) {
        var _this = this;
        this.element = element;
        this.document = document;
        this.zone = zone;
        this.restrictHResizeMin = Number.MIN_SAFE_INTEGER;
        this.restrictHResizeMax = Number.MAX_SAFE_INTEGER;
        this.resizeEndTimeout = 0;
        this.resizeEnd = new Subject();
        this.resizeStart = new Subject();
        this.resize = new Subject();
        this._destroy = new Subject();
        this.resizeStart.pipe(map(function (event) { return event.clientX; }), takeUntil(this._destroy), switchMap(function (offset) {
            return _this.resize.pipe(map(function (event) { return event.clientX - offset; }), takeUntil(_this.resizeEnd), takeUntil(_this._destroy));
        })).subscribe(function (pos) {
            var /** @type {?} */ left = _this._left + pos;
            _this.left = left < _this.restrictHResizeMin ? _this.restrictHResizeMin + 'px' : left + 'px';
            if (left > _this.restrictHResizeMax) {
                _this.left = _this.restrictHResizeMax + 'px';
            }
            else if (left > _this.restrictHResizeMin) {
                _this.left = left + 'px';
            }
        });
    }
    /**
     * @return {?}
     */
    IgxColumnResizerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            fromEvent(_this.document.defaultView, 'mousedown').pipe(takeUntil(_this._destroy))
                .subscribe(function (res) { return _this.onMousedown(res); });
            fromEvent(_this.document.defaultView, 'mousemove').pipe(throttle(function () { return interval(0, animationFrameScheduler); }), takeUntil(_this._destroy)).subscribe(function (res) { return _this.onMousemove(res); });
            fromEvent(_this.document.defaultView, 'mouseup').pipe(takeUntil(_this._destroy))
                .subscribe(function (res) { return _this.onMouseup(res); });
        });
    };
    /**
     * @return {?}
     */
    IgxColumnResizerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroy.next(true);
        this._destroy.unsubscribe();
    };
    Object.defineProperty(IgxColumnResizerDirective.prototype, "left", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var _this = this;
            requestAnimationFrame(function () { return _this.element.nativeElement.style.left = val; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnResizerDirective.prototype.onMouseup = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        setTimeout(function () {
            _this.resizeEnd.next(event);
            _this.resizeEnd.complete();
        }, this.resizeEndTimeout);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnResizerDirective.prototype.onMousedown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.resizeStart.next(event);
        event.preventDefault();
        var /** @type {?} */ elStyle = this.document.defaultView.getComputedStyle(this.element.nativeElement);
        this._left = Number.isNaN(parseInt(elStyle.left, 10)) ? 0 : parseInt(elStyle.left, 10);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnResizerDirective.prototype.onMousemove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.resize.next(event);
        event.preventDefault();
    };
    IgxColumnResizerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxResizer]'
                },] },
    ];
    /** @nocollapse */
    IgxColumnResizerDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        { type: NgZone, },
    ]; };
    IgxColumnResizerDirective.propDecorators = {
        "restrictHResizeMin": [{ type: Input },],
        "restrictHResizeMax": [{ type: Input },],
        "resizeEndTimeout": [{ type: Input },],
        "resizeEnd": [{ type: Output },],
        "resizeStart": [{ type: Output },],
        "resize": [{ type: Output },],
    };
    return IgxColumnResizerDirective;
}());
export { IgxColumnResizerDirective };
function IgxColumnResizerDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnResizerDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnResizerDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxColumnResizerDirective.propDecorators;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.restrictHResizeMin;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.restrictHResizeMax;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resizeEndTimeout;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resizeEnd;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resizeStart;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resize;
    /** @type {?} */
    IgxColumnResizerDirective.prototype._left;
    /** @type {?} */
    IgxColumnResizerDirective.prototype._destroy;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.element;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.document;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.zone;
}
/**
 * @hidden
 */
var IgxCellTemplateDirective = /** @class */ (function () {
    function IgxCellTemplateDirective(template) {
        this.template = template;
    }
    IgxCellTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxCell]'
                },] },
    ];
    /** @nocollapse */
    IgxCellTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef, },
    ]; };
    return IgxCellTemplateDirective;
}());
export { IgxCellTemplateDirective };
function IgxCellTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCellTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCellTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxCellTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
var IgxCellHeaderTemplateDirective = /** @class */ (function () {
    function IgxCellHeaderTemplateDirective(template) {
        this.template = template;
    }
    IgxCellHeaderTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxHeader]'
                },] },
    ];
    /** @nocollapse */
    IgxCellHeaderTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef, },
    ]; };
    return IgxCellHeaderTemplateDirective;
}());
export { IgxCellHeaderTemplateDirective };
function IgxCellHeaderTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCellHeaderTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCellHeaderTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxCellHeaderTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
var IgxCellFooterTemplateDirective = /** @class */ (function () {
    function IgxCellFooterTemplateDirective(template) {
        this.template = template;
    }
    IgxCellFooterTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxFooter]'
                },] },
    ];
    /** @nocollapse */
    IgxCellFooterTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef, },
    ]; };
    return IgxCellFooterTemplateDirective;
}());
export { IgxCellFooterTemplateDirective };
function IgxCellFooterTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCellFooterTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCellFooterTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxCellFooterTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
var IgxCellEditorTemplateDirective = /** @class */ (function () {
    function IgxCellEditorTemplateDirective(template) {
        this.template = template;
    }
    IgxCellEditorTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxCellEditor]'
                },] },
    ];
    /** @nocollapse */
    IgxCellEditorTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef, },
    ]; };
    return IgxCellEditorTemplateDirective;
}());
export { IgxCellEditorTemplateDirective };
function IgxCellEditorTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCellEditorTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCellEditorTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxCellEditorTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
var IgxColumnMovingService = /** @class */ (function () {
    function IgxColumnMovingService() {
    }
    Object.defineProperty(IgxColumnMovingService.prototype, "column", {
        get: /**
         * @return {?}
         */
        function () {
            return this._column;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._column = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingService.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._icon = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxColumnMovingService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */ IgxColumnMovingService.ngInjectableDef = i0.defineInjectable({ factory: function IgxColumnMovingService_Factory() { return new IgxColumnMovingService(); }, token: IgxColumnMovingService, providedIn: "root" });
    return IgxColumnMovingService;
}());
export { IgxColumnMovingService };
function IgxColumnMovingService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnMovingService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnMovingService.ctorParameters;
    /** @type {?} */
    IgxColumnMovingService.prototype._icon;
    /** @type {?} */
    IgxColumnMovingService.prototype._column;
    /** @type {?} */
    IgxColumnMovingService.prototype.cancelDrop;
    /** @type {?} */
    IgxColumnMovingService.prototype.selection;
}
/** @enum {number} */
var DropPosition = {
    BeforeDropTarget: 0,
    AfterDropTarget: 1,
    None: 2,
};
export { DropPosition };
DropPosition[DropPosition.BeforeDropTarget] = "BeforeDropTarget";
DropPosition[DropPosition.AfterDropTarget] = "AfterDropTarget";
DropPosition[DropPosition.None] = "None";
/**
 * @hidden
 */
var IgxColumnMovingDragDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IgxColumnMovingDragDirective, _super);
    function IgxColumnMovingDragDirective(_element, _zone, _renderer, _cdr, cms) {
        var _this = _super.call(this, _cdr, _element, _zone, _renderer) || this;
        _this.cms = cms;
        _this._ghostImageClass = 'igx-grid__drag-ghost-image';
        _this._dragGhostImgIconClass = 'igx-grid__drag-ghost-image-icon';
        _this._dragGhostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';
        return _this;
    }
    Object.defineProperty(IgxColumnMovingDragDirective.prototype, "data", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._column = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDragDirective.prototype, "column", {
        get: /**
         * @return {?}
         */
        function () {
            return this._column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDragDirective.prototype, "draggable", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column && (this.column.movable || this.column.groupable);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDragDirective.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this.cms.icon;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDragDirective.prototype.onEscape = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.cms.cancelDrop = true;
        this.onPointerUp(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDragDirective.prototype.onPointerDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        this._removeOnDestroy = false;
        this.cms.column = this.column;
        this.ghostImageClass = this._ghostImageClass;
        _super.prototype.onPointerDown.call(this, event);
        this.column.grid.isColumnMoving = true;
        this.column.grid.cdr.detectChanges();
        var /** @type {?} */ currSelection = this.column.grid.selection.first_item(this.column.gridID + '-cell');
        if (currSelection) {
            this.cms.selection = {
                column: this.column.grid.columnList.toArray()[currSelection.columnID],
                rowID: currSelection.rowID
            };
        }
        var /** @type {?} */ args = {
            source: this.column
        };
        this.column.grid.onColumnMovingStart.emit(args);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDragDirective.prototype.onPointerMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        _super.prototype.onPointerMove.call(this, event);
        if (this._dragStarted && this._dragGhost && !this.column.grid.draggedColumn) {
            this.column.grid.draggedColumn = this.column;
            this.column.grid.cdr.detectChanges();
        }
        if (this.column.grid.isColumnMoving) {
            var /** @type {?} */ args = {
                source: this.column,
                cancel: false
            };
            this.column.grid.onColumnMoving.emit(args);
            if (args.cancel) {
                this.onEscape(event);
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDragDirective.prototype.onPointerUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.
        this.zone.run(function () {
            _super.prototype.onPointerUp.call(_this, event);
            _this.column.grid.isColumnMoving = false;
            _this.column.grid.draggedColumn = null;
            _this.column.grid.cdr.detectChanges();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDragDirective.prototype.createDragGhost = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        _super.prototype.createDragGhost.call(this, event);
        var /** @type {?} */ pageX, /** @type {?} */ pageY;
        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {
            pageX = event.pageX;
            pageY = event.pageY;
        }
        else {
            pageX = event.touches[0].pageX;
            pageY = event.touches[0].pageY;
        }
        this._dragGhost.style.height = null;
        this._dragGhost.style.minWidth = null;
        this._dragGhost.style.flexBasis = null;
        this._dragGhost.style.position = null;
        var /** @type {?} */ icon = document.createElement('i');
        var /** @type {?} */ text = document.createTextNode('block');
        icon.appendChild(text);
        icon.classList.add('material-icons');
        this.cms.icon = icon;
        if (!this.column.columnGroup) {
            this.renderer.addClass(icon, this._dragGhostImgIconClass);
            this._dragGhost.removeChild(this._dragGhost.children[2]);
            this._dragGhost.insertBefore(icon, this._dragGhost.children[1]);
            this.left = this._dragStartX = pageX - ((this._dragGhost.getBoundingClientRect().width / 3) * 2);
            this.top = this._dragStartY = pageY - ((this._dragGhost.getBoundingClientRect().height / 3) * 2);
        }
        else {
            this._dragGhost.removeChild(this._dragGhost.children[2]);
            this._dragGhost.removeChild(this._dragGhost.firstElementChild);
            this._dragGhost.removeChild(this._dragGhost.lastElementChild);
            this._dragGhost.insertBefore(icon, this._dragGhost.firstElementChild);
            this.renderer.addClass(icon, this._dragGhostImgIconGroupClass);
            this._dragGhost.children[1].style.paddingLeft = '0px';
            this.left = this._dragStartX = pageX - ((this._dragGhost.getBoundingClientRect().width / 3) * 2);
            this.top = this._dragStartY = pageY - ((this._dragGhost.getBoundingClientRect().height / 3) * 2);
        }
    };
    IgxColumnMovingDragDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxColumnMovingDrag]'
                },] },
    ];
    /** @nocollapse */
    IgxColumnMovingDragDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
        { type: Renderer2, },
        { type: ChangeDetectorRef, },
        { type: IgxColumnMovingService, },
    ]; };
    IgxColumnMovingDragDirective.propDecorators = {
        "data": [{ type: Input, args: ['igxColumnMovingDrag',] },],
        "onEscape": [{ type: HostListener, args: ['document:keydown.escape', ['$event'],] },],
    };
    return IgxColumnMovingDragDirective;
}(IgxDragDirective));
export { IgxColumnMovingDragDirective };
function IgxColumnMovingDragDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnMovingDragDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnMovingDragDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxColumnMovingDragDirective.propDecorators;
    /** @type {?} */
    IgxColumnMovingDragDirective.prototype._column;
    /** @type {?} */
    IgxColumnMovingDragDirective.prototype._ghostImageClass;
    /** @type {?} */
    IgxColumnMovingDragDirective.prototype._dragGhostImgIconClass;
    /** @type {?} */
    IgxColumnMovingDragDirective.prototype._dragGhostImgIconGroupClass;
    /** @type {?} */
    IgxColumnMovingDragDirective.prototype.cms;
}
/**
 * @hidden
 */
var IgxColumnMovingDropDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IgxColumnMovingDropDirective, _super);
    function IgxColumnMovingDropDirective(elementRef, renderer, zone, cms) {
        var _this = _super.call(this, elementRef, renderer, zone) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.zone = zone;
        _this.cms = cms;
        _this._dropIndicator = null;
        _this._lastDropIndicator = null;
        _this._dragLeave = new Subject();
        _this._dropIndicatorClass = 'igx-grid__th-drop-indicator--active';
        return _this;
    }
    Object.defineProperty(IgxColumnMovingDropDirective.prototype, "data", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val instanceof IgxColumnComponent) {
                this._column = val;
            }
            if (val instanceof IgxGridForOfDirective) {
                this._hVirtDir = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDropDirective.prototype, "column", {
        get: /**
         * @return {?}
         */
        function () {
            return this._column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDropDirective.prototype, "isDropTarget", {
        get: /**
         * @return {?}
         */
        function () {
            return this._column && this._column.grid.hasMovableColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDropDirective.prototype, "horizontalScroll", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._hVirtDir) {
                return this._hVirtDir;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxColumnMovingDropDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._dragLeave.next(true);
        this._dragLeave.complete();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDropDirective.prototype.onDragOver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isDropTarget &&
            this.cms.column !== this.column &&
            this.cms.column.level === this.column.level &&
            this.cms.column.parent === this.column.parent) {
            if (this._lastDropIndicator) {
                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);
            }
            var /** @type {?} */ pos = this.elementRef.nativeElement.getBoundingClientRect().left + parseFloat(this.column.width) / 2;
            if (event.detail.pageX < pos) {
                this._dropPos = DropPosition.BeforeDropTarget;
                this._lastDropIndicator = this._dropIndicator = this.elementRef.nativeElement.firstElementChild;
            }
            else {
                this._dropPos = DropPosition.AfterDropTarget;
                this._lastDropIndicator = this._dropIndicator = this.elementRef.nativeElement.lastElementChild;
            }
            if (this.cms.icon.innerText !== 'block') {
                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDropDirective.prototype.onDragEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        var /** @type {?} */ drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        if (this.isDropTarget &&
            this.cms.column !== this.column &&
            this.cms.column.level === this.column.level &&
            this.cms.column.parent === this.column.parent) {
            if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {
                this.cms.icon.innerText = 'swap_horiz';
            }
            if (!this.cms.column.pinned && this.column.pinned) {
                var /** @type {?} */ nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);
                if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {
                    this.cms.icon.innerText = 'lock';
                }
                else {
                    this.cms.icon.innerText = 'block';
                }
            }
        }
        else {
            this.cms.icon.innerText = 'block';
        }
        if (this.horizontalScroll) {
            this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';
            interval(100).pipe(takeUntil(this._dragLeave)).subscribe(function (val) {
                event.target.id === 'right' ? _this.horizontalScroll.getHorizontalScroll().scrollLeft += 15 :
                    _this.horizontalScroll.getHorizontalScroll().scrollLeft -= 15;
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDropDirective.prototype.onDragLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        this.cms.icon.innerText = 'block';
        if (this._dropIndicator) {
            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);
        }
        if (this.horizontalScroll) {
            this._dragLeave.next(true);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDropDirective.prototype.onDragDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        var /** @type {?} */ drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        if (this.horizontalScroll) {
            this._dragLeave.next(true);
        }
        if (this.isDropTarget) {
            var /** @type {?} */ args = {
                source: this.cms.column,
                target: this.column
            };
            var /** @type {?} */ nextPinnedWidth = void 0;
            if (this.column.pinned && !this.cms.column.pinned) {
                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);
            }
            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||
                this.column.level !== this.cms.column.level ||
                this.column.parent !== this.cms.column.parent ||
                this.cms.cancelDrop) {
                this.cms.cancelDrop = false;
                this.column.grid.onColumnMovingEnd.emit(args);
                return;
            }
            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);
            if (this.cms.selection && this.cms.selection.column) {
                var /** @type {?} */ colID = this.column.grid.columnList.toArray().indexOf(this.cms.selection.column);
                this.column.grid.selection.set(this.column.gridID + '-cell', new Set([{
                        rowID: this.cms.selection.rowID,
                        columnID: colID
                    }]));
                var /** @type {?} */ cell = this.column.grid.getCellByKey(this.cms.selection.rowID, this.cms.selection.column.field);
                if (cell) {
                    cell.nativeElement.focus();
                }
                this.cms.selection = null;
            }
            this.column.grid.draggedColumn = null;
            this.column.grid.cdr.detectChanges();
        }
    };
    IgxColumnMovingDropDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxColumnMovingDrop]'
                },] },
    ];
    /** @nocollapse */
    IgxColumnMovingDropDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: NgZone, },
        { type: IgxColumnMovingService, },
    ]; };
    IgxColumnMovingDropDirective.propDecorators = {
        "data": [{ type: Input, args: ['igxColumnMovingDrop',] },],
    };
    return IgxColumnMovingDropDirective;
}(IgxDropDirective));
export { IgxColumnMovingDropDirective };
function IgxColumnMovingDropDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnMovingDropDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnMovingDropDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxColumnMovingDropDirective.propDecorators;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._dropPos;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._dropIndicator;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._lastDropIndicator;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._column;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._hVirtDir;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._dragLeave;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._dropIndicatorClass;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype.elementRef;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype.renderer;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype.zone;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype.cms;
}
/**
 * @hidden
 */
var IgxDatePipeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxDatePipeComponent, _super);
    function IgxDatePipeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IgxDatePipeComponent.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value && value instanceof Date) {
            return _super.prototype.transform.call(this, value);
        }
        else {
            return value;
        }
    };
    IgxDatePipeComponent.decorators = [
        { type: Pipe, args: [{
                    name: 'igxdate'
                },] },
    ];
    return IgxDatePipeComponent;
}(DatePipe));
export { IgxDatePipeComponent };
function IgxDatePipeComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDatePipeComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDatePipeComponent.ctorParameters;
}
/**
 * @hidden
 */
var IgxDecimalPipeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxDecimalPipeComponent, _super);
    function IgxDecimalPipeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IgxDecimalPipeComponent.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value && typeof value === 'number') {
            return _super.prototype.transform.call(this, value);
        }
        else {
            return value;
        }
    };
    IgxDecimalPipeComponent.decorators = [
        { type: Pipe, args: [{
                    name: 'igxdecimal'
                },] },
    ];
    return IgxDecimalPipeComponent;
}(DecimalPipe));
export { IgxDecimalPipeComponent };
function IgxDecimalPipeComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDecimalPipeComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDecimalPipeComponent.ctorParameters;
}
/**
 * @record
 */
export function ContainerPositionSettings() { }
function ContainerPositionSettings_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    ContainerPositionSettings.prototype.container;
}
var ContainerPositioningStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(ContainerPositioningStrategy, _super);
    function ContainerPositioningStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isTop = false;
        _this.isTopInitialPosition = null;
        return _this;
    }
    /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    ContainerPositioningStrategy.prototype.position = /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    function (contentElement, size, document, initialCall) {
        var /** @type {?} */ container = this.settings.container; // grid.tbody
        var /** @type {?} */ target = /** @type {?} */ (this.settings.target); // current grid.row
        _super.prototype.position.call(this, contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);
        // Position of the overlay depends on the available space in the grid.
        // If the bottom space is not enough then the the row overlay will show at the top of the row.
        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),
        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).
        this.isTop = this.isTopInitialPosition !== null ?
            this.isTopInitialPosition :
            container.clientHeight <
                target.offsetTop + target.getBoundingClientRect().height + contentElement.getBoundingClientRect().height;
        this.settings.verticalStartPoint = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;
        var /** @type {?} */ startPoint = getPointFromPositionsSettings(this.settings, contentElement.parentElement);
        contentElement.style.top = startPoint.y + (this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom) * size.height + 'px';
        contentElement.style.width = target.clientWidth + 'px';
    };
    return ContainerPositioningStrategy;
}(ConnectedPositioningStrategy));
export { ContainerPositioningStrategy };
function ContainerPositioningStrategy_tsickle_Closure_declarations() {
    /** @type {?} */
    ContainerPositioningStrategy.prototype.isTop;
    /** @type {?} */
    ContainerPositioningStrategy.prototype.isTopInitialPosition;
    /** @type {?} */
    ContainerPositioningStrategy.prototype.settings;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5jb21tb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL2dyaWQuY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbEUsT0FBTyxFQUNILGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUVWLFlBQVksRUFDWixNQUFNLEVBQ04sVUFBVSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBR04sTUFBTSxFQUNOLElBQUksRUFFSixTQUFTLEVBQ1QsV0FBVyxFQUNkLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN6RixPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDL0YsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFFOUUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxpQkFBaUIsRUFBb0IsTUFBTSwrQkFBK0IsQ0FBQzs7Ozs7O0lBK0IvRyxtQ0FBbUIsT0FBbUIsRUFBMkIsVUFBaUIsSUFBWTtRQUE5RixpQkFzQkM7UUF0QmtCLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBMkIsYUFBUSxHQUFSLFFBQVE7UUFBUyxTQUFJLEdBQUosSUFBSSxDQUFRO2tDQXBCMUQsTUFBTSxDQUFDLGdC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LENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQy9ILGNBQWMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0tBQzFEO3VDQWxtQkw7RUE2a0JrRCw0QkFBNEIsRUFzQjdFLENBQUE7QUF0QkQsd0NBc0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQsIERhdGVQaXBlLCBEZWNpbWFsUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5qZWN0YWJsZSxcbiAgICBJbnB1dCxcbiAgICBOZ1pvbmUsXG4gICAgT25EZXN0cm95LFxuICAgIE9uSW5pdCxcbiAgICBPdXRwdXQsXG4gICAgUGlwZSxcbiAgICBQaXBlVHJhbnNmb3JtLFxuICAgIFJlbmRlcmVyMixcbiAgICBUZW1wbGF0ZVJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLCBmcm9tRXZlbnQsIGludGVydmFsLCBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHN3aXRjaE1hcCwgdGFrZVVudGlsLCB0aHJvdHRsZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IElneENvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hEcmFnRGlyZWN0aXZlLCBJZ3hEcm9wRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9kcmFnZHJvcC9kcmFnZHJvcC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4R3JpZEZvck9mRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9mb3Itb2YvZm9yX29mLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBTb3J0aW5nRGlyZWN0aW9uIH0gZnJvbSAnLi4vZGF0YS1vcGVyYXRpb25zL3NvcnRpbmctZXhwcmVzc2lvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ29ubmVjdGVkUG9zaXRpb25pbmdTdHJhdGVneSB9IGZyb20gJy4uL3NlcnZpY2VzJztcbmltcG9ydCB7IGdldFBvaW50RnJvbVBvc2l0aW9uc1NldHRpbmdzLCBWZXJ0aWNhbEFsaWdubWVudCwgUG9zaXRpb25TZXR0aW5ncyB9IGZyb20gJy4uL3NlcnZpY2VzL292ZXJsYXkvdXRpbGl0aWVzJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFJlc2l6ZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDb2x1bW5SZXNpemVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgcmVzdHJpY3RIUmVzaXplTWluOiBudW1iZXIgPSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHJlc3RyaWN0SFJlc2l6ZU1heDogbnVtYmVyID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyByZXNpemVFbmRUaW1lb3V0ID0gMDtcblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyByZXNpemVFbmQgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgcmVzaXplU3RhcnQgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgcmVzaXplID0gbmV3IFN1YmplY3Q8YW55PigpO1xuXG4gICAgcHJpdmF0ZSBfbGVmdDtcbiAgICBwcml2YXRlIF9kZXN0cm95ID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50OiBFbGVtZW50UmVmLCBASW5qZWN0KERPQ1VNRU5UKSBwdWJsaWMgZG9jdW1lbnQsIHB1YmxpYyB6b25lOiBOZ1pvbmUpIHtcblxuICAgICAgICB0aGlzLnJlc2l6ZVN0YXJ0LnBpcGUoXG4gICAgICAgICAgICBtYXAoKGV2ZW50KSA9PiBldmVudC5jbGllbnRYKSxcbiAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLl9kZXN0cm95KSxcbiAgICAgICAgICAgIHN3aXRjaE1hcCgob2Zmc2V0KSA9PiB0aGlzLnJlc2l6ZS5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgoZXZlbnQpID0+IGV2ZW50LmNsaWVudFggLSBvZmZzZXQpLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLnJlc2l6ZUVuZCksXG4gICAgICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3kpXG4gICAgICAgICAgICApKVxuICAgICAgICApLnN1YnNjcmliZSgocG9zKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsZWZ0ID0gdGhpcy5fbGVmdCArIHBvcztcblxuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdCA8IHRoaXMucmVzdHJpY3RIUmVzaXplTWluID8gdGhpcy5yZXN0cmljdEhSZXNpemVNaW4gKyAncHgnIDogbGVmdCArICdweCc7XG5cbiAgICAgICAgICAgIGlmIChsZWZ0ID4gdGhpcy5yZXN0cmljdEhSZXNpemVNYXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnQgPSB0aGlzLnJlc3RyaWN0SFJlc2l6ZU1heCArICdweCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxlZnQgPiB0aGlzLnJlc3RyaWN0SFJlc2l6ZU1pbikge1xuICAgICAgICAgICAgICAgIHRoaXMubGVmdCA9IGxlZnQgKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICAgICAgZnJvbUV2ZW50KHRoaXMuZG9jdW1lbnQuZGVmYXVsdFZpZXcsICdtb3VzZWRvd24nKS5waXBlKHRha2VVbnRpbCh0aGlzLl9kZXN0cm95KSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKChyZXMpID0+IHRoaXMub25Nb3VzZWRvd24ocmVzKSk7XG5cbiAgICAgICAgICAgIGZyb21FdmVudCh0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3LCAnbW91c2Vtb3ZlJykucGlwZShcbiAgICAgICAgICAgICAgICB0aHJvdHRsZSgoKSA9PiBpbnRlcnZhbCgwLCBhbmltYXRpb25GcmFtZVNjaGVkdWxlcikpLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLl9kZXN0cm95KVxuICAgICAgICAgICAgKS5zdWJzY3JpYmUoKHJlcykgPT4gdGhpcy5vbk1vdXNlbW92ZShyZXMpKTtcblxuICAgICAgICAgICAgZnJvbUV2ZW50KHRoaXMuZG9jdW1lbnQuZGVmYXVsdFZpZXcsICdtb3VzZXVwJykucGlwZSh0YWtlVW50aWwodGhpcy5fZGVzdHJveSkpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgocmVzKSA9PiB0aGlzLm9uTW91c2V1cChyZXMpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3kubmV4dCh0cnVlKTtcbiAgICAgICAgdGhpcy5fZGVzdHJveS51bnN1YnNjcmliZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgbGVmdCh2YWwpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnN0eWxlLmxlZnQgPSB2YWwpO1xuICAgIH1cblxuICAgIG9uTW91c2V1cChldmVudCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplRW5kLm5leHQoZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5yZXNpemVFbmQuY29tcGxldGUoKTtcbiAgICAgICAgfSwgdGhpcy5yZXNpemVFbmRUaW1lb3V0KTtcbiAgICB9XG5cbiAgICBvbk1vdXNlZG93bihldmVudCkge1xuICAgICAgICB0aGlzLnJlc2l6ZVN0YXJ0Lm5leHQoZXZlbnQpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGNvbnN0IGVsU3R5bGUgPSB0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICB0aGlzLl9sZWZ0ID0gTnVtYmVyLmlzTmFOKHBhcnNlSW50KGVsU3R5bGUubGVmdCwgMTApKSA/IDAgOiBwYXJzZUludChlbFN0eWxlLmxlZnQsIDEwKTtcbiAgICB9XG5cbiAgICBvbk1vdXNlbW92ZShldmVudCkge1xuICAgICAgICB0aGlzLnJlc2l6ZS5uZXh0KGV2ZW50KTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Q2VsbF0nXG59KVxuZXhwb3J0IGNsYXNzIElneENlbGxUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEhlYWRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIElneENlbGxIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxuXG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Rm9vdGVyXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q2VsbEZvb3RlclRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Q2VsbEVkaXRvcl0nXG59KVxuZXhwb3J0IGNsYXNzIElneENlbGxFZGl0b3JUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q29sdW1uTW92aW5nU2VydmljZSB7XG4gICAgcHJpdmF0ZSBfaWNvbjogYW55O1xuICAgIHByaXZhdGUgX2NvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50O1xuXG4gICAgcHVibGljIGNhbmNlbERyb3A6IGJvb2xlYW47XG4gICAgcHVibGljIHNlbGVjdGlvbjoge1xuICAgICAgICBjb2x1bW46IElneENvbHVtbkNvbXBvbmVudCxcbiAgICAgICAgcm93SUQ6IGFueVxuICAgIH07XG5cbiAgICBnZXQgY29sdW1uKCk6IElneENvbHVtbkNvbXBvbmVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2x1bW47XG4gICAgfVxuICAgIHNldCBjb2x1bW4odmFsOiBJZ3hDb2x1bW5Db21wb25lbnQpIHtcbiAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgdGhpcy5fY29sdW1uID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGljb24oKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ljb247XG4gICAgfVxuICAgIHNldCBpY29uKHZhbDogYW55KSB7XG4gICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2ljb24gPSB2YWw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZW51bSBEcm9wUG9zaXRpb24ge1xuICAgIEJlZm9yZURyb3BUYXJnZXQsXG4gICAgQWZ0ZXJEcm9wVGFyZ2V0LFxuICAgIE5vbmVcbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneENvbHVtbk1vdmluZ0RyYWddJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDb2x1bW5Nb3ZpbmdEcmFnRGlyZWN0aXZlIGV4dGVuZHMgSWd4RHJhZ0RpcmVjdGl2ZSB7XG5cbiAgICBASW5wdXQoJ2lneENvbHVtbk1vdmluZ0RyYWcnKVxuICAgIHNldCBkYXRhKHZhbDogSWd4Q29sdW1uQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuX2NvbHVtbiA9IHZhbDtcbiAgICB9XG5cbiAgICBnZXQgY29sdW1uKCk6IElneENvbHVtbkNvbXBvbmVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2x1bW47XG4gICAgfVxuXG4gICAgZ2V0IGRyYWdnYWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uICYmICh0aGlzLmNvbHVtbi5tb3ZhYmxlIHx8IHRoaXMuY29sdW1uLmdyb3VwYWJsZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBpY29uKCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY21zLmljb247XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQ7XG4gICAgcHJpdmF0ZSBfZ2hvc3RJbWFnZUNsYXNzID0gJ2lneC1ncmlkX19kcmFnLWdob3N0LWltYWdlJztcbiAgICBwcml2YXRlIF9kcmFnR2hvc3RJbWdJY29uQ2xhc3MgPSAnaWd4LWdyaWRfX2RyYWctZ2hvc3QtaW1hZ2UtaWNvbic7XG4gICAgcHJpdmF0ZSBfZHJhZ0dob3N0SW1nSWNvbkdyb3VwQ2xhc3MgPSAnaWd4LWdyaWRfX2RyYWctZ2hvc3QtaW1hZ2UtaWNvbi1ncm91cCc7XG5cbiAgICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDprZXlkb3duLmVzY2FwZScsIFsnJGV2ZW50J10pXG4gICAgcHVibGljIG9uRXNjYXBlKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuY21zLmNhbmNlbERyb3AgPSB0cnVlO1xuICAgICAgICB0aGlzLm9uUG9pbnRlclVwKGV2ZW50KTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgX2VsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgICAgIF96b25lOiBOZ1pvbmUsXG4gICAgICAgIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICAgICBfY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgcHJpdmF0ZSBjbXM6IElneENvbHVtbk1vdmluZ1NlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKF9jZHIsIF9lbGVtZW50LCBfem9uZSwgX3JlbmRlcmVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25Qb2ludGVyRG93bihldmVudCkge1xuXG4gICAgICAgIGlmICghdGhpcy5kcmFnZ2FibGUgfHwgZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZHJhZ2dhYmxlJykgPT09ICdmYWxzZScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIHRoaXMuX3JlbW92ZU9uRGVzdHJveSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNtcy5jb2x1bW4gPSB0aGlzLmNvbHVtbjtcbiAgICAgICAgdGhpcy5naG9zdEltYWdlQ2xhc3MgPSB0aGlzLl9naG9zdEltYWdlQ2xhc3M7XG5cbiAgICAgICAgc3VwZXIub25Qb2ludGVyRG93bihldmVudCk7XG5cbiAgICAgICAgdGhpcy5jb2x1bW4uZ3JpZC5pc0NvbHVtbk1vdmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuY29sdW1uLmdyaWQuY2RyLmRldGVjdENoYW5nZXMoKTtcblxuICAgICAgICBjb25zdCBjdXJyU2VsZWN0aW9uID0gdGhpcy5jb2x1bW4uZ3JpZC5zZWxlY3Rpb24uZmlyc3RfaXRlbSh0aGlzLmNvbHVtbi5ncmlkSUQgKyAnLWNlbGwnKTtcbiAgICAgICAgaWYgKGN1cnJTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY21zLnNlbGVjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uLmdyaWQuY29sdW1uTGlzdC50b0FycmF5KClbY3VyclNlbGVjdGlvbi5jb2x1bW5JRF0sXG4gICAgICAgICAgICAgICAgcm93SUQ6IGN1cnJTZWxlY3Rpb24ucm93SURcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgc291cmNlOiB0aGlzLmNvbHVtblxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvbHVtbi5ncmlkLm9uQ29sdW1uTW92aW5nU3RhcnQuZW1pdChhcmdzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25Qb2ludGVyTW92ZShldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzdXBlci5vblBvaW50ZXJNb3ZlKGV2ZW50KTtcblxuICAgICAgICBpZiAodGhpcy5fZHJhZ1N0YXJ0ZWQgJiYgdGhpcy5fZHJhZ0dob3N0ICYmICF0aGlzLmNvbHVtbi5ncmlkLmRyYWdnZWRDb2x1bW4pIHtcbiAgICAgICAgICAgIHRoaXMuY29sdW1uLmdyaWQuZHJhZ2dlZENvbHVtbiA9IHRoaXMuY29sdW1uO1xuICAgICAgICAgICAgdGhpcy5jb2x1bW4uZ3JpZC5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY29sdW1uLmdyaWQuaXNDb2x1bW5Nb3ZpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgc291cmNlOiB0aGlzLmNvbHVtbixcbiAgICAgICAgICAgICAgICBjYW5jZWw6IGZhbHNlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5jb2x1bW4uZ3JpZC5vbkNvbHVtbk1vdmluZy5lbWl0KGFyZ3MpO1xuXG4gICAgICAgICAgICBpZiAoYXJncy5jYW5jZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRXNjYXBlKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBvblBvaW50ZXJVcChldmVudCkge1xuICAgICAgICAvLyBSdW4gaXQgZXhwbGljaXRseSBpbnNpZGUgdGhlIHpvbmUgYmVjYXVzZSBzb21ldGltZXMgb25Qb2ludGVyVXAgZXhlY3V0ZXMgYWZ0ZXIgdGhlIGNvZGUgYmVsb3cuXG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgc3VwZXIub25Qb2ludGVyVXAoZXZlbnQpO1xuXG4gICAgICAgICAgICB0aGlzLmNvbHVtbi5ncmlkLmlzQ29sdW1uTW92aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmNvbHVtbi5ncmlkLmRyYWdnZWRDb2x1bW4gPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5jb2x1bW4uZ3JpZC5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY3JlYXRlRHJhZ0dob3N0KGV2ZW50KSB7XG4gICAgICAgIHN1cGVyLmNyZWF0ZURyYWdHaG9zdChldmVudCk7XG5cbiAgICAgICAgbGV0IHBhZ2VYLCBwYWdlWTtcbiAgICAgICAgaWYgKHRoaXMucG9pbnRlckV2ZW50c0VuYWJsZWQgfHwgIXRoaXMudG91Y2hFdmVudHNFbmFibGVkKSB7XG4gICAgICAgICAgICBwYWdlWCA9IGV2ZW50LnBhZ2VYO1xuICAgICAgICAgICAgcGFnZVkgPSBldmVudC5wYWdlWTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhZ2VYID0gZXZlbnQudG91Y2hlc1swXS5wYWdlWDtcbiAgICAgICAgICAgIHBhZ2VZID0gZXZlbnQudG91Y2hlc1swXS5wYWdlWTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RyYWdHaG9zdC5zdHlsZS5oZWlnaHQgPSBudWxsO1xuICAgICAgICB0aGlzLl9kcmFnR2hvc3Quc3R5bGUubWluV2lkdGggPSBudWxsO1xuICAgICAgICB0aGlzLl9kcmFnR2hvc3Quc3R5bGUuZmxleEJhc2lzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZHJhZ0dob3N0LnN0eWxlLnBvc2l0aW9uID0gbnVsbDtcblxuICAgICAgICBjb25zdCBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuICAgICAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ2Jsb2NrJyk7XG4gICAgICAgIGljb24uYXBwZW5kQ2hpbGQodGV4dCk7XG5cbiAgICAgICAgaWNvbi5jbGFzc0xpc3QuYWRkKCdtYXRlcmlhbC1pY29ucycpO1xuICAgICAgICB0aGlzLmNtcy5pY29uID0gaWNvbjtcblxuICAgICAgICBpZiAoIXRoaXMuY29sdW1uLmNvbHVtbkdyb3VwKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGljb24sIHRoaXMuX2RyYWdHaG9zdEltZ0ljb25DbGFzcyk7XG5cbiAgICAgICAgICAgIHRoaXMuX2RyYWdHaG9zdC5yZW1vdmVDaGlsZCh0aGlzLl9kcmFnR2hvc3QuY2hpbGRyZW5bMl0pO1xuICAgICAgICAgICAgdGhpcy5fZHJhZ0dob3N0Lmluc2VydEJlZm9yZShpY29uLCB0aGlzLl9kcmFnR2hvc3QuY2hpbGRyZW5bMV0pO1xuXG4gICAgICAgICAgICB0aGlzLmxlZnQgPSB0aGlzLl9kcmFnU3RhcnRYID0gcGFnZVggLSAoKHRoaXMuX2RyYWdHaG9zdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAvIDMpICogMik7XG4gICAgICAgICAgICB0aGlzLnRvcCA9IHRoaXMuX2RyYWdTdGFydFkgPSBwYWdlWSAtICgodGhpcy5fZHJhZ0dob3N0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCAvIDMpICogMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9kcmFnR2hvc3QucmVtb3ZlQ2hpbGQodGhpcy5fZHJhZ0dob3N0LmNoaWxkcmVuWzJdKTtcbiAgICAgICAgICAgIHRoaXMuX2RyYWdHaG9zdC5yZW1vdmVDaGlsZCh0aGlzLl9kcmFnR2hvc3QuZmlyc3RFbGVtZW50Q2hpbGQpO1xuICAgICAgICAgICAgdGhpcy5fZHJhZ0dob3N0LnJlbW92ZUNoaWxkKHRoaXMuX2RyYWdHaG9zdC5sYXN0RWxlbWVudENoaWxkKTtcbiAgICAgICAgICAgIHRoaXMuX2RyYWdHaG9zdC5pbnNlcnRCZWZvcmUoaWNvbiwgdGhpcy5fZHJhZ0dob3N0LmZpcnN0RWxlbWVudENoaWxkKTtcblxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhpY29uLCB0aGlzLl9kcmFnR2hvc3RJbWdJY29uR3JvdXBDbGFzcyk7XG4gICAgICAgICAgICB0aGlzLl9kcmFnR2hvc3QuY2hpbGRyZW5bMV0uc3R5bGUucGFkZGluZ0xlZnQgPSAnMHB4JztcblxuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gdGhpcy5fZHJhZ1N0YXJ0WCA9IHBhZ2VYIC0gKCh0aGlzLl9kcmFnR2hvc3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLyAzKSAqIDIpO1xuICAgICAgICAgICAgdGhpcy50b3AgPSB0aGlzLl9kcmFnU3RhcnRZID0gcGFnZVkgLSAoKHRoaXMuX2RyYWdHaG9zdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgLyAzKSAqIDIpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneENvbHVtbk1vdmluZ0Ryb3BdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDb2x1bW5Nb3ZpbmdEcm9wRGlyZWN0aXZlIGV4dGVuZHMgSWd4RHJvcERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgQElucHV0KCdpZ3hDb2x1bW5Nb3ZpbmdEcm9wJylcbiAgICBzZXQgZGF0YSh2YWw6IGFueSkge1xuICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgSWd4Q29sdW1uQ29tcG9uZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9jb2x1bW4gPSB2YWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgSWd4R3JpZEZvck9mRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl9oVmlydERpciA9IHZhbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBjb2x1bW4oKTogSWd4Q29sdW1uQ29tcG9uZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbjtcbiAgICB9XG5cbiAgICBnZXQgaXNEcm9wVGFyZ2V0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1uICYmIHRoaXMuX2NvbHVtbi5ncmlkLmhhc01vdmFibGVDb2x1bW5zO1xuICAgIH1cblxuICAgIGdldCBob3Jpem9udGFsU2Nyb2xsKCk6IGFueSB7XG4gICAgICAgIGlmICh0aGlzLl9oVmlydERpcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hWaXJ0RGlyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZHJvcFBvczogRHJvcFBvc2l0aW9uO1xuICAgIHByaXZhdGUgX2Ryb3BJbmRpY2F0b3I6IGFueSA9IG51bGw7XG4gICAgcHJpdmF0ZSBfbGFzdERyb3BJbmRpY2F0b3I6IGFueSA9IG51bGw7XG4gICAgcHJpdmF0ZSBfY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQ7XG4gICAgcHJpdmF0ZSBfaFZpcnREaXI6IElneEdyaWRGb3JPZkRpcmVjdGl2ZTxhbnk+O1xuICAgIHByaXZhdGUgX2RyYWdMZWF2ZSA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gICAgcHJpdmF0ZSBfZHJvcEluZGljYXRvckNsYXNzID0gJ2lneC1ncmlkX190aC1kcm9wLWluZGljYXRvci0tYWN0aXZlJztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIHpvbmU6IE5nWm9uZSwgcHJpdmF0ZSBjbXM6IElneENvbHVtbk1vdmluZ1NlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgcmVuZGVyZXIsIHpvbmUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fZHJhZ0xlYXZlLm5leHQodHJ1ZSk7XG4gICAgICAgIHRoaXMuX2RyYWdMZWF2ZS5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbkRyYWdPdmVyKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmlzRHJvcFRhcmdldCAmJlxuICAgICAgICAgICAgdGhpcy5jbXMuY29sdW1uICE9PSB0aGlzLmNvbHVtbiAmJlxuICAgICAgICAgICAgdGhpcy5jbXMuY29sdW1uLmxldmVsID09PSB0aGlzLmNvbHVtbi5sZXZlbCAmJlxuICAgICAgICAgICAgdGhpcy5jbXMuY29sdW1uLnBhcmVudCA9PT0gdGhpcy5jb2x1bW4ucGFyZW50KSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0RHJvcEluZGljYXRvcikge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5fZHJvcEluZGljYXRvciwgdGhpcy5fZHJvcEluZGljYXRvckNsYXNzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcG9zID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCArIHBhcnNlRmxvYXQodGhpcy5jb2x1bW4ud2lkdGgpIC8gMjtcblxuICAgICAgICAgICAgaWYgKGV2ZW50LmRldGFpbC5wYWdlWCA8IHBvcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3BQb3MgPSBEcm9wUG9zaXRpb24uQmVmb3JlRHJvcFRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0RHJvcEluZGljYXRvciA9IHRoaXMuX2Ryb3BJbmRpY2F0b3IgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHJvcFBvcyA9IERyb3BQb3NpdGlvbi5BZnRlckRyb3BUYXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdERyb3BJbmRpY2F0b3IgPSB0aGlzLl9kcm9wSW5kaWNhdG9yID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQubGFzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuY21zLmljb24uaW5uZXJUZXh0ICE9PSAnYmxvY2snKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLl9kcm9wSW5kaWNhdG9yLCB0aGlzLl9kcm9wSW5kaWNhdG9yQ2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uRHJhZ0VudGVyKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGRyYWcgPSBldmVudC5kZXRhaWwub3duZXI7XG4gICAgICAgIGlmICghKGRyYWcgaW5zdGFuY2VvZiBJZ3hDb2x1bW5Nb3ZpbmdEcmFnRGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNEcm9wVGFyZ2V0ICYmXG4gICAgICAgICAgICB0aGlzLmNtcy5jb2x1bW4gIT09IHRoaXMuY29sdW1uICYmXG4gICAgICAgICAgICB0aGlzLmNtcy5jb2x1bW4ubGV2ZWwgPT09IHRoaXMuY29sdW1uLmxldmVsICYmXG4gICAgICAgICAgICB0aGlzLmNtcy5jb2x1bW4ucGFyZW50ID09PSB0aGlzLmNvbHVtbi5wYXJlbnQpIHtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb2x1bW4ucGlubmVkIHx8ICh0aGlzLmNvbHVtbi5waW5uZWQgJiYgdGhpcy5jbXMuY29sdW1uLnBpbm5lZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbXMuaWNvbi5pbm5lclRleHQgPSAnc3dhcF9ob3Jpeic7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNtcy5jb2x1bW4ucGlubmVkICYmIHRoaXMuY29sdW1uLnBpbm5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0UGlubmVkV2lkdGggPSB0aGlzLmNvbHVtbi5ncmlkLmdldFBpbm5lZFdpZHRoKHRydWUpICsgcGFyc2VGbG9hdCh0aGlzLmNtcy5jb2x1bW4ud2lkdGgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0UGlubmVkV2lkdGggPD0gdGhpcy5jb2x1bW4uZ3JpZC5jYWxjUGlubmVkQ29udGFpbmVyTWF4V2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY21zLmljb24uaW5uZXJUZXh0ID0gJ2xvY2snO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbXMuaWNvbi5pbm5lclRleHQgPSAnYmxvY2snO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNtcy5pY29uLmlubmVyVGV4dCA9ICdibG9jayc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmhvcml6b250YWxTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNtcy5pY29uLmlubmVyVGV4dCA9IGV2ZW50LnRhcmdldC5pZCA9PT0gJ3JpZ2h0JyA/ICdhcnJvd19mb3J3YXJkJyA6ICdhcnJvd19iYWNrJztcblxuICAgICAgICAgICAgICAgIGludGVydmFsKDEwMCkucGlwZSh0YWtlVW50aWwodGhpcy5fZHJhZ0xlYXZlKSkuc3Vic2NyaWJlKCh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmlkID09PSAncmlnaHQnID8gdGhpcy5ob3Jpem9udGFsU2Nyb2xsLmdldEhvcml6b250YWxTY3JvbGwoKS5zY3JvbGxMZWZ0ICs9IDE1IDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaG9yaXpvbnRhbFNjcm9sbC5nZXRIb3Jpem9udGFsU2Nyb2xsKCkuc2Nyb2xsTGVmdCAtPSAxNTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25EcmFnTGVhdmUoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgZHJhZyA9IGV2ZW50LmRldGFpbC5vd25lcjtcbiAgICAgICAgaWYgKCEoZHJhZyBpbnN0YW5jZW9mIElneENvbHVtbk1vdmluZ0RyYWdEaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNtcy5pY29uLmlubmVyVGV4dCA9ICdibG9jayc7XG5cbiAgICAgICAgaWYgKHRoaXMuX2Ryb3BJbmRpY2F0b3IpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5fZHJvcEluZGljYXRvciwgdGhpcy5fZHJvcEluZGljYXRvckNsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmhvcml6b250YWxTY3JvbGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2RyYWdMZWF2ZS5uZXh0KHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uRHJhZ0Ryb3AoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgZHJhZyA9IGV2ZW50LmRldGFpbC5vd25lcjtcbiAgICAgICAgaWYgKCEoZHJhZyBpbnN0YW5jZW9mIElneENvbHVtbk1vdmluZ0RyYWdEaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5ob3Jpem9udGFsU2Nyb2xsKSB7XG4gICAgICAgICAgICB0aGlzLl9kcmFnTGVhdmUubmV4dCh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzRHJvcFRhcmdldCkge1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMuY21zLmNvbHVtbixcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMuY29sdW1uXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgbmV4dFBpbm5lZFdpZHRoO1xuICAgICAgICAgICAgaWYgKHRoaXMuY29sdW1uLnBpbm5lZCAmJiAhdGhpcy5jbXMuY29sdW1uLnBpbm5lZCkge1xuICAgICAgICAgICAgICAgIG5leHRQaW5uZWRXaWR0aCA9IHRoaXMuY29sdW1uLmdyaWQuZ2V0UGlubmVkV2lkdGgodHJ1ZSkgKyBwYXJzZUZsb2F0KHRoaXMuY21zLmNvbHVtbi53aWR0aCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgobmV4dFBpbm5lZFdpZHRoICYmIG5leHRQaW5uZWRXaWR0aCA+IHRoaXMuY29sdW1uLmdyaWQuY2FsY1Bpbm5lZENvbnRhaW5lck1heFdpZHRoKSB8fFxuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uLmxldmVsICE9PSB0aGlzLmNtcy5jb2x1bW4ubGV2ZWwgfHxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbi5wYXJlbnQgIT09IHRoaXMuY21zLmNvbHVtbi5wYXJlbnQgfHxcbiAgICAgICAgICAgICAgICB0aGlzLmNtcy5jYW5jZWxEcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY21zLmNhbmNlbERyb3AgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW4uZ3JpZC5vbkNvbHVtbk1vdmluZ0VuZC5lbWl0KGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY29sdW1uLmdyaWQubW92ZUNvbHVtbih0aGlzLmNtcy5jb2x1bW4sIHRoaXMuY29sdW1uLCB0aGlzLl9kcm9wUG9zKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuY21zLnNlbGVjdGlvbiAmJiB0aGlzLmNtcy5zZWxlY3Rpb24uY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sSUQgPSB0aGlzLmNvbHVtbi5ncmlkLmNvbHVtbkxpc3QudG9BcnJheSgpLmluZGV4T2YodGhpcy5jbXMuc2VsZWN0aW9uLmNvbHVtbik7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbi5ncmlkLnNlbGVjdGlvbi5zZXQodGhpcy5jb2x1bW4uZ3JpZElEICsgJy1jZWxsJywgbmV3IFNldChbe1xuICAgICAgICAgICAgICAgICAgICByb3dJRDogdGhpcy5jbXMuc2VsZWN0aW9uLnJvd0lELFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5JRDogY29sSURcbiAgICAgICAgICAgICAgICB9XSkpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IHRoaXMuY29sdW1uLmdyaWQuZ2V0Q2VsbEJ5S2V5KHRoaXMuY21zLnNlbGVjdGlvbi5yb3dJRCwgdGhpcy5jbXMuc2VsZWN0aW9uLmNvbHVtbi5maWVsZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2VsbCkge1xuICAgICAgICAgICAgICAgICAgICBjZWxsLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNtcy5zZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmNvbHVtbi5ncmlkLmRyYWdnZWRDb2x1bW4gPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5jb2x1bW4uZ3JpZC5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqQGhpZGRlblxuICovXG5AUGlwZSh7XG4gICAgbmFtZTogJ2lneGRhdGUnXG59KVxuZXhwb3J0IGNsYXNzIElneERhdGVQaXBlQ29tcG9uZW50IGV4dGVuZHMgRGF0ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICB0cmFuc2Zvcm0odmFsdWU6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci50cmFuc2Zvcm0odmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKkBoaWRkZW5cbiAqL1xuQFBpcGUoe1xuICAgIG5hbWU6ICdpZ3hkZWNpbWFsJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hEZWNpbWFsUGlwZUNvbXBvbmVudCBleHRlbmRzIERlY2ltYWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgdHJhbnNmb3JtKHZhbHVlOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnRyYW5zZm9ybSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGFpbmVyUG9zaXRpb25TZXR0aW5ncyBleHRlbmRzIFBvc2l0aW9uU2V0dGluZ3Mge1xuICAgIGNvbnRhaW5lcj86IEhUTUxFbGVtZW50O1xufVxuXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyUG9zaXRpb25pbmdTdHJhdGVneSBleHRlbmRzIENvbm5lY3RlZFBvc2l0aW9uaW5nU3RyYXRlZ3kge1xuICAgIGlzVG9wID0gZmFsc2U7XG4gICAgaXNUb3BJbml0aWFsUG9zaXRpb24gPSBudWxsO1xuICAgIHB1YmxpYyBzZXR0aW5nczogQ29udGFpbmVyUG9zaXRpb25TZXR0aW5ncztcbiAgICBwb3NpdGlvbihjb250ZW50RWxlbWVudDogSFRNTEVsZW1lbnQsIHNpemU6IHsgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfSwgZG9jdW1lbnQ/OiBEb2N1bWVudCwgaW5pdGlhbENhbGw/OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuc2V0dGluZ3MuY29udGFpbmVyOyAvLyBncmlkLnRib2R5XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IDxIVE1MRWxlbWVudD50aGlzLnNldHRpbmdzLnRhcmdldDsgLy8gY3VycmVudCBncmlkLnJvd1xuICAgICAgICBzdXBlci5wb3NpdGlvbihjb250ZW50RWxlbWVudCwgeyB3aWR0aDogdGFyZ2V0LmNsaWVudFdpZHRoLCBoZWlnaHQ6IHRhcmdldC5jbGllbnRIZWlnaHQgfSwgZG9jdW1lbnQsIGluaXRpYWxDYWxsKTtcblxuICAgICAgICAvLyBQb3NpdGlvbiBvZiB0aGUgb3ZlcmxheSBkZXBlbmRzIG9uIHRoZSBhdmFpbGFibGUgc3BhY2UgaW4gdGhlIGdyaWQuXG4gICAgICAgIC8vIElmIHRoZSBib3R0b20gc3BhY2UgaXMgbm90IGVub3VnaCB0aGVuIHRoZSB0aGUgcm93IG92ZXJsYXkgd2lsbCBzaG93IGF0IHRoZSB0b3Agb2YgdGhlIHJvdy5cbiAgICAgICAgLy8gT25jZSBzaG93biwgZWl0aGVyIHRvcCBvciBib3R0b20sIHRoZW4gdGhpcyBwb3NpdGlvbiBzdGF5cyB1bnRpbCB0aGUgb3ZlcmxheSBpcyBjbG9zZWQgKGlzVG9wSW5pdGlhbFBvc2l0aW9uIHByb3BlcnR5KSxcbiAgICAgICAgLy8gd2hpY2ggbWVhbnMgdGhhdCB3aGVuIHNjcm9sbGluZyB0aGVuIG92ZXJsYXkgbWF5IGhpZGUsIHdoaWxlIHRoZSByb3cgaXMgc3RpbGwgdmlzaWJsZSAoVVggcmVxdWlyZW1lbnQpLlxuICAgICAgICB0aGlzLmlzVG9wID0gdGhpcy5pc1RvcEluaXRpYWxQb3NpdGlvbiAhPT0gbnVsbCA/XG4gICAgICAgICAgICB0aGlzLmlzVG9wSW5pdGlhbFBvc2l0aW9uIDpcbiAgICAgICAgICAgIGNvbnRhaW5lci5jbGllbnRIZWlnaHQgPFxuICAgICAgICAgICAgdGFyZ2V0Lm9mZnNldFRvcCArIHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgKyBjb250ZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MudmVydGljYWxTdGFydFBvaW50ID0gdGhpcy5pc1RvcCA/IFZlcnRpY2FsQWxpZ25tZW50LlRvcCA6IFZlcnRpY2FsQWxpZ25tZW50LkJvdHRvbTtcbiAgICAgICAgY29uc3Qgc3RhcnRQb2ludCA9IGdldFBvaW50RnJvbVBvc2l0aW9uc1NldHRpbmdzKHRoaXMuc2V0dGluZ3MsIGNvbnRlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQpO1xuICAgICAgICBjb250ZW50RWxlbWVudC5zdHlsZS50b3AgPSBzdGFydFBvaW50LnkgKyAodGhpcy5pc1RvcCA/IFZlcnRpY2FsQWxpZ25tZW50LlRvcCA6IFZlcnRpY2FsQWxpZ25tZW50LkJvdHRvbSkgKiBzaXplLmhlaWdodCArICdweCc7XG4gICAgICAgIGNvbnRlbnRFbGVtZW50LnN0eWxlLndpZHRoID0gdGFyZ2V0LmNsaWVudFdpZHRoICsgJ3B4JztcbiAgICB9XG59XG4iXX0=