/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { first } from 'rxjs/operators';
/** @enum {string} */
const MoveDirection = {
    LEFT: 'left',
    RIGHT: 'right',
};
/**
 * @hidden
 */
export class IgxGridNavigationService {
    /**
     * @return {?}
     */
    get displayContainerWidth() {
        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);
    }
    /**
     * @return {?}
     */
    get displayContainerScrollLeft() {
        return parseInt(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft, 10);
    }
    /**
     * @return {?}
     */
    get verticalDisplayContainerElement() {
        return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;
    }
    /**
     * @param {?} rowIndex
     * @return {?}
     */
    horizontalScroll(rowIndex) {
        return this.grid.dataRowList.find((row) => row.index === rowIndex).virtDirRow;
    }
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    getColumnUnpinnedIndex(visibleColumnIndex) {
        const /** @type {?} */ column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);
        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :
            visibleColumnIndex;
    }
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    isColumnFullyVisible(visibleColumnIndex) {
        const /** @type {?} */ horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();
        if (!horizontalScroll.clientWidth ||
            this.grid.columnList.filter(c => !c.columnGroup).find((column) => column.visibleIndex === visibleColumnIndex).pinned) {
            return true;
        }
        const /** @type {?} */ index = this.getColumnUnpinnedIndex(visibleColumnIndex);
        return this.displayContainerWidth >=
            this.grid.dataRowList.first.virtDirRow.getColumnScrollLeft(index + 1) -
                this.displayContainerScrollLeft;
    }
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    isColumnLeftFullyVisible(visibleColumnIndex) {
        const /** @type {?} */ horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();
        if (!horizontalScroll.clientWidth ||
            this.grid.columnList.filter(c => !c.columnGroup).find((column) => column.visibleIndex === visibleColumnIndex).pinned) {
            return true;
        }
        const /** @type {?} */ index = this.getColumnUnpinnedIndex(visibleColumnIndex);
        return this.displayContainerScrollLeft <=
            this.grid.dataRowList.first.virtDirRow.getColumnScrollLeft(index);
    }
    /**
     * @return {?}
     */
    get gridOrderedColumns() {
        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup);
    }
    /**
     * @param {?} rowIndex
     * @return {?}
     */
    isRowInEditMode(rowIndex) {
        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);
    }
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    isColumnEditable(visibleColumnIndex) {
        const /** @type {?} */ column = this.gridOrderedColumns.find(c => c.visibleIndex === visibleColumnIndex);
        return column ? column.editable : false;
    }
    /**
     * @param {?} direction
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    findNextEditable(direction, visibleColumnIndex) {
        const /** @type {?} */ gridColumns = this.gridOrderedColumns;
        if (direction === MoveDirection.LEFT) {
            return gridColumns.splice(0, visibleColumnIndex + 1).reverse().findIndex(e => e.editable);
        }
        else if (direction === MoveDirection.RIGHT) {
            return gridColumns.splice(visibleColumnIndex, gridColumns.length - 1).findIndex(e => e.editable);
        }
    }
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    getCellElementByVisibleIndex(rowIndex, visibleColumnIndex) {
        if (this.isTreeGrid && visibleColumnIndex === 0) {
            return this.grid.nativeElement.querySelector(`igx-tree-grid-cell[data-rowindex="${rowIndex}"][data-visibleIndex="${visibleColumnIndex}"]`);
        }
        return this.grid.nativeElement.querySelector(`igx-grid-cell[data-rowindex="${rowIndex}"][data-visibleIndex="${visibleColumnIndex}"]`);
    }
    /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    onKeydownArrowRight(element, rowIndex, visibleColumnIndex) {
        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {
            return;
        }
        if (this.isColumnFullyVisible(visibleColumnIndex + 1)) {
            // if next column is fully visible or is pinned
            if (element.classList.contains('igx-grid__th--pinned-last')) {
                if (this.isColumnLeftFullyVisible(visibleColumnIndex + 1)) {
                    element.nextElementSibling.firstElementChild.focus();
                }
                else {
                    this.grid.nativeElement.focus({ preventScroll: true });
                    this.grid.parentVirtDir.onChunkLoad
                        .pipe(first())
                        .subscribe(() => {
                        element.nextElementSibling.firstElementChild.focus();
                    });
                    this.horizontalScroll(rowIndex).scrollTo(0);
                }
            }
            else {
                element.nextElementSibling.focus();
            }
        }
        else {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1);
        }
    }
    /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    onKeydownArrowLeft(element, rowIndex, visibleColumnIndex) {
        if (visibleColumnIndex === 0) {
            return;
        }
        const /** @type {?} */ index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);
        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === -1) {
            element.parentNode.previousElementSibling.focus();
        }
        else if (!this.isColumnLeftFullyVisible(visibleColumnIndex - 1)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1);
        }
        else {
            element.previousElementSibling.focus();
        }
    }
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    movePreviousEditable(rowIndex, visibleColumnIndex) {
        const /** @type {?} */ addedIndex = this.isColumnEditable(visibleColumnIndex - 1) ?
            0 :
            this.findNextEditable(MoveDirection.LEFT, visibleColumnIndex - 1);
        if (addedIndex === -1) {
            this.grid.rowEditTabs.last.element.nativeElement.focus();
            return;
        }
        const /** @type {?} */ editableIndex = visibleColumnIndex - 1 - addedIndex;
        if (this.getColumnUnpinnedIndex(editableIndex) === -1 && this.grid.pinnedColumns.length) {
            // if target is NOT pinned and there are pinned columns
            // since addedIndex !== -1, there will always be a target
            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();
        }
        else if (!this.isColumnLeftFullyVisible(editableIndex)) {
            // if not fully visible, perform scroll
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, editableIndex);
        }
        else {
            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // if fully visible, just focus
        }
    }
    /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    moveNextEditable(element, rowIndex, visibleColumnIndex) {
        let /** @type {?} */ addedIndex = 0;
        addedIndex = this.isColumnEditable(visibleColumnIndex + 1) ?
            0 :
            this.findNextEditable(MoveDirection.RIGHT, visibleColumnIndex + 1);
        if (addedIndex === -1 && this.grid.rowEditTabs) {
            // no previous edit column -> go to RE buttons
            this.grid.rowEditTabs.first.element.nativeElement.focus();
            return;
        }
        const /** @type {?} */ editableIndex = visibleColumnIndex + 1 + addedIndex;
        if (this.isColumnFullyVisible(editableIndex)) {
            // If column is fully visible
            if (element.classList.contains('igx-grid__th--pinned-last')) {
                // If this is pinned
                if (this.isColumnLeftFullyVisible(editableIndex)) {
                    // If next column is fully visible LEFT
                    this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // focus
                }
                else {
                    // if NOT fully visible, perform scroll
                    this.grid.nativeElement.focus({ preventScroll: true });
                    this.performHorizontalScrollToCell(rowIndex, editableIndex);
                }
            }
            else {
                // cell is next cell
                this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();
            }
        }
        else {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, editableIndex);
        }
    }
    /**
     * @param {?} rowIndex
     * @return {?}
     */
    onKeydownHome(rowIndex) {
        const /** @type {?} */ rowElement = this.grid.dataRowList.find((row) => row.index === rowIndex).nativeElement;
        let /** @type {?} */ firstCell = this.isTreeGrid ?
            rowElement.querySelector('igx-tree-grid-cell') :
            rowElement.querySelector('igx-grid-cell');
        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {
            firstCell.focus();
        }
        else {
            this.grid.parentVirtDir.onChunkLoad
                .pipe(first())
                .subscribe(() => {
                this.grid.nativeElement.focus({ preventScroll: true });
                firstCell = this.isTreeGrid ? rowElement.querySelector('igx-tree-grid-cell') :
                    rowElement.querySelector('igx-grid-cell');
                firstCell.focus();
            });
            this.horizontalScroll(rowIndex).scrollTo(0);
        }
    }
    /**
     * @param {?} rowIndex
     * @return {?}
     */
    onKeydownEnd(rowIndex) {
        const /** @type {?} */ index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;
        const /** @type {?} */ rowElement = this.grid.dataRowList.find((row) => row.index === rowIndex).nativeElement;
        const /** @type {?} */ allCells = rowElement.querySelectorAll('igx-grid-cell');
        const /** @type {?} */ lastCell = allCells[allCells.length - 1];
        if (this.isColumnFullyVisible(index)) {
            lastCell.focus();
        }
        else {
            this.grid.parentVirtDir.onChunkLoad
                .pipe(first())
                .subscribe(() => {
                this.grid.nativeElement.focus({ preventScroll: true });
                lastCell.focus();
            });
            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));
        }
    }
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    navigateTop(visibleColumnIndex) {
        const /** @type {?} */ verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        const /** @type {?} */ cellSelector = this.isTreeGrid && visibleColumnIndex === 0 ? 'igx-tree-grid-cell' : 'igx-grid-cell';
        if (verticalScroll.scrollTop === 0) {
            const /** @type {?} */ cells = this.grid.nativeElement.querySelectorAll(`${cellSelector}[data-visibleIndex="${visibleColumnIndex}"]`);
            cells[0].focus();
        }
        else {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(0);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(() => {
                const /** @type {?} */ cells = this.grid.nativeElement.querySelectorAll(`${cellSelector}[data-visibleIndex="${visibleColumnIndex}"]`);
                if (cells.length > 0) {
                    cells[0].focus();
                }
            });
        }
    }
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    navigateBottom(visibleColumnIndex) {
        const /** @type {?} */ verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        const /** @type {?} */ cellSelector = this.isTreeGrid && visibleColumnIndex === 0 ? 'igx-tree-grid-cell' : 'igx-grid-cell';
        if (verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {
            const /** @type {?} */ cells = this.grid.nativeElement.querySelectorAll(`${cellSelector}[data-visibleIndex="${visibleColumnIndex}"]`);
            cells[cells.length - 1].focus();
        }
        else {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(() => {
                const /** @type {?} */ cells = this.grid.nativeElement.querySelectorAll(`${cellSelector}[data-visibleIndex="${visibleColumnIndex}"]`);
                if (cells.length > 0) {
                    cells[cells.length - 1].focus();
                }
            });
        }
    }
    /**
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    navigateUp(rowElement, currentRowIndex, visibleColumnIndex) {
        if (currentRowIndex === 0) {
            this.grid.rowList.first.cells.first._clearCellSelection();
            if (this.grid.allowFiltering) {
                const /** @type {?} */ visColLength = this.grid.visibleColumns.length;
                this.grid.headerContainer.scrollTo(visColLength - 1);
                this.grid.filteringService.columnToChipToFocus.set(this.grid.visibleColumns[visColLength - 1].field, true);
            }
            return;
        }
        const /** @type {?} */ containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);
        if (!rowElement.previousElementSibling ||
            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(() => {
                const /** @type {?} */ tag = rowElement.tagName.toLowerCase();
                if (tag === 'igx-grid-row' || tag === 'igx-tree-grid-row') {
                    rowElement = this.getRowByIndex(currentRowIndex);
                }
                else {
                    rowElement = this.grid.nativeElement.querySelector(`igx-grid-groupby-row[data-rowindex="${currentRowIndex}"]`);
                }
                this.focusPreviousElement(rowElement, visibleColumnIndex);
            });
        }
        else {
            this.focusPreviousElement(rowElement, visibleColumnIndex);
        }
    }
    /**
     * @param {?} currentRowEl
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    focusPreviousElement(currentRowEl, visibleColumnIndex) {
        if (currentRowEl.previousElementSibling.tagName.toLowerCase() === 'igx-grid-groupby-row') {
            currentRowEl.previousElementSibling.focus();
        }
        else {
            if (this.isColumnFullyVisible(visibleColumnIndex) && this.isColumnLeftFullyVisible(visibleColumnIndex)) {
                const /** @type {?} */ cell = this.isTreeGrid && visibleColumnIndex === 0 ?
                    currentRowEl.previousElementSibling.querySelector(`igx-tree-grid-cell[data-visibleIndex="${visibleColumnIndex}"]`) :
                    currentRowEl.previousElementSibling.querySelector(`igx-grid-cell[data-visibleIndex="${visibleColumnIndex}"]`);
                cell.focus();
                return;
            }
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(parseInt(currentRowEl.previousElementSibling.getAttribute('data-rowindex'), 10), visibleColumnIndex);
        }
    }
    /**
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    navigateDown(rowElement, currentRowIndex, visibleColumnIndex) {
        if (currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1) {
            return;
        }
        const /** @type {?} */ rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);
        const /** @type {?} */ containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;
        const /** @type {?} */ targetEndTopOffset = rowElement.nextElementSibling ?
            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :
            containerHeight + rowHeight;
        this.grid.nativeElement.focus({ preventScroll: true });
        if (containerHeight && containerHeight < targetEndTopOffset) {
            this.grid.verticalScrollContainer.scrollTo(currentRowIndex + 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(() => {
                const /** @type {?} */ tag = rowElement.tagName.toLowerCase();
                if (tag === 'igx-grid-row' || tag === 'igx-tree-grid-row') {
                    rowElement = this.getRowByIndex(currentRowIndex);
                }
                else {
                    rowElement = this.grid.nativeElement.querySelector(`igx-grid-groupby-row[data-rowindex="${currentRowIndex}"]`);
                }
                this.focusNextElement(rowElement, visibleColumnIndex);
            });
        }
        else {
            this.focusNextElement(rowElement, visibleColumnIndex);
        }
    }
    /**
     * @param {?} rowElement
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    focusNextElement(rowElement, visibleColumnIndex) {
        if (rowElement.nextElementSibling.tagName.toLowerCase() === 'igx-grid-groupby-row') {
            rowElement.nextElementSibling.focus();
        }
        else {
            if (this.isColumnFullyVisible(visibleColumnIndex) && this.isColumnLeftFullyVisible(visibleColumnIndex)) {
                const /** @type {?} */ cell = this.isTreeGrid && visibleColumnIndex === 0 ?
                    rowElement.nextElementSibling.querySelector(`igx-tree-grid-cell[data-visibleIndex="${visibleColumnIndex}"]`) :
                    rowElement.nextElementSibling.querySelector(`igx-grid-cell[data-visibleIndex="${visibleColumnIndex}"]`);
                cell.focus();
                return;
            }
            this.performHorizontalScrollToCell(parseInt(rowElement.nextElementSibling.getAttribute('data-rowindex'), 10), visibleColumnIndex);
        }
    }
    /**
     * @return {?}
     */
    goToFirstCell() {
        const /** @type {?} */ verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        const /** @type {?} */ horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();
        if (verticalScroll.scrollTop === 0) {
            if (!this.isTreeGrid) {
                this.onKeydownHome(this.grid.dataRowList.first.index);
            }
            else {
                this.onKeydownHome(0);
            }
        }
        else {
            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {
                this.navigateTop(0);
            }
            else {
                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);
                this.grid.parentVirtDir.onChunkLoad
                    .pipe(first())
                    .subscribe(() => {
                    this.navigateTop(0);
                });
            }
        }
    }
    /**
     * @return {?}
     */
    goToLastCell() {
        const /** @type {?} */ verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        if (verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {
            const /** @type {?} */ rows = this.getAllRows();
            const /** @type {?} */ rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);
            this.onKeydownEnd(rowIndex);
        }
        else {
            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(() => {
                const /** @type {?} */ rows = this.getAllRows();
                if (rows.length > 0) {
                    const /** @type {?} */ rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);
                    this.onKeydownEnd(rowIndex);
                }
            });
        }
    }
    /**
     * @param {?} currentRowEl
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    performTab(currentRowEl, rowIndex, visibleColumnIndex) {
        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {
            if (this.isRowInEditMode(rowIndex)) {
                this.grid.rowEditTabs.first.element.nativeElement.focus();
                return;
            }
            if (this.grid.rowList.find(row => row.index === rowIndex + 1)) {
                this.navigateDown(currentRowEl, rowIndex, 0);
            }
        }
        else {
            const /** @type {?} */ cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex);
            if (cell) {
                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {
                    this.moveNextEditable(cell, rowIndex, visibleColumnIndex);
                    return;
                }
                this.onKeydownArrowRight(cell, rowIndex, visibleColumnIndex);
            }
        }
    }
    /**
     * @param {?} currentRowEl
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    performShiftTabKey(currentRowEl, rowIndex, visibleColumnIndex) {
        if (visibleColumnIndex === 0) {
            if (this.isRowInEditMode(rowIndex)) {
                this.grid.rowEditTabs.last.element.nativeElement.focus();
                return;
            }
            this.navigateUp(currentRowEl, rowIndex, this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex);
        }
        else {
            const /** @type {?} */ cell = currentRowEl.querySelector(`igx-grid-cell[data-visibleIndex="${visibleColumnIndex}"]`);
            if (cell) {
                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {
                    this.movePreviousEditable(rowIndex, visibleColumnIndex);
                    return;
                }
                this.onKeydownArrowLeft(cell, rowIndex, visibleColumnIndex);
            }
        }
    }
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    performHorizontalScrollToCell(rowIndex, visibleColumnIndex) {
        const /** @type {?} */ unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);
        this.grid.parentVirtDir.onChunkLoad
            .pipe(first())
            .subscribe(() => {
            this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex).focus();
        });
        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getRowByIndex(index) {
        return this.isTreeGrid ? this.grid.nativeElement.querySelector(`igx-tree-grid-row[data-rowindex="${index}"]`) :
            this.grid.nativeElement.querySelector(`igx-grid-row[data-rowindex="${index}"]`);
    }
    /**
     * @return {?}
     */
    getAllRows() {
        return this.isTreeGrid ? this.grid.nativeElement.querySelectorAll('igx-tree-grid-row') :
            this.grid.nativeElement.querySelectorAll('igx-grid-row');
    }
    /**
     * @return {?}
     */
    get isTreeGrid() {
        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';
    }
}
IgxGridNavigationService.decorators = [
    { type: Injectable },
];
function IgxGridNavigationService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridNavigationService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridNavigationService.ctorParameters;
    /** @type {?} */
    IgxGridNavigationService.prototype.grid;
}

//# sourceMappingURL=data:application/json;base64,