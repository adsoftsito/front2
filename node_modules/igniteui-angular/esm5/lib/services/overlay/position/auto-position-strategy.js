/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { VerticalAlignment, HorizontalAlignment } from './../utilities';
import { ConnectedPositioningStrategy } from './connected-positioning-strategy';
/** @enum {number} */
var Axis = {
    X: 1,
    Y: 0,
};
Axis[Axis.X] = "X";
Axis[Axis.Y] = "Y";
var AutoPositionStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(AutoPositionStrategy, _super);
    function AutoPositionStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.offsetPadding = 16;
        return _this;
    }
    /**
     * @param {?} document
     * @return {?}
     */
    AutoPositionStrategy.prototype.getViewPort = /**
     * @param {?} document
     * @return {?}
     */
    function (document) {
        // Material Design implementation
        var /** @type {?} */ clientRect = document.documentElement.getBoundingClientRect();
        var /** @type {?} */ scrollPosition = {
            top: -clientRect.top,
            left: -clientRect.left
        };
        var /** @type {?} */ width = window.innerWidth;
        var /** @type {?} */ height = window.innerHeight;
        return {
            top: scrollPosition.top,
            left: scrollPosition.left,
            bottom: scrollPosition.top + height,
            right: scrollPosition.left + width,
            height: height,
            width: width
        };
    };
    // The position method should return a <div> container that will host the component
    /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    AutoPositionStrategy.prototype.position = /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    function (contentElement, size, document, initialCall) {
        var _this = this;
        if (!initialCall) {
            _super.prototype.position.call(this, contentElement, size);
            return;
        }
        this._initialSettings = this._initialSettings || Object.assign({}, this._initialSettings, this.settings);
        this.settings = this._initialSettings ? Object.assign({}, this.settings, this._initialSettings) : this.settings;
        var /** @type {?} */ viewPort = this.getViewPort(document);
        _super.prototype.position.call(this, contentElement, size);
        var /** @type {?} */ checkIfMoveHorizontal = function (elem) {
            var /** @type {?} */ leftBound = elem.offsetLeft;
            var /** @type {?} */ rightBound = elem.offsetLeft + elem.lastElementChild.clientWidth;
            switch (_this.settings.horizontalDirection) {
                case HorizontalAlignment.Left:
                    if (leftBound < viewPort.left) {
                        _this.settings.horizontalDirection = HorizontalAlignment.Right;
                        _this.settings.horizontalStartPoint = HorizontalAlignment.Right;
                    }
                    break;
                case HorizontalAlignment.Right:
                    if (rightBound > viewPort.right) {
                        _this.settings.horizontalDirection = HorizontalAlignment.Left;
                        _this.settings.horizontalStartPoint = HorizontalAlignment.Left;
                    }
                    break;
                default:
                    return;
            }
        };
        var /** @type {?} */ checkIfMoveVertical = function (elem) {
            var /** @type {?} */ topBound = elem.offsetTop;
            var /** @type {?} */ bottomBound = elem.offsetTop + elem.lastElementChild.clientHeight;
            switch (_this.settings.verticalDirection) {
                case VerticalAlignment.Top:
                    if (topBound < viewPort.top) {
                        _this.settings.verticalDirection = VerticalAlignment.Bottom;
                        _this.settings.verticalStartPoint = VerticalAlignment.Bottom;
                    }
                    break;
                case VerticalAlignment.Bottom:
                    if (bottomBound > viewPort.bottom) {
                        _this.settings.verticalDirection = VerticalAlignment.Top;
                        _this.settings.verticalStartPoint = VerticalAlignment.Top;
                    }
                    break;
                default:
                    return;
            }
        };
        checkIfMoveVertical(contentElement);
        checkIfMoveHorizontal(contentElement);
        _super.prototype.position.call(this, contentElement, size);
    };
    return AutoPositionStrategy;
}(ConnectedPositioningStrategy));
export { AutoPositionStrategy };
function AutoPositionStrategy_tsickle_Closure_declarations() {
    /** @type {?} */
    AutoPositionStrategy.prototype.offsetPadding;
    /** @type {?} */
    AutoPositionStrategy.prototype._initialSettings;
}

//# sourceMappingURL=data:application/json;base64,