/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { TransactionType } from './transaction';
import { IgxBaseTransactionService } from './base-transaction';
import { EventEmitter, Injectable } from '@angular/core';
import { isObject, mergeObjects, cloneValue } from '../../core/utils';
// unsupported: template constraints.
// unsupported: template constraints.
/**
 * @template T, S
 */
export class IgxTransactionService extends IgxBaseTransactionService {
    constructor() {
        super(...arguments);
        this._transactions = [];
        this._redoStack = [];
        this._undoStack = [];
        this._states = new Map();
        this.onStateUpdate = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get canUndo() {
        return this._undoStack.length > 0;
    }
    /**
     * @return {?}
     */
    get canRedo() {
        return this._redoStack.length > 0;
    }
    /**
     * @param {?} transaction
     * @param {?=} recordRef
     * @return {?}
     */
    add(transaction, recordRef) {
        const /** @type {?} */ states = this._isPending ? this._pendingStates : this._states;
        this.verifyAddedTransaction(states, transaction, recordRef);
        this.addTransaction(transaction, states, recordRef);
    }
    /**
     * @param {?} transaction
     * @param {?} states
     * @param {?=} recordRef
     * @param {?=} useInUndo
     * @return {?}
     */
    addTransaction(transaction, states, recordRef, useInUndo = true) {
        this.updateState(states, transaction, recordRef);
        const /** @type {?} */ transactions = this._isPending ? this._pendingTransactions : this._transactions;
        transactions.push(transaction);
        if (!this._isPending) {
            this._undoStack.push({ transaction, recordRef, useInUndo });
            this._redoStack = [];
            this.onStateUpdate.emit();
        }
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    getTransactionLog(id) {
        if (id) {
            return this._transactions.filter(t => t.id === id);
        }
        return [...this._transactions];
    }
    /**
     * @param {?} mergeChanges
     * @return {?}
     */
    getAggregatedChanges(mergeChanges) {
        const /** @type {?} */ result = [];
        this._states.forEach((state, key) => {
            const /** @type {?} */ value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;
            result.push(/** @type {?} */ ({ id: key, newValue: value, type: state.type }));
        });
        return result;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getState(id) {
        return this._states.get(id);
    }
    /**
     * @return {?}
     */
    get enabled() {
        return true;
    }
    /**
     * @param {?} id
     * @param {?} mergeChanges
     * @return {?}
     */
    getAggregatedValue(id, mergeChanges) {
        const /** @type {?} */ state = this._states.get(id);
        const /** @type {?} */ pendingState = super.getState(id);
        //  if there is no state and there is no pending state return null
        if (!state && !pendingState) {
            return null;
        }
        const /** @type {?} */ pendingChange = super.getAggregatedValue(id, false);
        const /** @type {?} */ change = state && state.value;
        let /** @type {?} */ aggregatedValue = this.mergeValues(change, pendingChange);
        if (mergeChanges) {
            const /** @type {?} */ originalValue = state ? state.recordRef : pendingState.recordRef;
            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);
        }
        return aggregatedValue;
    }
    /**
     * @param {?} commit
     * @return {?}
     */
    endPending(commit) {
        this._isPending = false;
        if (commit) {
            let /** @type {?} */ i = 0;
            this._pendingStates.forEach((s, k) => {
                this.addTransaction(/** @type {?} */ ({ id: k, newValue: s.value, type: s.type }), this._states, s.recordRef, i === 0);
                i++;
            });
        }
        super.endPending(commit);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    commit(data) {
        this._states.forEach((s) => {
            const /** @type {?} */ index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(s.recordRef));
            switch (s.type) {
                case TransactionType.ADD:
                    data.push(s.value);
                    break;
                case TransactionType.DELETE:
                    if (0 <= index && index < data.length) {
                        data.splice(index, 1);
                    }
                    break;
                case TransactionType.UPDATE:
                    if (0 <= index && index < data.length) {
                        data[index] = this.updateValue(s);
                    }
                    break;
            }
        });
        this.clear();
    }
    /**
     * @return {?}
     */
    clear() {
        this._transactions = [];
        this._states.clear();
        this._redoStack = [];
        this._undoStack = [];
        this.onStateUpdate.emit();
    }
    /**
     * @return {?}
     */
    undo() {
        if (this._undoStack.length <= 0) {
            return;
        }
        let /** @type {?} */ action;
        do {
            action = this._undoStack.pop();
            this._transactions.pop();
            this._redoStack.push(action);
        } while (!action.useInUndo);
        this._states.clear();
        this._undoStack.map(a => this.updateState(this._states, a.transaction, a.recordRef));
        this.onStateUpdate.emit();
    }
    /**
     * @return {?}
     */
    redo() {
        if (this._redoStack.length > 0) {
            //  remove first item from redo stack (it should always has useInUndo === true)
            //  and then all next items until there are items and useInUndo === false.
            //  If there are no more items, or next item's useInUndo === true leave.
            let /** @type {?} */ undoItem;
            undoItem = this._redoStack.pop();
            this.updateState(this._states, undoItem.transaction, undoItem.recordRef);
            this._transactions.push(undoItem.transaction);
            this._undoStack.push(undoItem);
            while (this._redoStack[this._redoStack.length - 1] && !this._redoStack[this._redoStack.length - 1].useInUndo) {
                undoItem = this._redoStack.pop();
                this.updateState(this._states, undoItem.transaction, undoItem.recordRef);
                this._transactions.push(undoItem.transaction);
                this._undoStack.push(undoItem);
            }
            this.onStateUpdate.emit();
        }
    }
    /**
     * Verifies if the passed transaction is correct. If not throws an exception.
     * @param {?} states
     * @param {?} transaction Transaction to be verified
     * @param {?=} recordRef
     * @return {?}
     */
    verifyAddedTransaction(states, transaction, recordRef) {
        const /** @type {?} */ state = states.get(transaction.id);
        switch (transaction.type) {
            case TransactionType.ADD:
                if (state) {
                    //  cannot add same item twice
                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);
                }
                break;
            case TransactionType.DELETE:
            case TransactionType.UPDATE:
                if (state && state.type === TransactionType.DELETE) {
                    //  cannot delete or update deleted items
                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);
                }
                if (!state && !recordRef && !this._isPending) {
                    //  cannot initially add transaction or delete item with no recordRef
                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +
                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);
                }
                break;
        }
    }
    /**
     * Updates the provided states collection according to passed transaction and recordRef
     * @param {?} states States collection to apply the update to
     * @param {?} transaction Transaction to apply to the current state
     * @param {?=} recordRef Reference to the value of the record in data source, if any, where transaction should be applied
     * @return {?}
     */
    updateState(states, transaction, recordRef) {
        let /** @type {?} */ state = states.get(transaction.id);
        //  if TransactionType is ADD simply add transaction to states;
        //  if TransactionType is DELETE:
        //    - if there is state with this id of type ADD remove it from the states;
        //    - if there is state with this id of type UPDATE change its type to DELETE;
        //    - if there is no state with this id add transaction to states;
        //  if TransactionType is UPDATE:
        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value
        //    - if there is state with this id of type UPDATE merge new value into state new value
        //    - if there is state with this id and state type is DELETE change its type to UPDATE
        //    - if there is no state with this id add transaction to states;
        if (state) {
            switch (transaction.type) {
                case TransactionType.DELETE:
                    if (state.type === TransactionType.ADD) {
                        states.delete(transaction.id);
                    }
                    else if (state.type === TransactionType.UPDATE) {
                        state.value = transaction.newValue;
                        state.type = TransactionType.DELETE;
                    }
                    break;
                case TransactionType.UPDATE:
                    if (isObject(state.value)) {
                        if (state.type === TransactionType.ADD) {
                            state.value = this.mergeValues(state.value, transaction.newValue);
                        }
                        if (state.type === TransactionType.UPDATE) {
                            mergeObjects(state.value, transaction.newValue);
                        }
                    }
                    else {
                        state.value = transaction.newValue;
                    }
            }
        }
        else {
            state = /** @type {?} */ ({ value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type });
            states.set(transaction.id, state);
        }
        //  should not clean pending state. This will happen automatically on endPending call
        if (!this._isPending) {
            this.cleanState(transaction.id, states);
        }
    }
    /**
     * Compares the state with recordRef and clears all duplicated values. If any state ends as
     * empty object removes it from states.
     * @param {?} id
     * @param {?} states
     * @return {?}
     */
    cleanState(id, states) {
        const /** @type {?} */ state = states.get(id);
        //  do nothing if
        //  there is no state, or
        //  there is no state value (e.g. DELETED transaction), or
        //  there is no recordRef (e.g. ADDED transaction)
        if (state && state.value && state.recordRef) {
            //  if state's value is object compare each key with the ones in recordRef
            //  if values in any key are the same delete it from state's value
            //  if state's value is not object, simply compare with recordRef and remove
            //  the state if they are equal
            if (isObject(state.recordRef)) {
                for (const /** @type {?} */ key of Object.keys(state.value)) {
                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {
                        delete state.value[key];
                    }
                }
                //  if state's value is empty remove the state from the states, only if state is not DELETE type
                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {
                    states.delete(id);
                }
            }
            else {
                if (state.recordRef === state.value) {
                    states.delete(id);
                }
            }
        }
    }
}
IgxTransactionService.decorators = [
    { type: Injectable },
];
function IgxTransactionService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTransactionService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTransactionService.ctorParameters;
    /** @type {?} */
    IgxTransactionService.prototype._transactions;
    /** @type {?} */
    IgxTransactionService.prototype._redoStack;
    /** @type {?} */
    IgxTransactionService.prototype._undoStack;
    /** @type {?} */
    IgxTransactionService.prototype._states;
    /** @type {?} */
    IgxTransactionService.prototype.onStateUpdate;
}

//# sourceMappingURL=data:application/json;base64,