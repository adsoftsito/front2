/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ChangeDetectorRef, EventEmitter, ElementRef, HostBinding, Input, Output, ContentChild, forwardRef, } from '@angular/core';
import { AnimationBuilder, useAnimation } from '@angular/animations';
import { growVerOut, growVerIn } from '../animations/main';
import { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';
import { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';
let /** @type {?} */ NEXT_ID = 0;
export class IgxExpansionPanelComponent {
    /**
     * @param {?} cdr
     * @param {?} elementRef
     * @param {?} builder
     */
    constructor(cdr, elementRef, builder) {
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.builder = builder;
        this.animationSettings = {
            openAnimation: growVerIn,
            closeAnimation: growVerOut
        };
        /**
         * Sets/gets the `id` of the expansion panel component.
         * If not set, `id` will have value `"igx-expansion-panel-0"`;
         * ```html
         * <igx-expansion-panel id = "my-first-expansion-panel"></igx-expansion-panel>
         * ```
         * ```typescript
         * let panelId =  this.panel.id;
         * ```
         * \@memberof IgxExpansionPanelComponent
         */
        this.id = `igx-expansion-panel-${NEXT_ID++}`;
        this.cssClass = 'igx-expansion-panel';
        this.collapsed = true;
        this.onCollapsed = new EventEmitter();
        this.onExpanded = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get headerId() {
        return this.header ? `${this.id}-header` : '';
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    playOpenAnimation(cb) {
        if (!this.body) {
            // if not body element is passed, there is nothing to animate
            return;
        }
        const /** @type {?} */ animation = useAnimation(this.animationSettings.openAnimation);
        const /** @type {?} */ animationBuilder = this.builder.build(animation);
        const /** @type {?} */ openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);
        openAnimationPlayer.onDone(() => {
            cb();
            openAnimationPlayer.reset();
        });
        openAnimationPlayer.play();
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    playCloseAnimation(cb) {
        if (!this.body) {
            // if not body element is passed, there is nothing to animate
            return;
        }
        const /** @type {?} */ animation = useAnimation(this.animationSettings.closeAnimation);
        const /** @type {?} */ animationBuilder = this.builder.build(animation);
        const /** @type {?} */ closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);
        closeAnimationPlayer.onDone(() => {
            cb();
            closeAnimationPlayer.reset();
        });
        closeAnimationPlayer.play();
    }
    /**
     * @param {?=} evt
     * @return {?}
     */
    collapse(evt) {
        this.playCloseAnimation(() => {
            this.onCollapsed.emit({ event: evt, panel: this });
            this.collapsed = true;
        });
    }
    /**
     * @param {?=} evt
     * @return {?}
     */
    expand(evt) {
        this.collapsed = false;
        this.cdr.detectChanges();
        this.playOpenAnimation(() => {
            this.onExpanded.emit({ event: evt, panel: this });
        });
    }
    /**
     * @param {?=} evt
     * @return {?}
     */
    toggle(evt) {
        if (this.collapsed) {
            this.expand(evt);
        }
        else {
            this.collapse(evt);
        }
    }
}
IgxExpansionPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-expansion-panel',
                template: `<ng-content select="igx-expansion-panel-header"></ng-content>
<ng-content *ngIf="!collapsed" select="igx-expansion-panel-body"></ng-content>
`
            },] },
];
/** @nocollapse */
IgxExpansionPanelComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
    { type: AnimationBuilder, },
];
IgxExpansionPanelComponent.propDecorators = {
    "animationSettings": [{ type: Input },],
    "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
    "cssClass": [{ type: HostBinding, args: ['class.igx-expansion-panel',] },],
    "collapsed": [{ type: Input },],
    "onCollapsed": [{ type: Output },],
    "onExpanded": [{ type: Output },],
    "body": [{ type: ContentChild, args: [forwardRef(() => IgxExpansionPanelBodyComponent), { read: IgxExpansionPanelBodyComponent },] },],
    "header": [{ type: ContentChild, args: [forwardRef(() => IgxExpansionPanelHeaderComponent), { read: IgxExpansionPanelHeaderComponent },] },],
};
function IgxExpansionPanelComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxExpansionPanelComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxExpansionPanelComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxExpansionPanelComponent.propDecorators;
    /** @type {?} */
    IgxExpansionPanelComponent.prototype.animationSettings;
    /**
     * Sets/gets the `id` of the expansion panel component.
     * If not set, `id` will have value `"igx-expansion-panel-0"`;
     * ```html
     * <igx-expansion-panel id = "my-first-expansion-panel"></igx-expansion-panel>
     * ```
     * ```typescript
     * let panelId =  this.panel.id;
     * ```
     * \@memberof IgxExpansionPanelComponent
     * @type {?}
     */
    IgxExpansionPanelComponent.prototype.id;
    /** @type {?} */
    IgxExpansionPanelComponent.prototype.cssClass;
    /** @type {?} */
    IgxExpansionPanelComponent.prototype.collapsed;
    /** @type {?} */
    IgxExpansionPanelComponent.prototype.onCollapsed;
    /** @type {?} */
    IgxExpansionPanelComponent.prototype.onExpanded;
    /** @type {?} */
    IgxExpansionPanelComponent.prototype.body;
    /** @type {?} */
    IgxExpansionPanelComponent.prototype.header;
    /** @type {?} */
    IgxExpansionPanelComponent.prototype.cdr;
    /** @type {?} */
    IgxExpansionPanelComponent.prototype.elementRef;
    /** @type {?} */
    IgxExpansionPanelComponent.prototype.builder;
}

//# sourceMappingURL=data:application/json;base64,