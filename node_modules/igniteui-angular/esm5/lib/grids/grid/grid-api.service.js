/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { GridBaseAPIService } from '../api.service';
import { DataUtil } from '../../data-operations/data-util';
import { cloneArray } from '../../core/utils';
var IgxGridAPIService = /** @class */ (function (_super) {
    tslib_1.__extends(IgxGridAPIService, _super);
    function IgxGridAPIService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} id
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @param {?} strategy
     * @return {?}
     */
    IgxGridAPIService.prototype.groupBy = /**
     * @param {?} id
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @param {?} strategy
     * @return {?}
     */
    function (id, fieldName, dir, ignoreCase, strategy) {
        var /** @type {?} */ groupingState = cloneArray(this.get(id).groupingExpressions);
        var /** @type {?} */ sortingState = cloneArray(this.get(id).sortingExpressions);
        strategy = strategy ? strategy : this.getSortStrategyPerColumn(id, fieldName);
        this.prepare_sorting_expression([sortingState, groupingState], { fieldName: fieldName, dir: dir, ignoreCase: ignoreCase, strategy: strategy });
        this.get(id).groupingExpressions = groupingState;
        this.arrange_sorting_expressions(id);
    };
    /**
     * @param {?} id
     * @param {?} expressions
     * @return {?}
     */
    IgxGridAPIService.prototype.groupBy_multiple = /**
     * @param {?} id
     * @param {?} expressions
     * @return {?}
     */
    function (id, expressions) {
        var /** @type {?} */ groupingState = cloneArray(this.get(id).groupingExpressions);
        var /** @type {?} */ sortingState = cloneArray(this.get(id).sortingExpressions);
        try {
            for (var expressions_1 = tslib_1.__values(expressions), expressions_1_1 = expressions_1.next(); !expressions_1_1.done; expressions_1_1 = expressions_1.next()) {
                var each = expressions_1_1.value;
                each.strategy = each.strategy ? each.strategy : this.getSortStrategyPerColumn(id, each.fieldName);
                this.prepare_sorting_expression([sortingState, groupingState], each);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (expressions_1_1 && !expressions_1_1.done && (_a = expressions_1.return)) _a.call(expressions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.get(id).groupingExpressions = groupingState;
        this.arrange_sorting_expressions(id);
        var e_1, _a;
    };
    /**
     * @param {?} id
     * @param {?=} name
     * @return {?}
     */
    IgxGridAPIService.prototype.clear_groupby = /**
     * @param {?} id
     * @param {?=} name
     * @return {?}
     */
    function (id, name) {
        var _this = this;
        var /** @type {?} */ groupingState = cloneArray(this.get(id).groupingExpressions);
        var /** @type {?} */ sortingState = cloneArray(this.get(id).sortingExpressions);
        if (name) {
            var /** @type {?} */ names_1 = typeof name === 'string' ? [name] : name;
            var /** @type {?} */ groupedCols = groupingState.filter(function (state) { return names_1.indexOf(state.fieldName) < 0; });
            var /** @type {?} */ newSortingExpr = sortingState.filter(function (state) { return names_1.indexOf(state.fieldName) < 0; });
            this.get(id).groupingExpressions = groupedCols;
            this.get(id).sortingExpressions = newSortingExpr;
            names_1.forEach(function (colName) {
                var /** @type {?} */ grExprIndex = groupingState.findIndex(function (exp) { return exp.fieldName === colName; });
                var /** @type {?} */ grpExpandState = _this.get(id).groupingExpansionState;
                /* remove expansion states related to the cleared group
                                and all with deeper hierarchy than the cleared group */
                /* remove expansion states related to the cleared group
                and all with deeper hierarchy than the cleared group */
                _this.get(id).groupingExpansionState = grpExpandState
                    .filter(function (val) {
                    return val.hierarchy && val.hierarchy.length <= grExprIndex;
                });
            });
        }
        else {
            // clear all
            this.get(id).groupingExpressions = [];
            this.get(id).groupingExpansionState = [];
            var _loop_1 = function (grExpr) {
                var /** @type {?} */ sortExprIndex = sortingState.findIndex(function (exp) { return exp.fieldName === grExpr.fieldName; });
                if (sortExprIndex > -1) {
                    sortingState.splice(sortExprIndex, 1);
                }
            };
            try {
                for (var groupingState_1 = tslib_1.__values(groupingState), groupingState_1_1 = groupingState_1.next(); !groupingState_1_1.done; groupingState_1_1 = groupingState_1.next()) {
                    var grExpr = groupingState_1_1.value;
                    _loop_1(grExpr);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (groupingState_1_1 && !groupingState_1_1.done && (_a = groupingState_1.return)) _a.call(groupingState_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.get(id).sortingExpressions = sortingState;
        }
        var e_2, _a;
    };
    /**
     * @param {?} id
     * @param {?} groupRow
     * @return {?}
     */
    IgxGridAPIService.prototype.groupBy_get_expanded_for_group = /**
     * @param {?} id
     * @param {?} groupRow
     * @return {?}
     */
    function (id, groupRow) {
        var /** @type {?} */ grState = this.get(id).groupingExpansionState;
        var /** @type {?} */ hierarchy = DataUtil.getHierarchy(groupRow);
        return grState.find(function (state) {
            return DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy);
        });
    };
    /**
     * @param {?} id
     * @param {?} groupRow
     * @param {?} rowID
     * @return {?}
     */
    IgxGridAPIService.prototype.groupBy_is_row_in_group = /**
     * @param {?} id
     * @param {?} groupRow
     * @param {?} rowID
     * @return {?}
     */
    function (id, groupRow, rowID) {
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ rowInGroup = false;
        groupRow.records.forEach(function (row) {
            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {
                rowInGroup = true;
            }
        });
        return rowInGroup;
    };
    /**
     * @param {?} id
     * @param {?} groupRow
     * @return {?}
     */
    IgxGridAPIService.prototype.groupBy_toggle_group = /**
     * @param {?} id
     * @param {?} groupRow
     * @return {?}
     */
    function (id, groupRow) {
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ expansionState = grid.groupingExpansionState;
        var /** @type {?} */ toggleRowEditingOverlay;
        var /** @type {?} */ isEditRowInGroup = false;
        if (grid.rowEditable) {
            var /** @type {?} */ rowState = this.get_edit_row_state(id);
            // Toggle only row editing overlays that are inside current expanded/collapsed group.
            isEditRowInGroup = rowState ? this.groupBy_is_row_in_group(id, groupRow, this.get_edit_row_state(id).rowID) : false;
        }
        var /** @type {?} */ state = this.groupBy_get_expanded_for_group(id, groupRow);
        if (state) {
            state.expanded = !state.expanded;
            if (isEditRowInGroup) {
                toggleRowEditingOverlay = state.expanded;
            }
        }
        else {
            expansionState.push({
                expanded: !grid.groupsExpanded,
                hierarchy: DataUtil.getHierarchy(groupRow)
            });
            if (isEditRowInGroup) {
                toggleRowEditingOverlay = false;
            }
        }
        this.get(id).groupingExpansionState = expansionState;
        if (grid.rowEditable) {
            grid.repositionRowEditingOverlay(grid.rowInEditMode);
        }
    };
    /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    IgxGridAPIService.prototype.remove_grouping_expression = /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    function (id, fieldName) {
        var /** @type {?} */ groupingExpressions = this.get(id).groupingExpressions;
        var /** @type {?} */ index = groupingExpressions.findIndex(function (expr) { return expr.fieldName === fieldName; });
        if (index !== -1) {
            groupingExpressions.splice(index, 1);
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    IgxGridAPIService.prototype.arrange_sorting_expressions = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var /** @type {?} */ groupingState = this.get(id).groupingExpressions;
        this.get(id).sortingExpressions.sort(function (a, b) {
            var /** @type {?} */ groupExprA = groupingState.find(function (expr) { return expr.fieldName === a.fieldName; });
            var /** @type {?} */ groupExprB = groupingState.find(function (expr) { return expr.fieldName === b.fieldName; });
            if (groupExprA && groupExprB) {
                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;
            }
            else if (groupExprA) {
                return -1;
            }
            else if (groupExprB) {
                return 1;
            }
            else {
                return 0;
            }
        });
    };
    return IgxGridAPIService;
}(GridBaseAPIService));
export { IgxGridAPIService };

//# sourceMappingURL=data:application/json;base64,