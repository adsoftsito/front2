/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, HostBinding, Input, TemplateRef, ViewChild } from '@angular/core';
import { IgxIconService } from './icon.service';
import { DeprecateProperty } from '../core/deprecateDecorators';
/**
 * **Ignite UI for Angular Icon** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/icon.html)
 *
 * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons
 * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearence
 * of the icon.
 *
 * Example:
 * ```html
 * <igx-icon color="#00ff00" isActive="true">home</igx-icon>
 * ```
 */
let /** @type {?} */ NEXT_ID = 0;
export class IgxIconComponent {
    /**
     * @param {?} _el
     * @param {?} iconService
     */
    constructor(_el, iconService) {
        this._el = _el;
        this.iconService = iconService;
        /**
         *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.
         * ```typescript
         * \@ViewChild("MyIcon") public icon: IgxIconComponent;
         * constructor(private cdRef:ChangeDetectorRef) {}
         * ngAfterViewInit() {
         *    this.icon.cssClass = "";
         *    this.cdRef.detectChanges();
         * }
         * ```
         */
        this.cssClass = 'igx-icon';
        /**
         *  This allows you to disable the `aria-hidden` attribute. By default it's applied.
         * ```typescript
         * \@ViewChild("MyIcon") public icon: IgxIconComponent;
         * constructor(private cdRef:ChangeDetectorRef) {}
         * ngAfterViewInit() {
         *    this.icon.ariaHidden = false;
         *    this.cdRef.detectChanges();
         * }
         * ```
         */
        this.ariaHidden = true;
        /**
         *  An \@Input property that sets the value of the `id` attribute.
         * ```html
         * <igx-icon id="igx-icon-1" fontSet="material" color="blue" [isActive]="false">settings</igx-icon>
         * ```
         */
        this.id = `igx-icon-${NEXT_ID++}`;
        /**
         *  An \@Input property that allows you to disable the `active` property. By default it's applied.
         * ```html
         * <igx-icon [isActive]="false" fontSet="material" color="blue">settings</igx-icon>
         * ```
         */
        this.active = true;
        this.el = _el;
        this.font = this.iconService.defaultFontSet;
        this.iconService.registerFontSetAlias('material', 'material-icons');
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        this.updateIconClass();
    }
    /**
     *  An accessor that returns the value of the font property.
     * ```typescript
     * \@ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconFont = this.icon.getFontSet;
     * }
     * ```
     * @return {?}
     */
    get getFontSet() {
        return this.font;
    }
    /**
     *  An accessor that returns the value of the active property.
     * ```typescript
     * \@ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconActive = this.icon.getActive;
     * }
     * ```
     * @return {?}
     */
    get getActive() {
        return this.active;
    }
    /**
     *  An accessor that returns inactive property.
     * ```typescript
     * \@ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconActive = this.icon.getInactive;
     * }
     * ```
     * @return {?}
     */
    get getInactive() {
        return !this.active;
    }
    /**
     *  An accessor that returns the opposite value of the `iconColor` property.
     * ```typescript
     * \@ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconColor = this.icon.getIconColor;
     * }
     * ```
     * @return {?}
     */
    get getIconColor() {
        return this.iconColor;
    }
    /**
     *  An accessor that returns the value of the iconName property.
     * ```typescript
     * \@ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconName = this.icon.getIconName;
     * }
     * ```
     * @return {?}
     */
    get getIconName() {
        return this.iconName;
    }
    /**
     *  An accessor that returns the key of the SVG image.
     *  The key consists of the fontSet and the iconName separated by underscore.
     * ```typescript
     * \@ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let svgKey = this.icon.getSvgKey;
     * }
     * ```
     * @return {?}
     */
    get getSvgKey() {
        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {
            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);
        }
        return null;
    }
    /**
     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.
     * ```typescript
     * \@ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconTemplate = this.icon.template;
     * }
     * ```
     * @return {?}
     */
    get template() {
        if (this.iconName) {
            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {
                return this.svgImage;
            }
            // TODO: remove this after glyphName property is deprecated.
            const /** @type {?} */ materialFS = 'material-icons';
            const /** @type {?} */ materialFSAlias = 'material';
            if (this.font === materialFS || this.font === materialFSAlias ||
                (!this.font && (this.iconService.defaultFontSet === materialFS || this.iconService.defaultFontSet === materialFSAlias))) {
                return this.implicitLigature;
            }
            return this.noLigature;
        }
        return this.explicitLigature;
    }
    /**
     * @hidden
     * @return {?}
     */
    updateIconClass() {
        const /** @type {?} */ className = this.iconService.fontSetClassName(this.font);
        this.el.nativeElement.classList.add(className);
        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {
            this.el.nativeElement.classList.add(this.iconName);
        }
    }
}
IgxIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-icon',
                template: `<ng-template #noLigature></ng-template>

<ng-template #explicitLigature>
    <ng-content></ng-content>
</ng-template>

<!-- TODO: remove this after glyphName property is deprecated. -->
<ng-template #implicitLigature>
    {{getIconName}}
</ng-template>

<ng-template #svgImage>
    <svg>
        <use [attr.href]="getSvgKey"></use>
    </svg>
</ng-template>

<ng-container *ngTemplateOutlet="template"></ng-container>
`
            },] },
];
/** @nocollapse */
IgxIconComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: IgxIconService, },
];
IgxIconComponent.propDecorators = {
    "noLigature": [{ type: ViewChild, args: ['noLigature', { read: TemplateRef },] },],
    "explicitLigature": [{ type: ViewChild, args: ['explicitLigature', { read: TemplateRef },] },],
    "implicitLigature": [{ type: ViewChild, args: ['implicitLigature', { read: TemplateRef },] },],
    "svgImage": [{ type: ViewChild, args: ['svgImage', { read: TemplateRef },] },],
    "cssClass": [{ type: HostBinding, args: ['class.igx-icon',] },],
    "ariaHidden": [{ type: HostBinding, args: ['attr.aria-hidden',] },],
    "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
    "font": [{ type: Input, args: ['fontSet',] },],
    "active": [{ type: Input, args: ['isActive',] },],
    "iconColor": [{ type: Input, args: ['color',] },],
    "iconName": [{ type: Input, args: ['name',] },],
    "glyphName": [{ type: Input, args: ['iconName',] },],
    "getInactive": [{ type: HostBinding, args: ['class.igx-icon--inactive',] },],
    "getIconColor": [{ type: HostBinding, args: ['style.color',] },],
};
tslib_1.__decorate([
    DeprecateProperty(`'iconName' property is deprecated. To set the icon name for 'material' icons place the name of the icon between ` +
        `the opening and closing tags. For 'Font Awesome' and SVG icons use 'name' property.`),
    tslib_1.__metadata("design:type", String)
], IgxIconComponent.prototype, "glyphName", void 0);
function IgxIconComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxIconComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxIconComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxIconComponent.propDecorators;
    /** @type {?} */
    IgxIconComponent.prototype.noLigature;
    /** @type {?} */
    IgxIconComponent.prototype.explicitLigature;
    /** @type {?} */
    IgxIconComponent.prototype.implicitLigature;
    /** @type {?} */
    IgxIconComponent.prototype.svgImage;
    /**
     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.
     * ```typescript
     * \@ViewChild("MyIcon") public icon: IgxIconComponent;
     * constructor(private cdRef:ChangeDetectorRef) {}
     * ngAfterViewInit() {
     *    this.icon.cssClass = "";
     *    this.cdRef.detectChanges();
     * }
     * ```
     * @type {?}
     */
    IgxIconComponent.prototype.cssClass;
    /**
     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.
     * ```typescript
     * \@ViewChild("MyIcon") public icon: IgxIconComponent;
     * constructor(private cdRef:ChangeDetectorRef) {}
     * ngAfterViewInit() {
     *    this.icon.ariaHidden = false;
     *    this.cdRef.detectChanges();
     * }
     * ```
     * @type {?}
     */
    IgxIconComponent.prototype.ariaHidden;
    /**
     *  An \@Input property that sets the value of the `id` attribute.
     * ```html
     * <igx-icon id="igx-icon-1" fontSet="material" color="blue" [isActive]="false">settings</igx-icon>
     * ```
     * @type {?}
     */
    IgxIconComponent.prototype.id;
    /**
     *  An \@Input property that sets the value of the `fontSet`. By default it's "material".
     * ```html
     * <igx-icon fontSet="material" color="blue" [isActive]="false">settings</igx-icon>
     * ```
     * @type {?}
     */
    IgxIconComponent.prototype.font;
    /**
     *  An \@Input property that allows you to disable the `active` property. By default it's applied.
     * ```html
     * <igx-icon [isActive]="false" fontSet="material" color="blue">settings</igx-icon>
     * ```
     * @type {?}
     */
    IgxIconComponent.prototype.active;
    /**
     *  An \@Input property that allows you to change the `iconColor` of the icon.
     * ```html
     * <igx-icon color="blue" [isActive]="true" fontSet="material">settings</igx-icon>
     * ```
     * @type {?}
     */
    IgxIconComponent.prototype.iconColor;
    /**
     *  An \@Input property that allows you to set the `iconName` of the icon.
     *  The `iconName` can be set using the `name` property.
     * ```html
     * <igx-icon color="blue" [isActive]="true" fontSet="material">question_answer</igx-icon>
     * ```
     * @type {?}
     */
    IgxIconComponent.prototype.iconName;
    /**
     *    An \@Input property that allows you to change the `glyphName` of the icon.
     *    The `glyphName` can be set using `iconName`.
     *    You can provide either ligature `name` or glyph `iconName`, but not both at the same time.
     * ```html
     * <igx-icon iconName="question_answer" color="blue" [isActive]="true" fontSet="material"></igx-icon>
     * ```
     * @type {?}
     */
    IgxIconComponent.prototype.glyphName;
    /**
     * An ElementRef property of the `igx-icon` component.
     * @type {?}
     */
    IgxIconComponent.prototype.el;
    /** @type {?} */
    IgxIconComponent.prototype._el;
    /** @type {?} */
    IgxIconComponent.prototype.iconService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2ljb24vaWNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUcsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7Ozs7Ozs7Ozs7OztBQWNoRSxxQkFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBeUJoQixNQUFNOzs7OztJQTJHRixZQUFvQixHQUFlLEVBQVUsV0FBMkI7UUFBcEQsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFnQjs7Ozs7Ozs7Ozs7O3dCQWpGdEQsVUFBVTs7Ozs7Ozs7Ozs7OzBCQWNSLElBQUk7Ozs7Ozs7a0JBVVosWUFBWSxPQUFPLEVBQUUsRUFBRTs7Ozs7OztzQkFrQm5CLElBQUk7UUF3Q2hCLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ2QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQztRQUM1QyxJQUFJLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0tBQ3ZFOzs7OztJQUtELFFBQVE7UUFDSixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDMUI7Ozs7Ozs7Ozs7OztJQVlELElBQUksVUFBVTtRQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ3BCOzs7Ozs7Ozs7Ozs7SUFZRCxJQUFJLFNBQVM7UUFDVCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0s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QUFFLFdBQVcsRUFBRTt5QkFjM0MsV0FBVyxTQUFDLGdCQUFnQjsyQkFjNUIsV0FBVyxTQUFDLGtCQUFrQjttQkFTOUIsV0FBVyxTQUFDLFNBQVMsY0FDckIsS0FBSztxQkFTTCxLQUFLLFNBQUMsU0FBUzt1QkFTZixLQUFLLFNBQUMsVUFBVTswQkFTaEIsS0FBSyxTQUFDLE9BQU87eUJBVWIsS0FBSyxTQUFDLE1BQU07MEJBYVosS0FBSyxTQUFDLFVBQVU7NEJBMkRoQixXQUFXLFNBQUMsMEJBQTBCOzZCQWV0QyxXQUFXLFNBQUMsYUFBYTs7O0lBNUV6QixpQkFBaUIsQ0FBQyxrSEFBa0g7UUFDakkscUZBQXFGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hJY29uU2VydmljZSB9IGZyb20gJy4vaWNvbi5zZXJ2aWNlJztcbmltcG9ydCB7IERlcHJlY2F0ZVByb3BlcnR5IH0gZnJvbSAnLi4vY29yZS9kZXByZWNhdGVEZWNvcmF0b3JzJztcbi8qKlxuICogKipJZ25pdGUgVUkgZm9yIEFuZ3VsYXIgSWNvbioqIC1cbiAqIFtEb2N1bWVudGF0aW9uXShodHRwczovL3d3dy5pbmZyYWdpc3RpY3MuY29tL3Byb2R1Y3RzL2lnbml0ZS11aS1hbmd1bGFyL2FuZ3VsYXIvY29tcG9uZW50cy9pY29uLmh0bWwpXG4gKlxuICogVGhlIElnbml0ZSBVSSBJY29uIG1ha2VzIGl0IGVhc3kgZm9yIGRldmVsb3BlcnMgdG8gaW5jbHVkZSBtYXRlcmlhbCBkZXNpZ24gaWNvbnMgZGlyZWN0bHkgaW4gdGhlaXIgbWFya3VwLiBUaGUgaWNvbnNcbiAqIHN1cHBvcnQgY3VzdG9tIGNvbG9ycyBhbmQgY2FuIGJlIG1hcmtlZCBhcyBhY3RpdmUgb3IgZGlzYWJsZWQgdXNpbmcgdGhlIGBpc0FjdGl2ZWAgcHJvcGVydHkuIFRoaXMgd2lsbCBjaGFuZ2UgdGhlIGFwcGVhcmVuY2VcbiAqIG9mIHRoZSBpY29uLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGBodG1sXG4gKiA8aWd4LWljb24gY29sb3I9XCIjMDBmZjAwXCIgaXNBY3RpdmU9XCJ0cnVlXCI+aG9tZTwvaWd4LWljb24+XG4gKiBgYGBcbiAqL1xubGV0IE5FWFRfSUQgPSAwO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lneC1pY29uJyxcbiAgICB0ZW1wbGF0ZTogYDxuZy10ZW1wbGF0ZSAjbm9MaWdhdHVyZT48L25nLXRlbXBsYXRlPlxuXG48bmctdGVtcGxhdGUgI2V4cGxpY2l0TGlnYXR1cmU+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuPC9uZy10ZW1wbGF0ZT5cblxuPCEtLSBUT0RPOiByZW1vdmUgdGhpcyBhZnRlciBnbHlwaE5hbWUgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC4gLS0+XG48bmctdGVtcGxhdGUgI2ltcGxpY2l0TGlnYXR1cmU+XG4gICAge3tnZXRJY29uTmFtZX19XG48L25nLXRlbXBsYXRlPlxuXG48bmctdGVtcGxhdGUgI3N2Z0ltYWdlPlxuICAgIDxzdmc+XG4gICAgICAgIDx1c2UgW2F0dHIuaHJlZl09XCJnZXRTdmdLZXlcIj48L3VzZT5cbiAgICA8L3N2Zz5cbjwvbmctdGVtcGxhdGU+XG5cbjxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZVwiPjwvbmctY29udGFpbmVyPlxuYFxufSlcblxuZXhwb3J0IGNsYXNzIElneEljb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBWaWV3Q2hpbGQoJ25vTGlnYXR1cmUnLCB7IHJlYWQ6IFRlbXBsYXRlUmVmIH0pXG4gICAgcHJpdmF0ZSBub0xpZ2F0dXJlOiBUZW1wbGF0ZVJlZjxIVE1MRWxlbWVudD47XG5cbiAgICBAVmlld0NoaWxkKCdleHBsaWNpdExpZ2F0dXJlJywgeyByZWFkOiBUZW1wbGF0ZVJlZiB9KVxuICAgIHByaXZhdGUgZXhwbGljaXRMaWdhdHVyZTogVGVtcGxhdGVSZWY8SFRNTEVsZW1lbnQ+O1xuXG4gICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgYWZ0ZXIgZ2x5cGhOYW1lIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuXG4gICAgQFZpZXdDaGlsZCgnaW1wbGljaXRMaWdhdHVyZScsIHsgcmVhZDogVGVtcGxhdGVSZWYgfSlcbiAgICBwcml2YXRlIGltcGxpY2l0TGlnYXR1cmU6IFRlbXBsYXRlUmVmPEhUTUxFbGVtZW50PjtcblxuICAgIEBWaWV3Q2hpbGQoJ3N2Z0ltYWdlJywgeyByZWFkOiBUZW1wbGF0ZVJlZiB9KVxuICAgIHByaXZhdGUgc3ZnSW1hZ2U6IFRlbXBsYXRlUmVmPEhUTUxFbGVtZW50PjtcblxuICAgIC8qKlxuICAgICAqICBUaGlzIGFsbG93cyB5b3UgdG8gY2hhbmdlIHRoZSB2YWx1ZSBvZiBgY2xhc3MuaWd4LWljb25gLiBCeSBkZWZhdWx0IGl0J3MgYGlneC1pY29uYC5cbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJNeUljb25cIikgcHVibGljIGljb246IElneEljb25Db21wb25lbnQ7XG4gICAgICpjb25zdHJ1Y3Rvcihwcml2YXRlIGNkUmVmOkNoYW5nZURldGVjdG9yUmVmKSB7fVxuICAgICAqbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAqICAgIHRoaXMuaWNvbi5jc3NDbGFzcyA9IFwiXCI7XG4gICAgICogICAgdGhpcy5jZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICp9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtaWNvbicpXG4gICAgcHVibGljIGNzc0NsYXNzID0gJ2lneC1pY29uJztcblxuICAgIC8qKlxuICAgICAqICBUaGlzIGFsbG93cyB5b3UgdG8gZGlzYWJsZSB0aGUgYGFyaWEtaGlkZGVuYCBhdHRyaWJ1dGUuIEJ5IGRlZmF1bHQgaXQncyBhcHBsaWVkLlxuICAgICAqYGBgdHlwZXNjcmlwdFxuICAgICAqQFZpZXdDaGlsZChcIk15SWNvblwiKSBwdWJsaWMgaWNvbjogSWd4SWNvbkNvbXBvbmVudDtcbiAgICAgKmNvbnN0cnVjdG9yKHByaXZhdGUgY2RSZWY6Q2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG4gICAgICpuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICogICAgdGhpcy5pY29uLmFyaWFIaWRkZW4gPSBmYWxzZTtcbiAgICAgKiAgICB0aGlzLmNkUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgKn1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1oaWRkZW4nKVxuICAgIHB1YmxpYyBhcmlhSGlkZGVuID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICogIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIHZhbHVlIG9mIHRoZSBgaWRgIGF0dHJpYnV0ZS5cbiAgICAqYGBgaHRtbFxuICAgICo8aWd4LWljb24gaWQ9XCJpZ3gtaWNvbi0xXCIgZm9udFNldD1cIm1hdGVyaWFsXCIgY29sb3I9XCJibHVlXCIgW2lzQWN0aXZlXT1cImZhbHNlXCI+c2V0dGluZ3M8L2lneC1pY29uPlxuICAgICpgYGBcbiAgICAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci5pZCcpXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaWQgPSBgaWd4LWljb24tJHtORVhUX0lEKyt9YDtcblxuICAgIC8qKlxuICAgICogIEFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIHZhbHVlIG9mIHRoZSBgZm9udFNldGAuIEJ5IGRlZmF1bHQgaXQncyBcIm1hdGVyaWFsXCIuXG4gICAgKmBgYGh0bWxcbiAgICAqPGlneC1pY29uIGZvbnRTZXQ9XCJtYXRlcmlhbFwiIGNvbG9yPVwiYmx1ZVwiIFtpc0FjdGl2ZV09XCJmYWxzZVwiPnNldHRpbmdzPC9pZ3gtaWNvbj5cbiAgICAqYGBgXG4gICAgKi9cbiAgICBASW5wdXQoJ2ZvbnRTZXQnKVxuICAgIHB1YmxpYyBmb250OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAqICBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBhbGxvd3MgeW91IHRvIGRpc2FibGUgdGhlIGBhY3RpdmVgIHByb3BlcnR5LiBCeSBkZWZhdWx0IGl0J3MgYXBwbGllZC5cbiAgICAqYGBgaHRtbFxuICAgICo8aWd4LWljb24gW2lzQWN0aXZlXT1cImZhbHNlXCIgZm9udFNldD1cIm1hdGVyaWFsXCIgY29sb3I9XCJibHVlXCI+c2V0dGluZ3M8L2lneC1pY29uPlxuICAgICpgYGBcbiAgICAqL1xuICAgIEBJbnB1dCgnaXNBY3RpdmUnKVxuICAgIHB1YmxpYyBhY3RpdmUgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgKiAgQW4gQElucHV0IHByb3BlcnR5IHRoYXQgYWxsb3dzIHlvdSB0byBjaGFuZ2UgdGhlIGBpY29uQ29sb3JgIG9mIHRoZSBpY29uLlxuICAgICpgYGBodG1sXG4gICAgKjxpZ3gtaWNvbiBjb2xvcj1cImJsdWVcIiBbaXNBY3RpdmVdPVwidHJ1ZVwiIGZvbnRTZXQ9XCJtYXRlcmlhbFwiPnNldHRpbmdzPC9pZ3gtaWNvbj5cbiAgICAqYGBgXG4gICAgKi9cbiAgICBASW5wdXQoJ2NvbG9yJylcbiAgICBwdWJsaWMgaWNvbkNvbG9yOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAqICBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBhbGxvd3MgeW91IHRvIHNldCB0aGUgYGljb25OYW1lYCBvZiB0aGUgaWNvbi5cbiAgICAqICBUaGUgYGljb25OYW1lYCBjYW4gYmUgc2V0IHVzaW5nIHRoZSBgbmFtZWAgcHJvcGVydHkuXG4gICAgKmBgYGh0bWxcbiAgICAqPGlneC1pY29uIGNvbG9yPVwiYmx1ZVwiIFtpc0FjdGl2ZV09XCJ0cnVlXCIgZm9udFNldD1cIm1hdGVyaWFsXCI+cXVlc3Rpb25fYW5zd2VyPC9pZ3gtaWNvbj5cbiAgICAqYGBgXG4gICAgKi9cbiAgICBASW5wdXQoJ25hbWUnKVxuICAgIHB1YmxpYyBpY29uTmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgKiAgICBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBhbGxvd3MgeW91IHRvIGNoYW5nZSB0aGUgYGdseXBoTmFtZWAgb2YgdGhlIGljb24uXG4gICAgKiAgICBUaGUgYGdseXBoTmFtZWAgY2FuIGJlIHNldCB1c2luZyBgaWNvbk5hbWVgLlxuICAgICogICAgWW91IGNhbiBwcm92aWRlIGVpdGhlciBsaWdhdHVyZSBgbmFtZWAgb3IgZ2x5cGggYGljb25OYW1lYCwgYnV0IG5vdCBib3RoIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAgKmBgYGh0bWxcbiAgICAqPGlneC1pY29uIGljb25OYW1lPVwicXVlc3Rpb25fYW5zd2VyXCIgY29sb3I9XCJibHVlXCIgW2lzQWN0aXZlXT1cInRydWVcIiBmb250U2V0PVwibWF0ZXJpYWxcIj48L2lneC1pY29uPlxuICAgICpgYGBcbiAgICAqL1xuICAgIEBEZXByZWNhdGVQcm9wZXJ0eShgJ2ljb25OYW1lJyBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkLiBUbyBzZXQgdGhlIGljb24gbmFtZSBmb3IgJ21hdGVyaWFsJyBpY29ucyBwbGFjZSB0aGUgbmFtZSBvZiB0aGUgaWNvbiBiZXR3ZWVuIGAgK1xuICAgICAgICBgdGhlIG9wZW5pbmcgYW5kIGNsb3NpbmcgdGFncy4gRm9yICdGb250IEF3ZXNvbWUnIGFuZCBTVkcgaWNvbnMgdXNlICduYW1lJyBwcm9wZXJ0eS5gKVxuICAgIEBJbnB1dCgnaWNvbk5hbWUnKVxuICAgIHB1YmxpYyBnbHlwaE5hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEFuIEVsZW1lbnRSZWYgcHJvcGVydHkgb2YgdGhlIGBpZ3gtaWNvbmAgY29tcG9uZW50LlxuICAgICAqL1xuICAgIHB1YmxpYyBlbDogRWxlbWVudFJlZjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsOiBFbGVtZW50UmVmLCBwcml2YXRlIGljb25TZXJ2aWNlOiBJZ3hJY29uU2VydmljZSkge1xuICAgICAgICB0aGlzLmVsID0gX2VsO1xuICAgICAgICB0aGlzLmZvbnQgPSB0aGlzLmljb25TZXJ2aWNlLmRlZmF1bHRGb250U2V0O1xuICAgICAgICB0aGlzLmljb25TZXJ2aWNlLnJlZ2lzdGVyRm9udFNldEFsaWFzKCdtYXRlcmlhbCcsICdtYXRlcmlhbC1pY29ucycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVJY29uQ2xhc3MoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgQW4gYWNjZXNzb3IgdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZm9udCBwcm9wZXJ0eS5cbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJNeUljb25cIilcbiAgICAgKnB1YmxpYyBpY29uOiBJZ3hJY29uQ29tcG9uZW50O1xuICAgICAqbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAqICAgIGxldCBpY29uRm9udCA9IHRoaXMuaWNvbi5nZXRGb250U2V0O1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgZ2V0Rm9udFNldCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5mb250O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBBbiBhY2Nlc3NvciB0aGF0IHJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBhY3RpdmUgcHJvcGVydHkuXG4gICAgICpgYGB0eXBlc2NyaXB0XG4gICAgICpAVmlld0NoaWxkKFwiTXlJY29uXCIpXG4gICAgICpwdWJsaWMgaWNvbjogSWd4SWNvbkNvbXBvbmVudDtcbiAgICAgKm5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgKiAgICBsZXQgaWNvbkFjdGl2ZSA9IHRoaXMuaWNvbi5nZXRBY3RpdmU7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBnZXRBY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgQW4gYWNjZXNzb3IgdGhhdCByZXR1cm5zIGluYWN0aXZlIHByb3BlcnR5LlxuICAgICAqYGBgdHlwZXNjcmlwdFxuICAgICAqQFZpZXdDaGlsZChcIk15SWNvblwiKVxuICAgICAqcHVibGljIGljb246IElneEljb25Db21wb25lbnQ7XG4gICAgICpuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICogICAgbGV0IGljb25BY3RpdmUgPSB0aGlzLmljb24uZ2V0SW5hY3RpdmU7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWljb24tLWluYWN0aXZlJylcbiAgICBnZXQgZ2V0SW5hY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5hY3RpdmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIEFuIGFjY2Vzc29yIHRoYXQgcmV0dXJucyB0aGUgb3Bwb3NpdGUgdmFsdWUgb2YgdGhlIGBpY29uQ29sb3JgIHByb3BlcnR5LlxuICAgICAqYGBgdHlwZXNjcmlwdFxuICAgICAqQFZpZXdDaGlsZChcIk15SWNvblwiKVxuICAgICAqcHVibGljIGljb246IElneEljb25Db21wb25lbnQ7XG4gICAgICpuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICogICAgbGV0IGljb25Db2xvciA9IHRoaXMuaWNvbi5nZXRJY29uQ29sb3I7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnc3R5bGUuY29sb3InKVxuICAgIGdldCBnZXRJY29uQ29sb3IoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWNvbkNvbG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBBbiBhY2Nlc3NvciB0aGF0IHJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBpY29uTmFtZSBwcm9wZXJ0eS5cbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJNeUljb25cIilcbiAgICAgKnB1YmxpYyBpY29uOiBJZ3hJY29uQ29tcG9uZW50O1xuICAgICAqbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAqICAgIGxldCBpY29uTmFtZSA9IHRoaXMuaWNvbi5nZXRJY29uTmFtZTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGdldEljb25OYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmljb25OYW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBBbiBhY2Nlc3NvciB0aGF0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgU1ZHIGltYWdlLlxuICAgICAqICBUaGUga2V5IGNvbnNpc3RzIG9mIHRoZSBmb250U2V0IGFuZCB0aGUgaWNvbk5hbWUgc2VwYXJhdGVkIGJ5IHVuZGVyc2NvcmUuXG4gICAgICpgYGB0eXBlc2NyaXB0XG4gICAgICpAVmlld0NoaWxkKFwiTXlJY29uXCIpXG4gICAgICpwdWJsaWMgaWNvbjogSWd4SWNvbkNvbXBvbmVudDtcbiAgICAgKm5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgKiAgICBsZXQgc3ZnS2V5ID0gdGhpcy5pY29uLmdldFN2Z0tleTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGdldFN2Z0tleSgpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy5pY29uU2VydmljZS5pc1N2Z0ljb25DYWNoZWQodGhpcy5pY29uTmFtZSwgdGhpcy5mb250KSkge1xuICAgICAgICAgICAgcmV0dXJuICcjJyArIHRoaXMuaWNvblNlcnZpY2UuZ2V0U3ZnSWNvbktleSh0aGlzLmljb25OYW1lLCB0aGlzLmZvbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogICBBbiBhY2Nlc3NvciB0aGF0IHJldHVybnMgYSBUZW1wbGF0ZVJlZiB0byBleHBsaWNpdCwgc3ZnIG9yIG5vIGxpZ2F0dXJlLlxuICAgICAqYGBgdHlwZXNjcmlwdFxuICAgICAqQFZpZXdDaGlsZChcIk15SWNvblwiKVxuICAgICAqcHVibGljIGljb246IElneEljb25Db21wb25lbnQ7XG4gICAgICpuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICogICAgbGV0IGljb25UZW1wbGF0ZSA9IHRoaXMuaWNvbi50ZW1wbGF0ZTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IHRlbXBsYXRlKCk6IFRlbXBsYXRlUmVmPEhUTUxFbGVtZW50PiB7XG4gICAgICAgIGlmICh0aGlzLmljb25OYW1lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pY29uU2VydmljZS5pc1N2Z0ljb25DYWNoZWQodGhpcy5pY29uTmFtZSwgdGhpcy5mb250KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN2Z0ltYWdlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyBhZnRlciBnbHlwaE5hbWUgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC5cbiAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsRlMgPSAnbWF0ZXJpYWwtaWNvbnMnO1xuICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxGU0FsaWFzID0gJ21hdGVyaWFsJztcbiAgICAgICAgICAgIGlmICh0aGlzLmZvbnQgPT09IG1hdGVyaWFsRlMgfHwgdGhpcy5mb250ID09PSBtYXRlcmlhbEZTQWxpYXMgfHxcbiAgICAgICAgICAgICAgICAoIXRoaXMuZm9udCAmJiAodGhpcy5pY29uU2VydmljZS5kZWZhdWx0Rm9udFNldCA9PT0gbWF0ZXJpYWxGUyB8fCB0aGlzLmljb25TZXJ2aWNlLmRlZmF1bHRGb250U2V0ID09PSBtYXRlcmlhbEZTQWxpYXMpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmltcGxpY2l0TGlnYXR1cmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vTGlnYXR1cmU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5leHBsaWNpdExpZ2F0dXJlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIHVwZGF0ZUljb25DbGFzcygpIHtcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gdGhpcy5pY29uU2VydmljZS5mb250U2V0Q2xhc3NOYW1lKHRoaXMuZm9udCk7XG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuaWNvbk5hbWUgJiYgIXRoaXMuaWNvblNlcnZpY2UuaXNTdmdJY29uQ2FjaGVkKHRoaXMuaWNvbk5hbWUsIHRoaXMuZm9udCkpIHtcbiAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuaWNvbk5hbWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19