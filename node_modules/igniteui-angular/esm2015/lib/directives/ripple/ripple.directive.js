/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';
export class IgxRippleDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} zone
     */
    constructor(elementRef, renderer, zone) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.zone = zone;
        /**
         * Sets/gets the ripple target.
         * ```html
         * <div  #rippleContainer class="div-1" igxRipple [igxRippleTarget] = "'.div-1'"></div>
         * ```
         * ```typescript
         * \@ViewChild('rippleContainer', {read: IgxRippleDirective})
         * public ripple: IgxRippleDirective;
         * let rippleTarget = this.ripple.rippleTarget;
         * ```
         * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.
         * ```html
         * <div #rippleContainer [igxRippleTarget] = "'#child"'>
         *  <button id="child">Click</button>
         * </div>
         * ```
         * \@memberof IgxRippleDirective
         */
        this.rippleTarget = '';
        /**
         * Sets/gets the ripple duration(in milliseconds).
         * Default value is `600`.
         * ```html
         * <button #rippleContainer igxRipple [igxRippleDuration] = "800"></button>
         * ```
         * ```typescript
         * \@ViewChild('rippleContainer', {read: IgxRippleDirective})
         * public ripple: IgxRippleDirective;
         * let rippleDuration = this.ripple.rippleDuration;
         * ```
         * \@memberof IgxRippleDirective
         */
        this.rippleDuration = 600;
        /**
         * Sets/gets whether the ripple is disabled.
         * Default value is `false`.
         * ```html
         * <button #rippleContainer igxRipple [igxRippleDisabled] = "true"></button>
         * ```
         * ```typescript
         * \@ViewChild('rippleContainer', {read: IgxRippleDirective})
         * public ripple: IgxRippleDirective;
         * let isRippleDisabled = this.ripple.rippleDisabled;
         * ```
         * \@memberof IgxRippleDirective
         */
        this.rippleDisabled = false;
        this.rippleElementClass = 'igx-ripple__inner';
        this.rippleHostClass = 'igx-ripple';
        this.animationFrames = [
            { opacity: 0.5, transform: 'scale(.3)' },
            { opacity: 0, transform: 'scale(2)' }
        ];
        this._centered = false;
        this.animationQueue = [];
    }
    /**
     * Enables/disables the ripple to be centered.
     * ```html
     * <button #rippleContainer igxRipple [igxRippleCentered] = "true"></button>
     * ```
     * \@memberof IgxRippleDirective
     * @param {?} value
     * @return {?}
     */
    set centered(value) {
        this._centered = value || this.centered;
    }
    /**
     * @return {?}
     */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onMouseDown(event) {
        this.zone.runOutsideAngular(() => this._ripple(event));
    }
    /**
     * @param {?} rippleElement
     * @param {?} styleParams
     * @return {?}
     */
    setStyles(rippleElement, styleParams) {
        this.renderer.addClass(rippleElement, this.rippleElementClass);
        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);
        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);
        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);
        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);
        if (this.rippleColor) {
            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _ripple(event) {
        if (this.rippleDisabled) {
            return;
        }
        const /** @type {?} */ target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);
        const /** @type {?} */ rectBounds = target.getBoundingClientRect();
        const /** @type {?} */ radius = Math.max(rectBounds.width, rectBounds.height);
        let /** @type {?} */ left = event.clientX - rectBounds.left - radius / 2;
        let /** @type {?} */ top = event.clientY - rectBounds.top - radius / 2;
        if (this._centered) {
            left = top = 0;
        }
        const /** @type {?} */ dimensions = {
            radius,
            top,
            left
        };
        const /** @type {?} */ rippleElement = this.renderer.createElement('span');
        this.setStyles(rippleElement, dimensions);
        this.renderer.addClass(target, this.rippleHostClass);
        this.renderer.appendChild(target, rippleElement);
        const /** @type {?} */ animation = rippleElement.animate(this.animationFrames, { duration: this.rippleDuration, fill: 'forwards' });
        this.animationQueue.push(animation);
        animation.onfinish = () => {
            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);
            target.removeChild(rippleElement);
            if (this.animationQueue.length < 1) {
                this.renderer.removeClass(target, this.rippleHostClass);
            }
        };
    }
}
IgxRippleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxRipple]'
            },] },
];
/** @nocollapse */
IgxRippleDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: NgZone, },
];
IgxRippleDirective.propDecorators = {
    "rippleTarget": [{ type: Input, args: ['igxRippleTarget',] },],
    "rippleColor": [{ type: Input, args: ['igxRipple',] },],
    "rippleDuration": [{ type: Input, args: ['igxRippleDuration',] },],
    "centered": [{ type: Input, args: ['igxRippleCentered',] },],
    "rippleDisabled": [{ type: Input, args: ['igxRippleDisabled',] },],
    "onMouseDown": [{ type: HostListener, args: ['mousedown', ['$event'],] },],
};
function IgxRippleDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxRippleDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxRippleDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxRippleDirective.propDecorators;
    /**
     * Sets/gets the ripple target.
     * ```html
     * <div  #rippleContainer class="div-1" igxRipple [igxRippleTarget] = "'.div-1'"></div>
     * ```
     * ```typescript
     * \@ViewChild('rippleContainer', {read: IgxRippleDirective})
     * public ripple: IgxRippleDirective;
     * let rippleTarget = this.ripple.rippleTarget;
     * ```
     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.
     * ```html
     * <div #rippleContainer [igxRippleTarget] = "'#child"'>
     *  <button id="child">Click</button>
     * </div>
     * ```
     * \@memberof IgxRippleDirective
     * @type {?}
     */
    IgxRippleDirective.prototype.rippleTarget;
    /**
     * Sets/gets the ripple color.
     * ```html
     * <button #rippleContainer [igxRipple] = "'red'" ></button>
     * ```
     * ```typescript
     * \@ViewChild('rippleContainer', {read: IgxRippleDirective})
     * public ripple: IgxRippleDirective;
     * let rippleColor = this.ripple.rippleColor;
     * ```
     * \@memberof IgxRippleDirective
     * @type {?}
     */
    IgxRippleDirective.prototype.rippleColor;
    /**
     * Sets/gets the ripple duration(in milliseconds).
     * Default value is `600`.
     * ```html
     * <button #rippleContainer igxRipple [igxRippleDuration] = "800"></button>
     * ```
     * ```typescript
     * \@ViewChild('rippleContainer', {read: IgxRippleDirective})
     * public ripple: IgxRippleDirective;
     * let rippleDuration = this.ripple.rippleDuration;
     * ```
     * \@memberof IgxRippleDirective
     * @type {?}
     */
    IgxRippleDirective.prototype.rippleDuration;
    /**
     * Sets/gets whether the ripple is disabled.
     * Default value is `false`.
     * ```html
     * <button #rippleContainer igxRipple [igxRippleDisabled] = "true"></button>
     * ```
     * ```typescript
     * \@ViewChild('rippleContainer', {read: IgxRippleDirective})
     * public ripple: IgxRippleDirective;
     * let isRippleDisabled = this.ripple.rippleDisabled;
     * ```
     * \@memberof IgxRippleDirective
     * @type {?}
     */
    IgxRippleDirective.prototype.rippleDisabled;
    /** @type {?} */
    IgxRippleDirective.prototype.rippleElementClass;
    /** @type {?} */
    IgxRippleDirective.prototype.rippleHostClass;
    /** @type {?} */
    IgxRippleDirective.prototype.animationFrames;
    /** @type {?} */
    IgxRippleDirective.prototype._centered;
    /** @type {?} */
    IgxRippleDirective.prototype.animationQueue;
    /** @type {?} */
    IgxRippleDirective.prototype.elementRef;
    /** @type {?} */
    IgxRippleDirective.prototype.renderer;
    /** @type {?} */
    IgxRippleDirective.prototype.zone;
}
/**
 * The IgxRippleModule provides the {\@link IgxRippleDirective} inside your application.
 */
export class IgxRippleModule {
}
IgxRippleModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxRippleDirective],
                exports: [IgxRippleDirective]
            },] },
];
function IgxRippleModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxRippleModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxRippleModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,