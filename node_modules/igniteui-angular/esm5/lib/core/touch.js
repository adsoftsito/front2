/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, NgZone } from '@angular/core';
import { DOCUMENT, ÉµgetDOM as getDOM } from '@angular/platform-browser';
var /** @type {?} */ EVENT_SUFFIX = 'precise';
/**
 * Touch gestures manager based on Hammer.js
 * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.
 * @hidden
 */
var HammerGesturesManager = /** @class */ (function () {
    function HammerGesturesManager(_zone, doc) {
        this._zone = _zone;
        this.doc = doc;
        /**
         * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.
         */
        this.hammerOptions = {
            // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)
            // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803
            inputClass: Hammer.TouchInput,
            recognizers: [
                [Hammer.Pan, { threshold: 0 }],
                [Hammer.Pinch, { enable: true }],
                [Hammer.Rotate, { enable: true }],
                [Hammer.Swipe, {
                        direction: Hammer.DIRECTION_HORIZONTAL
                    }]
            ]
        };
        this._hammerManagers = [];
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    HammerGesturesManager.prototype.supports = /**
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) {
        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);
    };
    /**
     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.
     * Modeling after other event plugins for easy future modifications.
     * @param {?} element
     * @param {?} eventName
     * @param {?} eventHandler
     * @param {?=} options
     * @return {?}
     */
    HammerGesturesManager.prototype.addEventListener = /**
     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.
     * Modeling after other event plugins for easy future modifications.
     * @param {?} element
     * @param {?} eventName
     * @param {?} eventHandler
     * @param {?=} options
     * @return {?}
     */
    function (element, eventName, eventHandler, options) {
        var _this = this;
        if (options === void 0) { options = null; }
        // Creating the manager bind events, must be done outside of angular
        return this._zone.runOutsideAngular(function () {
            var /** @type {?} */ mc = _this.getManagerForElement(element);
            if (mc === null) {
                // new Hammer is a shortcut for Manager with defaults
                mc = new Hammer(element, _this.hammerOptions);
                _this.addManagerForElement(element, mc);
            }
            var /** @type {?} */ handler = function (eventObj) { _this._zone.run(function () { eventHandler(eventObj); }); };
            mc.on(eventName, handler);
            return function () { mc.off(eventName, handler); };
        });
    };
    /**
     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.
     * Modeling after other event plugins for easy future modifications.
     *
     * @param {?} target Can be one of either window, body or document(fallback default).
     * @param {?} eventName
     * @param {?} eventHandler
     * @return {?}
     */
    HammerGesturesManager.prototype.addGlobalEventListener = /**
     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.
     * Modeling after other event plugins for easy future modifications.
     *
     * @param {?} target Can be one of either window, body or document(fallback default).
     * @param {?} eventName
     * @param {?} eventHandler
     * @return {?}
     */
    function (target, eventName, eventHandler) {
        var /** @type {?} */ element = this.getGlobalEventTarget(target);
        // Creating the manager bind events, must be done outside of angular
        return this.addEventListener(/** @type {?} */ (element), eventName, eventHandler);
    };
    /**
     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.
     * Supported: window, document, body. Defaults to document for invalid args.
     * @param {?} target Target name
     * @return {?}
     */
    HammerGesturesManager.prototype.getGlobalEventTarget = /**
     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.
     * Supported: window, document, body. Defaults to document for invalid args.
     * @param {?} target Target name
     * @return {?}
     */
    function (target) {
        return getDOM().getGlobalEventTarget(this.doc, target);
    };
    /**
     * Set HammerManager options.
     *
     * @param {?} element The DOM element used to create the manager on.
     *
     * ### Example
     *
     * ```ts
     * manager.setManagerOption(myElem, "pan", { pointers: 1 });
     * ```
     * @param {?} event
     * @param {?} options
     * @return {?}
     */
    HammerGesturesManager.prototype.setManagerOption = /**
     * Set HammerManager options.
     *
     * @param {?} element The DOM element used to create the manager on.
     *
     * ### Example
     *
     * ```ts
     * manager.setManagerOption(myElem, "pan", { pointers: 1 });
     * ```
     * @param {?} event
     * @param {?} options
     * @return {?}
     */
    function (element, event, options) {
        var /** @type {?} */ manager = this.getManagerForElement(element);
        manager.get(event).set(options);
    };
    /**
     * Add an element and manager map to the internal collection.
     *
     * @param {?} element The DOM element used to create the manager on.
     * @param {?} manager
     * @return {?}
     */
    HammerGesturesManager.prototype.addManagerForElement = /**
     * Add an element and manager map to the internal collection.
     *
     * @param {?} element The DOM element used to create the manager on.
     * @param {?} manager
     * @return {?}
     */
    function (element, manager) {
        this._hammerManagers.push({ element: element, manager: manager });
    };
    /**
     * Get HammerManager for the element or null
     *
     * @param {?} element The DOM element used to create the manager on.
     * @return {?}
     */
    HammerGesturesManager.prototype.getManagerForElement = /**
     * Get HammerManager for the element or null
     *
     * @param {?} element The DOM element used to create the manager on.
     * @return {?}
     */
    function (element) {
        var /** @type {?} */ result = this._hammerManagers.filter(function (value, index, array) {
            return value.element === element;
        });
        return result.length ? result[0].manager : null;
    };
    /**
     * Destroys the HammerManager for the element, removing event listeners in the process.
     *
     * @param {?} element The DOM element used to create the manager on.
     * @return {?}
     */
    HammerGesturesManager.prototype.removeManagerForElement = /**
     * Destroys the HammerManager for the element, removing event listeners in the process.
     *
     * @param {?} element The DOM element used to create the manager on.
     * @return {?}
     */
    function (element) {
        var /** @type {?} */ index = null;
        for (var /** @type {?} */ i = 0; i < this._hammerManagers.length; i++) {
            if (element === this._hammerManagers[i].element) {
                index = i;
                break;
            }
        }
        if (index !== null) {
            var /** @type {?} */ item = this._hammerManagers.splice(index, 1)[0];
            // destroy also
            item.manager.destroy();
        }
    };
    /**
     * Destroys all internally tracked HammerManagers, removing event listeners in the process.
     * @return {?}
     */
    HammerGesturesManager.prototype.destroy = /**
     * Destroys all internally tracked HammerManagers, removing event listeners in the process.
     * @return {?}
     */
    function () {
        try {
            for (var _a = tslib_1.__values(this._hammerManagers), _b = _a.next(); !_b.done; _b = _a.next()) {
                var item = _b.value;
                item.manager.destroy();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this._hammerManagers = [];
        var e_1, _c;
    };
    HammerGesturesManager.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    HammerGesturesManager.ctorParameters = function () { return [
        { type: NgZone, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    return HammerGesturesManager;
}());
export { HammerGesturesManager };
function HammerGesturesManager_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    HammerGesturesManager.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    HammerGesturesManager.ctorParameters;
    /**
     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.
     * @type {?}
     */
    HammerGesturesManager.prototype.hammerOptions;
    /** @type {?} */
    HammerGesturesManager.prototype._hammerManagers;
    /** @type {?} */
    HammerGesturesManager.prototype._zone;
    /** @type {?} */
    HammerGesturesManager.prototype.doc;
}

//# sourceMappingURL=data:application/json;base64,