/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, HostListener, Input, ViewChild, } from '@angular/core';
import { IgxSelectionAPIService } from '../../core/selection';
import { GridBaseAPIService } from '../api.service';
import { first } from 'rxjs/operators';
export class IgxGridGroupByRowComponent {
    /**
     * @param {?} gridAPI
     * @param {?} selection
     * @param {?} element
     * @param {?} cdr
     */
    constructor(gridAPI, selection, element, cdr) {
        this.gridAPI = gridAPI;
        this.selection = selection;
        this.element = element;
        this.cdr = cdr;
        /**
         * @hidden
         */
        this.defaultCssClass = 'igx-grid__group-row';
        /**
         * @hidden
         */
        this.paddingIndentationCssClass = 'igx-grid__group-row--padding-level';
        /**
         * @hidden
         */
        this.isFocused = false;
        /**
         * @hidden
         */
        this.tabindex = 0;
    }
    /**
     * Returns whether the row is focused.
     * ```
     * let gridRowFocused = this.grid1.rowList.first.focused;
     * ```
     * @return {?}
     */
    get focused() {
        return this.isFocused;
    }
    /**
     * Returns whether the group row is expanded.
     * ```typescript
     * const groupRowExpanded = this.grid1.rowList.first.expanded;
     * ```
     * @return {?}
     */
    get expanded() {
        return this.grid.isExpandedGroup(this.groupRow);
    }
    /**
     * @hidden
     * @return {?}
     */
    get describedBy() {
        const /** @type {?} */ grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';
        return this.gridID + '_' + grRowExpr;
    }
    /**
     * @return {?}
     */
    get dataRowIndex() {
        return this.index;
    }
    /**
     * Returns a reference to the underlying HTML element.
     * ```typescript
     * const groupRowElement = this.nativeElement;
     * ```
     * @return {?}
     */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * Returns the style classes applied to the group rows.
     * ```typescript
     * const groupCssStyles = this.grid1.rowList.first.styleClasses;
     * ```
     * @return {?}
     */
    get styleClasses() {
        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +
            (this.focused ? ` ${this.defaultCssClass}--active` : '');
    }
    /**
     * @hidden
     * @return {?}
     */
    onFocus() {
        this.isFocused = true;
    }
    /**
     * @hidden
     * @return {?}
     */
    onBlur() {
        this.isFocused = false;
    }
    /**
     * Toggles the group row.
     * ```typescript
     * this.grid1.rowList.first.toggle()
     * ```
     * @param {?=} key
     * @return {?}
     */
    toggle(key) {
        const /** @type {?} */ shouldExpand = (!key && !this.expanded) || (key && !this.expanded && (key === 'arrowleft' || key === 'left'));
        this.handleToggleScroll();
        if (!shouldExpand) {
            this.grid.verticalScrollContainer.getVerticalScroll().dispatchEvent(new Event('scroll'));
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydown(event) {
        event.preventDefault();
        event.stopPropagation();
        const /** @type {?} */ alt = event.altKey;
        const /** @type {?} */ key = event.key.toLowerCase();
        if (!this.isKeySupportedInGroupRow(key) || event.ctrlKey) {
            return;
        }
        if (this.isToggleKey(key)) {
            if (!alt) {
                return;
            }
            this.toggle(key);
            return;
        }
        const /** @type {?} */ args = { cell: null, groupRow: this, event: event, cancel: false };
        this.grid.onFocusChange.emit(args);
        if (args.cancel) {
            return;
        }
        const /** @type {?} */ colIndex = this._getSelectedColIndex() || 0;
        const /** @type {?} */ visibleColumnIndex = this.grid.columnList.toArray()[colIndex].visibleIndex !== -1 ?
            this.grid.columnList.toArray()[colIndex].visibleIndex : 0;
        switch (key) {
            case 'arrowdown':
            case 'down':
                this.grid.navigation.navigateDown(this.nativeElement, this.index, visibleColumnIndex);
                break;
            case 'arrowup':
            case 'up':
                this.grid.navigation.navigateUp(this.nativeElement, this.index, visibleColumnIndex);
                break;
            case 'tab':
                if (event.shiftKey) {
                    this.grid.navigation.navigateUp(this.nativeElement, this.index, this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex);
                }
                else {
                    this.grid.navigation.navigateDown(this.nativeElement, this.index, 0);
                }
                break;
        }
    }
    /**
     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.
     * ```typescript
     * this.grid1.rowList.first.grid;
     * ```
     * @return {?}
     */
    get grid() {
        return this.gridAPI.get(this.gridID);
    }
    /**
     * @hidden
     * @return {?}
     */
    get dataType() {
        return this.grid.getColumnByName(this.groupRow.expression.fieldName).dataType;
    }
    /**
     * @return {?}
     */
    _getSelectedColIndex() {
        const /** @type {?} */ cell = this.selection.first_item(this.gridID + '-cell');
        if (cell) {
            return cell.columnID;
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    isKeySupportedInGroupRow(key) {
        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',
            'tab'].indexOf(key) !== -1;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    isToggleKey(key) {
        return ['left', 'right', 'arrowleft', 'arrowright'].indexOf(key) !== -1;
    }
    /**
     * @return {?}
     */
    handleToggleScroll() {
        if (this.grid.rowList.length > 0 && this.grid.rowList.last.index ===
            this.grid.verticalScrollContainer.igxForOf.length - 1) {
            const /** @type {?} */ groupRowIndex = this.index;
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(() => {
                this.grid.nativeElement.querySelector(`[data-rowIndex="${groupRowIndex}"]`).focus();
            });
        }
        this.grid.toggleGroup(this.groupRow);
    }
}
IgxGridGroupByRowComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-grid-groupby-row',
                template: `<ng-container #defaultGroupRow>
    <div (click)="toggle()" class="igx-grid__grouping-indicator">
        <igx-icon *ngIf="!expanded" fontSet="material">chevron_right</igx-icon>
        <igx-icon *ngIf="expanded" fontSet="material">expand_more</igx-icon>
    </div>

    <div class="igx-grid__group-content" #groupContent>
        <ng-container *ngTemplateOutlet="grid.groupRowTemplate ? grid.groupRowTemplate : defaultGroupByTemplate; context: { $implicit: groupRow }">
        </ng-container>
    </div>

    <ng-template #defaultGroupByTemplate>
        <div class="igx-group-label">
            <igx-icon fontSet="material" class="igx-group-label__icon">group_work</igx-icon>
            <span class="igx-group-label__column-name">
            {{ groupRow.expression ? groupRow.expression.fieldName : '' }}:
            </span>

            <ng-container *ngIf="dataType === 'boolean' || dataType === 'string'; else default" >
                <span class="igx-group-label__text">{{ groupRow.value }}</span>
            </ng-container>
            <ng-template #default>
                <ng-container *ngIf="dataType === 'number'">
                    <span class="igx-group-label__text">{{ groupRow.value | number }}</span>
                </ng-container>
                <ng-container *ngIf="dataType === 'date'">
                    <span class="igx-group-label__text">{{ groupRow.value | date }}</span>
                </ng-container>
            </ng-template>

            <igx-badge [value]="groupRow.records ? groupRow.records.length : 0" class='igx-group-label__count-badge'></igx-badge>
        </div>
    </ng-template>
</ng-container>
`
            },] },
];
/** @nocollapse */
IgxGridGroupByRowComponent.ctorParameters = () => [
    { type: GridBaseAPIService, },
    { type: IgxSelectionAPIService, },
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
];
IgxGridGroupByRowComponent.propDecorators = {
    "index": [{ type: Input },],
    "gridID": [{ type: Input },],
    "groupRow": [{ type: Input },],
    "groupContent": [{ type: ViewChild, args: ['groupContent',] },],
    "expanded": [{ type: HostBinding, args: ['attr.aria-expanded',] },],
    "tabindex": [{ type: HostBinding, args: ['attr.tabindex',] },],
    "describedBy": [{ type: HostBinding, args: ['attr.aria-describedby',] },],
    "dataRowIndex": [{ type: HostBinding, args: ['attr.data-rowIndex',] },],
    "styleClasses": [{ type: HostBinding, args: ['class',] },],
    "onFocus": [{ type: HostListener, args: ['focus',] },],
    "onBlur": [{ type: HostListener, args: ['blur',] },],
    "onKeydown": [{ type: HostListener, args: ['keydown', ['$event'],] },],
};
function IgxGridGroupByRowComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridGroupByRowComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridGroupByRowComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxGridGroupByRowComponent.propDecorators;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.defaultCssClass;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.paddingIndentationCssClass;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.isFocused;
    /**
     * An \@Input property that sets the index of the row.
     * ```html
     * <igx-grid-groupby-row [gridID]="id" [index]="rowIndex" [groupRow]="rowData" #row></igx-grid-groupby-row>
     * ```
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.index;
    /**
     * An \@Input property that sets the id of the grid the row belongs to.
     * ```html
     * <igx-grid-groupby-row [gridID]="id" [index]="rowIndex" [groupRow]="rowData" #row></igx-grid-groupby-row>
     * ```
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.gridID;
    /**
     * An \@Input property that specifies the group record the component renders for.
     * ```typescript
     * <igx-grid-groupby-row [gridID]="id" [index]="rowIndex" [groupRow]="rowData" #row></igx-grid-groupby-row>
     * ```
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.groupRow;
    /**
     * Returns a reference of the content of the group.
     * ```typescript
     * const groupRowContent = this.grid1.rowList.first.groupContent;
     * ```
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.groupContent;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.tabindex;
    /** @type {?} */
    IgxGridGroupByRowComponent.prototype.gridAPI;
    /** @type {?} */
    IgxGridGroupByRowComponent.prototype.selection;
    /** @type {?} */
    IgxGridGroupByRowComponent.prototype.element;
    /** @type {?} */
    IgxGridGroupByRowComponent.prototype.cdr;
}

//# sourceMappingURL=data:application/json;base64,