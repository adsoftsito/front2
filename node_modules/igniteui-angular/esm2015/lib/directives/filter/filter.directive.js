/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Directive, ElementRef, EventEmitter, Input, NgModule, Output, Pipe, Renderer2 } from '@angular/core';
export class IgxFilterDirective {
    /**
     * @param {?} element
     * @param {?} renderer
     */
    constructor(element, renderer) {
        this.element = element;
        this.filtering = new EventEmitter(false);
        this.filtered = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // Detect only changes of input value
        if (changes["filterOptions"] &&
            changes["filterOptions"].currentValue &&
            changes["filterOptions"].currentValue.inputValue !== undefined &&
            changes["filterOptions"].previousValue &&
            changes["filterOptions"].currentValue.inputValue !== changes["filterOptions"].previousValue.inputValue) {
            this.filter();
        }
    }
    /**
     * @return {?}
     */
    filter() {
        if (!this.filterOptions.items) {
            return;
        }
        const /** @type {?} */ args = { cancel: false, items: this.filterOptions.items };
        this.filtering.emit(args);
        if (args.cancel) {
            return;
        }
        const /** @type {?} */ pipe = new IgxFilterPipe();
        const /** @type {?} */ filtered = pipe.transform(this.filterOptions.items, this.filterOptions);
        this.filtered.emit({ filteredItems: filtered });
    }
}
IgxFilterDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxFilter]'
            },] },
];
/** @nocollapse */
IgxFilterDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
IgxFilterDirective.propDecorators = {
    "filtering": [{ type: Output },],
    "filtered": [{ type: Output },],
    "filterOptions": [{ type: Input, args: ['igxFilter',] },],
};
function IgxFilterDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxFilterDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxFilterDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxFilterDirective.propDecorators;
    /** @type {?} */
    IgxFilterDirective.prototype.filtering;
    /** @type {?} */
    IgxFilterDirective.prototype.filtered;
    /** @type {?} */
    IgxFilterDirective.prototype.filterOptions;
    /** @type {?} */
    IgxFilterDirective.prototype.element;
}
export class IgxFilterPipe {
    /**
     * @param {?} items
     * @param {?} options
     * @return {?}
     */
    transform(items, 
    // options - initial settings of filter functionality
    // options - initial settings of filter functionality
    options) {
        let /** @type {?} */ result = [];
        if (!items || !items.length || !options) {
            return;
        }
        if (options.items) {
            items = options.items;
        }
        result = items.filter((item) => {
            const /** @type {?} */ match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);
            if (match) {
                if (options.metConditionFn) {
                    options.metConditionFn(item);
                }
            }
            else {
                if (options.overdueConditionFn) {
                    options.overdueConditionFn(item);
                }
            }
            return match;
        });
        return result;
    }
}
IgxFilterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'igxFilter',
                pure: false
            },] },
];
function IgxFilterPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxFilterPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxFilterPipe.ctorParameters;
}
export class IgxFilterOptions {
    constructor() {
        this.inputValue = '';
    }
    /**
     * @param {?} item
     * @param {?} key
     * @return {?}
     */
    get_value(item, key) {
        let /** @type {?} */ result = '';
        if (key) {
            result = item[key].toString();
        }
        else if (item.element) {
            if (item.element.nativeElement) {
                result = item.element.nativeElement.textContent.trim();
                // Check if element doesn't return the DOM element directly
            }
            else if (item.element.textContent) {
                result = item.element.textContent.trim();
            }
        }
        return result;
    }
    /**
     * @param {?} valueToTest
     * @return {?}
     */
    formatter(valueToTest) {
        return valueToTest.toLowerCase();
    }
    /**
     * @param {?} valueToTest
     * @param {?} inputValue
     * @return {?}
     */
    matchFn(valueToTest, inputValue) {
        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    metConditionFn(item) {
        if (item.hasOwnProperty('hidden')) {
            item.hidden = false;
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    overdueConditionFn(item) {
        if (item.hasOwnProperty('hidden')) {
            item.hidden = true;
        }
    }
}
function IgxFilterOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    IgxFilterOptions.prototype.inputValue;
    /** @type {?} */
    IgxFilterOptions.prototype.key;
    /** @type {?} */
    IgxFilterOptions.prototype.items;
}
export class IgxFilterModule {
}
IgxFilterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxFilterDirective, IgxFilterPipe],
                exports: [IgxFilterDirective, IgxFilterPipe],
                imports: [CommonModule]
            },] },
];
function IgxFilterModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxFilterModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxFilterModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,