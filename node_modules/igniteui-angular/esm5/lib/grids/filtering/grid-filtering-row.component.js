/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectorRef, Component, Input, TemplateRef, ViewChild, ViewChildren, QueryList, ElementRef, HostBinding, HostListener } from '@angular/core';
import { Subject } from 'rxjs';
import { DataType } from '../../data-operations/data-util';
import { IgxColumnComponent } from '../column.component';
import { IgxDropDownComponent } from '../../drop-down/drop-down.component';
import { FilteringLogic } from '../../data-operations/filtering-expression.interface';
import { HorizontalAlignment, VerticalAlignment } from '../../services/overlay/utilities';
import { ConnectedPositioningStrategy } from '../../services/overlay/position/connected-positioning-strategy';
import { IgxChipsAreaComponent } from '../../chips';
import { ExpressionUI } from './grid-filtering.service';
import { IgxFilteringService } from './grid-filtering.service';
import { AbsoluteScrollStrategy } from '../../services/overlay/scroll';
/**
 * @hidden
 */
var IgxGridFilteringRowComponent = /** @class */ (function () {
    function IgxGridFilteringRowComponent(filteringService, element, cdr) {
        var _this = this;
        this.filteringService = filteringService;
        this.element = element;
        this.cdr = cdr;
        this._positionSettings = {
            horizontalStartPoint: HorizontalAlignment.Left,
            verticalStartPoint: VerticalAlignment.Bottom
        };
        this._conditionsOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)
        };
        this._operatorsOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)
        };
        this.chipAreaScrollOffset = 0;
        this.conditionChanged = new Subject();
        this.unaryConditionChanged = new Subject();
        this._column = null;
        this.cssClass = 'igx-grid__filtering-row';
        this.unaryConditionChanged.subscribe(function () { return _this.unaryConditionChangedCallback(); });
        this.conditionChanged.subscribe(function () { return _this.conditionChangedCallback(); });
    }
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "column", {
        get: /**
         * @return {?}
         */
        function () {
            return this._column;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._column = val;
                this.expressionsList = this.filteringService.getExpressions(this._column.field);
                this.resetExpression();
                this.chipAreaScrollOffset = 0;
                this.transform(this.chipAreaScrollOffset);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.expression ? this.expression.searchVal : null;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var _this = this;
            if (!val && val !== 0) {
                this.expression.searchVal = null;
            }
            else {
                this.expression.searchVal = this.transformValue(val);
                if (this.expressionsList.find(function (item) { return item.expression === _this.expression; }) === undefined) {
                    this.addExpression(true);
                }
            }
            this.filter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return window.navigator.language;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;
        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;
        if (this.column.dataType === DataType.Date) {
            // TODO: revise usage of cdr.detectChanges() here
            this.cdr.detectChanges();
        }
        this.input.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.conditionChanged.unsubscribe();
        this.unaryConditionChanged.unsubscribe();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onTabKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {
            event.preventDefault();
        }
    };
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "template", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.column.dataType === DataType.Date) {
                return this.defaultDateUI;
            }
            return this.defaultFilterUI;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            switch (this.column.dataType) {
                case DataType.String:
                case DataType.Boolean:
                    return 'text';
                case DataType.Number:
                    return 'number';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "conditions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.filters.instance().conditionList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "isUnaryCondition", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.expression.condition) {
                return this.expression.condition.isUnary;
            }
            else {
                return true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.expression.condition && this.expression.condition.isUnary) {
                return this.filteringService.getChipLabel(this.expression);
            }
            else {
                return 'Add filter value';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Event handler for keydown on the input group's prefix.
     * @param {?} event
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onPrefixKeyDown = /**
     * Event handler for keydown on the input group's prefix.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if ((event.key === "Enter" /* ENTER */ || event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */) &&
            this.dropDownConditions.collapsed) {
            this._conditionsOverlaySettings.positionStrategy.settings.target = this.inputGroupPrefix.nativeElement;
            this.dropDownConditions.toggle(this._conditionsOverlaySettings);
            event.stopImmediatePropagation();
        }
        else if (event.key === "Tab" /* TAB */ && event.shiftKey) {
            event.preventDefault();
            event.stopPropagation();
        }
    };
    /**
     * Event handler for keydown on the input.
     * @param {?} event
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onInputKeyDown = /**
     * Event handler for keydown on the input.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.key === "Enter" /* ENTER */) {
            this.chipsArea.chipsList.filter(function (chip) { return chip.selected = false; });
            var /** @type {?} */ indexToDeselect = -1;
            for (var /** @type {?} */ index = 0; index < this.expressionsList.length; index++) {
                var /** @type {?} */ expression = this.expressionsList[index].expression;
                if (expression.searchVal === null && !expression.condition.isUnary) {
                    indexToDeselect = index;
                }
            }
            if (indexToDeselect !== -1) {
                this.removeExpression(indexToDeselect, this.expression);
            }
            this.resetExpression();
            this.scrollChipsWhenAddingExpression();
        }
        else if (event.key === "ArrowDown" /* DOWN_ARROW */) {
            this.input.nativeElement.blur();
            this.inputGroupPrefix.nativeElement.focus();
            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);
        }
        event.stopPropagation();
    };
    /**
     * Event handler for datepicker's close.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.datePickerClose = /**
     * Event handler for datepicker's close.
     * @return {?}
     */
    function () {
        this.input.nativeElement.focus();
    };
    /**
     * Returns the filtering operation condition for a given value.
     * @param {?} value
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.getCondition = /**
     * Returns the filtering operation condition for a given value.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.column.filters.instance().condition(value);
    };
    /**
     * Returns the icon name of the current condition.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.getIconName = /**
     * Returns the icon name of the current condition.
     * @return {?}
     */
    function () {
        if (this.column.dataType === DataType.Boolean && this.expression.searchVal === null) {
            return this.getCondition(this.conditions[0]).iconName;
        }
        else {
            return this.expression.condition.iconName;
        }
    };
    /**
     * Returns whether a given condition is selected in dropdown.
     * @param {?} conditionName
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.isConditionSelected = /**
     * Returns whether a given condition is selected in dropdown.
     * @param {?} conditionName
     * @return {?}
     */
    function (conditionName) {
        if (this.expression.condition) {
            return this.expression.condition.name === conditionName;
        }
        else {
            return false;
        }
    };
    /**
     * Clears the current filtering.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.clearFiltering = /**
     * Clears the current filtering.
     * @return {?}
     */
    function () {
        this.filteringService.clearFilter(this.column.field);
        this.resetExpression();
        this.cdr.detectChanges();
        this.chipAreaScrollOffset = 0;
        this.transform(this.chipAreaScrollOffset);
    };
    /**
     * Clears the value of the input.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.clearInput = /**
     * Clears the value of the input.
     * @return {?}
     */
    function () {
        this.value = null;
    };
    /**
     * Event handler for keydown on clear button.
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onClearKeyDown = /**
     * Event handler for keydown on clear button.
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            eventArgs.preventDefault();
            this.clearInput();
        }
    };
    /**
     * Closes the filtering edit row.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.close = /**
     * Closes the filtering edit row.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.expressionsList.length === 1 &&
            this.expressionsList[0].expression.searchVal === null &&
            this.expressionsList[0].expression.condition.isUnary === false) {
            this.filteringService.clearFilter(this.column.field);
        }
        else {
            this.expressionsList.forEach(function (item) {
                if (item.expression.searchVal === null && !item.expression.condition.isUnary) {
                    _this.filteringService.removeExpression(_this.column.field, _this.expressionsList.indexOf(item));
                }
            });
        }
        this.filteringService.isFilterRowVisible = false;
        this.filteringService.filteredColumn = null;
        this.filteringService.selectedExpression = null;
        this.cdr.detectChanges();
        this.chipAreaScrollOffset = 0;
        this.transform(this.chipAreaScrollOffset);
    };
    /**
     * Opens the conditions dropdown.
     * @param {?} target
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.toggleConditionsDropDown = /**
     * Opens the conditions dropdown.
     * @param {?} target
     * @return {?}
     */
    function (target) {
        this._conditionsOverlaySettings.positionStrategy.settings.target = target;
        this.dropDownConditions.toggle(this._conditionsOverlaySettings);
    };
    /**
     * Opens the logic operators dropdown.
     * @param {?} eventArgs
     * @param {?} index
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.toggleOperatorsDropDown = /**
     * Opens the logic operators dropdown.
     * @param {?} eventArgs
     * @param {?} index
     * @return {?}
     */
    function (eventArgs, index) {
        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;
        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);
    };
    /**
     * Event handler for change event in conditions dropdown.
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onConditionsChanged = /**
     * Event handler for change event in conditions dropdown.
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        var /** @type {?} */ value = (/** @type {?} */ (eventArgs.newSelection)).value;
        this.expression.condition = this.getCondition(value);
        if (this.expression.condition.isUnary) {
            this.unaryConditionChanged.next(value);
        }
        else {
            this.conditionChanged.next(value);
        }
        if (this.input) {
            this.input.nativeElement.focus();
        }
    };
    /**
     *  Event handler for chip selected event.
     * @param {?} eventArgs
     * @param {?} expression
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onChipSelected = /**
     *  Event handler for chip selected event.
     * @param {?} eventArgs
     * @param {?} expression
     * @return {?}
     */
    function (eventArgs, expression) {
        if (eventArgs.selected) {
            if (this.chipsArea.chipsList) {
                this.chipsArea.chipsList.forEach(function (chip) {
                    if (chip !== eventArgs.owner) {
                        chip.selected = false;
                    }
                });
            }
            this.expression = expression;
            if (this.input) {
                this.input.nativeElement.focus();
            }
        }
        else if (this.expression === expression) {
            this.resetExpression();
        }
    };
    /**
     * Event handler for chip keydown event.
     * @param {?} eventArgs
     * @param {?} chip
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onChipKeyDown = /**
     * Event handler for chip keydown event.
     * @param {?} eventArgs
     * @param {?} chip
     * @return {?}
     */
    function (eventArgs, chip) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            eventArgs.preventDefault();
            chip.selected = !chip.selected;
        }
    };
    /**
     * Scrolls the first chip into view if the tab key is pressed on the left arrow.
     * @param {?} event
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onLeftArrowKeyDown = /**
     * Scrolls the first chip into view if the tab key is pressed on the left arrow.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.key === "Tab" /* TAB */) {
            this.chipAreaScrollOffset = 0;
            this.transform(this.chipAreaScrollOffset);
        }
    };
    /**
     * Event handler for chip removed event.
     * @param {?} eventArgs
     * @param {?} item
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onChipRemoved = /**
     * Event handler for chip removed event.
     * @param {?} eventArgs
     * @param {?} item
     * @return {?}
     */
    function (eventArgs, item) {
        var /** @type {?} */ indexToRemove = this.expressionsList.indexOf(item);
        this.removeExpression(indexToRemove, item.expression);
        this.scrollChipsOnRemove();
    };
    /**
     * Event handler for logic operator changed event.
     * @param {?} eventArgs
     * @param {?} expression
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onLogicOperatorChanged = /**
     * Event handler for logic operator changed event.
     * @param {?} eventArgs
     * @param {?} expression
     * @return {?}
     */
    function (eventArgs, expression) {
        if (eventArgs.oldSelection) {
            expression.afterOperator = (/** @type {?} */ (eventArgs.newSelection)).value;
            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;
            this.filter();
        }
    };
    /**
     * Scrolls the chips into the chip area when left or right arrows are pressed.
     * @param {?} arrowPosition
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.scrollChipsOnArrowPress = /**
     * Scrolls the chips into the chip area when left or right arrows are pressed.
     * @param {?} arrowPosition
     * @return {?}
     */
    function (arrowPosition) {
        var /** @type {?} */ count = 0;
        var /** @type {?} */ chipAraeChildren = this.chipsArea.element.nativeElement.children;
        var /** @type {?} */ containerRect = this.container.nativeElement.getBoundingClientRect();
        if (arrowPosition === 'right') {
            for (var /** @type {?} */ index = 0; index < chipAraeChildren.length; index++) {
                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {
                    count++;
                }
            }
            if (count < chipAraeChildren.length) {
                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -
                    Math.ceil(containerRect.right) + 1;
                this.transform(this.chipAreaScrollOffset);
            }
        }
        if (arrowPosition === 'left') {
            for (var /** @type {?} */ index = 0; index < chipAraeChildren.length; index++) {
                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {
                    count++;
                }
            }
            if (count > 0) {
                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -
                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;
                this.transform(this.chipAreaScrollOffset);
            }
        }
    };
    /**
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.showHideArrowButtons = /**
     * @return {?}
     */
    function () {
        var _this = this;
        requestAnimationFrame(function () {
            var /** @type {?} */ containerWidth = _this.container.nativeElement.getBoundingClientRect().width;
            _this.chipsAreaWidth = _this.chipsArea.element.nativeElement.getBoundingClientRect().width;
            _this.showArrows = _this.chipsAreaWidth >= containerWidth;
            // TODO: revise the cdr.detectChanges() usage here
            // TODO: revise the cdr.detectChanges() usage here
            _this.cdr.detectChanges();
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.transformValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.column.dataType === DataType.Number) {
            value = parseFloat(value);
        }
        else if (this.column.dataType === DataType.Boolean) {
            value = Boolean(value);
        }
        return value;
    };
    /**
     * @param {?} isSelected
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.addExpression = /**
     * @param {?} isSelected
     * @return {?}
     */
    function (isSelected) {
        var /** @type {?} */ exprUI = new ExpressionUI();
        exprUI.expression = this.expression;
        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;
        exprUI.isSelected = isSelected;
        this.expressionsList.push(exprUI);
        var /** @type {?} */ length = this.expressionsList.length;
        if (this.expressionsList[length - 2]) {
            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;
        }
        this.showHideArrowButtons();
    };
    /**
     * @param {?} indexToRemove
     * @param {?} expression
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.removeExpression = /**
     * @param {?} indexToRemove
     * @param {?} expression
     * @return {?}
     */
    function (indexToRemove, expression) {
        if (indexToRemove === 0 && this.expressionsList.length === 1) {
            this.clearFiltering();
            return;
        }
        this.filteringService.removeExpression(this.column.field, indexToRemove);
        this.filter();
        if (this.expression === expression) {
            this.resetExpression();
        }
        this.showHideArrowButtons();
    };
    /**
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.resetExpression = /**
     * @return {?}
     */
    function () {
        this.expression = {
            fieldName: this.column.field,
            condition: null,
            searchVal: null,
            ignoreCase: this.column.filteringIgnoreCase
        };
        if (this.column.dataType !== DataType.Boolean) {
            this.expression.condition = this.getCondition(this.conditions[0]);
        }
        if (this.column.dataType === DataType.Date && this.input) {
            this.input.nativeElement.value = null;
        }
        this.showHideArrowButtons();
    };
    /**
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.scrollChipsWhenAddingExpression = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ chipAraeChildren = this.chipsArea.element.nativeElement.children;
        if (!chipAraeChildren || chipAraeChildren.length === 0) {
            return;
        }
        var /** @type {?} */ containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);
        var /** @type {?} */ lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);
        if (lastChipRectRight >= containerRectRight) {
            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;
            this.transform(this.chipAreaScrollOffset);
        }
    };
    /**
     * @param {?} offset
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.transform = /**
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        var _this = this;
        requestAnimationFrame(function () {
            _this.chipsArea.element.nativeElement.style.transform = "translate(" + offset + "px)";
        });
    };
    /**
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.scrollChipsOnRemove = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ count = 0;
        var /** @type {?} */ chipAraeChildren = this.chipsArea.element.nativeElement.children;
        var /** @type {?} */ containerRect = this.container.nativeElement.getBoundingClientRect();
        for (var /** @type {?} */ index = 0; index < chipAraeChildren.length; index++) {
            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {
                count++;
            }
        }
        if (count <= 2) {
            this.chipAreaScrollOffset = 0;
        }
        else {
            var /** @type {?} */ dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;
            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;
        }
        this.transform(this.chipAreaScrollOffset);
    };
    /**
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.conditionChangedCallback = /**
     * @return {?}
     */
    function () {
        if (!!this.expression.searchVal || this.expression.searchVal === 0) {
            this.filter();
        }
        else if (this.value) {
            this.value = null;
        }
    };
    /**
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.unaryConditionChangedCallback = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.value) {
            this.value = null;
        }
        if (this.expressionsList.find(function (item) { return item.expression === _this.expression; }) === undefined) {
            this.addExpression(true);
        }
        this.filter();
    };
    /**
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.filter = /**
     * @return {?}
     */
    function () {
        this.rootExpressionsTree = this.filteringService.createSimpleFilteringTree(this.column.field);
        this.filteringService.filter(this.column.field, this.rootExpressionsTree);
    };
    IgxGridFilteringRowComponent.decorators = [
        { type: Component, args: [{
                    preserveWhitespaces: false,
                    selector: 'igx-grid-filtering-row',
                    template: "<!-- Have to apply styles inline because of the overlay outlet ... -->\n<igx-drop-down #inputGroupConditions [height]=\"'200px'\" (onSelection)=\"onConditionsChanged($event)\">\n    <igx-drop-down-item\n        *ngFor=\"let condition of conditions\"\n        [value]=\"condition\"\n        [isSelected]=\"isConditionSelected(condition)\">\n        <igx-icon fontSet=\"filtering-icons\" [name]=\"getCondition(condition).iconName\"></igx-icon>\n        <span style=\"margin-left: 16px\">{{ condition | filterCondition | titlecase }}</span>\n    </igx-drop-down-item>\n</igx-drop-down>\n\n<ng-template #defaultFilterUI>\n    <igx-input-group type=\"box\" [displayDensity]=\"'compact'\" [supressInputAutofocus]=\"true\">\n        <igx-prefix #inputGroupPrefix\n                    (click)=\"toggleConditionsDropDown(inputGroupPrefix)\"\n                    (keydown)=\"onPrefixKeyDown($event)\"\n                    tabindex=\"0\"\n                    [igxDropDownItemNavigation]=\"inputGroupConditions\">\n            <igx-icon fontSet=\"filtering-icons\" [name]=\"getIconName()\"></igx-icon>\n        </igx-prefix>\n        <input\n            #input\n            igxInput\n            tabindex=\"0\"\n            [placeholder]=\"placeholder\"\n            autocomplete=\"off\"\n            [(ngModel)]=\"value\"\n            [type]=\"type\"\n            [readonly]=\"isUnaryCondition\"\n            (keydown)=\"onInputKeyDown($event)\"/>\n            <igx-suffix *ngIf=\"input.value.length > 0\" (keydown)=\"onClearKeyDown($event)\" (click)=\"clearInput()\" tabindex=\"0\">\n                <igx-icon>clear</igx-icon>\n            </igx-suffix>\n    </igx-input-group>\n</ng-template>\n\n<ng-template #defaultDateUI>\n    <igx-datePicker tabindex=\"0\" [(ngModel)]=\"value\" [locale]=\"locale\" (onClose)=\"datePickerClose()\">\n        <ng-template igxDatePickerTemplate let-openDialog=\"openDialog\" let-displayData=\"displayData\">\n            <igx-input-group type=\"box\" [displayDensity]=\"'compact'\" [supressInputAutofocus]=\"true\">\n                <igx-prefix #inputGroupPrefix\n                            tabindex=\"0\"\n                            (click)=\"toggleConditionsDropDown(inputGroupPrefix)\"\n                            (keydown)=\"onPrefixKeyDown($event)\"\n                            [igxDropDownItemNavigation]=\"inputGroupConditions\">\n                    <igx-icon fontSet=\"filtering-icons\" [name]=\"expression.condition.iconName\"></igx-icon>\n                </igx-prefix>\n                <input #input\n                       igxInput\n                       tabindex=\"0\"\n                (click)=\"openDialog()\"\n                [placeholder]=\"placeholder\"\n                autocomplete=\"off\"\n                       [value]=\"displayData | date\"\n                       [readonly]=\"true\"\n                       (keydown)=\"onInputKeyDown($event)\"/>\n                <igx-suffix *ngIf=\"input.value.length > 0\" (keydown)=\"onClearKeyDown($event)\" (click)=\"clearInput()\" tabindex=\"0\">\n                    <igx-icon>clear</igx-icon>\n                </igx-suffix>\n            </igx-input-group>\n            </ng-template>\n    </igx-datePicker>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template; context: { $implicit: this }\"></ng-container>\n\n<button igxButton=\"icon\" class=\"igx-grid__filtering-row-scroll-start\" *ngIf=\"showArrows\" (keydown)=\"onLeftArrowKeyDown($event)\" (click)=\"scrollChipsOnArrowPress('left')\">\n    <igx-icon>navigate_before</igx-icon>\n</button>\n\n<div #container class=\"igx-grid__filtering-row-main\">\n    <div>\n         <igx-chips-area #chipsArea>\n            <ng-container *ngFor=\"let item of expressionsList; index as i; let last = last;\" tabindex=\"0\">\n                <igx-chip #chip id='chip'\n                    (onSelection)=\"onChipSelected($event, item.expression)\"\n                    (keydown)=\"onChipKeyDown($event, chip)\"\n                    (onRemove)=\"onChipRemoved($event, item)\"\n                    [selectable]=\"true\"\n                    [selected]=\"item.isSelected\"\n                    [displayDensity]=\"'cosy'\"\n                    [removable]=\"true\">\n                    <igx-icon\n                        igxPrefix\n                        fontSet=\"filtering-icons\"\n                        [name]=\"item.expression.condition.iconName\">\n                    </igx-icon>\n                    <span>{{filteringService.getChipLabel(item.expression)}}</span>\n                </igx-chip>\n\n                <span id='operand' *ngIf=\"!last\">\n                    <button igxButton (click)=\"toggleOperatorsDropDown($event, i)\" [igxDropDownItemNavigation]=\"operators\">\n                        <igx-icon>expand_more</igx-icon>\n                        <span>{{filteringService.getOperatorAsString(item.afterOperator)}}</span>\n                    </button>\n                    <igx-drop-down #operators (onSelection)=\"onLogicOperatorChanged($event, item)\">\n                            <igx-drop-down-item [value]=\"0\" [isSelected]=\"item.afterOperator === 0\">And</igx-drop-down-item>\n                            <igx-drop-down-item [value]=\"1\" [isSelected]=\"item.afterOperator === 1\">Or</igx-drop-down-item>\n                    </igx-drop-down>\n                </span>\n            </ng-container>\n        </igx-chips-area>\n    </div>\n</div>\n\n<button igxButton=\"icon\" class=\"igx-grid__filtering-row-scroll-end\" *ngIf=\"showArrows\" (click)=\"scrollChipsOnArrowPress('right')\">\n    <igx-icon>navigate_next</igx-icon>\n</button>\n\n<div #buttonsContainer class=\"igx-grid__filtering-row-editing-buttons\">\n    <button igxButton igxRipple (click)=\"clearFiltering()\" [disabled]=\"disabled\">Reset</button>\n    <button #closeButton igxButton igxRipple (click)=\"close()\">Close</button>\n</div>\n"
                },] },
    ];
    /** @nocollapse */
    IgxGridFilteringRowComponent.ctorParameters = function () { return [
        { type: IgxFilteringService, },
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
    ]; };
    IgxGridFilteringRowComponent.propDecorators = {
        "column": [{ type: Input },],
        "value": [{ type: Input },],
        "defaultFilterUI": [{ type: ViewChild, args: ['defaultFilterUI', { read: TemplateRef },] },],
        "defaultDateUI": [{ type: ViewChild, args: ['defaultDateUI', { read: TemplateRef },] },],
        "input": [{ type: ViewChild, args: ['input', { read: ElementRef },] },],
        "dropDownConditions": [{ type: ViewChild, args: ['inputGroupConditions', { read: IgxDropDownComponent },] },],
        "chipsArea": [{ type: ViewChild, args: ['chipsArea', { read: IgxChipsAreaComponent },] },],
        "dropDownOperators": [{ type: ViewChildren, args: ['operators', { read: IgxDropDownComponent },] },],
        "inputGroupPrefix": [{ type: ViewChild, args: ['inputGroupPrefix', { read: ElementRef },] },],
        "container": [{ type: ViewChild, args: ['container',] },],
        "operand": [{ type: ViewChild, args: ['operand',] },],
        "closeButton": [{ type: ViewChild, args: ['closeButton',] },],
        "cssClass": [{ type: HostBinding, args: ['class.igx-grid__filtering-row',] },],
        "onTabKeydown": [{ type: HostListener, args: ['keydown.tab', ['$event'],] },],
    };
    return IgxGridFilteringRowComponent;
}());
export { IgxGridFilteringRowComponent };
function IgxGridFilteringRowComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridFilteringRowComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridFilteringRowComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxGridFilteringRowComponent.propDecorators;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype._positionSettings;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype._conditionsOverlaySettings;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype._operatorsOverlaySettings;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.rootExpressionsTree;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.chipsAreaWidth;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.chipAreaScrollOffset;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.conditionChanged;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.unaryConditionChanged;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype._column;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.showArrows;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.expression;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.expressionsList;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.defaultFilterUI;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.defaultDateUI;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.input;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.dropDownConditions;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.chipsArea;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.dropDownOperators;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.inputGroupPrefix;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.container;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.operand;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.closeButton;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.cssClass;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.filteringService;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.element;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.cdr;
}

//# sourceMappingURL=data:application/json;base64,