/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, HostBinding, Inject, forwardRef, ElementRef, Input, ChangeDetectorRef } from '@angular/core';
import { IgxExpansionPanelComponent } from './expansion-panel.component';
export class IgxExpansionPanelBodyComponent {
    /**
     * @param {?} panel
     * @param {?} element
     * @param {?} cdr
     */
    constructor(panel, element, cdr) {
        this.panel = panel;
        this.element = element;
        this.cdr = cdr;
        this._labelledBy = '';
        this._label = '';
        this.cssClass = `igx-expansion-panel__body`;
        this._title = '';
        this.role = 'region';
    }
    /**
     * @return {?}
     */
    get label() {
        return this._label || this.panel.id + '-region';
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set label(val) {
        this._label = val;
    }
    /**
     * @return {?}
     */
    get labelledBy() {
        return this._labelledBy;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set labelledBy(val) {
        this._labelledBy = val;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.labelledBy = this.panel.headerId;
        this.label = this.panel.id + '-region';
    }
}
IgxExpansionPanelBodyComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'igx-expansion-panel-body',
                template: `<ng-content></ng-content>`
            },] },
];
/** @nocollapse */
IgxExpansionPanelBodyComponent.ctorParameters = () => [
    { type: IgxExpansionPanelComponent, decorators: [{ type: Inject, args: [forwardRef(() => IgxExpansionPanelComponent),] },] },
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
];
IgxExpansionPanelBodyComponent.propDecorators = {
    "cssClass": [{ type: HostBinding, args: ['class.igx-expansion-panel__body',] },],
    "label": [{ type: Input }, { type: HostBinding, args: ['attr.aria-label',] },],
    "labelledBy": [{ type: Input }, { type: HostBinding, args: ['attr.aria-labelledby',] },],
    "role": [{ type: Input }, { type: HostBinding, args: ['attr.role',] },],
};
function IgxExpansionPanelBodyComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxExpansionPanelBodyComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxExpansionPanelBodyComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxExpansionPanelBodyComponent.propDecorators;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype._labelledBy;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype._label;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype.cssClass;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype._title;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype.role;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype.panel;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype.element;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype.cdr;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLWJvZHkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9leHBhbnNpb24tcGFuZWwvZXhwYW5zaW9uLXBhbmVsLWJvZHkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQ25DLFVBQVUsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3BGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBT3pFLE1BQU07Ozs7OztJQUdGLFlBQ08sT0FBMEMsT0FBbUIsRUFDN0Q7UUFEQSxVQUFLLEdBQUwsS0FBSztRQUFxQyxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQzdELFFBQUcsR0FBSCxHQUFHOzJCQUpZLEVBQUU7c0JBQ1AsRUFBRTt3QkFNRCwyQkFBMkI7c0JBQzdCLEVBQUU7b0JBc0JKLFFBQVE7S0F6QnJCOzs7O1FBT1UsS0FBSztRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQzs7Ozs7O1FBRXpDLEtBQUssQ0FBQyxHQUFXO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDOzs7OztRQUtYLFVBQVU7UUFDakIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7Ozs7OztRQUVqQixVQUFVLENBQUMsR0FBVztRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQzs7Ozs7SUFPM0IsUUFBUTtRQUNKLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7UUFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUM7S0FDMUM7OztZQXpDSixTQUFTLFNBQUM7O2dCQUVQLFFBQVEsRUFBRSwwQkFBMEI7Z0JBQ3BDLFFBQVEsRUFBRSwyQkFBMkI7YUFDeEM7Ozs7WUFOUSwwQkFBMEIsdUJBVWxCLE1BQU0sU0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsMEJBQTBCLENBQUM7WUFYcEQsVUFBVTtZQUFTLGlCQUFpQjs7O3lCQWUvQyxXQUFXLFNBQUMsaUNBQWlDO3NCQUk3QyxLQUFLLFlBQ0wsV0FBVyxTQUFDLGlCQUFpQjsyQkFRN0IsS0FBSyxZQUNMLFdBQVcsU0FBQyxzQkFBc0I7cUJBUWxDLEtBQUssWUFDTCxXQUFXLFNBQUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIEluamVjdCxcbiAgICBmb3J3YXJkUmVmLCBFbGVtZW50UmVmLCBJbnB1dCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4RXhwYW5zaW9uUGFuZWxDb21wb25lbnQgfSBmcm9tICcuL2V4cGFuc2lvbi1wYW5lbC5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdpZ3gtZXhwYW5zaW9uLXBhbmVsLWJvZHknLFxuICAgIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmBcbn0pXG5leHBvcnQgY2xhc3MgSWd4RXhwYW5zaW9uUGFuZWxCb2R5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIF9sYWJlbGxlZEJ5ID0gJyc7XG4gICAgcHJpdmF0ZSBfbGFiZWwgPSAnJztcbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gSWd4RXhwYW5zaW9uUGFuZWxDb21wb25lbnQpKVxuICAgIHB1YmxpYyBwYW5lbDogSWd4RXhwYW5zaW9uUGFuZWxDb21wb25lbnQsIHB1YmxpYyBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgIHB1YmxpYyBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgfVxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWV4cGFuc2lvbi1wYW5lbF9fYm9keScpXG4gICAgcHVibGljIGNzc0NsYXNzID0gYGlneC1leHBhbnNpb24tcGFuZWxfX2JvZHlgO1xuICAgIHB1YmxpYyBfdGl0bGUgPSAnJztcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtbGFiZWwnKVxuICAgIHB1YmxpYyBnZXQgbGFiZWwoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsIHx8IHRoaXMucGFuZWwuaWQgKyAnLXJlZ2lvbic7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgbGFiZWwodmFsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fbGFiZWwgPSB2YWw7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1sYWJlbGxlZGJ5JylcbiAgICBwdWJsaWMgZ2V0IGxhYmVsbGVkQnkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsbGVkQnk7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgbGFiZWxsZWRCeSh2YWw6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9sYWJlbGxlZEJ5ID0gdmFsO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKVxuICAgIHB1YmxpYyByb2xlID0gJ3JlZ2lvbic7XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5sYWJlbGxlZEJ5ID0gdGhpcy5wYW5lbC5oZWFkZXJJZDtcbiAgICAgICAgdGhpcy5sYWJlbCA9IHRoaXMucGFuZWwuaWQgKyAnLXJlZ2lvbic7XG4gICAgfVxufVxuIl19