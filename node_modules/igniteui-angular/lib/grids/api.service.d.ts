import { Subject } from 'rxjs';
import { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';
import { IgxGridCellComponent } from './cell.component';
import { IgxColumnComponent } from './column.component';
import { IGridEditEventArgs, IgxGridBaseComponent } from './grid-base.component';
import { IgxRowComponent } from './row.component';
import { IFilteringOperation } from '../data-operations/filtering-condition';
import { IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { ISortingStrategy } from '../data-operations/sorting-strategy';
/**
 *@hidden
 */
export declare class GridBaseAPIService<T extends IgxGridBaseComponent> {
    change: Subject<any>;
    protected state: Map<string, T>;
    protected editCellState: Map<string, any>;
    protected editRowState: Map<string, {
        rowID: any;
        rowIndex: number;
    }>;
    protected summaryCacheMap: Map<string, Map<string, any[]>>;
    protected destroyMap: Map<string, Subject<boolean>>;
    register(grid: T): void;
    unsubscribe(grid: T): void;
    get(id: string): T;
    unset(id: string): void;
    reset(oldId: string, newId: string): void;
    get_column_by_name(id: string, name: string): IgxColumnComponent;
    set_summary_by_column_name(id: string, name: string): void;
    get_summaries(id: string): Map<string, any[]>;
    remove_summary(id: string, name?: string): void;
    set_cell_inEditMode(gridId: string, cell: IgxGridCellComponent): void;
    escape_editMode(gridId: any, cellId?: any): void;
    get_cell_inEditMode(gridId: any): {
        cellID: {
            rowID: any;
            columnID: number;
            rowIndex: number;
        };
        cell: any;
    };
    get_row_index_in_data(id: string, rowID: any): number;
    get_row_by_key(id: string, rowSelector: any): IgxRowComponent<IgxGridBaseComponent>;
    get_row_by_index(id: string, rowIndex: number): IgxRowComponent<IgxGridBaseComponent>;
    get_edit_row_state(gridId: any): {
        rowID: any;
        rowIndex: number;
    };
    set_edit_row_state(gridId: any, row: {
        rowID: any;
        rowIndex: number;
    }): void;
    get_cell_by_key(id: string, rowSelector: any, field: string): IgxGridCellComponent;
    get_cell_by_index(id: string, rowIndex: number, columnIndex: number): IgxGridCellComponent;
    get_cell_by_visible_index(id: string, rowIndex: number, columnIndex: number): IgxGridCellComponent;
    submit_value(gridId: any): void;
    create_grid_edit_args(id: string, rowID: any, columnID: any, editValue: any): {
        args: IGridEditEventArgs;
        isRowSelected: boolean;
        rowData: any;
    };
    update_cell(id: string, rowID: any, columnID: any, editValue: any, gridEditState?: {
        args: IGridEditEventArgs;
        isRowSelected: boolean;
        rowData: any;
    }): void;
    update_row(value: any, id: string, rowID: any, gridState?: {
        args: IGridEditEventArgs;
        isRowSelected: boolean;
        rowData: any;
    }): void;
    protected update_row_in_array(id: string, value: any, rowID: any, index: number): void;
    sort(id: string, fieldName: string, dir: SortingDirection, ignoreCase: boolean, strategy: ISortingStrategy): void;
    sort_multiple(id: string, expressions: ISortingExpression[]): void;
    filter(id: string, fieldName: string, term: any, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean): void;
    filter_global(id: any, term: any, condition: any, ignoreCase: any): void;
    clear_filter(id: any, fieldName: any): void;
    protected calculateSummaries(id: string, column: any, data: any): void;
    clear_sort(id: any, fieldName: any): void;
    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal: any, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean): void;
    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression): void;
    protected remove_grouping_expression(id: any, fieldName: any): void;
    should_apply_number_style(column: IgxColumnComponent): boolean;
    get_all_data(id: string, transactions?: boolean): any[];
    protected getSortStrategyPerColumn(id: string, fieldName: string): any;
}
