"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Util_1 = require("./Util");
class BaseProjectLibrary {
    /**
     *
     */
    constructor(rootPath) {
        this.rootPath = rootPath;
        /** Implementation, not part of the interface */
        this.groupDescriptions = new Map();
        this._projectsPath = "projects";
        this._customTemplatesPath = "custom-templates";
        this._generateCommandPath = "generate";
        this._projects = [];
        /*	private _customTemplates : string[];
            public get customTemplates() : string[] {
                if (!this._customTemplates.length) {
                    this._customTemplates = Util.getDirectoryNames(path.join(this.rootPath, this._customTemplatesPath));
                }
                return this._customTemplates;
            }*/
        this._customTemplates = [];
        this._components = [];
        this._generateTemplateFolderPath = "";
    }
    get templates() {
        let list = [];
        for (const component of this.components) {
            list = list.concat(component.templates);
        }
        list = list.concat(this.customTemplates);
        return list;
    }
    get projects() {
        //read projects list
        if (!this._projects.length) {
            this._projects = Util_1.Util.getDirectoryNames(path.join(this.rootPath, this._projectsPath));
        }
        return this._projects;
    }
    get customTemplates() {
        if (!this._customTemplates.length) {
            const customTemplatesFolders = Util_1.Util.getDirectoryNames(path.join(this.rootPath, this._customTemplatesPath));
            for (const element of customTemplatesFolders) {
                this._customTemplates.push(require(path.join(this.rootPath, this._customTemplatesPath, element)));
            }
        }
        return this._customTemplates;
    }
    get components() {
        if (!this._components.length) {
            //read file
            //read components lists
            const componentFolders = Util_1.Util.getDirectoryNames(this.rootPath)
                .filter(x => x !== this._projectsPath &&
                x !== this._customTemplatesPath &&
                x !== this._generateCommandPath);
            for (const componentFolder of componentFolders) {
                this._components.push(require(path.join(this.rootPath, componentFolder)));
            }
        }
        return this._components;
    }
    get generateTemplateFolderPath() {
        if (this._generateTemplateFolderPath === "") {
            this._generateTemplateFolderPath = path.join(this.rootPath, "generate");
        }
        return this._generateTemplateFolderPath;
    }
    getTemplateById(id) {
        return this.templates.find(x => x.id === id);
    }
    getTemplateByName(name) {
        return this.templates.find(x => x.name === name);
    }
    registerTemplate(template) {
        if (template) {
            this.templates.push(template);
            const newComponents = template.components.filter(x => !this.components.find(f => f.name === x));
            for (const newComponent of newComponents) {
                const component = {
                    description: "",
                    group: template.controlGroup,
                    groupPriority: 0,
                    name: newComponent,
                    templates: []
                };
                this.components.push(component);
            }
            if (template.listInComponentTemplates) {
                const currentComponents = template.components.filter(x => this.components.find(f => f.name === x));
                for (const currentComponent of currentComponents) {
                    this.components.find(f => f.name === currentComponent).templates.push(template);
                }
            }
            if (template.listInCustomTemplates) {
                this.customTemplates.push(template);
            }
        }
    }
    getComponentByName(name) {
        return this.components.find(x => x.name === name);
    }
    getCustomTemplates() {
        return this.customTemplates;
    }
    getCustomTemplateNames() {
        const cTemplates = [];
        for (const customTemplate of this.customTemplates) {
            //var p: CustomTemplate = this.customTemplates[index] as CustomTemplate;
            cTemplates.push(customTemplate.name);
        }
        return cTemplates;
    }
    getCustomTemplateByName(name) {
        return this.customTemplates.find((x, y, z) => x.name === name);
    }
    getComponentGroupNames() {
        let groups;
        //poor-man's groupBy reduce
        groups = this.components.reduce((prev, current, index, array) => {
            if (prev.indexOf(current.group) === -1) {
                prev.push(current.group);
            }
            return prev;
        }, []);
        return groups;
    }
    getComponentsByGroup(group) {
        return this.components.filter(x => x.group === group)
            .sort((a, b) => b.groupPriority - a.groupPriority);
    }
    // /**
    //  * Return Component Groups with descriptions
    //  */
    getComponentGroups() {
        const groups = [];
        for (const groupName of this.getComponentGroupNames()) {
            groups.push({
                name: groupName,
                // tslint:disable-next-line:object-literal-sort-keys
                description: this.groupDescriptions.get(groupName) || ""
            });
        }
        return groups;
    }
    getComponentNamesByGroup(group) {
        return this.components.filter(x => x.group === group)
            .sort((a, b) => b.groupPriority - a.groupPriority)
            .map(x => x.name);
    }
    /**
     * Get project template
     * @param name Optional name of the project template. Defaults to "empty"
     */
    getProject(name = "empty") {
        if (this.hasProject(name)) {
            return require(path.join(this.rootPath, this._projectsPath, name));
        }
        return null;
    }
    hasProject(name) {
        return this.projects.indexOf(name) > -1;
    }
    //abstraction for projects
    hasTemplate(id) {
        return this.templates.find(x => x.id === id) !== undefined;
    }
}
exports.BaseProjectLibrary = BaseProjectLibrary;
