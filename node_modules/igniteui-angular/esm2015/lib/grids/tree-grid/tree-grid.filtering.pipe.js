/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { DataUtil } from '../../data-operations/data-util';
import { GridBaseAPIService } from '../api.service';
import { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';
/**
 * @hidden
 */
export class TreeGridFilteringStrategy extends BaseFilteringStrategy {
    /**
     * @param {?} data
     * @param {?} expressionsTree
     * @return {?}
     */
    filter(data, expressionsTree) {
        return this.filterImpl(data, expressionsTree, undefined);
    }
    /**
     * @param {?} data
     * @param {?} expressionsTree
     * @param {?} parent
     * @return {?}
     */
    filterImpl(data, expressionsTree, parent) {
        let /** @type {?} */ i;
        let /** @type {?} */ rec;
        const /** @type {?} */ len = data.length;
        const /** @type {?} */ res = [];
        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {
            return data;
        }
        for (i = 0; i < len; i++) {
            rec = DataUtil.cloneTreeGridRecord(data[i]);
            rec.parent = parent;
            if (rec.children) {
                const /** @type {?} */ filteredChildren = this.filterImpl(rec.children, expressionsTree, rec);
                rec.children = filteredChildren.length > 0 ? filteredChildren : null;
            }
            if (this.matchRecord(rec, expressionsTree)) {
                res.push(rec);
            }
            else if (rec.children && rec.children.length > 0) {
                rec.isFilteredOutParent = true;
                res.push(rec);
            }
        }
        return res;
    }
    /**
     * @param {?} rec
     * @param {?} fieldName
     * @return {?}
     */
    getFieldValue(rec, fieldName) {
        const /** @type {?} */ hierarchicalRecord = /** @type {?} */ (rec);
        return hierarchicalRecord.data[fieldName];
    }
}
/**
 * @hidden
 */
export class IgxTreeGridFilteringPipe {
    /**
     * @param {?} gridAPI
     */
    constructor(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} hierarchyData
     * @param {?} expressionsTree
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    transform(hierarchyData, expressionsTree, id, pipeTrigger) {
        const /** @type {?} */ grid = this.gridAPI.get(id);
        const /** @type {?} */ state = { expressionsTree: expressionsTree };
        this.resetFilteredOutProperty(grid.records);
        if (!state.expressionsTree ||
            !state.expressionsTree.filteringOperands ||
            state.expressionsTree.filteringOperands.length === 0) {
            grid.filteredData = null;
            return hierarchyData;
        }
        DataUtil.mergeDefaultProperties(state, { strategy: new TreeGridFilteringStrategy() });
        const /** @type {?} */ result = this.filter(hierarchyData, state);
        const /** @type {?} */ filteredData = [];
        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);
        grid.filteredData = filteredData;
        return result;
    }
    /**
     * @param {?} map
     * @return {?}
     */
    resetFilteredOutProperty(map) {
        const /** @type {?} */ keys = Array.from(map.keys());
        for (let /** @type {?} */ i = 0; i < keys.length; i++) {
            map.get(keys[i]).isFilteredOutParent = undefined;
        }
    }
    /**
     * @param {?} grid
     * @param {?} data
     * @param {?} expandedStates
     * @param {?} filteredData
     * @return {?}
     */
    expandAllRecursive(grid, data, expandedStates, filteredData) {
        for (let /** @type {?} */ i = 0; i < data.length; i++) {
            const /** @type {?} */ rec = data[i];
            filteredData.push(rec.data);
            this.updateNonProcessedRecord(grid, rec);
            if (rec.children && rec.children.length > 0) {
                expandedStates.set(rec.rowID, true);
                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);
            }
        }
    }
    /**
     * @param {?} grid
     * @param {?} record
     * @return {?}
     */
    updateNonProcessedRecord(grid, record) {
        const /** @type {?} */ rec = grid.records.get(record.rowID);
        rec.isFilteredOutParent = record.isFilteredOutParent;
    }
    /**
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    filter(data, state) {
        return state.strategy.filter(data, state.expressionsTree);
    }
}
IgxTreeGridFilteringPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridFiltering',
                pure: true
            },] },
];
/** @nocollapse */
IgxTreeGridFilteringPipe.ctorParameters = () => [
    { type: GridBaseAPIService, },
];
function IgxTreeGridFilteringPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridFilteringPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridFilteringPipe.ctorParameters;
    /** @type {?} */
    IgxTreeGridFilteringPipe.prototype.gridAPI;
}

//# sourceMappingURL=data:application/json;base64,