/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, forwardRef, Host, HostBinding, Inject, TemplateRef } from '@angular/core';
import { IgxTabsComponent } from './tabs.component';
/** @enum {string} */
const ButtonStyle = {
    VISIBLE: 'visible',
    HIDDEN: 'hidden',
    NOT_DISPLAYED: 'not_displayed',
};
export class IgxRightButtonStyleDirective {
    /**
     * @param {?} tabs
     */
    constructor(tabs) {
        this.tabs = tabs;
    }
    /**
     * @return {?}
     */
    getRightButtonStyle() {
        const /** @type {?} */ viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;
        const /** @type {?} */ itemsContainerWidth = this.tabs.itemsContainer.nativeElement.offsetWidth;
        const /** @type {?} */ headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        const /** @type {?} */ offset = this.tabs.offset;
        const /** @type {?} */ total = offset + viewPortWidth;
        if (itemsContainerWidth <= headerContainerWidth && offset === 0) {
            return ButtonStyle.NOT_DISPLAYED;
        }
        if (itemsContainerWidth > total) {
            return ButtonStyle.VISIBLE;
        }
        else {
            return ButtonStyle.HIDDEN;
        }
    }
    /**
     * @return {?}
     */
    get visibleCSS() {
        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;
    }
    /**
     * @return {?}
     */
    get hiddenCSS() {
        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;
    }
    /**
     * @return {?}
     */
    get notDisplayedCSS() {
        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;
    }
}
IgxRightButtonStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxRightButtonStyle]'
            },] },
];
/** @nocollapse */
IgxRightButtonStyleDirective.ctorParameters = () => [
    { type: IgxTabsComponent, decorators: [{ type: Host }, { type: Inject, args: [forwardRef(() => IgxTabsComponent),] },] },
];
IgxRightButtonStyleDirective.propDecorators = {
    "visibleCSS": [{ type: HostBinding, args: ['class.igx-tabs__header-button',] },],
    "hiddenCSS": [{ type: HostBinding, args: ['class.igx-tabs__header-button--hidden',] },],
    "notDisplayedCSS": [{ type: HostBinding, args: ['class.igx-tabs__header-button--none',] },],
};
function IgxRightButtonStyleDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxRightButtonStyleDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxRightButtonStyleDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxRightButtonStyleDirective.propDecorators;
    /** @type {?} */
    IgxRightButtonStyleDirective.prototype.tabs;
}
export class IgxLeftButtonStyleDirective {
    /**
     * @param {?} tabs
     */
    constructor(tabs) {
        this.tabs = tabs;
    }
    /**
     * @return {?}
     */
    getLeftButtonStyle() {
        const /** @type {?} */ itemsContainerWidth = this.tabs.itemsContainer.nativeElement.offsetWidth;
        const /** @type {?} */ headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        const /** @type {?} */ offset = this.tabs.offset;
        if (offset === 0) {
            if (itemsContainerWidth <= headerContainerWidth) {
                return ButtonStyle.NOT_DISPLAYED;
            }
            return ButtonStyle.HIDDEN;
        }
        else {
            return ButtonStyle.VISIBLE;
        }
    }
    /**
     * @return {?}
     */
    get visibleCSS() {
        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;
    }
    /**
     * @return {?}
     */
    get hiddenCSS() {
        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;
    }
    /**
     * @return {?}
     */
    get notDisplayedCSS() {
        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;
    }
}
IgxLeftButtonStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxLeftButtonStyle]'
            },] },
];
/** @nocollapse */
IgxLeftButtonStyleDirective.ctorParameters = () => [
    { type: IgxTabsComponent, decorators: [{ type: Host }, { type: Inject, args: [forwardRef(() => IgxTabsComponent),] },] },
];
IgxLeftButtonStyleDirective.propDecorators = {
    "visibleCSS": [{ type: HostBinding, args: ['class.igx-tabs__header-button',] },],
    "hiddenCSS": [{ type: HostBinding, args: ['class.igx-tabs__header-button--hidden',] },],
    "notDisplayedCSS": [{ type: HostBinding, args: ['class.igx-tabs__header-button--none',] },],
};
function IgxLeftButtonStyleDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxLeftButtonStyleDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxLeftButtonStyleDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxLeftButtonStyleDirective.propDecorators;
    /** @type {?} */
    IgxLeftButtonStyleDirective.prototype.tabs;
}
export class IgxTabItemTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxTabItemTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxTab]'
            },] },
];
/** @nocollapse */
IgxTabItemTemplateDirective.ctorParameters = () => [
    { type: TemplateRef, },
];
function IgxTabItemTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTabItemTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTabItemTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxTabItemTemplateDirective.prototype.template;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5kaXJlY3RpdmVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi90YWJzL3RhYnMuZGlyZWN0aXZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxVQUFVLEVBQ1YsSUFBSSxFQUNKLFdBQVcsRUFDWCxNQUFNLEVBQ04sV0FBVyxFQUNkLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7YUFHdEMsU0FBUztZQUNWLFFBQVE7bUJBQ0QsZUFBZTs7QUFPbkMsTUFBTTs7OztJQUNGLFlBQ087UUFBQSxTQUFJLEdBQUosSUFBSTtLQUNWOzs7O0lBRU8sbUJBQW1CO1FBQ3ZCLHVCQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1FBQ25FLHVCQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7UUFDL0UsdUJBQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztRQUNqRix1QkFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDaEMsdUJBQU0sS0FBSyxHQUFHLE1BQU0sR0FBRyxhQUFhLENBQUM7UUFFckMsRUFBRSxDQUFDLENBQUMsbUJBQW1CLElBQUksb0JBQW9CLElBQUksTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7U0FDcEM7UUFFRCxFQUFFLENBQUMsQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO1NBQzlCO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztTQUM3Qjs7Ozs7UUFJRCxVQUFVO1FBQ1YsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEtBQUssV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7Ozs7UUFJM0UsU0FBUztRQUNULE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7Ozs7O1FBSTFFLGVBQWU7UUFDZixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDOzs7O1lBdkN4RixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHVCQUF1QjthQUNwQzs7OztZQVZRLGdCQUFnQix1QkFhUixJQUFJLFlBQUksTUFBTSxTQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQzs7OzJCQXNCN0QsV0FBVyxTQUFDLCtCQUErQjswQkFLM0MsV0FBVyxTQUFDLHVDQUF1QztnQ0FLbkQsV0FBVyxTQUFDLHFDQUFxQzs7Ozs7Ozs7Ozs7Ozs7O0FBVXRELE1BQU07Ozs7SUFDRixZQUNPO1FBQUEsU0FBSSxHQUFKLElBQUk7S0FDVjs7OztJQUVPLGtCQUFrQjtRQUN0Qix1QkFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1FBQy9FLHVCQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7UUFDakYsdUJBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRWhDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsRUFBRSxDQUFDLENBQUMsbUJBQW1CLElBQUksb0JBQW9CLENBQUMsQ0FBQyxDQUFDO2dCQUM5QyxNQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQzthQUNwQztZQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO1NBQzdCO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztTQUM5Qjs7Ozs7UUFJRCxVQUFVO1FBQ1YsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEtBQUssV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7Ozs7UUFJMUUsU0FBUztRQUNULE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7Ozs7O1FBSXpFLGVBQWU7UUFDZixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDOzs7O1lBcEN2RixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjthQUNuQzs7OztZQXJEUSxnQkFBZ0IsdUJBd0RSLElBQUksWUFBSSxNQUFNLFNBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDOzs7MkJBbUI3RCxXQUFXLFNBQUMsK0JBQStCOzBCQUszQyxXQUFXLFNBQUMsdUNBQXVDO2dDQUtuRCxXQUFXLFNBQUMscUNBQXFDOzs7Ozs7Ozs7Ozs7Ozs7QUFTdEQsTUFBTTs7OztJQUVGLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0tBQzVDOzs7WUFOSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFVBQVU7YUFDdkI7Ozs7WUEvRkcsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIGZvcndhcmRSZWYsXG4gICAgSG9zdCxcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbmplY3QsXG4gICAgVGVtcGxhdGVSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hUYWJzQ29tcG9uZW50IH0gZnJvbSAnLi90YWJzLmNvbXBvbmVudCc7XG5cbmVudW0gQnV0dG9uU3R5bGUge1xuICAgIFZJU0lCTEUgPSAndmlzaWJsZScsXG4gICAgSElEREVOID0gJ2hpZGRlbicsXG4gICAgTk9UX0RJU1BMQVlFRCA9ICdub3RfZGlzcGxheWVkJ1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hSaWdodEJ1dHRvblN0eWxlXSdcbn0pXG5cbmV4cG9ydCBjbGFzcyBJZ3hSaWdodEJ1dHRvblN0eWxlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihASG9zdCgpIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBJZ3hUYWJzQ29tcG9uZW50KSlcbiAgICBwdWJsaWMgdGFiczogSWd4VGFic0NvbXBvbmVudCkge1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UmlnaHRCdXR0b25TdHlsZSgpIHtcbiAgICAgICAgY29uc3Qgdmlld1BvcnRXaWR0aCA9IHRoaXMudGFicy52aWV3UG9ydC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgICBjb25zdCBpdGVtc0NvbnRhaW5lcldpZHRoID0gdGhpcy50YWJzLml0ZW1zQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgIGNvbnN0IGhlYWRlckNvbnRhaW5lcldpZHRoID0gdGhpcy50YWJzLmhlYWRlckNvbnRhaW5lci5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLnRhYnMub2Zmc2V0O1xuICAgICAgICBjb25zdCB0b3RhbCA9IG9mZnNldCArIHZpZXdQb3J0V2lkdGg7XG5cbiAgICAgICAgaWYgKGl0ZW1zQ29udGFpbmVyV2lkdGggPD0gaGVhZGVyQ29udGFpbmVyV2lkdGggJiYgb2Zmc2V0ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gQnV0dG9uU3R5bGUuTk9UX0RJU1BMQVlFRDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpdGVtc0NvbnRhaW5lcldpZHRoID4gdG90YWwpIHtcbiAgICAgICAgICAgIHJldHVybiBCdXR0b25TdHlsZS5WSVNJQkxFO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIEJ1dHRvblN0eWxlLkhJRERFTjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LXRhYnNfX2hlYWRlci1idXR0b24nKVxuICAgIGdldCB2aXNpYmxlQ1NTKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuZ2V0UmlnaHRCdXR0b25TdHlsZSgpID09PSBCdXR0b25TdHlsZS5WSVNJQkxFKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC10YWJzX19oZWFkZXItYnV0dG9uLS1oaWRkZW4nKVxuICAgIGdldCBoaWRkZW5DU1MoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAodGhpcy5nZXRSaWdodEJ1dHRvblN0eWxlKCkgPT09IEJ1dHRvblN0eWxlLkhJRERFTikgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtdGFic19faGVhZGVyLWJ1dHRvbi0tbm9uZScpXG4gICAgZ2V0IG5vdERpc3BsYXllZENTUygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmdldFJpZ2h0QnV0dG9uU3R5bGUoKSA9PT0gQnV0dG9uU3R5bGUuTk9UX0RJU1BMQVlFRCkgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hMZWZ0QnV0dG9uU3R5bGVdJ1xufSlcblxuZXhwb3J0IGNsYXNzIElneExlZnRCdXR0b25TdHlsZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IoQEhvc3QoKSBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gSWd4VGFic0NvbXBvbmVudCkpXG4gICAgcHVibGljIHRhYnM6IElneFRhYnNDb21wb25lbnQpIHtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldExlZnRCdXR0b25TdHlsZSgpIHtcbiAgICAgICAgY29uc3QgaXRlbXNDb250YWluZXJXaWR0aCA9IHRoaXMudGFicy5pdGVtc0NvbnRhaW5lci5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgICBjb25zdCBoZWFkZXJDb250YWluZXJXaWR0aCA9IHRoaXMudGFicy5oZWFkZXJDb250YWluZXIubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy50YWJzLm9mZnNldDtcblxuICAgICAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoaXRlbXNDb250YWluZXJXaWR0aCA8PSBoZWFkZXJDb250YWluZXJXaWR0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBCdXR0b25TdHlsZS5OT1RfRElTUExBWUVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEJ1dHRvblN0eWxlLkhJRERFTjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBCdXR0b25TdHlsZS5WSVNJQkxFO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtdGFic19faGVhZGVyLWJ1dHRvbicpXG4gICAgZ2V0IHZpc2libGVDU1MoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAodGhpcy5nZXRMZWZ0QnV0dG9uU3R5bGUoKSA9PT0gQnV0dG9uU3R5bGUuVklTSUJMRSkgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtdGFic19faGVhZGVyLWJ1dHRvbi0taGlkZGVuJylcbiAgICBnZXQgaGlkZGVuQ1NTKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuZ2V0TGVmdEJ1dHRvblN0eWxlKCkgPT09IEJ1dHRvblN0eWxlLkhJRERFTikgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtdGFic19faGVhZGVyLWJ1dHRvbi0tbm9uZScpXG4gICAgZ2V0IG5vdERpc3BsYXllZENTUygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmdldExlZnRCdXR0b25TdHlsZSgpID09PSBCdXR0b25TdHlsZS5OT1RfRElTUExBWUVEKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFRhYl0nXG59KVxuZXhwb3J0IGNsYXNzIElneFRhYkl0ZW1UZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICB9XG59XG4iXX0=