/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject } from '@angular/core';
import { IgxGridCellComponent } from '../cell.component';
import { GridBaseAPIService } from '../api.service';
import { IgxSelectionAPIService } from '../../core/selection';
import { valToPxlsUsingRange } from '../../core/utils';
import { DOCUMENT } from '@angular/common';
export class IgxTreeGridCellComponent extends IgxGridCellComponent {
    /**
     * @param {?} gridAPI
     * @param {?} selection
     * @param {?} cdr
     * @param {?} element
     * @param {?} document
     */
    constructor(gridAPI, selection, cdr, element, document) {
        super(gridAPI, selection, cdr, element);
        this.document = document;
        this.treeGridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @hidden
     * @return {?}
     */
    resolveStyleClasses() {
        return super.resolveStyleClasses() + ' igx-grid__td--tree-cell';
    }
    /**
     * @hidden
     * @return {?}
     */
    get indentation() {
        return this.row.treeRow.level;
    }
    /**
     * @hidden
     * @return {?}
     */
    get hasChildren() {
        return this.row.treeRow.children && this.row.treeRow.children.length > 0;
    }
    /**
     * @hidden
     * @return {?}
     */
    get expanded() {
        return this.row.expanded;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    toggle(event) {
        event.stopPropagation();
        this.treeGridAPI.trigger_row_expansion_toggle(this.gridID, this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onIndicatorFocus(event) {
        this.gridAPI.submit_value(this.gridID);
        this.onFocus(event);
    }
    /**
     * @hidden
     * @param {?} range
     * @return {?}
     */
    calculateSizeToFit(range) {
        const /** @type {?} */ indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;
        const /** @type {?} */ indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);
        const /** @type {?} */ indicatorMargin = parseFloat(indicatorStyle.marginRight);
        let /** @type {?} */ leftPadding = 0;
        if (this.indentationDiv) {
            const /** @type {?} */ indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);
            leftPadding = parseFloat(indentationStyle.paddingLeft);
        }
        const /** @type {?} */ largestWidth = Math.max(...Array.from(this.nativeElement.children)
            .map((child) => valToPxlsUsingRange(range, child)));
        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;
    }
}
IgxTreeGridCellComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-tree-grid-cell',
                template: `<ng-template #defaultCell igxTextHighlight [cssClass]="highlightClass" [activeCssClass]="activeHighlightClass" [groupName]="gridID"
        [value]="formatter ? formatter(value) : value" [row]="rowIndex" [column]="this.column.visibleIndex" [page]="this.grid.page" [containerClass]="'igx-grid__td-text'">
    <ng-container *ngIf="column.dataType === 'boolean' || column.dataType === 'string' || formatter; else default" >
        <div class="igx-grid__td-text">{{ formatter ? formatter(value) : value }}</div>
    </ng-container>
    <ng-template #default>
        <div class="igx-grid__td-text">{{ column.dataType === 'number' ? (value | igxdecimal) : (value | igxdate) }}</div>
    </ng-template>
</ng-template>
<ng-template #inlineEditor  let-cell="cell">
    <ng-container *ngIf="column.dataType === 'string'">
        <igx-input-group>
            <input igxInput [(ngModel)]="gridAPI.get_cell_inEditMode(gridID).cell.editValue" [igxFocus]="focused">
        </igx-input-group>
    </ng-container>
    <ng-container *ngIf="column.dataType === 'number'">
        <igx-input-group>
            <input igxInput [(ngModel)]="gridAPI.get_cell_inEditMode(gridID).cell.editValue" [igxFocus]="focused"  type="number">
        </igx-input-group>
    </ng-container>
    <ng-container *ngIf="column.dataType === 'boolean'">
        <igx-checkbox [(ngModel)]="gridAPI.get_cell_inEditMode(gridID).cell.editValue" [checked]="gridAPI.get_cell_inEditMode(gridID).cell.editValue" [disableRipple]="true"></igx-checkbox>
    </ng-container>
    <ng-container *ngIf="column.dataType === 'date'">
        <igx-datePicker [(ngModel)]="gridAPI.get_cell_inEditMode(gridID).cell.editValue" [labelVisibility]="false"></igx-datePicker>
    </ng-container>
</ng-template>
<ng-container *ngIf="!inEditMode">
    <ng-container *ngIf="indentation > 0">
        <div #indentationDiv class="igx-grid__tree-cell--padding-level-{{indentation}}"></div>
    </ng-container>
    <div #indicator class="igx-grid__tree-grouping-indicator" [ngStyle]="{'visibility': hasChildren ? 'visible' : 'hidden'}"
         (click)="toggle($event)" (focus)="onIndicatorFocus($event)" tabindex="-1">
        <igx-icon *ngIf="!expanded" fontSet="material">chevron_right</igx-icon>
        <igx-icon *ngIf="expanded" fontSet="material">expand_more</igx-icon>
    </div>
</ng-container>
<ng-container *ngTemplateOutlet="template; context: context">
</ng-container>
`
            },] },
];
/** @nocollapse */
IgxTreeGridCellComponent.ctorParameters = () => [
    { type: GridBaseAPIService, },
    { type: IgxSelectionAPIService, },
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
];
IgxTreeGridCellComponent.propDecorators = {
    "indicator": [{ type: ViewChild, args: ['indicator', { read: ElementRef },] },],
    "indentationDiv": [{ type: ViewChild, args: ['indentationDiv', { read: ElementRef },] },],
};
function IgxTreeGridCellComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridCellComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridCellComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxTreeGridCellComponent.propDecorators;
    /** @type {?} */
    IgxTreeGridCellComponent.prototype.treeGridAPI;
    /** @type {?} */
    IgxTreeGridCellComponent.prototype.indicator;
    /** @type {?} */
    IgxTreeGridCellComponent.prototype.indentationDiv;
    /** @type {?} */
    IgxTreeGridCellComponent.prototype.document;
}

//# sourceMappingURL=data:application/json;base64,