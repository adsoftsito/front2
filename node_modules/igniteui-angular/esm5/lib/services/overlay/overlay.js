/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { DOCUMENT } from '@angular/common';
import { GlobalPositionStrategy } from './position/global-position-strategy';
import { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';
import { ApplicationRef, ComponentFactoryResolver, ElementRef, EventEmitter, Inject, Injectable, Injector } from '@angular/core';
import { AnimationBuilder } from '@angular/animations';
import { fromEvent, Subject } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/animations";
import * as i2 from "@angular/common";
/**
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)
 * The overlay service allows users to show components on overlay div above all other elements in the page.
 */
var IgxOverlayService = /** @class */ (function () {
    function IgxOverlayService(_factoryResolver, _appRef, _injector, builder, document) {
        var _this = this;
        this._factoryResolver = _factoryResolver;
        this._appRef = _appRef;
        this._injector = _injector;
        this.builder = builder;
        this.document = document;
        this._componentId = 0;
        this._overlayInfos = [];
        this.destroy$ = new Subject();
        this._defaultSettings = {
            positionStrategy: new GlobalPositionStrategy(),
            scrollStrategy: new NoOpScrollStrategy(),
            modal: true,
            closeOnOutsideClick: true
        };
        /**
         * Emitted before the component is opened.
         * ```typescript
         * onOpening(event: OverlayCancelableEventArgs){
         *     const onOpening = event;
         * }
         * ```
         */
        this.onOpening = new EventEmitter();
        /**
         * Emitted after the component is opened and all animations are finished.
         * ```typescript
         * onOpened(event: OverlayEventArgs){
         *     const onOpened = event;
         * }
         * ```
         */
        this.onOpened = new EventEmitter();
        /**
         * Emitted before the component is closed.
         * ```typescript
         * onClosing(event: OverlayCancelableEventArgs){
         *     const onClosing = event;
         * }
         * ```
         */
        this.onClosing = new EventEmitter();
        /**
         * Emitted after the component is closed and all animations are finished.
         * ```typescript
         * onClosed(event: OverlayEventArgs){
         *     const onClosed = event;
         * }
         * ```
         */
        this.onClosed = new EventEmitter();
        /**
         * Emitted before animation is started
         * ```typescript
         * onAnimation(event: OverlayAnimationEventArgs){
         *     const onAnimation = event;
         * }
         * ```
         */
        this.onAnimation = new EventEmitter();
        this.documentClicked = function (ev) {
            for (var /** @type {?} */ i = _this._overlayInfos.length; i--;) {
                var /** @type {?} */ info = _this._overlayInfos[i];
                if (info.settings.modal) {
                    return;
                }
                if (info.settings.closeOnOutsideClick) {
                    if (!info.elementRef.nativeElement.contains(ev.target)) {
                        _this.hide(info.id);
                        // TODO: should we return here too and not closing all no-modal overlays?
                    }
                }
            }
        };
        this.repositionAll = function (ev) {
            for (var /** @type {?} */ i = _this._overlayInfos.length; i--;) {
                _this.reposition(_this._overlayInfos[i].id);
            }
        };
        this._document = /** @type {?} */ (this.document);
    }
    /**
     * @param {?} compOrId
     * @param {?=} settings
     * @return {?}
     */
    IgxOverlayService.prototype.show = /**
     * @param {?} compOrId
     * @param {?=} settings
     * @return {?}
     */
    function (compOrId, settings) {
        var /** @type {?} */ info;
        var /** @type {?} */ id;
        if (typeof compOrId === 'string') {
            id = compOrId;
            info = this.getOverlayById(compOrId);
            if (!info) {
                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);
                return;
            }
        }
        else {
            id = (this._componentId++).toString();
            info = this.getOverlayInfo(compOrId);
            //  if there is no info most probably wrong type component was provided and we just go out
            if (!info) {
                return;
            }
            info.id = id;
        }
        settings = Object.assign({}, this._defaultSettings, settings);
        info.settings = settings;
        var /** @type {?} */ eventArgs = { id: id, componentRef: info.componentRef, cancel: false };
        this.onOpening.emit(eventArgs);
        if (eventArgs.cancel) {
            if (info.componentRef) {
                this._appRef.detachView(info.componentRef.hostView);
                info.componentRef.destroy();
            }
            return id;
        }
        //  if there is no close animation player, or there is one but it is not started yet we are in clear
        //  opening. Otherwise, if there is close animation player playing animation now we should not setup
        //  overlay this is already done
        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {
            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();
            info.hook = this.placeElementHook(info.elementRef.nativeElement);
            this.moveElementToOverlay(info);
            this.updateSize(info);
            this._overlayInfos.push(info);
            settings.positionStrategy.position(info.elementRef.nativeElement.parentElement, info.initialSize, document, true);
            settings.scrollStrategy.initialize(this._document, this, id);
            settings.scrollStrategy.attach();
        }
        this.addOutsideClickListener(info);
        this.addResizeHandler(info.id);
        if (info.settings.modal) {
            this.setupModalWrapper(info);
        }
        if (info.settings.positionStrategy.settings.openAnimation) {
            this.playOpenAnimation(info);
        }
        else {
            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });
        }
        return id;
    };
    /**
     * Hides the component with the ID provided as a parameter.
     * ```typescript
     * this.overlay.hide(id);
     * ```
     */
    /**
     * Hides the component with the ID provided as a parameter.
     * ```typescript
     * this.overlay.hide(id);
     * ```
     * @param {?} id
     * @return {?}
     */
    IgxOverlayService.prototype.hide = /**
     * Hides the component with the ID provided as a parameter.
     * ```typescript
     * this.overlay.hide(id);
     * ```
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var /** @type {?} */ info = this.getOverlayById(id);
        if (!info) {
            console.warn('igxOverlay.hide was called with wrong id: ' + id);
            return;
        }
        var /** @type {?} */ eventArgs = { id: id, componentRef: info.componentRef, cancel: false };
        this.onClosing.emit(eventArgs);
        if (eventArgs.cancel) {
            return;
        }
        info.settings.scrollStrategy.detach();
        this.removeOutsideClickListener(info);
        this.removeResizeHandler(info.id);
        var /** @type {?} */ child = info.elementRef.nativeElement;
        if (info.settings.modal) {
            var /** @type {?} */ parent_1 = /** @type {?} */ (child.parentNode.parentNode);
            this.applyAnimationParams(parent_1, info.settings.positionStrategy.settings.closeAnimation);
            parent_1.classList.remove('igx-overlay__wrapper--modal');
            parent_1.classList.add('igx-overlay__wrapper');
        }
        if (info.settings.positionStrategy.settings.closeAnimation) {
            this.playCloseAnimation(info);
        }
        else {
            this.onCloseDone(info);
        }
    };
    /**
     * Hides all the components and the overlay.
     * ```typescript
     * this.overlay.hideAll();
     * ```
     */
    /**
     * Hides all the components and the overlay.
     * ```typescript
     * this.overlay.hideAll();
     * ```
     * @return {?}
     */
    IgxOverlayService.prototype.hideAll = /**
     * Hides all the components and the overlay.
     * ```typescript
     * this.overlay.hideAll();
     * ```
     * @return {?}
     */
    function () {
        // since overlays are removed on animation done, que all hides
        for (var /** @type {?} */ i = this._overlayInfos.length; i--;) {
            this.hide(this._overlayInfos[i].id);
        }
    };
    /**
     * Repositions the component with ID provided as a parameter.
     * ```typescript
     * this.overlay.reposition(id);
     * ```
     */
    /**
     * Repositions the component with ID provided as a parameter.
     * ```typescript
     * this.overlay.reposition(id);
     * ```
     * @param {?} id
     * @return {?}
     */
    IgxOverlayService.prototype.reposition = /**
     * Repositions the component with ID provided as a parameter.
     * ```typescript
     * this.overlay.reposition(id);
     * ```
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var /** @type {?} */ overlay = this.getOverlayById(id);
        if (!overlay) {
            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);
            return;
        }
        overlay.settings.positionStrategy.position(overlay.elementRef.nativeElement.parentElement, overlay.initialSize, this._document);
    };
    /**
     * @param {?} component
     * @return {?}
     */
    IgxOverlayService.prototype.getOverlayInfo = /**
     * @param {?} component
     * @return {?}
     */
    function (component) {
        var /** @type {?} */ info = {};
        if (component instanceof ElementRef) {
            info.elementRef = /** @type {?} */ (component);
        }
        else {
            var /** @type {?} */ dynamicFactory = void 0;
            try {
                dynamicFactory = this._factoryResolver.resolveComponentFactory(component);
            }
            catch (/** @type {?} */ error) {
                console.error(error);
                return null;
            }
            var /** @type {?} */ dynamicComponent = dynamicFactory.create(this._injector);
            this._appRef.attachView(dynamicComponent.hostView);
            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.
            var /** @type {?} */ element = dynamicComponent.location.nativeElement.lastElementChild;
            info.elementRef = /** @type {?} */ ({ nativeElement: element });
            info.componentRef = dynamicComponent;
        }
        return info;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    IgxOverlayService.prototype.placeElementHook = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        if (!element.parentElement) {
            return null;
        }
        var /** @type {?} */ hook = this._document.createElement('div');
        element.parentElement.insertBefore(hook, element);
        return hook;
    };
    /**
     * @param {?} info
     * @return {?}
     */
    IgxOverlayService.prototype.moveElementToOverlay = /**
     * @param {?} info
     * @return {?}
     */
    function (info) {
        var /** @type {?} */ wrapperElement = this.getWrapperElement();
        var /** @type {?} */ contentElement = this.getContentElement(wrapperElement, info.settings);
        this.getOverlayElement(info).appendChild(wrapperElement);
        var /** @type {?} */ elementScrollTop = info.elementRef.nativeElement.scrollTop;
        contentElement.appendChild(info.elementRef.nativeElement);
        if (elementScrollTop) {
            info.elementRef.nativeElement.scrollTop = elementScrollTop;
        }
    };
    /**
     * @return {?}
     */
    IgxOverlayService.prototype.getWrapperElement = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ wrapper = this._document.createElement('div');
        wrapper.classList.add('igx-overlay__wrapper');
        return wrapper;
    };
    /**
     * @param {?} wrapperElement
     * @param {?} settings
     * @return {?}
     */
    IgxOverlayService.prototype.getContentElement = /**
     * @param {?} wrapperElement
     * @param {?} settings
     * @return {?}
     */
    function (wrapperElement, settings) {
        var /** @type {?} */ content = this._document.createElement('div');
        if (settings.modal) {
            content.classList.add('igx-overlay__content--modal');
            content.addEventListener('click', function (ev) {
                ev.stopPropagation();
            });
        }
        else {
            content.classList.add('igx-overlay__content');
        }
        content.addEventListener('scroll', function (ev) {
            ev.stopPropagation();
        });
        wrapperElement.appendChild(content);
        return content;
    };
    /**
     * @param {?} info
     * @return {?}
     */
    IgxOverlayService.prototype.getOverlayElement = /**
     * @param {?} info
     * @return {?}
     */
    function (info) {
        if (info.settings.outlet) {
            return info.settings.outlet.nativeElement;
        }
        if (!this._overlayElement) {
            this._overlayElement = this._document.createElement('div');
            this._overlayElement.classList.add('igx-overlay');
            this._document.body.appendChild(this._overlayElement);
        }
        return this._overlayElement;
    };
    /**
     * @param {?} info
     * @return {?}
     */
    IgxOverlayService.prototype.updateSize = /**
     * @param {?} info
     * @return {?}
     */
    function (info) {
        if (info.componentRef) {
            //  if we are positioning component this is first time it gets visible
            //  and we can finally get its size
            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();
        }
        // set content div size only if element to show has size
        if (info.initialSize.width !== 0 && info.initialSize.height !== 0) {
            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';
            info.elementRef.nativeElement.parentElement.style.height = info.initialSize.height + 'px';
        }
    };
    /**
     * @param {?} info
     * @return {?}
     */
    IgxOverlayService.prototype.setupModalWrapper = /**
     * @param {?} info
     * @return {?}
     */
    function (info) {
        var _this = this;
        var /** @type {?} */ wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;
        fromEvent(wrapperElement, 'keydown').pipe(filter(function (ev) { return ev.key === 'Escape' || ev.key === 'Esc'; }), takeUntil(this.destroy$)).subscribe(function () { return _this.hide(info.id); });
        wrapperElement.classList.remove('igx-overlay__wrapper');
        this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);
        wrapperElement.classList.add('igx-overlay__wrapper--modal');
    };
    /**
     * @param {?} info
     * @return {?}
     */
    IgxOverlayService.prototype.onCloseDone = /**
     * @param {?} info
     * @return {?}
     */
    function (info) {
        var /** @type {?} */ child = info.elementRef.nativeElement;
        var /** @type {?} */ outlet = this.getOverlayElement(info);
        if (!outlet.contains(child)) {
            console.warn('Component with id:' + info.id + ' is already removed!');
            return;
        }
        outlet.removeChild(child.parentNode.parentNode);
        if (info.componentRef) {
            this._appRef.detachView(info.componentRef.hostView);
            info.componentRef.destroy();
        }
        if (info.hook) {
            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);
            info.hook.parentElement.removeChild(info.hook);
        }
        var /** @type {?} */ index = this._overlayInfos.indexOf(info);
        this._overlayInfos.splice(index, 1);
        // this._overlayElement.parentElement check just for tests that manually delete the element
        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {
            this._overlayElement.parentElement.removeChild(this._overlayElement);
            this._overlayElement = null;
        }
        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });
    };
    /**
     * @param {?} info
     * @return {?}
     */
    IgxOverlayService.prototype.playOpenAnimation = /**
     * @param {?} info
     * @return {?}
     */
    function (info) {
        var _this = this;
        if (!info.openAnimationPlayer) {
            var /** @type {?} */ animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);
            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);
            info.openAnimationPlayer.init();
            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer
            //  and then getting the positions from it.
            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891
            //  As soon as this is resolved we can remove this hack
            var /** @type {?} */ innerRenderer = (/** @type {?} */ (info.openAnimationPlayer))._renderer;
            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];
            info.openAnimationPlayer.onDone(function () {
                _this.onOpened.emit({ id: info.id, componentRef: info.componentRef });
                info.openAnimationPlayer.reset();
                info.openAnimationPlayer = null;
                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {
                    info.closeAnimationPlayer.reset();
                }
            });
        }
        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {
            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation
            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where
            //  the previous has finished we need the amount up to 1, therefore we are subtracting what
            //  getPosition() returns from one
            var /** @type {?} */ position = 1 - info.closeAnimationInnerPlayer.getPosition();
            info.closeAnimationPlayer.reset();
            info.openAnimationPlayer.setPosition(position);
        }
        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });
        info.openAnimationPlayer.play();
    };
    /**
     * @param {?} info
     * @return {?}
     */
    IgxOverlayService.prototype.playCloseAnimation = /**
     * @param {?} info
     * @return {?}
     */
    function (info) {
        var _this = this;
        if (!info.closeAnimationPlayer) {
            var /** @type {?} */ animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);
            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);
            info.closeAnimationPlayer.init();
            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer
            //  and then getting the positions from it.
            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891
            //  As soon as this is resolved we can remove this hack
            var /** @type {?} */ innerRenderer = (/** @type {?} */ (info.closeAnimationPlayer))._renderer;
            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];
            info.closeAnimationPlayer.onDone(function () {
                info.closeAnimationPlayer.reset();
                info.closeAnimationPlayer = null;
                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {
                    info.openAnimationPlayer.reset();
                }
                _this.onCloseDone(info);
            });
        }
        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {
            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation
            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where
            //  the previous has finished we need the amount up to 1, therefore we are subtracting what
            //  getPosition() returns from one
            var /** @type {?} */ position = 1 - info.openAnimationInnerPlayer.getPosition();
            info.openAnimationPlayer.reset();
            info.closeAnimationPlayer.setPosition(position);
        }
        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });
        info.closeAnimationPlayer.play();
    };
    /**
     * @param {?} wrapperElement
     * @param {?} animationOptions
     * @return {?}
     */
    IgxOverlayService.prototype.applyAnimationParams = /**
     * @param {?} wrapperElement
     * @param {?} animationOptions
     * @return {?}
     */
    function (wrapperElement, animationOptions) {
        if (!animationOptions) {
            wrapperElement.style.transitionDuration = '0ms';
            return;
        }
        if (animationOptions.type === 10 /* AnimateRef */) {
            animationOptions = (/** @type {?} */ (animationOptions)).animation;
        }
        if (!animationOptions.options || !animationOptions.options.params) {
            return;
        }
        var /** @type {?} */ params = /** @type {?} */ (animationOptions.options.params);
        if (params.duration) {
            wrapperElement.style.transitionDuration = params.duration;
        }
        if (params.easing) {
            wrapperElement.style.transitionTimingFunction = params.easing;
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    IgxOverlayService.prototype.getOverlayById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var /** @type {?} */ overlay = this._overlayInfos.find(function (e) { return e.id === id; });
        return overlay;
    };
    /**
     * @param {?} info
     * @return {?}
     */
    IgxOverlayService.prototype.addOutsideClickListener = /**
     * @param {?} info
     * @return {?}
     */
    function (info) {
        var _this = this;
        if (info.settings.closeOnOutsideClick) {
            if (info.settings.modal) {
                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')
                    .pipe(takeUntil(this.destroy$))
                    .subscribe(function () { return _this.hide(info.id); });
            }
            else if (
            //  if all overlays minus closing overlays equals one add the handler
            this._overlayInfos.filter(function (x) { return x.settings.closeOnOutsideClick && !x.settings.modal; }).length -
                this._overlayInfos.filter(function (x) {
                    return x.settings.closeOnOutsideClick && !x.settings.modal &&
                        x.closeAnimationPlayer &&
                        x.closeAnimationPlayer.hasStarted();
                }).length === 1) {
                this._document.addEventListener('click', this.documentClicked, true);
            }
        }
    };
    /**
     * @param {?} info
     * @return {?}
     */
    IgxOverlayService.prototype.removeOutsideClickListener = /**
     * @param {?} info
     * @return {?}
     */
    function (info) {
        if (info.settings.modal === false) {
            var /** @type {?} */ shouldRemoveClickEventListener_1 = true;
            this._overlayInfos.forEach(function (o) {
                if (o.settings.modal === false && o.id !== info.id) {
                    shouldRemoveClickEventListener_1 = false;
                }
            });
            if (shouldRemoveClickEventListener_1) {
                this._document.removeEventListener('click', this.documentClicked, true);
            }
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    IgxOverlayService.prototype.addResizeHandler = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var /** @type {?} */ closingOverlaysCount = this._overlayInfos
            .filter(function (o) { return o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted(); })
            .length;
        if (this._overlayInfos.length - closingOverlaysCount === 1) {
            this._document.defaultView.addEventListener('resize', this.repositionAll);
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    IgxOverlayService.prototype.removeResizeHandler = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var /** @type {?} */ closingOverlaysCount = this._overlayInfos
            .filter(function (o) { return o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted(); })
            .length;
        if (this._overlayInfos.length - closingOverlaysCount === 1) {
            this._document.defaultView.removeEventListener('resize', this.repositionAll);
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxOverlayService.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    IgxOverlayService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    IgxOverlayService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver, },
        { type: ApplicationRef, },
        { type: Injector, },
        { type: AnimationBuilder, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    /** @nocollapse */ IgxOverlayService.ngInjectableDef = i0.defineInjectable({ factory: function IgxOverlayService_Factory() { return new IgxOverlayService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.ApplicationRef), i0.inject(i0.INJECTOR), i0.inject(i1.AnimationBuilder), i0.inject(i2.DOCUMENT)); }, token: IgxOverlayService, providedIn: "root" });
    return IgxOverlayService;
}());
export { IgxOverlayService };
function IgxOverlayService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxOverlayService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxOverlayService.ctorParameters;
    /** @type {?} */
    IgxOverlayService.prototype._componentId;
    /** @type {?} */
    IgxOverlayService.prototype._overlayInfos;
    /** @type {?} */
    IgxOverlayService.prototype._overlayElement;
    /** @type {?} */
    IgxOverlayService.prototype._document;
    /** @type {?} */
    IgxOverlayService.prototype.destroy$;
    /** @type {?} */
    IgxOverlayService.prototype._defaultSettings;
    /**
     * Emitted before the component is opened.
     * ```typescript
     * onOpening(event: OverlayCancelableEventArgs){
     *     const onOpening = event;
     * }
     * ```
     * @type {?}
     */
    IgxOverlayService.prototype.onOpening;
    /**
     * Emitted after the component is opened and all animations are finished.
     * ```typescript
     * onOpened(event: OverlayEventArgs){
     *     const onOpened = event;
     * }
     * ```
     * @type {?}
     */
    IgxOverlayService.prototype.onOpened;
    /**
     * Emitted before the component is closed.
     * ```typescript
     * onClosing(event: OverlayCancelableEventArgs){
     *     const onClosing = event;
     * }
     * ```
     * @type {?}
     */
    IgxOverlayService.prototype.onClosing;
    /**
     * Emitted after the component is closed and all animations are finished.
     * ```typescript
     * onClosed(event: OverlayEventArgs){
     *     const onClosed = event;
     * }
     * ```
     * @type {?}
     */
    IgxOverlayService.prototype.onClosed;
    /**
     * Emitted before animation is started
     * ```typescript
     * onAnimation(event: OverlayAnimationEventArgs){
     *     const onAnimation = event;
     * }
     * ```
     * @type {?}
     */
    IgxOverlayService.prototype.onAnimation;
    /** @type {?} */
    IgxOverlayService.prototype.documentClicked;
    /** @type {?} */
    IgxOverlayService.prototype.repositionAll;
    /** @type {?} */
    IgxOverlayService.prototype._factoryResolver;
    /** @type {?} */
    IgxOverlayService.prototype._appRef;
    /** @type {?} */
    IgxOverlayService.prototype._injector;
    /** @type {?} */
    IgxOverlayService.prototype.builder;
    /** @type {?} */
    IgxOverlayService.prototype.document;
}

//# sourceMappingURL=data:application/json;base64,