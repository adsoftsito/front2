/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectorRef, Component, Input, TemplateRef, ViewChild, HostBinding, ElementRef, HostListener } from '@angular/core';
import { IgxColumnComponent } from '../column.component';
import { IgxChipsAreaComponent, IgxChipComponent } from '../../chips';
import { IgxFilteringService } from './grid-filtering.service';
import { cloneArray } from '../../core/utils';
import { IgxGridNavigationService } from '../grid-navigation.service';
/**
 * @hidden
 */
export class IgxGridFilteringCellComponent {
    /**
     * @param {?} cdr
     * @param {?} filteringService
     * @param {?} navService
     */
    constructor(cdr, filteringService, navService) {
        this.cdr = cdr;
        this.filteringService = filteringService;
        this.navService = navService;
        this.baseClass = 'igx-grid__filtering-cell-indicator';
        this.currentTemplate = null;
        this.moreFiltersCount = 0;
        this.cssClass = 'igx-grid__filtering-cell';
        this.filteringService.subscribeToEvents();
    }
    /**
     * @return {?}
     */
    get width() {
        // HACK - think of a better solution
        const /** @type {?} */ colWidth = this.column.width;
        const /** @type {?} */ isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;
        if (isPercentageWidth) {
            const /** @type {?} */ firstContentCell = this.column.cells[0];
            if (firstContentCell) {
                return firstContentCell.nativeElement.getBoundingClientRect().width + 'px';
            }
        }
        else {
            return this.column.width;
        }
    }
    /**
     * @return {?}
     */
    get isLastPinned() {
        const /** @type {?} */ pinnedCols = this.filteringService.grid.pinnedColumns;
        if (pinnedCols.length === 0) {
            return false;
        }
        else {
            return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.filteringService.columnToChipToFocus.set(this.column.field, false);
        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.updateFilterCellArea();
    }
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    onTabKeyDown(eventArgs) {
        if (eventArgs.shiftKey) {
            if (this.column.visibleIndex > 0 && !this.navService.isColumnLeftFullyVisible(this.column.visibleIndex - 1)) {
                eventArgs.preventDefault();
                this.filteringService.grid.headerContainer.scrollTo(this.column.visibleIndex - 1);
            }
            else if (this.column.visibleIndex === 0) {
                eventArgs.preventDefault();
            }
        }
        else {
            if (this.column.visibleIndex === this.filteringService.grid.columnList.length - 1) {
                if (this.currentTemplate === this.defaultFilter) {
                    if (this.isMoreIconVisible() === false) {
                        if (this.moreIcon.nativeElement === document.activeElement) {
                            this.navService.goToFirstCell();
                        }
                    }
                    else if (this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__item`) ===
                        document.activeElement) {
                        this.navService.goToFirstCell();
                    }
                }
                else {
                    this.navService.goToFirstCell();
                }
            }
            else if (!this.navService.isColumnFullyVisible(this.column.visibleIndex + 1)) {
                eventArgs.preventDefault();
                this.filteringService.grid.headerContainer.scrollTo(this.column.visibleIndex + 1);
            }
        }
        eventArgs.stopPropagation();
    }
    /**
     * Returns the chip to be focused.
     * @return {?}
     */
    getChipToFocus() {
        return this.filteringService.columnToChipToFocus.get(this.column.field);
    }
    /**
     * Updates the filtering cell area.
     * @return {?}
     */
    updateFilterCellArea() {
        this.expressionsList = this.filteringService.getExpressions(this.column.field);
        this.updateVisibleFilters();
    }
    /**
     * @return {?}
     */
    get template() {
        if (!this.column.filterable) {
            this.currentTemplate = null;
            return null;
        }
        const /** @type {?} */ expressionTree = this.column.filteringExpressionsTree;
        if (!expressionTree || expressionTree.filteringOperands.length === 0) {
            this.currentTemplate = this.emptyFilter;
            return this.emptyFilter;
        }
        if (this.filteringService.isFilterComplex(this.column.field)) {
            this.currentTemplate = this.complexFilter;
            return this.complexFilter;
        }
        this.currentTemplate = this.defaultFilter;
        return this.defaultFilter;
    }
    /**
     * Chip clicked event handler.
     * @param {?=} expression
     * @return {?}
     */
    onChipClicked(expression) {
        if (expression) {
            this.expressionsList.forEach((item) => {
                item.isSelected = (item.expression === expression);
            });
        }
        else if (this.expressionsList.length > 0) {
            this.expressionsList.forEach((item) => {
                item.isSelected = false;
            });
            this.expressionsList[0].isSelected = true;
        }
        this.filteringService.filteredColumn = this.column;
        this.filteringService.isFilterRowVisible = true;
        this.filteringService.selectedExpression = expression;
    }
    /**
     * Chip removed event handler.
     * @param {?} eventArgs
     * @param {?} item
     * @return {?}
     */
    onChipRemoved(eventArgs, item) {
        const /** @type {?} */ indexToRemove = this.expressionsList.indexOf(item);
        this.removeExpression(indexToRemove);
    }
    /**
     * Clears the filtering.
     * @return {?}
     */
    clearFiltering() {
        this.filteringService.clearFilter(this.column.field);
        this.cdr.detectChanges();
    }
    /**
     * Chip keydown event handler.
     * @param {?} eventArgs
     * @param {?=} expression
     * @return {?}
     */
    onChipKeyDown(eventArgs, expression) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            eventArgs.preventDefault();
            this.onChipClicked(expression);
        }
    }
    /**
     * Returns the filtering indicator class.
     * @return {?}
     */
    filteringIndicatorClass() {
        return {
            [this.baseClass]: !this.isMoreIconVisible(),
            [`${this.baseClass}--hidden`]: this.isMoreIconVisible()
        };
    }
    /**
     * Focus a chip depending on the current visible template.
     * @return {?}
     */
    focusChip() {
        if (this.currentTemplate === this.defaultFilter) {
            if (this.isMoreIconVisible() === false) {
                this.moreIcon.nativeElement.focus();
            }
            else {
                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();
            }
        }
        else if (this.currentTemplate === this.emptyFilter) {
            this.ghostChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();
        }
        else if (this.currentTemplate === this.complexFilter) {
            this.complexChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();
        }
    }
    /**
     * @param {?} indexToRemove
     * @return {?}
     */
    removeExpression(indexToRemove) {
        if (indexToRemove === 0 && this.expressionsList.length === 1) {
            this.clearFiltering();
            return;
        }
        this.filteringService.removeExpression(this.column.field, indexToRemove);
        this.updateVisibleFilters();
        this.filter();
    }
    /**
     * @return {?}
     */
    filter() {
        this.rootExpressionsTree = this.filteringService.createSimpleFilteringTree(this.column.field);
        this.filteringService.filter(this.column.field, this.rootExpressionsTree);
    }
    /**
     * @return {?}
     */
    isMoreIconVisible() {
        return this.filteringService.columnToMoreIconHidden.get(this.column.field);
    }
    /**
     * @return {?}
     */
    updateVisibleFilters() {
        this.visibleExpressionsList = cloneArray(this.expressionsList);
        // TODO: revise the usage of this.cdr.detectChanges() here
        this.cdr.detectChanges();
        if (this.moreIcon) {
            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);
        }
        if (this.chipsArea && this.expressionsList.length > 1) {
            const /** @type {?} */ areaWidth = this.chipsArea.element.nativeElement.offsetWidth;
            let /** @type {?} */ viewWidth = 0;
            const /** @type {?} */ chipsAreaElements = this.chipsArea.element.nativeElement.children;
            let /** @type {?} */ visibleChipsCount = 0;
            const /** @type {?} */ moreIconWidth = this.moreIcon.nativeElement.offsetWidth -
                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);
            for (let /** @type {?} */ index = 0; index < chipsAreaElements.length - 1; index++) {
                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {
                    viewWidth += chipsAreaElements[index].offsetWidth;
                    if (index % 2 === 0) {
                        visibleChipsCount++;
                    }
                    else {
                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);
                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);
                    }
                }
                else {
                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {
                        visibleChipsCount--;
                    }
                    else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {
                        visibleChipsCount--;
                    }
                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;
                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);
                    this.visibleExpressionsList.splice(visibleChipsCount);
                    break;
                }
            }
            this.cdr.detectChanges();
        }
    }
}
IgxGridFilteringCellComponent.decorators = [
    { type: Component, args: [{
                preserveWhitespaces: false,
                selector: 'igx-grid-filtering-cell',
                template: `<ng-template #emptyFilter>
        <igx-chips-area [attr.draggable]="false" class="igx-filtering-chips">
            <igx-chip #ghostChip [attr.draggable]="false" (click)="onChipClicked()" (keydown)="onChipKeyDown($event)" [displayDensity]="'cosy'">
                <igx-icon [attr.draggable]="false" igxPrefix>filter_list</igx-icon>
                <span [attr.draggable]="false">Filter</span>
            </igx-chip>
        </igx-chips-area>
</ng-template>

<ng-template #defaultFilter>
    <igx-chips-area #chipsArea class="igx-filtering-chips">
        <ng-container *ngFor="let item of visibleExpressionsList; let last = last;" >
            <igx-chip
                [removable]="true"
                [displayDensity]="'cosy'"
                (click)="onChipClicked(item.expression)"
                (keydown)="onChipKeyDown($event, item.expression)"
                (onRemove)="onChipRemoved($event, item)">
                <igx-icon igxPrefix
                    fontSet="filtering-icons"
                    [name]="item.expression.condition.iconName">
                </igx-icon>
                <span #label>
                    {{filteringService.getChipLabel(item.expression)}}
                </span>
            </igx-chip>
            <span class="igx-filtering-chips__connector" *ngIf="!last">{{filteringService.getOperatorAsString(item.afterOperator)}}</span>
        </ng-container>
        <div #moreIcon [ngClass]="filteringIndicatorClass()" (click)="onChipClicked()" tabindex="0">
            <igx-icon>filter_list</igx-icon>
            <igx-badge [value]="moreFiltersCount"></igx-badge>
        </div>
    </igx-chips-area>
</ng-template>

<ng-template #complexFilter>
    <igx-chip #complexChip [removable]="true" [displayDensity]="'cosy'" (onRemove)="clearFiltering()">
        <igx-icon igxPrefix>filter_list</igx-icon>
        <span>Complex Filter</span>
    </igx-chip>
</ng-template>

<ng-container *ngTemplateOutlet="template; context: { $implicit: this }"></ng-container>
`
            },] },
];
/** @nocollapse */
IgxGridFilteringCellComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: IgxFilteringService, },
    { type: IgxGridNavigationService, },
];
IgxGridFilteringCellComponent.propDecorators = {
    "column": [{ type: Input },],
    "emptyFilter": [{ type: ViewChild, args: ['emptyFilter', { read: TemplateRef },] },],
    "defaultFilter": [{ type: ViewChild, args: ['defaultFilter', { read: TemplateRef },] },],
    "complexFilter": [{ type: ViewChild, args: ['complexFilter', { read: TemplateRef },] },],
    "chipsArea": [{ type: ViewChild, args: ['chipsArea', { read: IgxChipsAreaComponent },] },],
    "moreIcon": [{ type: ViewChild, args: ['moreIcon', { read: ElementRef },] },],
    "ghostChip": [{ type: ViewChild, args: ['ghostChip', { read: IgxChipComponent },] },],
    "complexChip": [{ type: ViewChild, args: ['complexChip', { read: IgxChipComponent },] },],
    "width": [{ type: HostBinding, args: ['style.min-width',] }, { type: HostBinding, args: ['style.max-width',] }, { type: HostBinding, args: ['style.flex-basis',] },],
    "cssClass": [{ type: HostBinding, args: ['class.igx-grid__filtering-cell',] },],
    "isLastPinned": [{ type: HostBinding, args: ['class.igx-grid__th--pinned-last',] },],
    "onTabKeyDown": [{ type: HostListener, args: ['keydown.shift.tab', ['$event'],] }, { type: HostListener, args: ['keydown.tab', ['$event'],] },],
};
function IgxGridFilteringCellComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridFilteringCellComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridFilteringCellComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxGridFilteringCellComponent.propDecorators;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.rootExpressionsTree;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.expressionsList;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.baseClass;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.currentTemplate;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.visibleExpressionsList;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.moreFiltersCount;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.column;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.emptyFilter;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.defaultFilter;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.complexFilter;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.chipsArea;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.moreIcon;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.ghostChip;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.complexChip;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.cssClass;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.cdr;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.filteringService;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.navService;
}

//# sourceMappingURL=data:application/json;base64,