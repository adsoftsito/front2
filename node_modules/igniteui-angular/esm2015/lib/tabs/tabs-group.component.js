/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ContentChild, ElementRef, forwardRef, HostBinding, Inject, Input, HostListener } from '@angular/core';
import { IgxTabsComponent } from './tabs.component';
import { IgxTabItemTemplateDirective } from './tabs.directives';
export class IgxTabsGroupComponent {
    /**
     * @param {?} _tabs
     * @param {?} _element
     */
    constructor(_tabs, _element) {
        this._tabs = _tabs;
        this._element = _element;
        this.isSelected = false;
        /**
         * An \@Input property that allows you to enable/disable the `IgxTabGroupComponent`.
         * ```html
         * <igx-tabs-group label="Tab 2  Lorem ipsum dolor sit" icon="home" [disabled]="true">
         * ```
         */
        this.disabled = false;
        /**
         * @hidden
         */
        this.role = 'tabpanel';
    }
    /**
     * @hidden
     * @return {?}
     */
    get styleClass() {
        return 'igx-tabs__group';
    }
    /**
     * An accessor that returns the `IgxTabItemComponent` component.
     * ```typescript
     * \@ViewChild("MyTabsGroup")
     * public tab: IgxTabsGroupComponent;
     * ngAfterViewInIt(){
     *    let tabComponent = this.tab.relatedTab;
     * }
     * ```
     * @return {?}
     */
    get relatedTab() {
        if (this._tabs.tabs) {
            return this._tabs.tabs.toArray()[this.index];
        }
    }
    /**
     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.
     * ```typescript
     * \@ViewChild("MyTabsGroup")
     * public tab: IgxTabsGroupComponent;
     * ngAfterViewInIt(){
     *    let tabIndex = this.tab.index;
     * }
     * ```
     * @return {?}
     */
    get index() {
        if (this._tabs.groups) {
            return this._tabs.groups.toArray().indexOf(this);
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    get customTabTemplate() {
        return this._tabTemplate;
    }
    /**
     * @hidden
     * @param {?} template
     * @return {?}
     */
    set customTabTemplate(template) {
        this._tabTemplate = template;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        if (this.isSelected) {
            const /** @type {?} */ contentOffset = this._tabs.tabsContainer.nativeElement.offsetWidth * this.index;
            this._tabs.contentsContainer.nativeElement.style.transitionDuration = `0s`;
            this._tabs.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.tabTemplate) {
            this._tabTemplate = this.tabTemplate.template;
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterViewChecked() {
        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-item-${this.index}`);
        this._element.nativeElement.setAttribute('id', `igx-tabs__group-${this.index}`);
    }
    /**
     * A method that sets the focus on a tab.
     * \@memberOf {\@link IgxTabGroupComponent}
     * ```typescript
     * \@ViewChild("MyChild")
     * public tab : IgxTabsGroupComponent;
     * ngAfterViewInit(){
     *    this.tab.select();
     * }
     * ```
     * @param {?=} focusDelay A number representing the expected delay.
     * @return {?}
     */
    select(focusDelay = 50) {
        if (this.disabled || this.isSelected) {
            return;
        }
        this.isSelected = true;
        this.relatedTab.tabindex = 0;
        if (focusDelay !== 0) {
            setTimeout(() => {
                this.relatedTab.nativeTabItem.nativeElement.focus();
            }, focusDelay);
        }
        this._handleSelection();
        this._tabs.onTabItemSelected.emit({ tab: this._tabs.tabs.toArray()[this.index], group: this });
    }
    /**
     * @return {?}
     */
    _handleSelection() {
        const /** @type {?} */ tabElement = this.relatedTab.nativeTabItem.nativeElement;
        const /** @type {?} */ viewPortOffsetWidth = this._tabs.viewPort.nativeElement.offsetWidth;
        if (tabElement.offsetLeft < this._tabs.offset) {
            this._tabs.scrollElement(tabElement, false);
        }
        else if (tabElement.offsetLeft + tabElement.offsetWidth > viewPortOffsetWidth + this._tabs.offset) {
            this._tabs.scrollElement(tabElement, true);
        }
        const /** @type {?} */ contentOffset = this._tabs.tabsContainer.nativeElement.offsetWidth * this.index;
        this._tabs.contentsContainer.nativeElement.style.transitionDuration = `0.2s`;
        this._tabs.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;
        this._tabs.selectedIndicator.nativeElement.style.width = `${tabElement.offsetWidth}px`;
        this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${tabElement.offsetLeft}px)`;
    }
}
IgxTabsGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-tabs-group',
                template: `<ng-content *ngIf="isSelected"></ng-content>
`
            },] },
];
/** @nocollapse */
IgxTabsGroupComponent.ctorParameters = () => [
    { type: IgxTabsComponent, decorators: [{ type: Inject, args: [forwardRef(() => IgxTabsComponent),] },] },
    { type: ElementRef, },
];
IgxTabsGroupComponent.propDecorators = {
    "label": [{ type: Input },],
    "icon": [{ type: Input },],
    "disabled": [{ type: Input },],
    "role": [{ type: HostBinding, args: ['attr.role',] },],
    "styleClass": [{ type: HostBinding, args: ['class',] },],
    "tabTemplate": [{ type: ContentChild, args: [IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective },] },],
    "onResize": [{ type: HostListener, args: ['window:resize', ['$event'],] },],
};
function IgxTabsGroupComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTabsGroupComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTabsGroupComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxTabsGroupComponent.propDecorators;
    /** @type {?} */
    IgxTabsGroupComponent.prototype.isSelected;
    /**
     * An \@Input property that sets the value of the `label`.
     * ```html
     * <igx-tabs-group label="Tab 1" icon="folder">
     * ```
     * @type {?}
     */
    IgxTabsGroupComponent.prototype.label;
    /**
     * An \@Input property that sets the value of the `icon`.
     * The value should be valid icon name from {\@link https://material.io/tools/icons/?style=baseline}.
     * ```html
     * <igx-tabs-group label="Tab 1" icon="home">
     * ```
     * @type {?}
     */
    IgxTabsGroupComponent.prototype.icon;
    /**
     * An \@Input property that allows you to enable/disable the `IgxTabGroupComponent`.
     * ```html
     * <igx-tabs-group label="Tab 2  Lorem ipsum dolor sit" icon="home" [disabled]="true">
     * ```
     * @type {?}
     */
    IgxTabsGroupComponent.prototype.disabled;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsGroupComponent.prototype.role;
    /** @type {?} */
    IgxTabsGroupComponent.prototype._tabTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsGroupComponent.prototype.tabTemplate;
    /** @type {?} */
    IgxTabsGroupComponent.prototype._tabs;
    /** @type {?} */
    IgxTabsGroupComponent.prototype._element;
}

//# sourceMappingURL=data:application/json;base64,