/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject } from '@angular/core';
import { IgxGridCellComponent } from '../cell.component';
import { GridBaseAPIService } from '../api.service';
import { IgxSelectionAPIService } from '../../core/selection';
import { valToPxlsUsingRange } from '../../core/utils';
import { DOCUMENT } from '@angular/common';
var IgxTreeGridCellComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxTreeGridCellComponent, _super);
    function IgxTreeGridCellComponent(gridAPI, selection, cdr, element, document) {
        var _this = _super.call(this, gridAPI, selection, cdr, element) || this;
        _this.document = document;
        _this.treeGridAPI = /** @type {?} */ (gridAPI);
        return _this;
    }
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxTreeGridCellComponent.prototype.resolveStyleClasses = /**
     * @hidden
     * @return {?}
     */
    function () {
        return _super.prototype.resolveStyleClasses.call(this) + ' igx-grid__td--tree-cell';
    };
    Object.defineProperty(IgxTreeGridCellComponent.prototype, "indentation", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.row.treeRow.level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTreeGridCellComponent.prototype, "hasChildren", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.row.treeRow.children && this.row.treeRow.children.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxTreeGridCellComponent.prototype, "expanded", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.row.expanded;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTreeGridCellComponent.prototype.toggle = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.treeGridAPI.trigger_row_expansion_toggle(this.gridID, this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxTreeGridCellComponent.prototype.onIndicatorFocus = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.gridAPI.submit_value(this.gridID);
        this.onFocus(event);
    };
    /**
     * @hidden
     * @param {?} range
     * @return {?}
     */
    IgxTreeGridCellComponent.prototype.calculateSizeToFit = /**
     * @hidden
     * @param {?} range
     * @return {?}
     */
    function (range) {
        var /** @type {?} */ indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;
        var /** @type {?} */ indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);
        var /** @type {?} */ indicatorMargin = parseFloat(indicatorStyle.marginRight);
        var /** @type {?} */ leftPadding = 0;
        if (this.indentationDiv) {
            var /** @type {?} */ indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);
            leftPadding = parseFloat(indentationStyle.paddingLeft);
        }
        var /** @type {?} */ largestWidth = Math.max.apply(Math, tslib_1.__spread(Array.from(this.nativeElement.children)
            .map(function (child) { return valToPxlsUsingRange(range, child); })));
        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;
    };
    IgxTreeGridCellComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-tree-grid-cell',
                    template: "<ng-template #defaultCell igxTextHighlight [cssClass]=\"highlightClass\" [activeCssClass]=\"activeHighlightClass\" [groupName]=\"gridID\"\n        [value]=\"formatter ? formatter(value) : value\" [row]=\"rowIndex\" [column]=\"this.column.visibleIndex\" [page]=\"this.grid.page\" [containerClass]=\"'igx-grid__td-text'\">\n    <ng-container *ngIf=\"column.dataType === 'boolean' || column.dataType === 'string' || formatter; else default\" >\n        <div class=\"igx-grid__td-text\">{{ formatter ? formatter(value) : value }}</div>\n    </ng-container>\n    <ng-template #default>\n        <div class=\"igx-grid__td-text\">{{ column.dataType === 'number' ? (value | igxdecimal) : (value | igxdate) }}</div>\n    </ng-template>\n</ng-template>\n<ng-template #inlineEditor  let-cell=\"cell\">\n    <ng-container *ngIf=\"column.dataType === 'string'\">\n        <igx-input-group>\n            <input igxInput [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'number'\">\n        <igx-input-group>\n            <input igxInput [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\"  type=\"number\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'boolean'\">\n        <igx-checkbox [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [checked]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [disableRipple]=\"true\"></igx-checkbox>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'date'\">\n        <igx-datePicker [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [labelVisibility]=\"false\"></igx-datePicker>\n    </ng-container>\n</ng-template>\n<ng-container *ngIf=\"!inEditMode\">\n    <ng-container *ngIf=\"indentation > 0\">\n        <div #indentationDiv class=\"igx-grid__tree-cell--padding-level-{{indentation}}\"></div>\n    </ng-container>\n    <div #indicator class=\"igx-grid__tree-grouping-indicator\" [ngStyle]=\"{'visibility': hasChildren ? 'visible' : 'hidden'}\"\n         (click)=\"toggle($event)\" (focus)=\"onIndicatorFocus($event)\" tabindex=\"-1\">\n        <igx-icon *ngIf=\"!expanded\" fontSet=\"material\">chevron_right</igx-icon>\n        <igx-icon *ngIf=\"expanded\" fontSet=\"material\">expand_more</igx-icon>\n    </div>\n</ng-container>\n<ng-container *ngTemplateOutlet=\"template; context: context\">\n</ng-container>\n"
                },] },
    ];
    /** @nocollapse */
    IgxTreeGridCellComponent.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
        { type: IgxSelectionAPIService, },
        { type: ChangeDetectorRef, },
        { type: ElementRef, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    IgxTreeGridCellComponent.propDecorators = {
        "indicator": [{ type: ViewChild, args: ['indicator', { read: ElementRef },] },],
        "indentationDiv": [{ type: ViewChild, args: ['indentationDiv', { read: ElementRef },] },],
    };
    return IgxTreeGridCellComponent;
}(IgxGridCellComponent));
export { IgxTreeGridCellComponent };
function IgxTreeGridCellComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridCellComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridCellComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxTreeGridCellComponent.propDecorators;
    /** @type {?} */
    IgxTreeGridCellComponent.prototype.treeGridAPI;
    /** @type {?} */
    IgxTreeGridCellComponent.prototype.indicator;
    /** @type {?} */
    IgxTreeGridCellComponent.prototype.indentationDiv;
    /** @type {?} */
    IgxTreeGridCellComponent.prototype.document;
}

//# sourceMappingURL=data:application/json;base64,