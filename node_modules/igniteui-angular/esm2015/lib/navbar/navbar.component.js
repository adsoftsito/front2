/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, HostBinding, Input, NgModule, Output } from '@angular/core';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxIconModule } from '../icon/index';
let /** @type {?} */ NEXT_ID = 0;
/**
 * **Ignite UI for Angular Navbar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)
 *
 * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation
 * state such as a "Go Back" button. It also supports other actions represented by icons.
 *
 * Example:
 * ```html
 * <igx-navbar title="Sample App" actionButtonIcon="menu">
 *   <igx-icon>search</igx-icon>
 *   <igx-icon>favorite</igx-icon>
 *   <igx-icon>more_vert</igx-icon>
 * </igx-navbar>
 * ```
 */
export class IgxNavbarComponent {
    constructor() {
        this.isVisible = true;
        /**
         * An \@Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.
         * ```html
         * <igx-navbar [id]="'igx-navbar-12'" title="Sample App" actionButtonIcon="menu">
         * ```
         */
        this.id = `igx-navbar-${NEXT_ID++}`;
        /**
         * The event that will be thrown when the action is executed,
         * provides reference to the `IgxNavbar` component as argument
         * ```typescript
         * public actionExc(event){
         *    alert("Action Execute!");
         * }
         * //..
         * ```
         * ```html
         * <igx-navbar (onAction)="actionExc($event)" title="Sample App" actionButtonIcon="menu">
         * ```
         */
        this.onAction = new EventEmitter();
        /**
         * An \@Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.
         * ```html
         * <igx-navbar [titleId]="'igx-navbar-7'" title="Sample App" actionButtonIcon="menu">
         * ```
         */
        this.titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;
    }
    /**
     * Returns whether the `IgxNavbarComponent` action button is visible, true/false.
     * ```typescript
     * \@ViewChild("MyChild")
     * public navBar: IgxNavbarComponent;
     * ngAfterViewInit(){
     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;
     * }
     * ```
     * @return {?}
     */
    get isActionButtonVisible() {
        if (!this.actionButtonIcon) {
            return false;
        }
        return this.isVisible;
    }
    /**
     * Sets whether the action button of the `IgxNavbarComponent` is visible.
     * ```html
     * <igx-navbar [title]="currentView" [isActionButtonVisible]="'false'"></igx-navbar>
     * ```
     * @param {?} value
     * @return {?}
     */
    set isActionButtonVisible(value) {
        this.isVisible = value;
    }
    /**
     * @hidden
     * @return {?}
     */
    _triggerAction() {
        this.onAction.emit(this);
    }
}
IgxNavbarComponent.NEXT_ID = 1;
IgxNavbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-navbar',
                template: `<nav class="igx-navbar" role="navigation" [attr.aria-labelledby]="titleId">
    <div class="igx-navbar__left">
        <igx-icon (click)="_triggerAction()" fontSet="material" *ngIf="isActionButtonVisible">{{actionButtonIcon}}</igx-icon>
        <h1 class="igx-navbar__title" [attr.id]="titleId">{{ title }}</h1>
    </div>
    <div class="igx-navbar__right">
        <ng-content></ng-content>
    </div>
</nav>
`
            },] },
];
/** @nocollapse */
IgxNavbarComponent.propDecorators = {
    "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
    "isActionButtonVisible": [{ type: Input },],
    "actionButtonIcon": [{ type: Input },],
    "title": [{ type: Input },],
    "onAction": [{ type: Output },],
    "titleId": [{ type: Input },],
};
function IgxNavbarComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxNavbarComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxNavbarComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxNavbarComponent.propDecorators;
    /** @type {?} */
    IgxNavbarComponent.NEXT_ID;
    /** @type {?} */
    IgxNavbarComponent.prototype.isVisible;
    /**
     * An \@Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.
     * ```html
     * <igx-navbar [id]="'igx-navbar-12'" title="Sample App" actionButtonIcon="menu">
     * ```
     * @type {?}
     */
    IgxNavbarComponent.prototype.id;
    /**
     * An \@Input property that sets the icon of the `IgxNavbarComponent`.
     * ```html
     * <igx-navbar [title]="currentView" actionButtonIcon="arrow_back"></igx-navbar>
     * ```
     * @type {?}
     */
    IgxNavbarComponent.prototype.actionButtonIcon;
    /**
     * An \@Input property that sets the title of the `IgxNavbarComponent`.
     * ```html
     * <igx-navbar title="Sample App" actionButtonIcon="menu">
     * ```
     * @type {?}
     */
    IgxNavbarComponent.prototype.title;
    /**
     * The event that will be thrown when the action is executed,
     * provides reference to the `IgxNavbar` component as argument
     * ```typescript
     * public actionExc(event){
     *    alert("Action Execute!");
     * }
     * //..
     * ```
     * ```html
     * <igx-navbar (onAction)="actionExc($event)" title="Sample App" actionButtonIcon="menu">
     * ```
     * @type {?}
     */
    IgxNavbarComponent.prototype.onAction;
    /**
     * An \@Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.
     * ```html
     * <igx-navbar [titleId]="'igx-navbar-7'" title="Sample App" actionButtonIcon="menu">
     * ```
     * @type {?}
     */
    IgxNavbarComponent.prototype.titleId;
}
/**
 * The IgxNavbarModule provides the {\@link IgxNavbarComponent} inside your application.
 */
export class IgxNavbarModule {
}
IgxNavbarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxNavbarComponent],
                exports: [IgxNavbarComponent],
                imports: [IgxButtonModule, IgxIconModule, CommonModule]
            },] },
];
function IgxNavbarModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxNavbarModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxNavbarModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvbmF2YmFyL25hdmJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQ0gsU0FBUyxFQUNULFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUNMLFFBQVEsRUFDUixNQUFNLEVBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUMscUJBQUksT0FBTyxHQUFHLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQ2hCLE1BQU07O3lCQUVrQixJQUFJOzs7Ozs7O2tCQVVaLGNBQWMsT0FBTyxFQUFFLEVBQUU7Ozs7Ozs7Ozs7Ozs7O3dCQXlEVCxJQUFJLFlBQVksRUFBc0I7Ozs7Ozs7dUJBU2pELGNBQWMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLEVBQUU7Ozs7Ozs7Ozs7Ozs7UUF0RGxELHFCQUFxQjtRQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7WUFDekIsTUFBTSxDQUFDLEtBQUssQ0FBQztTQUNoQjtRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDOzs7Ozs7Ozs7O1FBU2YscUJBQXFCLENBQUMsS0FBYztRQUMzQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQzs7Ozs7O0lBNkNwQixjQUFjO1FBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOzs7NkJBbkZKLENBQUM7O1lBZjdCLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsUUFBUSxFQUFFOzs7Ozs7Ozs7Q0FTYjthQUNBOzs7O21CQVlJLFdBQVcsU0FBQyxTQUFTLGNBQ3JCLEtBQUs7c0NBWUwsS0FBSztpQ0F1QkwsS0FBSztzQkFRTCxLQUFLO3lCQWVMLE1BQU07d0JBUU4sS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCVixNQUFNOzs7WUFMTCxRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFLENBQUMsa0JBQWtCLENBQUM7Z0JBQ2xDLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO2dCQUM3QixPQUFPLEVBQUUsQ0FBQyxlQUFlLEVBQUUsYUFBYSxFQUFFLFlBQVksQ0FBQzthQUMxRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5wdXQsXG4gICAgTmdNb2R1bGUsXG4gICAgT3V0cHV0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4QnV0dG9uTW9kdWxlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9idXR0b24vYnV0dG9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9pbmRleCc7XG5cbmxldCBORVhUX0lEID0gMDtcbi8qKlxuICogKipJZ25pdGUgVUkgZm9yIEFuZ3VsYXIgTmF2YmFyKiogLVxuICogW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vd3d3LmluZnJhZ2lzdGljcy5jb20vcHJvZHVjdHMvaWduaXRlLXVpLWFuZ3VsYXIvYW5ndWxhci9jb21wb25lbnRzL25hdmJhci5odG1sKVxuICpcbiAqIFRoZSBJZ25pdGUgVUkgTmF2YmFyIGlzIG1vc3QgY29tbW9ubHkgdXNlZCB0byBwcm92aWRlIGFuIGFwcCBoZWFkZXIgd2l0aCBhIGhhbWJ1cmdlciBtZW51IGFuZCBuYXZpZ2F0aW9uXG4gKiBzdGF0ZSBzdWNoIGFzIGEgXCJHbyBCYWNrXCIgYnV0dG9uLiBJdCBhbHNvIHN1cHBvcnRzIG90aGVyIGFjdGlvbnMgcmVwcmVzZW50ZWQgYnkgaWNvbnMuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYGh0bWxcbiAqIDxpZ3gtbmF2YmFyIHRpdGxlPVwiU2FtcGxlIEFwcFwiIGFjdGlvbkJ1dHRvbkljb249XCJtZW51XCI+XG4gKiAgIDxpZ3gtaWNvbj5zZWFyY2g8L2lneC1pY29uPlxuICogICA8aWd4LWljb24+ZmF2b3JpdGU8L2lneC1pY29uPlxuICogICA8aWd4LWljb24+bW9yZV92ZXJ0PC9pZ3gtaWNvbj5cbiAqIDwvaWd4LW5hdmJhcj5cbiAqIGBgYFxuICovXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaWd4LW5hdmJhcicsXG4gICAgdGVtcGxhdGU6IGA8bmF2IGNsYXNzPVwiaWd4LW5hdmJhclwiIHJvbGU9XCJuYXZpZ2F0aW9uXCIgW2F0dHIuYXJpYS1sYWJlbGxlZGJ5XT1cInRpdGxlSWRcIj5cbiAgICA8ZGl2IGNsYXNzPVwiaWd4LW5hdmJhcl9fbGVmdFwiPlxuICAgICAgICA8aWd4LWljb24gKGNsaWNrKT1cIl90cmlnZ2VyQWN0aW9uKClcIiBmb250U2V0PVwibWF0ZXJpYWxcIiAqbmdJZj1cImlzQWN0aW9uQnV0dG9uVmlzaWJsZVwiPnt7YWN0aW9uQnV0dG9uSWNvbn19PC9pZ3gtaWNvbj5cbiAgICAgICAgPGgxIGNsYXNzPVwiaWd4LW5hdmJhcl9fdGl0bGVcIiBbYXR0ci5pZF09XCJ0aXRsZUlkXCI+e3sgdGl0bGUgfX08L2gxPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJpZ3gtbmF2YmFyX19yaWdodFwiPlxuICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPC9kaXY+XG48L25hdj5cbmBcbn0pXG5cbmV4cG9ydCBjbGFzcyBJZ3hOYXZiYXJDb21wb25lbnQge1xuICAgIHByaXZhdGUgc3RhdGljIE5FWFRfSUQgPSAxO1xuICAgIHByaXZhdGUgaXNWaXNpYmxlID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgdmFsdWUgb2YgdGhlIGBpZGAgYXR0cmlidXRlLiBJZiBub3QgcHJvdmlkZWQgaXQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC5cbiAgICAgKmBgYGh0bWxcbiAgICAgKjxpZ3gtbmF2YmFyIFtpZF09XCInaWd4LW5hdmJhci0xMidcIiB0aXRsZT1cIlNhbXBsZSBBcHBcIiBhY3Rpb25CdXR0b25JY29uPVwibWVudVwiPlxuICAgICAqYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmlkJylcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBpZCA9IGBpZ3gtbmF2YmFyLSR7TkVYVF9JRCsrfWA7XG4gICAgLyoqXG4gICAgICpSZXR1cm5zIHdoZXRoZXIgdGhlIGBJZ3hOYXZiYXJDb21wb25lbnRgIGFjdGlvbiBidXR0b24gaXMgdmlzaWJsZSwgdHJ1ZS9mYWxzZS5cbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKkBWaWV3Q2hpbGQoXCJNeUNoaWxkXCIpXG4gICAgICpwdWJsaWMgbmF2QmFyOiBJZ3hOYXZiYXJDb21wb25lbnQ7XG4gICAgICpuZ0FmdGVyVmlld0luaXQoKXtcbiAgICAgKiAgICBsZXQgYWN0aW9uQnV0dG9uVmlzaWJpbGUgPSB0aGlzLm5hdkJhci5pc0FjdGlvbkJ1dHRvblZpc2libGU7XG4gICAgICp9XG4gICAgICpgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgaXNBY3Rpb25CdXR0b25WaXNpYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIXRoaXMuYWN0aW9uQnV0dG9uSWNvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmlzaWJsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlNldHMgd2hldGhlciB0aGUgYWN0aW9uIGJ1dHRvbiBvZiB0aGUgYElneE5hdmJhckNvbXBvbmVudGAgaXMgdmlzaWJsZS5cbiAgICAgKmBgYGh0bWxcbiAgICAgKjxpZ3gtbmF2YmFyIFt0aXRsZV09XCJjdXJyZW50Vmlld1wiIFtpc0FjdGlvbkJ1dHRvblZpc2libGVdPVwiJ2ZhbHNlJ1wiPjwvaWd4LW5hdmJhcj5cbiAgICAgKmBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgaXNBY3Rpb25CdXR0b25WaXNpYmxlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuaXNWaXNpYmxlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgaWNvbiBvZiB0aGUgYElneE5hdmJhckNvbXBvbmVudGAuXG4gICAgICpgYGBodG1sXG4gICAgICo8aWd4LW5hdmJhciBbdGl0bGVdPVwiY3VycmVudFZpZXdcIiBhY3Rpb25CdXR0b25JY29uPVwiYXJyb3dfYmFja1wiPjwvaWd4LW5hdmJhcj5cbiAgICAgKmBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpIHB1YmxpYyBhY3Rpb25CdXR0b25JY29uOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKkFuIEBJbnB1dCBwcm9wZXJ0eSB0aGF0IHNldHMgdGhlIHRpdGxlIG9mIHRoZSBgSWd4TmF2YmFyQ29tcG9uZW50YC5cbiAgICAgKmBgYGh0bWxcbiAgICAgKjxpZ3gtbmF2YmFyIHRpdGxlPVwiU2FtcGxlIEFwcFwiIGFjdGlvbkJ1dHRvbkljb249XCJtZW51XCI+XG4gICAgICpgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKSBwdWJsaWMgdGl0bGU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqVGhlIGV2ZW50IHRoYXQgd2lsbCBiZSB0aHJvd24gd2hlbiB0aGUgYWN0aW9uIGlzIGV4ZWN1dGVkLFxuICAgICAqcHJvdmlkZXMgcmVmZXJlbmNlIHRvIHRoZSBgSWd4TmF2YmFyYCBjb21wb25lbnQgYXMgYXJndW1lbnRcbiAgICAgKmBgYHR5cGVzY3JpcHRcbiAgICAgKnB1YmxpYyBhY3Rpb25FeGMoZXZlbnQpe1xuICAgICAqICAgIGFsZXJ0KFwiQWN0aW9uIEV4ZWN1dGUhXCIpO1xuICAgICAqfVxuICAgICAqIC8vLi5cbiAgICAgKmBgYFxuICAgICAqYGBgaHRtbFxuICAgICAqPGlneC1uYXZiYXIgKG9uQWN0aW9uKT1cImFjdGlvbkV4YygkZXZlbnQpXCIgdGl0bGU9XCJTYW1wbGUgQXBwXCIgYWN0aW9uQnV0dG9uSWNvbj1cIm1lbnVcIj5cbiAgICAgKmBgYFxuICAgICAqL1xuICAgIEBPdXRwdXQoKSBwdWJsaWMgb25BY3Rpb24gPSBuZXcgRXZlbnRFbWl0dGVyPElneE5hdmJhckNvbXBvbmVudD4oKTtcblxuICAgIC8qKlxuICAgICAqQW4gQElucHV0IHByb3BlcnR5IHRoYXQgc2V0cyB0aGUgdGl0bGVJZCBvZiB0aGUgYElneE5hdmJhckNvbXBvbmVudGAuIElmIG5vdCBzZXQgaXQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC5cbiAgICAgKmBgYGh0bWxcbiAgICAgKjxpZ3gtbmF2YmFyIFt0aXRsZUlkXT1cIidpZ3gtbmF2YmFyLTcnXCIgdGl0bGU9XCJTYW1wbGUgQXBwXCIgYWN0aW9uQnV0dG9uSWNvbj1cIm1lbnVcIj5cbiAgICAgKmBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHRpdGxlSWQgPSBgaWd4LW5hdmJhci0ke0lneE5hdmJhckNvbXBvbmVudC5ORVhUX0lEKyt9YDtcblxuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBfdHJpZ2dlckFjdGlvbigpIHtcbiAgICAgICAgdGhpcy5vbkFjdGlvbi5lbWl0KHRoaXMpO1xuICAgIH1cbn1cbiAgICAvKipcbiAgICAgKlRoZSBJZ3hOYXZiYXJNb2R1bGUgcHJvdmlkZXMgdGhlIHtAbGluayBJZ3hOYXZiYXJDb21wb25lbnR9IGluc2lkZSB5b3VyIGFwcGxpY2F0aW9uLlxuICAgICAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtJZ3hOYXZiYXJDb21wb25lbnRdLFxuICAgIGV4cG9ydHM6IFtJZ3hOYXZiYXJDb21wb25lbnRdLFxuICAgIGltcG9ydHM6IFtJZ3hCdXR0b25Nb2R1bGUsIElneEljb25Nb2R1bGUsIENvbW1vbk1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgSWd4TmF2YmFyTW9kdWxlIHtcbn1cbiJdfQ==