/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, HostListener, Input, NgZone, ViewChild, QueryList, ViewChildren } from '@angular/core';
import { DataType } from '../data-operations/data-util';
import { SortingDirection } from '../data-operations/sorting-expression.interface';
import { RestrictDrag } from '../directives/dragdrop/dragdrop.directive';
import { GridBaseAPIService } from './api.service';
import { IgxColumnComponent } from './column.component';
import { IgxColumnMovingService } from './grid.common';
import { isFirefox } from '../core/utils';
import { IgxFilteringService } from './filtering/grid-filtering.service';
/**
 * @hidden
 */
export class IgxGridHeaderComponent {
    /**
     * @param {?} gridAPI
     * @param {?} cdr
     * @param {?} elementRef
     * @param {?} zone
     * @param {?} cms
     * @param {?} filteringService
     */
    constructor(gridAPI, cdr, elementRef, zone, cms, filteringService) {
        this.gridAPI = gridAPI;
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.zone = zone;
        this.cms = cms;
        this.filteringService = filteringService;
        this.hostRole = 'columnheader';
        this.tabindex = -1;
        this.resizeCursor = null;
        this.showResizer = false;
        this.dragDirection = RestrictDrag.HORIZONTALLY;
        this.resizeEndTimeout = isFirefox() ? 200 : 0;
        this.sortDirection = SortingDirection.None;
    }
    /**
     * @return {?}
     */
    get styleClasses() {
        const /** @type {?} */ defaultClasses = [
            'igx-grid__th--fw',
            this.column.headerClasses
        ];
        const /** @type {?} */ classList = {
            'igx-grid__th': !this.column.columnGroup,
            'asc': this.ascending,
            'desc': this.descending,
            'igx-grid__th--number': this.column.dataType === DataType.Number,
            'igx-grid__th--sorted': this.sorted,
            'igx-grid__drag-col-header': this.dragged,
            'igx-grid__th--pinned-last': this.isLastPinned,
            'igx-grid__th--filtering': this.filteringService.filteredColumn === this.column
        };
        Object.entries(classList).forEach(([klass, value]) => {
            if (value) {
                defaultClasses.push(klass);
            }
        });
        return defaultClasses.join(' ');
    }
    /**
     * @return {?}
     */
    get width() {
        // HACK - think of a better solution
        const /** @type {?} */ colWidth = this.column.width;
        const /** @type {?} */ isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;
        if (isPercentageWidth) {
            const /** @type {?} */ firstContentCell = this.column.cells[0];
            if (firstContentCell) {
                return firstContentCell.nativeElement.getBoundingClientRect().width + 'px';
            }
        }
        else {
            return this.column.width;
        }
    }
    /**
     * @return {?}
     */
    get height() {
        if (this.grid.hasColumnGroups) {
            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight;
        }
        return null;
    }
    /**
     * @return {?}
     */
    get ascending() {
        return this.sortDirection === SortingDirection.Asc;
    }
    /**
     * @return {?}
     */
    get descending() {
        return this.sortDirection === SortingDirection.Desc;
    }
    /**
     * @return {?}
     */
    get sortingIcon() {
        if (this.sortDirection !== SortingDirection.None) {
            // arrow_downward and arrow_upward
            // are material icons ligature strings
            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';
        }
        return 'none';
    }
    /**
     * @return {?}
     */
    get sorted() {
        return this.sortDirection !== SortingDirection.None;
    }
    /**
     * @return {?}
     */
    get dragged() {
        return this.column === this.column.grid.draggedColumn;
    }
    /**
     * @return {?}
     */
    get zIndex() {
        if (!this.column.pinned) {
            return null;
        }
        return 9999 - this.grid.pinnedColumns.indexOf(this.column);
    }
    /**
     * @return {?}
     */
    get headerID() {
        return `${this.gridID}_${this.column.field}`;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.column.columnGroup ? this.zone.runTask(() => this.cdr.markForCheck()) :
            this.cdr.markForCheck();
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.getSortDirection();
        this.cdr.markForCheck();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.column.columnGroup) {
            this.zone.runOutsideAngular(() => {
                this.resizeArea.nativeElement.addEventListener('mouseover', this.onResizeAreaMouseOver.bind(this));
                this.resizeArea.nativeElement.addEventListener('mousedown', this.onResizeAreaMouseDown.bind(this));
                this.resizeArea.nativeElement.addEventListener('dblclick', this.onResizeAreaDblClick.bind(this));
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (!this.column.columnGroup) {
            this.zone.runOutsideAngular(() => {
                this.resizeArea.nativeElement.removeEventListener('mouseover', this.onResizeAreaMouseOver);
                this.resizeArea.nativeElement.removeEventListener('mousedown', this.onResizeAreaMouseDown);
                this.resizeArea.nativeElement.removeEventListener('dblclick', this.onResizeAreaDblClick);
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (!this.column.grid.isColumnResizing) {
            event.stopPropagation();
            if (this.grid.filteringService.isFilterRowVisible) {
                if (this.column.filterable && !this.column.columnGroup &&
                    !this.grid.filteringService.isFilterComplex(this.column.field)) {
                    this.grid.filteringService.filteredColumn = this.column;
                }
            }
            else if (this.column.sortable) {
                const /** @type {?} */ groupingExpr = this.grid.groupingExpressions ?
                    this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;
                const /** @type {?} */ sortDir = groupingExpr ?
                    this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc
                    : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;
                this.sortDirection = sortDir;
                this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,
                    strategy: this.column.sortStrategy });
                this.grid.onSortingDone.emit({
                    dir: this.sortDirection,
                    fieldName: this.column.field,
                    ignoreCase: this.column.sortingIgnoreCase,
                    strategy: this.column.sortStrategy
                });
            }
        }
    }
    /**
     * @return {?}
     */
    get restrictResizeMin() {
        const /** @type {?} */ actualMinWidth = parseFloat(this.column.minWidth);
        const /** @type {?} */ defaultMinWidth = parseFloat(this.column.defaultMinWidth);
        let /** @type {?} */ minWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;
        minWidth = minWidth < parseFloat(this.column.width) ? minWidth : parseFloat(this.column.width);
        return minWidth - this.elementRef.nativeElement.getBoundingClientRect().width;
    }
    /**
     * @return {?}
     */
    get restrictResizeMax() {
        const /** @type {?} */ actualWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
        if (this.column.pinned) {
            const /** @type {?} */ pinnedMaxWidth = this._pinnedMaxWidth =
                this.grid.calcPinnedContainerMaxWidth - this.grid.getPinnedWidth(true) + actualWidth;
            if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {
                this._pinnedMaxWidth = this.column.maxWidth;
                return parseFloat(this.column.maxWidth) - actualWidth;
            }
            else {
                return pinnedMaxWidth - actualWidth;
            }
        }
        else {
            if (this.column.maxWidth) {
                return parseFloat(this.column.maxWidth) - actualWidth;
            }
            else {
                return Number.MAX_SAFE_INTEGER;
            }
        }
    }
    /**
     * @return {?}
     */
    get grid() {
        return this.gridAPI.get(this.gridID);
    }
    /**
     * @return {?}
     */
    get isPinned() {
        return this.column.pinned;
    }
    /**
     * @return {?}
     */
    get isLastPinned() {
        const /** @type {?} */ pinnedCols = this.grid.pinnedColumns;
        if (pinnedCols.length === 0) {
            return false;
        }
        else {
            return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;
        }
    }
    /**
     * @return {?}
     */
    getSortDirection() {
        const /** @type {?} */ expr = this.gridAPI.get(this.gridID).sortingExpressions.find((x) => x.fieldName === this.column.field);
        this.sortDirection = expr ? expr.dir : SortingDirection.None;
    }
    /**
     * @return {?}
     */
    onResizeAreaMouseOver() {
        if (this.column.resizable) {
            this.resizeCursor = 'col-resize';
            this.cdr.detectChanges();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResizeAreaMouseDown(event) {
        if (event.button === 0 && this.column.resizable) {
            this.showResizer = true;
            this.column.grid.isColumnResizing = true;
            this.resizerHeight = this.grid.calcResizerHeight;
            this._startResizePos = event.clientX;
        }
        else {
            this.resizeCursor = null;
        }
        this.cdr.detectChanges();
    }
    /**
     * @return {?}
     */
    onResizeAreaDblClick() {
        if (this.column.resizable) {
            const /** @type {?} */ currentColWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
            const /** @type {?} */ size = this.column.getLargestCellWidth();
            if (this.column.pinned) {
                const /** @type {?} */ newPinnedWidth = this.grid.getPinnedWidth(true) - currentColWidth + parseFloat(size);
                if (newPinnedWidth <= this.grid.calcPinnedContainerMaxWidth) {
                    this.column.width = size;
                }
            }
            else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {
                this.column.width = parseFloat(this.column.maxWidth) + 'px';
            }
            else if (parseFloat(size) < parseFloat(this.column.defaultMinWidth)) {
                this.column.width = this.column.defaultMinWidth + 'px';
            }
            else {
                this.column.width = size;
            }
            this.grid.markForCheck();
            this.grid.reflow();
            this.grid.onColumnResized.emit({ column: this.column, prevWidth: currentColWidth.toString(), newWidth: this.column.width });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.column.grid.isColumnResizing = false;
        this.showResizer = false;
        const /** @type {?} */ diff = event.clientX - this._startResizePos;
        if (this.column.resizable) {
            let /** @type {?} */ currentColWidth = parseFloat(this.column.width);
            const /** @type {?} */ actualMinWidth = parseFloat(this.column.minWidth);
            const /** @type {?} */ defaultMinWidth = parseFloat(this.column.defaultMinWidth);
            let /** @type {?} */ colMinWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;
            const /** @type {?} */ colMaxWidth = this.column.pinned ? parseFloat(this._pinnedMaxWidth) : parseFloat(this.column.maxWidth);
            const /** @type {?} */ actualWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
            currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;
            colMinWidth = colMinWidth < currentColWidth ? colMinWidth : currentColWidth;
            if (currentColWidth + diff < colMinWidth) {
                this.column.width = colMinWidth + 'px';
            }
            else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {
                this.column.width = colMaxWidth + 'px';
            }
            else {
                this.column.width = (currentColWidth + diff) + 'px';
            }
            this.grid.markForCheck();
            this.grid.reflow();
            if (currentColWidth !== parseFloat(this.column.width)) {
                this.grid.onColumnResized.emit({ column: this.column, prevWidth: currentColWidth.toString(), newWidth: this.column.width });
            }
        }
    }
}
IgxGridHeaderComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-grid-header',
                template: `<ng-template #defaultColumn>
    {{ column.header || column.field }}
</ng-template>

<ng-container *ngIf="column.columnGroup">
    <span *ngIf="grid.hasMovableColumns" class="igx-grid__th-drop-indicator-left"></span>
    <div class="igx-grid__thead-title" [style.width.px]="column.width">{{ column.header }}</div>
    <div class="igx-grid__thead-group">
        <ng-container *ngFor="let child of column.children">
            <div class="igx-grid__thead-subgroup">
                <igx-grid-header [igxColumnMovingDrag]="child" [attr.droppable]="true" [igxColumnMovingDrop]="child" *ngIf="!child.hidden" [gridID]="column.gridID" [column]="child"
                    [style.min-width.px]="child.width" [style.flex-basis.px]='child.width' [style.max-width.px]='child.width'></igx-grid-header>
                <igx-grid-filtering-cell [attr.draggable]="false" *ngIf="grid.allowFiltering && !child.children && !child.hidden" [column]="child"
                    [style.min-width.px]="child.width" [style.flex-basis.px]='child.width' [style.max-width.px]='child.width'></igx-grid-filtering-cell>
            </div>
        </ng-container>
    </div>
    <span *ngIf="grid.hasMovableColumns" class="igx-grid__th-drop-indicator-right"></span>
</ng-container>

<ng-container *ngIf="!column.columnGroup">
    <span *ngIf="grid.hasMovableColumns" class="igx-grid__th-drop-indicator-left">
    </span>
    <span class="igx-grid__th-title">
        <ng-container *ngTemplateOutlet="column.headerTemplate ? column.headerTemplate : defaultColumn; context: { $implicit: column }">
        </ng-container>
    </span>
    <div class="igx-grid__th-icons" *ngIf="!column.columnGroup">
        <igx-icon class="sort-icon" *ngIf="column.sortable">{{sortingIcon}}</igx-icon>
        <!-- <igx-grid-filter [column]="column" *ngIf="column.filterable"></igx-grid-filter> -->
    </div>

    <span *ngIf="!column.columnGroup" [attr.draggable]="false" [style.cursor]="resizeCursor" #resizeArea
        class="igx-grid__th-resize-handle">

        <div *ngIf="showResizer" igxResizer
            class="igx-grid__th-resize-line"
            [style.height.px]="resizerHeight"
            [restrictHResizeMax]="restrictResizeMax"
            [restrictHResizeMin]="restrictResizeMin"
            [resizeEndTimeout]="resizeEndTimeout"
            (resizeEnd)="onResize($event)">
        </div>

    </span>

    <span *ngIf="grid.hasMovableColumns" class="igx-grid__th-drop-indicator-right">
    </span>
</ng-container>

`
            },] },
];
/** @nocollapse */
IgxGridHeaderComponent.ctorParameters = () => [
    { type: GridBaseAPIService, },
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
    { type: NgZone, },
    { type: IgxColumnMovingService, },
    { type: IgxFilteringService, },
];
IgxGridHeaderComponent.propDecorators = {
    "column": [{ type: Input },],
    "gridID": [{ type: Input },],
    "styleClasses": [{ type: HostBinding, args: ['class',] },],
    "width": [{ type: HostBinding, args: ['style.min-width',] }, { type: HostBinding, args: ['style.max-width',] }, { type: HostBinding, args: ['style.flex-basis',] },],
    "height": [{ type: HostBinding, args: ['style.height.px',] },],
    "zIndex": [{ type: HostBinding, args: ['style.z-index',] },],
    "hostRole": [{ type: HostBinding, args: ['attr.role',] },],
    "tabindex": [{ type: HostBinding, args: ['attr.tabindex',] },],
    "headerID": [{ type: HostBinding, args: ['attr.id',] },],
    "resizeArea": [{ type: ViewChild, args: ['resizeArea',] },],
    "children": [{ type: ViewChildren, args: [IgxGridHeaderComponent, { read: IgxGridHeaderComponent },] },],
    "onClick": [{ type: HostListener, args: ['click', ['$event'],] },],
};
function IgxGridHeaderComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridHeaderComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridHeaderComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxGridHeaderComponent.propDecorators;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.column;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.gridID;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.hostRole;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.tabindex;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.resizeArea;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.children;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.resizeCursor;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.showResizer;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.resizerHeight;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.dragDirection;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.resizeEndTimeout;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.sortDirection;
    /** @type {?} */
    IgxGridHeaderComponent.prototype._startResizePos;
    /** @type {?} */
    IgxGridHeaderComponent.prototype._pinnedMaxWidth;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.gridAPI;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.cdr;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.elementRef;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.zone;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.cms;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.filteringService;
}

//# sourceMappingURL=data:application/json;base64,