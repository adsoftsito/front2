/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { GridBaseAPIService } from '../api.service';
import { DataType } from '../../data-operations/data-util';
import { first } from 'rxjs/operators';
var IgxTreeGridAPIService = /** @class */ (function (_super) {
    tslib_1.__extends(IgxTreeGridAPIService, _super);
    function IgxTreeGridAPIService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} id
     * @param {?=} transactions
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.get_all_data = /**
     * @param {?} id
     * @param {?=} transactions
     * @return {?}
     */
    function (id, transactions) {
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;
        return data ? data : [];
    };
    /**
     * @param {?} id
     * @param {?} rowID
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.expand_row = /**
     * @param {?} id
     * @param {?} rowID
     * @return {?}
     */
    function (id, rowID) {
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ expandedStates = grid.expansionStates;
        expandedStates.set(rowID, true);
        grid.expansionStates = expandedStates;
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    };
    /**
     * @param {?} id
     * @param {?} rowID
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.collapse_row = /**
     * @param {?} id
     * @param {?} rowID
     * @return {?}
     */
    function (id, rowID) {
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ expandedStates = grid.expansionStates;
        expandedStates.set(rowID, false);
        grid.expansionStates = expandedStates;
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    };
    /**
     * @param {?} id
     * @param {?} rowID
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.toggle_row_expansion = /**
     * @param {?} id
     * @param {?} rowID
     * @return {?}
     */
    function (id, rowID) {
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ expandedStates = grid.expansionStates;
        var /** @type {?} */ treeRecord = grid.records.get(rowID);
        if (treeRecord) {
            var /** @type {?} */ isExpanded = this.get_row_expansion_state(id, rowID, treeRecord.level);
            expandedStates.set(rowID, !isExpanded);
            grid.expansionStates = expandedStates;
        }
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    };
    /**
     * @param {?} id
     * @param {?} row
     * @param {?} expanded
     * @param {?=} event
     * @param {?=} visibleColumnIndex
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.trigger_row_expansion_toggle = /**
     * @param {?} id
     * @param {?} row
     * @param {?} expanded
     * @param {?=} event
     * @param {?=} visibleColumnIndex
     * @return {?}
     */
    function (id, row, expanded, event, visibleColumnIndex) {
        var /** @type {?} */ grid = this.get(id);
        if (!row.children || row.children.length <= 0 && row.expanded === expanded) {
            return;
        }
        var /** @type {?} */ args = {
            rowID: row.rowID,
            expanded: expanded,
            event: event,
            cancel: false
        };
        grid.onRowToggle.emit(args);
        if (args.cancel) {
            return;
        }
        visibleColumnIndex = visibleColumnIndex ? visibleColumnIndex : 0;
        var /** @type {?} */ groupRowIndex = _super.prototype.get_row_by_key.call(this, id, row.rowID).index;
        var /** @type {?} */ shouldScroll = !(grid.unpinnedWidth - grid.totalWidth >= 0);
        var /** @type {?} */ isScrolledToBottom = grid.rowList.length > 0 && grid.rowList.last.index ===
            grid.verticalScrollContainer.igxForOf.length - 1;
        var /** @type {?} */ expandedStates = grid.expansionStates;
        expandedStates.set(row.rowID, expanded);
        grid.expansionStates = expandedStates;
        if (isScrolledToBottom) {
            grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                grid.nativeElement.querySelector("[data-rowIndex=\"" + groupRowIndex + "\"][data-visibleindex=\"" + visibleColumnIndex + "\"]").focus();
            });
        }
        if (expanded) {
            grid.verticalScrollContainer.getVerticalScroll().dispatchEvent(new Event('scroll'));
            if (shouldScroll) {
                grid.parentVirtDir.getHorizontalScroll().dispatchEvent(new Event('scroll'));
            }
        }
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    };
    /**
     * @param {?} id
     * @param {?} rowID
     * @param {?} indentationLevel
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.get_row_expansion_state = /**
     * @param {?} id
     * @param {?} rowID
     * @param {?} indentationLevel
     * @return {?}
     */
    function (id, rowID, indentationLevel) {
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ states = grid.expansionStates;
        var /** @type {?} */ expanded = states.get(rowID);
        if (expanded !== undefined) {
            return expanded;
        }
        else {
            return indentationLevel < grid.expansionDepth;
        }
    };
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.update_row_in_array = /**
     * @param {?} id
     * @param {?} value
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    function (id, value, rowID, index) {
        var /** @type {?} */ grid = this.get(id);
        if (grid.primaryKey && grid.foreignKey) {
            _super.prototype.update_row_in_array.call(this, id, value, rowID, index);
        }
        else {
            var /** @type {?} */ record = grid.records.get(rowID);
            var /** @type {?} */ childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;
            index = grid.primaryKey ? childData.map(function (c) { return c[grid.primaryKey]; }).indexOf(rowID) :
                childData.indexOf(rowID);
            childData[index] = value;
        }
    };
    /**
     * @param {?} column
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.should_apply_number_style = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return column.dataType === DataType.Number && column.visibleIndex !== 0;
    };
    return IgxTreeGridAPIService;
}(GridBaseAPIService));
export { IgxTreeGridAPIService };

//# sourceMappingURL=data:application/json;base64,