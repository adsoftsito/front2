/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Directive, ElementRef, EventEmitter, Input, NgModule, Output, Pipe, Renderer2 } from '@angular/core';
var IgxFilterDirective = /** @class */ (function () {
    function IgxFilterDirective(element, renderer) {
        this.element = element;
        this.filtering = new EventEmitter(false);
        this.filtered = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    IgxFilterDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // Detect only changes of input value
        if (changes["filterOptions"] &&
            changes["filterOptions"].currentValue &&
            changes["filterOptions"].currentValue.inputValue !== undefined &&
            changes["filterOptions"].previousValue &&
            changes["filterOptions"].currentValue.inputValue !== changes["filterOptions"].previousValue.inputValue) {
            this.filter();
        }
    };
    /**
     * @return {?}
     */
    IgxFilterDirective.prototype.filter = /**
     * @return {?}
     */
    function () {
        if (!this.filterOptions.items) {
            return;
        }
        var /** @type {?} */ args = { cancel: false, items: this.filterOptions.items };
        this.filtering.emit(args);
        if (args.cancel) {
            return;
        }
        var /** @type {?} */ pipe = new IgxFilterPipe();
        var /** @type {?} */ filtered = pipe.transform(this.filterOptions.items, this.filterOptions);
        this.filtered.emit({ filteredItems: filtered });
    };
    IgxFilterDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxFilter]'
                },] },
    ];
    /** @nocollapse */
    IgxFilterDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    IgxFilterDirective.propDecorators = {
        "filtering": [{ type: Output },],
        "filtered": [{ type: Output },],
        "filterOptions": [{ type: Input, args: ['igxFilter',] },],
    };
    return IgxFilterDirective;
}());
export { IgxFilterDirective };
function IgxFilterDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxFilterDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxFilterDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxFilterDirective.propDecorators;
    /** @type {?} */
    IgxFilterDirective.prototype.filtering;
    /** @type {?} */
    IgxFilterDirective.prototype.filtered;
    /** @type {?} */
    IgxFilterDirective.prototype.filterOptions;
    /** @type {?} */
    IgxFilterDirective.prototype.element;
}
var IgxFilterPipe = /** @class */ (function () {
    function IgxFilterPipe() {
    }
    /**
     * @param {?} items
     * @param {?} options
     * @return {?}
     */
    IgxFilterPipe.prototype.transform = /**
     * @param {?} items
     * @param {?} options
     * @return {?}
     */
    function (items, 
    // options - initial settings of filter functionality
    // options - initial settings of filter functionality
    options) {
        var /** @type {?} */ result = [];
        if (!items || !items.length || !options) {
            return;
        }
        if (options.items) {
            items = options.items;
        }
        result = items.filter(function (item) {
            var /** @type {?} */ match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);
            if (match) {
                if (options.metConditionFn) {
                    options.metConditionFn(item);
                }
            }
            else {
                if (options.overdueConditionFn) {
                    options.overdueConditionFn(item);
                }
            }
            return match;
        });
        return result;
    };
    IgxFilterPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'igxFilter',
                    pure: false
                },] },
    ];
    return IgxFilterPipe;
}());
export { IgxFilterPipe };
function IgxFilterPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxFilterPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxFilterPipe.ctorParameters;
}
var IgxFilterOptions = /** @class */ (function () {
    function IgxFilterOptions() {
        this.inputValue = '';
    }
    /**
     * @param {?} item
     * @param {?} key
     * @return {?}
     */
    IgxFilterOptions.prototype.get_value = /**
     * @param {?} item
     * @param {?} key
     * @return {?}
     */
    function (item, key) {
        var /** @type {?} */ result = '';
        if (key) {
            result = item[key].toString();
        }
        else if (item.element) {
            if (item.element.nativeElement) {
                result = item.element.nativeElement.textContent.trim();
                // Check if element doesn't return the DOM element directly
            }
            else if (item.element.textContent) {
                result = item.element.textContent.trim();
            }
        }
        return result;
    };
    /**
     * @param {?} valueToTest
     * @return {?}
     */
    IgxFilterOptions.prototype.formatter = /**
     * @param {?} valueToTest
     * @return {?}
     */
    function (valueToTest) {
        return valueToTest.toLowerCase();
    };
    /**
     * @param {?} valueToTest
     * @param {?} inputValue
     * @return {?}
     */
    IgxFilterOptions.prototype.matchFn = /**
     * @param {?} valueToTest
     * @param {?} inputValue
     * @return {?}
     */
    function (valueToTest, inputValue) {
        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    IgxFilterOptions.prototype.metConditionFn = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.hasOwnProperty('hidden')) {
            item.hidden = false;
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    IgxFilterOptions.prototype.overdueConditionFn = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.hasOwnProperty('hidden')) {
            item.hidden = true;
        }
    };
    return IgxFilterOptions;
}());
export { IgxFilterOptions };
function IgxFilterOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    IgxFilterOptions.prototype.inputValue;
    /** @type {?} */
    IgxFilterOptions.prototype.key;
    /** @type {?} */
    IgxFilterOptions.prototype.items;
}
var IgxFilterModule = /** @class */ (function () {
    function IgxFilterModule() {
    }
    IgxFilterModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxFilterDirective, IgxFilterPipe],
                    exports: [IgxFilterDirective, IgxFilterPipe],
                    imports: [CommonModule]
                },] },
    ];
    return IgxFilterModule;
}());
export { IgxFilterModule };
function IgxFilterModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxFilterModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxFilterModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,