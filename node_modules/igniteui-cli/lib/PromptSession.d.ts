import { TemplateManager } from "./TemplateManager";
export declare class PromptSession {
    private templateManager;
    private WIZARD_BACK_OPTION;
    constructor(templateManager: TemplateManager);
    static chooseTerm(): any;
    /**
     * Start questions session for project creation
     */
    start(): Promise<void>;
    /**
     * Starts a loop of 'Choose an action' questions
     * @param projectLibrary The framework to use
     * @param theme Theme to use
     */
    chooseActionLoop(projectLibrary: ProjectLibrary, theme: string): Promise<void>;
    /**
     * Returns a new array with inquirer.Separator() added between items
     * @param array The original array to add separator to
     */
    private addSeparators(array);
    /**
     * Generate questions from extra configuration array
     * @param extraConfig
     */
    private createQuestions(extraConfig);
    /**
     * Conversion placeholder
     * @param answers
     */
    private parseAnswers(answers);
    /**
     * Add the component user has selected
     * @param projectLibrary to add component to
     * @param theme to use to style the project
     */
    private addComponent(projectLibrary, theme);
    /**
     * Select the component in the selected components group
     * @param projectLibrary to add component to
     * @param theme to use to style the project
     * @param groupName to chose components from
     */
    private choseComponent(projectLibrary, theme, groupName);
    /**
     * Select template for provided component and set template's extra configurations if any
     * @param projectLibrary to add component to
     * @param theme to use to style the project
     * @param groupName to chose components from
     * @param component to get template for
     */
    private getTemplate(projectLibrary, theme, groupName, component);
    /**
     * Add the view user has selected
     * @param projectLibrary to add component to
     * @param theme to use to style the project
     */
    private addView(projectLibrary, theme);
    /**
     * Gets the user input according to provided @param options.
     * If @param withBackChoice is set to true adds Back option to the list
     * @param options to use for the user input
     * @param withBackChoice determines whether or not Back option should be added
     */
    private getUserInput(options, withBackChoice?);
    /**
     * Check if provided @param name is valid for project name
     * @param name the name to check
     */
    private nameIsValid(name);
    /**
     * Gets the project library from the user input, or default if provided @param framework has single project library
     * @param framework to get project library for
     */
    private getProjectLibrary(framework);
    /**
     * Gets the them from the user input, or default if provided @param projectLibrary has single theme
     * @param projectLibrary to get theme for
     */
    private getTheme(projectLibrary);
    /**
     * Generates a list of options for chooseActionLoop
     * @param projectLibrary to generate options for
     */
    private generateActionChoices(projectLibrary);
    private formatOutput(items);
}
