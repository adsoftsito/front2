/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, forwardRef, Host, HostBinding, HostListener, Inject, Input, TemplateRef } from '@angular/core';
import { IgxTimePickerComponent } from './time-picker.component';
/**
 * @hidden
 */
export class IgxItemListDirective {
    /**
     * @param {?} timePicker
     * @param {?} elementRef
     */
    constructor(timePicker, elementRef) {
        this.timePicker = timePicker;
        this.elementRef = elementRef;
        this.tabindex = 0;
    }
    /**
     * @return {?}
     */
    get defaultCSS() {
        return true;
    }
    /**
     * @return {?}
     */
    get hourCSS() {
        return this.type === 'hourList';
    }
    /**
     * @return {?}
     */
    get minuteCSS() {
        return this.type === 'minuteList';
    }
    /**
     * @return {?}
     */
    get ampmCSS() {
        return this.type === 'ampmList';
    }
    /**
     * @return {?}
     */
    onFocus() {
        this.isActive = true;
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isActive = false;
    }
    /**
     * @return {?}
     */
    nextItem() {
        switch (this.type) {
            case 'hourList': {
                this.timePicker.nextHour();
                break;
            }
            case 'minuteList': {
                this.timePicker.nextMinute();
                break;
            }
            case 'ampmList': {
                this.timePicker.nextAmPm();
                break;
            }
        }
    }
    /**
     * @return {?}
     */
    prevItem() {
        switch (this.type) {
            case 'hourList': {
                this.timePicker.prevHour();
                break;
            }
            case 'minuteList': {
                this.timePicker.prevMinute();
                break;
            }
            case 'ampmList': {
                this.timePicker.prevAmPm();
                break;
            }
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownArrowDown(event) {
        event.preventDefault();
        this.nextItem();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownArrowUp(event) {
        event.preventDefault();
        this.prevItem();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownArrowRight(event) {
        event.preventDefault();
        const /** @type {?} */ listName = (/** @type {?} */ (event.target)).className;
        if (listName.indexOf('hourList') !== -1) {
            this.timePicker.minuteList.nativeElement.focus();
        }
        else if (listName.indexOf('minuteList') !== -1 && this.timePicker._ampmItems.length !== 0) {
            this.timePicker.ampmList.nativeElement.focus();
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownArrowLeft(event) {
        event.preventDefault();
        const /** @type {?} */ listName = (/** @type {?} */ (event.target)).className;
        if (listName.indexOf('minuteList') !== -1) {
            this.timePicker.hourList.nativeElement.focus();
        }
        else if (listName.indexOf('ampmList') !== -1) {
            this.timePicker.minuteList.nativeElement.focus();
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownEnter(event) {
        event.preventDefault();
        this.timePicker.okButtonClick();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownEscape(event) {
        event.preventDefault();
        this.timePicker.cancelButtonClick();
    }
    /**
     * @hidden
     * @return {?}
     */
    onHover() {
        this.elementRef.nativeElement.focus();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onScroll(event) {
        event.preventDefault();
        event.stopPropagation();
        if (event.deltaY > 0) {
            this.nextItem();
        }
        else if (event.deltaY < 0) {
            this.prevItem();
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onPanMove(event) {
        if (event.deltaY < 0) {
            this.nextItem();
        }
        else if (event.deltaY > 0) {
            this.prevItem();
        }
    }
}
IgxItemListDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxItemList]'
            },] },
];
/** @nocollapse */
IgxItemListDirective.ctorParameters = () => [
    { type: IgxTimePickerComponent, decorators: [{ type: Host }, { type: Inject, args: [forwardRef(() => IgxTimePickerComponent),] },] },
    { type: ElementRef, },
];
IgxItemListDirective.propDecorators = {
    "type": [{ type: Input, args: ['igxItemList',] },],
    "tabindex": [{ type: HostBinding, args: ['attr.tabindex',] },],
    "defaultCSS": [{ type: HostBinding, args: ['class.igx-time-picker__column',] },],
    "hourCSS": [{ type: HostBinding, args: ['class.igx-time-picker__hourList',] },],
    "minuteCSS": [{ type: HostBinding, args: ['class.igx-time-picker__minuteList',] },],
    "ampmCSS": [{ type: HostBinding, args: ['class.igx-time-picker__ampmList',] },],
    "onFocus": [{ type: HostListener, args: ['focus',] },],
    "onBlur": [{ type: HostListener, args: ['blur',] },],
    "onKeydownArrowDown": [{ type: HostListener, args: ['keydown.arrowdown', ['$event'],] },],
    "onKeydownArrowUp": [{ type: HostListener, args: ['keydown.arrowup', ['$event'],] },],
    "onKeydownArrowRight": [{ type: HostListener, args: ['keydown.arrowright', ['$event'],] },],
    "onKeydownArrowLeft": [{ type: HostListener, args: ['keydown.arrowleft', ['$event'],] },],
    "onKeydownEnter": [{ type: HostListener, args: ['keydown.enter', ['$event'],] },],
    "onKeydownEscape": [{ type: HostListener, args: ['keydown.escape', ['$event'],] },],
    "onHover": [{ type: HostListener, args: ['mouseover',] },],
    "onScroll": [{ type: HostListener, args: ['wheel', ['$event'],] },],
    "onPanMove": [{ type: HostListener, args: ['panmove', ['$event'],] },],
};
function IgxItemListDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxItemListDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxItemListDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxItemListDirective.propDecorators;
    /** @type {?} */
    IgxItemListDirective.prototype.type;
    /** @type {?} */
    IgxItemListDirective.prototype.isActive;
    /** @type {?} */
    IgxItemListDirective.prototype.tabindex;
    /** @type {?} */
    IgxItemListDirective.prototype.timePicker;
    /** @type {?} */
    IgxItemListDirective.prototype.elementRef;
}
/**
 * @hidden
 */
export class IgxHourItemDirective {
    /**
     * @param {?} timePicker
     * @param {?} itemList
     */
    constructor(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    /**
     * @return {?}
     */
    get defaultCSS() {
        return true;
    }
    /**
     * @return {?}
     */
    get selectedCSS() {
        return this.isSelectedHour;
    }
    /**
     * @return {?}
     */
    get activeCSS() {
        return this.isSelectedHour && this.itemList.isActive;
    }
    /**
     * @return {?}
     */
    get isSelectedHour() {
        return this.timePicker.selectedHour === this.value;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onClick(item) {
        if (item !== '') {
            this.timePicker.scrollHourIntoView(item);
        }
    }
}
IgxHourItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxHourItem]'
            },] },
];
/** @nocollapse */
IgxHourItemDirective.ctorParameters = () => [
    { type: IgxTimePickerComponent, decorators: [{ type: Host }, { type: Inject, args: [forwardRef(() => IgxTimePickerComponent),] },] },
    { type: IgxItemListDirective, },
];
IgxHourItemDirective.propDecorators = {
    "value": [{ type: Input, args: ['igxHourItem',] },],
    "defaultCSS": [{ type: HostBinding, args: ['class.igx-time-picker__item',] },],
    "selectedCSS": [{ type: HostBinding, args: ['class.igx-time-picker__item--selected',] },],
    "activeCSS": [{ type: HostBinding, args: ['class.igx-time-picker__item--active',] },],
    "onClick": [{ type: HostListener, args: ['click', ['value'],] },],
};
function IgxHourItemDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxHourItemDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxHourItemDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxHourItemDirective.propDecorators;
    /** @type {?} */
    IgxHourItemDirective.prototype.value;
    /** @type {?} */
    IgxHourItemDirective.prototype.timePicker;
    /** @type {?} */
    IgxHourItemDirective.prototype.itemList;
}
/**
 * @hidden
 */
export class IgxMinuteItemDirective {
    /**
     * @param {?} timePicker
     * @param {?} itemList
     */
    constructor(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    /**
     * @return {?}
     */
    get defaultCSS() {
        return true;
    }
    /**
     * @return {?}
     */
    get selectedCSS() {
        return this.isSelectedMinute;
    }
    /**
     * @return {?}
     */
    get activeCSS() {
        return this.isSelectedMinute && this.itemList.isActive;
    }
    /**
     * @return {?}
     */
    get isSelectedMinute() {
        return this.timePicker.selectedMinute === this.value;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onClick(item) {
        if (item !== '') {
            this.timePicker.scrollMinuteIntoView(item);
        }
    }
}
IgxMinuteItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxMinuteItem]'
            },] },
];
/** @nocollapse */
IgxMinuteItemDirective.ctorParameters = () => [
    { type: IgxTimePickerComponent, decorators: [{ type: Host }, { type: Inject, args: [forwardRef(() => IgxTimePickerComponent),] },] },
    { type: IgxItemListDirective, },
];
IgxMinuteItemDirective.propDecorators = {
    "value": [{ type: Input, args: ['igxMinuteItem',] },],
    "defaultCSS": [{ type: HostBinding, args: ['class.igx-time-picker__item',] },],
    "selectedCSS": [{ type: HostBinding, args: ['class.igx-time-picker__item--selected',] },],
    "activeCSS": [{ type: HostBinding, args: ['class.igx-time-picker__item--active',] },],
    "onClick": [{ type: HostListener, args: ['click', ['value'],] },],
};
function IgxMinuteItemDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxMinuteItemDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxMinuteItemDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxMinuteItemDirective.propDecorators;
    /** @type {?} */
    IgxMinuteItemDirective.prototype.value;
    /** @type {?} */
    IgxMinuteItemDirective.prototype.timePicker;
    /** @type {?} */
    IgxMinuteItemDirective.prototype.itemList;
}
/**
 * @hidden
 */
export class IgxAmPmItemDirective {
    /**
     * @param {?} timePicker
     * @param {?} itemList
     */
    constructor(timePicker, itemList) {
        this.timePicker = timePicker;
        this.itemList = itemList;
    }
    /**
     * @return {?}
     */
    get defaultCSS() {
        return true;
    }
    /**
     * @return {?}
     */
    get selectedCSS() {
        return this.isSelectedAmPm;
    }
    /**
     * @return {?}
     */
    get activeCSS() {
        return this.isSelectedAmPm && this.itemList.isActive;
    }
    /**
     * @return {?}
     */
    get isSelectedAmPm() {
        return this.timePicker.selectedAmPm === this.value;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onClick(item) {
        if (item !== '') {
            this.timePicker.scrollAmPmIntoView(item);
        }
    }
}
IgxAmPmItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxAmPmItem]'
            },] },
];
/** @nocollapse */
IgxAmPmItemDirective.ctorParameters = () => [
    { type: IgxTimePickerComponent, decorators: [{ type: Host }, { type: Inject, args: [forwardRef(() => IgxTimePickerComponent),] },] },
    { type: IgxItemListDirective, },
];
IgxAmPmItemDirective.propDecorators = {
    "value": [{ type: Input, args: ['igxAmPmItem',] },],
    "defaultCSS": [{ type: HostBinding, args: ['class.igx-time-picker__item',] },],
    "selectedCSS": [{ type: HostBinding, args: ['class.igx-time-picker__item--selected',] },],
    "activeCSS": [{ type: HostBinding, args: ['class.igx-time-picker__item--active',] },],
    "onClick": [{ type: HostListener, args: ['click', ['value'],] },],
};
function IgxAmPmItemDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxAmPmItemDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxAmPmItemDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxAmPmItemDirective.propDecorators;
    /** @type {?} */
    IgxAmPmItemDirective.prototype.value;
    /** @type {?} */
    IgxAmPmItemDirective.prototype.timePicker;
    /** @type {?} */
    IgxAmPmItemDirective.prototype.itemList;
}
/**
 * @hidden
 */
export class IgxTimePickerTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxTimePickerTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxTimePickerTemplate]'
            },] },
];
/** @nocollapse */
IgxTimePickerTemplateDirective.ctorParameters = () => [
    { type: TemplateRef, },
];
function IgxTimePickerTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTimePickerTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTimePickerTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxTimePickerTemplateDirective.prototype.template;
}

//# sourceMappingURL=data:application/json;base64,