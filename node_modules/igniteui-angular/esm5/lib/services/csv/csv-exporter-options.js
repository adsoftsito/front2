/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';
/**
 * Objects of this class are used to configure the CSV exporting process.
 */
var /**
 * Objects of this class are used to configure the CSV exporting process.
 */
IgxCsvExporterOptions = /** @class */ (function (_super) {
    tslib_1.__extends(IgxCsvExporterOptions, _super);
    function IgxCsvExporterOptions(fileName, fileType) {
        var _this = _super.call(this, fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType)) || this;
        _this.setFileType(fileType);
        _this.setDelimiter();
        return _this;
    }
    /**
     * @param {?} fType
     * @return {?}
     */
    IgxCsvExporterOptions.getExtensionFromFileType = /**
     * @param {?} fType
     * @return {?}
     */
    function (fType) {
        var /** @type {?} */ extension = '';
        switch (fType) {
            case CsvFileTypes.CSV:
                extension = '.csv';
                break;
            case CsvFileTypes.TSV:
                extension = '.tsv';
                break;
            case CsvFileTypes.TAB:
                extension = '.tab';
                break;
            default:
                throw Error('Unsupported CSV file type!');
        }
        return extension;
    };
    Object.defineProperty(IgxCsvExporterOptions.prototype, "valueDelimiter", {
        /**
         * Gets the value delimiter which will be used for the exporting operation.
         * ```typescript
         * let delimiter = this.exportOptions.valueDelimiter;
         * ```
         * @memberof IgxCsvExporterOptions
         */
        get: /**
         * Gets the value delimiter which will be used for the exporting operation.
         * ```typescript
         * let delimiter = this.exportOptions.valueDelimiter;
         * ```
         * \@memberof IgxCsvExporterOptions
         * @return {?}
         */
        function () {
            return this._valueDelimiter;
        },
        /**
         * Sets a value delimiter which will overwrite the default delimiter of the selected export format.
         * ```typescript
         * this.exportOptions.valueDelimiter = '|';
         * ```
         * @memberof IgxCsvExporterOptions
         */
        set: /**
         * Sets a value delimiter which will overwrite the default delimiter of the selected export format.
         * ```typescript
         * this.exportOptions.valueDelimiter = '|';
         * ```
         * \@memberof IgxCsvExporterOptions
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setDelimiter(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCsvExporterOptions.prototype, "fileType", {
        /**
         * Gets the CSV export format.
         * ```typescript
         * let filetype = this.exportOptions.fileType;
         * ```
         * @memberof IgxCsvExporterOptions
         */
        get: /**
         * Gets the CSV export format.
         * ```typescript
         * let filetype = this.exportOptions.fileType;
         * ```
         * \@memberof IgxCsvExporterOptions
         * @return {?}
         */
        function () {
            return this._fileType;
        },
        /**
         * Sets the CSV export format.
         * ```typescript
         * this.exportOptions.fileType = CsvFileTypes.TAB;
         * ```
         * @memberof IgxCsvExporterOptions
         */
        set: /**
         * Sets the CSV export format.
         * ```typescript
         * this.exportOptions.fileType = CsvFileTypes.TAB;
         * ```
         * \@memberof IgxCsvExporterOptions
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setFileType(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    IgxCsvExporterOptions.prototype.setFileType = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== undefined && value !== null && value !== this._fileType) {
            this._fileType = value;
            var /** @type {?} */ extension = IgxCsvExporterOptions.getExtensionFromFileType(value);
            if (!this.fileName.endsWith(extension)) {
                var /** @type {?} */ oldExt = '.' + this.fileName.split('.').pop();
                var /** @type {?} */ newName = this.fileName.replace(oldExt, extension);
                this._fileExtension = extension;
                this.fileName = newName;
            }
        }
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    IgxCsvExporterOptions.prototype.setDelimiter = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value !== undefined && value !== '' && value !== null) {
            this._valueDelimiter = value;
        }
        else {
            switch (this.fileType) {
                case CsvFileTypes.CSV:
                    this._valueDelimiter = ',';
                    break;
                case CsvFileTypes.TSV:
                case CsvFileTypes.TAB:
                    this._valueDelimiter = '\t';
                    break;
            }
        }
    };
    return IgxCsvExporterOptions;
}(IgxExporterOptionsBase));
/**
 * Objects of this class are used to configure the CSV exporting process.
 */
export { IgxCsvExporterOptions };
function IgxCsvExporterOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    IgxCsvExporterOptions.prototype._valueDelimiter;
    /** @type {?} */
    IgxCsvExporterOptions.prototype._fileType;
}
/** @enum {number} */
var CsvFileTypes = {
    /**
         * Character Separated Values, default separator is "comma", default file extension is .csv
         */
    CSV: 0,
    /**
         * Tab Separated Values, default separator is tab, default file extension is .tsv
         */
    TSV: 1,
    /**
         * Tab Separated Values, default separator is tab, default file extension is .tab
         */
    TAB: 2,
};
export { CsvFileTypes };
CsvFileTypes[CsvFileTypes.CSV] = "CSV";
CsvFileTypes[CsvFileTypes.TSV] = "TSV";
CsvFileTypes[CsvFileTypes.TAB] = "TAB";

//# sourceMappingURL=data:application/json;base64,