/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, Input, NgModule, Output, QueryList, ViewChild, Self, Optional, HostListener, Directive, Inject } from '@angular/core';
import { IgxSelectionAPIService } from '../core/selection';
import { IgxToggleDirective, IgxToggleModule } from '../directives/toggle/toggle.directive';
import { IgxDropDownItemComponent } from './drop-down-item.component';
var /** @type {?} */ NEXT_ID = 0;
/**
 * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.
 *
 * @export
 * @record
 */
export function ISelectionEventArgs() { }
function ISelectionEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    ISelectionEventArgs.prototype.oldSelection;
    /** @type {?} */
    ISelectionEventArgs.prototype.newSelection;
}
/** @enum {number} */
var Navigate = {
    Up: -1,
    Down: 1,
};
export { Navigate };
Navigate[Navigate.Up] = "Up";
Navigate[Navigate.Down] = "Down";
var IgxDropDownBase = /** @class */ (function () {
    function IgxDropDownBase(elementRef, cdr, selection) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.selection = selection;
        this._initiallySelectedItem = null;
        this._focusedItem = null;
        this._id = "igx-drop-down-" + NEXT_ID++;
        /**
         * Emitted when item selection is changing, before the selection completes
         *
         * ```html
         * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>
         * ```
         */
        this.onSelection = new EventEmitter();
        /**
         * Emitted before the dropdown is opened
         *
         * ```html
         * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>
         * ```
         */
        this.onOpening = new EventEmitter();
        /**
         * Emitted after the dropdown is opened
         *
         * ```html
         * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>
         * ```
         */
        this.onOpened = new EventEmitter();
        /**
         * Emitted before the dropdown is closed
         *
         * ```html
         * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>
         * ```
         */
        this.onClosing = new EventEmitter();
        /**
         * Emitted after the dropdown is closed
         *
         * ```html
         * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>
         * ```
         */
        this.onClosed = new EventEmitter();
        /**
         * Gets/sets whether items take focus. Disabled by default.
         * When enabled, drop down items gain tab index and are focused when active -
         * this includes activating the selected item when opening the drop down and moving with keyboard navigation.
         *
         * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive
         * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.
         *
         * ```typescript
         * // get
         * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>
         * ```
         */
        this.allowItemsFocus = false;
    }
    Object.defineProperty(IgxDropDownBase.prototype, "width", {
        get: /**
         *  Gets the width of the drop down
         *
         * ```typescript
         * // get
         * let myDropDownCurrentWidth = this.dropdown.width;
         * ```
         * @return {?}
         */
        function () {
            return this._width;
        },
        /**
         * Sets the width of the drop down
         *
         * ```html
         * <!--set-->
         * <igx-drop-down [width]='160px'></igx-drop-down>
         * ```
         */
        set: /**
         * Sets the width of the drop down
         *
         * ```html
         * <!--set-->
         * <igx-drop-down [width]='160px'></igx-drop-down>
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._width = value;
            this.toggleDirective.element.style.width = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownBase.prototype, "height", {
        get: /**
         * Gets the height of the drop down
         *
         * ```typescript
         * // get
         * let myDropDownCurrentHeight = this.dropdown.height;
         * ```
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * Sets the height of the drop down
         *
         * ```html
         * <!--set-->
         * <igx-drop-down [height]='400px'></igx-drop-down>
         * ```
         */
        set: /**
         * Sets the height of the drop down
         *
         * ```html
         * <!--set-->
         * <igx-drop-down [height]='400px'></igx-drop-down>
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = value;
            this.toggleDirective.element.style.height = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownBase.prototype, "id", {
        get: /**
         * Gets the drop down's id
         *
         * ```typescript
         * // get
         * let myDropDownCurrentId = this.dropdown.id;
         * ```
         * @return {?}
         */
        function () {
            return this._id;
        },
        /**
         * Sets the drop down's id
         *
         * ```html
         * <!--set-->
         * <igx-drop-down [id]='newDropDownId'></igx-drop-down>
         * ```
         */
        set: /**
         * Sets the drop down's id
         *
         * ```html
         * <!--set-->
         * <igx-drop-down [id]='newDropDownId'></igx-drop-down>
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.selection.set(value, this.selection.get(this.id));
            this._id = value;
            this.toggleDirective.id = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownBase.prototype, "collapsed", {
        get: /**
         * Gets if the dropdown is collapsed
         *
         * ```typescript
         * let isCollapsed = this.dropdown.collapsed;
         * ```
         * @return {?}
         */
        function () {
            return this.toggleDirective.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownBase.prototype, "selectedItem", {
        get: /**
         * Get currently selected item
         *
         * ```typescript
         * let currentItem = this.dropdown.selectedItem;
         * ```
         * @return {?}
         */
        function () {
            var /** @type {?} */ selectedItem = this.selection.first_item(this.id);
            if (selectedItem) {
                if (selectedItem.isSelected) {
                    return selectedItem;
                }
                this.selection.clear(this.id);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownBase.prototype, "items", {
        get: /**
         * Get all non-header items
         *
         * ```typescript
         * let myDropDownItems = this.dropdown.items;
         * ```
         * @return {?}
         */
        function () {
            var /** @type {?} */ items = [];
            if (this.children !== undefined) {
                try {
                    for (var _a = tslib_1.__values(this.children.toArray()), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var child = _b.value;
                        if (!child.isHeader) {
                            items.push(child);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return items;
            var e_1, _c;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownBase.prototype, "headers", {
        get: /**
         * Get all header items
         *
         * ```typescript
         * let myDropDownHeaderItems = this.dropdown.headers;
         * ```
         * @return {?}
         */
        function () {
            var /** @type {?} */ headers = [];
            if (this.children !== undefined) {
                try {
                    for (var _a = tslib_1.__values(this.children.toArray()), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var child = _b.value;
                        if (child.isHeader) {
                            headers.push(child);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            return headers;
            var e_2, _c;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownBase.prototype, "element", {
        get: /**
         * Get dropdown html element
         *
         * ```typescript
         * let myDropDownElement = this.dropdown.element;
         * ```
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownBase.prototype, "scrollContainer", {
        /**
         * Get dropdown's html element of it scroll container
         */
        get: /**
         * Get dropdown's html element of it scroll container
         * @return {?}
         */
        function () {
            return this.toggleDirective.element;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Select an item by index
     * @param index of the item to select
     */
    /**
     * Select an item by index
     * @param {?} index of the item to select
     * @return {?}
     */
    IgxDropDownBase.prototype.setSelectedItem = /**
     * Select an item by index
     * @param {?} index of the item to select
     * @return {?}
     */
    function (index) {
        if (index < 0 || index >= this.items.length) {
            return;
        }
        var /** @type {?} */ newSelection = this.items.find(function (item) { return item.index === index; });
        if (newSelection.isHeader) {
            return;
        }
        this.changeSelectedItem(newSelection);
    };
    /**
     * Opens the dropdown
     *
     * ```typescript
     * this.dropdown.open();
     * ```
     */
    /**
     * Opens the dropdown
     *
     * ```typescript
     * this.dropdown.open();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    IgxDropDownBase.prototype.open = /**
     * Opens the dropdown
     *
     * ```typescript
     * this.dropdown.open();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    function (overlaySettings) {
        this.toggleDirective.open(overlaySettings);
    };
    /**
     * Closes the dropdown
     *
     * ```typescript
     * this.dropdown.close();
     * ```
     */
    /**
     * Closes the dropdown
     *
     * ```typescript
     * this.dropdown.close();
     * ```
     * @return {?}
     */
    IgxDropDownBase.prototype.close = /**
     * Closes the dropdown
     *
     * ```typescript
     * this.dropdown.close();
     * ```
     * @return {?}
     */
    function () {
        this.toggleDirective.close();
    };
    /**
     * Toggles the dropdown
     *
     * ```typescript
     * this.dropdown.toggle();
     * ```
     */
    /**
     * Toggles the dropdown
     *
     * ```typescript
     * this.dropdown.toggle();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    IgxDropDownBase.prototype.toggle = /**
     * Toggles the dropdown
     *
     * ```typescript
     * this.dropdown.toggle();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    function (overlaySettings) {
        if (this.toggleDirective.collapsed) {
            this.open(overlaySettings);
        }
        else {
            this.close();
        }
    };
    Object.defineProperty(IgxDropDownBase.prototype, "focusedItem", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._focusedItem;
        },
        set: /**
         * @hidden
         * @param {?} item
         * @return {?}
         */
        function (item) {
            this._focusedItem = item;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} direction
     * @param {?=} currentIndex
     * @return {?}
     */
    IgxDropDownBase.prototype.navigate = /**
     * @hidden
     * @param {?} direction
     * @param {?=} currentIndex
     * @return {?}
     */
    function (direction, currentIndex) {
        var /** @type {?} */ index = -1;
        if (this._focusedItem) {
            index = currentIndex ? currentIndex : this._focusedItem.index;
        }
        var /** @type {?} */ newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);
        this.navigateItem(newIndex, direction);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDropDownBase.prototype.navigateFirst = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.navigate(Navigate.Down, -1);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDropDownBase.prototype.navigateLast = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.navigate(Navigate.Up, this.items.length);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDropDownBase.prototype.navigateNext = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.navigate(Navigate.Down);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDropDownBase.prototype.navigatePrev = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.navigate(Navigate.Up);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDropDownBase.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.toggleDirective.id = this.id;
        this.selection.clear(this.id);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    IgxDropDownBase.prototype.onToggleOpening = /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var /** @type {?} */ eventArgs = { cancel: false };
        this.onOpening.emit(eventArgs);
        e.cancel = eventArgs.cancel;
        if (eventArgs.cancel) {
            return;
        }
        this.scrollToItem(this.selectedItem);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDropDownBase.prototype.onToggleOpened = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._initiallySelectedItem = this.selectedItem;
        this._focusedItem = this.selectedItem;
        if (this._focusedItem) {
            this._focusedItem.isFocused = true;
        }
        else if (this.allowItemsFocus) {
            var /** @type {?} */ firstItemIndex = this.getNearestSiblingFocusableItemIndex(-1, Navigate.Down);
            if (firstItemIndex !== -1) {
                this.navigateItem(firstItemIndex);
            }
        }
        this.onOpened.emit();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    IgxDropDownBase.prototype.onToggleClosing = /**
     * @hidden
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var /** @type {?} */ eventArgs = { cancel: false };
        this.onClosing.emit(eventArgs);
        e.cancel = eventArgs.cancel;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDropDownBase.prototype.onToggleClosed = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this._focusedItem) {
            this._focusedItem.isFocused = false;
        }
        this.onClosed.emit();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} item
     * @return {?}
     */
    IgxDropDownBase.prototype.scrollToItem = /**
     * @hidden
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var /** @type {?} */ itemPosition = this.calculateScrollPosition(item);
        this.scrollContainer.scrollTop = (itemPosition);
    };
    /**
     * @hidden
     * @param {?} newItem
     * @return {?}
     */
    IgxDropDownBase.prototype.scrollToHiddenItem = /**
     * @hidden
     * @param {?} newItem
     * @return {?}
     */
    function (newItem) {
        var /** @type {?} */ elementRect = newItem.element.nativeElement.getBoundingClientRect();
        var /** @type {?} */ parentRect = this.scrollContainer.getBoundingClientRect();
        if (parentRect.top > elementRect.top) {
            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);
        }
        if (parentRect.bottom < elementRect.bottom) {
            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);
        }
    };
    /**
     * @hidden
     * @param {?} item
     * @param {?=} event
     * @return {?}
     */
    IgxDropDownBase.prototype.selectItem = /**
     * @hidden
     * @param {?} item
     * @param {?=} event
     * @return {?}
     */
    function (item, event) {
        if (item === null) {
            return;
        }
        this.changeSelectedItem(item);
        if (event) {
            this.toggleDirective.close();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} newSelection
     * @return {?}
     */
    IgxDropDownBase.prototype.changeSelectedItem = /**
     * @hidden
     * @param {?=} newSelection
     * @return {?}
     */
    function (newSelection) {
        var /** @type {?} */ oldSelection = this.selectedItem;
        if (!newSelection) {
            newSelection = this._focusedItem;
        }
        var /** @type {?} */ args = { oldSelection: oldSelection, newSelection: newSelection, cancel: false };
        this.onSelection.emit(args);
        if (!args.cancel) {
            this.selection.set(this.id, new Set([newSelection]));
        }
        return !args.cancel;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} item
     * @return {?}
     */
    IgxDropDownBase.prototype.calculateScrollPosition = /**
     * @hidden
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (!item) {
            return 0;
        }
        var /** @type {?} */ elementRect = item.element.nativeElement.getBoundingClientRect();
        var /** @type {?} */ parentRect = this.scrollContainer.getBoundingClientRect();
        var /** @type {?} */ scrollDelta = parentRect.top - elementRect.top;
        var /** @type {?} */ scrollPosition = this.scrollContainer.scrollTop - scrollDelta;
        var /** @type {?} */ dropDownHeight = this.scrollContainer.clientHeight;
        scrollPosition -= dropDownHeight / 2;
        scrollPosition += item.elementHeight / 2;
        return Math.floor(scrollPosition);
    };
    /**
     * @param {?} startIndex
     * @param {?} direction
     * @return {?}
     */
    IgxDropDownBase.prototype.getNearestSiblingFocusableItemIndex = /**
     * @param {?} startIndex
     * @param {?} direction
     * @return {?}
     */
    function (startIndex, direction) {
        var /** @type {?} */ index = startIndex;
        while (this.items[index + direction] && this.items[index + direction].disabled) {
            index += direction;
        }
        index += direction;
        if (index >= 0 && index < this.items.length) {
            return index;
        }
        else {
            return -1;
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} newIndex
     * @param {?=} direction
     * @return {?}
     */
    IgxDropDownBase.prototype.navigateItem = /**
     * @hidden
     * @param {?} newIndex
     * @param {?=} direction
     * @return {?}
     */
    function (newIndex, direction) {
        if (newIndex !== -1) {
            var /** @type {?} */ oldItem = this._focusedItem;
            var /** @type {?} */ newItem = this.items[newIndex];
            if (oldItem) {
                oldItem.isFocused = false;
            }
            this._focusedItem = newItem;
            this.scrollToHiddenItem(newItem);
            this._focusedItem.isFocused = true;
        }
    };
    IgxDropDownBase.propDecorators = {
        "children": [{ type: ContentChildren, args: [forwardRef(function () { return IgxDropDownItemComponent; }),] },],
        "toggleDirective": [{ type: ViewChild, args: [IgxToggleDirective,] },],
        "onSelection": [{ type: Output },],
        "onOpening": [{ type: Output },],
        "onOpened": [{ type: Output },],
        "onClosing": [{ type: Output },],
        "onClosed": [{ type: Output },],
        "width": [{ type: Input },],
        "height": [{ type: Input },],
        "allowItemsFocus": [{ type: Input },],
        "id": [{ type: Input },],
    };
    return IgxDropDownBase;
}());
export { IgxDropDownBase };
function IgxDropDownBase_tsickle_Closure_declarations() {
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxDropDownBase.propDecorators;
    /** @type {?} */
    IgxDropDownBase.prototype._initiallySelectedItem;
    /** @type {?} */
    IgxDropDownBase.prototype._focusedItem;
    /** @type {?} */
    IgxDropDownBase.prototype._width;
    /** @type {?} */
    IgxDropDownBase.prototype._height;
    /** @type {?} */
    IgxDropDownBase.prototype._id;
    /** @type {?} */
    IgxDropDownBase.prototype.children;
    /** @type {?} */
    IgxDropDownBase.prototype.toggleDirective;
    /**
     * Emitted when item selection is changing, before the selection completes
     *
     * ```html
     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownBase.prototype.onSelection;
    /**
     * Emitted before the dropdown is opened
     *
     * ```html
     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownBase.prototype.onOpening;
    /**
     * Emitted after the dropdown is opened
     *
     * ```html
     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownBase.prototype.onOpened;
    /**
     * Emitted before the dropdown is closed
     *
     * ```html
     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownBase.prototype.onClosing;
    /**
     * Emitted after the dropdown is closed
     *
     * ```html
     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownBase.prototype.onClosed;
    /**
     * Gets/sets whether items take focus. Disabled by default.
     * When enabled, drop down items gain tab index and are focused when active -
     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.
     *
     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive
     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.
     *
     * ```typescript
     * // get
     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownBase.prototype.allowItemsFocus;
    /** @type {?} */
    IgxDropDownBase.prototype.elementRef;
    /** @type {?} */
    IgxDropDownBase.prototype.cdr;
    /** @type {?} */
    IgxDropDownBase.prototype.selection;
}
var IgxDropDownItemNavigationDirective = /** @class */ (function () {
    function IgxDropDownItemNavigationDirective(element, dropdown) {
        this.element = element;
        this.dropdown = dropdown;
    }
    Object.defineProperty(IgxDropDownItemNavigationDirective.prototype, "target", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._target;
        },
        set: /**
         * @hidden
         * @param {?} target
         * @return {?}
         */
        function (target) {
            this._target = target ? target : this.dropdown;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxDropDownItemNavigationDirective.prototype.handleKeyDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            var /** @type {?} */ key = event.key.toLowerCase();
            if (!this.target.collapsed) {
                // If dropdown is opened
                var /** @type {?} */ navKeys = ['esc', 'escape', 'enter', 'tab', 'space', 'spacebar', ' ',
                    'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];
                if (navKeys.indexOf(key) === -1) {
                    // If key has appropriate function in DD
                    return;
                }
                event.preventDefault();
                event.stopPropagation();
            }
            else {
                // If dropdown is closed, do nothing
                return;
            }
            switch (key) {
                case 'esc':
                case 'escape':
                    this.onEscapeKeyDown(event);
                    break;
                case 'enter':
                case 'tab':
                    this.onEnterKeyDown(event);
                    break;
                case 'space':
                case 'spacebar':
                case ' ':
                    this.onSpaceKeyDown(event);
                    break;
                case 'arrowup':
                case 'up':
                    this.onArrowUpKeyDown(event);
                    break;
                case 'arrowdown':
                case 'down':
                    this.onArrowDownKeyDown(event);
                    break;
                case 'home':
                    this.onHomeKeyDown(event);
                    break;
                case 'end':
                    this.onEndKeyDown(event);
                    break;
                default:
                    return;
            }
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxDropDownItemNavigationDirective.prototype.onEscapeKeyDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.target.close();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxDropDownItemNavigationDirective.prototype.onSpaceKeyDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // V.S. : IgxDropDownComponent.selectItem needs event to be true in order to close DD as per specification
        this.target.selectItem(this.target.focusedItem, this.target instanceof IgxDropDownComponent);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxDropDownItemNavigationDirective.prototype.onEnterKeyDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!(this.target instanceof IgxDropDownComponent)) {
            if (this.target.focusedItem.value === 'ADD ITEM') {
                var /** @type {?} */ targetC = /** @type {?} */ (this.target);
                targetC.combo.addItemToCollection();
            }
            else {
                this.target.close();
            }
            return;
        }
        this.target.selectItem(this.target.focusedItem, event);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxDropDownItemNavigationDirective.prototype.onArrowDownKeyDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.target.navigateNext();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxDropDownItemNavigationDirective.prototype.onArrowUpKeyDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.target.navigatePrev();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxDropDownItemNavigationDirective.prototype.onEndKeyDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.target.navigateLast();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxDropDownItemNavigationDirective.prototype.onHomeKeyDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.target.navigateFirst();
    };
    IgxDropDownItemNavigationDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxDropDownItemNavigation]'
                },] },
    ];
    /** @nocollapse */
    IgxDropDownItemNavigationDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: IgxDropDownComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return IgxDropDownComponent; }),] }, { type: Self }, { type: Optional },] },
    ]; };
    IgxDropDownItemNavigationDirective.propDecorators = {
        "target": [{ type: Input, args: ['igxDropDownItemNavigation',] },],
        "handleKeyDown": [{ type: HostListener, args: ['keydown', ['$event'],] },],
    };
    return IgxDropDownItemNavigationDirective;
}());
export { IgxDropDownItemNavigationDirective };
function IgxDropDownItemNavigationDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDropDownItemNavigationDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDropDownItemNavigationDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxDropDownItemNavigationDirective.propDecorators;
    /** @type {?} */
    IgxDropDownItemNavigationDirective.prototype._target;
    /** @type {?} */
    IgxDropDownItemNavigationDirective.prototype.element;
    /** @type {?} */
    IgxDropDownItemNavigationDirective.prototype.dropdown;
}
/**
 * **Ignite UI for Angular DropDown** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop-down.html)
 *
 * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and
 * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down
 *
 * Example:
 * ```html
 * <igx-drop-down>
 *   <igx-drop-down-item *ngFor="let item of items" disabled={{item.disabled}} isHeader={{item.header}}>
 *     {{ item.value }}
 *   </igx-drop-down-item>
 * </igx-drop-down>
 * ```
 */
var IgxDropDownComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxDropDownComponent, _super);
    function IgxDropDownComponent(elementRef, cdr, selection) {
        var _this = _super.call(this, elementRef, cdr, selection) || this;
        _this.elementRef = elementRef;
        _this.cdr = cdr;
        _this.selection = selection;
        return _this;
    }
    /**
     * @param {?=} newSelection
     * @return {?}
     */
    IgxDropDownComponent.prototype.changeSelectedItem = /**
     * @param {?=} newSelection
     * @return {?}
     */
    function (newSelection) {
        var /** @type {?} */ oldSelection = this.selectedItem;
        var /** @type {?} */ selectionChanged = _super.prototype.changeSelectedItem.call(this, newSelection);
        if (selectionChanged) {
            if (oldSelection) {
                oldSelection.isSelected = false;
            }
            if (newSelection) {
                newSelection.isSelected = true;
            }
        }
        return selectionChanged;
    };
    IgxDropDownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-drop-down',
                    template: "<div class=\"igx-drop-down\">\n    <div class=\"igx-drop-down__list\" igxToggle (onOpening)=\"onToggleOpening($event)\" (onOpened)=\"onToggleOpened()\" (onClosing)=\"onToggleClosing($event)\" (onClosed)=\"onToggleClosed()\">\n        <ng-container *ngIf=\"!collapsed\">\n            <ng-content></ng-content>\n        </ng-container>\n    </div>\n</div>"
                },] },
    ];
    /** @nocollapse */
    IgxDropDownComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
        { type: IgxSelectionAPIService, },
    ]; };
    return IgxDropDownComponent;
}(IgxDropDownBase));
export { IgxDropDownComponent };
function IgxDropDownComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDropDownComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDropDownComponent.ctorParameters;
    /** @type {?} */
    IgxDropDownComponent.prototype.elementRef;
    /** @type {?} */
    IgxDropDownComponent.prototype.cdr;
    /** @type {?} */
    IgxDropDownComponent.prototype.selection;
}
/**
 * @hidden
 */
var IgxDropDownModule = /** @class */ (function () {
    function IgxDropDownModule() {
    }
    IgxDropDownModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownItemNavigationDirective],
                    exports: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownItemNavigationDirective],
                    imports: [CommonModule, IgxToggleModule],
                    providers: [IgxSelectionAPIService]
                },] },
    ];
    return IgxDropDownModule;
}());
export { IgxDropDownModule };
function IgxDropDownModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDropDownModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDropDownModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,