/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { EventEmitter, Injectable } from '@angular/core';
import { isObject, mergeObjects, cloneValue } from '../../core/utils';
// unsupported: template constraints.
// unsupported: template constraints.
/**
 * @template T, S
 */
export class IgxBaseTransactionService {
    constructor() {
        this._isPending = false;
        this._pendingTransactions = [];
        this._pendingStates = new Map();
        this.onStateUpdate = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get canRedo() {
        return false;
    }
    /**
     * @return {?}
     */
    get canUndo() {
        return false;
    }
    /**
     * @return {?}
     */
    get enabled() {
        return this._isPending;
    }
    /**
     * @param {?} transaction
     * @param {?=} recordRef
     * @return {?}
     */
    add(transaction, recordRef) {
        if (this._isPending) {
            this.updateState(this._pendingStates, transaction, recordRef);
            this._pendingTransactions.push(transaction);
        }
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    getTransactionLog(id) { return []; }
    /**
     * @return {?}
     */
    undo() { }
    /**
     * @return {?}
     */
    redo() { }
    /**
     * @param {?} mergeChanges
     * @return {?}
     */
    getAggregatedChanges(mergeChanges) {
        const /** @type {?} */ result = [];
        this._pendingStates.forEach((state, key) => {
            const /** @type {?} */ value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;
            result.push(/** @type {?} */ ({ id: key, newValue: value, type: state.type }));
        });
        return result;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getState(id) {
        return this._pendingStates.get(id);
    }
    /**
     * @param {?} id
     * @param {?} mergeChanges
     * @return {?}
     */
    getAggregatedValue(id, mergeChanges) {
        const /** @type {?} */ state = this._pendingStates.get(id);
        if (!state) {
            return null;
        }
        if (mergeChanges) {
            return this.updateValue(state);
        }
        return state.value;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    commit(data) { }
    /**
     * @return {?}
     */
    clear() {
        this._pendingStates.clear();
        this._pendingTransactions = [];
    }
    /**
     * @return {?}
     */
    startPending() {
        this._isPending = true;
    }
    /**
     * @param {?} commit
     * @return {?}
     */
    endPending(commit) {
        this._isPending = false;
        this._pendingStates.clear();
        this._pendingTransactions = [];
    }
    /**
     * Updates the provided states collection according to passed transaction and recordRef
     * @param {?} states States collection to apply the update to
     * @param {?} transaction Transaction to apply to the current state
     * @param {?=} recordRef Reference to the value of the record in data source, if any, where transaction should be applied
     * @return {?}
     */
    updateState(states, transaction, recordRef) {
        let /** @type {?} */ state = states.get(transaction.id);
        if (state) {
            if (isObject(state.value)) {
                mergeObjects(state.value, transaction.newValue);
            }
            else {
                state.value = transaction.newValue;
            }
        }
        else {
            state = /** @type {?} */ ({ value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type });
            states.set(transaction.id, state);
        }
    }
    /**
     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types
     * @param {?} state State to update value for
     * @return {?} updated value including all the changes in provided state
     */
    updateValue(state) {
        return this.mergeValues(state.recordRef, state.value);
    }
    /**
     * Merges second values in first value and the result in empty object. If values are primitive type
     * returns second value if exists, or first value.
     * @template U
     * @param {?} first Value to merge into
     * @param {?} second Value to merge
     * @return {?}
     */
    mergeValues(first, second) {
        let /** @type {?} */ result;
        if (isObject(first) || isObject(second)) {
            result = mergeObjects(mergeObjects({}, first), second);
        }
        else {
            result = second ? second : first;
        }
        return result;
    }
}
IgxBaseTransactionService.decorators = [
    { type: Injectable },
];
function IgxBaseTransactionService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxBaseTransactionService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxBaseTransactionService.ctorParameters;
    /** @type {?} */
    IgxBaseTransactionService.prototype._isPending;
    /** @type {?} */
    IgxBaseTransactionService.prototype._pendingTransactions;
    /** @type {?} */
    IgxBaseTransactionService.prototype._pendingStates;
    /** @type {?} */
    IgxBaseTransactionService.prototype.onStateUpdate;
}

//# sourceMappingURL=data:application/json;base64,