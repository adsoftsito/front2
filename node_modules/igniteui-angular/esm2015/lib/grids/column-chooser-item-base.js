/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
/**
 * @record
 */
export function IValueChangedEventArgs() { }
function IValueChangedEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IValueChangedEventArgs.prototype.oldValue;
    /** @type {?} */
    IValueChangedEventArgs.prototype.newValue;
}
/**
 * @hidden
 * @abstract
 */
export class ItemPropertyValueChanged {
    /**
     * @param {?} propName
     */
    constructor(propName) {
        this.valueChanged = new EventEmitter();
        this._propName = propName;
    }
    /**
     * @return {?}
     */
    get object() {
        return this._object;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set object(value) {
        if (value) {
            this._object = value;
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return (this.object) ? this.object[this._propName] : null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this.onValueChanged(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onValueChanged(value) {
        const /** @type {?} */ currentValue = this.value;
        if (value !== currentValue) {
            this.object[this._propName] = value;
            this.valueChanged.emit({ oldValue: currentValue, newValue: value });
        }
    }
}
ItemPropertyValueChanged.propDecorators = {
    "value": [{ type: Input },],
    "valueChanged": [{ type: Output },],
};
function ItemPropertyValueChanged_tsickle_Closure_declarations() {
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ItemPropertyValueChanged.propDecorators;
    /** @type {?} */
    ItemPropertyValueChanged.prototype._object;
    /** @type {?} */
    ItemPropertyValueChanged.prototype._propName;
    /** @type {?} */
    ItemPropertyValueChanged.prototype.valueChanged;
}
/**
 * @hidden
 */
export class ColumnChooserItemBase extends ItemPropertyValueChanged {
    /**
     * @param {?} prop
     */
    constructor(prop) {
        super(prop);
        this.prop = prop;
        this.indentation = 30;
    }
    /**
     * @return {?}
     */
    get column() {
        return this.object;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set column(value) {
        if (value) {
            this.object = value;
        }
    }
    /**
     * @return {?}
     */
    get name() {
        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';
    }
    /**
     * @return {?}
     */
    get level() {
        return this.column.level;
    }
    /**
     * @return {?}
     */
    get calcIndent() {
        return this.indentation * this.level;
    }
}
ColumnChooserItemBase.propDecorators = {
    "column": [{ type: Input },],
    "indentation": [{ type: Input },],
    "container": [{ type: Input },],
};
function ColumnChooserItemBase_tsickle_Closure_declarations() {
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ColumnChooserItemBase.propDecorators;
    /** @type {?} */
    ColumnChooserItemBase.prototype.indentation;
    /** @type {?} */
    ColumnChooserItemBase.prototype.container;
    /** @type {?} */
    ColumnChooserItemBase.prototype.prop;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWNob29zZXItaXRlbS1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9jb2x1bW4tY2hvb3Nlci1pdGVtLWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0FBVTVELE1BQU07Ozs7SUEwQkYsWUFBWSxRQUFnQjs0QkFGTixJQUFJLFlBQVksRUFBMEI7UUFHNUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7S0FDN0I7Ozs7SUF4QkQsSUFBSSxNQUFNO1FBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7S0FDdkI7Ozs7O0lBRUQsSUFBSSxNQUFNLENBQUMsS0FBSztRQUNaLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztTQUN4QjtLQUNKOzs7O1FBR0csS0FBSztRQUNMLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQzs7Ozs7O0lBRzlELElBQUksS0FBSyxDQUFDLEtBQUs7UUFDWCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzlCOzs7OztJQVNTLGNBQWMsQ0FBQyxLQUFLO1FBQzFCLHVCQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2hDLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDdkU7S0FDSjs7O3NCQXRCQSxLQUFLOzZCQVNMLE1BQU07Ozs7Ozs7Ozs7Ozs7OztBQWlCWCxNQUFNLDRCQUE2QixTQUFRLHdCQUF3Qjs7OztJQWtCL0QsWUFBbUIsSUFBWTtRQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFERyxTQUFJLEdBQUosSUFBSSxDQUFROzJCQUxWLEVBQUU7S0FPdEI7Ozs7UUFsQkcsTUFBTTtRQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDOzs7Ozs7SUFHdkIsSUFBSSxNQUFNLENBQUMsS0FBSztRQUNaLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztTQUN2QjtLQUNKOzs7O0lBWUQsSUFBSSxJQUFJO1FBQ0osTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztLQUMvRjs7OztJQUVELElBQUksS0FBSztRQUNMLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztLQUM1Qjs7OztJQUVELElBQUksVUFBVTtRQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDeEM7Ozt1QkEvQkEsS0FBSzs0QkFXTCxLQUFLOzBCQUdMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBJVmFsdWVDaGFuZ2VkRXZlbnRBcmdzIHtcbiAgICBvbGRWYWx1ZTogYW55O1xuICAgIG5ld1ZhbHVlOiBhbnk7XG59XG5cbi8qKlxuICpAaGlkZGVuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJdGVtUHJvcGVydHlWYWx1ZUNoYW5nZWQge1xuICAgIHByaXZhdGUgX29iamVjdDogYW55O1xuICAgIHByaXZhdGUgX3Byb3BOYW1lOiBzdHJpbmc7XG5cbiAgICBnZXQgb2JqZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb2JqZWN0O1xuICAgIH1cblxuICAgIHNldCBvYmplY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9vYmplY3QgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMub2JqZWN0KSA/IHRoaXMub2JqZWN0W3RoaXMuX3Byb3BOYW1lXSA6IG51bGw7XG4gICAgfVxuXG4gICAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMub25WYWx1ZUNoYW5nZWQodmFsdWUpO1xuICAgIH1cblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyB2YWx1ZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPElWYWx1ZUNoYW5nZWRFdmVudEFyZ3M+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3Byb3BOYW1lID0gcHJvcE5hbWU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uVmFsdWVDaGFuZ2VkKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdFt0aGlzLl9wcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLmVtaXQoeyBvbGRWYWx1ZTogY3VycmVudFZhbHVlLCBuZXdWYWx1ZTogdmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKiBAaGlkZGVuICovXG5leHBvcnQgY2xhc3MgQ29sdW1uQ2hvb3Nlckl0ZW1CYXNlIGV4dGVuZHMgSXRlbVByb3BlcnR5VmFsdWVDaGFuZ2VkIHtcbiAgICBASW5wdXQoKVxuICAgIGdldCBjb2x1bW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9iamVjdDtcbiAgICB9XG5cbiAgICBzZXQgY29sdW1uKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5vYmplY3QgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGluZGVudGF0aW9uID0gMzA7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjb250YWluZXI6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBwcm9wOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIocHJvcCk7XG4gICAgfVxuXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5jb2x1bW4pID8gKCh0aGlzLmNvbHVtbi5oZWFkZXIpID8gdGhpcy5jb2x1bW4uaGVhZGVyIDogdGhpcy5jb2x1bW4uZmllbGQpIDogJyc7XG4gICAgfVxuXG4gICAgZ2V0IGxldmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW4ubGV2ZWw7XG4gICAgfVxuXG4gICAgZ2V0IGNhbGNJbmRlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGVudGF0aW9uICogdGhpcy5sZXZlbDtcbiAgICB9XG59XG4iXX0=