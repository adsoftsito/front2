/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { forwardRef, Inject, Pipe } from '@angular/core';
import { cloneArray } from '../core/utils';
import { DataUtil } from '../data-operations/data-util';
import { IgxComboComponent } from './combo.component';
import { FilteringStrategy } from '../data-operations/filtering-strategy';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
/**
 * @hidden
 */
var IgxComboFilteringPipe = /** @class */ (function () {
    function IgxComboFilteringPipe(combo) {
        this.combo = combo;
    }
    /**
     * @param {?} collection
     * @param {?} expressions
     * @param {?} logic
     * @return {?}
     */
    IgxComboFilteringPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} expressions
     * @param {?} logic
     * @return {?}
     */
    function (collection, expressions, logic) {
        var /** @type {?} */ filteringExpressionsTree = new FilteringExpressionsTree(logic);
        filteringExpressionsTree.filteringOperands = expressions;
        var /** @type {?} */ state = { expressionsTree: filteringExpressionsTree, strategy: new SimpleFilteringStrategy() };
        state.expressionsTree.filteringOperands = this.combo.filteringExpressions;
        if (!state.expressionsTree.filteringOperands.length) {
            return collection;
        }
        var /** @type {?} */ result = DataUtil.filter(cloneArray(collection), state);
        return result;
    };
    IgxComboFilteringPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'comboFiltering'
                },] },
    ];
    /** @nocollapse */
    IgxComboFilteringPipe.ctorParameters = function () { return [
        { type: IgxComboComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return IgxComboComponent; }),] },] },
    ]; };
    return IgxComboFilteringPipe;
}());
export { IgxComboFilteringPipe };
function IgxComboFilteringPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxComboFilteringPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxComboFilteringPipe.ctorParameters;
    /** @type {?} */
    IgxComboFilteringPipe.prototype.combo;
}
/**
 * @hidden
 */
var /**
 * @hidden
 */
SimpleFilteringStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(SimpleFilteringStrategy, _super);
    function SimpleFilteringStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} rec
     * @param {?} expr
     * @return {?}
     */
    SimpleFilteringStrategy.prototype.findMatchByExpression = /**
     * @param {?} rec
     * @param {?} expr
     * @return {?}
     */
    function (rec, expr) {
        var /** @type {?} */ cond = expr.condition;
        var /** @type {?} */ val = expr.fieldName === undefined ? rec : rec[expr.fieldName];
        return cond.logic(val, expr.searchVal, expr.ignoreCase);
    };
    return SimpleFilteringStrategy;
}(FilteringStrategy));
/**
 * @hidden
 */
export { SimpleFilteringStrategy };
/**
 * @hidden
 */
var IgxComboSortingPipe = /** @class */ (function () {
    function IgxComboSortingPipe(combo) {
        this.combo = combo;
    }
    /**
     * @param {?} collection
     * @param {?} expression
     * @return {?}
     */
    IgxComboSortingPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} expression
     * @return {?}
     */
    function (collection, expression) {
        var /** @type {?} */ state = { expressions: [] };
        state.expressions = this.combo.sortingExpressions;
        if (!state.expressions.length) {
            return collection;
        }
        var /** @type {?} */ result = DataUtil.sort(cloneArray(collection), state);
        return result;
    };
    IgxComboSortingPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'comboSorting',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    IgxComboSortingPipe.ctorParameters = function () { return [
        { type: IgxComboComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return IgxComboComponent; }),] },] },
    ]; };
    return IgxComboSortingPipe;
}());
export { IgxComboSortingPipe };
function IgxComboSortingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxComboSortingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxComboSortingPipe.ctorParameters;
    /** @type {?} */
    IgxComboSortingPipe.prototype.combo;
}
/**
 * @hidden
 */
var IgxComboGroupingPipe = /** @class */ (function () {
    function IgxComboGroupingPipe(combo) {
        this.combo = combo;
    }
    /**
     * @param {?} collection
     * @param {?} groupKey
     * @return {?}
     */
    IgxComboGroupingPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} groupKey
     * @return {?}
     */
    function (collection, groupKey) {
        this.combo.filteredData = collection;
        if ((!groupKey && groupKey !== 0) || !collection.length) {
            return collection;
        }
        var /** @type {?} */ data = cloneArray(collection);
        var /** @type {?} */ inserts = 0;
        var /** @type {?} */ currentHeader = null;
        for (var /** @type {?} */ i = 0; i < collection.length; i++) {
            var /** @type {?} */ insertFlag = 0;
            if (currentHeader !== collection[i][groupKey]) {
                currentHeader = collection[i][groupKey];
                insertFlag = 1;
            }
            if (insertFlag) {
                data.splice(i + inserts, 0, (_a = {},
                    _a[this.combo.valueKey] = currentHeader,
                    _a[this.combo.groupKey] = currentHeader,
                    _a.isHeader = true,
                    _a));
                inserts++;
            }
        }
        return data;
        var _a;
    };
    IgxComboGroupingPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'comboGrouping'
                },] },
    ];
    /** @nocollapse */
    IgxComboGroupingPipe.ctorParameters = function () { return [
        { type: IgxComboComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return IgxComboComponent; }),] },] },
    ]; };
    return IgxComboGroupingPipe;
}());
export { IgxComboGroupingPipe };
function IgxComboGroupingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxComboGroupingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxComboGroupingPipe.ctorParameters;
    /** @type {?} */
    IgxComboGroupingPipe.prototype.combo;
}
/**
 * @hidden
 */
var IgxComboFilterConditionPipe = /** @class */ (function () {
    function IgxComboFilterConditionPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IgxComboFilterConditionPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.split(/(?=[A-Z])/).join(' ');
    };
    IgxComboFilterConditionPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'filterCondition',
                    pure: true
                },] },
    ];
    return IgxComboFilterConditionPipe;
}());
export { IgxComboFilterConditionPipe };
function IgxComboFilterConditionPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxComboFilterConditionPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxComboFilterConditionPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,