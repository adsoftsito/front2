/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { Component, ComponentFactoryResolver, ContentChild, EventEmitter, HostBinding, Input, NgModule, Output, ViewChild, ViewContainerRef, HostListener, TemplateRef, Directive } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxCalendarComponent, IgxCalendarHeaderTemplateDirective, IgxCalendarModule, IgxCalendarSubheaderTemplateDirective, WEEKDAYS } from '../calendar/index';
import { IgxDialogComponent, IgxDialogModule } from '../dialog/dialog.component';
import { IgxIconModule } from '../icon/index';
import { IgxInputGroupModule, IgxInputDirective } from '../input-group/index';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DeprecateClass } from '../core/deprecateDecorators';
export class IgxDatePickerTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxDatePickerTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxDatePickerTemplate]'
            },] },
];
/** @nocollapse */
IgxDatePickerTemplateDirective.ctorParameters = () => [
    { type: TemplateRef, },
];
function IgxDatePickerTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDatePickerTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDatePickerTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxDatePickerTemplateDirective.prototype.template;
}
/**
 * @record
 */
export function IFormatViews() { }
function IFormatViews_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    IFormatViews.prototype.day;
    /** @type {?|undefined} */
    IFormatViews.prototype.month;
    /** @type {?|undefined} */
    IFormatViews.prototype.year;
}
/**
 * @record
 */
export function IFormatOptions() { }
function IFormatOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    IFormatOptions.prototype.day;
    /** @type {?|undefined} */
    IFormatOptions.prototype.month;
    /** @type {?|undefined} */
    IFormatOptions.prototype.weekday;
    /** @type {?|undefined} */
    IFormatOptions.prototype.year;
}
let /** @type {?} */ NEXT_ID = 0;
/**
 * **Ignite UI for Angular Date Picker** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)
 *
 * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.
 *
 * Example:
 * ```html
 * <igx-date-picker [(ngModel)]="selectedDate"></igx-date-picker>
 * ```
 */
let IgxDatePickerComponent = IgxDatePickerComponent_1 = /**
 * **Ignite UI for Angular Date Picker** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)
 *
 * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.
 *
 * Example:
 * ```html
 * <igx-date-picker [(ngModel)]="selectedDate"></igx-date-picker>
 * ```
 */
class IgxDatePickerComponent {
    /**
     * @param {?} resolver
     */
    constructor(resolver) {
        this.resolver = resolver;
        /**
         * An \@Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
         * ```html
         * <igx-date-picker [id]="'igx-date-picker-3'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.id = `igx-date-picker-${NEXT_ID++}`;
        /**
         * An \@Input property that sets the `IgxDatePickerComponent` label.
         * The default label is 'Date'.
         * ```html
         * <igx-date-picker [label]="Calendar"></igx-date-picker>
         * ```
         */
        this.label = 'Date';
        /**
         * An \@Input property that sets the `IgxDatePickerComponent` label visibility.
         * By default the visibility is set to true.
         * <igx-date-picker [labelVisibility]="false"></igx-date-picker>
         */
        this.labelVisibility = true;
        /**
         * An \@Input property that sets locales. Default locale is en.
         * ```html
         * <igx-date-picker locale="ja-JP" [value]="date"></igx-date-picker>
         * ```
         */
        this.locale = Constants.DEFAULT_LOCALE_DATE;
        /**
         * An \@Input property that sets on which day the week starts.
         * ```html
         * <igx-date-picker [weekStart]="WEEKDAYS.FRIDAY" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.weekStart = WEEKDAYS.SUNDAY;
        /**
         * An \@Input proeprty that sets the orientation of the `IgxDatePickerComponent` header.
         * ```html
         * <igx-date-picker [vertical]="'true'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.vertical = false;
        /**
         * An event that is emitted when the `IgxDatePickerComponent` is opened.
         * ```typescript
         * public open(event){
         *    alert("The date-picker has been opened!");
         * }
         * ```
         * ```html
         * <igx-date-picker (onOpen)="open($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.onOpen = new EventEmitter();
        /**
         * "An event that is emitted when the `IgxDatePickerComponent` is closed.
         * ```typescript
         * public close(event){
         *    alert("The date-picker has been closed!");
         * }
         * ```
         * ```html
         * <igx-date-picker (onClose)="close($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.onClose = new EventEmitter();
        /**
         * An \@Output property that is fired when selection is made in the calendar.
         * ```typescript
         * public selection(event){
         *    alert("A date has been selected!");
         * }
         * ```
         * ```html
         * <igx-date-picker (onSelection)="selection($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.onSelection = new EventEmitter();
        this.destroy$ = new Subject();
        this._formatOptions = {
            day: 'numeric',
            month: 'short',
            weekday: 'short',
            year: 'numeric'
        };
        this._formatViews = {
            day: false,
            month: true,
            year: false
        };
        this._disabledDates = null;
        this._specialDates = null;
        this._onTouchedCallback = () => { };
        this._onChangeCallback = () => { };
    }
    /**
     * Returns the format options of the `IgxDatePickerComponent`.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     *    let formatOptions = this.datePicker.formatOptions;
     * }
     * ```
     * @return {?}
     */
    get formatOptions() {
        return this._formatOptions;
    }
    /**
     * Sets the format options of the `IgxDatePickerComponent`.
     * ```typescript
     * public Options;
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     *    this.Options = {
     *        day: "numeric",
     *        month: "long",
     *        weekday: "long",
     *        year: "numeric"
     *    }
     * this.datePicker.formatOptions = this.Options;
     * }
     * ```
     * @param {?} formatOptions
     * @return {?}
     */
    set formatOptions(formatOptions) {
        this._formatOptions = Object.assign(this._formatOptions, formatOptions);
    }
    /**
     * Returns the format views of the `IgxDatePickerComponent`.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     *    let formatViews = this.datePicker.formatViews;
     * }
     * ```
     * @return {?}
     */
    get formatViews() {
        return this._formatViews;
    }
    /**
     * Sets the format views of the `IgxDatePickerComponent`.
     * ```typescript
     * public Views;
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     *    this.Views = {day:false, month: false, year:false};
     *    this.datePicker.formatViews = this.Views;
     * }
     * ```
     * @param {?} formatViews
     * @return {?}
     */
    set formatViews(formatViews) {
        this._formatViews = Object.assign(this._formatViews, formatViews);
    }
    /**
     * Gets the disabled dates descriptors.
     * ```typescript
     * let disabledDates = this.datepicker.disabledDates;
     * ```
     * @return {?}
     */
    get disabledDates() {
        return this._disabledDates;
    }
    /**
     * Sets the disabled dates' descriptors.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     *    this.datePicker.disabledDates = [
     *      new DateRangeDescriptor(DateRangeType.Between, [new Date("2020-1-1"), new Date("2020-1-15")]),
     *      new DateRangeDescriptor(DateRangeType.Weekends)];
     * }
     * ```
     * @param {?} value
     * @return {?}
     */
    set disabledDates(value) {
        this._disabledDates = value;
    }
    /**
     * Gets the special dates descriptors.
     * ```typescript
     * let specialDates = this.datepicker.specialDates;
     * ```
     * @return {?}
     */
    get specialDates() {
        return this._specialDates;
    }
    /**
     * Sets the special dates' descriptors.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     *    this.datePicker.specialDates = [
     *      new DateRangeDescriptor(DateRangeType.Between, [new Date("2020-1-1"), new Date("2020-1-15")]),
     *      new DateRangeDescriptor(DateRangeType.Weekends)];
     * }
     * ```
     * @param {?} value
     * @return {?}
     */
    set specialDates(value) {
        this._specialDates = value;
    }
    /**
     * Returns the formatted date.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * public selection(event){
     *    let selectedDate = this.datePicker.displayData;
     *    alert(selectedDate);
     * }
     * ```
     * ```html
     * <igx-date-picker #MyDatePicker (onSelection)="selection()" todayButtonLabel="today"></igx-date-picker>
     * ```
     * @return {?}
     */
    get displayData() {
        if (this.value) {
            return this._customFormatChecker(this.formatter, this.value);
        }
        return '';
    }
    /**
     * @hidden
     * @return {?}
     */
    get calendar() {
        return this.calendarRef.instance;
    }
    /**
     * Method that sets the selected date.
     * ```typescript
     * public date = new Date();
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     *    this.datePicker.writeValue(this.date);
     * }
     * ```
     * \@memberOf {\@link IgxDatePickerComponent}
     * @param {?} value The date you want to select.
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) { this._onChangeCallback = fn; }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { this._onTouchedCallback = fn; }
    /**
     * @hidden
     * @return {?}
     */
    getEditElement() {
        return this.input.nativeElement;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        this.alert.onOpen.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._focusTheDialog());
        this.alert.toggleRef.onClosed.pipe(takeUntil(this.destroy$)).subscribe((ev) => this.handleDialogCloseAction());
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * Selects today's date from calendar and change the input field value, \@calendar.viewDate and \@calendar.value.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     * this.datePicker.triggerTodaySelection();
     * }
     * ```
     * \@memberOf {\@link IgxDatePickerComponent}
     * @return {?}
     */
    triggerTodaySelection() {
        const /** @type {?} */ today = new Date(Date.now());
        this.handleSelection(today);
    }
    /**
     * Change the calendar selection and calling this method will emit the \@calendar.onSelection event,
     * which will fire \@handleSelection method.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     * this.datePicker.selectDate(this.date);
     * }
     * ```
     * \@memberOf {\@link IgxDatePickerComponent}
     * @param {?} date passed date that has to be set to the calendar.
     * @return {?}
     */
    selectDate(date) {
        this.value = date;
        this.onSelection.emit(date);
        this._onChangeCallback(date);
    }
    /**
     * Deselects the calendar date.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     * this.datePicker.deselectDate();
     * }
     * ```
     * \@memberOf {\@link IgxDatePickerComponent}
     * @return {?}
     */
    deselectDate() {
        this.value = null;
        this._onChangeCallback(null);
    }
    /**
     * Open the dialog and update the calendar.
     *
     * @hidden
     * @return {?}
     */
    openDialog() {
        this.createCalendarRef();
        if (this.outlet) {
            const /** @type {?} */ overlaySettings = {
                outlet: this.outlet
            };
            this.alert.open(overlaySettings);
        }
        else {
            this.alert.open();
        }
        this._onTouchedCallback();
        this.onOpen.emit(this);
    }
    /**
     * @return {?}
     */
    createCalendarRef() {
        const /** @type {?} */ factory = this.resolver.resolveComponentFactory(IgxCalendarComponent);
        this.calendarRef = this.container.createComponent(factory);
        this.calendarRef.changeDetectorRef.detach();
        this.updateCalendarInstance();
        this.calendarRef.location.nativeElement.classList.add('igx-date-picker__date--opened');
        this.calendarRef.changeDetectorRef.reattach();
    }
    /**
     * Closes the dialog, after was clearing all calendar items from dom.
     *
     * @hidden
     * @return {?}
     */
    handleDialogCloseAction() {
        this.onClose.emit(this);
        this.calendarRef.destroy();
        if (this.input) {
            this.input.nativeElement.focus();
        }
    }
    /**
     * Evaluates when \@calendar.onSelection event was fired
     * and update the input value.
     *
     * @hidden
     * @param {?} date
     * @return {?}
     */
    handleSelection(date) {
        if (this.value !== null && this.value !== undefined) {
            date.setHours(this.value.getHours());
            date.setMinutes(this.value.getMinutes());
            date.setSeconds(this.value.getSeconds());
            date.setMilliseconds(this.value.getMilliseconds());
        }
        this.value = date;
        this.calendar.viewDate = date;
        this._onChangeCallback(date);
        this.alert.close();
        this.onSelection.emit(date);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSpaceClick(event) {
        this.openDialog();
        event.preventDefault();
    }
    /**
     * Gets the input group template.
     * ```typescript
     * let template = this.template();
     * ```
     * \@memberof IgxTimePickerComponent
     * @return {?}
     */
    get template() {
        if (this.datePickerTemplateDirective) {
            return this.datePickerTemplateDirective.template;
        }
        return this.defaultDatePickerTemplate;
    }
    /**
     * Gets the context passed to the input group template.
     * \@memberof IgxTimePickerComponent
     * @return {?}
     */
    get context() {
        return {
            value: this.value,
            displayData: this.displayData,
            openDialog: () => { this.openDialog(); }
        };
    }
    /**
     * @return {?}
     */
    updateCalendarInstance() {
        this.calendar.formatOptions = this._formatOptions;
        this.calendar.formatViews = this._formatViews;
        this.calendar.locale = this.locale;
        this.calendar.vertical = this.vertical;
        this.calendar.disabledDates = this.disabledDates;
        this.calendar.specialDates = this.specialDates;
        if (this.headerTemplate) {
            this.calendar.headerTemplate = this.headerTemplate;
        }
        if (this.subheaderTemplate) {
            this.calendar.subheaderTemplate = this.subheaderTemplate;
        }
        if (this.value) {
            this.calendar.value = this.value;
            this.calendar.viewDate = this.value;
        }
        this.calendar.weekStart = this.weekStart;
        this.calendar.onSelection.pipe(takeUntil(this.destroy$)).subscribe((ev) => this.handleSelection(ev));
    }
    /**
     * @return {?}
     */
    _focusTheDialog() {
        requestAnimationFrame(() => this.alert.toggleRef.element.focus());
    }
    /**
     * @param {?} value
     * @param {?=} locale
     * @return {?}
     */
    _setLocaleToDate(value, locale = Constants.DEFAULT_LOCALE_DATE) {
        return value.toLocaleDateString(locale);
    }
    /**
     * Apply custom user formatter upon date.
     * @param {?} formatter custom formatter function.
     * @param {?} date passed date
     * @return {?}
     */
    _customFormatChecker(formatter, date) {
        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date, this.locale);
    }
};
IgxDatePickerComponent.decorators = [
    { type: Component, args: [{
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxDatePickerComponent_1, multi: true }],
                // tslint:disable-next-line:component-selector
                selector: 'igx-datePicker, igx-date-picker',
                styles: [':host {display: block;}'],
                template: `<div [ngClass]="{'igx-date-picker': !vertical, 'igx-date-picker--vertical': vertical}">
    <ng-template #defaultDatePickerTemplate>
        <igx-input-group (click)="openDialog()">
            <igx-prefix>
                <igx-icon>today</igx-icon>
            </igx-prefix>
            <label *ngIf="labelVisibility" igxLabel>{{label}}</label>
            <input class="igx-date-picker__input-date" igxInput [value]="displayData" [disabled]="disabled" readonly />
        </igx-input-group>
    </ng-template>
    <ng-container *ngTemplateOutlet="template; context: context"></ng-container>
    <igx-dialog class="igx-date-picker__dialog-popup" closeOnOutsideSelect="true" [leftButtonLabel]="cancelButtonLabel" (onLeftButtonSelect)="alert.close()"
        [rightButtonLabel]="todayButtonLabel" (onRightButtonSelect)="triggerTodaySelection()">
        <ng-container #container></ng-container>
    </igx-dialog>
</div>
`
            },] },
];
/** @nocollapse */
IgxDatePickerComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver, },
];
IgxDatePickerComponent.propDecorators = {
    "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
    "formatter": [{ type: Input },],
    "disabled": [{ type: Input },],
    "value": [{ type: Input },],
    "label": [{ type: Input },],
    "labelVisibility": [{ type: Input },],
    "locale": [{ type: Input },],
    "weekStart": [{ type: Input },],
    "formatOptions": [{ type: Input },],
    "formatViews": [{ type: Input },],
    "vertical": [{ type: Input },],
    "todayButtonLabel": [{ type: Input },],
    "cancelButtonLabel": [{ type: Input },],
    "onOpen": [{ type: Output },],
    "onClose": [{ type: Output },],
    "onSelection": [{ type: Output },],
    "defaultDatePickerTemplate": [{ type: ViewChild, args: ['defaultDatePickerTemplate', { read: TemplateRef },] },],
    "datePickerTemplateDirective": [{ type: ContentChild, args: [IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective },] },],
    "headerTemplate": [{ type: ContentChild, args: [IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective },] },],
    "subheaderTemplate": [{ type: ContentChild, args: [IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective },] },],
    "container": [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] },],
    "alert": [{ type: ViewChild, args: [IgxDialogComponent,] },],
    "outlet": [{ type: Input },],
    "input": [{ type: ViewChild, args: [IgxInputDirective,] },],
    "onSpaceClick": [{ type: HostListener, args: ['keydown.spacebar', ['$event'],] }, { type: HostListener, args: ['keydown.space', ['$event'],] },],
};
/**
 * **Ignite UI for Angular Date Picker** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)
 *
 * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.
 *
 * Example:
 * ```html
 * <igx-date-picker [(ngModel)]="selectedDate"></igx-date-picker>
 * ```
 */
IgxDatePickerComponent = IgxDatePickerComponent_1 = tslib_1.__decorate([
    DeprecateClass('\'igx-datePicker\' selector is deprecated. Use \'igx-date-picker\' selector instead.'),
    tslib_1.__metadata("design:paramtypes", [ComponentFactoryResolver])
], IgxDatePickerComponent);
export { IgxDatePickerComponent };
function IgxDatePickerComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDatePickerComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDatePickerComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxDatePickerComponent.propDecorators;
    /**
     * An \@Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
     * ```html
     * <igx-date-picker [id]="'igx-date-picker-3'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.id;
    /**
     * An \@Input property that applies custom formatter on the selected or passed date.
     * ```typescript
     * public date: Date = new Date();
     * private dayFormatter = new Intl.DateTimeFormat("en", { weekday: "long" });
     * private monthFormatter = new Intl.DateTimeFormat("en", { month: "long" });
     * public formatter = (date: Date) => { return `You selected
     *                     ${this.dayFormatter.format(date)},
     *                     ${date.getDate()} ${this.monthFormatter.format(date)},
     *                     ${date.getFullYear()}`;
     * }
     * ```
     * ```html
     * <igx-date-picker [value]="date" [formatter]="formatter"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.formatter;
    /**
     * An \@Input property that disables the `IgxDatePickerComponent`.
     * ```html
     * <igx-date-picker [disabled]="'true'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.disabled;
    /**
     * An \@Input property that sets the selected date.
     * ```typescript
     * public date: Date = new Date();
     * ```
     * ```html
     * <igx-date-picker [value]="date"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.value;
    /**
     * An \@Input property that sets the `IgxDatePickerComponent` label.
     * The default label is 'Date'.
     * ```html
     * <igx-date-picker [label]="Calendar"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.label;
    /**
     * An \@Input property that sets the `IgxDatePickerComponent` label visibility.
     * By default the visibility is set to true.
     * <igx-date-picker [labelVisibility]="false"></igx-date-picker>
     * @type {?}
     */
    IgxDatePickerComponent.prototype.labelVisibility;
    /**
     * An \@Input property that sets locales. Default locale is en.
     * ```html
     * <igx-date-picker locale="ja-JP" [value]="date"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.locale;
    /**
     * An \@Input property that sets on which day the week starts.
     * ```html
     * <igx-date-picker [weekStart]="WEEKDAYS.FRIDAY" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.weekStart;
    /**
     * An \@Input proeprty that sets the orientation of the `IgxDatePickerComponent` header.
     * ```html
     * <igx-date-picker [vertical]="'true'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.vertical;
    /**
     * An \@Input property that renders today button with custom label.
     * ```html
     * <igx-date-picker cancelButtonLabel="cancel" todayButtonLabel="Tomorrow"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.todayButtonLabel;
    /**
     * An \@Input property that renders cancel button with custom label.
     * ```html
     * <igx-date-picker cancelButtonLabel="Close" todayButtonLabel="Today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.cancelButtonLabel;
    /**
     * An event that is emitted when the `IgxDatePickerComponent` is opened.
     * ```typescript
     * public open(event){
     *    alert("The date-picker has been opened!");
     * }
     * ```
     * ```html
     * <igx-date-picker (onOpen)="open($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.onOpen;
    /**
     * "An event that is emitted when the `IgxDatePickerComponent` is closed.
     * ```typescript
     * public close(event){
     *    alert("The date-picker has been closed!");
     * }
     * ```
     * ```html
     * <igx-date-picker (onClose)="close($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.onClose;
    /**
     * An \@Output property that is fired when selection is made in the calendar.
     * ```typescript
     * public selection(event){
     *    alert("A date has been selected!");
     * }
     * ```
     * ```html
     * <igx-date-picker (onSelection)="selection($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.onSelection;
    /** @type {?} */
    IgxDatePickerComponent.prototype.defaultDatePickerTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxDatePickerComponent.prototype.datePickerTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxDatePickerComponent.prototype.headerTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxDatePickerComponent.prototype.subheaderTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxDatePickerComponent.prototype.container;
    /**
     * @hidden
     * @type {?}
     */
    IgxDatePickerComponent.prototype.alert;
    /**
     * @hidden
     * @type {?}
     */
    IgxDatePickerComponent.prototype.calendarRef;
    /**
     * @hidden
     * @type {?}
     */
    IgxDatePickerComponent.prototype.outlet;
    /** @type {?} */
    IgxDatePickerComponent.prototype.destroy$;
    /** @type {?} */
    IgxDatePickerComponent.prototype._formatOptions;
    /** @type {?} */
    IgxDatePickerComponent.prototype._formatViews;
    /** @type {?} */
    IgxDatePickerComponent.prototype._disabledDates;
    /** @type {?} */
    IgxDatePickerComponent.prototype._specialDates;
    /** @type {?} */
    IgxDatePickerComponent.prototype.input;
    /** @type {?} */
    IgxDatePickerComponent.prototype._onTouchedCallback;
    /** @type {?} */
    IgxDatePickerComponent.prototype._onChangeCallback;
    /** @type {?} */
    IgxDatePickerComponent.prototype.resolver;
}
class Constants {
}
Constants.DEFAULT_LOCALE_DATE = 'en';
function Constants_tsickle_Closure_declarations() {
    /** @type {?} */
    Constants.DEFAULT_LOCALE_DATE;
}
/**
 * The IgxDatePickerModule provides the {\@link IgxDatePickerComponent} inside your application.
 */
export class IgxDatePickerModule {
}
IgxDatePickerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxDatePickerComponent, IgxDatePickerTemplateDirective],
                entryComponents: [IgxCalendarComponent],
                exports: [IgxDatePickerComponent, IgxDatePickerTemplateDirective],
                imports: [CommonModule, IgxIconModule, IgxInputGroupModule, IgxDialogModule, IgxCalendarModule]
            },] },
];
function IgxDatePickerModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDatePickerModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDatePickerModule.ctorParameters;
}
var IgxDatePickerComponent_1;

//# sourceMappingURL=data:application/json;base64,