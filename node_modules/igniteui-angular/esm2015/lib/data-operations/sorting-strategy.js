/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { cloneArray } from '../core/utils';
import { SortingDirection } from './sorting-expression.interface';
/**
 * @record
 */
export function ISortingStrategy() { }
function ISortingStrategy_tsickle_Closure_declarations() {
    /** @type {?} */
    ISortingStrategy.prototype.sort;
    /** @type {?} */
    ISortingStrategy.prototype.groupBy;
    /** @type {?} */
    ISortingStrategy.prototype.compareValues;
}
/**
 * @record
 */
export function IGroupByResult() { }
function IGroupByResult_tsickle_Closure_declarations() {
    /** @type {?} */
    IGroupByResult.prototype.data;
    /** @type {?} */
    IGroupByResult.prototype.metadata;
}
export class SortingStrategy {
    /**
     * @param {?} data
     * @param {?} expressions
     * @return {?}
     */
    sort(data, expressions) {
        return this.sortDataRecursive(data, expressions);
    }
    /**
     * @param {?} data
     * @param {?} expressions
     * @return {?}
     */
    groupBy(data, expressions) {
        const /** @type {?} */ metadata = [];
        const /** @type {?} */ grouping = this.groupDataRecursive(data, expressions, 0, null, metadata);
        return {
            data: grouping,
            metadata: metadata
        };
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    compareValues(a, b) {
        const /** @type {?} */ an = (a === null || a === undefined);
        const /** @type {?} */ bn = (b === null || b === undefined);
        if (an) {
            if (bn) {
                return 0;
            }
            return -1;
        }
        else if (bn) {
            return 1;
        }
        return a > b ? 1 : a < b ? -1 : 0;
    }
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @param {?} key
     * @param {?} reverse
     * @param {?} ignoreCase
     * @param {?} strategy
     * @return {?}
     */
    compareObjects(obj1, obj2, key, reverse, ignoreCase, strategy) {
        let /** @type {?} */ a = this.getFieldValue(obj1, key);
        let /** @type {?} */ b = this.getFieldValue(obj2, key);
        if (ignoreCase) {
            a = a && a.toLowerCase ? a.toLowerCase() : a;
            b = b && b.toLowerCase ? b.toLowerCase() : b;
        }
        if (strategy) {
            return reverse * strategy.compareValues(a, b);
        }
        else {
            return reverse * this.compareValues(a, b);
        }
    }
    /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    getFieldValue(obj, key) {
        return obj[key];
    }
    /**
     * @template T
     * @param {?} data
     * @param {?=} compareFn
     * @return {?}
     */
    arraySort(data, compareFn) {
        return data.sort(compareFn);
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} index
     * @param {?} expression
     * @return {?}
     */
    groupedRecordsByExpression(data, index, expression) {
        let /** @type {?} */ i;
        let /** @type {?} */ groupval;
        const /** @type {?} */ res = [];
        const /** @type {?} */ key = expression.fieldName;
        const /** @type {?} */ len = data.length;
        res.push(data[index]);
        groupval = this.getFieldValue(data[index], key);
        index++;
        for (i = index; i < len; i++) {
            if (this.compareValues(this.getFieldValue(data[i], key), groupval) === 0) {
                res.push(data[i]);
            }
            else {
                break;
            }
        }
        return res;
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} expression
     * @return {?}
     */
    sortByFieldExpression(data, expression) {
        const /** @type {?} */ key = expression.fieldName;
        const /** @type {?} */ firstRow = data[0];
        const /** @type {?} */ firstRowValue = firstRow ? this.getFieldValue(firstRow, key) : undefined;
        const /** @type {?} */ ignoreCase = expression.ignoreCase ?
            firstRow && (typeof firstRowValue === 'string' ||
                firstRowValue === null ||
                firstRowValue === undefined) :
            false;
        const /** @type {?} */ reverse = (expression.dir === SortingDirection.Desc ? -1 : 1);
        const /** @type {?} */ cmpFunc = (obj1, obj2) => {
            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, expression.strategy);
        };
        return this.arraySort(data, cmpFunc);
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} expressions
     * @param {?=} expressionIndex
     * @return {?}
     */
    sortDataRecursive(data, expressions, expressionIndex = 0) {
        let /** @type {?} */ i;
        let /** @type {?} */ j;
        let /** @type {?} */ expr;
        let /** @type {?} */ gbData;
        let /** @type {?} */ gbDataLen;
        const /** @type {?} */ exprsLen = expressions.length;
        const /** @type {?} */ dataLen = data.length;
        expressionIndex = expressionIndex || 0;
        if (expressionIndex >= exprsLen || dataLen <= 1) {
            return data;
        }
        expr = expressions[expressionIndex];
        data = this.sortByFieldExpression(data, expr);
        if (expressionIndex === exprsLen - 1) {
            return data;
        }
        // in case of multiple sorting
        for (i = 0; i < dataLen; i++) {
            gbData = this.groupedRecordsByExpression(data, i, expr);
            gbDataLen = gbData.length;
            if (gbDataLen > 1) {
                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);
            }
            for (j = 0; j < gbDataLen; j++) {
                data[i + j] = gbData[j];
            }
            i += gbDataLen - 1;
        }
        return data;
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} expressions
     * @param {?} level
     * @param {?} parent
     * @param {?} metadata
     * @return {?}
     */
    groupDataRecursive(data, expressions, level, parent, metadata) {
        let /** @type {?} */ i = 0;
        let /** @type {?} */ result = [];
        while (i < data.length) {
            const /** @type {?} */ group = this.groupedRecordsByExpression(data, i, expressions[level]);
            const /** @type {?} */ groupRow = {
                expression: expressions[level],
                level,
                records: cloneArray(group),
                value: group[0][expressions[level].fieldName],
                groupParent: parent
            };
            if (level < expressions.length - 1) {
                result = result.concat(this.groupDataRecursive(group, expressions, level + 1, groupRow, metadata));
            }
            else {
                for (const /** @type {?} */ groupItem of group) {
                    metadata.push(groupRow);
                    result.push(groupItem);
                }
            }
            i += group.length;
        }
        return result;
    }
}
export class TreeGridSortingStrategy extends SortingStrategy {
    /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    getFieldValue(obj, key) {
        return obj['data'][key];
    }
}

//# sourceMappingURL=data:application/json;base64,