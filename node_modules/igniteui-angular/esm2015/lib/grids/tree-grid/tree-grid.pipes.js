/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { cloneArray, cloneHierarchicalArray } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { GridBaseAPIService } from '../api.service';
/**
 * @hidden
 */
export class IgxTreeGridHierarchizingPipe {
    /**
     * @param {?} gridAPI
     */
    constructor(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} collection
     * @param {?} primaryKey
     * @param {?} foreignKey
     * @param {?} childDataKey
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    transform(collection, primaryKey, foreignKey, childDataKey, id, pipeTrigger) {
        const /** @type {?} */ grid = this.gridAPI.get(id);
        let /** @type {?} */ hierarchicalRecords = [];
        const /** @type {?} */ treeGridRecordsMap = new Map();
        if (primaryKey && foreignKey) {
            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap);
            grid.flatData = grid.data;
        }
        else if (childDataKey) {
            const /** @type {?} */ flatData = [];
            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined, flatData, 0, treeGridRecordsMap);
            grid.flatData = flatData;
        }
        grid.records = treeGridRecordsMap;
        grid.rootRecords = hierarchicalRecords;
        return hierarchicalRecords;
    }
    /**
     * @param {?} primaryKey
     * @param {?} rowData
     * @return {?}
     */
    getRowID(primaryKey, rowData) {
        return primaryKey ? rowData[primaryKey] : rowData;
    }
    /**
     * @param {?} id
     * @param {?} collection
     * @param {?} primaryKey
     * @param {?} foreignKey
     * @param {?} map
     * @return {?}
     */
    hierarchizeFlatData(id, collection, primaryKey, foreignKey, map) {
        const /** @type {?} */ result = [];
        const /** @type {?} */ missingParentRecords = [];
        collection.forEach(row => {
            const /** @type {?} */ record = {
                rowID: this.getRowID(primaryKey, row),
                data: row,
                children: [],
                path: []
            };
            const /** @type {?} */ parent = map.get(row[foreignKey]);
            if (parent) {
                record.parent = parent;
                if (parent) {
                    record.path.push(...parent.path);
                    record.path.push(parent.rowID);
                }
                parent.children.push(record);
            }
            else {
                missingParentRecords.push(record);
            }
            map.set(row[primaryKey], record);
        });
        missingParentRecords.forEach(record => {
            const /** @type {?} */ parent = map.get(record.data[foreignKey]);
            if (parent) {
                record.parent = parent;
                parent.children.push(record);
            }
            else {
                result.push(record);
            }
        });
        this.setIndentationLevels(id, result, 0);
        return result;
    }
    /**
     * @param {?} id
     * @param {?} collection
     * @param {?} indentationLevel
     * @return {?}
     */
    setIndentationLevels(id, collection, indentationLevel) {
        for (let /** @type {?} */ i = 0; i < collection.length; i++) {
            const /** @type {?} */ record = collection[i];
            record.level = indentationLevel;
            record.expanded = this.gridAPI.get_row_expansion_state(id, record.rowID, record.level);
            if (record.children && record.children.length > 0) {
                this.setIndentationLevels(id, record.children, indentationLevel + 1);
            }
        }
    }
    /**
     * @param {?} id
     * @param {?} collection
     * @param {?} primaryKey
     * @param {?} childDataKey
     * @param {?} parent
     * @param {?} flatData
     * @param {?} indentationLevel
     * @param {?} map
     * @return {?}
     */
    hierarchizeRecursive(id, collection, primaryKey, childDataKey, parent, flatData, indentationLevel, map) {
        const /** @type {?} */ result = [];
        for (let /** @type {?} */ i = 0; i < collection.length; i++) {
            const /** @type {?} */ item = collection[i];
            const /** @type {?} */ record = {
                rowID: this.getRowID(primaryKey, item),
                data: item,
                parent: parent,
                level: indentationLevel,
                path: []
            };
            if (parent) {
                record.path.push(...parent.path);
                record.path.push(parent.rowID);
            }
            record.expanded = this.gridAPI.get_row_expansion_state(id, record.rowID, record.level);
            flatData.push(item);
            map.set(record.rowID, record);
            record.children = item[childDataKey] ?
                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :
                undefined;
            result.push(record);
        }
        return result;
    }
}
IgxTreeGridHierarchizingPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridHierarchizing',
                pure: true
            },] },
];
/** @nocollapse */
IgxTreeGridHierarchizingPipe.ctorParameters = () => [
    { type: GridBaseAPIService, },
];
function IgxTreeGridHierarchizingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridHierarchizingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridHierarchizingPipe.ctorParameters;
    /** @type {?} */
    IgxTreeGridHierarchizingPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
export class IgxTreeGridFlatteningPipe {
    /**
     * @param {?} gridAPI
     */
    constructor(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} collection
     * @param {?} id
     * @param {?} expandedLevels
     * @param {?} expandedStates
     * @param {?} pipeTrigger
     * @return {?}
     */
    transform(collection, id, expandedLevels, expandedStates, pipeTrigger) {
        const /** @type {?} */ grid = this.gridAPI.get(id);
        const /** @type {?} */ data = [];
        grid.processedRootRecords = collection;
        grid.processedRecords = new Map();
        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);
        return data;
    }
    /**
     * @param {?} collection
     * @param {?=} data
     * @param {?=} expandedLevels
     * @param {?=} expandedStates
     * @param {?=} gridID
     * @param {?=} parentExpanded
     * @return {?}
     */
    getFlatDataRecursive(collection, data = [], expandedLevels, expandedStates, gridID, parentExpanded) {
        if (!collection || !collection.length) {
            return;
        }
        for (let /** @type {?} */ i = 0; i < collection.length; i++) {
            const /** @type {?} */ hierarchicalRecord = collection[i];
            if (parentExpanded) {
                data.push(hierarchicalRecord);
            }
            const /** @type {?} */ grid = this.gridAPI.get(gridID);
            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(gridID, hierarchicalRecord.rowID, hierarchicalRecord.level);
            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);
            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);
            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels, expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);
        }
    }
    /**
     * @param {?} grid
     * @param {?} record
     * @return {?}
     */
    updateNonProcessedRecordExpansion(grid, record) {
        const /** @type {?} */ rec = grid.records.get(record.rowID);
        rec.expanded = record.expanded;
    }
}
IgxTreeGridFlatteningPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridFlattening',
                pure: true
            },] },
];
/** @nocollapse */
IgxTreeGridFlatteningPipe.ctorParameters = () => [
    { type: GridBaseAPIService, },
];
function IgxTreeGridFlatteningPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridFlatteningPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridFlatteningPipe.ctorParameters;
    /** @type {?} */
    IgxTreeGridFlatteningPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
export class IgxTreeGridSortingPipe {
    /**
     * @param {?} gridAPI
     */
    constructor(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} hierarchicalData
     * @param {?} expressions
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    transform(hierarchicalData, expressions, id, pipeTrigger) {
        const /** @type {?} */ state = { expressions: [] };
        const /** @type {?} */ grid = this.gridAPI.get(id);
        state.expressions = grid.sortingExpressions;
        let /** @type {?} */ result;
        if (!state.expressions.length) {
            result = hierarchicalData;
        }
        else {
            result = DataUtil.hierarchicalSort(hierarchicalData, state, undefined);
        }
        return result;
    }
}
IgxTreeGridSortingPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridSorting',
                pure: true
            },] },
];
/** @nocollapse */
IgxTreeGridSortingPipe.ctorParameters = () => [
    { type: GridBaseAPIService, },
];
function IgxTreeGridSortingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridSortingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridSortingPipe.ctorParameters;
    /** @type {?} */
    IgxTreeGridSortingPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
export class IgxTreeGridPagingPipe {
    /**
     * @param {?} gridAPI
     */
    constructor(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} collection
     * @param {?=} page
     * @param {?=} perPage
     * @param {?=} id
     * @param {?=} pipeTrigger
     * @return {?}
     */
    transform(collection, page = 0, perPage = 15, id, pipeTrigger) {
        if (!this.gridAPI.get(id).paging) {
            return collection;
        }
        const /** @type {?} */ state = {
            index: page,
            recordsPerPage: perPage
        };
        const /** @type {?} */ result = DataUtil.page(cloneArray(collection), state);
        this.gridAPI.get(id).pagingState = state;
        return result;
    }
}
IgxTreeGridPagingPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridPaging',
                pure: true
            },] },
];
/** @nocollapse */
IgxTreeGridPagingPipe.ctorParameters = () => [
    { type: GridBaseAPIService, },
];
function IgxTreeGridPagingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridPagingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridPagingPipe.ctorParameters;
    /** @type {?} */
    IgxTreeGridPagingPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
export class IgxTreeGridTransactionPipe {
    /**
     * @param {?} gridAPI
     */
    constructor(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} collection
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    transform(collection, id, pipeTrigger) {
        const /** @type {?} */ grid = this.gridAPI.get(id);
        if (collection && grid.transactions.enabled) {
            const /** @type {?} */ primaryKey = grid.primaryKey;
            if (!primaryKey) {
                return collection;
            }
            const /** @type {?} */ foreignKey = grid.foreignKey;
            const /** @type {?} */ childDataKey = grid.childDataKey;
            if (foreignKey) {
                return DataUtil.mergeTransactions(cloneArray(collection), grid.transactions.getAggregatedChanges(true), grid.primaryKey);
            }
            else if (childDataKey) {
                return DataUtil.mergeHierarchicalTransactions(cloneHierarchicalArray(collection, childDataKey), grid.transactions.getAggregatedChanges(true), childDataKey, grid.primaryKey);
            }
        }
        return collection;
    }
}
IgxTreeGridTransactionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridTransaction',
                pure: true
            },] },
];
/** @nocollapse */
IgxTreeGridTransactionPipe.ctorParameters = () => [
    { type: GridBaseAPIService, },
];
function IgxTreeGridTransactionPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridTransactionPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridTransactionPipe.ctorParameters;
    /** @type {?} */
    IgxTreeGridTransactionPipe.prototype.gridAPI;
}

//# sourceMappingURL=data:application/json;base64,