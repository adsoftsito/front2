/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Input, ElementRef, NgZone, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
/**
 * @hidden
 */
var IgxScrollInertiaDirective = /** @class */ (function () {
    function IgxScrollInertiaDirective(element, _zone) {
        this.element = element;
        this._zone = _zone;
        this.wheelStep = 50;
        this.inertiaStep = 1.5;
        this.swipeToleranceX = 20;
        this.inertiaDeltaY = 3;
        this.inertiaDeltaX = 2;
        this.inertiaDuration = 0.5;
        this._savedSpeedsX = [];
        this.setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?
            'msSetPointerCapture' :
            'setPointerCapture';
        this.releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?
            'msReleasePointerCapture' :
            'releasePointerCapture';
    }
    /**
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._zone.runOutsideAngular(function () {
            var /** @type {?} */ targetElem = _this.element.nativeElement.parentElement || _this.element.nativeElement.parentNode;
            targetElem.addEventListener('wheel', function (evt) { _this.onWheel(evt); });
            targetElem.addEventListener('touchstart', function (evt) { _this.onTouchStart(evt); });
            targetElem.addEventListener('touchmove', function (evt) { _this.onTouchMove(evt); });
            targetElem.addEventListener('touchend', function (evt) { _this.onTouchEnd(evt); });
            targetElem.addEventListener('pointerdown', function (evt) { _this.onPointerDown(evt); });
            targetElem.addEventListener('pointerup', function (evt) { _this.onPointerUp(evt); });
            targetElem.addEventListener('MSGestureStart', function (evt) { _this.onMSGestureStart(evt); });
            targetElem.addEventListener('MSGestureChange', function (evt) { _this.onMSGestureChange(evt); });
        });
    };
    /**
    * @hidden
    * Function that is called when scrolling with the mouse wheel or using touchpad
    */
    /**
     * @hidden
     * Function that is called when scrolling with the mouse wheel or using touchpad
     * @param {?} evt
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype.onWheel = /**
     * @hidden
     * Function that is called when scrolling with the mouse wheel or using touchpad
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        // if no scrollbar return
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        var /** @type {?} */ scrollDeltaX;
        var /** @type {?} */ scrollDeltaY;
        var /** @type {?} */ scrollStep = this.wheelStep;
        var /** @type {?} */ minWheelStep = 1 / this.wheelStep;
        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;
        if (evt.wheelDeltaX) {
            /* Option supported on Chrome, Safari, Opera.
                        /* 120 is default for mousewheel on these browsers. Other values are for trackpads */
            scrollDeltaX = -evt.wheelDeltaX / 120;
            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {
                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;
            }
        }
        else if (evt.deltaX) {
            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */
            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);
        }
        /** Get delta for the Y axis*/
        if (evt.wheelDeltaY) {
            /* Option supported on Chrome, Safari, Opera.
                        /* 120 is default for mousewheel on these browsers. Other values are for trackpads */
            scrollDeltaY = -evt.wheelDeltaY / 120;
            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {
                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;
            }
        }
        else if (evt.deltaY) {
            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */
            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);
        }
        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {
            this._scrollToX(this._startX + scrollDeltaX * scrollStep);
            var /** @type {?} */ curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;
            var /** @type {?} */ maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);
            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {
                // Prevent navigating through pages when scrolling on Mac
                evt.preventDefault();
            }
        }
        else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {
            this._scrollToY(this._startY + scrollDeltaY * scrollStep);
            var /** @type {?} */ curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;
            var /** @type {?} */ maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -
                this.IgxScrollInertiaScrollContainer.offsetHeight;
            if (0 < curScrollTop && curScrollTop < maxScrollTop) {
                evt.preventDefault();
            }
        }
    };
    /**
     * @hidden
     * Function that is called the first moment we start interacting with the content on a touch device
     */
    /**
     * @hidden
     * Function that is called the first moment we start interacting with the content on a touch device
     * @param {?} event
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype.onTouchStart = /**
     * @hidden
     * Function that is called the first moment we start interacting with the content on a touch device
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {
            return false;
        }
        // stops any current ongoing inertia
        cancelAnimationFrame(this._touchInertiaAnimID);
        var /** @type {?} */ touch = event.touches[0];
        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;
        this._touchStartX = touch.pageX;
        this._touchStartY = touch.pageY;
        this._lastTouchEnd = new Date().getTime();
        this._lastTouchX = touch.pageX;
        this._lastTouchY = touch.pageY;
        this._savedSpeedsX = [];
        this._savedSpeedsY = [];
        // Vars regarding swipe offset
        this._totalMovedX = 0;
        this._offsetRecorded = false;
        this._offsetDirection = 0;
        this._touchPrevented = false;
    };
    /**
     * @hidden
     * Function that is called when we need to scroll the content based on touch interactions
     */
    /**
     * @hidden
     * Function that is called when we need to scroll the content based on touch interactions
     * @param {?} event
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype.onTouchMove = /**
     * @hidden
     * Function that is called when we need to scroll the content based on touch interactions
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (typeof MSGesture === 'function') {
            this._touchPrevented = false;
            return false;
        }
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        var /** @type {?} */ touch = event.touches[0];
        var /** @type {?} */ destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);
        var /** @type {?} */ destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);
        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */
        /* **********************************************************/
        var /** @type {?} */ timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;
        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {
            var /** @type {?} */ speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;
            var /** @type {?} */ speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;
            // Save the last 5 speeds between two touchmoves on X axis
            if (this._savedSpeedsX.length < 5) {
                this._savedSpeedsX.push(speedX);
            }
            else {
                this._savedSpeedsX.shift();
                this._savedSpeedsX.push(speedX);
            }
            // Save the last 5 speeds between two touchmoves on Y axis
            if (this._savedSpeedsY.length < 5) {
                this._savedSpeedsY.push(speedY);
            }
            else {
                this._savedSpeedsY.shift();
                this._savedSpeedsY.push(speedY);
            }
        }
        this._lastTouchEnd = new Date().getTime();
        this._lastMovedX = this._lastTouchX - touch.pageX;
        this._lastMovedY = this._lastTouchY - touch.pageY;
        this._lastTouchX = touch.pageX;
        this._lastTouchY = touch.pageY;
        this._totalMovedX += this._lastMovedX;
        var /** @type {?} */ scrolledXY; // Object: {x, y}
        /*	Do not scroll using touch untill out of the swipeToleranceX bounds */
        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {
            scrolledXY = this._scrollTo(this._startX, destY);
        }
        else {
            /*	Record the direction the first time we are out of the swipeToleranceX bounds.
                        *	That way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */
            if (!this._offsetRecorded) {
                this._offsetDirection = Math.sign(destX - this._startX);
                this._offsetRecorded = true;
            }
            /*	Scroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and
                        don't change it after that ever until touchend and again touchstart */
            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);
        }
        if (scrolledXY.x === 0 && scrolledXY.y === 0) {
            this._touchPrevented = true;
        }
        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow
        if (!this._touchPrevented) {
            event.preventDefault();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype.onTouchEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (typeof MSGesture === 'function') {
            return;
        }
        var /** @type {?} */ speedX = 0;
        var /** @type {?} */ speedY = 0;
        // savedSpeedsX and savedSpeedsY have same length
        for (var /** @type {?} */ i = 0; i < this._savedSpeedsX.length; i++) {
            speedX += this._savedSpeedsX[i];
            speedY += this._savedSpeedsY[i];
        }
        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;
        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;
        // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia
        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&
            (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {
            this._inertiaInit(speedX, speedY);
        }
    };
    /**
     * @hidden
     * Function that is called when we need to detect touch starting on a touch device on IE/Edge
     */
    /**
     * @hidden
     * Function that is called when we need to detect touch starting on a touch device on IE/Edge
     * @param {?} event
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype.onPointerDown = /**
     * @hidden
     * Function that is called when we need to detect touch starting on a touch device on IE/Edge
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||
            typeof MSGesture !== 'function') {
            return true;
        }
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        // setPointerCaptureFName is the name of the function that is supported
        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);
        // create gestureObject only one time to prevent overlapping during intertia
        if (!this._gestureObject) {
            this._gestureObject = new MSGesture();
            this._gestureObject.target = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;
        }
        this._gestureObject.addPointer(this._pointer);
    };
    /**
     * @hidden
     * Function that is called when we need to detect touch ending on a touch device on IE/Edge
     */
    /**
     * @hidden
     * Function that is called when we need to detect touch ending on a touch device on IE/Edge
     * @param {?} event
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype.onPointerUp = /**
     * @hidden
     * Function that is called when we need to detect touch ending on a touch device on IE/Edge
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this._pointer) {
            return true;
        }
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        /* releasePointerCaptureFName is the name of the function that is supported */
        event.target[this.releasePointerCaptureFName](this._pointer);
        delete this._pointer;
    };
    /**
     * @hidden
     *  Function that is called when a gesture begins on IE/Edge
     */
    /**
     * @hidden
     *  Function that is called when a gesture begins on IE/Edge
     * @param {?} event
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype.onMSGestureStart = /**
     * @hidden
     *  Function that is called when a gesture begins on IE/Edge
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;
        this._touchStartX = event.screenX;
        this._touchStartY = event.screenY;
        // Vars regarding swipe offset
        this._totalMovedX = 0;
        this._offsetRecorded = false;
        this._offsetDirection = 0;
        return false;
    };
    /**
     * @hidden
     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge
     */
    /**
     * @hidden
     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge
     * @param {?} event
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype.onMSGestureChange = /**
     * @hidden
     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.IgxScrollInertiaScrollContainer) {
            return;
        }
        var /** @type {?} */ touchPos = event, /** @type {?} */
        destX = this._startX + this._touchStartX - touchPos.screenX, /** @type {?} */
        destY = this._startY + this._touchStartY - touchPos.screenY;
        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */
        this._totalMovedX = this._touchStartX - touchPos.screenX;
        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {
            /* Do not scroll horizontally yet while in the tolerance range */
            this._scrollToY(destY);
        }
        else {
            if (!this._offsetRecorded) {
                this._offsetDirection = Math.sign(destX - this._startX);
                this._offsetRecorded = true;
            }
            /* Once the tolerance is exceeded it can be scrolled horizontally */
            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);
        }
        return false;
    };
    /**
     * @param {?} target
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype.calcAxisCoords = /**
     * @param {?} target
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    function (target, min, max) {
        if (target === undefined || target < min) {
            target = min;
        }
        else if (target > max) {
            target = max;
        }
        return target;
    };
    /**
     * @param {?} destX
     * @param {?} destY
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype._scrollTo = /**
     * @param {?} destX
     * @param {?} destY
     * @return {?}
     */
    function (destX, destY) {
        var /** @type {?} */ curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        var /** @type {?} */ curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;
        // TODO Trigger scrolling event?
        var /** @type {?} */ scrolledX = this._scrollToX(destX);
        var /** @type {?} */ scrolledY = this._scrollToY(destY);
        return { x: scrolledX, y: scrolledY };
    };
    /**
     * @param {?} dest
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype._scrollToX = /**
     * @param {?} dest
     * @return {?}
     */
    function (dest) {
        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;
    };
    /**
     * @param {?} dest
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype._scrollToY = /**
     * @param {?} dest
     * @return {?}
     */
    function (dest) {
        this.IgxScrollInertiaScrollContainer.scrollTop = dest;
    };
    /**
     * @param {?} speedX
     * @param {?} speedY
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype._inertiaInit = /**
     * @param {?} speedX
     * @param {?} speedY
     * @return {?}
     */
    function (speedX, speedY) {
        var _this = this;
        var /** @type {?} */ stepModifer = this.inertiaStep, /** @type {?} */
        inertiaDuration = this.inertiaDuration;
        var /** @type {?} */ x = 0;
        this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;
        this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;
        // Sets timeout until executing next movement iteration of the inertia
        var /** @type {?} */ inertiaStep = function () {
            if (x > 6) {
                cancelAnimationFrame(_this._touchInertiaAnimID);
                return;
            }
            if (Math.abs(speedX) > Math.abs(speedY)) {
                x += 0.05 / (1 * inertiaDuration);
            }
            else {
                x += 0.05 / (1 * inertiaDuration);
            }
            if (x <= 1) {
                // We use constant quation to determine the offset without speed falloff befor x reaches 1
                if (Math.abs(speedY) <= Math.abs(speedX) * _this.inertiaDeltaY) {
                    _this._nextX += 1 * speedX * 15 * stepModifer;
                }
                if (Math.abs(speedY) >= Math.abs(speedX) * _this.inertiaDeltaX) {
                    _this._nextY += 1 * speedY * 15 * stepModifer;
                }
            }
            else {
                // We use the quation "y = 2 / (x + 0.55) - 0.3" to determine the offset
                if (Math.abs(speedY) <= Math.abs(speedX) * _this.inertiaDeltaY) {
                    _this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;
                }
                if (Math.abs(speedY) >= Math.abs(speedX) * _this.inertiaDeltaX) {
                    _this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;
                }
            }
            // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse
            // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse
            _this._scrollTo(_this._nextX, _this._nextY);
            _this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);
        };
        // Start inertia and continue it recursively
        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);
    };
    /**
     * @return {?}
     */
    IgxScrollInertiaDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._zone.runOutsideAngular(function () {
            var /** @type {?} */ targetElem = _this.element.nativeElement.parentElement || _this.element.nativeElement.parentNode;
            targetElem.removeEventListener('wheel', function (evt) { _this.onWheel(evt); });
            targetElem.removeEventListener('touchstart', function (evt) { _this.onTouchStart(evt); });
            targetElem.removeEventListener('touchmove', function (evt) { _this.onTouchMove(evt); });
            targetElem.removeEventListener('touchend', function (evt) { _this.onTouchEnd(evt); });
            targetElem.removeEventListener('pointerdown', function (evt) { _this.onPointerDown(evt); });
            targetElem.removeEventListener('pointerup', function (evt) { _this.onPointerUp(evt); });
            targetElem.removeEventListener('MSGestureStart', function (evt) { _this.onMSGestureStart(evt); });
            targetElem.removeEventListener('MSGestureChange', function (evt) { _this.onMSGestureChange(evt); });
        });
    };
    IgxScrollInertiaDirective.decorators = [
        { type: Directive, args: [{ selector: '[igxScrollInertia]' },] },
    ];
    /** @nocollapse */
    IgxScrollInertiaDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
    ]; };
    IgxScrollInertiaDirective.propDecorators = {
        "IgxScrollInertiaDirection": [{ type: Input },],
        "IgxScrollInertiaScrollContainer": [{ type: Input },],
        "wheelStep": [{ type: Input },],
        "inertiaStep": [{ type: Input },],
        "swipeToleranceX": [{ type: Input },],
        "inertiaDeltaY": [{ type: Input },],
        "inertiaDeltaX": [{ type: Input },],
        "inertiaDuration": [{ type: Input },],
    };
    return IgxScrollInertiaDirective;
}());
export { IgxScrollInertiaDirective };
function IgxScrollInertiaDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxScrollInertiaDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxScrollInertiaDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxScrollInertiaDirective.propDecorators;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.IgxScrollInertiaDirection;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.IgxScrollInertiaScrollContainer;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.wheelStep;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.inertiaStep;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.swipeToleranceX;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.inertiaDeltaY;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.inertiaDeltaX;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.inertiaDuration;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._touchInertiaAnimID;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._startX;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._startY;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._touchStartX;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._touchStartY;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._lastTouchEnd;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._lastTouchX;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._lastTouchY;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._savedSpeedsX;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._savedSpeedsY;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._totalMovedX;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._offsetRecorded;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._offsetDirection;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._touchPrevented;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._lastMovedX;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._lastMovedY;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._gestureObject;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.setPointerCaptureFName;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.releasePointerCaptureFName;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._pointer;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._nextX;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._nextY;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype.element;
    /** @type {?} */
    IgxScrollInertiaDirective.prototype._zone;
}
/**
 * @hidden
 */
var IgxScrollInertiaModule = /** @class */ (function () {
    function IgxScrollInertiaModule() {
    }
    IgxScrollInertiaModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxScrollInertiaDirective],
                    exports: [IgxScrollInertiaDirective],
                    imports: [CommonModule]
                },] },
    ];
    return IgxScrollInertiaModule;
}());
export { IgxScrollInertiaModule };
function IgxScrollInertiaModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxScrollInertiaModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxScrollInertiaModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,