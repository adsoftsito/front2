{"version":3,"sources":["ng://igniteui-angular/lib/animations/fade/index.ts","null","ng://igniteui-angular/lib/animations/flip/index.ts","ng://igniteui-angular/lib/animations/rotate/index.ts","ng://igniteui-angular/lib/animations/misc/shake.ts","ng://igniteui-angular/lib/animations/misc/pulsate.ts","ng://igniteui-angular/lib/animations/scale/index.ts","ng://igniteui-angular/lib/animations/slide/index.ts","ng://igniteui-angular/lib/animations/swing/index.ts","ng://igniteui-angular/lib/animations/grow/index.ts","ng://igniteui-angular/lib/core/navigation/nav.service.ts","ng://igniteui-angular/lib/core/navigation/directives.ts","ng://igniteui-angular/lib/directives/button/button.directive.ts","ng://igniteui-angular/lib/directives/dragdrop/dragdrop.directive.ts","ng://igniteui-angular/lib/directives/filter/filter.directive.ts","ng://igniteui-angular/lib/directives/focus/focus.directive.ts","ng://igniteui-angular/lib/directives/for-of/display.container.ts","ng://igniteui-angular/lib/directives/for-of/horizontal.virtual.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/virtual.helper.component.ts","ng://igniteui-angular/lib/directives/scroll-inertia/scroll_inertia.directive.ts","ng://igniteui-angular/lib/directives/for-of/for_of.directive.ts","ng://igniteui-angular/lib/directives/layout/layout.directive.ts","ng://igniteui-angular/lib/directives/mask/mask-helper.ts","ng://igniteui-angular/lib/directives/mask/mask.directive.ts","ng://igniteui-angular/lib/core/utils.ts","ng://igniteui-angular/lib/radio/radio.component.ts","ng://igniteui-angular/lib/directives/ripple/ripple.directive.ts","ng://igniteui-angular/lib/directives/radio/radio-group.directive.ts","ng://igniteui-angular/lib/directives/text-highlight/text-highlight.directive.ts","ng://igniteui-angular/lib/directives/text-selection/text-selection.directive.ts","ng://igniteui-angular/lib/services/overlay/utilities.ts","ng://igniteui-angular/lib/services/overlay/position/global-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/NoOpScrollStrategy.ts","ng://igniteui-angular/lib/services/overlay/overlay.ts","ng://igniteui-angular/lib/data-operations/filtering-expressions-tree.ts","ng://igniteui-angular/lib/data-operations/filtering-strategy.ts","ng://igniteui-angular/lib/data-operations/filtering-state.interface.ts","ng://igniteui-angular/lib/data-operations/sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/sorting-state.interface.ts","ng://igniteui-angular/lib/data-operations/data-util.ts","ng://igniteui-angular/lib/services/exporter-common/export-utilities.ts","ng://igniteui-angular/lib/services/exporter-common/base-export-service.ts","ng://igniteui-angular/lib/services/csv/char-separated-value-data.ts","ng://igniteui-angular/lib/services/exporter-common/exporter-options-base.ts","ng://igniteui-angular/lib/services/csv/csv-exporter-options.ts","ng://igniteui-angular/lib/services/csv/csv-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-strings.ts","ng://igniteui-angular/lib/services/excel/excel-files.ts","ng://igniteui-angular/lib/services/excel/excel-folders.ts","ng://igniteui-angular/lib/services/excel/excel-elements-factory.ts","ng://igniteui-angular/lib/services/excel/worksheet-data-dictionary.ts","ng://igniteui-angular/lib/services/excel/worksheet-data.ts","ng://igniteui-angular/lib/services/excel/excel-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-exporter-options.ts","ng://igniteui-angular/lib/services/overlay/position/connected-positioning-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/auto-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/absolute-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/block-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/close-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/IScrollStrategy.ts","ng://igniteui-angular/lib/services/transaction/transaction.ts","ng://igniteui-angular/lib/services/transaction/base-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-hierarchical-transaction.ts","ng://igniteui-angular/lib/directives/toggle/toggle.directive.ts","ng://igniteui-angular/lib/directives/tooltip/tooltip.directive.ts","ng://igniteui-angular/lib/data-operations/filtering-condition.ts","ng://igniteui-angular/lib/data-operations/groupby-record.interface.ts","ng://igniteui-angular/lib/data-operations/stable-sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/data-container.ts","ng://igniteui-angular/lib/icon/icon.service.ts","ng://igniteui-angular/lib/core/deprecateDecorators.ts","ng://igniteui-angular/lib/icon/icon.component.ts","ng://igniteui-angular/lib/icon/index.ts","ng://igniteui-angular/lib/avatar/avatar.component.ts","ng://igniteui-angular/lib/badge/badge.component.ts","ng://igniteui-angular/lib/buttonGroup/buttonGroup.component.ts","ng://igniteui-angular/lib/calendar/calendar.ts","ng://igniteui-angular/lib/calendar/calendar.component.ts","ng://igniteui-angular/lib/calendar/calendar.directives.ts","ng://igniteui-angular/lib/calendar/calendar.module.ts","ng://igniteui-angular/lib/card/card.component.ts","ng://igniteui-angular/lib/carousel/carousel.component.ts","ng://igniteui-angular/lib/checkbox/checkbox.component.ts","ng://igniteui-angular/lib/chips/chip.component.ts","ng://igniteui-angular/lib/chips/chips-area.component.ts","ng://igniteui-angular/lib/directives/prefix/prefix.directive.ts","ng://igniteui-angular/lib/directives/suffix/suffix.directive.ts","ng://igniteui-angular/lib/chips/chips.module.ts","ng://igniteui-angular/lib/combo/combo.directives.ts","ng://igniteui-angular/lib/core/selection.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.component.ts","ng://igniteui-angular/lib/drop-down/drop-down.component.ts","ng://igniteui-angular/lib/directives/hint/hint.directive.ts","ng://igniteui-angular/lib/directives/input/input.directive.ts","ng://igniteui-angular/lib/directives/label/label.directive.ts","ng://igniteui-angular/lib/core/displayDensity.ts","ng://igniteui-angular/lib/input-group/input-group.component.ts","ng://igniteui-angular/lib/combo/combo-dropdown.component.ts","ng://igniteui-angular/lib/combo/combo-item.component.ts","ng://igniteui-angular/lib/combo/combo.pipes.ts","ng://igniteui-angular/lib/combo/combo.component.ts","ng://igniteui-angular/lib/dialog/dialog.directives.ts","ng://igniteui-angular/lib/dialog/dialog.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.component.ts","ng://igniteui-angular/lib/grids/api.service.ts","ng://igniteui-angular/lib/grids/cell.component.ts","ng://igniteui-angular/lib/grids/row.component.ts","ng://igniteui-angular/lib/grids/grid-summary.ts","ng://igniteui-angular/lib/grids/grid.common.ts","ng://igniteui-angular/lib/grids/column.component.ts","ng://igniteui-angular/lib/grids/column-chooser-item-base.ts","ng://igniteui-angular/lib/grids/column-hiding-item.directive.ts","ng://igniteui-angular/lib/grids/column-chooser-base.ts","ng://igniteui-angular/lib/grids/column-hiding.component.ts","ng://igniteui-angular/lib/grids/column-pinning.component.ts","ng://igniteui-angular/lib/grids/grid-toolbar.component.ts","ng://igniteui-angular/lib/grids/filtering/svgIcons.ts","ng://igniteui-angular/lib/grids/grid-common.pipes.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering.service.ts","ng://igniteui-angular/lib/grids/grid-header.component.ts","ng://igniteui-angular/lib/grids/grid-navigation.service.ts","ng://igniteui-angular/lib/grids/grid.rowEdit.directive.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-cell.component.ts","ng://igniteui-angular/lib/grids/grid-base.component.ts","ng://igniteui-angular/lib/directives/template-outlet/template_outlet.directive.ts","ng://igniteui-angular/lib/grids/grid-summary.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-row.component.ts","ng://igniteui-angular/lib/grids/grid-common.module.ts","ng://igniteui-angular/lib/grids/grid/groupby-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid-api.service.ts","ng://igniteui-angular/lib/grids/grid/grid.directives.ts","ng://igniteui-angular/lib/grids/grid/grid.pipes.ts","ng://igniteui-angular/lib/grids/grid/grid.component.ts","ng://igniteui-angular/lib/grids/grid/grid-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid.module.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-row.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.pipes.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-cell.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.filtering.pipe.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.module.ts","ng://igniteui-angular/lib/list/list.common.ts","ng://igniteui-angular/lib/core/touch.ts","ng://igniteui-angular/lib/list/list-item.component.ts","ng://igniteui-angular/lib/list/list.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-body.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.directives.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-header.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.module.ts","ng://igniteui-angular/lib/navbar/navbar.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.directives.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.module.ts","ng://igniteui-angular/lib/progressbar/progressbar.common.ts","ng://igniteui-angular/lib/progressbar/progressbar.component.ts","ng://igniteui-angular/lib/slider/slider.component.ts","ng://igniteui-angular/lib/snackbar/snackbar.component.ts","ng://igniteui-angular/lib/switch/switch.component.ts","ng://igniteui-angular/lib/tabbar/tabbar.component.ts","ng://igniteui-angular/lib/tabs/tab-item.component.ts","ng://igniteui-angular/lib/tabs/tabs.directives.ts","ng://igniteui-angular/lib/tabs/tabs-group.component.ts","ng://igniteui-angular/lib/tabs/tabs.component.ts","ng://igniteui-angular/lib/time-picker/time-picker.directives.ts","ng://igniteui-angular/lib/time-picker/time-picker.component.ts","ng://igniteui-angular/lib/toast/toast.component.ts"],"names":["base","style","opacity","animate","baseParams","delay","duration","easing","EaseOut","sine","endOpacity","startOpacity","fadeIn","animation","params","fadeOut","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","baseRecipe","backfaceVisibility","transformStyle","keyframes","offset","transform","quad","endAngle","endDistance","rotateX","rotateY","rotateZ","startAngle","startDistance","flipTop","flipBottom","flipLeft","flipRight","flipHorFwd","flipHorBck","flipVerFwd","flipVerBck","transformOrigin","baseInParams","xPos","yPos","baseOutParams","EaseIn","rotateInCenter","rotateOutCenter","rotateInTop","rotateOutTop","rotateInRight","rotateOutRight","rotateInBottom","rotateOutBottom","rotateInLeft","rotateOutLeft","rotateInTr","rotateOutTr","rotateInBr","rotateOutBr","rotateInBl","rotateOutBl","rotateInTl","rotateOutTl","rotateInDiagonal1","rotateOutDiagonal1","rotateInDiagonal2","rotateOutDiagonal2","rotateInHor","rotateOutHor","rotateInVer","rotateOutVer","direction","shakeHor","shakeVer","shakeTop","shakeBottom","shakeRight","shakeLeft","shakeCenter","shakeTr","shakeBr","shakeBl","shakeTl","heartbeatBase","animationTimingFunction","pulsateBase","pulsateParams","fromScale","toScale","blinkBase","pulsateFwd","pulsateBck","heartbeat","blink","midScale","scaleInCenter","scaleInBl","scaleInVerCenter","scaleInTop","scaleInLeft","scaleInVerTop","scaleInTr","scaleInTl","scaleInVerBottom","scaleInRight","scaleInHorCenter","scaleInBr","scaleInHorLeft","scaleInBottom","scaleInHorRight","scaleOutCenter","scaleOutBl","scaleOutBr","scaleOutVerCenter","scaleOutVerTop","scaleOutVerBottom","scaleOutTop","scaleOutLeft","scaleOutTr","scaleOutTl","scaleOutRight","scaleOutBottom","scaleOutHorCenter","scaleOutHorLeft","scaleOutHorRight","fromPosition","toPosition","slideInTop","slideInLeft","slideInRight","slideInBottom","slideInTr","slideInTl","slideInBr","slideInBl","slideOutTop","slideOutRight","slideOutBottom","slideOutLeft","slideOutTr","slideOutBr","slideOutBl","slideOutTl","swingBase","swingParams","back","swingOutParams","swingInTopFwd","swingInRightFwd","swingInBottomFwd","swingInLeftFwd","swingInTopBck","swingInRightBck","swingInBottomBck","swingInLeftBck","swingOutTopFwd","swingOutRightFwd","swingOutBottomFwd","swingOutLefttFwd","swingOutTopBck","swingOutRightBck","swingOutBottomBck","swingOutLeftBck","height","startHeight","endHeight","growVerIn","growVerOut","IgxNavigationService","navs","add","id","navItem","remove","get","toggle","args","_i","_a","open","close","IgxNavigationToggleDirective","nav","state","toggleNavigationDrawer","Directive","selector","Input","HostListener","IgxNavigationCloseDirective","closeNavigationDrawer","NgModule","declarations","exports","providers","IgxButtonDirective","element","_renderer","EventEmitter","nativeElement","_type","addClass","_cssClass","_color","color","setStyle","_backgroundColor","_label","setAttribute","val","removeClass","onClick","ev","buttonClick","emit","ElementRef","Renderer2","Output","HostBinding","IgxDragCustomEventDetails","IgxDropEnterEventArgs","IgxDropLeaveEventArgs","IgxDropEventArgs","IgxDragDirective","cdr","zone","renderer","Subject","_visibility","bVisible","detectChanges","parseInt","_dragGhost","left","requestAnimationFrame","_this","top","PointerEvent","window","ngOnInit","runOutsideAngular","pointerEventsEnabled","fromEvent","pipe","takeUntil","_destroy","subscribe","res","onPointerDown","throttle","interval","animationFrameScheduler","onPointerMove","onPointerUp","touchEventsEnabled","document","defaultView","ngOnDestroy","complete","_removeOnDestroy","parentNode","removeChild","event","_clicked","_pointerDownId","pointerId","_startX","pageX","_startY","pageY","touches","marginTop","getComputedStyle","marginLeft","_dragOffsetX","getBoundingClientRect","_dragOffsetY","_dragStartX","_dragStartY","setPointerCapture","focus","preventDefault","dragStartArgs_1","originalEvent","owner","cancel","totalMovedX","totalMovedY","_dragStarted","Math","abs","dragTolerance","run","dragStart","createDragGhost","dispatchDragEvents","eventArgs","_lastDropArea","animateOnRelease","onTransitionEnd","dispatchDropEvent","floor","transitionDuration","defaultReturnDuration","dragEnd","dragClicked","cloneNode","position","ghostImageClass","body","appendChild","addEventListener","hideBaseOnDrag","visible","topDropArea","startX","startY","elementsFromPoint","getElementsAtPoint","getAttribute","dispatchEvent","updateDragRelativePos","totalDraggedX","totalDraggedY","newPosX","newPosY","diffStartX","diffStartY","dropFinished","returnMoveEnd","viewPortX","pageXOffset","viewPortY","pageYOffset","eventName","dragLeaveEvent","createEvent","initCustomEvent","ChangeDetectorRef","NgZone","IgxDropDirective","_zone","onDragEnter","onDragLeave","onDragOver","dragover","drag","detail","dragData","data","onEnter","onLeave","onDragDrop","onDrop","setTimeout","IgxFilterDirective","ngOnChanges","changes","currentValue","inputValue","undefined","previousValue","filter","filterOptions","items","filtering","filtered","IgxFilterPipe","filteredItems","options","item","match","matchFn","formatter","get_value","metConditionFn","overdueConditionFn","Pipe","name","pure","IgxFilterOptions","result","toString","textContent","trim","valueToTest","toLowerCase","indexOf","hidden","IgxFilterModule","imports","CommonModule","IgxFocusDirective","comp","focusState","trigger","getEditElement","exportAs","Inject","NG_VALUE_ACCESSOR","type","Self","Optional","DisplayContainerComponent","_viewContainer","Component","template","ViewContainerRef","ViewChild","read","HVirtualHelperComponent","elementRef","VirtualHelperComponent","destroyed","IgxScrollInertiaDirective","Element","targetElem","parentElement","evt","onWheel","onTouchStart","onTouchMove","onTouchEnd","onMSGestureStart","onMSGestureChange","IgxScrollInertiaScrollContainer","scrollDeltaX","scrollDeltaY","scrollStep","wheelStep","minWheelStep","scrollLeft","scrollTop","wheelDeltaX","sign","deltaX","calcAxisCoords","wheelDeltaY","deltaY","IgxScrollInertiaDirection","_scrollToX","curScrollLeft","maxScrollLeft","children","width","_scrollToY","curScrollTop","maxScrollTop","scrollHeight","offsetHeight","MSGesture","cancelAnimationFrame","_touchInertiaAnimID","touch","_touchStartX","_touchStartY","_lastTouchEnd","Date","getTime","_lastTouchX","_lastTouchY","_savedSpeedsX","_savedSpeedsY","_totalMovedX","_offsetRecorded","_offsetDirection","_touchPrevented","scrolledXY","destX","inertiaStep","destY","timeFromLastTouch","speedX","speedY","shift","_lastMovedX","_lastMovedY","swipeToleranceX","_scrollTo","x","y","_inertiaInit","pointerType","setPointerCaptureFName","_pointer","_gestureObject","addPointer","releasePointerCaptureFName","screenX","screenY","touchPos","min","max","dest","stepModifer","inertiaDuration","_nextX","_nextY","inertiaDeltaY","inertiaDeltaX","removeEventListener","IgxForOfDirective","_template","_differs","resolver","startIndex","chunkSize","getVerticalScroll","round","igxForContainerSize","igxForOf","totalItemCount","removeScrollEventListeners","igxForScrollOrientation","getHorizontalScroll","func","vertical_1","verticalScrollHandler","onScroll","totalSize","vc","igxForScrollContainer","dcFactory","resolveComponentFactory","dc","createComponent","instance","scrollDirection","touchAction","notVirtual","initSizesCache","hScroll","getElement","getIndexAt","sizesCache","_calculateChunkSize","input","embeddedView","_vcr","createEmbeddedView","$implicit","index","_embeddedViews","factory","vh","_maxHeight","_calcMaxBrowserHeight","_calcHeight","bind","scrollContainer","onHScroll","hvFactory","hvh","scrollOffset","forOf","_differ","find","igxForTrackBy","Error","getTypeNameForDebugging","defaultItemSize","firstChange","containerSize","_recalcOnContainerChange","ngDoCheck","changes_1","diff","_applyChanges","markForCheck","_updateScrollOffset","addScrollTop","addTop","originalVirtScrollTop","_virtScrollTop","maxVirtScrollTop","_virtHeight","_bScrollInternal","_virtHeightRatio","fixedUpdateAllRows","maxRealScrollTop","scrollTo","isRemote","scr","isPrevItem","nextScroll","_adjustToIndex","scrollNext","endIndex","scrollPrev","scrollNextPage","scrollPrevPage","getColumnScrollLeft","colIndex","getItemCountInView","getSizeAt","realPercentScrolled","prevStartIndex","recalcUpdateSizes","changeDetectorRef","onChunkLoad","dimension","diffs","totalDiff","rNode","rootNodes","node","nodeType","Node","ELEMENT_NODE","h","clientHeight","igxForItemSize","oldVal","heightCache","newVal","clientWidth","currDiff","j","totalWidth","reducer","acc","scrToBottom","_isScrolledToBottom","hSum","reduce","_isAtBottomIndex","updatesToIndex","sumDiffs","slice","currOffset","inScrollTop","embeddedViewCopy","count","ind","currIndex","endingIndex","bUpdatedStart","onChunkPreload","cntx","context","fixedUpdateAllCols","inScrollLeft","_trackByFn","fn","prevChunkSize","applyChunkSizeChange","_recalcScrollBarSize","div","createElement","size","_calcMaxChunkSize","viewref","nodeName","elem","getElementsByTagName","maxLength","arr","sum","accumulator","currentItem","availableSize","prevIndex","prevItem","prevSize","unshift","splice","set","start","end","midIdx","cmp","removeLastElem","pop","destroy","addLastElem","elemIndex","_updateHScrollOffset","_updateVScrollOffset","vScroll","TemplateRef","IterableDiffers","ComponentFactoryResolver","tslib_1.__extends","IgxGridForOfDirective","_super","scrollAmount","entryComponents","IgxScrollInertiaModule","IgxLayoutDirective","wrap","justify","itemAlign","reverse","dir","IgxFlexDirective","flex","grow","shrink","basis","order","MASK_FLAGS","KEYS","MaskHelper","_cursor","parseValueByMask","maskOptions","cursor","mask","format","literals","getMaskLiterals","literalKeys","from","keys","nonLiteralIndeces","getNonLiteralIndeces","parseValueByMaskOnInit","insertCharAt","promptChar","char","isCharValid","validateCharOnPostion","replaceCharAt","inputVal","outputVal","literalValues","values","mask_1","tslib_1.__values","mask_1_1","forEach","nonLiteralValues","getNonLiteralValues","pos","nonLiteralValues_1","nonLiteralValues_1_1","restoreValueFromMask","value_1","value_1_1","parseValueByMaskUponSelection","selection","isMarked","parseValueByMaskUponCopyPaste","clipboardData","selectionEnd","clipboardData_1","clipboardData_1_1","inputChar","isValid","charAt","RegExp","test","strValue","substring","Map","nonLiteralsIndeces","value_2","value_2_1","noop","IgxMaskDirective","maskHelper","selectionStart","_maskOptions","onKeydown","keyCode","charCode","_ctrlDown","_key","_selection","onKeyup","onPaste","_paste","_valOnPaste","_cursorOnPaste","getCursorPosition","onInputChanged","setCursorPosition","currentCursorPos","rawVal","dataValue","includeLiterals","_onChangeCallback","onValueChange","rawValue","formattedValue","onFocus","setSelectionRange","writeValue","registerOnChange","registerOnTouched","_onTouchedCallback","provide","useExisting","multi","cloneArray","array","deep","cloneValue","mergeObjects","obj1","obj2","isObject","_b","isDate","isArray","Set","valToPxlsUsingRange","range","overflow","isIE","isEdge","selectNodeContents","navigator","appVersion","userAgent","isNavigationKey","nextId","IgxRadioComponent","labelId","_onRadioChange","stopPropagation","_onRadioClick","select","nativeRadio","blur","_onLabelClick","disabled","checked","focused","change","radio","_value","labelPosition","RadioLabelPosition","BEFORE","cssClass","AFTER","onBlur","IgxRippleDirective","_centered","centered","onMouseDown","_ripple","setStyles","rippleElement","styleParams","rippleElementClass","radius","rippleColor","rippleDisabled","rippleTarget","querySelector","rectBounds","clientX","clientY","dimensions","rippleHostClass","animationFrames","rippleDuration","fill","animationQueue","onfinish","IgxRadioGroupDirective","newValue","_selectRadioButton","_name","_setRadioButtonNames","_required","_setRadioButtonsRequired","_disabled","_disableRadioButtons","_labelPosition","_setRadioButtonLabelPosition","_selected","selected","ngAfterContentInit","_isInitialized","_initRadioButtons","radioButtons","button","destroy$","required","_selectedRadioButtonChanged","ContentChildren","IgxRippleModule","IgxTextHighlightDirective","onActiveElementChanged","groupName","_activeElementIndex","deactivate","activateIfNecessary","setActiveHighlight","highlight","highlightGroupsMap","clearActiveHighlight","rowIndex","columnIndex","page","_observer","disconnect","_lastSearchInfo","searchedText","caseSensitive","exactMatch","ngAfterViewInit","has","content","matchCount","_container","firstElementChild","text","caseSensitiveResolved","exactMatchResolved","searchNeedsEvaluation","clearHighlight","clearChildElements","getHighlightedText","_nodeWasRemoved","group","column","row","activate","observe","MutationObserver","mutationList","mutation","removedNodes","addedNodes","_forceEvaluation","childList","_div","spans","querySelectorAll","elementToActivate","activeCssClass","elementToDeactivate","originalContentHidden","setProperty","searchText","appendDiv","stringValue","String","contentStringResolved","searchTextResolved","appendSpan","appendText","foundIndex","previousMatchEnd","textElement","createText","outerHTML","span","containerClass","IgxTextSelectionDirective","selectionState","Point","getPointFromPositionsSettings","settings","overlayWrapper","HTMLElement","rect","right","horizontalStartPoint","bottom","verticalStartPoint","overlayWrapperPosition","GlobalPositionStrategy","horizontalDirection","HorizontalAlignment","Center","verticalDirection","VerticalAlignment","Middle","openAnimation","closeAnimation","_defaultSettings","contentElement","initialCall","Left","justifyContent","Right","Top","alignItems","Bottom","NoOpScrollStrategy","initialize","overlayService","attach","detach","IgxOverlayService","_factoryResolver","_appRef","_injector","builder","positionStrategy","scrollStrategy","modal","closeOnOutsideClick","_overlayInfos","info","contains","hide","reposition","_document","show","compOrId","getOverlayById","console","warn","_componentId","getOverlayInfo","componentRef","onOpening","detachView","hostView","closeAnimationPlayer","hasStarted","initialSize","hook","placeElementHook","moveElementToOverlay","updateSize","addOutsideClickListener","addResizeHandler","setupModalWrapper","playOpenAnimation","onOpened","onClosing","removeOutsideClickListener","removeResizeHandler","child","parent_1","applyAnimationParams","classList","playCloseAnimation","onCloseDone","hideAll","overlay","component","dynamicFactory","dynamicComponent","attachView","location","lastElementChild","insertBefore","wrapperElement","getWrapperElement","getContentElement","getOverlayElement","elementScrollTop","wrapper","outlet","_overlayElement","onClosed","openAnimationPlayer","animationBuilder","build","init","innerRenderer","openAnimationInnerPlayer","engine","players","onDone","reset","closeAnimationInnerPlayer","getPosition","setPosition","onAnimation","animationPlayer","animationType","play","animationOptions","transitionTimingFunction","documentClicked","shouldRemoveClickEventListener_1","closingOverlaysCount","repositionAll","Injectable","providedIn","ApplicationRef","Injector","AnimationBuilder","DOCUMENT","FilteringExpressionsTree","operator","fieldName","findIndex","filteringOperands","expr","isFilteringExpressionsTreeForColumn","expressionsTree","BaseFilteringStrategy","findMatchByExpression","rec","cond","condition","getFieldValue","logic","searchVal","ignoreCase","matchRecord","expressions","matchOperand","operand","FilteringLogic","And","Or","expression","FilteringStrategy","len","filteringStateDefaults","strategy","SortingStrategy","sort","sortDataRecursive","groupBy","groupDataRecursive","compareValues","a","an","bn","compareObjects","obj","arraySort","compareFn","groupedRecordsByExpression","groupval","sortByFieldExpression","firstRow","firstRowValue","SortingDirection","Desc","expressionIndex","gbData","gbDataLen","exprsLen","dataLen","level","parent","groupRow","records","groupParent","group_1","group_1_1","groupItem","TreeGridSortingStrategy","SortingStateDefaults","DataUtil","mergeDefaultProperties","defaults","hierarchicalSort","hierarchicalData","hr","cloneTreeGridRecord","hierarchicalRecord","rowID","isFilteredOutParent","expanded","path","restoreGroups","groupData","groupsRecords","restoreGroupsRecursive","expansion","defaultExpanded","depth","g","hierarchy","this_1","getHierarchy","expandState","isHierarchyMatch","recordsPerPage","countPages","countRecords","PagingError","None","isNaN","IncorrectPageIndex","IncorrectRecordsPerPage","ceil","process","sorting","paging","gRow","h1","h2","every","mergeTransactions","transactions","primaryKey","rowId","transaction","TransactionType","UPDATE","ADD","map","mergeHierarchicalTransactions","childDataKey","parentKey","dataItem","updateTransaction","addedTransactions","parentId","addedTransactions_1","addedTransactions_1_1","addedTransaction","this_2","ExportUtilities","getKeysFromData","dataEntry","dataEntryMiddle","dataEntryLast","keys1","keys2","keys3","isSpecialData","saveBlobToFile","blob","fileName","msSaveOrOpenBlob","url","URL","createObjectURL","download","href","click","revokeObjectURL","stringToArrayBuffer","buf","ArrayBuffer","view","Uint8Array","charCodeAt","hasValue","IgxBaseExporter","export","grid","columns","columnList","toArray","_columnList","hiddenColumns","lastVisbleColumnIndex","columnHeader","header","field","exportColumn","ignoreColumnsVisibility","ignoreColumnsOrder","visibleIndex","columnInfo","skip","pinned","_indexOfLastPinnedColumn","hiddenColumn","prepareData","exportData","k","skippedPinnedColumnsCount","columnExportArgs","onColumnExport","_sort","dataToExport","exportRow","exportDataImplementation","resetDefaults","rowData","rowArgs","onRowExport","filteringExpressionsTree","ignoreFiltering","filteringState","filteringLogic","sortingExpressions","ignoreSorting","sortingState","CharSeparatedValueData","_data","valueDelimiter","setDelimiter","_isSpecialData","_escapeCharacters","_delimiter","_headerRecord","processHeaderRecord","_dataRecords","processDataRecords","processField","escapeChars","safeValue","some","v","includes","recordData","keys_1","keys_1_1","keyName","_delimiterLength","_eor","processRecord","record","keys_2","keys_2_1","currentData","dataRecords","currentData_1","currentData_1_1","IgxExporterOptionsBase","_fileExtension","setFileName","_fileName","endsWith","IgxCsvExporterOptions","fileType","getExtensionFromFileType","setFileType","fType","extension","CsvFileTypes","CSV","TSV","TAB","_valueDelimiter","_fileType","oldExt","split","newName","replace","IgxCsvExporterService","csvData","_stringData","saveFile","onExportEnded","exportFile","Blob","ExcelStrings","getRels","XML_STRING","getApp","getCore","getTheme","getStyles","hasNonStringValues","getWorkbook","getWorksheetRels","getWorkbookRels","hasSharedStrings","retVal","SHARED_STRING_RELATIONSHIP","getSheetXML","freezePane","cols","sheetData","hasTable","getSharedStringXML","uniqueCount","table","getContentTypesXML","contentTypes","getTablesXML","tableColumns","getExcelColumn","returnString","fromCharCode","RootRelsFile","writeElement","folder","worksheetData","file","AppFile","CoreFile","WorkbookRelsFile","isEmpty","ThemeFile","WorksheetFile","dictionary","dataDictionary","rowHeight","columnCount","saveValue","rowCount","cellData","getCellData","columnWidths","widthInTwips","columnWidth","MIN_WIDTH","indexOfLastPinnedColumn","ignorePinning","frozenColumnCount","exportAsTable","join","columnName","cellValue","savedValue","isSavedAsString","StyleFile","WorkbookFile","ContentTypesFile","SharedStringsFile","dict","sortedValues","getKeys","sharedStrings","sortedValues_1","sortedValues_1_1","getSanitizedValue","stringsCount","TablesFile","lastColumn","sortString","sortingExpression","sc","WorksheetRelsFile","RootExcelFolder","childFiles","ExcelFileTypes","childFolders","ExcelFolderTypes","RootRelsExcelFolder","DocPropsExcelFolder","XLExcelFolder","XLRelsExcelFolder","ThemeExcelFolder","WorksheetsExcelFolder","TablesExcelFolder","WorksheetsRelsExcelFolder","ExcelElementsFactory","getExcelFolder","getExcelFile","WorksheetDataDictionary","_dictionary","_widthsDictionary","_counter","dirtyKeyCollections","_calculateColumnWidth","_columnWidths","_columnTypeInfo","isHeader","sanitizedValue","sanitizeValue","getTextWidth","maxWidth","getValue","_keysAreValid","_keys","metrics","getContext","measureText","TEXT_PADDING","_context","canvas","font","DEFAULT_FONT","WorksheetData","initializeData","_columnCount","_rowCount","_dataDictionary","IgxExcelExporterService","populateFolder","zip","childFolder","folderIntance","zipFolder","folderName","_d","_e","childFile","_xlsx","JSZip","rootFolder","generateAsync","ZIP_OPTIONS","then","xlsx","atob","compression","IgxExcelExporterOptions","_columnWidth","_rowHeight","ConnectedPositioningStrategy","startPoint","AutoPositionStrategy","getViewPort","clientRect","documentElement","scrollPosition","innerWidth","innerHeight","_initialSettings","viewPort","topBound","offsetTop","bottomBound","checkIfMoveVertical","leftBound","offsetLeft","rightBound","checkIfMoveHorizontal","AbsoluteScrollStrategy","_overlayService","_id","_scrollContainer","_initialized","BlockScrollStrategy","_sourceElement","srcElement","_initialScrollTop","_initialScrollLeft","stopImmediatePropagation","CloseScrollStrategy","cumulativeScrollTop","cumulativeScrollLeft","initialScrollTop","_threshold","initialScrollLeft","IScrollStrategy","IgxBaseTransactionService","_isPending","recordRef","updateState","_pendingStates","_pendingTransactions","getTransactionLog","undo","redo","getAggregatedChanges","mergeChanges","getAggregatedValue","getState","updateValue","commit","clear","startPending","endPending","states","mergeValues","first","second","IgxTransactionService","_undoStack","_redoStack","_states","verifyAddedTransaction","addTransaction","useInUndo","_transactions","onStateUpdate","pendingState","pendingChange","aggregatedValue","originalValue","i_1","JSON","stringify","DELETE","action","undoItem","delete","cleanState","IgxHierarchicalTransactionService","clearArraysFromObject","currentState","prop","IgxToggleDirective","navigationService","_overlayId","_collapsed","unsubscribe","collapsed","overlaySettings","openEventArgs","_overlayOpenedSub","_overlaySubFilter","_overlayClosingSub","clearSubscription","_overlayClosedSub","_c","overlayClosed","subscription","closed","IgxToggleActionDirective","_closeOnOutsideClick","_target","_overlayDefaults","IgxOverlayOutletDirective","IgxTooltipTargetDirective","_element","_navigationService","positionSettings","useAnimation","checkOutletAndOutsideClick","preMouseEnterCheck","toBeShown","clearTimeout","timeoutId","toBeHidden","hidingArgs","tooltip","onTooltipHide","preMouseLeaveCheck","onKeydownEscape","onMouseEnter","tooltipDisabled","showingArgs","onTooltipShow","mergedOverlaySettings","showDelay","onMouseLeave","hideDelay","showTooltip","onDocumentTouchStart","hideTooltip","NEXT_ID","IgxTooltipDirective","IgxFilteringOperand","operations","isUnary","iconName","conditionList","append","operation","IgxBooleanFilteringOperand","_instance","IgxDateFilteringOperand","validateInputData","targetp","getDateParts","searchp","year","month","day","now","td","setDate","getDate","yesterday","date","dateFormat","hours","milliseconds","minutes","seconds","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","IgxNumberFilteringOperand","IgxStringFilteringOperand","search","applyIgnoreCase","startsWith","GroupedRecords","StableSortingStrategy","replacerFn","localeCompare","DataContainer","transformedData","getIndexOfRecord","dataAccess","DataAccess","OriginalData","accessData","getRecordByIndex","getRecordInfoByKeyValue","addRecord","at","deleteRecord","deleteRecordByIndex","updateRecordByIndex","newProperties","foundRec","TransformedData","IgxIconService","_sanitizer","_httpClient","_fontSet","className","registerFontSetAlias","alias","_fontSetAliases","fontSetClassName","addSvgIcon","fontSet","safeUrl","bypassSecurityTrustResourceUrl","sanitize","SecurityContext","RESOURCE_URL","fetchSvg","addSvgIconFromText","iconText","cacheSvgIcon","isSvgIconCached","iconKey","getSvgIconKey","_cachedSvgIcons","responseType","message","ensureSvgContainerCreated","innerHTML","svg","oldChild","_svgContainer","DomSanitizer","HttpClient","DeprecateClass","DeprecateProperty","IgxIconComponent","_el","iconService","el","defaultFontSet","updateIconClass","active","iconColor","svgImage","materialFS","materialFSAlias","noLigature","implicitLigature","explicitLigature","IgxIconModule","forRoot","ngModule","HttpClientModule","IgxAvatarComponent","_size","src","imageTemplate","initials","initialsTemplate","iconTemplate","roleDescription","getRole","getSrcUrl","IgxBadgeComponent","icon","setClasses","classes","Type","toUpperCase","DEFAULT","INFO","SUCCESS","WARNING","ERROR","IgxButtonGroupComponent","_cdr","viewButtons","templateButtons","_itemContentCssClass","buttons","_isVertical","ButtonGroupAlignment","vertical","horizontal","selectedIndexes","selectButton","buttonElement","onSelect","indexInViewButtons","multiSelection","deselectButton","onUnselect","initButtons","buttonClickNotifier$","_clickHandler","queryListNotifier$","ViewChildren","IgxButtonModule","MDAYS","stop","step","cur","isLeap","weekDay","getDay","Calendar","firstWeekDay","WEEKDAYS","SUNDAY","_firstWeekDay","weekdays","monthdates","extraWeek","days","timedelta","generateICalendarDate","monthdatescalendar","dates","units","ret","checkRollover","setFullYear","setMonth","setTime","formatToParts","locale","parts","Intl","DateTimeFormat","full","formattedParts_1","toType","partType","literal","combined","parts_1","parts_1_1","each","parts_2","parts_2_1","isCurrentMonth","isNextMonth","isPrevMonth","isPreviousMonth","CalendarHammerConfig","pan","Hammer","DIRECTION_VERTICAL","threshold","HammerGestureConfig","IgxCalendarComponent","CalendarView","CalendarSelection","SINGLE","weekday","calendarModel","_locale","initFormatters","selectedDates","rangeStarted","_viewDate","getDateOnly","selectDate","_formatOptions","formatOptions","_formatViews","formatViews","_disabledDates","_specialDates","_activeView","YEAR","DECADE","_monthAction","headerTemplateDirective","directive","subheaderTemplateDirective","headerDate","generateContext","today","weekStart","formatterMonth","formatterDay","formatterYear","formatterMonthday","formatterWeekday","formattedMonth","formattedDate","formattedYear","viewDate","isCurrentYear","previousMonth","nextMonth","previousYear","nextYear","getFormattedDate","monthday","childClicked","selectDateFromClient","onSelection","animationDone","isLast","date_1","selectSingle","selectMultiple","selectRange","deselectDate","deselectSingle","deselectMultiple","deselectRange","isDateDisabled","disabledDates","isDateInRanges","isDateSpecial","specialDates","generateWeekHeader","dayNames","rv","rv_1","rv_1_1","changeYear","changeMonth","activeViewYear","activeViewDecade","delta","generateYearRange","onPan","onKeydownPageUp","onKeydownPageDown","onKeydownShiftPageUp","onKeydownShiftPageDown","onKeydownArrowUp","isDisabled","onKeydownArrowDown","onKeydownArrowLeft","onKeydownArrowRight","onKeydownHome","onKeydownEnd","dateTracker","rowTracker","valueDateOnly_1","excludeDisabledDates","valueOf","generateDateRange","getDateOnlyInMs","selectedDatesCount","datesInMsToDeselect","valueStart","valueEnd","selectedDatesStart","selectedDatesEnd","ranges","dateInMs","ranges_1","ranges_1_1","descriptor","dRanges","dateRange","DateRangeType","dRange","datesInMs","datesInMs_1","datesInMs_1_1","monthView","yearView","currentYear","animations","transition","HAMMER_GESTURE_CONFIG","useClass","forwardRef","IgxCalendarDateDirective","ContentChild","IgxCalendarHeaderTemplateDirective","IgxCalendarSubheaderTemplateDirective","IgxCalendarYearDirective","calendar","onYearSelection","Host","IgxCalendarMonthDirective","onMonthSelection","isWeekend","isInactive","isToday","isSpecial","onDateSelection","IgxCalendarModule","FormsModule","IgxCardComponent","IgxCardHeaderDirective","IgxCardContentDirective","IgxCardActionsDirective","IgxCardFooterDirective","IgxCarouselComponent","_interval","_restartInterval","_destroyed","_lastInterval","clearInterval","setAriaLabel","slide","total","_total","_currentSlide","_playing","slides","onSlideAdded","carousel","current","onSlideRemoved","Direction","NONE","newIndex","NEXT","PREV","_moveTo","loop","prev","onCarouselPlaying","pause","onCarouselPaused","_resetInterval","onSlideChanged","setInterval","tick","IgxSlideComponent","LabelPosition","IgxCheckboxComponent","indeterminate","checkbox","_onCheckboxChange","_onCheckboxClick","nativeCheckbox","preserveWhitespaces","IGX_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","IgxCheckboxRequiredDirective","CheckboxRequiredValidator","CHIP_ID","IgxChipComponent","changeSelection","_displayDensity","chipArea","backgroundColor","newColor","class","removeIcon","defaultRemoveIcon","selectIcon","defaultSelectIcon","selectClass","SELECT_CLASS","srcEvent","onSelectArgs","_selectedItemClass","onChipKeyDown","keyDownArgs","onKeyDown","removable","onRemove","selectable","onRemoveBtnKeyDown","onRemoveMouseDown","onRemoveClick","onRemoveTouchMove","_movedWhileRemoving","onRemoveTouchEnd","onChipDragStart","onMoveStart","draggable","onChipDragEnd","dragDir","onChipMoveEnd","onMoveEnd","onChipDragClicked","clickEventArgs","onChipDragEnterHandler","chip","dragChip","onChipDrop","IgxChipsAreaComponent","_iterableDiffers","chipsList","selectedChips","newSelection","forEachAddedItem","addedChip","onChipMoveStart","onChipDragEnter","onChipSelectionChange","modifiedChipsArray","chipsArray","dragChipIndex","shiftKey","positionChipAtIndex","dropChipIndex","chipIndex","targetIndex","shiftRestLeft","eventData","onReorder","IgxPrefixDirective","IgxSuffixDirective","IgxAvatarModule","IgxDragDropModule","IgxPrefixModule","IgxSuffixModule","IgxSelectionAPIService","componentID","get_empty","sel","add_item","itemID","add_items","itemIDs","clearSelection","select_item","select_items","delete_item","delete_items","deselectedItem","deselect_item","deselect_items","is_item_selected","first_item","are_all_selected","dataCount","are_none_selected","get_all_ids","IgxDropDownItemBase","dropDown","selectedItem","isSelected","_isFocused","allowItemsFocus","preventScroll","clicked","focusedItem","isFocused","navigateItem","selectItem","markItemSelected","setSelectedItem","IgxDropDownItemComponent","_isSelected","dropDownSelectedItem","IgxDropDownComponent","IgxDropDownBase","_width","toggleDirective","_height","headers","changeSelectedItem","_focusedItem","navigate","currentIndex","getNearestSiblingFocusableItemIndex","navigateFirst","Navigate","Down","navigateLast","Up","navigateNext","navigatePrev","onToggleOpening","scrollToItem","onToggleOpened","_initiallySelectedItem","firstItemIndex","onToggleClosing","onToggleClosed","itemPosition","calculateScrollPosition","scrollToHiddenItem","newItem","elementRect","parentRect","oldSelection","scrollDelta","elementHeight","oldItem","IgxDropDownItemNavigationDirective","dropdown","handleKeyDown","onEscapeKeyDown","onEnterKeyDown","onSpaceKeyDown","onArrowUpKeyDown","onArrowDownKeyDown","onHomeKeyDown","onEndKeyDown","combo","addItemToCollection","selectionChanged","IgxToggleModule","IgxHintDirective","IgxHintPosition","START","_position","_applyPosition","isPositionStart","isPositionEnd","END","nativeValidationAttributes","IgxInputDirective","inputGroup","ngModel","formControl","IgxInputState","INITIAL","hasAttribute","_valid","ngControl","valid","INVALID","_hasValidators","checkValidity","onInput","VALID","hasPlaceholder","isRequired","control","validator","validation","tagName","isTextArea","isInput","_statusChanges$","statusChanges","onStatusChanged","asyncValidator","touched","dirty","invalid","placeholder","nativeValidationAttributes_1","nativeValidationAttributes_1_1","nativeValidationAttribute","IgxInputGroupComponent","NgModel","FormControlName","DisplayDensityToken","InjectionToken","DisplayDensityBase","displayDensityOptions","isCosy","displayDensity","isComfortable","isCompact","_displayDensityOptions","IgxInputGroupType","LINE","_supressInputAutofocus","isBox","isBorder","isSearch","BOX","BORDER","SEARCH","_filled","hints","IgxLabelDirective","IgxComboDropDownComponent","verticalScrollContainer","itemsMaxHeight","itemHeight","list","_children","searchInput","vContainer","subscribeNext","triggerCheck","focusItem","scrollTarget","navigateRemoteItem","extraScroll","isAddButtonVisible","last","navigateVirtualItem","lastVisibleIndex","isScrolledToLast","isScrollUp","newScrollStartIndex","isBottomHiddenHeader","virtualContainer","callback","handleInputChange","comboInput","searchValue","_scrollPosition","updateScrollPosition","IgxComboComponent","IgxComboItemComponent","isItemSelected","IgxComboFilteringPipe","collection","SimpleFilteringStrategy","filteringExpressions","IgxComboSortingPipe","IgxComboGroupingPipe","groupKey","filteredData","inserts","currentHeader","insertFlag","valueKey","IgxComboFilterConditionPipe","ComboConnectedPositionStrategy","_callback","IgxComboState","valueAccessor","_searchInput","_comboInput","_itemTemplate","_headerTemplate","_footerTemplate","_headerItemTemplate","_addItemTemplate","_emptyTemplate","emptyTemplate","headerTemplate","footerTemplate","itemTemplate","addItemTemplate","headerItemTemplate","_dropdownContainer","_valueKey","_displayKey","_groupKey","clearSorting","onArrowDown","onArrowUp","onInputClick","selectedItems","filterable","_filteringExpressions","_sortingExpressions","_searchValue","_filteredData","checkMatch","handleKeyUp","dropdownContainer","customValueFlag","displayKey","allowCustomValues","onSearchInput","Asc","prepare_sorting_expression","getValueByValueKey","DataTypes","dataType","_stringifyItemID","_parseItemID","parse","triggerSelectionChange","newSelectionAsSet","onSelectionChange","handleSelectAll","selectAllItems","deselectAllItems","addedItem","defaultFallbackGroup","oldCollection","newCollection","onAddition","prepare_filtering_expression","newArray","newExpression","expression2","headerExpression","searchVale","_positionCallback","dataLoading","onDataPreLoad","selectItems","setDisabledState","_dataType","complexTemplate","primitiveTemplate","handleClearItems","newItems","clearCurrentSelection","deselectItems","ignoreFilter","allVisible","NgControl","IgxComboItemDirective","IgxComboHeaderDirective","IgxComboFooterDirective","IgxComboHeaderItemDirective","IgxComboAddItemDirective","IgxComboEmptyDirective","IgxInputGroupModule","ReactiveFormsModule","IgxForOfModule","IgxCheckboxModule","IgxDropDownModule","DIALOG_ID","IgxDialogComponent","navService","_titleId","_overlayDefaultSettings","_animaitonSettings","isModal","closeOnOutsideSelect","_isModal","_closeOnOutsideSelect","isOpen","toggleRef","leftButtonLabel","rightButtonLabel","emitCloseFromDialog","onClose","dialog","onOpen","onDialogSelected","DIALOG_CLASS","onInternalLeftButtonSelect","onLeftButtonSelect","onInternalRightButtonSelect","onRightButtonSelect","IgxDialogTitleDirective","IgxDialogActionsDirective","IgxDatePickerTemplateDirective","IgxDatePickerComponent","Constants","DEFAULT_LOCALE_DATE","_customFormatChecker","calendarRef","alert","_focusTheDialog","handleDialogCloseAction","triggerTodaySelection","handleSelection","openDialog","createCalendarRef","container","updateCalendarInstance","reattach","setHours","setMinutes","setSeconds","setMilliseconds","onSpaceClick","datePickerTemplateDirective","defaultDatePickerTemplate","displayData","subheaderTemplate","_setLocaleToDate","toLocaleDateString","IgxDatePickerComponent_1","styles","IgxDialogModule","GridBaseAPIService","register","destroyMap","unset","summaryCacheMap","editCellState","editRowState","oldId","newId","summary","get_column_by_name","col","set_summary_by_column_name","enabled","columnValues","calculateSummaries","get_summaries","remove_summary","set_cell_inEditMode","gridId","cell","cellID","oldValue","onCellEditEnter","rowEditable","currentEditRow","get_edit_row_state","endEdit","startRowEdit","get_cell_inEditMode","cellCopy","escape_editMode","cellId","editableCell","columnID","refreshSearch","editCellId","get_row_index_in_data","get_all_data","get_row_by_key","rowSelector","dataRowList","get_row_by_index","rowList","editRow","set_edit_row_state","get_cell_by_key","cells","get_cell_by_index","get_cell_by_visible_index","visibleColumnIndex","submit_value","gridEditState","create_grid_edit_args","editValue","inlineEditorTemplate","update_cell","parseFloat","isFinite","cellObj","isRowSelected","dataWithTransactions","dataWithAddedInTransactionRows","currentGridEditState","emittedArgs","onCellEdit","oldValueInTransaction","rowInEditMode","_pipeTrigger","update_row","gridState","currentGridState","emitArgs","currentRowInEditMode","currentRowState","lastCommitedValue","onRowEdit","newRowID","update_row_in_array","remove_grouping_expression","getSortStrategyPerColumn","sort_multiple","expressions_1","expressions_1_1","term","conditionOrExpressionsTree","filteringTree","fieldFilterIndex","filter_global","filteringIgnoreCase","clear_filter","summaries","operate","clear_sort","newExpressionsTree","oldExpressionsTreeIndex","stateCollections","maxCollection","maxExpr","myExpr","should_apply_number_style","DataType","Number","sortStrategy","IgxGridCellComponent","gridAPI","inEditMode","cellTemplate","defaultCellTemplate","gridID","unpinnedColumns","columnGroup","deleted","editable","lastSearchInfo","resolveStyleClasses","hasVerticalScroll","colWidth","isPercentageWidth","cellWidth","isLastUnpinned","pinnedCols","pinnedColumns","isCellSelected","rowTransaction","rowCurrentState","_updateCellSelectionStatus","fireFocus","_clearCellSelection","_saveCellSelection","hasFilteredResults","previousCellEditMode","_getLastSelectedCell","editCell","cellSelectionID","prevCellSelectionID","selectedCellID","update","onDoubleClick","onCellClick","onContextMenu","isKeySupportedInCell","ctrl","ctrlKey","altKey","isToggleKey","collapse","expand","trigger_row_expansion_toggle","treeRow","onFocusChange","navigation","performShiftTabKey","performTab","goToFirstCell","goToLastCell","navigateTop","navigateUp","navigateBottom","navigateDown","onKeydownEnterEditMode","onKeydownExitEditMode","rowSelectable","checkboxElement","onCellEditCancel","highlightText","searchable","defaultClasses","cellClasses","entries","cb","igx_grid__cell--edit","igx-grid__td--number","igx-grid__td--editing","igx-grid__th--pinned","igx-grid__th--pinned-last","isLastPinned","igx-grid__td--selected","igx-grid__td--edited","klass","calculateSizeToFit","changeDetection","ChangeDetectionStrategy","Default","IgxRowComponent","_rowData","resolveClasses","visibleColumns","isRowDeleted","onCheckboxClick","triggerRowSelectionChange","deleteRowById","allRowsSelected","notGroups","indexClass","evenRowCSS","oddRowCSS","selectedClass","editClass","dirtyClass","deletedClass","defaultCssClass","OnPush","IgxSummaryOperand","label","summaryResult","IgxNumberSummaryOperand","average","IgxDateSummaryOperand","latest","earliest","IgxColumnResizerDirective","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","resizeStart","switchMap","resize","resizeEnd","_left","restrictHResizeMin","restrictHResizeMax","onMousedown","onMousemove","onMouseup","resizeEndTimeout","elStyle","IgxCellTemplateDirective","IgxCellHeaderTemplateDirective","IgxCellFooterTemplateDirective","IgxCellEditorTemplateDirective","IgxColumnMovingService","_column","_icon","IgxColumnMovingDragDirective","cms","movable","groupable","onEscape","cancelDrop","_ghostImageClass","isColumnMoving","currSelection","source","onColumnMovingStart","draggedColumn","onColumnMoving","minWidth","flexBasis","createTextNode","_dragGhostImgIconGroupClass","paddingLeft","_dragGhostImgIconClass","IgxColumnMovingDropDirective","IgxColumnComponent","_hVirtDir","hasMovableColumns","_dragLeave","isDropTarget","_lastDropIndicator","_dropIndicator","_dropIndicatorClass","_dropPos","DropPosition","BeforeDropTarget","AfterDropTarget","innerText","getPinnedWidth","calcPinnedContainerMaxWidth","horizontalScroll","nextPinnedWidth","onColumnMovingEnd","moveColumn","colID","getCellByKey","IgxDatePipeComponent","DatePipe","IgxDecimalPipeComponent","DecimalPipe","ContainerPositioningStrategy","isTop","isTopInitialPosition","defaultMinWidth","_hidden","cellInEditMode","check","activeInfo","oldIndex","updateHighlights","hasSummary","summariesHeight","reflow","filteringService","refreshExpressions","_disableHiding","widthSetByUser","defaultWidth","_pinned","pin","unpin","_summaries","classRef","_filters","_sortStrategy","_defaultMinWidth","_bodyTemplate","_inlineEditorTemplate","vIndex","allChildren","indexInCollection","ptr","lvl","headTemplate","editorTemplate","Boolean","filters","topLevelParent","hasIndex","getUnpinnedWidth","unpinnedAreaMinWidth","_unpinnedIndex","_unpinnedColumns","_pinnedColumns","targetColumn","insertAtIndex","onColumnPinning","_moveColumns","reinitPinStates","headerList","flatten","autosize","getLargestCellWidth","createRange","largest","cellsContentWidths_1","cellStyle","cellPadding","paddingRight","borderRightWidth","headerCell","titleIndex","sortable","allowFiltering","headerStyle","headerPadding","largestCell","QueryList","IgxColumnGroupComponent","isChildrenWidthInPercent","ItemPropertyValueChanged","propName","_propName","_object","object","onValueChanged","valueChanged","ColumnChooserItemBase","indentation","IgxColumnHidingItemDirective","disableHiding","ColumnChooserBase","ColumnDisplayOrder","DisplayOrder","_gridColumns","createColumnItems","filterCriteria","_title","_filterColumnsPrompt","_currentColumns","_filterCriteria","clearFiltering","_columnDisplayOrder","orderColumns","_rawColumns","createColumnItem","Alphabetical","createFilteringExpression","CustomFilteringStrategy","IgxColumnHidingComponent","columnItems","hiddenColumnsCount","hidableColumns","onVisibilityChanged","showAllColumns","hideAllColumns","onColumnVisibilityChanged","IgxColumnPinningItemDirective","IgxColumnPinningComponent","checkboxValueChange","columnItem","pinnable","IgxGridToolbarComponent","excelExporter","csvExporter","_positionSettings","gridHeight","calcHeight","exportExcel","exportCsv","getTitle","toolbarTitle","getExportText","exportText","getExportExcelText","exportExcelText","getExportCsvText","exportCsvText","exportClicked","_overlaySettings","exportButton","outletDirective","exportDropdown","exportToExcelClicked","performExport","exportToCsvClicked","exp","exportType","exporter","onToolbarExporting","toggleColumnHidingUI","columnHidingButton","columnHidingDropdown","toggleColumnPinningUI","columnPinningButton","columnPinningDropdown","icons","IgxGridFilterConditionPipe","IgxGridTransactionPipe","pipeTrigger","FILTERING_ICONS_FONT_SET","ExpressionUI","IgxFilteringService","TitleCasePipe","language","subscribeToEvents","areEventsSubscribed","onColumnResized","updateFilteringCell","parentVirtDir","columnStartIndex","filterCellList","filterCell","updateFilterCellArea","getChipToFocus","columnToChipToFocus","focusChip","isFiltering","onFilteringDone","clearFilter","getExpressions","registerSVGIcons","icons_1","icons_1_1","columnId","columnToExpressionsMap","expressionUIs","generateExpressionsList","columnsWithComplexFilter","isFilteringTreeComplex","removeExpression","indexToRemove","expressionsList","beforeOperator","afterOperator","createSimpleFilteringTree","currAndBranch","currExpressionUI","isFilterComplex","isComplex","getOperatorAsString","getChipLabel","titlecasePipe","filterPipe","datePipe","getChildAndOperatorsCount","expressionsUIs","exprUI","prevExprUI","IgxGridHeaderComponent","RestrictDrag","HORIZONTALLY","headerClasses","igx-grid__th","asc","ascending","descending","igx-grid__th--number","igx-grid__th--sorted","sorted","igx-grid__drag-col-header","dragged","igx-grid__th--filtering","filteredColumn","firstContentCell","hasColumnGroups","maxLevelHeaderDepth","defaultRowHeight","sortDirection","runTask","getSortDirection","resizeArea","onResizeAreaMouseOver","onResizeAreaMouseDown","onResizeAreaDblClick","isColumnResizing","isFilterRowVisible","sortDir","groupingExpressions","sortingIgnoreCase","onSortingDone","actualMinWidth","actualWidth","pinnedMaxWidth","_pinnedMaxWidth","resizable","resizeCursor","showResizer","resizerHeight","calcResizerHeight","_startResizePos","currentColWidth","prevWidth","newWidth","onResize","colMinWidth","colMaxWidth","IgxGridNavigationService","offsetWidth","virtDirRow","getColumnUnpinnedIndex","isColumnFullyVisible","displayContainerWidth","displayContainerScrollLeft","isColumnLeftFullyVisible","tslib_1.__spread","isRowInEditMode","isColumnEditable","gridOrderedColumns","findNextEditable","gridColumns","MoveDirection","getCellElementByVisibleIndex","isTreeGrid","nextElementSibling","performHorizontalScrollToCell","previousElementSibling","movePreviousEditable","addedIndex","editableIndex","rowEditTabs","moveNextEditable","rowElement","firstCell","allCells","lastCell","verticalScroll","cellSelector","currentRowIndex","containerTopOffset","verticalDisplayContainerElement","tag","getRowByIndex","focusPreviousElement","visColLength","headerContainer","currentRowEl","containerHeight","targetEndTopOffset","focusNextElement","rows","getAllRows","unpinnedIndex","IgxRowEditTabStopDirective","handleTab","allTabs","move","focusNextCell","cellIndex","lastEditableColumnIndex","firstEditableColumnIndex","targetCell","IgxGridBaseComponent","IgxGridFilteringCellComponent","columnToMoreIconHidden","onTabKeyDown","currentTemplate","defaultFilter","isMoreIconVisible","moreIcon","activeElement","chipsArea","updateVisibleFilters","expressionTree","complexFilter","emptyFilter","onChipClicked","selectedExpression","onChipRemoved","filteringIndicatorClass","baseClass","ghostChip","complexChip","rootExpressionsTree","visibleExpressionsList","areaWidth","viewWidth","chipsAreaElements","visibleChipsCount","moreIconWidth","moreFiltersCount","IgxGridTransaction","differs","viewRef","activeMatchIndex","matchInfoCache","rowEditingOutletDirective","rowEditPositioningStrategy","resizeHandler","calculateGridSizes","_filteringExpressionsTree","filteringExpressionTreeClone","clearSummaryCache","updateHeaderCheckboxStatusOnFilter","restoreHighlight","_paging","_ngAfterViewInitPaassed","calculateGridHeight","_page","totalPages","onPagingDone","previous","_perPage","onDensityChanged","_columnHiding","_rowSelection","deselectAllRows","_rowEditable","refreshGridState","_columnWidthSetByUser","_columnPinning","_allowFiltering","_rowList","rList","_dataRowList","rowEditCustom","defaultRowEditTemplate","orderedColumns","rowEditTabsCUSTOM","rowEditTabsDEFAULT","bannerClass","_maxLevelHeaderDepth","_hiddenColumnsText","_pinnedColumnsText","_currentRowState","showToolbar","columnHiding","columnPinning","_showToolbar","_toolbarTitle","getExportExcel","_exportExcel","getExportCsv","_exportCsv","_exportText","_exportExcelText","_exportCsvText","changeRowEditingOverlayStateOnScroll","horizontalScrollHandler","_horizontalForOfs","vfor","summaryContainer","keydownHandler","columnListDiffer","calcWidth","calcRowCheckboxWidth","onRowAdded","onRowDeleted","autoGenerate","autogenerateColumns","initColumns","onColumnInit","calcMaxSummaryHeight","_derivePossibleHeight","forEachRemovedItem","calculateGridWidth","initPinning","observer_1","mutationsList","checkIfGridIsAdded","subtree","scrollHandler","toggleColumnVisibility","getColumnByName","hasSummarizedColumns","theadRow","tbody","tfoot","_columns","getRowByKey","keyValue","getCellByColumn","columnField","pagingState","to","fromIndex","toIndex","activeColumn","activeColumnIndex","newList","_resetColumnList","notifyOnChanges","_reorderPinnedColumns","dropIndex","_moveChildColumns","buffer","dropTarget","fi","ti","nextPage","isLastPage","previousPage","isFirstPage","paginate","addRow","parentID","deleteRow","hasRowInNonDeletedState","deselectRows","checkHeaderCheckboxStatus","deleteRowFromData","perPage","updateCell","columnEdit","updateRow","rest","_sortMultiple","conditionOrExpressionTree","expressionsTreeForColumn","expressionForColumn","filterGlobal","enableSummaries","_multipleSummaries","disableSummaries","_disableMultipleSummaries","clearSort","filed","pinColumn","unpinColumn","recalculateSummaries","findNext","findPrev","updateActiveInfo","rebuildMatchCache","activeInfo_1","clearSearch","summarizedColumns","dataLength","parentHeight","rowBasedHeight","viewPortHeight","_derivePossibleWidth","getPossibleColumnWidth","allItems","_defaultTargetRecordNumber","computed","toolbarHeight","toolbarHtml","pagingHeight","paginator","groupAreaHeight","getGroupAreaHeight","_calculateGridBodyHeight","getPropertyValue","footerBordersAndScrollbars","defaultTargetBodyHeight","computedWidth","headerCheckboxContainer","visibleChildColumns","columnsWithSetWidths","columnsToSize","sumExistingWidths","curr","maxSummaryLength","getCurrentSummaryColumn","repositionRowEditingOverlay","takeHidden","fc","fc_1","fc_1_1","summaryOperand","customSummary","resolveDataTypes","fields","ref","injector","onlyTopLevel","setColumnEditState","onHeaderCheckboxClick","headerCheckbox","emptyGridTemplate","emptyFilteredGridTemplate","emptyGridDefaultTemplate","headerStatus","filteredItemsStatus","atLeastOneSelected","notAllSelected","selectedRows","selectRows","rowIDs","selectAllRows","oldSelectionAsSet","onRowSelectionChange","wheelHandler","compareDocumentPosition","DOCUMENT_POSITION_CONTAINS","trackColumnChanges","increment","scroll","collapsedHighlightedItem","rebuildCache","matchInfo","groupByRecord","resolveFilteredSortedData","currentPinnedWidth","newUnpinnedCols","scrollDirective","scrollRow","virtDir","goal","filteredSortedData","c1","c2","groupIndexData","getGroupIncrementData","groupByRecords","getGroupByRecords","collapsedRowsCount","dataRow","groupByIncrement","pagingIncrement","getPagingIncrement","isExpandedGroup","pageIndex","occurenceIndex","searchIndex","lastRowOnPrevPageInrement","activeInfo_2","groupByIncrements","page_1","row_1","childNodes","childNode","rowEditingOverlay","toggleRowEditingOverlay","onRowEditEnter","rowState","configureRowEditingOverlay","rowEditSettings","rowEditingWheelHandler","closeRowEditingOverlay","display","rowStyle","targetRow","rowChanges","writeToData","endRowTransaction","rowObject","valueInTransactions","onRowEditCancel","rowObj","currentCell","descendants","IgxRowEditTemplateDirective","IgxRowEditTextDirective","IgxRowEditActionsDirective","IgxTemplateOutletDirective","_viewContainerRef","_shouldRecreateView","tmplID","igxTemplateOutletContext","cachedView","_embeddedViewsMap","_viewRef","insert","_updateExistingContext","_recreateView","igxTemplateOutlet","emptyView","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","currCtxKeys_1","currCtxKeys_1_1","ctx","IgxGridSummaryComponent","summaryItemHeight","IgxGridFilteringRowComponent","unaryConditionChanged","unaryConditionChangedCallback","conditionChanged","conditionChangedCallback","resetExpression","chipAreaScrollOffset","transformValue","addExpression","_conditionsOverlaySettings","_operatorsOverlaySettings","onTabKeydown","closeButton","defaultDateUI","defaultFilterUI","onPrefixKeyDown","dropDownConditions","inputGroupPrefix","onInputKeyDown","indexToDeselect","scrollChipsWhenAddingExpression","toggleConditionsDropDown","datePickerClose","getCondition","getIconName","conditions","isConditionSelected","conditionName","clearInput","onClearKeyDown","toggleOperatorsDropDown","dropDownOperators","onConditionsChanged","onChipSelected","onLeftArrowKeyDown","scrollChipsOnRemove","onLogicOperatorChanged","scrollChipsOnArrowPress","arrowPosition","chipAraeChildren","containerRect","showHideArrowButtons","containerWidth","chipsAreaWidth","showArrows","containerRectRight","lastChipRectRight","dif","IgxGridCommonModule","IgxDatePickerModule","IgxTemplateOutletModule","IgxFocusModule","IgxTextHighlightModule","IgxTextSelectionModule","IgxBadgeModule","IgxChipsModule","IgxColumnHidingModule","IgxButtonGroupModule","IgxColumnPinningModule","IgxGridGroupByRowComponent","grRowExpr","paddingIndentationCssClass","shouldExpand","handleToggleScroll","Event","alt","isKeySupportedInGroupRow","_getSelectedColIndex","groupRowIndex_1","toggleGroup","IgxGridAPIService","groupingState","arrange_sorting_expressions","groupBy_multiple","clear_groupby","names_1","groupedCols","newSortingExpr","colName","grExprIndex","grpExpandState","groupingExpansionState","grExpr","sortExprIndex","groupingState_1","groupingState_1_1","groupBy_get_expanded_for_group","grState","groupBy_is_row_in_group","rowInGroup","groupBy_toggle_group","expansionState","isEditRowInGroup","groupsExpanded","groupExprA","groupExprB","IgxGroupByRowTemplateDirective","IgxGroupAreaDropDirective","isGrouped","hovered","column_1","IgxGridSortingPipe","IgxGridPreGroupingPipe","IgxGridPostGroupingPipe","IgxGridPagingPipe","IgxGridFilteringPipe","IgxGridComponent","_gridAPI","_groupingExpressions","oldExpressions","newExpressions","chipsGoupingExpressions","_applyGrouping","groupedCols_1","ungroupedCols_1","groupingDoneArgs","groupedColumns","ungroupedColumns","onGroupingDone","_groupingExpandState","highlightItem","collapsedInfo","_hideGroupedColumns","groupingDiffer","_setGroupColsVisibility","_groupsRowList","_groupRowTemplate","_groupAreaTemplate","_groupByMultiple","_groupBy","clearGrouping","_getStateForGroupRow","_toggleGroup","isGroupByRecord","toggleAllGroupRows","templateID","groupByIncrements_1","values_1","prevHierarchy_1","increment_1","gbr","levelIncrement","getLevelIncrement","currentIncrement","currentHierarchy","prevHierarchy","chipsOrderChanged","newGrouping","KeyboardEvent","chipsMovingEnded","columnExpr","groupArea","headerGroupContainer","dropAreaTemplate","defaultDropAreaTemplate","groupTemplate","hideGroupedColumns","IgxGridRowComponent","IgxGridModule","IgxTreeGridAPIService","flatData","expand_row","expandedStates","expansionStates","collapse_row","toggle_row_expansion","treeRecord","isExpanded","get_row_expansion_state","onRowToggle","groupRowIndex","shouldScroll","unpinnedWidth","isScrolledToBottom","indentationLevel","expansionDepth","foreignKey","childData","IgxTreeGridComponent","Infinity","_expansionDepth","_expansionStates","cloneMap","mapIn","mapCloned","mapObj","expandRow","collapseRow","toggleRow","expandAll","collapseAll","parentRowID","parentRecord","parentData","childKey","cascadeOnDelete","IgxTreeGridRowComponent","_treeRow","hasDeletedParent","IgxTreeGridHierarchizingPipe","hierarchicalRecords","treeGridRecordsMap","hierarchizeFlatData","hierarchizeRecursive","rootRecords","getRowID","missingParentRecords","setIndentationLevels","IgxTreeGridFlatteningPipe","expandedLevels","processedRootRecords","processedRecords","getFlatDataRecursive","parentExpanded","updateNonProcessedRecordExpansion","IgxTreeGridSortingPipe","IgxTreeGridPagingPipe","IgxTreeGridTransactionPipe","cloneHierarchicalArray","array_1","array_1_1","clonedItem","IgxTreeGridCellComponent","treeGridAPI","onIndicatorFocus","indicatorWidth","indicator","indicatorStyle","indicatorMargin","marginRight","leftPadding","indentationDiv","indentationStyle","TreeGridFilteringStrategy","filterImpl","filteredChildren","IgxTreeGridFilteringPipe","hierarchyData","resetFilteredOutProperty","expandAllRecursive","updateNonProcessedRecord","IgxTreeGridModule","IgxEmptyListTemplateDirective","IgxDataLoadingTemplateDirective","IgxListItemLeftPanningTemplateDirective","IgxListItemRightPanningTemplateDirective","HammerGesturesManager","doc","inputClass","TouchInput","recognizers","Pan","Pinch","enable","Rotate","Swipe","DIRECTION_HORIZONTAL","supports","eventHandler","mc","getManagerForElement","hammerOptions","addManagerForElement","handler","eventObj","on","off","addGlobalEventListener","getGlobalEventTarget","getDOM","setManagerOption","manager","_hammerManagers","removeManagerForElement","IgxListItemComponent","IgxListPanState","onItemClicked","panStart","isTrue","allowLeftPanning","allowRightPanning","panMove","isPanningToLeft","showLeftPanTemplate","setContentElementLeft","maxLeft","showRightPanTemplate","maxRight","panEnd","relativeOffset","panOffset","widthTriggeringGrip","panEndTriggeringThreshold","oldPanState","_panState","hideLeftAndRightPanTemplates","RIGHT","LEFT","keepItem","onLeftPan","onRightPan","args2","oldState","newState","onPanStateChange","setLeftAndRightTemplatesVisibility","leftVisibility","rightVisibility","leftPanningTemplateElement","visibility","rightPanningTemplateElement","candidates","getElementsByClassName","IgxListComponent","isLoading","dataLoadingTemplate","defaultDataLoadingTemplate","emptyListTemplate","defaultEmptyListTemplate","IgxExpansionPanelBodyComponent","panel","_labelledBy","labelledBy","headerId","IgxExpansionPanelComponent","animationSettings","onCollapsed","onExpanded","IgxExpansionPanelHeaderComponent","ICON_POSITION","_iconTemplate","onAction","onInteraction","iconPosition","IgxExpansionPanelIconDirective","IgxExpansionPanelDescriptionDirective","IgxExpansionPanelTitleDirective","IgxNavbarComponent","actionButtonIcon","isVisible","_triggerAction","IgxNavDrawerItemDirective","IgxNavDrawerTemplateDirective","IgxNavDrawerMiniTemplateDirective","IgxNavigationDrawerComponent","_state","_touchManager","miniWidth","windowWidth","drawer","mini","styleDummy","pinThreshold","getWindowWidth","_widthCache","pinChange","startPosition","enableGestures","center","distance","maxEdgeZone","_panning","_panStartWidth","getExpectedWidth","_panLimit","setElementClass","visibleWidth","newX","percent","hasAnimateWidth","setXSize","toPrecision","resetPan","toggleOpenedEvent","opened","toggleClosedEvent","miniTemplate","contentTemplate","_miniTemplate","setDrawerWidth","_drawer","_overlay","_styleDummy","_maxEdgeZone","updateEdgeZone","checkPinThreshold","ensureEvents","_resizeObserver","_gesturesAttached","opening","closing","set_maxEdgeZone","css","screen","setElementStyle","getDrawerWidth","swipe","panstart","debounce","maxValue","Renderer","IgxNavigationDrawerModule","IgxProcessBarTextTemplateDirective","BaseProgress","_valueInPercent","runAnimation","requestAnimationId","updateProgressSmoothly","passedValue","convertInPercentage","_max","progressValue","valueInPercent","updateProgress","isInLimitRange","updateProgressDirectly","directionFlow","prevValue","comparator","isExceedingUpperLimit","isExceedingLowerLimit","NEXT_LINEAR_ID","NEXT_CIRCULAR_ID","IgxLinearProgressBarComponent","IgxTextAlign","_animate","maxNum","_step","valueInRange","getValueInProperRange","changedValues","onProgressChanged","IgxCircularProgressBarComponent","PI","_circleRadius","valueInProperRange","FRAMES","strokeDashoffset","getProgress","strokeOpacity","STROKE_OPACITY_DVIDER","STROKE_OPACITY_ADDITION","_svgCircle","percentage","_circumference","IgxSliderComponent","SliderType","SLIDER","SliderHandle","TO","RANGE","_maxValue","_minValue","_trackUpperBound","_upperBound","invalidateValue","_trackLowerBound","_lowerBound","upperBound","minValue","lowerBound","_lowerValue","isRange","upperValue","_upperValue","lowerValue","lower","snapValueToStep","upper","hasViewInit","positionHandlesAndUpdateTrack","pMin","valueToFraction","pMax","setTickInterval","thumbFrom","thumbTo","showThumbsLabels","isContinuous","timer","isActiveLabel","$event","activeHandle","FROM","toggleThumbLabel","onPanEnd","hideThumbsLabels","emitValueChanged","hideThumbLabelsOnBlur","incrementSign","newLower","hasValueChanged","onTap","setSliderWidth","setSliderOffset","setPointerPosition","setPointerPercent","closestHandle","setValues","thumbLabelVisibilityDuration","generateTickMarks","getSliderOffset","xOffset","toFixed","num","positionHandle","handle","updateTrack","fromOffset","toOffset","closestTo","xPointer","ticks","valueModStep","snapValue","positions","fractionToValue","pPointer","slider","limit","fraction","fractionToPercent","positionGap","track","isSliderWithDifferentValue","isRangeWithOneDifferentValue","IgxSnackbarComponent","autoHide","displayTime","triggerAction","snackbarAnimationStarted","fromState","animationStarted","snackbarAnimationDone","toOpacity","IgxSwitchComponent","switch","_onSwitchChange","_onSwitchClick","SwitchLabelPosition","IGX_SWITCH_REQUIRED_VALIDATOR","IgxSwitchRequiredDirective","IgxTabTemplateDirective","IgxBottomNavComponent","_itemStyle","tabs","selectedIndex","panels","_selectedPanelHandler","_deselectPanel","selectedTab","onTabDeselected","tab","IgxTabComponent","IgxTabPanelComponent","_tabBar","_tabTemplate","tabTemplate","ngAfterViewChecked","onTabSelected","_changesCount","relatedPanel","IgxTabItemComponent","_tabs","_nativeTabItem","selectedIndicator","nativeTabItem","_onKeyDown","isLeftArrow","tabsArray","viewPortWidth","nativeTabElement","focusDelay","relatedGroup","IgxTabsComponent","IgxRightButtonStyleDirective","getRightButtonStyle","itemsContainerWidth","itemsContainer","headerContainerWidth","ButtonStyle","IgxLeftButtonStyleDirective","getLeftButtonStyle","IgxTabItemTemplateDirective","IgxTabsGroupComponent","groups","contentOffset","tabsContainer","contentsContainer","relatedTab","tabindex","_handleSelection","onTabItemSelected","tabElement","viewPortOffsetWidth","scrollElement","iconLabelFound","TabsType","tabsType","FIXED","_scroll","scrollRight","tabsArray_1","tabsArray_1_1","_selectGroupByIndex","_groupChanges$","resetSelectionOnCollectionChanged","selectableGroup","_selectedGroupHandler","prevSelectedIndex","onTabItemDeselected","_deselectGroup","selectedTabItem","IgxItemListDirective","timePicker","isActive","nextItem","nextHour","nextMinute","nextAmPm","prevHour","prevMinute","prevAmPm","listName","minuteList","_ampmItems","ampmList","hourList","onKeydownEnter","okButtonClick","cancelButtonClick","onHover","onPanMove","IgxTimePickerComponent","IgxHourItemDirective","itemList","isSelectedHour","selectedHour","scrollHourIntoView","IgxMinuteItemDirective","isSelectedMinute","selectedMinute","scrollMinuteIntoView","IgxAmPmItemDirective","isSelectedAmPm","selectedAmPm","scrollAmPmIntoView","IgxTimePickerTemplateDirective","TimePickerHammerConfig","isSpinLoop","Subscription","_isValueValid","setThroughUI","onValidationFailed","_formatTime","_hourView","_minuteView","_ampmView","sections","_hourItems","_prevSelectedHour","_prevSelectedMinute","_prevSelectedAmPm","_alert","_updateHourView","_updateMinuteView","_updateAmPmView","_generateHours","_generateMinutes","_generateAmPm","dialogClosed","_input","_scrollItemIntoView","isListLoop","viewType","itemIntoView","_itemToString","_nextItem","_prevItem","_viewToString","leadZeroHour","leadZeroMinute","itemsCount","formattedMinute","hour","minute","formattedHour","amPM","_minuteItems","_addEmptyItems","hourItemsCount","itemsDelta","_isHourListLoop","minuteItemsCount","_isMinuteListLoop","_getSelectedTime","_convertMinMaxValue","hourIntoView","minuteIntoView","ampmIntoView","onKeydownSpace","hoursInView","minutesInView","ampmInView","ampm","timePickerTemplateDirective","defaultTimePickerTemplate","IgxToastComponent","IGX_TOAST_BOTTOM","IGX_TOAST_MIDDLE","IGX_TOAST_TOP","IgxToastPosition","onShowing","onShown","onHiding","onHidden","mapPositionToClassName","CSS_CLASSES","nDays"],"mappings":"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","sourcesContent":["import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.sine,\n    endOpacity: 1,\n    startOpacity: 0\n};\n\nconst fadeIn: AnimationReferenceMetadata = animation(base, {\n    params: baseParams\n});\n\nconst fadeOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        delay: '0s',\n        duration: '350ms',\n        easing: EaseOut.sine,\n        endOpacity: 0,\n        startOpacity: 1\n    }\n});\n\nexport { fadeIn, fadeOut };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        backfaceVisibility: 'hidden',\n        transformStyle: 'preserve-3d'\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`\n            }),\n            style({\n                offset: 1,\n                transform: `translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 180,\n    endDistance: '0px',\n    rotateX: 1,\n    rotateY: 0,\n    rotateZ: 0,\n    startAngle: 0,\n    startDistance: '0px'\n};\n\nconst flipTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams\n    }\n});\n\nconst flipBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180\n    }\n});\n\nconst flipLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipHorFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px'\n    }\n});\n\nconst flipHorBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px'\n    }\n});\n\nconst flipVerFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipVerBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nexport {\n    flipTop,\n    flipRight,\n    flipBottom,\n    flipLeft,\n    flipHorFwd,\n    flipHorBck,\n    flipVerFwd,\n    flipVerBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            offset: 0,\n            opacity: `{{endOpacity}}`,\n            transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 0,\n    endOpacity: 1,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 1,\n    startAngle: -360,\n    startOpacity: 0,\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    startOpacity: 1\n};\n\nconst rotateInCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseInParams }\n});\n\nconst rotateOutCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseOutParams }\n});\n\nconst rotateInTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateOutTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateInRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateOutRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateInBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateOutBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateInLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateOutLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateInTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateInBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateInDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nexport {\n    rotateInCenter,\n    rotateInTop,\n    rotateInRight,\n    rotateInLeft,\n    rotateInBottom,\n    rotateInTr,\n    rotateInBr,\n    rotateInBl,\n    rotateInTl,\n    rotateInDiagonal1,\n    rotateInDiagonal2,\n    rotateInHor,\n    rotateInVer,\n    rotateOutCenter,\n    rotateOutTop,\n    rotateOutRight,\n    rotateOutLeft,\n    rotateOutBottom,\n    rotateOutTr,\n    rotateOutBr,\n    rotateOutBl,\n    rotateOutTl,\n    rotateOutDiagonal1,\n    rotateOutDiagonal2,\n    rotateOutHor,\n    rotateOutVer\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseInOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            }),\n            style({\n                offset: 0.1,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.2,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n            }),\n            style({\n                offset: 0.3,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.4,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.5,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.6,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.7,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.8,\n                transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`\n\n            }),\n            style({\n                offset: 0.9,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`\n\n            }),\n            style({\n                offset: 1,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '800ms',\n    easing: EaseInOut.quad,\n    endAngle: 0,\n    endDistance: '8px',\n    startAngle: 0,\n    startDistance: '10px',\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst shakeHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'X'\n    }\n});\n\nconst shakeVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y'\n    }\n});\n\nconst shakeTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'top'\n    }\n});\n\nconst shakeBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'center'\n    }\n});\n\nconst shakeLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'center'\n    }\n});\n\nconst shakeCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 8,\n        endDistance: '0',\n        startAngle: 10,\n        startDistance: '0',\n        xPos: 'center',\n        yPos: 'center'\n    }\n});\n\nconst shakeTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst shakeBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nexport {\n    shakeHor,\n    shakeVer,\n    shakeTop,\n    shakeBottom,\n    shakeRight,\n    shakeLeft,\n    shakeCenter,\n    shakeTr,\n    shakeBr,\n    shakeBl,\n    shakeTl\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { IAnimationParams } from '../main';\n\nconst heartbeatBase: AnimationMetadata[] = [\n    style({\n        animationTimingFunction: `ease-out`,\n        transform: `scale(1)`,\n        transformOrigin: `center center`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.1,\n                transform: `scale(0.91)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.17,\n                transform: `scale(0.98)`\n            }),\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.33,\n                transform: `scale(0.87)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.45,\n                transform: `scale(1)`\n            })\n        ])\n    )\n];\n\nconst heartbeatParams: IAnimationParams = {\n    delay: '0s',\n    duration: '1.5s',\n    easing: 'ease-in-out'\n};\n\nconst pulsateBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.5,\n                transform: `scale({{toScale}})`\n            }),\n            style({\n                offset: 1,\n                transform: `scale({{fromScale}})`\n            })\n        ])\n    )\n];\n\nconst pulsateParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.5s',\n    easing: 'ease-in-out',\n    fromScale: 1,\n    toScale: 1.1\n};\n\nconst blinkBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                opacity: .8,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.8,\n                opacity: 0,\n                transform: `scale({{midScale}})`\n            }),\n            style({\n                offset: 1,\n                opacity: 0,\n                transform: `scale({{toScale}})`\n            })\n        ])\n    )\n];\n\nconst blinkParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.8s',\n    easing: 'ease-in-out',\n    fromScale: .2,\n    midScale: 1.2,\n    toScale: 2.2\n};\n\nconst pulsateFwd = animation(pulsateBase, {\n    params: {\n        ...pulsateParams\n    }\n});\n\nconst pulsateBck = animation(pulsateBase, {\n    params: {\n        ...pulsateParams,\n        toScale: .9\n    }\n});\n\nconst heartbeat = animation(heartbeatBase, {\n    params: {\n        ...heartbeatParams\n    }\n});\n\nconst blink = animation(blinkBase, {\n    params: {\n        ...blinkParams\n    }\n});\n\nexport {\n    heartbeat,\n    pulsateFwd,\n    pulsateBck,\n    blink\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `scale{{direction}}({{fromScale}})`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `scale{{direction}}({{toScale}})`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    direction: '',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromScale: .5,\n    startOpacity: 0,\n    toScale: 1,\n    xPos: '50%',\n    yPos: '50%'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseOut.sine,\n    endOpacity: 0,\n    fromScale: 1,\n    startOpacity: 1,\n    toScale: .5\n};\n\nconst scaleInCenter: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst scaleInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTr = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutCenter: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst scaleOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nexport {\n    scaleInTop,\n    scaleInRight,\n    scaleInBottom,\n    scaleInLeft,\n    scaleInCenter,\n    scaleInTr,\n    scaleInBr,\n    scaleInBl,\n    scaleInTl,\n    scaleInVerTop,\n    scaleInVerBottom,\n    scaleInVerCenter,\n    scaleInHorCenter,\n    scaleInHorLeft,\n    scaleInHorRight,\n    scaleOutTop,\n    scaleOutRight,\n    scaleOutBottom,\n    scaleOutLeft,\n    scaleOutCenter,\n    scaleOutTr,\n    scaleOutBr,\n    scaleOutBl,\n    scaleOutTl,\n    scaleOutVerTop,\n    scaleOutVerBottom,\n    scaleOutVerCenter,\n    scaleOutHorCenter,\n    scaleOutHorLeft,\n    scaleOutHorRight\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `{{fromPosition}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `{{toPosition}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromPosition: 'translateY(-500px)',\n    startOpacity: 0,\n    toPosition: 'translateY(0)'\n};\n\nconst baseOutParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    fromPosition: 'translateY(0)',\n    startOpacity: 1,\n    toPosition: 'translateY(-500px)'\n};\n\nconst slideInTop: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst slideInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(-500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateY(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideOutTop: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst slideOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseIn.quad,\n            endOpacity: 0,\n            fromPosition: 'translateY(0)',\n            startOpacity: 1,\n            toPosition: 'translateY(500px)'\n        }\n    }\n);\n\nconst slideOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(-500px)'\n        }\n    }\n);\n\nexport {\n    slideInTop,\n    slideInRight,\n    slideInBottom,\n    slideInLeft,\n    slideInTr,\n    slideInBr,\n    slideInBl,\n    slideInTl,\n    slideOutTop,\n    slideOutBottom,\n    slideOutRight,\n    slideOutLeft,\n    slideOutTr,\n    slideOutBr,\n    slideOutBl,\n    slideOutTl\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst swingBase: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate{{direction}}({{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `rotate{{direction}}({{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst swingParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '.5s',\n    easing: EaseOut.back,\n    endAngle: 0,\n    endOpacity: 1,\n    startAngle: -100,\n    startOpacity: 0,\n    xPos: 'top',\n    yPos: 'center'\n};\n\nconst swingOutParams: IAnimationParams = {\n    ...swingParams,\n    duration: '.55s',\n    easing: EaseIn.back,\n    endAngle: 70,\n    endOpacity: 0,\n    startAngle: 0,\n    startOpacity: 1\n};\n\nconst swingInTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams\n    }\n});\n\nconst swingInRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        startAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        startAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingInTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: 70\n    }\n});\n\nconst swingInRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: 70,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams\n    }\n});\n\nconst swingOutRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        endAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLefttFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        endAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: -100\n    }\n});\n\nconst swingOutRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: -100,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nexport {\n    swingInTopFwd,\n    swingInRightFwd,\n    swingInLeftFwd,\n    swingInBottomFwd,\n    swingInTopBck,\n    swingInRightBck,\n    swingInBottomBck,\n    swingInLeftBck,\n    swingOutTopFwd,\n    swingOutRightFwd,\n    swingOutBottomFwd,\n    swingOutLefttFwd,\n    swingOutTopBck,\n    swingOutRightBck,\n    swingOutBottomBck,\n    swingOutLeftBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut, EaseIn } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{ startOpacity }}`,\n        height: `{{ startHeight }}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{ endOpacity }}`,\n            height: `{{ endHeight }}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    startOpacity: 0,\n    endOpacity: 1,\n    startHeight: '',\n    endHeight: ''\n};\n\nconst growVerIn: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 0,\n        endOpacity: 1,\n        startHeight: '0px',\n        endHeight: '*'\n    }\n});\n\nconst growVerOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 1,\n        endOpacity: 0,\n        startHeight: '*',\n        endHeight: '0px'\n    }\n});\n\nexport { growVerIn, growVerOut };\n","import { IToggleView } from './IToggleView';\n\n/**\n * Common service to be injected between components where those implementing common\n * ToggleView interface can register and toggle directives can call their methods.\n * TODO: Track currently active? Events?\n */\nexport class IgxNavigationService {\n    private navs: { [id: string]: IToggleView; };\n\n    constructor() {\n        this.navs = {};\n    }\n\n    public add(id: string, navItem: IToggleView) {\n        this.navs[id] = navItem;\n    }\n\n    public remove(id: string) {\n        delete this.navs[id];\n    }\n\n    public get(id: string): IToggleView {\n        if (id) {\n            return this.navs[id];\n        }\n    }\n\n    public toggle(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].toggle(...args);\n        }\n    }\n    public open(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].open(...args);\n        }\n    }\n    public close(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].close(...args);\n        }\n    }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\nimport {IgxNavigationService} from './nav.service';\n\n/**\n * Directive that can toggle targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavToggle=\"ID\"> Toggle </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavToggle]' })\nexport class IgxNavigationToggleDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavToggle') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public toggleNavigationDrawer() {\n        this.state.toggle(this.target, true);\n    }\n}\n\n/**\n * Directive that can close targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavClose=\"ID\"> Close </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavClose]' })\nexport class IgxNavigationCloseDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavClose') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public closeNavigationDrawer() {\n        this.state.close(this.target, true);\n    }\n}\n\n@NgModule({\n    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxNavigationModule {}\n","import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output, NgModule, Renderer2, HostListener } from '@angular/core';\n\n@Directive({\n    selector: '[igxButton]'\n})\nexport class IgxButtonDirective {\n    /**\n     *@hidden\n     */\n    private _type = 'flat';\n    /**\n     *@hidden\n     */\n    private _cssClass = 'igx-button';\n    /**\n     *@hidden\n     */\n    private _color: string;\n    /**\n     *@hidden\n     */\n    private _label: string;\n    /**\n     *@hidden\n     */\n    private _backgroundColor: string;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2) { }\n\n    /**\n     * Returns the underlying DOM element\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Called when the button is clicked\n     */\n    @Output()\n    public buttonClick = new EventEmitter<any>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * ```\n     * ```typescript\n     * let buttonRole =  this.button.role;\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @HostBinding('attr.role') public role = 'button';\n    /**\n     * Sets the type of the button.\n     * ```html\n     * <button  igxButton= \"icon\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButton') set type(value: string) {\n        this._type = value || this._type;\n        this._renderer.addClass(this.nativeElement, `${this._cssClass}--${this._type}`);\n    }\n    /**\n     * Sets the button text color.\n     * ```html\n     * <button igxButton=\"gradient\" igxButtonColor=\"blue\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonColor') set color(value: string) {\n        this._color = value || this.nativeElement.style.color;\n        this._renderer.setStyle(this.nativeElement, 'color', this._color);\n    }\n    /**\n     * Sets the background color of the button.\n     * ```html\n     * <button igxButton=\"raised\" igxButtonBackground=\"red\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonBackground') set background(value: string) {\n        this._backgroundColor = value || this._backgroundColor;\n        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);\n    }\n    /**\n     * Sets the `aria-label` attribute.\n     * ```html\n     * <button igxButton= \"flat\" igxLabel=\"Label\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxLabel') set label(value: string) {\n        this._label = value || this._label;\n        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);\n    }\n    /**\n     * Enables/disables the button.\n     *  ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() set disabled(val) {\n        val = !!val;\n        if (val) {\n            this._renderer.addClass(this.nativeElement, `${this._cssClass}--disabled`);\n        } else {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClass}--disabled`);\n        }\n    }\n\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() public selected = false;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click',  ['$event'])\n    public onClick(ev) {\n        this.buttonClick.emit(ev);\n    }\n}\n/**\n * The IgxButtonModule provides the {@link IgxButtonDirective} inside your application.\n */\n@NgModule({\n    declarations: [IgxButtonDirective],\n    exports: [IgxButtonDirective]\n})\nexport class IgxButtonModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    NgModule,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';\nimport { takeUntil, throttle } from 'rxjs/operators';\n\nexport enum RestrictDrag {\n    VERTICALLY,\n    HORIZONTALLY,\n    NONE\n}\n\nexport class IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n}\n\nexport class IgxDropEnterEventArgs {\n    owner: IgxDropDirective;\n    drag: IgxDragDirective;\n    dragData: any;\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n}\n\nexport class IgxDropLeaveEventArgs {\n    owner: IgxDropDirective;\n    drag: IgxDragDirective;\n    dragData: any;\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n}\n\nexport class IgxDropEventArgs {\n    owner: IgxDropDirective;\n    drag: IgxDragDirective;\n    cancel: boolean;\n}\n\nexport interface IDragBaseEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    owner: IgxDragDirective;\n}\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    cancel: boolean;\n}\n\n@Directive({\n    selector: '[igxDrag]'\n})\nexport class IgxDragDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrag')\n    public data: any;\n\n    /**\n     * An @Input property that indicates when the drag should start\n     * By default the drag starts after the draggable element is moved by 5px\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public dragTolerance = 5;\n\n    /**\n     * Sets a custom class that will be added to the `dragGhost` element.\n     * ```html\n     * <div igxDrag [ghostImageClass]=\"'dragGhost'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public ghostImageClass = '';\n\n    /**\n     * An @Input property that hides the draggable element.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\" [hideBaseOnDrag]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = false;\n\n    /**\n     * An @Input property that enables/disables the draggable element animation\n     * when the element is released.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = false;\n\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragStart = new EventEmitter<IDragStartEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (returnMoveEnd)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public returnMoveEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragClicked)=\"dragClicked()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public dragClicked(){\n     *      alert(\"The elemented has been clicked!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragClicked = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.touchAction')\n    public touch = 'none';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.transitionProperty')\n    public transitionProperty = 'top, left';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.top.px')\n    public top1 = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.left.px')\n    public left1 = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.visibility')\n    public _visibility = 'visible';\n\n    /**\n     * Sets the visibility of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     this.myDrag.visible = false;\n     * }\n     * ```\n     */\n    public set visible(bVisible) {\n        this._visibility = bVisible ? 'visible' : 'hidden';\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the visibility state of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let dragVisibilty = this.myDrag.visible;\n     * }\n     * ```\n     */\n    public get visible() {\n        return this._visibility === 'visible';\n    }\n\n    /**\n     * @hidden\n     */\n    public set left(val: number) {\n        requestAnimationFrame(() => {\n            if (this._dragGhost) {\n                this._dragGhost.style.left = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get left() {\n        return parseInt(this._dragGhost.style.left, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public set top(val: number) {\n        requestAnimationFrame(() => {\n            if (this._dragGhost) {\n                this._dragGhost.style.top = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get top() {\n        return parseInt(this._dragGhost.style.top, 10);\n    }\n\n    /**\n     * Returns if the browser supports pointer events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let pointerEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get pointerEventsEnabled() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    /**\n     * Returns if the browser supports touch events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let touchEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get touchEventsEnabled() {\n        return 'ontouchstart' in window;\n    }\n\n    /**\n     * @hidden\n     */\n    public defaultReturnDuration = '0.5s';\n\n    /**\n     * @hidden\n     */\n    protected _startX = 0;\n    /**\n     * @hidden\n     */\n    protected _startY = 0;\n\n    /**\n     * @hidden\n     */\n    protected _dragGhost;\n    /**\n     * @hidden\n     */\n    protected _dragStarted = false;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetX;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetY;\n    /**\n     * @hidden\n     */\n    protected _dragStartX;\n    /**\n     * @hidden\n     */\n    protected _dragStartY;\n    /**\n     * @hidden\n     */\n    protected _pointerDownId = null;\n\n    /**\n     * @hidden\n     */\n    protected _clicked = false;\n    /**\n     * @hidden\n     */\n    protected _lastDropArea = null;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    protected _removeOnDestroy = true;\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef, public zone: NgZone, public renderer: Renderer2) {\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            if (this.pointerEventsEnabled) {\n                fromEvent(this.element.nativeElement, 'pointerdown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(this.element.nativeElement, 'pointermove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(this.element.nativeElement, 'pointerup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else if (this.touchEventsEnabled) {\n                // We don't have pointer events and touch events. Use then mouse events.\n                fromEvent(this.element.nativeElement, 'touchstart').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'touchmove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'touchend').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else {\n                // We don't have pointer events and touch events. Use then mouse events.\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'mousemove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n\n        if (this._dragGhost && this._removeOnDestroy) {\n            this._dragGhost.parentNode.removeChild(this._dragGhost);\n            this._dragGhost = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    public onPointerDown(event) {\n        this._clicked = true;\n        this._pointerDownId = event.pointerId;\n\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            this._startX = event.pageX;\n            this._startY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            this._startX = event.touches[0].pageX;\n            this._startY = event.touches[0].pageY;\n        }\n\n        // Take margins because getBoundingClientRect() doesn't include margins of the element\n        const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n        const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n\n        this._dragOffsetX = (this._startX - this.element.nativeElement.getBoundingClientRect().left) + marginLeft;\n        this._dragOffsetY = (this._startY - this.element.nativeElement.getBoundingClientRect().top) + marginTop;\n        this._dragStartX = this._startX - this._dragOffsetX;\n        this._dragStartY = this._startY - this._dragOffsetY;\n\n        // Set pointer capture so we detect pointermove even if mouse is out of bounds until dragGhost is created.\n        if (this.pointerEventsEnabled) {\n            this.element.nativeElement.setPointerCapture(this._pointerDownId);\n        } else {\n            this.element.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     * Perfmorm drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    public onPointerMove(event) {\n        if (this._clicked) {\n            const dragStartArgs: IDragStartEventArgs = {\n                originalEvent: event,\n                owner: this,\n                cancel: false\n            };\n            let pageX, pageY;\n            if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n                // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n                pageX = event.pageX;\n                pageY = event.pageY;\n            } else if (this.touchEventsEnabled) {\n                pageX = event.touches[0].pageX;\n                pageY = event.touches[0].pageY;\n\n                // Prevent scrolling on touch while dragging\n                event.preventDefault();\n            }\n\n            const totalMovedX = pageX - this._startX;\n            const totalMovedY = pageY - this._startY;\n            if (!this._dragStarted &&\n                (Math.abs(totalMovedX) > this.dragTolerance || Math.abs(totalMovedY) > this.dragTolerance)) {\n                this.zone.run(() => {\n                    this.dragStart.emit(dragStartArgs);\n                });\n\n                if (!dragStartArgs.cancel) {\n                    this._dragStarted = true;\n                    // We moved enough so dragGhost can be rendered and actual dragging to start.\n                    this.createDragGhost(event);\n                }\n                return;\n            } else if (!this._dragStarted) {\n                return;\n            }\n\n            this.left = this._dragStartX + totalMovedX;\n            this.top = this._dragStartY + totalMovedY;\n\n            this.dispatchDragEvents(pageX, pageY);\n        }\n    }\n\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the dragGhost and dispatchind drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    public onPointerUp(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        const eventArgs = {\n            originalEvent: event,\n            owner: this\n        };\n        this._clicked = false;\n        if (this._dragStarted) {\n            if (this._lastDropArea && this._lastDropArea !== this.element.nativeElement) {\n                if (!this.animateOnRelease) {\n                    this.onTransitionEnd(null);\n                }\n\n                // dragging ended over a drop area. Call this after transition because onDrop might remove the element.\n                this.dispatchDropEvent(event.pageX, event.pageY);\n                // else the drop directive needs to call the dropFinished() method so the animation can perform\n            } else if (this.animateOnRelease &&\n                    (this.left !== Math.floor(this._dragStartX) || this.top !== Math.floor(this._dragStartY))) {\n                // If the start positions are the same as the current the transition will not execute.\n                // return the ghost to start position before removing it. See onTransitionEnd.\n                this._dragGhost.style.transitionDuration = this.defaultReturnDuration;\n                this.left = this._dragStartX;\n                this.top = this._dragStartY;\n            } else {\n                this.onTransitionEnd(null);\n            }\n\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n        } else {\n            this.zone.run(() => {\n                this.dragClicked.emit(eventArgs);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * Create dragGhost element - copy of the base element. Bind all needed events.\n     * @param event Pointer event required when the dragGhost is being initialized.\n     */\n    protected createDragGhost(event) {\n        this._dragGhost = this.element.nativeElement.cloneNode(true);\n        this._dragGhost.style.transitionDuration = '0.0s';\n        this._dragGhost.style.position = 'absolute';\n        this._dragGhost.style.top = this._dragStartY + 'px';\n        this._dragGhost.style.left = this._dragStartX + 'px';\n\n        if (this.ghostImageClass) {\n            this.renderer.addClass(this._dragGhost, this.ghostImageClass);\n        }\n\n        document.body.appendChild(this._dragGhost);\n\n        if (this.pointerEventsEnabled) {\n            // The dragGhost takes control for moving and dragging after it has been shown.\n            this._dragGhost.setPointerCapture(this._pointerDownId);\n            this._dragGhost.addEventListener('pointermove', (args) => {\n                this.onPointerMove(args);\n            });\n            this._dragGhost.addEventListener('pointerup', (args) => {\n                this.onPointerUp(args);\n            });\n        }\n\n        if (this.animateOnRelease) {\n            // Transition animation when the dragGhost is released and it returns to it's original position.\n            this._dragGhost.addEventListener('transitionend', (args) => {\n                this.onTransitionEnd(args);\n            });\n        }\n\n        // Hide the base after the dragGhost is created, because otherwise the dragGhost will be not visible.\n        if (this.hideBaseOnDrag) {\n            this.visible = false;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number) {\n        let topDropArea;\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this\n        };\n\n        const elementsFromPoint = this.getElementsAtPoint(pageX, pageY);\n        for (let i = 0; i < elementsFromPoint.length; i++) {\n            if (elementsFromPoint[i].getAttribute('droppable') === 'true' && elementsFromPoint[i] !== this._dragGhost) {\n                topDropArea = elementsFromPoint[i];\n                break;\n            }\n        }\n\n        if (topDropArea) {\n            this.dispatchEvent(topDropArea, 'igxDragOver', eventArgs);\n        }\n\n        if (topDropArea &&\n            (!this._lastDropArea || (this._lastDropArea && this._lastDropArea !== topDropArea))) {\n            if (this._lastDropArea) {\n                this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            }\n\n            this._lastDropArea = topDropArea;\n            this.dispatchEvent(this._lastDropArea, 'igxDragEnter', eventArgs);\n        } else if (!topDropArea && this._lastDropArea) {\n            this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            this._lastDropArea = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number) {\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this\n        };\n\n        this.dispatchEvent(this._lastDropArea, 'igxDrop', eventArgs);\n        this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n        this._lastDropArea = null;\n    }\n\n    /**\n     * @hidden\n     * Update relative positions\n     */\n    public updateDragRelativePos() {\n        if (!this._dragGhost) {\n            return;\n        }\n\n        // Calculate the new dragGhost position to remain where the mouse is, so it doesn't jump\n        const totalDraggedX = this.left - this._dragStartX;\n        const totalDraggedY = this.top - this._dragStartY;\n        const newPosX = this.element.nativeElement.getBoundingClientRect().left;\n        const newPosY = this.element.nativeElement.getBoundingClientRect().top;\n        const diffStartX = this._dragStartX - newPosX;\n        const diffStartY = this._dragStartY - newPosY;\n        this.top = newPosX + totalDraggedX - diffStartX;\n        this.left = newPosY + totalDraggedY - diffStartY;\n    }\n\n    /**\n     * Informs the `igxDrag` directive that it has been dropped/released.\n     * This should usully be called when `animateOnRelease` is set to `true`.\n     * When canceling or defining custom drop logic this tells the igxDrag to update it's positions and\n     * animate correctly to the new position.\n     * ```typescript\n     * public onDropElem(event) {\n     *     // Function bound to the igxDrop directive event `onDrop`\n     *     // This cancels the default drop logic of the `igxDrop`\n     *     event.cancel = true;\n     *     event.drag.dropFinished();\n     * }\n     * ```\n     */\n    public dropFinished() {\n        if (this.animateOnRelease && this._dragGhost) {\n            this.updateDragRelativePos();\n\n            // Return the dragged element to the start. See onTransitionEnd next.\n            // Take margins becuase getBoundingClientRect() doesn't include margins\n            const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n            const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n            const newPosX = this.element.nativeElement.getBoundingClientRect().left;\n            const newPosY = this.element.nativeElement.getBoundingClientRect().top;\n\n            this._dragGhost.style.transitionDuration = this.defaultReturnDuration;\n            this.left = newPosX - marginLeft;\n            this.top = newPosY - marginTop;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onTransitionEnd(event) {\n        if (this._dragStarted && !this._clicked) {\n            if (this.hideBaseOnDrag) {\n                this.visible = true;\n            }\n\n            this._dragGhost.parentNode.removeChild(this._dragGhost);\n            this._dragGhost = null;\n\n            this.element.nativeElement.style.transitionDuration = '0.0s';\n            this._dragStarted = false;\n            this.zone.run(() => {\n                this.returnMoveEnd.emit({\n                    originalEvent: event,\n                    owner: this\n                });\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number) {\n        // correct the coordinates with the current scroll position, because\n        // document.elementsFromPoint conider position within the current viewport\n        // window.pageXOffset == window.scrollX; // always true\n        // using window.pageXOffset for IE9 compatibility\n        const viewPortX = pageX - window.pageXOffset;\n        const viewPortY = pageY - window.pageYOffset;\n        if (document['msElementsFromPoint']) {\n            // Edge and IE special snowflakes\n            return document['msElementsFromPoint'](viewPortX, viewPortY);\n        } else {\n            // Other browsers like Chrome, Firefox, Opera\n            return document.elementsFromPoint(viewPortX, viewPortY);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target, eventName: string, eventArgs: IgxDragCustomEventDetails) {\n        // This way is IE11 compatible.\n        const dragLeaveEvent = document.createEvent('CustomEvent');\n        dragLeaveEvent.initCustomEvent(eventName, false, false, eventArgs);\n        target.dispatchEvent(dragLeaveEvent);\n        // Othersie can be used `target.dispatchEvent(new CustomEvent(eventName, eventArgs));`\n    }\n}\n\n@Directive({\n    selector: '[igxDrop]'\n})\nexport class IgxDropDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrop')\n    public data: any;\n\n    /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onEnter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable elemente has entered the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onEnter = new EventEmitter<IgxDropEnterEventArgs>();\n\n    /** Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onLeave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable elemente has left the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onLeave = new EventEmitter<IgxDropLeaveEventArgs>();\n\n    /** Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onDrop)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable elemente has been dropped in the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDrop = new EventEmitter<IgxDropEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.droppable')\n    public droppable = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.dragOver')\n    public dragover = false;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {\n    }\n\n    ngOnInit() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'igxDragEnter').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onDragEnter(res as CustomEvent<IgxDragCustomEventDetails>));\n\n            fromEvent(this.element.nativeElement, 'igxDragLeave').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragLeave(res));\n            fromEvent(this.element.nativeElement, 'igxDragOver').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragOver(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragOver(event) { }\n\n    /**\n     * @hidden\n     */\n    public onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>) {\n        this.dragover = true;\n        const eventArgs: IgxDropEnterEventArgs = {\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY\n        };\n        this._zone.run(() => {\n            this.onEnter.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragLeave(event) {\n        this.dragover = false;\n        const eventArgs: IgxDropLeaveEventArgs = {\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY\n        };\n        this._zone.run(() => {\n            this.onLeave.emit();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('igxDrop', ['$event'])\n    public onDragDrop(event) {\n        const args: IgxDropEventArgs = {\n            owner: this,\n            drag: event.detail.owner,\n            cancel: false\n        };\n        this._zone.run(() => {\n            this.onDrop.emit(args);\n        });\n\n        if (!args.cancel) {\n            // To do for generic scenario\n            this._renderer.removeChild(event.detail.owner.element.nativeElement.parentNode, event.detail.owner.element.nativeElement);\n            this._renderer.appendChild(this.element.nativeElement, event.detail.owner.element.nativeElement);\n\n            setTimeout(() => {\n                event.detail.owner.dropFinished();\n            }, 0);\n        }\n    }\n}\n\n\n/**\n * The IgxDragDropModule provides the {@link IgxDragDirective}, {@link IgxDropDirective} inside your application.\n */\n@NgModule({\n    declarations: [IgxDragDirective, IgxDropDirective],\n    exports: [IgxDragDirective, IgxDropDirective]\n})\nexport class IgxDragDropModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\n\n@Directive({\n    selector: '[igxFilter]'\n})\nexport class IgxFilterDirective implements OnChanges {\n    @Output() public filtering = new EventEmitter(false); // synchronous event emitter\n    @Output() public filtered = new EventEmitter();\n\n    @Input('igxFilter') public filterOptions: IgxFilterOptions;\n\n    constructor(private element: ElementRef, renderer: Renderer2) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        // Detect only changes of input value\n        if (changes.filterOptions &&\n            changes.filterOptions.currentValue &&\n            changes.filterOptions.currentValue.inputValue !== undefined &&\n            changes.filterOptions.previousValue &&\n            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {\n            this.filter();\n        }\n    }\n\n    private filter() {\n        if (!this.filterOptions.items) {\n            return;\n        }\n\n        const args = { cancel: false, items: this.filterOptions.items };\n        this.filtering.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        const pipe = new IgxFilterPipe();\n\n        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);\n        this.filtered.emit({ filteredItems: filtered });\n    }\n}\n\n@Pipe({\n    name: 'igxFilter',\n    pure: false\n})\n\nexport class IgxFilterPipe implements PipeTransform {\n    public transform(items: any[],\n                     // options - initial settings of filter functionality\n                     options: IgxFilterOptions) {\n\n        let result = [];\n\n        if (!items || !items.length || !options) {\n            return;\n        }\n\n        if (options.items) {\n            items = options.items;\n        }\n\n        result = items.filter((item: any) => {\n            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);\n\n            if (match) {\n                if (options.metConditionFn) {\n                    options.metConditionFn(item);\n                }\n            } else {\n                if (options.overdueConditionFn) {\n                    options.overdueConditionFn(item);\n                }\n            }\n\n            return match;\n        });\n\n        return result;\n    }\n}\n\nexport class IgxFilterOptions {\n    // Input text value that will be used as a filtering pattern (matching condition is based on it)\n    public inputValue = '';\n\n    // Item property, which value should be used for filtering\n    public key: string;\n\n    // Represent items of the list. It should be used to handle decalaratevely defined widgets\n    public items: any[];\n\n    // Function - get value to be tested from the item\n    // item - single item of the list to be filtered\n    // key - property name of item, which value should be tested\n    // Default behavior - returns \"key\"- named property value of item if key si provided,\n    // otherwise textContent of the item's html element\n    public get_value(item: any, key: string): string {\n        let result = '';\n\n        if (key) {\n            result = item[key].toString();\n        } else if (item.element) {\n            if (item.element.nativeElement) {\n                result = item.element.nativeElement.textContent.trim();\n            // Check if element doesn't return the DOM element directly\n            } else if (item.element.textContent) {\n                result = item.element.textContent.trim();\n            }\n        }\n\n        return result;\n    }\n\n    // Function - formats the original text before matching process\n    // Default behavior - returns text to lower case\n    public formatter(valueToTest: string): string {\n        return valueToTest.toLowerCase();\n    }\n\n    // Function - determines whether the item met the condition\n    // valueToTest - text value that should be tested\n    // inputValue - text value from input that condition is based on\n    // Default behavior - \"contains\"\n    public matchFn(valueToTest: string, inputValue: string): boolean {\n        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;\n    }\n\n    // Function - executed after matching test for every matched item\n    // Default behavior - shows the item\n    public metConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = false;\n        }\n    }\n\n    // Function - executed for every NOT matched item after matching test\n    // Default behavior - hides the item\n    public overdueConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = true;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxFilterDirective, IgxFilterPipe],\n    exports: [IgxFilterDirective, IgxFilterPipe],\n    imports: [CommonModule]\n})\nexport class IgxFilterModule {\n}\n","import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../../core/edit-provider';\n\n@Directive({\n    exportAs: 'igxFocus',\n    selector: '[igxFocus]'\n})\nexport class IgxFocusDirective {\n\n    private focusState = true;\n    /**\n     * Returns the state of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let isFocusOn = this.igxFocus.focused;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    @Input('igxFocus')\n    get focused(): boolean {\n        return this.focusState;\n    }\n    /**\n     * Sets the state of the igxFocus.\n     * ```html\n     * <igx-input-group >\n     *  <input #focusContainer igxInput [igxFocus]=\"true\"/>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    set focused(val: boolean) {\n        this.focusState = val;\n        this.trigger();\n    }\n    /**\n     * Gets the native element of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let igxFocusNativeElement = this.igxFocus.nativeElement;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    get nativeElement() {\n        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {\n            return (this.comp[0] as EditorProvider).getEditElement();\n        }\n        return this.element.nativeElement;\n    }\n\n    constructor(private element: ElementRef, @Inject(NG_VALUE_ACCESSOR) @Self() @Optional() private comp?: any[]) { }\n    /**\n     * Triggers the igxFocus state.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * this.igxFocus.trigger();\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    trigger() {\n        if (this.focusState) {\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n}\n/**\n * The IgxFocusModule provides the {@link IgxFocusDirective} inside your application.\n */\n@NgModule({\n    declarations: [IgxFocusDirective],\n    exports: [IgxFocusDirective]\n})\nexport class IgxFocusModule { }\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'igx-display-container',\n    template: `\n        <ng-template\n            #display_container\n            igxScrollInertia\n            [IgxScrollInertiaScrollContainer]=\"scrollContainer\"\n            [IgxScrollInertiaDirection]=\"scrollDirection\">\n        </ng-template>\n    `\n})\nexport class DisplayContainerComponent {\n    @ViewChild('display_container', { read: ViewContainerRef })\n    public _vcr;\n\n    public scrollDirection: string;\n\n    @HostBinding('class')\n    public cssClass = 'igx-display-container';\n\n    @HostBinding('class.igx-display-container--inactive')\n    public notVirtual = true;\n\n    public scrollContainer;\n\n    constructor(public cdr: ChangeDetectorRef, public _viewContainer: ViewContainerRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-horizontal-virtual-helper',\n    template: '<div #horizontal_container class=\"igx-vhelper__placeholder-content\" [style.width.px]=\"width\"></div>'\n})\nexport class HVirtualHelperComponent {\n    @ViewChild('horizontal_container', { read: ViewContainerRef }) public _vcr;\n    @Input() public width: number;\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--horizontal';\n\n    constructor(public elementRef: ElementRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, OnDestroy } from '@angular/core';\n\n@Component({\n    selector: 'igx-virtual-helper',\n    template: '<div #container class=\"igx-vhelper__placeholder-content\" [style.height.px]=\"height\"></div>'\n})\nexport class VirtualHelperComponent implements OnDestroy {\n    @ViewChild('container', { read: ViewContainerRef }) public _vcr;\n    @Input() public itemsLength: number;\n    public height: number;\n\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--vertical';\n\n    public destroyed;\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n    }\n\n}\n","import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxScrollInertia]' })\nexport class IgxScrollInertiaDirective implements OnInit, OnDestroy {\n\n    constructor(private element: ElementRef, private _zone: NgZone) {\n\n    }\n\n    @Input()\n    public IgxScrollInertiaDirection: string;\n\n    @Input()\n    public IgxScrollInertiaScrollContainer: any;\n\n    @Input()\n    public wheelStep = 50;\n\n    @Input()\n    public inertiaStep = 1.5;\n\n    @Input()\n    public swipeToleranceX = 20;\n\n    @Input()\n    public inertiaDeltaY = 3;\n\n    @Input()\n    public inertiaDeltaX = 2;\n\n    @Input()\n    public inertiaDuration = 0.5;\n\n    private _touchInertiaAnimID;\n    private _startX;\n    private _startY;\n    private _touchStartX;\n    private _touchStartY;\n    private _lastTouchEnd;\n    private _lastTouchX;\n    private _lastTouchY;\n    private _savedSpeedsX = [];\n    private _savedSpeedsY;\n    private _totalMovedX;\n    private _offsetRecorded;\n    private _offsetDirection;\n    private _touchPrevented;\n    private _lastMovedX;\n    private _lastMovedY;\n    private _gestureObject;\n    private setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?\n    'msSetPointerCapture' :\n    'setPointerCapture';\n    private releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?\n    'msReleasePointerCapture' :\n    'releasePointerCapture';\n    private _pointer;\n    private _nextX;\n    private _nextY;\n\n    ngOnInit(): void {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.addEventListener('wheel',\n                    (evt) => { this.onWheel(evt); });\n            targetElem.addEventListener('touchstart',\n                    (evt) => { this.onTouchStart(evt); });\n            targetElem.addEventListener('touchmove',\n                    (evt) => { this.onTouchMove(evt); });\n            targetElem.addEventListener('touchend',\n                    (evt) => { this.onTouchEnd(evt); });\n            targetElem.addEventListener('pointerdown',\n                    (evt) => { this.onPointerDown(evt); });\n            targetElem.addEventListener('pointerup',\n                     (evt) => { this.onPointerUp(evt); });\n            targetElem.addEventListener('MSGestureStart',\n                    (evt) => { this.onMSGestureStart(evt); });\n            targetElem.addEventListener('MSGestureChange',\n                    (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n     /**\n     * @hidden\n     * Function that is called when scrolling with the mouse wheel or using touchpad\n     */\n    protected onWheel(evt) {\n        // if no scrollbar return\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        let scrollDeltaX;\n        let scrollDeltaY;\n        const scrollStep = this.wheelStep;\n        const minWheelStep = 1 / this.wheelStep;\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        if (evt.wheelDeltaX) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaX = -evt.wheelDeltaX / 120;\n\n            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {\n                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;\n            }\n        } else if (evt.deltaX) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);\n        }\n\n        /** Get delta for the Y axis*/\n        if (evt.wheelDeltaY) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaY = -evt.wheelDeltaY / 120;\n\n            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {\n                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;\n            }\n        } else if (evt.deltaY) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);\n        }\n        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {\n            this._scrollToX(\n                this._startX + scrollDeltaX * scrollStep\n            );\n            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;\n            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);\n            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {\n                // Prevent navigating through pages when scrolling on Mac\n                evt.preventDefault();\n            }\n        } else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {\n            this._scrollToY(\n                this._startY + scrollDeltaY * scrollStep\n            );\n            const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;\n            const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -\n                this.IgxScrollInertiaScrollContainer.offsetHeight;\n            if (0 < curScrollTop && curScrollTop < maxScrollTop) {\n                evt.preventDefault();\n            }\n        }\n\n    }\n\n    /**\n     * @hidden\n     * Function that is called the first moment we start interacting with the content on a touch device\n     */\n    protected onTouchStart(event) {\n        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {\n            return false;\n        }\n\n        // stops any current ongoing inertia\n        cancelAnimationFrame(this._touchInertiaAnimID);\n\n        const touch = event.touches[ 0 ];\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        this._touchStartX = touch.pageX;\n        this._touchStartY = touch.pageY;\n\n        this._lastTouchEnd = new Date().getTime();\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n        this._savedSpeedsX = [];\n        this._savedSpeedsY = [];\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n\n        this._touchPrevented = false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to scroll the content based on touch interactions\n     */\n    protected onTouchMove(event) {\n        if (typeof MSGesture === 'function') {\n            this._touchPrevented = false;\n            return false;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n\n        const touch = event.touches[ 0 ];\n        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);\n        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);\n\n        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */\n        /* **********************************************************/\n\n\n        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;\n        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {\n            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;\n            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;\n\n            // Save the last 5 speeds between two touchmoves on X axis\n            if (this._savedSpeedsX.length < 5) {\n                this._savedSpeedsX.push(speedX);\n            } else {\n                this._savedSpeedsX.shift();\n                this._savedSpeedsX.push(speedX);\n            }\n\n            // Save the last 5 speeds between two touchmoves on Y axis\n            if (this._savedSpeedsY.length < 5) {\n                this._savedSpeedsY.push(speedY);\n            } else {\n                this._savedSpeedsY.shift();\n                this._savedSpeedsY.push(speedY);\n            }\n        }\n        this._lastTouchEnd = new Date().getTime();\n        this._lastMovedX = this._lastTouchX - touch.pageX;\n        this._lastMovedY = this._lastTouchY - touch.pageY;\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n\n        this._totalMovedX += this._lastMovedX;\n\n        let scrolledXY; // Object: {x, y}\n        /*\tDo not scroll using touch untill out of the swipeToleranceX bounds */\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            scrolledXY = this._scrollTo(this._startX, destY);\n        } else {\n            /*\tRecord the direction the first time we are out of the swipeToleranceX bounds.\n\t\t\t*\tThat way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n\n            /*\tScroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and\n            don't change it after that ever until touchend and again touchstart */\n            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX,\n                destY);\n        }\n\n        if (scrolledXY.x === 0 && scrolledXY.y === 0) {\n            this._touchPrevented = true;\n        }\n\n        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow\n        if (!this._touchPrevented) {\n            event.preventDefault();\n        }\n    }\n\n    protected onTouchEnd(event) {\n        if (typeof MSGesture === 'function') {\n            return;\n        }\n        let speedX = 0;\n        let speedY = 0;\n\n        // savedSpeedsX and savedSpeedsY have same length\n        for (let i = 0; i < this._savedSpeedsX.length; i++) {\n            speedX += this._savedSpeedsX[ i ];\n            speedY += this._savedSpeedsY[ i ];\n        }\n        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;\n        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;\n\n         // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia\n        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&\n                        (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {\n                    this._inertiaInit(speedX, speedY);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch starting on a touch device on IE/Edge\n     */\n    protected onPointerDown(event) {\n        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||\n            typeof MSGesture !== 'function') {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // setPointerCaptureFName is the name of the function that is supported\n        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);\n\n        // create gestureObject only one time to prevent overlapping during intertia\n        if (!this._gestureObject) {\n            this._gestureObject = new MSGesture();\n            this._gestureObject.target = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n        }\n        this._gestureObject.addPointer(this._pointer);\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch ending on a touch device on IE/Edge\n     */\n    protected onPointerUp(event) {\n        if (!this._pointer) {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        /* releasePointerCaptureFName is the name of the function that is supported */\n        event.target[ this.releasePointerCaptureFName ](this._pointer);\n\n        delete this._pointer;\n    }\n\n    /**\n     * @hidden\n     *  Function that is called when a gesture begins on IE/Edge\n     */\n    protected onMSGestureStart(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n\n        this._touchStartX = event.screenX;\n        this._touchStartY = event.screenY;\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n        return false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge\n     */\n    protected onMSGestureChange(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        const touchPos = event,\n            destX = this._startX + this._touchStartX - touchPos.screenX,\n            destY = this._startY + this._touchStartY - touchPos.screenY;\n        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */\n        this._totalMovedX = this._touchStartX - touchPos.screenX;\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            /* Do not scroll horizontally yet while in the tolerance range */\n            this._scrollToY(destY);\n        } else {\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n            /* Once the tolerance is exceeded it can be scrolled horizontally */\n            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);\n        }\n\n        return false;\n    }\n\n    private calcAxisCoords(target, min, max) {\n        if (target === undefined || target < min) {\n            target = min;\n        } else if (target > max) {\n            target = max;\n        }\n\n        return target;\n    }\n\n    private _scrollTo(destX, destY) {\n        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n         // TODO Trigger scrolling event?\n        const scrolledX = this._scrollToX(destX);\n        const scrolledY = this._scrollToY(destY);\n\n        return { x: scrolledX, y: scrolledY };\n    }\n    private _scrollToX(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;\n    }\n    private _scrollToY(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollTop = dest;\n    }\n\n   protected _inertiaInit(speedX, speedY) {\n    const stepModifer = this.inertiaStep,\n        inertiaDuration = this.inertiaDuration;\n    let x = 0;\n    this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n    this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n    // Sets timeout until executing next movement iteration of the inertia\n    const inertiaStep = () => {\n        if (x > 6) {\n            cancelAnimationFrame(this._touchInertiaAnimID);\n            return;\n        }\n\n        if (Math.abs(speedX) > Math.abs(speedY)) {\n            x += 0.05 / (1 * inertiaDuration);\n        } else {\n            x += 0.05 / (1 * inertiaDuration);\n        }\n\n        if (x <= 1) {\n            // We use constant quation to determine the offset without speed falloff befor x reaches 1\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += 1 * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += 1 * speedY * 15 * stepModifer;\n            }\n        } else {\n            // We use the quation \"y = 2 / (x + 0.55) - 0.3\" to determine the offset\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;\n            }\n        }\n\n        // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse\n        this._scrollTo(this._nextX, this._nextY);\n\n        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n    };\n\n    // Start inertia and continue it recursively\n    this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n   }\n\n    ngOnDestroy() {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.removeEventListener('wheel',\n                (evt) => { this.onWheel(evt); });\n            targetElem.removeEventListener('touchstart',\n                (evt) => { this.onTouchStart(evt); });\n            targetElem.removeEventListener('touchmove',\n                (evt) => { this.onTouchMove(evt); });\n            targetElem.removeEventListener('touchend',\n                (evt) => { this.onTouchEnd(evt); });\n            targetElem.removeEventListener('pointerdown',\n                (evt) => { this.onPointerDown(evt); });\n            targetElem.removeEventListener('pointerup',\n                (evt) => { this.onPointerUp(evt); });\n            targetElem.removeEventListener('MSGestureStart',\n                (evt) => { this.onMSGestureStart(evt); });\n            targetElem.removeEventListener('MSGestureChange',\n                (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxScrollInertiaDirective],\n    exports: [IgxScrollInertiaDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxScrollInertiaModule {\n}\n\n","import { CommonModule, NgForOfContext } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    EventEmitter,\n    Input,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\nimport { DisplayContainerComponent } from './display.container';\nimport { HVirtualHelperComponent } from './horizontal.virtual.helper.component';\nimport { VirtualHelperComponent } from './virtual.helper.component';\nimport { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';\n\n@Directive({ selector: '[igxFor][igxForOf]' })\nexport class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy {\n\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForOf: any[];\n\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollOrientation: string;\n\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollContainer: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForContainerSize: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForItemSize: any;\n\n    /**\n     * @hidden\n     */\n    public dc: ComponentRef<DisplayContainerComponent>;\n\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    public state: IForOfState = {\n        startIndex: 0,\n        chunkSize: 0\n    };\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    public totalItemCount: number = null;\n\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkPreload = new EventEmitter<IForOfState>();\n\n    protected hScroll;\n    protected func;\n    protected sizesCache: number[];\n    protected vh: ComponentRef<VirtualHelperComponent>;\n    protected hvh: ComponentRef<HVirtualHelperComponent>;\n    protected _differ: IterableDiffer<T> | null = null;\n    protected _trackByFn: TrackByFunction<T>;\n    private heightCache = [];\n    private _adjustToIndex;\n\n    private get _isScrolledToBottom() {\n        if (!this.getVerticalScroll()) {\n            return true;\n        }\n        const scrollTop = this.getVerticalScroll().scrollTop;\n        const scrollHeight = this.getVerticalScroll().scrollHeight;\n        // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.\n        // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.\n        return Math.round(scrollTop + this.igxForContainerSize) === scrollHeight;\n    }\n\n    private get _isAtBottomIndex() {\n        return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;\n    }\n    private extraRowApplied = false;\n\n    // Start properties related to virtual height handling due to browser limitation\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n\n    /** Height that is being virtualized. */\n    protected _virtHeight = 0;\n\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio = 1;\n\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop = 0;\n\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal =  false;\n    // End properties related to virtual height handling\n\n    @ViewChild(DisplayContainerComponent)\n    private displayContiner: DisplayContainerComponent;\n\n    @ViewChild(VirtualHelperComponent)\n    private virtualHelper: VirtualHelperComponent;\n\n    protected _embeddedViews: Array<EmbeddedViewRef<any>> = [];\n\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        protected _template: TemplateRef<NgForOfContext<T>>,\n        protected _differs: IterableDiffers,\n        private resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef,\n        protected _zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    protected get isRemote(): boolean {\n        return this.totalItemCount !== null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._zone.runOutsideAngular(() =>\n                this.getHorizontalScroll().removeEventListener('scroll', this.func)\n            );\n        } else {\n            const vertical = this.getVerticalScroll();\n            if (vertical) {\n                this._zone.runOutsideAngular(() =>\n                    vertical.removeEventListener('scroll', this.verticalScrollHandler)\n                );\n            }\n        }\n    }\n\n    public verticalScrollHandler(event) {\n        this.onScroll(event);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        let totalSize = 0;\n        const vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;\n\n        const dcFactory: ComponentFactory<DisplayContainerComponent> = this.resolver.resolveComponentFactory(DisplayContainerComponent);\n        this.dc = this._viewContainer.createComponent(dcFactory, 0);\n        this.dc.instance.scrollDirection = this.igxForScrollOrientation;\n        if (typeof MSGesture === 'function') {\n            // On Edge and IE when scrolling on touch the page scroll instead of the grid.\n            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';\n        }\n        if (this.igxForOf && this.igxForOf.length) {\n            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);\n            totalSize = this.initSizesCache(this.igxForOf);\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            if (this.hScroll) {\n                this.state.startIndex = this.getIndexAt(this.hScroll.scrollLeft, this.sizesCache, 0);\n            }\n            this.state.chunkSize = this._calculateChunkSize();\n            for (let i = 0; i < this.state.chunkSize && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n                    this._template,\n                    { $implicit: input, index: this.igxForOf.indexOf(input) }\n                );\n                this._embeddedViews.push(embeddedView);\n            }\n        }\n\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n            const factory: ComponentFactory<VirtualHelperComponent> = this.resolver.resolveComponentFactory(VirtualHelperComponent);\n            this.vh = this._viewContainer.createComponent(factory, 1);\n            this._maxHeight = this._calcMaxBrowserHeight();\n            this.vh.instance.height = this.igxForOf ? this._calcHeight() : 0;\n            this._zone.runOutsideAngular(() => {\n                this.verticalScrollHandler = this.verticalScrollHandler.bind(this);\n                this.vh.instance.elementRef.nativeElement.addEventListener('scroll', this.verticalScrollHandler);\n                this.dc.instance.scrollContainer = this.vh.instance.elementRef.nativeElement;\n            });\n        }\n\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.func = (evt) => { this.onHScroll(evt); };\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            if (!this.hScroll) {\n                const hvFactory: ComponentFactory<HVirtualHelperComponent> =\n                    this.resolver.resolveComponentFactory(HVirtualHelperComponent);\n                this.hvh = vc.createComponent(hvFactory);\n                this.hvh.instance.width = totalSize;\n                this.hScroll = this.hvh.instance.elementRef.nativeElement;\n                this._zone.runOutsideAngular(() => {\n                    this.hvh.instance.elementRef.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            } else {\n                this._zone.runOutsideAngular(() => {\n                    this.hScroll.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            }\n\n            const scrollOffset = this.hScroll.scrollLeft -\n             (this.sizesCache && this.sizesCache.length ? this.sizesCache[this.state.startIndex] : 0);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n            this.dc.instance._viewContainer.element.nativeElement.style.height = '100%';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.removeScrollEventListeners();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        const forOf = 'igxForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                this.initSizesCache(this.igxForOf);\n                this._zone.run(() => {\n                    this._applyChanges(changes);\n                    this.cdr.markForCheck();\n                    this._updateScrollOffset();\n                });\n            }\n        }\n    }\n\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    public addScrollTop(addTop: number): boolean {\n        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {\n            return false;\n        }\n        const originalVirtScrollTop = this._virtScrollTop;\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n\n        this._bScrollInternal = true;\n        this._virtScrollTop += addTop;\n        this._virtScrollTop = this._virtScrollTop > 0 ?\n            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :\n            0;\n\n        this.vh.instance.elementRef.nativeElement.scrollTop += addTop / this._virtHeightRatio;\n        if (Math.abs(addTop / this._virtHeightRatio) < 1) {\n            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px\n            const scrollOffset = this.fixedUpdateAllRows(this._virtScrollTop);\n            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        }\n\n        const curScrollTop = this.vh.instance.elementRef.nativeElement.scrollTop;\n        const maxRealScrollTop = this.vh.instance.elementRef.nativeElement.scrollHeight - containerSize;\n        if ((this._virtScrollTop > 0 && curScrollTop === 0) ||\n            (this._virtScrollTop < maxVirtScrollTop && curScrollTop === maxRealScrollTop)) {\n            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)\n            // Recalculate actual scroll position based on the virtual scroll.\n            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop / this._virtHeightRatio;\n        } else if (this._virtScrollTop === 0 && curScrollTop > 0) {\n            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll\n            this.vh.instance.elementRef.nativeElement.scrollTop = 0;\n        } else if (this._virtScrollTop === maxVirtScrollTop && curScrollTop < maxRealScrollTop) {\n            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll\n            this.vh.instance.elementRef.nativeElement.scrollTop = maxRealScrollTop;\n        }\n        return this._virtScrollTop !== originalVirtScrollTop;\n    }\n\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     * @param index\n     */\n    public scrollTo(index) {\n        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length)) {\n            return;\n        }\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scr = this.igxForScrollOrientation === 'horizontal' ?\n            this.hScroll.scrollLeft : this.vh.instance.elementRef.nativeElement.scrollTop;\n        const isPrevItem = index < this.state.startIndex || scr >  this.sizesCache[index];\n        let nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;\n        if (nextScroll < 0) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hScroll.scrollLeft = nextScroll;\n        } else {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            if (nextScroll > maxVirtScrollTop) {\n                nextScroll = maxVirtScrollTop;\n            }\n            this._bScrollInternal = true;\n            this._virtScrollTop = nextScroll;\n            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop / this._virtHeightRatio;\n            this._adjustToIndex = !isPrevItem ? index : null;\n        }\n    }\n\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    public scrollNext() {\n        const scr = this.igxForScrollOrientation === 'horizontal' ?\n        this.hScroll.scrollLeft :\n        this.vh.instance.elementRef.nativeElement.scrollTop;\n        const endIndex = this.getIndexAt(\n            scr + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        this.scrollTo(endIndex);\n    }\n\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    public scrollPrev() {\n        this.scrollTo(this.state.startIndex - 1);\n    }\n\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    public scrollNextPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hvh.instance.elementRef.nativeElement.scrollLeft += parseInt(this.igxForContainerSize, 10);\n        } else {\n            this.addScrollTop(parseInt(this.igxForContainerSize, 10));\n        }\n    }\n\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    public scrollPrevPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hvh.instance.elementRef.nativeElement.scrollLeft -= parseInt(this.igxForContainerSize, 10);\n        } else {\n            const containerSize = (parseInt(this.igxForContainerSize, 10));\n            this.addScrollTop(-containerSize);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnScrollLeft(colIndex) {\n        return this.sizesCache[colIndex];\n    }\n\n    /**\n     * Returns a reference to the vertical scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getVerticalScroll();\n     * ```\n     */\n    public getVerticalScroll() {\n        if (this.vh) {\n            return this.vh.instance.elementRef.nativeElement;\n        }\n        return null;\n    }\n\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    public getItemCountInView() {\n            const position = this.igxForScrollOrientation === 'horizontal' ?\n                this.hScroll.scrollLeft :\n                this.vh.instance.elementRef.nativeElement.scrollTop;\n            let startIndex = this.getIndexAt(\n                position,\n                this.sizesCache,\n                0\n            );\n            if (position - this.sizesCache[startIndex] > 0 ) {\n                // fisrt item is not fully in view\n                startIndex++;\n            }\n            const endIndex = this.getIndexAt(\n                position + parseInt(this.igxForContainerSize, 10),\n                this.sizesCache,\n                0\n            );\n            return endIndex - startIndex;\n    }\n\n    /**\n     * Returns a reference to the horizontal scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getHorizontalScroll();\n     * ```\n     */\n    public getHorizontalScroll() {\n        return this.getElement(this._viewContainer, 'igx-horizontal-virtual-helper') || this.hScroll;\n    }\n\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    public getSizeAt(index: number) {\n        return this.sizesCache[index + 1] - this.sizesCache[index];\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop =  this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        const prevStartIndex = this.state.startIndex;\n        const scrollOffset = this.fixedUpdateAllRows(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        requestAnimationFrame(() => {\n            // check if height/width has changes in views.\n            this.recalcUpdateSizes();\n        });\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    public recalcUpdateSizes() {\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n        'width' : 'height';\n        const diffs = [];\n        let totalDiff = 0;\n        for (let i = 0; i < this._embeddedViews.length; i++) {\n            const view = this._embeddedViews[i];\n            const rNode = view.rootNodes.find((node) => node.nodeType === Node.ELEMENT_NODE);\n            if (rNode) {\n                const h = Math.max(rNode.offsetHeight, rNode.clientHeight, parseInt(this.igxForItemSize, 10));\n                const index = this.state.startIndex + i;\n                if (!this.isRemote && !this.igxForOf[index]) {\n                    continue;\n                }\n                const oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];\n                const newVal = dimension === 'height' ?  h : rNode.clientWidth;\n                if (dimension === 'height') {\n                    this.heightCache[index] = newVal;\n                } else {\n                    this.igxForOf[index][dimension] = newVal;\n                }\n                const currDiff = newVal - oldVal;\n                diffs.push(currDiff);\n                totalDiff += currDiff;\n                this.sizesCache[index + 1] += totalDiff;\n            }\n        }\n        // update cache\n        if (Math.abs(totalDiff) > 0) {\n            for (let j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {\n                this.sizesCache[j] += totalDiff;\n            }\n\n            // update scrBar heights/widths\n            if (this.igxForScrollOrientation === 'horizontal') {\n                const totalWidth = parseInt(this.hScroll.children[0].style.width, 10) + totalDiff;\n                this.hScroll.children[0].style.width = totalWidth + 'px';\n            }\n            const reducer = (acc, val) => acc + val;\n            if (this.igxForScrollOrientation === 'vertical') {\n                const scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;\n                const hSum = this.heightCache.reduce(reducer);\n                if (hSum > this._maxHeight) {\n                    this._virtHeightRatio =  hSum / this._maxHeight;\n                }\n                this.vh.instance.height = Math.min(this.vh.instance.height + totalDiff, this._maxHeight);\n                this._virtHeight = hSum;\n                if (!this.vh.instance.destroyed) {\n                    this.vh.instance.cdr.detectChanges();\n                }\n                if (scrToBottom && !this._isAtBottomIndex) {\n                    const containerSize = parseInt(this.igxForContainerSize, 10);\n                    const scrollOffset = this.fixedUpdateAllRows(this._virtHeight - containerSize);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n                    return;\n                }\n                if (this._adjustToIndex) {\n                    // in case scrolled to specific index where after scroll heights are changed\n                    // need to adjust the offsets so that item is last in view.\n                    const updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;\n                    const sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);\n                    const currOffset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = (currOffset - sumDiffs) + 'px';\n                    this._adjustToIndex = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllRows(inScrollTop: number): number {\n        const embeddedViewCopy = Object.assign([], this._embeddedViews);\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n\n        const ind = this.getIndexAt(\n            inScrollTop,\n            this.sizesCache,\n            0\n        );\n        // floating point number calculations are flawed so we need to handle rounding errors.\n        let currIndex = ind % 1 > 0.999 ? Math.round(ind) : Math.floor(ind);\n        const endingIndex = this.state.chunkSize + currIndex;\n        if (endingIndex > count) {\n            currIndex = count - this.state.chunkSize;\n        }\n\n        // We update the startIndex before recalculating the chunkSize.\n        const bUpdatedStart = this.state.startIndex !== currIndex;\n        this.state.startIndex = currIndex;\n\n        if (bUpdatedStart) {\n            this.onChunkPreload.emit(this.state);\n        }\n        if (this.isRemote) {\n            return inScrollTop - this.sizesCache[this.state.startIndex];\n        }\n\n        for (let i = this.state.startIndex; i < endingIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = embeddedViewCopy.shift();\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.igxForOf.indexOf(input);\n        }\n        const scrOffset = inScrollTop - this.sizesCache[this.state.startIndex];\n        return scrOffset;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n        const curScrollLeft = event.target.scrollLeft;\n        const prevStartIndex = this.state.startIndex;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllCols(curScrollLeft);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllCols(inScrollLeft) {\n        const startIndex = this.getIndexAt(\n            inScrollLeft,\n            this.sizesCache,\n            0\n        );\n        const bUpdatedStart = this.state.startIndex !== startIndex;\n        if (bUpdatedStart) {\n            this.onChunkPreload.emit(this.state);\n        }\n        /*recalculate and apply page size.*/\n        if (startIndex + this.state.chunkSize > this.igxForOf.length) {\n            this.state.startIndex = this.igxForOf.length - this.state.chunkSize;\n        } else {\n            this.state.startIndex = startIndex;\n        }\n        const embeddedViewCopy = Object.assign([], this._embeddedViews);\n        const endingIndex = this.state.chunkSize + this.state.startIndex;\n        for (let i = this.state.startIndex; i < endingIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = embeddedViewCopy.shift();\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.igxForOf.indexOf(input);\n        }\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n        const scrollWidth = parseInt(this.hScroll.children[0].style.width, 10);\n        const scrOffset = inScrollLeft - this.sizesCache[this.state.startIndex];\n        return scrOffset;\n    }\n\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    @Input()\n    get igxForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>) { this._trackByFn = fn; }\n\n    /**\n     * @hidden\n     */\n    protected _applyChanges(changes: IterableChanges<T>) {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.igxForOf.indexOf(input);\n            }\n            this.dc.changeDetectorRef.detectChanges();\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                this.recalcUpdateSizes();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.position = 'absolute';\n        style.top = '9999999999999999px';\n        document.body.appendChild(div);\n        const size = Math.abs(div.getBoundingClientRect()['top']);\n        document.body.removeChild(div);\n        return size;\n    }\n\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number {\n        let chunkSize = 0;\n        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {\n            if (!this.sizesCache) {\n               this.initSizesCache(this.igxForOf);\n            }\n            chunkSize = this._calcMaxChunkSize();\n            if (this.igxForOf && chunkSize > this.igxForOf.length) {\n               chunkSize = this.igxForOf.length;\n            }\n        } else {\n            if (this.igxForOf) {\n                chunkSize = this.igxForOf.length;\n            }\n        }\n        return chunkSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElement(viewref, nodeName) {\n        const elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);\n        return elem.length > 0 ? elem[0] : null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number {\n        let totalSize = 0;\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n        'width' : 'height';\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            if (dimension === 'height') {\n                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;\n                size = parseInt(this.igxForItemSize, 10) || 0;\n                this.heightCache.push(size);\n            } else {\n                size = parseInt(items[i][dimension], 10) || 0;\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize() {\n        let i = 0;\n        let length = 0;\n        let maxLength = 0;\n        const arr = [];\n        let sum = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n        'width' : 'height';\n        const reducer = (accumulator, currentItem) => accumulator + parseInt(currentItem[dimension], 10);\n        const availableSize = parseInt(this.igxForContainerSize, 10);\n        for (i; i < this.igxForOf.length; i++) {\n            let item = this.igxForOf[i];\n            if (dimension === 'height') {\n                item = { value: this.igxForOf[i], height: this.heightCache[i] };\n            }\n            const size = dimension === 'height' ?\n            this.heightCache[i] :\n            parseInt(item[dimension], 10);\n            sum = arr.reduce(reducer,  size);\n            if (sum <= availableSize) {\n                 arr.push(item);\n                 length = arr.length;\n                 if (i === this.igxForOf.length - 1) {\n                    // reached end without exceeding\n                    // include prev items until size is filled or first item is reached.\n                    let prevIndex = this.igxForOf.indexOf(arr[0]) - 1;\n                    while (prevIndex >= 0 && sum <= availableSize) {\n                        prevIndex = this.igxForOf.indexOf(arr[0]) - 1;\n                        const prevItem = this.igxForOf[prevIndex];\n                        const prevSize =  dimension === 'height' ?\n                        this.heightCache[prevIndex] :\n                        parseInt(prevItem[dimension], 10);\n                        sum = arr.reduce(reducer,  prevSize);\n                        arr.unshift(prevItem);\n                        length = arr.length;\n                    }\n                 }\n             } else {\n                 arr.push(item);\n                 length = dimension === 'width' ? arr.length + 1 : arr.length;\n                 if (dimension === 'height' && sum - availableSize < parseInt(this.igxForItemSize, 10)) {\n                     // add one more for vertical smooth scroll\n                     length++;\n                 }\n                 arr.splice(0, 1);\n             }\n             if (length > maxLength) {\n                 maxLength = length;\n             }\n        }\n        return maxLength;\n    }\n\n    /**\n     * @hidden\n     */\n     protected getIndexAt(left, set, index) {\n         let start = 0;\n         let end = set.length - 1;\n         if (left === 0) {\n             return 0;\n         }\n         while (start <= end) {\n             const midIdx = Math.floor((start + end) / 2);\n             const midLeft = set[midIdx];\n             const cmp = left - midLeft;\n             if (cmp > 0) {\n                 start = midIdx + 1;\n             } else if (cmp < 0) {\n                 end = midIdx - 1;\n             } else {\n                 return midIdx;\n             }\n         }\n         return end;\n    }\n\n    protected _recalcScrollBarSize() {\n        const count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);\n        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);\n        if (this.igxForScrollOrientation === 'horizontal') {\n            const totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;\n            this.hScroll.style.width = this.igxForContainerSize + 'px';\n            this.hScroll.children[0].style.width = totalWidth + 'px';\n        }\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.vh.instance.elementRef.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';\n            this.vh.instance.height = this._calcHeight();\n        }\n    }\n\n    private _calcHeight(): number {\n        let height = this.initSizesCache(this.igxForOf);\n        this._virtHeight = height;\n        if (height > this._maxHeight) {\n            this._virtHeightRatio = height / this._maxHeight;\n            height = this._maxHeight;\n        }\n        return height;\n    }\n\n    protected _recalcOnContainerChange(changes: SimpleChanges) {\n        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (prevChunkSize !== this.state.chunkSize) {\n            this.onChunkLoad.emit(this.state);\n        }\n        if (this.sizesCache && this.hScroll && this.hScroll.scrollLeft !== 0) {\n            // Updating horizontal chunks and offsets based on the new scrollLeft\n            const scrollOffset = this.fixedUpdateAllCols(this.hScroll.scrollLeft);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem() {\n        const oldElem = this._embeddedViews.pop();\n        oldElem.destroy();\n\n        this.state.chunkSize--;\n    }\n\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            { $implicit: input, index: elemIndex }\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n\n        this._zone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange() {\n        const chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();\n        if (chunkSize > this.state.chunkSize) {\n            const diff = chunkSize - this.state.chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.addLastElem();\n            }\n        } else if (chunkSize < this.state.chunkSize) {\n            const diff = this.state.chunkSize - chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.removeLastElem();\n            }\n        }\n    }\n\n    protected _updateScrollOffset() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._updateHScrollOffset();\n        } else {\n            this._updateVScrollOffset();\n        }\n    }\n    private _updateVScrollOffset() {\n        let scrollOffset = 0;\n        const vScroll = this.vh.instance.elementRef.nativeElement;\n        scrollOffset = vScroll && parseInt(vScroll.style.height, 10) ?\n        vScroll.scrollTop - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n    }\n    private _updateHScrollOffset() {\n        let scrollOffset = 0;\n        scrollOffset = this.hScroll && parseInt(this.hScroll.children[0].style.width, 10) ?\n        this.hScroll.scrollLeft - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n    const name = 'name';\n    return type[name] || typeof type;\n}\n\nexport interface IForOfState {\n    startIndex?: number;\n    chunkSize?: number;\n}\n\n@Directive({\n    selector: '[igxGridFor][igxGridForOf]'\n})\nexport class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n\n    @Input()\n    set igxGridForOf(value) {\n        this.igxForOf = value;\n    }\n\n    get igxGridForOf() {\n        return this.igxForOf;\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.removeScrollEventListeners();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const forOf = 'igxGridForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                this.initSizesCache(this.igxForOf);\n                this._applyChanges(changes);\n                this.cdr.markForCheck();\n                this._updateScrollOffset();\n            }\n        }\n    }\n\n    onScroll(event) {\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n\n        let scrollOffset = this.fixedUpdateAllRows(this._virtScrollTop);\n\n        scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        requestAnimationFrame(() => {\n            this.recalcUpdateSizes();\n        });\n    }\n\n    onHScroll(scrollAmount) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!this.hScroll || !parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllCols(scrollAmount);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            { $implicit: input, index: elemIndex }\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n    }\n\n    protected _applyChanges(changes: IterableChanges<T>) {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.igxForOf.indexOf(input);\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                requestAnimationFrame(() => {\n                    this.recalcUpdateSizes();\n                });\n            }\n        }\n    }\n}\n/**\n * The IgxForOfModule provides the {@link IgxForOfDirective}, inside your application.\n */\n\n@NgModule({\n    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    exports: [IgxForOfDirective, IgxGridForOfDirective],\n    imports: [IgxScrollInertiaModule, CommonModule]\n})\n\nexport class IgxForOfModule {\n}\n","import { Directive, HostBinding, Input, NgModule } from '@angular/core';\n\n@Directive({\n    selector: '[igxLayout]'\n})\nexport class IgxLayoutDirective {\n    /**\n     * Sets the default flow direction of the container's children.\n     *\n     * Defaults to `rows`.\n     *\n     * ```html\n     *  <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     *  </div>\n     * ```\n     */\n    @Input('igxLayoutDir') public dir = 'row';\n\n    /**\n     * Defines the direction flex children are placed in the flex container.\n     *\n     * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutReverse=\"true\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutReverse') public reverse = false;\n\n    /**\n     * By default the immediate children will all try to fit onto one line.\n     *\n     * The default value `nowrap` sets this behavior.\n     *\n     * Other accepted values are `wrap` and `wrap-reverse`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\"\n     *   igxLayoutWrap=\"wrap\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutWrap') public wrap = 'nowrap';\n\n    /**\n     * Defines the alignment along the main axis.\n     *\n     * Defaults to `flex-start` which packs the children toward the start line.\n     *\n     * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutJustify=\"space-between\">\n     *    <div>1</div>\n     *    <div>2</div>\n     *    <div>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutJustify') public justify = 'flex-start';\n\n    /**\n     * Defines the default behavior for how children are laid out along the corss axis of the current line.\n     *\n     * Defaults to `flex-start`.\n     *\n     * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutItemAlign=\"start\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutItemAlign') public itemAlign = 'stretch';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display') public display = 'flex';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-wrap') get flexwrap() { return this.wrap; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.justify-content') get justifycontent() { return this.justify; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.align-items') get align() { return this.itemAlign; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-direction')\n    get direction() {\n        if (this.reverse) {\n            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';\n        }\n        return (this.dir === 'row') ? 'row' : 'column';\n    }\n}\n\n@Directive({\n    selector: '[igxFlex]'\n})\nexport class IgxFlexDirective {\n\n    /**\n     * Applies the `grow` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content1</div>\n     *    <div igxFlex igxFlexGrow=\"1\">Content2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexGrow') public grow = 1;\n\n    /**\n     * Applies the `shrink` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content1</div>\n     *    <div igxFlex igxFlexShrink=\"0\">Content2</div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexShrink') public shrink = 1;\n\n    /**\n     * Applies the directive to an element.\n     *\n     * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.\n     *\n     * ```html\n     * <div igxFlex>Content</div>\n     * ```\n     */\n    @Input('igxFlex') public flex = '';\n\n    /**\n     * Applies the `order` attribute to an element that uses the directive.\n     *\n     * Default value is `0`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexOrder=\"1\">Content1</div>\n     *    <div igxFlex igxFlexOrder=\"0\">Content2</div>\n     *    <div igxFlex igxFlexOrder=\"2\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexOrder') public order = 0;\n\n    /**\n     * Applies the `flex-basis` attribute to an element that uses the directive.\n     *\n     * Default value is `auto`.\n     *\n     * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.\n     *\n     * ```html\n     * <div igxFlex igxFlexBasis=\"fit-content\">Content</div>\n     * ```\n     */\n    @Input('igxFlexBasis') public basis = 'auto';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex')\n    get style() {\n        if (this.flex) {\n            return `${this.flex}`;\n        }\n        return `${this.grow} ${this.shrink} ${this.basis}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.order')\n    get itemorder() {\n        return this.order || 0;\n    }\n}\n\n@NgModule({\n    declarations: [IgxFlexDirective, IgxLayoutDirective],\n    exports: [IgxFlexDirective, IgxLayoutDirective]\n})\nexport class IgxLayoutModule { }\n","/**\n * @hidden\n */\nexport const MASK_FLAGS = [ 'C', '&', 'a', 'A', '?', 'L', '9', '0', '#' ];\n\n/**\n * @hidden\n */\nexport const KEYS = {\n    Ctrl : 17,\n    Z : 90,\n    Y : 89,\n    X : 88,\n    BACKSPACE : 8,\n    DELETE : 46\n  };\n\n\n/**\n * @hidden\n */\nexport class MaskHelper {\n    private _cursor;\n    public get cursor() {\n        return this._cursor;\n    }\n    public data: boolean;\n\n    public parseValueByMask(value, maskOptions, cursor): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (inputValue.length < mask.length) { // BACKSPACE, DELETE\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);\n                this._cursor = cursor + 1;\n            } else {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);\n                this._cursor = cursor + 1;\n                for (let i = this._cursor; i < 0; i--) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor--;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        } else {\n            const char = inputValue[cursor];\n            let isCharValid = this.validateCharOnPostion(char, cursor, mask);\n            if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, cursor, char);\n                    this._cursor = cursor + 1;\n                } else {\n                    this._cursor = cursor;\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                this._cursor = ++cursor;\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor = ++cursor;\n                    } else {\n                        isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, cursor, char);\n                            this._cursor = ++cursor;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskOnInit(inputVal, maskOptions): string {\n        let outputVal = '';\n        let value = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n        const literalValues: string[] = Array.from(literals.values());\n\n        if (inputVal != null) {\n            value = inputVal.toString();\n        }\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        if (!value) {\n            return outputVal;\n        }\n\n        const nonLiteralValues: string[] = this.getNonLiteralValues(value, literalValues);\n\n        for (let i = 0; i < nonLiteralValues.length; i++) {\n            const char = nonLiteralValues[i];\n            const isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);\n\n            if (!isCharValid && char !== maskOptions.promptChar) {\n                nonLiteralValues[i] = maskOptions.promptChar;\n            }\n        }\n\n        if (nonLiteralValues.length > nonLiteralIndeces.length) {\n            nonLiteralValues.splice(nonLiteralIndeces.length);\n        }\n\n        let pos = 0;\n        for (const nonLiteralValue of nonLiteralValues) {\n            const char = nonLiteralValue;\n            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);\n        }\n\n        return outputVal;\n    }\n\n    public restoreValueFromMask(value, maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalValues: string[] = Array.from(literals.values());\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                if (val !== maskOptions.promptChar) {\n                    outputVal += val;\n                }\n            }\n        }\n\n        return outputVal;\n    }\n\n    public parseValueByMaskUponSelection(value, maskOptions, cursor, selection): string {\n        let isCharValid: boolean;\n        let inputValue: string = value;\n        const char: string = inputValue[cursor];\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (!this.data) {\n            this._cursor = cursor < 0 ? ++cursor : cursor;\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                selection--;\n                if (selection > 0) {\n                    for (let i = 0; i < selection; i++) {\n                        cursor++;\n                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?\n                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :\n                            this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    }\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);\n                this._cursor++;\n                selection--;\n                let isMarked = false;\n                if (selection > 0) {\n                    cursor = this._cursor;\n                    for (let i = 0; i < selection; i++) {\n                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                            isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                            if (isCharValid && !isMarked) {\n                                inputValue = this.insertCharAt(inputValue, cursor, char);\n                                cursor++;\n                                this._cursor++;\n                                isMarked = true;\n                            } else {\n                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                                cursor++;\n                            }\n                        } else {\n                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                            if (cursor === this._cursor) {\n                                this._cursor++;\n                            }\n                            cursor++;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (this._cursor < 0) {\n                this._cursor++;\n                cursor++;\n            }\n            cursor++;\n            this._cursor = cursor;\n            for (let i = 0; i < selection; i++) {\n                if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                    cursor++;\n                } else {\n                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    cursor++;\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskUponCopyPaste(value, maskOptions, cursor, clipboardData, selection): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        const selectionEnd = cursor + selection;\n\n        this._cursor = cursor;\n        for (const clipboardSym of clipboardData) {\n            const char = clipboardSym;\n\n            if (this._cursor > mask.length) {\n                return inputValue;\n            }\n\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                }\n            } else {\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor++;\n                    } else {\n                        const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                        }\n                        break;\n                    }\n                }\n            }\n\n            selection--;\n        }\n\n        if (selection > 0) {\n            for (let i = this._cursor; i < selectionEnd; i++) {\n                if (literalKeys.indexOf(this._cursor) !== -1) {\n                    this._cursor++;\n                } else {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    private validateCharOnPostion(inputChar: string, position: number, mask: string): boolean {\n        let regex: RegExp;\n        let isValid: boolean;\n        const letterOrDigitRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterDigitOrSpaceRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const letterRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letteSpaceRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const digitRegEx = '[\\\\d]';\n        const digitSpaceRegEx = '[\\\\d\\\\u0020]';\n        const digitSpecialRegEx = '[\\\\d-\\\\+]';\n\n        switch (mask.charAt(position)) {\n            case 'C':\n                isValid = inputChar !== '';\n                break;\n            case '&':\n                regex = new RegExp('[\\\\u0020]');\n                isValid = !regex.test(inputChar);\n                break;\n            case 'a':\n                regex = new RegExp(letterDigitOrSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'A':\n                regex = new RegExp(letterOrDigitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '?':\n                regex = new RegExp(letteSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'L':\n                regex = new RegExp(letterRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '0':\n                regex = new RegExp(digitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '9':\n                regex = new RegExp(digitSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '#':\n                regex = new RegExp(digitSpecialRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            default: {\n                isValid = null;\n            }\n        }\n\n        return isValid;\n    }\n    private replaceCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index + 1);\n        }\n    }\n    private insertCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index);\n        }\n    }\n    private getMaskLiterals(mask: string): Map<number, string> {\n        const literals = new Map<number, string>();\n\n        for (let i = 0; i < mask.length; i++) {\n            const char = mask.charAt(i);\n            if (MASK_FLAGS.indexOf(char) === -1) {\n                literals.set(i, char);\n            }\n        }\n\n        return literals;\n    }\n    private getNonLiteralIndeces(mask: string, literalKeys: number[]): number[] {\n        const nonLiteralsIndeces: number[] = new Array();\n\n        for (let i = 0; i < mask.length; i++) {\n            if (literalKeys.indexOf(i) === -1) {\n                nonLiteralsIndeces.push(i);\n            }\n        }\n\n        return nonLiteralsIndeces;\n    }\n    private getNonLiteralValues(value: string, literalValues: string[]): string[] {\n        const nonLiteralValues: string[] = new Array();\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                nonLiteralValues.push(val);\n            }\n        }\n\n        return nonLiteralValues;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    NgModule,\n    OnInit,\n    Output\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { KEYS, MaskHelper } from './mask-helper';\n\nconst noop = () => { };\n\n@Directive({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],\n    selector: '[igxMask]'\n})\nexport class IgxMaskDirective implements OnInit, ControlValueAccessor {\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input('igxMask')\n    public mask: string;\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public promptChar: string;\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public includeLiterals: boolean;\n    /**\n     *@hidden\n     */\n    @Input()\n    private dataValue: string;\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<IMaskEventArgs>();\n    /**\n     *@hidden\n     */\n    private get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     *@hidden\n     */\n    private set value(val) {\n        this.nativeElement.value = val;\n    }\n    /**\n     *@hidden\n     */\n    private get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private get selectionStart() {\n        return this.nativeElement.selectionStart;\n    }\n    /**\n     *@hidden\n     */\n    private get selectionEnd() {\n        return this.nativeElement.selectionEnd;\n    }\n    /**\n     *@hidden\n     */\n    private _ctrlDown: boolean;\n    /**\n     *@hidden\n     */\n    private _cachedVal: string;\n    /**\n     *@hidden\n     */\n    private _paste: boolean;\n    /**\n     *@hidden\n     */\n    private _selection: number;\n    /**\n     *@hidden\n     */\n    private _maskOptions = {\n        format: '',\n        promptChar: ''\n    };\n    /**\n     *@hidden\n     */\n    private _key;\n    /**\n     *@hidden\n     */\n    private _cursorOnPaste;\n    /**\n     *@hidden\n     */\n    private _valOnPaste;\n    /**\n     *@hidden\n     */\n    private maskHelper: MaskHelper;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    constructor(private elementRef: ElementRef) {\n        this.maskHelper = new MaskHelper();\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';\n        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';\n        this.nativeElement.setAttribute('placeholder', this.mask);\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = true;\n        }\n\n        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {\n            event.preventDefault();\n        }\n\n        this._key = key;\n        this._selection = Math.abs(this.selectionEnd - this.selectionStart);\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keyup', ['$event'])\n    public onKeyup(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = false;\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('paste', ['$event'])\n    public onPaste(event): void {\n        this._paste = true;\n\n        this._valOnPaste = this.value;\n        this._cursorOnPaste = this.getCursorPosition();\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('input', ['$event'])\n    public onInputChanged(event): void {\n        if (this._paste) {\n            this._paste = false;\n\n            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());\n            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(\n                this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        } else {\n            const currentCursorPos = this.getCursorPosition();\n\n            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);\n\n            this.value = this._selection && this._selection !== 0 ?\n                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :\n                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        }\n\n        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : rawVal;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);\n    }\n    /**\n     *@hidden\n     */\n    private getCursorPosition(): number {\n        return this.nativeElement.selectionStart;\n    }\n    /**\n     *@hidden\n     */\n    private setCursorPosition(start: number, end: number = start): void {\n        this.nativeElement.setSelectionRange(start, end);\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this.value = this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : value;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\n\nexport interface IMaskEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n@NgModule({\n    declarations: [IgxMaskDirective],\n    exports: [IgxMaskDirective],\n    imports: [CommonModule]\n})\nexport class IgxMaskModule { }\n","/**\n *@hidden\n */\nexport function cloneArray(array, deep?: boolean) {\n    const arr = [];\n    if (!array) {\n        return arr;\n    }\n    let i = array.length;\n    while (i--) {\n        arr[i] = deep ? cloneValue(array[i]) : array[i];\n    }\n    return arr;\n}\n\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport function cloneHierarchicalArray(array: any[], childDataKey: any): any[] {\n    const result: any[] = [];\n    if (!array) {\n        return result;\n    }\n\n    for (const item of array) {\n        if (Array.isArray(item[childDataKey])) {\n            const clonedItem = cloneValue(item);\n            clonedItem[childDataKey] = cloneHierarchicalArray(clonedItem[childDataKey], childDataKey);\n            result.push(clonedItem);\n        } else {\n            result.push(item);\n        }\n    }\n    return result;\n}\n\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport function mergeObjects(obj1: {}, obj2: {}): any {\n    if (!isObject(obj1)) {\n        throw new Error(`Cannot merge into ${obj1}. First param must be an object.`);\n    }\n\n    if (!isObject(obj2)) {\n        return obj1;\n    }\n\n    for (const key of Object.keys(obj2)) {\n        obj1[key] = cloneValue(obj2[key]);\n    }\n\n    return obj1;\n}\n\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n *@hidden\n */\nexport function cloneValue(value: any): any {\n    if (isDate(value)) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return [...value];\n    }\n\n    if (value instanceof Map || value instanceof Set) {\n        return value;\n    }\n\n    if (isObject(value)) {\n        const result = {};\n\n        for (const key of Object.keys(value)) {\n            result[key] = cloneValue(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n *@hidden\n */\nexport function isObject(value: any): boolean {\n    return value && value.toString() === '[object Object]';\n}\n\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n *@hidden\n */\nexport function isDate(value: any) {\n    return Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport function isEqual(obj1, obj2): boolean {\n    if (isDate(obj1) && isDate(obj2)) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    return obj1 === obj2;\n}\n\n/**\n *@hidden\n */\nexport const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9\n}\n\n/**\n *@hidden\n */\nexport const enum KEYS {\n    ENTER = 'Enter',\n    SPACE = ' ',\n    SPACE_IE = 'Spacebar',\n    ESCAPE = 'Escape',\n    ESCAPE_IE = 'Esc',\n    LEFT_ARROW = 'ArrowLeft',\n    UP_ARROW = 'ArrowUp',\n    RIGHT_ARROW = 'ArrowRight',\n    DOWN_ARROW = 'ArrowDown',\n    F2 = 'F2',\n    TAB = 'Tab'\n}\n\n/**\n *@hidden\n* Returns the actual size of the node content, using Range\n* ```typescript\n* let range = document.createRange();\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingRange(range, column.cells[0].nativeElement);\n* ```\n */\nexport function valToPxlsUsingRange(range: Range, node: any): number {\n    let overflow = null;\n    if (isIE() || isEdge()) {\n        overflow = node.style.overflow;\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = 'visible';\n    }\n\n    range.selectNodeContents(node);\n    const width = range.getBoundingClientRect().width;\n\n    if (isIE() || isEdge()) {\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = overflow;\n    }\n\n    return width;\n}\n/**\n *@hidden\n* Returns the actual size of the node content, using Canvas\n* ```typescript\n* let ctx = document.createElement('canvas').getContext('2d');\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n* ```\n */\nexport function valToPxlsUsingCanvas(canvas2dCtx: any, node: any): number {\n    const s = this.grid.document.defaultView.getComputedStyle(node);\n\n    // need to set the font to get correct width\n    canvas2dCtx.font = s.fontSize + ' ' + s.fontFamily;\n\n    return canvas2dCtx.measureText(node.textContent).width;\n}\n/**\n *@hidden\n */\nexport function isIE(): boolean {\n    return navigator.appVersion.indexOf('Trident/') > 0;\n}\n/**\n *@hidden\n */\nexport function isEdge(): boolean {\n    const edgeBrowser = /Edge[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return edgeBrowser;\n}\n\n/**\n *@hidden\n */\nexport function isFirefox(): boolean {\n    const firefoxBrowser = /Firefox[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return firefoxBrowser;\n}\n\n/** @hidden */\nexport function isNavigationKey(key: string): boolean {\n    return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n        'home', 'end', 'space', 'spacebar', ' '].indexOf(key) !== -1;\n}\n\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\n","import {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport interface IChangeRadioEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\n\nexport enum RadioLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nlet nextId = 0;\nconst noop = () => { };\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent, multi: true }],\n    selector: 'igx-radio',\n    template: `<input #radio class=\"igx-radio__input\" type=\"radio\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [tabindex]=\"tabindex\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-labelledby]=\"ariaLabelledBy\"\n    [attr.aria-label]=\"ariaLabel\"\n    (click)=\"_onRadioClick($event)\"\n    (change)=\"_onRadioChange($event)\"\n    (focus)=\"onFocus($event)\"\n    (blur)=\"onBlur($event)\" />\n\n<label #nativeLabel class=\"igx-radio__composite\" igxRipple\n    igxRippleTarget=\".igx-radio__ripple\"\n    [igxRippleDisabled]=\"disableRipple\"\n    [igxRippleCentered]=\"true\"\n    [igxRippleDuration]=\"300\"\n    [for]=\"inputId\">\n    <div class=\"igx-radio__ripple\"></div>\n</label>\n\n<span #placeholderLabel role=\"label\"\n    [id]=\"labelId\"\n    [class]=\"labelClass\"\n    (click)=\"_onLabelClick()\">\n    <ng-content></ng-content>\n</span>\n`\n})\n\nexport class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('radio') public nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('nativeLabel') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-radio-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio')\n    public cssClass = 'igx-radio';\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    protected _value: any = null;\n\n    constructor() { }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    public _onRadioChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onRadioClick(event) {\n        event.stopPropagation();\n        this.select();\n\n        if (isIE()) {\n            this.nativeRadio.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick() {\n        this.select();\n    }\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    public select() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = true;\n        this.focused = false;\n        this.change.emit({ value: this.value, radio: this });\n        this._onChangeCallback(this.value);\n    }\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this._value = value;\n        this.checked = (this._value === this.value);\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeRadio.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case RadioLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case RadioLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n","import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';\n\n@Directive({\n    selector: '[igxRipple]'\n})\nexport class IgxRippleDirective {\n    /**\n     * Sets/gets the ripple target.\n     * ```html\n     * <div  #rippleContainer class=\"div-1\" igxRipple [igxRippleTarget] = \"'.div-1'\"></div>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleTarget = this.ripple.rippleTarget;\n     * ```\n     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.\n     * ```html\n     * <div #rippleContainer [igxRippleTarget] = \"'#child\"'>\n     *  <button id=\"child\">Click</button>\n     * </div>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleTarget')\n    public rippleTarget = '';\n    /**\n     * Sets/gets the ripple color.\n     * ```html\n     * <button #rippleContainer [igxRipple] = \"'red'\" ></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleColor = this.ripple.rippleColor;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRipple')\n    public rippleColor: string;\n    /**\n     * Sets/gets the ripple duration(in milliseconds).\n     * Default value is `600`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDuration] = \"800\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleDuration = this.ripple.rippleDuration;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDuration')\n    public rippleDuration = 600;\n    /**\n     * Enables/disables the ripple to be centered.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleCentered] = \"true\"></button>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleCentered') set centered(value: boolean) {\n        this._centered = value || this.centered;\n    }\n    /**\n     * Sets/gets whether the ripple is disabled.\n     * Default value is `false`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDisabled] = \"true\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let isRippleDisabled = this.ripple.rippleDisabled;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDisabled')\n    public rippleDisabled = false;\n\n    protected get nativeElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    private rippleElementClass = 'igx-ripple__inner';\n    private rippleHostClass = 'igx-ripple';\n\n    private animationFrames = [\n        { opacity: 0.5, transform: 'scale(.3)' },\n        { opacity: 0, transform: 'scale(2)' }\n    ];\n\n\n    private _centered = false;\n    private animationQueue = [];\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected renderer: Renderer2,\n        private zone: NgZone) { }\n    /**\n     *@hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event) {\n        this.zone.runOutsideAngular(() => this._ripple(event));\n    }\n\n    private setStyles(rippleElement: HTMLElement, styleParams: any) {\n        this.renderer.addClass(rippleElement, this.rippleElementClass);\n        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);\n        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);\n        if (this.rippleColor) {\n            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);\n        }\n    }\n\n    private _ripple(event) {\n        if (this.rippleDisabled) {\n            return;\n        }\n\n        const target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);\n\n        const rectBounds = target.getBoundingClientRect();\n        const radius = Math.max(rectBounds.width, rectBounds.height);\n        let left = event.clientX - rectBounds.left - radius / 2;\n        let top = event.clientY - rectBounds.top - radius / 2;\n\n        if (this._centered) {\n            left = top = 0;\n        }\n\n        const dimensions = {\n            radius,\n            top,\n            left\n        };\n\n        const rippleElement = this.renderer.createElement('span');\n\n        this.setStyles(rippleElement, dimensions);\n        this.renderer.addClass(target, this.rippleHostClass);\n        this.renderer.appendChild(target, rippleElement);\n\n        const animation = rippleElement.animate(this.animationFrames, { duration: this.rippleDuration, fill: 'forwards' });\n        this.animationQueue.push(animation);\n\n        animation.onfinish = () => {\n            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);\n            target.removeChild(rippleElement);\n            if (this.animationQueue.length < 1) {\n                this.renderer.removeClass(target, this.rippleHostClass);\n            }\n        };\n    }\n}\n/**\n * The IgxRippleModule provides the {@link IgxRippleDirective} inside your application.\n */\n@NgModule({\n    declarations: [IgxRippleDirective],\n    exports: [IgxRippleDirective]\n})\nexport class IgxRippleModule { }\n","import { Directive, NgModule, Input, QueryList, Output, EventEmitter, AfterContentInit, ContentChildren, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\nimport { IgxRippleModule } from '../ripple/ripple.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst noop = () => { };\nlet nextId = 0;\n\n/**\n * **Ignite UI for Angular Radio Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_group.html)\n *\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\n@Directive({\n    selector: 'igx-radio-group, [igxRadioGroup]',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective, multi: true }]\n})\nexport class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @ContentChildren(IgxRadioComponent) public radioButtons: QueryList<IgxRadioComponent>;\n\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let value =  this.radioGroup.value;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this._selectRadioButton();\n        }\n    }\n\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     * ```typescript\n     * let name =  this.radioGroup.name;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get name(): string { return this._name; }\n    set name(newValue: string) {\n        if (this._name !== newValue) {\n            this._name = newValue;\n            this._setRadioButtonNames();\n        }\n    }\n\n    /**\n     * Sets/gets whether the radio group is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radioGroup.required;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(newValue: boolean) {\n        if (this._required !== newValue) {\n            this._required = newValue;\n            this._setRadioButtonsRequired();\n        }\n    }\n\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     * ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(newValue: boolean) {\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disableRadioButtons();\n        }\n    }\n\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radioGroup.labelPosition;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get labelPosition(): RadioLabelPosition | string { return this._labelPosition; }\n    set labelPosition(newValue: RadioLabelPosition | string) {\n        if (this._labelPosition !== newValue) {\n            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;\n            this._setRadioButtonLabelPosition();\n        }\n    }\n\n    /**\n     * Sets/gets the selected child radio button.\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: IgxRadioComponent | null) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n        }\n    }\n\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioGroupDirective\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    private _name = `igx-radio-group-${nextId++}`;\n    /**\n     *@hidden\n     */\n    private _value: any = null;\n    /**\n     *@hidden\n     */\n    private _selected: IgxRadioComponent | null = null;\n    /**\n     *@hidden\n     */\n    private _isInitialized = false;\n    /**\n     *@hidden\n     */\n    private _labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     *@hidden\n     */\n    private _disabled = false;\n    /**\n     *@hidden\n     */\n    private _required = false;\n    /**\n     *@hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    ngAfterContentInit() {\n        // The initial value can possibly be set by NgModel and it is possible that\n        // the OnInit of the NgModel occurs after the OnInit of this class.\n        this._isInitialized = true;\n\n        setTimeout(() => { this._initRadioButtons(); });\n    }\n\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this.value = value;\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.registerOnTouched(fn);\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    private _initRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n                button.labelPosition = this._labelPosition;\n                button.disabled = this._disabled;\n                button.required = this._required;\n\n                if (this._value && button.value === this._value) {\n                    button.checked = true;\n                    this._selected = button;\n                }\n\n                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectedRadioButtonChanged(args: IChangeRadioEventArgs) {\n        if (this._selected !== args.radio) {\n            if (this._selected) {\n                this._selected.checked = false;\n            }\n            this._selected = args.radio;\n        }\n\n        this._value = args.value;\n\n        if (this._isInitialized) {\n            this.change.emit(args);\n            this._onChangeCallback(this.value);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonNames() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectRadioButton() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                if (!this._value) {\n                    // no value - uncheck all radio buttons\n                    if (button.checked) {\n                        button.checked = false;\n                    }\n                } else {\n                    if (this._value === button.value) {\n                        // selected button\n                        if (this._selected !== button) {\n                            this._selected = button;\n                        }\n\n                        if (!button.checked) {\n                            button.select();\n                        }\n                    } else {\n                        // non-selected button\n                        if (button.checked) {\n                            button.checked = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonLabelPosition() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.labelPosition = this._labelPosition;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _disableRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.disabled = this._disabled;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonsRequired() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.required = this._required;\n            });\n        }\n    }\n}\n\n/**\n *The IgxRadioModule provides the {@link IgxRadioGroupDirective} and {@link IgxRadioComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxRadioGroupDirective, IgxRadioComponent],\n    exports: [IgxRadioGroupDirective, IgxRadioComponent],\n    imports: [IgxRippleModule]\n})\nexport class IgxRadioModule { }\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    OnDestroy,\n    Output,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n\nexport interface IActiveHighlightInfo {\n    rowIndex: number;\n    columnIndex: number;\n    page: number;\n    index: number;\n}\n\n@Directive({\n    selector: '[igxTextHighlight]'\n})\nexport class IgxTextHighlightDirective implements AfterViewInit, OnDestroy, OnChanges {\n    private static onActiveElementChanged = new EventEmitter<string>();\n    public static highlightGroupsMap = new Map<string, IActiveHighlightInfo>();\n\n    private _lastSearchInfo: ISearchInfo;\n    private _div = null;\n    private _observer: MutationObserver = null;\n    private _nodeWasRemoved = false;\n    private _forceEvaluation = false;\n    private _activeElementIndex = -1;\n\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    @Input('cssClass')\n    public cssClass: string;\n\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    @Input('activeCssClass')\n    public activeCssClass: string;\n\n    /**\n     * @hidden\n     */\n    @Input('containerClass')\n    public containerClass: string;\n\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    @Input('groupName')\n    public groupName = '';\n\n    private _value = '';\n\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    @Input('value')\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        if (value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * The index of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('row')\n    public row: number;\n\n    /**\n     * The index of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('column')\n    public column: number;\n\n    /**\n     * The index of the page on which the directive is currently on.\n     * It is used when the component containing the directive supports paging.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [page]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('page')\n    public page: number;\n\n    /**\n     * @hidden\n     */\n    public parentElement: any;\n\n    private _container: any;\n\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    public static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public static clearActiveHighlight(groupName) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {\n            rowIndex: -1,\n            columnIndex: -1,\n            page: -1,\n            index: -1\n        });\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    constructor(element: ElementRef, public renderer: Renderer2) {\n        this.parentElement = this.renderer.parentNode(element.nativeElement);\n\n        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {\n            if (this.groupName === groupName) {\n                if (this._activeElementIndex !== -1) {\n                    this.deactivate();\n                }\n                this.activateIfNecessary();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        if (this._observer !== null) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && !changes.value.firstChange) {\n            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n            this.activateIfNecessary();\n        }\n\n        if ((changes.row !== undefined && !changes.row.firstChange) ||\n            (changes.column !== undefined && !changes.column.firstChange) ||\n            (changes.page !== undefined && !changes.page.firstChange)) {\n            if (this._activeElementIndex !== -1) {\n                this.deactivate();\n            }\n\n            this.activateIfNecessary();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {\n            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {\n                rowIndex: -1,\n                columnIndex: -1,\n                page: -1,\n                index: -1\n            });\n        }\n\n        this._lastSearchInfo = {\n            searchedText: '',\n            content: this.value,\n            matchCount: 0,\n            caseSensitive: false,\n            exactMatch: false\n        };\n\n        this._container = this.parentElement.firstElementChild;\n    }\n\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    public highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n\n        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n            this._lastSearchInfo.content = this.value;\n\n            if (text === '' || text === undefined || text === null) {\n                this.clearHighlight();\n            } else {\n                this.clearChildElements(true);\n                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);\n            }\n        } else if (this._nodeWasRemoved) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n        }\n\n        return this._lastSearchInfo.matchCount;\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public clearHighlight(): void {\n        this.clearChildElements(false);\n\n        this._lastSearchInfo.searchedText = '';\n        this._lastSearchInfo.matchCount = 0;\n    }\n\n    /**\n     * Activates the highlight if it is on the currently active row, column and page.\n     */\n    public activateIfNecessary(): void {\n        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);\n        if (group.columnIndex === this.column && group.rowIndex === this.row && group.page === this.page) {\n            this.activate(group.index);\n        }\n    }\n\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    public observe(): void {\n        if (this._observer === null) {\n            const callback = (mutationList) => {\n                mutationList.forEach((mutation) => {\n                    const removedNodes = new Array(... mutation.removedNodes);\n                    removedNodes.forEach((n) => {\n                        if (n === this._container) {\n                            this._nodeWasRemoved = true;\n                            this.clearChildElements(false);\n                        }\n                    });\n\n                    const addedNodes = new Array(... mutation.addedNodes);\n                    addedNodes.forEach((n) => {\n                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {\n                            this._container = this.parentElement.firstElementChild;\n                            this._nodeWasRemoved = false;\n\n                            this._forceEvaluation = true;\n                            this.highlight(this._lastSearchInfo.searchedText,\n                                this._lastSearchInfo.caseSensitive,\n                                this._lastSearchInfo.exactMatch);\n                            this._forceEvaluation = false;\n\n                            this.activateIfNecessary();\n                            this._observer.disconnect();\n                            this._observer = null;\n                        }\n                    });\n                });\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.parentElement, {childList: true});\n        }\n    }\n\n    private activate(index: number) {\n        this.deactivate();\n\n        if (this._div !== null) {\n            const spans = this._div.querySelectorAll('span');\n            this._activeElementIndex = index;\n\n            if (spans.length <= index) {\n                return;\n            }\n\n            const elementToActivate = spans[index];\n            this.renderer.addClass(elementToActivate, this.activeCssClass);\n            this.renderer.setAttribute(elementToActivate, 'style', 'background:orange;font-weight:bold;color:black');\n        }\n    }\n\n    private deactivate() {\n        if (this._activeElementIndex === -1) {\n            return;\n        }\n\n        const spans = this._div.querySelectorAll('span');\n\n        if (spans.length <= this._activeElementIndex) {\n            this._activeElementIndex = -1;\n            return;\n        }\n\n        const elementToDeactivate = spans[this._activeElementIndex];\n        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);\n        this.renderer.setAttribute(elementToDeactivate, 'style', 'background:yellow;font-weight:bold;color:black');\n        this._activeElementIndex = -1;\n    }\n\n    private clearChildElements(originalContentHidden: boolean): void {\n        if (this.parentElement.firstElementChild) {\n            this.renderer.setProperty(this.parentElement.firstElementChild, 'hidden', originalContentHidden);\n        }\n\n        if (this._div !== null) {\n            this.renderer.removeChild(this.parentElement, this._div);\n\n            this._div = null;\n            this._activeElementIndex = -1;\n        }\n    }\n\n    private getHighlightedText(searchText: string, caseSensitive: boolean, exactMatch: boolean) {\n        this.appendDiv();\n\n        const stringValue = String(this.value);\n        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;\n        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;\n\n        let matchCount = 0;\n\n        if (exactMatch) {\n            if (contentStringResolved === searchTextResolved) {\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;font-weight:bold;color:black\">${stringValue}</span>`);\n                matchCount++;\n            } else {\n                this.appendText(stringValue);\n            }\n        } else {\n            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);\n            let previousMatchEnd = 0;\n\n            while (foundIndex !== -1) {\n                const start = foundIndex;\n                const end = foundIndex + searchTextResolved.length;\n\n                this.appendText(stringValue.substring(previousMatchEnd, start));\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;font-weight:bold;color:black\">${stringValue.substring(start, end)}</span>`);\n\n                previousMatchEnd = end;\n                matchCount++;\n\n                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);\n            }\n\n            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));\n        }\n\n        return matchCount;\n    }\n\n    private appendText(text: string) {\n        const textElement = this.renderer.createText(text);\n        this.renderer.appendChild(this._div, textElement);\n    }\n\n    private appendSpan(outerHTML: string) {\n        const span = this.renderer.createElement('span');\n        this.renderer.appendChild(this._div, span);\n        this.renderer.setProperty(span, 'outerHTML', outerHTML);\n    }\n\n    private appendDiv() {\n        this._div = this.renderer.createElement('div');\n        this.renderer.addClass(this._div, this.containerClass);\n        this.renderer.appendChild(this.parentElement, this._div);\n    }\n\n    private searchNeedsEvaluation(text: string, caseSensitive: boolean, exactMatch: boolean): boolean {\n        const searchedText = this._lastSearchInfo.searchedText;\n\n        return !this._nodeWasRemoved &&\n            (searchedText === null ||\n                searchedText !== text ||\n                this._lastSearchInfo.content !== this.value ||\n                this._lastSearchInfo.caseSensitive !== caseSensitive ||\n                this._lastSearchInfo.exactMatch !== exactMatch ||\n                this._forceEvaluation);\n    }\n}\n\n@NgModule({\n    declarations: [IgxTextHighlightDirective],\n    exports: [IgxTextHighlightDirective]\n})\nexport class IgxTextHighlightModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';\n\n@Directive({\n    exportAs: 'igxTextSelection',\n    selector: '[igxTextSelection]'\n})\nexport class IgxTextSelectionDirective {\n\n    private selectionState = true;\n\n    /**\n     * Returns whether the input element is selectable through the directive.\n     *\n     * ```typescript\n     * // get\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public firstName: IgxTextSelectionDirective;\n     *\n     * public getFirstNameSelectionStatus() {\n     *  return this.firstName.selected;\n     * }\n     * ```\n     */\n    @Input('igxTextSelection')\n    get selected(): boolean {\n        return this.selectionState;\n    }\n\n    /**\n     *  Determines whether the input element could be selected through the directive.\n     *\n     *```html\n     * <!--set-->\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   [igxTextSelection]=\"true\">\n     * </input>\n     *\n     * <input\n     *   type=\"text\"\n     *   id=\"lastName\"\n     *   igxTextSelection\n     *   [selected]=\"true\">\n     * </input>\n     * ```\n     */\n    set selected(val: boolean) {\n        this.selectionState = val;\n    }\n\n    /**\n     * Returns the nativeElement of the element where the directive was applied.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n    *    id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public getNativeElement() {\n     *  return this.inputElement.nativeElement;\n     * }\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    onFocus() {\n        this.trigger();\n    }\n\n    constructor(private element: ElementRef) { }\n\n    /**\n     * Triggers the selection of the element if it is marked as selectable.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public triggerElementSelection() {\n     *  this.inputElement.trigger();\n     * }\n     * ```\n     */\n    trigger() {\n        if (this.selected && this.nativeElement.value.length) {\n            requestAnimationFrame(() => this.nativeElement.setSelectionRange(0, this.nativeElement.value.length));\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxTextSelectionDirective],\n    exports: [IgxTextSelectionDirective]\n})\nexport class IgxTextSelectionModule { }\n","import { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { IPositionStrategy } from './position/IPositionStrategy';\n\nimport { IScrollStrategy, NoOpScrollStrategy } from './scroll';\nimport { AnimationMetadata, AnimationReferenceMetadata, AnimationPlayer } from '@angular/animations';\nimport { ComponentRef, ElementRef } from '@angular/core';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\nimport { CancelableEventArgs } from '../../core/utils';\n\nexport enum HorizontalAlignment {\n    Left = -1,\n    Center = -0.5,\n    Right = 0\n}\n\nexport enum VerticalAlignment {\n    Top = -1,\n    Middle = -0.5,\n    Bottom = 0\n}\n\nexport class Point {\n    constructor(public x: number, public y: number) { }\n}\n\nexport interface PositionSettings {\n    target?: Point | HTMLElement;\n    horizontalDirection?: HorizontalAlignment;\n    verticalDirection?: VerticalAlignment;\n    horizontalStartPoint?: HorizontalAlignment;\n    verticalStartPoint?: VerticalAlignment;\n    openAnimation?: AnimationReferenceMetadata;\n    closeAnimation?: AnimationReferenceMetadata;\n}\n\nexport interface OverlaySettings {\n    positionStrategy?: IPositionStrategy;\n    scrollStrategy?: IScrollStrategy;\n    modal?: boolean;\n    closeOnOutsideClick?: boolean;\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n}\n\nexport interface OverlayEventArgs {\n    /** Id of the overlay as returned by the `show()` method */\n    id: string;\n    /** Available when `Type<T>` is provided to the `show()` method and allows access to the created Component instance */\n    componentRef?: ComponentRef<{}>;\n}\n\nexport interface OverlayCancelableEventArgs extends OverlayEventArgs, CancelableEventArgs {\n}\n\nexport interface OverlayAnimationEventArgs {\n    /** Id of the overlay as returned by the `show()` method */\n    id: string;\n    /** Animation player that will play the animation */\n    animationPlayer: AnimationPlayer;\n    /** Type of animation to be played. It should be either 'open' or 'close' */\n    animationType: 'open' | 'close';\n}\n\n/** @hidden */\nexport function getPointFromPositionsSettings(settings: PositionSettings, overlayWrapper: HTMLElement): Point {\n    let result: Point = new Point(0, 0);\n\n    if (settings.target instanceof HTMLElement) {\n        const rect = (<HTMLElement>settings.target).getBoundingClientRect();\n        result.x = rect.right + rect.width * settings.horizontalStartPoint;\n        result.y = rect.bottom + rect.height * settings.verticalStartPoint;\n    } else if (settings.target instanceof Point) {\n        result = settings.target;\n    }\n\n    //  if for some reason overlayWrapper is not at 0,0 position, e.g. overlay is in outlet\n    //  which is in element with transform,perspective or filter set, we should translate the result\n    //  accordingly\n    if (overlayWrapper) {\n        const overlayWrapperPosition = overlayWrapper.getBoundingClientRect();\n        result.x -= overlayWrapperPosition.left;\n        result.y -= overlayWrapperPosition.top;\n    }\n\n    return result;\n}\n\n/** @hidden */\nexport interface OverlayInfo {\n    id?: string;\n    elementRef?: ElementRef;\n    componentRef?: ComponentRef<{}>;\n    settings?: OverlaySettings;\n    initialSize?: { width?: number, height?: number, x?: number, y?: number };\n    hook?: HTMLElement;\n    openAnimationPlayer?: AnimationPlayer;\n    closeAnimationPlayer?: AnimationPlayer;\n    openAnimationInnerPlayer?: any;\n    closeAnimationInnerPlayer?: any;\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, Point, HorizontalAlignment, VerticalAlignment } from './../utilities';\nimport { fadeIn, fadeOut } from '../../../animations/main';\n\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    private _defaultSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Center,\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut\n    };\n\n    public settings: PositionSettings;\n    constructor(settings?: PositionSettings) {\n        this.settings = Object.assign({}, this._defaultSettings, settings);\n    }\n\n    position(contentElement: HTMLElement, size?: { width: number, height: number}, document?: Document, initialCall?: boolean): void {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                contentElement.parentElement.style.justifyContent = 'flex-start';\n                break;\n            case HorizontalAlignment.Center:\n                contentElement.parentElement.style.justifyContent = 'center';\n                break;\n            case HorizontalAlignment.Right:\n                contentElement.parentElement.style.justifyContent = 'flex-end';\n                break;\n            default:\n                break;\n        }\n\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                contentElement.parentElement.style.alignItems = 'flex-start';\n                break;\n            case VerticalAlignment.Middle:\n                contentElement.parentElement.style.alignItems = 'center';\n                break;\n            case VerticalAlignment.Bottom:\n                contentElement.parentElement.style.alignItems = 'flex-end';\n                break;\n            default:\n                break;\n        }\n    }\n}\n\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport class NoOpScrollStrategy implements IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n    initialize(document: Document, overlayService: IgxOverlayService, id: string) {}\n    attach(): void { }\n    detach(): void { }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';\nimport { OverlaySettings, OverlayEventArgs, OverlayInfo, OverlayAnimationEventArgs, OverlayCancelableEventArgs } from './utilities';\n\nimport {\n    ApplicationRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injectable,\n    Injector,\n    Type,\n    OnDestroy\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, AnimationMetadataType, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { fromEvent, Subject } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { IAnimationParams } from '../../animations/main';\n\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\n@Injectable({ providedIn: 'root' })\nexport class IgxOverlayService implements OnDestroy {\n    private _componentId = 0;\n    private _overlayInfos: OverlayInfo[] = [];\n    private _overlayElement: HTMLElement;\n    private _document: Document;\n    private destroy$ = new Subject<boolean>();\n\n    private _defaultSettings: OverlaySettings = {\n        positionStrategy: new GlobalPositionStrategy(),\n        scrollStrategy: new NoOpScrollStrategy(),\n        modal: true,\n        closeOnOutsideClick: true\n    };\n\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    public onOpening = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    public onOpened = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    public onClosing = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    public onClosed = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    public onAnimation = new EventEmitter<OverlayAnimationEventArgs>();\n\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private builder: AnimationBuilder,\n        @Inject(DOCUMENT) private document: any) {\n        this._document = <Document>this.document;\n    }\n\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     */\n    // tslint:disable-next-line:unified-signatures\n    show(component: ElementRef | Type<{}>, settings?: OverlaySettings): string;\n    show(compOrId: string | ElementRef | Type<{}> , settings?: OverlaySettings): string {\n        let info: OverlayInfo;\n        let id: string;\n        if (typeof compOrId === 'string') {\n            id = compOrId;\n            info = this.getOverlayById(compOrId);\n            if (!info) {\n                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);\n                return;\n            }\n        } else {\n            id = (this._componentId++).toString();\n            info = this.getOverlayInfo(compOrId);\n\n            //  if there is no info most probably wrong type component was provided and we just go out\n            if (!info) {\n                return;\n            }\n\n            info.id = id;\n        }\n\n        settings = Object.assign({}, this._defaultSettings, settings);\n        info.settings = settings;\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false };\n        this.onOpening.emit(eventArgs);\n        if (eventArgs.cancel) {\n            if (info.componentRef) {\n                this._appRef.detachView(info.componentRef.hostView);\n                info.componentRef.destroy();\n            }\n            return id;\n        }\n\n        //  if there is no close animation player, or there is one but it is not started yet we are in clear\n        //  opening. Otherwise, if there is close animation player playing animation now we should not setup\n        //  overlay this is already done\n        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n            info.hook = this.placeElementHook(info.elementRef.nativeElement);\n\n            this.moveElementToOverlay(info);\n            this.updateSize(info);\n            this._overlayInfos.push(info);\n\n            settings.positionStrategy.position(info.elementRef.nativeElement.parentElement, info.initialSize, document, true);\n            settings.scrollStrategy.initialize(this._document, this, id);\n            settings.scrollStrategy.attach();\n        }\n\n        this.addOutsideClickListener(info);\n        this.addResizeHandler(info.id);\n\n        if (info.settings.modal) {\n            this.setupModalWrapper(info);\n        }\n\n        if (info.settings.positionStrategy.settings.openAnimation) {\n            this.playOpenAnimation(info);\n        } else {\n            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n        }\n\n        return id;\n    }\n\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            console.warn('igxOverlay.hide was called with wrong id: ' + id);\n            return;\n        }\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false };\n        this.onClosing.emit(eventArgs);\n        if (eventArgs.cancel) {\n            return;\n        }\n\n        info.settings.scrollStrategy.detach();\n        this.removeOutsideClickListener(info);\n        this.removeResizeHandler(info.id);\n\n        const child: HTMLElement = info.elementRef.nativeElement;\n        if (info.settings.modal) {\n            const parent = child.parentNode.parentNode as HTMLElement;\n            this.applyAnimationParams(parent, info.settings.positionStrategy.settings.closeAnimation);\n            parent.classList.remove('igx-overlay__wrapper--modal');\n            parent.classList.add('igx-overlay__wrapper');\n        }\n\n        if (info.settings.positionStrategy.settings.closeAnimation) {\n            this.playCloseAnimation(info);\n        } else {\n            this.onCloseDone(info);\n        }\n    }\n\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll() {\n        // since overlays are removed on animation done, que all hides\n        for (let i = this._overlayInfos.length; i--;) {\n            this.hide(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string) {\n        const overlay = this.getOverlayById(id);\n        if (!overlay) {\n            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);\n            return;\n        }\n\n        overlay.settings.positionStrategy.position(\n            overlay.elementRef.nativeElement.parentElement,\n            overlay.initialSize,\n            this._document);\n    }\n\n    private getOverlayInfo(component: any): OverlayInfo {\n        const info: OverlayInfo = {};\n        if (component instanceof ElementRef) {\n            info.elementRef = <ElementRef>component;\n        } else {\n            let dynamicFactory: ComponentFactory<{}>;\n            try {\n                dynamicFactory = this._factoryResolver.resolveComponentFactory(component);\n            } catch (error) {\n                console.error(error);\n                return null;\n            }\n\n            const dynamicComponent: ComponentRef<{}> = dynamicFactory.create(this._injector);\n            this._appRef.attachView(dynamicComponent.hostView);\n\n            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.\n            const element = dynamicComponent.location.nativeElement.lastElementChild;\n            info.elementRef = <ElementRef>{ nativeElement: element };\n            info.componentRef = dynamicComponent;\n        }\n\n        return info;\n    }\n\n    private placeElementHook(element: HTMLElement): HTMLElement {\n        if (!element.parentElement) {\n            return null;\n        }\n\n        const hook = this._document.createElement('div');\n        element.parentElement.insertBefore(hook, element);\n        return hook;\n    }\n\n    private moveElementToOverlay(info: OverlayInfo) {\n        const wrapperElement = this.getWrapperElement();\n        const contentElement = this.getContentElement(wrapperElement, info.settings);\n        this.getOverlayElement(info).appendChild(wrapperElement);\n        const elementScrollTop = info.elementRef.nativeElement.scrollTop;\n        contentElement.appendChild(info.elementRef.nativeElement);\n\n        if (elementScrollTop) {\n            info.elementRef.nativeElement.scrollTop = elementScrollTop;\n        }\n    }\n\n    private getWrapperElement(): HTMLElement {\n        const wrapper: HTMLElement = this._document.createElement('div');\n        wrapper.classList.add('igx-overlay__wrapper');\n        return wrapper;\n    }\n\n    private getContentElement(wrapperElement: HTMLElement, settings: OverlaySettings): HTMLElement {\n        const content: HTMLElement = this._document.createElement('div');\n        if (settings.modal) {\n            content.classList.add('igx-overlay__content--modal');\n            content.addEventListener('click', (ev: Event) => {\n                ev.stopPropagation();\n            });\n        } else {\n            content.classList.add('igx-overlay__content');\n        }\n\n        content.addEventListener('scroll', (ev: Event) => {\n            ev.stopPropagation();\n        });\n\n        wrapperElement.appendChild(content);\n        return content;\n    }\n\n    private getOverlayElement(info: OverlayInfo): HTMLElement {\n        if (info.settings.outlet) {\n            return info.settings.outlet.nativeElement;\n        }\n        if (!this._overlayElement) {\n            this._overlayElement = this._document.createElement('div');\n            this._overlayElement.classList.add('igx-overlay');\n            this._document.body.appendChild(this._overlayElement);\n        }\n\n        return this._overlayElement;\n    }\n\n    private updateSize(info: OverlayInfo) {\n        if (info.componentRef) {\n            //  if we are positioning component this is first time it gets visible\n            //  and we can finally get its size\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n        }\n\n        // set content div size only if element to show has size\n        if (info.initialSize.width !== 0 && info.initialSize.height !== 0) {\n            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';\n            info.elementRef.nativeElement.parentElement.style.height = info.initialSize.height + 'px';\n        }\n    }\n\n    private setupModalWrapper(info: OverlayInfo) {\n        const wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;\n        fromEvent(wrapperElement, 'keydown').pipe(\n            filter((ev: KeyboardEvent) => ev.key === 'Escape' || ev.key === 'Esc'),\n            takeUntil(this.destroy$)\n        ).subscribe(() => this.hide(info.id));\n        wrapperElement.classList.remove('igx-overlay__wrapper');\n        this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);\n        wrapperElement.classList.add('igx-overlay__wrapper--modal');\n    }\n\n    private onCloseDone(info: OverlayInfo) {\n        const child: HTMLElement = info.elementRef.nativeElement;\n        const outlet = this.getOverlayElement(info);\n        if (!outlet.contains(child)) {\n            console.warn('Component with id:' + info.id + ' is already removed!');\n            return;\n        }\n\n        outlet.removeChild(child.parentNode.parentNode);\n        if (info.componentRef) {\n            this._appRef.detachView(info.componentRef.hostView);\n            info.componentRef.destroy();\n        }\n\n        if (info.hook) {\n            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);\n            info.hook.parentElement.removeChild(info.hook);\n        }\n\n        const index = this._overlayInfos.indexOf(info);\n        this._overlayInfos.splice(index, 1);\n\n        // this._overlayElement.parentElement check just for tests that manually delete the element\n        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {\n            this._overlayElement.parentElement.removeChild(this._overlayElement);\n            this._overlayElement = null;\n        }\n\n        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });\n    }\n\n    private playOpenAnimation(info: OverlayInfo) {\n        if (!info.openAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);\n            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n            info.openAnimationPlayer.init();\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.openAnimationPlayer)._renderer;\n            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n            info.openAnimationPlayer.onDone(() => {\n                this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n                info.openAnimationPlayer.reset();\n                info.openAnimationPlayer = null;\n                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n                    info.closeAnimationPlayer.reset();\n                }\n            });\n        }\n\n        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.closeAnimationInnerPlayer.getPosition();\n            info.closeAnimationPlayer.reset();\n            info.openAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });\n        info.openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(info: OverlayInfo) {\n        if (!info.closeAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);\n            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n            info.closeAnimationPlayer.init();\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.closeAnimationPlayer)._renderer;\n            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n\n            info.closeAnimationPlayer.onDone(() => {\n                info.closeAnimationPlayer.reset();\n                info.closeAnimationPlayer = null;\n                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n                    info.openAnimationPlayer.reset();\n                }\n                this.onCloseDone(info);\n            });\n        }\n\n        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.openAnimationInnerPlayer.getPosition();\n            info.openAnimationPlayer.reset();\n            info.closeAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });\n        info.closeAnimationPlayer.play();\n    }\n\n    //  TODO: check if applyAnimationParams will work with complex animations\n    private applyAnimationParams(wrapperElement: HTMLElement, animationOptions: AnimationReferenceMetadata) {\n        if (!animationOptions) {\n            wrapperElement.style.transitionDuration = '0ms';\n            return;\n        }\n        if (animationOptions.type === AnimationMetadataType.AnimateRef) {\n            animationOptions = (animationOptions as AnimationAnimateRefMetadata).animation;\n        }\n        if (!animationOptions.options || !animationOptions.options.params) {\n            return;\n        }\n        const params = animationOptions.options.params as IAnimationParams;\n        if (params.duration) {\n            wrapperElement.style.transitionDuration = params.duration;\n        }\n        if (params.easing) {\n            wrapperElement.style.transitionTimingFunction = params.easing;\n        }\n    }\n\n    private getOverlayById(id: string): OverlayInfo {\n        const overlay = this._overlayInfos.find(e => e.id === id);\n        return overlay;\n    }\n\n    private documentClicked = (ev: Event) => {\n        for (let i = this._overlayInfos.length; i--;) {\n            const info = this._overlayInfos[i];\n            if (info.settings.modal) {\n                return;\n            }\n            if (info.settings.closeOnOutsideClick) {\n                if (!info.elementRef.nativeElement.contains(ev.target)) {\n                    this.hide(info.id);\n                    // TODO: should we return here too and not closing all no-modal overlays?\n                }\n            }\n        }\n    }\n\n    private addOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.closeOnOutsideClick) {\n            if (info.settings.modal) {\n                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe(() => this.hide(info.id));\n            } else if (\n                //  if all overlays minus closing overlays equals one add the handler\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal).length -\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal &&\n                    x.closeAnimationPlayer &&\n                    x.closeAnimationPlayer.hasStarted()).length === 1) {\n                this._document.addEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private removeOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.modal === false) {\n            let shouldRemoveClickEventListener = true;\n            this._overlayInfos.forEach(o => {\n                if (o.settings.modal === false && o.id !== info.id) {\n                    shouldRemoveClickEventListener = false;\n                }\n            });\n\n            if (shouldRemoveClickEventListener) {\n                this._document.removeEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private addResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.addEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private removeResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.removeEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private repositionAll = (ev: Event) => {\n        for (let i = this._overlayInfos.length; i--;) {\n            this.reposition(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { FilteringLogic, IFilteringExpression } from '../../public_api';\n\nexport declare interface IFilteringExpressionsTree {\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[];\n    operator: FilteringLogic;\n    fieldName?: string;\n\n    find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression;\n    findIndex(fieldName: string): number;\n}\n\nexport class FilteringExpressionsTree implements IFilteringExpressionsTree {\n\n    /**\n     * Sets/gets the filtering operands.\n     * ```typescript\n     * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n     * const expression = [\n     * {\n     *   condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *   fieldName: 'Column Field',\n     *   searchVal: 'Value',\n     *   ignoreCase: false\n     * }];\n     * gridExpressionsTree.filteringOperands.push(expression);\n     * this.grid.filteringExpressionsTree = gridExpressionsTree;\n     * ```\n     * ```typescript\n     * let filteringOperands = gridExpressionsTree.filteringOperands;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[] = [];\n\n    /**\n     * Sets/gets the operator.\n     * ```typescript\n     * gridExpressionsTree.operator = FilteringLogic.And;\n     * ```\n     * ```typescript\n     * let operator = gridExpressionsTree.operator;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    operator: FilteringLogic;\n\n    /**\n     * Sets/gets the field name of the column where the filtering expression is placed.\n     * ```typescript\n     *  gridExpressionTree.fieldName = 'Column Field';\n     * ```\n     * ```typescript\n     * let columnField = expressionTree.fieldName;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    fieldName?: string;\n\n    constructor(operator: FilteringLogic, fieldName?: string) {\n        this.operator = operator;\n        this.fieldName = fieldName;\n    }\n\n    /**\n     * Returns the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpression = gridExpressionTree.find('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression {\n        const index = this.findIndex(fieldName);\n\n        if (index > -1) {\n            return this.filteringOperands[index];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the index of the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public findIndex(fieldName: string): number {\n        let expr;\n        for (let i = 0; i < this.filteringOperands.length; i++) {\n            expr = this.filteringOperands[i];\n            if (expr instanceof FilteringExpressionsTree) {\n                if (this.isFilteringExpressionsTreeForColumn(expr, fieldName)) {\n                    return i;\n                }\n            } else {\n                if ((expr as IFilteringExpression).fieldName === fieldName) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    protected isFilteringExpressionsTreeForColumn(expressionsTree: IFilteringExpressionsTree, fieldName: string): boolean {\n        if (expressionsTree.fieldName === fieldName) {\n            return true;\n        }\n\n        let expr;\n        for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n            expr = expressionsTree.filteringOperands[i];\n            if ((expr instanceof FilteringExpressionsTree)) {\n                return this.isFilteringExpressionsTreeForColumn(expr, fieldName);\n            } else {\n                return (expr as IFilteringExpression).fieldName === fieldName;\n            }\n        }\n\n        return false;\n    }\n}\n","import { DataUtil } from './data-util';\nimport { IFilteringOperation } from './filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { IFilteringState } from './filtering-state.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from './filtering-expressions-tree';\n\nexport interface IFilteringStrategy {\n    filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n}\n\nexport abstract class BaseFilteringStrategy implements IFilteringStrategy  {\n    public abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n\n    protected abstract getFieldValue(rec: object, fieldName: string): any;\n\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = this.getFieldValue(rec, expr.fieldName);\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n\n    public matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (expressions) {\n            if (expressions instanceof FilteringExpressionsTree) {\n                const expressionsTree = expressions as IFilteringExpressionsTree;\n                const operator = expressionsTree.operator as FilteringLogic;\n                let match, matchOperand, operand;\n\n                if (expressionsTree.filteringOperands) {\n                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                        operand = expressionsTree.filteringOperands[i];\n                        matchOperand = this.matchRecord(rec, operand);\n\n                        if (match === undefined) {\n                            match = matchOperand;\n                        } else if (operator === FilteringLogic.And) {\n                            match = match && matchOperand;\n                        } else if (operator === FilteringLogic.Or) {\n                            match = match || matchOperand;\n                        }\n                    }\n                }\n\n                return match === undefined ? true : match;\n            } else {\n                const expression = expressions as IFilteringExpression;\n                return this.findMatchByExpression(rec, expression);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class FilteringStrategy extends BaseFilteringStrategy {\n    public filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree): T[] {\n        let i;\n        let rec;\n        const len = data.length;\n        const res: T[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = data[i];\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        return rec[fieldName];\n    }\n}\n","import { IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\n\nexport const filteringStateDefaults = {\n    strategy: new FilteringStrategy()\n};\n\nexport declare interface IFilteringState {\n    expressionsTree: IFilteringExpressionsTree;\n    strategy?: IFilteringStrategy;\n}\n","import { cloneArray } from '../core/utils';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\n\nexport interface ISortingStrategy {\n    sort: (data: any[], expressions: ISortingExpression[]) => any[];\n    groupBy: (data: any[], expressions: ISortingExpression[]) => IGroupByResult;\n    compareValues: (a: any, b: any) => number;\n}\n\nexport interface IGroupByResult {\n    data: any[];\n    metadata: IGroupByRecord[];\n}\n\nexport class SortingStrategy implements ISortingStrategy {\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return this.sortDataRecursive(data, expressions);\n    }\n    public groupBy(data: any[], expressions: ISortingExpression[]): IGroupByResult {\n        const metadata: IGroupByRecord[] = [];\n        const grouping = this.groupDataRecursive(data, expressions, 0, null, metadata);\n        return {\n            data: grouping,\n            metadata: metadata\n        };\n    }\n    public compareValues(a: any, b: any) {\n        const an = (a === null || a === undefined);\n        const bn = (b === null || b === undefined);\n        if (an) {\n            if (bn) {\n                return 0;\n            }\n            return -1;\n        } else if (bn) {\n            return 1;\n        }\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n    protected compareObjects(obj1: object, obj2: object, key: string, reverse: number, ignoreCase: boolean, strategy: ISortingStrategy) {\n        let a = this.getFieldValue(obj1, key);\n        let b = this.getFieldValue(obj2, key);\n        if (ignoreCase) {\n            a = a && a.toLowerCase ? a.toLowerCase() : a;\n            b = b && b.toLowerCase ? b.toLowerCase() : b;\n        }\n        if (strategy) {\n            return reverse * strategy.compareValues(a, b);\n        } else {\n            return reverse * this.compareValues(a, b);\n        }\n    }\n    protected getFieldValue(obj: any, key: string): any {\n        return obj[key];\n    }\n    protected arraySort<T>(data: T[], compareFn?): T[] {\n        return data.sort(compareFn);\n    }\n    private groupedRecordsByExpression<T>(data: T[], index: number, expression: ISortingExpression): T[] {\n        let i;\n        let groupval;\n        const res = [];\n        const key = expression.fieldName;\n        const len = data.length;\n        res.push(data[index]);\n        groupval = this.getFieldValue(data[index], key);\n        index++;\n        for (i = index; i < len; i++) {\n            if (this.compareValues(this.getFieldValue(data[i], key), groupval) === 0) {\n                res.push(data[i]);\n            } else {\n                break;\n            }\n        }\n        return res;\n    }\n    private sortByFieldExpression<T>(data: T[], expression: ISortingExpression): T[] {\n\n        const key = expression.fieldName;\n        const firstRow = data[0];\n        const firstRowValue = firstRow ? this.getFieldValue(firstRow, key) : undefined;\n        const ignoreCase = expression.ignoreCase ?\n            firstRow && (typeof firstRowValue === 'string' ||\n                firstRowValue === null ||\n                firstRowValue === undefined) :\n            false;\n        const reverse = (expression.dir === SortingDirection.Desc ? -1 : 1);\n        const cmpFunc = (obj1, obj2) => {\n            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, expression.strategy);\n        };\n        return this.arraySort(data, cmpFunc);\n    }\n    private sortDataRecursive<T>(data: T[],\n                                 expressions: ISortingExpression[],\n                                 expressionIndex: number = 0): T[] {\n        let i;\n        let j;\n        let expr;\n        let gbData;\n        let gbDataLen;\n        const exprsLen = expressions.length;\n        const dataLen = data.length;\n        expressionIndex = expressionIndex || 0;\n        if (expressionIndex >= exprsLen || dataLen <= 1) {\n            return data;\n        }\n        expr = expressions[expressionIndex];\n        data = this.sortByFieldExpression(data, expr);\n        if (expressionIndex === exprsLen - 1) {\n            return data;\n        }\n        // in case of multiple sorting\n        for (i = 0; i < dataLen; i++) {\n            gbData = this.groupedRecordsByExpression(data, i, expr);\n            gbDataLen = gbData.length;\n            if (gbDataLen > 1) {\n                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);\n            }\n            for (j = 0; j < gbDataLen; j++) {\n                data[i + j] = gbData[j];\n            }\n            i += gbDataLen - 1;\n        }\n        return data;\n    }\n    private groupDataRecursive<T>(data: T[], expressions: ISortingExpression[], level: number,\n        parent: IGroupByRecord, metadata: IGroupByRecord[]): T[] {\n        let i = 0;\n        let result = [];\n        while (i < data.length) {\n            const group = this.groupedRecordsByExpression(data, i, expressions[level]);\n            const groupRow: IGroupByRecord = {\n                expression: expressions[level],\n                level,\n                records: cloneArray(group),\n                value: group[0][expressions[level].fieldName],\n                groupParent: parent\n            };\n            if (level < expressions.length - 1) {\n                result = result.concat(this.groupDataRecursive(group, expressions, level + 1, groupRow, metadata));\n            } else {\n                for (const groupItem of group) {\n                    metadata.push(groupRow);\n                    result.push(groupItem);\n                }\n            }\n            i += group.length;\n        }\n        return result;\n    }\n}\n\nexport class TreeGridSortingStrategy extends SortingStrategy {\n    protected getFieldValue(obj: any, key: string): any {\n        return obj['data'][key];\n    }\n}\n","import { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport {ISortingStrategy, SortingStrategy} from './sorting-strategy';\n\n// tslint:disable-next-line:variable-name\nexport const SortingStateDefaults = {\n    strategy: new SortingStrategy()\n};\n\nexport interface ISortingState {\n    expressions: ISortingExpression[];\n    strategy?: ISortingStrategy;\n}\n","import { filteringStateDefaults, IFilteringState } from './filtering-state.interface';\nimport { ISortingState, SortingStateDefaults } from './sorting-state.interface';\nimport { IGroupByResult, TreeGridSortingStrategy } from './sorting-strategy';\nimport { IPagingState, PagingError } from './paging-state.interface';\nimport { IDataState } from './data-state.interface';\nimport { IGroupByExpandState, IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { Transaction, TransactionType, HierarchicalTransaction, IgxHierarchicalTransactionService, HierarchicalState } from '../services';\nimport { mergeObjects, cloneValue } from '../core/utils';\nimport { ITreeGridRecord } from '../grids/tree-grid/tree-grid.interfaces';\n\n/**\n * @hidden\n */\nexport enum DataType {\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Date = 'date'\n}\n\n/**\n * @hidden\n */\nexport class DataUtil {\n    public static mergeDefaultProperties(target: object, defaults: object) {\n        if (!defaults) {\n            return target;\n        }\n        if (!target) {\n            target = Object.assign({}, defaults);\n            return target;\n        }\n        Object\n            .keys(defaults)\n            .forEach((key) => {\n                if (target[key] === undefined && defaults[key] !== undefined) {\n                    target[key] = defaults[key];\n                }\n            });\n        return target;\n    }\n    public static sort<T>(data: T[], state: ISortingState): T[] {\n        // set defaults\n        DataUtil.mergeDefaultProperties(state, SortingStateDefaults);\n        // apply default settings for each sorting expression(if not set)\n        return state.strategy.sort(data, state.expressions);\n    }\n\n    public static hierarchicalSort(hierarchicalData: ITreeGridRecord[], state: ISortingState, parent: ITreeGridRecord): ITreeGridRecord[] {\n        state.strategy = new TreeGridSortingStrategy();\n        let res: ITreeGridRecord[] = [];\n\n        hierarchicalData.forEach((hr: ITreeGridRecord) => {\n            const rec: ITreeGridRecord = DataUtil.cloneTreeGridRecord(hr);\n            rec.parent = parent;\n            if (rec.children) {\n                rec.children = DataUtil.hierarchicalSort(rec.children, state, rec);\n            }\n            res.push(rec);\n        });\n\n        res = DataUtil.sort(res, state);\n\n        return res;\n    }\n\n    public static cloneTreeGridRecord(hierarchicalRecord: ITreeGridRecord) {\n        const rec: ITreeGridRecord = {\n            rowID: hierarchicalRecord.rowID,\n            data: hierarchicalRecord.data,\n            children: hierarchicalRecord.children,\n            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,\n            level: hierarchicalRecord.level,\n            expanded: hierarchicalRecord.expanded,\n            path: [...hierarchicalRecord.path]\n        };\n        return rec;\n    }\n\n    public static group<T>(data: T[], state: IGroupingState): IGroupByResult {\n        // set defaults\n        DataUtil.mergeDefaultProperties(state, SortingStateDefaults);\n        // apply default settings for each grouping expression(if not set)\n        return state.strategy.groupBy(data, state.expressions);\n    }\n    public static restoreGroups(groupData: IGroupByResult, state: IGroupingState, groupsRecords: any[] = []): any[] {\n        DataUtil.mergeDefaultProperties(state, SortingStateDefaults);\n        if (state.expressions.length === 0) {\n            return groupData.data;\n        }\n        return this.restoreGroupsRecursive(groupData, 1, state.expressions.length, state.expansion, state.defaultExpanded, groupsRecords);\n    }\n    private static restoreGroupsRecursive(\n        groupData: IGroupByResult, level: number, depth: number,\n        expansion: IGroupByExpandState[], defaultExpanded: boolean, groupsRecords): any[] {\n        let i = 0;\n        let j: number;\n        let result = [];\n        // empty the array without changing reference\n        groupsRecords.splice(0, groupsRecords.length);\n        if (level !== depth) {\n            groupData.data = this.restoreGroupsRecursive(groupData, level + 1, depth, expansion, defaultExpanded, groupsRecords);\n        }\n        while (i < groupData.data.length) {\n            const g = level === depth ? groupData.metadata[i] :\n                groupData.data[i].groupParent;\n            for (j = i + 1; j < groupData.data.length; j++) {\n                const h = level === depth ? groupData.metadata[j] :\n                    groupData.data[j].groupParent;\n                if (h && g !== h && g.level === h.level) {\n                    break;\n                }\n            }\n            const hierarchy = this.getHierarchy(g);\n            const expandState: IGroupByExpandState = expansion.find((state) =>\n                this.isHierarchyMatch(state.hierarchy || [{ fieldName: g.expression.fieldName, value: g.value }], hierarchy));\n            const expanded = expandState ? expandState.expanded : defaultExpanded;\n            result.push(g);\n            groupsRecords.push(g);\n\n            g['groups'] = groupData.data.slice(i, j).filter((e) =>\n                e.records && e.records.length && e.level === g.level + 1);\n            while (groupsRecords.length) {\n                if (groupsRecords[0].level + 1 > level) {\n                    groupsRecords.shift();\n                } else {\n                    break;\n                }\n            }\n            if (expanded) {\n                result = result.concat(groupData.data.slice(i, j));\n            }\n            i = j;\n        }\n        return result;\n    }\n    public static page<T>(data: T[], state: IPagingState): T[] {\n        if (!state) {\n            return data;\n        }\n        const len = data.length;\n        const index = state.index;\n        const res = [];\n        const recordsPerPage = state.recordsPerPage;\n        state.metadata = {\n            countPages: 0,\n            countRecords: data.length,\n            error: PagingError.None\n        };\n        if (index < 0 || isNaN(index)) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\n            return res;\n        }\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\n        if (!len) {\n            return data;\n        }\n        if (index >= state.metadata.countPages) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\n    }\n    public static filter<T>(data: T[], state: IFilteringState): T[] {\n        // set defaults\n        DataUtil.mergeDefaultProperties(state, filteringStateDefaults);\n        if (!state.strategy) {\n            return data;\n        }\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n    public static process<T>(data: T[], state: IDataState): T[] {\n        if (!state) {\n            return data;\n        }\n        if (state.filtering) {\n            data = DataUtil.filter(data, state.filtering);\n        }\n        if (state.sorting) {\n            data = DataUtil.sort(data, state.sorting);\n        }\n        if (state.paging) {\n            data = DataUtil.page(data, state.paging);\n        }\n        return data;\n    }\n\n    public static getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n        const hierarchy: Array<IGroupByKey> = [];\n        if (gRow !== undefined && gRow.expression) {\n            hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            while (gRow.groupParent) {\n                gRow = gRow.groupParent;\n                hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            }\n        }\n        return hierarchy;\n    }\n\n    public static isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n        if (h1.length !== h2.length) {\n            return false;\n        }\n        return h1.every((level, index): boolean => {\n            return level.fieldName === h2[index].fieldName && level.value === h2[index].value;\n        });\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param primaryKey Primary key of the collection, if any\n     */\n    public static mergeTransactions<T>(data: T[], transactions: Transaction[], primaryKey?: any): T[] {\n        data.forEach((item: any, index: number) => {\n            const rowId = primaryKey ? item[primaryKey] : item;\n            const transaction = transactions.find(t => t.id === rowId);\n            if (Array.isArray(item.children)) {\n                this.mergeTransactions(item.children, transactions, primaryKey);\n            }\n            if (transaction && transaction.type === TransactionType.UPDATE) {\n                data[index] = transaction.newValue;\n            }\n        });\n\n        data.push(...transactions\n            .filter(t => t.type === TransactionType.ADD)\n            .map(t => t.newValue));\n        return data;\n    }\n\n    // TODO: optimize addition of added rows. Should not filter transaction in each recursion!!!\n    /** @experimental @hidden */\n    public static mergeHierarchicalTransactions(\n        data: any[],\n        transactions: HierarchicalTransaction[],\n        childDataKey: any,\n        primaryKey?: any,\n        parentKey?: any): any[] {\n\n        for (let index = 0; index < data.length; index++) {\n            const dataItem = data[index];\n            const rowId = primaryKey ? dataItem[primaryKey] : dataItem;\n            const updateTransaction = transactions.filter(t => t.type === TransactionType.UPDATE).find(t => t.id === rowId);\n            const addedTransactions = transactions.filter(t => t.type === TransactionType.ADD).filter(t => t.parentId === rowId);\n            if (updateTransaction || addedTransactions.length > 0) {\n                data[index] = mergeObjects(cloneValue(dataItem), updateTransaction && updateTransaction.newValue);\n            }\n            if (addedTransactions.length > 0) {\n                if (!data[index][childDataKey]) {\n                    data[index][childDataKey] = [];\n                }\n                for (const addedTransaction of addedTransactions) {\n                    data[index][childDataKey].push(addedTransaction.newValue);\n                }\n            }\n            if (data[index][childDataKey]) {\n                data[index][childDataKey] = this.mergeHierarchicalTransactions(\n                    data[index][childDataKey],\n                    transactions,\n                    childDataKey,\n                    primaryKey,\n                    rowId\n                );\n            }\n        }\n        return data;\n    }\n}\n","\n/**\n * @hidden\n */\nexport class ExportUtilities {\n    public static getKeysFromData(data: any[]) {\n        const length = data.length;\n        if (length === 0) {\n            return [];\n        }\n\n        const dataEntry = data[0];\n        const dataEntryMiddle = data[Math.floor(length / 2)];\n        const dataEntryLast = data[length - 1];\n\n        const keys1 = Object.keys(dataEntry);\n        const keys2 = Object.keys(dataEntryMiddle);\n        const keys3 = Object.keys(dataEntryLast);\n\n        const keys = new Set(keys1.concat(keys2).concat(keys3));\n\n        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : [ 'Column 1' ];\n    }\n\n    public static saveBlobToFile(blob: Blob, fileName) {\n        const a = document.createElement('a');\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, fileName);\n        } else {\n            const url = window.URL.createObjectURL(blob);\n            a.download = fileName;\n\n            a.href = url;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    public static stringToArrayBuffer(s: string): ArrayBuffer {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i !== s.length; ++i) {\n            /* tslint:disable no-bitwise */\n            view[i] = s.charCodeAt(i) & 0xFF;\n            /* tslint:enable no-bitwise */\n        }\n        return buf;\n    }\n\n    public static isSpecialData(data: any[]): boolean {\n        const dataEntry = data[0];\n        return (typeof dataEntry === 'string' ||\n                typeof dataEntry === 'number' ||\n                dataEntry instanceof Date);\n    }\n\n    public static hasValue(value: any): boolean {\n        return value !== undefined && value !== null;\n    }\n\n}\n","import {\n    EventEmitter,\n    Output\n} from '@angular/core';\n\nimport { cloneValue } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\n\nimport { ExportUtilities } from './export-utilities';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\n\nexport interface IRowExportingEventArgs {\n    rowData: any;\n    rowIndex: number;\n    cancel: boolean;\n}\n\nexport interface IColumnExportingEventArgs {\n    header: string;\n    columnIndex: number;\n    cancel: boolean;\n}\n\nexport abstract class IgxBaseExporter {\n    private _columnList: any[];\n    protected _indexOfLastPinnedColumn = -1;\n\n    protected _sort = null;\n\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onRowExport = new EventEmitter<IRowExportingEventArgs>();\n\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onColumnExport = new EventEmitter<IColumnExportingEventArgs>();\n\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public export(grid: any, options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        const columns = grid.columnList.toArray();\n        this._columnList = new Array<any>(columns.length);\n\n        const hiddenColumns = [];\n        let lastVisbleColumnIndex = -1;\n\n        columns.forEach((column) => {\n            const columnHeader = column.header !== '' ? column.header : column.field;\n            const exportColumn = !column.hidden || options.ignoreColumnsVisibility;\n            const index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;\n\n            const columnInfo = {\n                header: columnHeader,\n                field: column.field,\n                skip: !exportColumn,\n                formatter: column.formatter\n            };\n\n            if (index !== -1) {\n                this._columnList[index] = columnInfo;\n                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);\n            } else {\n                hiddenColumns.push(columnInfo);\n            }\n\n            if (column.pinned && exportColumn) {\n                this._indexOfLastPinnedColumn = index;\n            }\n        });\n\n        // Append the hidden columns to the end of the list\n        hiddenColumns.forEach((hiddenColumn) => {\n           this._columnList[++lastVisbleColumnIndex] = hiddenColumn;\n        });\n\n        const data = this.prepareData(grid, options);\n        this.exportData(data, options);\n    }\n\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public exportData(data: any[], options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        if (!this._columnList || this._columnList.length === 0) {\n            const keys = ExportUtilities.getKeysFromData(data);\n            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false}));\n        }\n\n        let skippedPinnedColumnsCount = 0;\n        this._columnList.forEach((column, index) => {\n            if (!column.skip) {\n                const columnExportArgs = {\n                    header: column.header,\n                    columnIndex: index,\n                    cancel: false\n                };\n                this.onColumnExport.emit(columnExportArgs);\n\n                column.header = columnExportArgs.header;\n                column.skip = columnExportArgs.cancel;\n\n                if (column.skip && index <= this._indexOfLastPinnedColumn) {\n                    skippedPinnedColumnsCount++;\n                }\n\n                if (this._sort && this._sort.fieldName === column.field) {\n                    if (column.skip) {\n                        this._sort = null;\n                    } else {\n                        this._sort.fieldName = column.header;\n                    }\n                }\n            }\n        });\n\n        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;\n\n        const dataToExport = new Array<any>();\n        const isSpecialData = ExportUtilities.isSpecialData(data);\n\n        data.forEach((row, index) => {\n            this.exportRow(dataToExport, row, index, isSpecialData);\n        });\n\n        this.exportDataImplementation(dataToExport, options);\n        this.resetDefaults();\n    }\n\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n\n    private exportRow(data: any[], rowData: any, index: number, isSpecialData: boolean) {\n        let row;\n\n        if (!isSpecialData) {\n            row = this._columnList.reduce((a, e) => {\n                if (!e.skip) {\n                    const rawValue = rowData[e.field];\n                    a[e.header] = e.formatter ? e.formatter(rawValue) : rawValue;\n                }\n                return a;\n            }, {});\n        } else {\n            row = rowData;\n        }\n\n        const rowArgs = {\n            rowData: row,\n            rowIndex: index,\n            cancel: false\n        };\n        this.onRowExport.emit(rowArgs);\n\n        if (!rowArgs.cancel) {\n            data.push(rowArgs.rowData);\n        }\n    }\n\n    private prepareData(grid: any, options: IgxExporterOptionsBase): any[] {\n        let data = grid.data;\n\n        if (grid.filteringExpressionsTree &&\n            grid.filteringExpressionsTree.filteringOperands.length > 0 &&\n            !options.ignoreFiltering) {\n\n            const filteringState = {\n                expressionsTree: grid.filteringExpressionsTree,\n                logic: grid.filteringLogic\n            };\n\n            data = DataUtil.filter(data, filteringState);\n        }\n\n        if (grid.sortingExpressions &&\n            grid.sortingExpressions.length > 0 &&\n            !options.ignoreSorting) {\n\n            const sortingState = {\n                expressions: grid.sortingExpressions\n            };\n\n            this._sort = cloneValue(grid.sortingExpressions[0]);\n\n            data =  DataUtil.sort(data, sortingState);\n        }\n\n        return data;\n    }\n\n    private resetDefaults() {\n        this._columnList = [];\n        this._indexOfLastPinnedColumn = -1;\n        this._sort = null;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class CharSeparatedValueData {\n    private _headerRecord = '';\n    private _dataRecords = '';\n    private _eor = '\\r\\n';\n    private _delimiter;\n    private _escapeCharacters = ['\\r', '\\n', '\\r\\n'];\n    private _delimiterLength = 1;\n    private _isSpecialData = false;\n\n    constructor(private _data: any[], valueDelimiter: string) {\n        this.setDelimiter(valueDelimiter);\n    }\n\n    public prepareData() {\n        if (!this._data || this._data.length === 0) {\n            return '';\n        }\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            return '';\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);\n\n        return this._headerRecord + this._dataRecords;\n    }\n\n    private processField(value, escapeChars): string {\n        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';\n        if (escapeChars.some((v) => safeValue.includes(v))) {\n            safeValue = `\"${safeValue}\"`;\n        }\n        return safeValue + this._delimiter;\n    }\n\n    private processHeaderRecord(keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n            recordData += this.processField(keyName, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processRecord(record, keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n\n            const value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : '';\n            recordData += this.processField(value, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processDataRecords(currentData, keys, escapeChars) {\n        let dataRecords = '';\n        for (const row of currentData) {\n            dataRecords += this.processRecord(row, keys, escapeChars);\n        }\n\n        return dataRecords;\n    }\n\n    private setDelimiter(value) {\n        this._delimiter = value;\n        this._delimiterLength = value.length;\n    }\n}\n","export abstract class IgxExporterOptionsBase {\n    private _fileName: string;\n\n    /**\n     * Specifies whether hidden columns should be exported.\n     * ```typescript\n     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;\n     * this.exportOptions.ignoreColumnsVisibility = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsVisibility = false;\n\n    /**\n     * Specifies whether filtered out rows should be exported.\n     * ```typescript\n     * let ignoreFiltering = this.exportOptions.ignoreFiltering;\n     * this.exportOptions.ignoreFiltering = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreFiltering = false;\n\n    /**\n     * Specifies if the exporter should ignore the current column order in the IgxGrid.\n     * ```typescript\n     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;\n     * this.exportOptions.ignoreColumnsOrder = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsOrder = false;\n\n    /**\n     * Specifies whether the exported data should be sorted as in the provided IgxGrid.\n     * ```typescript\n     * let ignoreSorting = this.exportOptions.ignoreSorting;\n     * this.exportOptions.ignoreSorting = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreSorting = false;\n\n    constructor(fileName: string, protected _fileExtension: string) {\n        this.setFileName(fileName);\n    }\n\n    private setFileName(fileName: string): void {\n        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');\n    }\n\n    /**\n     * Gets the file name which will be used for the exporting operation.\n     * ```typescript\n     * let fileName = this.exportOptions.fileName;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    get fileName() {\n        return this._fileName;\n    }\n\n    /**\n     * Sets the file name which will be used for the exporting operation.\n     * ```typescript\n     * this.exportOptions.fileName = 'exportedData01';\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    set fileName(value) {\n        this.setFileName(value);\n    }\n\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the CSV exporting process.\n */\nexport class IgxCsvExporterOptions extends IgxExporterOptionsBase {\n\n    private _valueDelimiter;\n    private _fileType;\n\n    constructor(fileName: string, fileType: CsvFileTypes) {\n        super(fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType));\n        this.setFileType(fileType);\n        this.setDelimiter();\n    }\n\n    private static getExtensionFromFileType(fType: CsvFileTypes) {\n        let extension = '';\n        switch (fType) {\n            case CsvFileTypes.CSV:\n                extension = '.csv';\n                break;\n            case CsvFileTypes.TSV:\n                extension = '.tsv';\n                break;\n            case CsvFileTypes.TAB:\n                extension = '.tab';\n                break;\n            default:\n                throw Error('Unsupported CSV file type!');\n        }\n        return extension;\n    }\n\n    /**\n     * Gets the value delimiter which will be used for the exporting operation.\n     * ```typescript\n     * let delimiter = this.exportOptions.valueDelimiter;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get valueDelimiter() {\n        return this._valueDelimiter;\n    }\n\n    /**\n     * Sets a value delimiter which will overwrite the default delimiter of the selected export format.\n     * ```typescript\n     * this.exportOptions.valueDelimiter = '|';\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set valueDelimiter(value) {\n        this.setDelimiter(value);\n    }\n\n    /**\n     * Gets the CSV export format.\n     * ```typescript\n     * let filetype = this.exportOptions.fileType;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get fileType() {\n        return this._fileType;\n    }\n\n    /**\n     * Sets the CSV export format.\n     * ```typescript\n     * this.exportOptions.fileType = CsvFileTypes.TAB;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set fileType(value) {\n        this.setFileType(value);\n    }\n\n    private setFileType(value) {\n        if (value !== undefined && value !== null && value !== this._fileType) {\n            this._fileType = value;\n            const extension = IgxCsvExporterOptions.getExtensionFromFileType(value);\n            if (!this.fileName.endsWith(extension)) {\n                const oldExt = '.' + this.fileName.split('.').pop();\n                const newName = this.fileName.replace(oldExt, extension);\n                this._fileExtension = extension;\n                this.fileName = newName;\n            }\n        }\n    }\n\n    private setDelimiter(value?) {\n        if (value !== undefined && value !== '' && value !== null) {\n            this._valueDelimiter = value;\n        } else {\n            switch (this.fileType) {\n                case CsvFileTypes.CSV:\n                    this._valueDelimiter = ',';\n                    break;\n                case CsvFileTypes.TSV:\n                case CsvFileTypes.TAB:\n                    this._valueDelimiter = '\\t';\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * This enumeration is used to configure the default value separator\n * as well as the default file extension used when performing CSV exporting.\n */\nexport enum CsvFileTypes {\n    /**\n     * Character Separated Values, default separator is \"comma\", default file extension is .csv\n     */\n    CSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tsv\n     */\n    TSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tab\n     */\n    TAB\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { CharSeparatedValueData } from './char-separated-value-data';\nimport { CsvFileTypes, IgxCsvExporterOptions } from './csv-exporter-options';\n\nexport interface ICsvExportEndedEventArgs {\n    csvData: string;\n}\n\n/**\n * **Ignite UI for Angular CSV Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_csv.html)\n *\n * The Ignite UI for Angular CSV Exporter service can export data in a Character Separated Values format from\n * both raw data (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private csvExportService: IgxCsvExporterService) {\n * }\n *\n * const opt: IgxCsvExporterOptions = new IgxCsvExporterOptions(\"FileName\", CsvFileTypes.CSV);\n * this.csvExportService.exportData(this.localData, opt);\n * ```\n */\n@Injectable()\nexport class IgxCsvExporterService extends IgxBaseExporter {\n    private _stringData: string;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: ICsvExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxCsvExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<ICsvExportEndedEventArgs>();\n\n    protected exportDataImplementation(data: any[], options: IgxCsvExporterOptions) {\n        const csvData = new CharSeparatedValueData(data, options.valueDelimiter);\n        this._stringData = csvData.prepareData();\n\n        this.saveFile(options);\n        this.onExportEnded.emit({ csvData: this._stringData });\n    }\n\n    private saveFile(options: IgxCsvExporterOptions) {\n        switch (options.fileType) {\n            case CsvFileTypes.CSV:\n                this.exportFile(this._stringData, options.fileName, 'text/csv;charset=utf-8;');\n                break;\n            case CsvFileTypes.TSV:\n            case CsvFileTypes.TAB:\n                this.exportFile(this._stringData, options.fileName, 'text/tab-separated-values;charset=utf-8;');\n                break;\n        }\n    }\n\n    private exportFile(data: string, fileName: string, fileType: string): void {\n        const blob = new Blob(['\\ufeff', data], { type: fileType });\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","/** @hidden */\nexport class ExcelStrings {\n    /* tslint:disable max-line-length */\n    private static XML_STRING = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n';\n    private static SHARED_STRING_RELATIONSHIP = '<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n\n    public static getRels(): string {\n        return ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>';\n    }\n\n    public static getApp(): string {\n        return ExcelStrings.XML_STRING + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>Sheet1</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>';\n    }\n\n    public static getCore(): string {\n        return ExcelStrings.XML_STRING + '<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator>Dimitar Davidkov</dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>';\n    }\n\n    public static getTheme(): string {\n        return ExcelStrings.XML_STRING + '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯ Light\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿ Light\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>';\n    }\n\n    public static getStyles(hasNonStringValues: boolean): string {\n        const additionalCellXF = '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>';\n        const cellXFCount = hasNonStringValues ? 2 : 1;\n        return ExcelStrings.XML_STRING + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"' + cellXFCount + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' + additionalCellXF + '</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>';\n    }\n\n    public static getWorkbook(): string {\n        return ExcelStrings.XML_STRING + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>';\n    }\n\n    public static getWorksheetRels(): string {\n        return ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>`;\n    }\n\n    public static getWorkbookRels(hasSharedStrings): string {\n        let retVal = ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>';\n\n        if (hasSharedStrings) {\n            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;\n        }\n\n        retVal += '</Relationships>';\n\n        return retVal;\n    }\n\n    public static getSheetXML(dimension: string, freezePane: string, cols: string, sheetData: string, hasTable: boolean): string {\n        const tableParts = hasTable ? '<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>' : '';\n        return ExcelStrings.XML_STRING + '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"' + dimension + '\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">' + freezePane + '</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>' + cols + sheetData + '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>' + tableParts + '</worksheet>';\n    }\n\n    public static getSharedStringXML(count: number, uniqueCount: number, table: string): string {\n        return ExcelStrings.XML_STRING + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + count + '\" uniqueCount=\"' + uniqueCount + '\">' + table + '</sst>';\n    }\n\n    public static getContentTypesXML(hasSharedStrings: boolean, hasTable: boolean): string {\n        let contentTypes = ExcelStrings.XML_STRING +\n        `<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>`;\n\n        contentTypes += hasSharedStrings ?\n        `\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>` : '';\n\n        contentTypes += hasTable ?\n            `<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>` : '';\n        contentTypes += `</Types>`;\n\n        return contentTypes;\n    }\n\n    public static getTablesXML(dimension: string, tableColumns: string, sort: string): string {\n        return `${ExcelStrings.XML_STRING}<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"${dimension}\" totalsRowShown=\"0\">\n    <autoFilter ref=\"${dimension}\"/>${sort}${tableColumns}<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>`;\n    }\n    /* tslint:enable max-line-length */\n\n    public static getExcelColumn(index: number): string {\n        // Returns the excel column name for given 0-based index\n        // For example 27 should return \"AB\"\n        let returnString = '';\n        while (index >= 0) {\n            const char = index % 26;\n            returnString = String.fromCharCode(65 + char) + returnString;\n            index = Math.floor(index / 26) - 1;\n        }\n        return returnString;\n    }\n}\n","import { IExcelFile } from './excel-interfaces';\nimport { ExcelStrings } from './excel-strings';\nimport { WorksheetData } from './worksheet-data';\n\nimport * as JSZip from 'jszip/dist/jszip';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class RootRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('.rels', ExcelStrings.getRels());\n    }\n}\n\n/**\n * @hidden\n */\nexport class AppFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('app.xml', ExcelStrings.getApp());\n    }\n}\n\n/**\n * @hidden\n */\nexport class CoreFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('core.xml', ExcelStrings.getCore());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const hasSharedStrings = worksheetData.isEmpty === false;\n        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ThemeFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('theme1.xml', ExcelStrings.getTheme());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetFile implements IExcelFile {\n    private static MIN_WIDTH = 8.34;\n\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const sheetData = [];\n        const cols = [];\n        let dimension: string;\n        const dictionary = worksheetData.dataDictionary;\n        let freezePane = '';\n\n        if (worksheetData.isEmpty) {\n            sheetData.push('<sheetData/>');\n            dimension = 'A1';\n        } else {\n            sheetData.push('<sheetData>');\n            const height =  worksheetData.options.rowHeight;\n            const rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n            sheetData.push(`<row r=\"1\"${rowHeight}>`);\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData.push(`<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`);\n            }\n            sheetData.push('</row>');\n\n            for (let i = 1; i < worksheetData.rowCount; i++) {\n                sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}>`);\n\n                for (let j = 0; j < worksheetData.columnCount; j++) {\n                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n                    sheetData.push(cellData);\n                }\n                sheetData.push('</row>');\n            }\n            sheetData.push('</sheetData>');\n            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n\n            cols.push('<cols>');\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                const widthInTwips = worksheetData.options.columnWidth ?\n                                    worksheetData.options.columnWidth :\n                                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n\n                cols.push(`<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`);\n            }\n            cols.push('</cols>');\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n        }\n        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n        folder.file('sheet1.xml', ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable));\n    }\n\n    /* tslint:disable member-ordering */\n    private static getCellData(worksheetData: WorksheetData, row: number, column: number): string {\n        const dictionary = worksheetData.dataDictionary;\n        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);\n        const columnHeader = worksheetData.keys[column];\n\n        const cellValue = worksheetData.isSpecialData ?\n                            worksheetData.data[row - 1] :\n                            worksheetData.data[row - 1][columnHeader];\n\n        if (cellValue === undefined || cellValue === null) {\n            return `<c r=\"${columnName}\" s=\"1\"/>`;\n        } else {\n            const savedValue = dictionary.saveValue(cellValue, column, false);\n            const isSavedAsString = savedValue !== -1;\n\n            const value = isSavedAsString ? savedValue : cellValue;\n            const type = isSavedAsString ? ` t=\"s\"` : '';\n            const format = isSavedAsString ? '' : ` s=\"1\"`;\n\n            return `<c r=\"${columnName}\"${type}${format}><v>${value}</v></c>`;\n        }\n    }\n    /* tslint:enable member-ordering */\n}\n\n/**\n * @hidden\n */\nexport class StyleFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('workbook.xml', ExcelStrings.getWorkbook());\n    }\n}\n\n/**\n * @hidden\n */\nexport class ContentTypesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));\n    }\n}\n\n/**\n * @hidden\n */\nexport class SharedStringsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const dict = worksheetData.dataDictionary;\n        const sortedValues = dict.getKeys();\n        const sharedStrings = new Array<string>(sortedValues.length);\n\n        for (const value of sortedValues) {\n            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';\n        }\n\n        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(\n                        dict.stringsCount,\n                        sortedValues.length,\n                        sharedStrings.join(''))\n                    );\n    }\n}\n\n/**\n * @hidden\n */\nexport class TablesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const columnCount = worksheetData.columnCount;\n        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;\n        const dimension = 'A1:' + lastColumn;\n        const values = worksheetData.keys;\n        let sortString = '';\n\n        let tableColumns = '<tableColumns count=\"' + columnCount + '\">';\n        for (let i = 0; i < columnCount; i++) {\n            const value =  values[i];\n            tableColumns += '<tableColumn id=\"' + (i + 1) + '\" name=\"' + value + '\"/>';\n        }\n\n        tableColumns += '</tableColumns>';\n\n        if (worksheetData.sort) {\n            const sortingExpression = worksheetData.sort;\n            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));\n            const dir = sortingExpression.dir - 1;\n            sortString = `<sortState ref=\"A2:${lastColumn}\"><sortCondition descending=\"${dir}\" ref=\"${sc}1:${sc}15\"/></sortState>`;\n        }\n\n        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport { IExcelFolder } from './excel-interfaces';\nimport { WorksheetData } from './worksheet-data';\n\n/** @hidden */\nexport class RootExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ContentTypesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [\n            ExcelFolderTypes.RootRelsExcelFolder,\n            ExcelFolderTypes.DocPropsExcelFolder,\n            ExcelFolderTypes.XLExcelFolder\n        ];\n    }\n}\n\n/** @hidden */\nexport class RootRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.RootRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class DocPropsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'docProps';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [\n            ExcelFileTypes.AppFile,\n            ExcelFileTypes.CoreFile\n        ];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class XLExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'xl';\n    }\n\n    childFiles(data: WorksheetData) {\n        const retVal = [\n            ExcelFileTypes.StyleFile,\n            ExcelFileTypes.WorkbookFile\n        ];\n\n        if (!data.isEmpty) {\n            retVal.push(ExcelFileTypes.SharedStringsFile);\n        }\n\n        return retVal;\n    }\n\n    childFolders(data: WorksheetData) {\n        const retVal = [\n            ExcelFolderTypes.XLRelsExcelFolder,\n            ExcelFolderTypes.ThemeExcelFolder,\n            ExcelFolderTypes.WorksheetsExcelFolder\n        ];\n\n        if (!data.isEmpty && data.options.exportAsTable) {\n            retVal.push(ExcelFolderTypes.TablesExcelFolder);\n        }\n\n        return retVal;\n    }\n}\n\n/** @hidden */\nexport class XLRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorkbookRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class ThemeExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'theme';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ThemeFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'worksheets';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return data.isEmpty || !data.options.exportAsTable ? [] : [ExcelFolderTypes.WorksheetsRelsExcelFolder];\n    }\n}\n\n/** @hidden */\nexport class TablesExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return 'tables';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.TablesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport {\n    AppFile,\n    ContentTypesFile,\n    CoreFile,\n    RootRelsFile,\n    SharedStringsFile,\n    StyleFile,\n    TablesFile,\n    ThemeFile,\n    WorkbookFile,\n    WorkbookRelsFile,\n    WorksheetFile,\n    WorksheetRelsFile\n} from './excel-files';\n\nimport {\n    DocPropsExcelFolder,\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    TablesExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder\n} from './excel-folders';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\n/** @hidden */\nexport class ExcelElementsFactory {\n\n    public static getExcelFolder(type: ExcelFolderTypes): IExcelFolder {\n        switch (type) {\n            case ExcelFolderTypes.RootExcelFolder:\n                return new RootExcelFolder();\n            case ExcelFolderTypes.RootRelsExcelFolder:\n                return new RootRelsExcelFolder();\n            case ExcelFolderTypes.DocPropsExcelFolder:\n                return new DocPropsExcelFolder();\n            case ExcelFolderTypes.XLExcelFolder:\n                return new XLExcelFolder();\n            case ExcelFolderTypes.XLRelsExcelFolder:\n                return new XLRelsExcelFolder();\n            case ExcelFolderTypes.ThemeExcelFolder:\n                return new ThemeExcelFolder();\n            case ExcelFolderTypes.WorksheetsExcelFolder:\n                return  new WorksheetsExcelFolder();\n            case ExcelFolderTypes.WorksheetsRelsExcelFolder:\n                return new WorksheetsRelsExcelFolder();\n            case ExcelFolderTypes.TablesExcelFolder:\n                return new TablesExcelFolder();\n            default:\n                throw new Error('Unknown excel folder type!');\n        }\n    }\n\n    public static getExcelFile(type: ExcelFileTypes): IExcelFile {\n        switch (type) {\n            case ExcelFileTypes.RootRelsFile:\n                return  new RootRelsFile();\n            case ExcelFileTypes.AppFile:\n                return  new AppFile();\n            case ExcelFileTypes.CoreFile:\n                return new CoreFile();\n            case ExcelFileTypes.WorkbookRelsFile:\n                return new WorkbookRelsFile();\n            case ExcelFileTypes.ThemeFile:\n                return new ThemeFile();\n            case ExcelFileTypes.WorksheetFile:\n                return new WorksheetFile();\n            case ExcelFileTypes.StyleFile:\n                return new StyleFile();\n            case ExcelFileTypes.WorkbookFile:\n                return new WorkbookFile();\n            case ExcelFileTypes.ContentTypesFile:\n                return new ContentTypesFile();\n            case ExcelFileTypes.SharedStringsFile:\n                return new SharedStringsFile();\n            case ExcelFileTypes.WorksheetRelsFile:\n                return new WorksheetRelsFile();\n            case ExcelFileTypes.TablesFile:\n                return new TablesFile();\n            default:\n                throw Error('Unknown excel file type!');\n        }\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/** @hidden */\nexport class WorksheetDataDictionary {\n    private static DEFAULT_FONT = '11pt Calibri';\n    private static TEXT_PADDING = 5;\n\n    private _dictionary: any;\n    private _widthsDictionary: any;\n\n    private _sortedKeysByValue: string[];\n    private _sortedKeysByValueAreValid: boolean;\n\n    private _keys: string[];\n    private _keysAreValid: boolean;\n\n    private _counter: number;\n    private _calculateColumnWidth: boolean;\n    private _columnWidths: number[];\n    private _context: any;\n\n    private _columnTypeInfo: boolean[];\n    public hasNonStringValues = false;\n\n    public stringsCount: number;\n\n    constructor(columnCount: number, columnWidth: number) {\n        this._dictionary = {};\n        this._widthsDictionary = {};\n        this._counter = 0;\n        this.dirtyKeyCollections();\n\n        this._calculateColumnWidth = !columnWidth;\n        this._columnWidths = new Array<number>(columnCount);\n        this._columnTypeInfo = new Array<boolean>(columnCount);\n\n        if (!this._calculateColumnWidth) {\n            this._columnWidths.fill(columnWidth);\n        }\n\n        this.stringsCount = 0;\n    }\n\n    public get columnWidths() {\n        return this._columnWidths;\n    }\n\n    public saveValue(value: any, column: number, isHeader: boolean): number {\n        if (this._columnTypeInfo[column] === undefined && isHeader === false) {\n            this._columnTypeInfo[column] = typeof value === 'string' ||\n                                            typeof value === 'boolean' ||\n                                            value instanceof Date;\n        }\n\n        let sanitizedValue = '';\n        const isSavedAsString = this._columnTypeInfo[column] || isHeader;\n\n        if (isSavedAsString) {\n            sanitizedValue = this.sanitizeValue(value);\n\n            if (this._dictionary[sanitizedValue] === undefined) {\n                this._dictionary[sanitizedValue] = this._counter++;\n                this.dirtyKeyCollections();\n            }\n\n            this.stringsCount ++;\n        } else {\n            this.hasNonStringValues = true;\n        }\n\n        if (this._calculateColumnWidth) {\n            const width = this.getTextWidth(value);\n            const maxWidth = Math.max(this._columnWidths[column] || 0, width);\n            this._columnWidths[column] = maxWidth;\n        }\n\n        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;\n    }\n\n    public getValue(value: string): number {\n        return this.getSanitizedValue(this.sanitizeValue(value));\n    }\n\n    public getSanitizedValue(sanitizedValue: string): number {\n        return this._dictionary[sanitizedValue];\n    }\n\n    public getKeys(): string[] {\n        if (!this._keysAreValid) {\n            this._keys = Object.keys(this._dictionary);\n            this._keysAreValid = true;\n        }\n\n        return this._keys;\n    }\n\n    private getTextWidth(value: any): number {\n        if (this._widthsDictionary[value] === undefined) {\n            const context = this.getContext();\n            const metrics = context.measureText(value);\n            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;\n        }\n\n        return this._widthsDictionary[value];\n    }\n\n    private getContext(): any {\n        if (!this._context) {\n            const canvas = document.createElement('canvas');\n            this._context = canvas.getContext('2d');\n            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;\n        }\n\n        return this._context;\n    }\n\n    private sanitizeValue(value: any): string {\n        if (ExportUtilities.hasValue(value) === false) {\n            return '';\n        } else {\n            const stringValue = String(value);\n            return stringValue.replace(/&/g, '&amp;')\n                            .replace(/</g, '&lt;')\n                            .replace(/>/g, '&gt;')\n                            .replace(/\"/g, '&quot;')\n                            .replace(/'/g, '&apos;');\n        }\n    }\n\n    private dirtyKeyCollections(): void {\n        this._keysAreValid = false;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { WorksheetDataDictionary } from './worksheet-data-dictionary';\n\n/** @hidden */\nexport class WorksheetData {\n    private _columnCount: number;\n    private _rowCount: number;\n    private _dataDictionary: WorksheetDataDictionary;\n    private _keys: string[];\n    private _isSpecialData: boolean;\n\n    constructor(private _data: any[], public options: IgxExcelExporterOptions, public indexOfLastPinnedColumn, public sort: any) {\n        this.initializeData();\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    public get columnCount(): number {\n        return this._columnCount;\n    }\n\n    public get rowCount(): number {\n        return this._rowCount;\n    }\n\n    public get isEmpty() {\n        return !this.rowCount || !this._columnCount;\n    }\n\n    public get keys(): string[] {\n        return this._keys;\n    }\n\n    public get isSpecialData(): boolean {\n        return this._isSpecialData;\n    }\n\n    public get dataDictionary() {\n        return this._dataDictionary;\n    }\n\n    private initializeData() {\n        if (!this._data || this._data.length === 0) {\n            return;\n        }\n\n        this._keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (this._keys.length === 0) {\n            return;\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n\n        this._columnCount = this._keys.length;\n        this._rowCount = this._data.length + 1;\n\n        this._dataDictionary = new WorksheetDataDictionary(this._columnCount, this.options.columnWidth);\n    }\n}\n","import * as JSZip from 'jszip/dist/jszip';\n\nimport { CommonModule } from '@angular/common';\nimport { Directive, EventEmitter, Injectable, NgModule, Output } from '@angular/core';\n\nimport { ExcelElementsFactory } from './excel-elements-factory';\nimport { ExcelFolderTypes } from './excel-enums';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { WorksheetData } from './worksheet-data';\n\nexport interface IExcelExportEndedEventArgs {\n    xlsx: JSZip;\n}\n\n/**\n * **Ignite UI for Angular Excel Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)\n *\n * The Ignite UI for Angular Excel Exporter service can export data in MicrosoftÂ® ExcelÂ® format from both raw data\n * (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private excelExportService: IgxExcelExporterService) {\n * }\n *\n * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions(\"FileName\"));\n * ```\n */\n@Injectable()\nexport class IgxExcelExporterService extends IgxBaseExporter {\n\n    private static ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' };\n    private static DATA_URL_PREFIX = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,';\n\n    private _xlsx: JSZip;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxExcelExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<IExcelExportEndedEventArgs>();\n\n    private static populateFolder(folder: IExcelFolder, zip: JSZip, worksheetData: WorksheetData): any {\n        for (const childFolder of folder.childFolders(worksheetData)) {\n            const folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);\n            const zipFolder = zip.folder(folderIntance.folderName);\n            IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);\n        }\n\n        for (const childFile of folder.childFiles(worksheetData)) {\n            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);\n            fileInstance.writeElement(zip, worksheetData);\n        }\n    }\n\n    protected exportDataImplementation(data: any[], options: IgxExcelExporterOptions): void {\n        const worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort);\n        this._xlsx = new JSZip();\n\n        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);\n        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);\n\n        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {\n            this.saveFile(result, options.fileName);\n\n            this.onExportEnded.emit({ xlsx: this._xlsx });\n        });\n    }\n\n    private saveFile(data: string, fileName: string): void {\n        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {\n            type: ''\n        });\n\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the Excel exporting process.\n */\nexport class IgxExcelExporterOptions extends IgxExporterOptionsBase {\n    private _columnWidth: number;\n    private _rowHeight: number;\n\n    /**\n     * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,\n     * this option will always be considered as set to true.\n     * ```typescript\n     * let ignorePinning = this.exportOptions.ignorePinning;\n     * this.exportOptions.ignorePinning = true;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public ignorePinning = false;\n\n    /**\n     * Specifies whether the exported data should be formatted as Excel table. (True by default)\n     * ```typescript\n     * let exportAsTable = this.exportOptions.exportAsTable;\n     * this.exportOptions.exportAsTable = false;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public exportAsTable = true;\n\n    constructor(fileName: string) {\n        super(fileName, '.xlsx');\n    }\n\n    /**\n     * Gets the width of the columns in the exported excel file.\n     * ```typescript\n     * let width = this.exportOptions.columnWidth;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get columnWidth(): number {\n        return this._columnWidth;\n    }\n\n    /**\n     * Sets the width of the columns in the exported excel file. If left unspecified or 0,\n     * the width of the largest string in the column will be used.\n     * ```typescript\n     * this.exportOptions.columnWidth = 55;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set columnWidth(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for column width!');\n        }\n\n        this._columnWidth = value;\n    }\n\n    /**\n     * Gets the height of the rows in the exported excel file.\n     * ```typescript\n     * let height = this.exportOptions.rowHeight;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get rowHeight(): number {\n        return this._rowHeight;\n    }\n\n    /**\n     * Sets the height of the rows in the exported excel file. If left unspecified or 0,\n     * the default height of the excel rows will be used.\n     * ```typescript\n     * this.exportOptions.rowHeight = 25;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set rowHeight(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for row height!');\n        }\n\n        this._rowHeight = value;\n    }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, Point, HorizontalAlignment, VerticalAlignment, getPointFromPositionsSettings } from './../utilities';\nimport { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';\n\nexport class ConnectedPositioningStrategy implements IPositionStrategy {\n  private _defaultSettings: PositionSettings = {\n    // default Point(0, 0) in getPointFromPositionsSettings\n    target: null,\n    horizontalDirection: HorizontalAlignment.Right,\n    verticalDirection: VerticalAlignment.Bottom,\n    horizontalStartPoint: HorizontalAlignment.Left,\n    verticalStartPoint: VerticalAlignment.Bottom,\n    openAnimation: scaleInVerTop,\n    closeAnimation: scaleOutVerTop\n  };\n\n  public settings: PositionSettings;\n  constructor(settings?: PositionSettings) {\n    this.settings = Object.assign({}, this._defaultSettings, settings);\n  }\n\n  // we no longer use the element inside the position() as its dimensions are cached in rect\n  position(contentElement: HTMLElement, size: { width: number, height: number}, document?: Document, initialCall?: boolean): void {\n    const startPoint = getPointFromPositionsSettings(this.settings, contentElement.parentElement);\n\n    contentElement.style.top = startPoint.y + this.settings.verticalDirection * size.height + 'px';\n    contentElement.style.left = startPoint.x + this.settings.horizontalDirection * size.width + 'px';\n  }\n}\n\n","import { PositionSettings, VerticalAlignment, HorizontalAlignment, Point } from './../utilities';\nimport { IPositionStrategy } from './IPositionStrategy';\nimport { ConnectedPositioningStrategy } from './connected-positioning-strategy';\n\nenum Axis {\n    X = 1,\n    Y = 0\n}\nexport class AutoPositionStrategy extends ConnectedPositioningStrategy implements IPositionStrategy {\n    public offsetPadding = 16;\n    private _initialSettings;\n    getViewPort(document) { // Material Design implementation\n        const clientRect = document.documentElement.getBoundingClientRect();\n        const scrollPosition = {\n            top: -clientRect.top,\n            left: -clientRect.left\n        };\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width\n        };\n\n    }\n\n\n    // The position method should return a <div> container that will host the component\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        if (!initialCall) {\n            super.position(contentElement, size);\n            return;\n        }\n        this._initialSettings = this._initialSettings || Object.assign({}, this._initialSettings, this.settings);\n        this.settings = this._initialSettings ? Object.assign({}, this.settings, this._initialSettings) : this.settings;\n        const viewPort = this.getViewPort(document);\n        super.position(contentElement, size);\n        const checkIfMoveHorizontal = (elem: HTMLElement) => {\n            const leftBound = elem.offsetLeft;\n            const rightBound = elem.offsetLeft + elem.lastElementChild.clientWidth;\n            switch (this.settings.horizontalDirection) {\n                case HorizontalAlignment.Left:\n                    if (leftBound < viewPort.left) {\n                        this.settings.horizontalDirection = HorizontalAlignment.Right;\n                        this.settings.horizontalStartPoint = HorizontalAlignment.Right;\n                    }\n                    break;\n                case HorizontalAlignment.Right:\n                    if (rightBound > viewPort.right) {\n                        this.settings.horizontalDirection = HorizontalAlignment.Left;\n                        this.settings.horizontalStartPoint = HorizontalAlignment.Left;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        };\n        const checkIfMoveVertical = (elem: HTMLElement) => {\n            const topBound = elem.offsetTop;\n            const bottomBound = elem.offsetTop + elem.lastElementChild.clientHeight;\n            switch (this.settings.verticalDirection) {\n                case VerticalAlignment.Top:\n                    if (topBound < viewPort.top) {\n                        this.settings.verticalDirection = VerticalAlignment.Bottom;\n                        this.settings.verticalStartPoint = VerticalAlignment.Bottom;\n                    }\n                    break;\n                case VerticalAlignment.Bottom:\n                    if (bottomBound > viewPort.bottom) {\n                        this.settings.verticalDirection = VerticalAlignment.Top;\n                        this.settings.verticalStartPoint = VerticalAlignment.Top;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        };\n        checkIfMoveVertical(contentElement);\n        checkIfMoveHorizontal(contentElement);\n        super.position(contentElement, size);\n    }\n}\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport class AbsoluteScrollStrategy implements IScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        this._scrollContainer = scrollContainer;\n    }\n\n    initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.addEventListener('scroll', this.onScroll, true);\n        }\n    }\n\n    detach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n        }\n\n        this._initialized = false;\n    }\n\n    private onScroll = () => {\n        this._overlayService.reposition(this._id);\n    }\n}\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport class BlockScrollStrategy implements IScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _initialScrollTop: number;\n    private _initialScrollLeft: number;\n    private _sourceElement: Element;\n\n    constructor(scrollContainer?: HTMLElement) { }\n\n    initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n\n        this._document = document;\n        this._initialized = true;\n    }\n\n    public attach(): void {\n        this._document.addEventListener('scroll', this.onScroll, true);\n        this._document.addEventListener('wheel', this.onWheel, true);\n    }\n\n    public detach(): void {\n        this._document.removeEventListener('scroll', this.onScroll, true);\n        this._document.removeEventListener('wheel', this.onWheel, true);\n        this._sourceElement = null;\n        this._initialScrollTop = 0;\n        this._initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        ev.preventDefault();\n        if (!this._sourceElement || this._sourceElement !== ev.srcElement) {\n            this._sourceElement = ev.srcElement;\n            this._initialScrollTop = this._sourceElement.scrollTop;\n            this._initialScrollLeft = this._sourceElement.scrollLeft;\n        }\n\n        this._sourceElement.scrollTop = this._initialScrollTop;\n        this._sourceElement.scrollLeft = this._initialScrollLeft;\n    }\n\n    private onWheel(ev: WheelEvent) {\n        ev.stopImmediatePropagation();\n        ev.preventDefault();\n    }\n}\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport class CloseScrollStrategy implements IScrollStrategy {\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private initialScrollTop: number;\n    private initialScrollLeft: number;\n    private cumulativeScrollTop: number;\n    private cumulativeScrollLeft: number;\n    private _threshold: number;\n    private _initialized = false;\n    private _sourceElement: Element;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        this._scrollContainer = scrollContainer;\n        this._threshold = 10;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n    }\n\n    initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll);\n            this._sourceElement = this._scrollContainer;\n        } else {\n            this._document.addEventListener('scroll', this.onScroll);\n            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                this._sourceElement = document.documentElement as Element;\n            } else if (document.body.scrollHeight > document.body.clientHeight) {\n                this._sourceElement = document.body as Element;\n            }\n        }\n\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = this._sourceElement.scrollTop;\n        this.initialScrollLeft = this._sourceElement.scrollLeft;\n    }\n\n    detach(): void {\n        // TODO: check why event listener removes only on first call and remains on each next!!!\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll);\n        }\n        this._sourceElement = null;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = 0;\n        this.initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop += this._sourceElement.scrollTop;\n        this.cumulativeScrollLeft += this._sourceElement.scrollLeft;\n\n        if (Math.abs(this.cumulativeScrollTop - this.initialScrollTop) > this._threshold ||\n            Math.abs(this.cumulativeScrollLeft - this.initialScrollLeft) > this._threshold) {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n            this._overlayService.hide(this._id);\n        }\n    }\n}\n","import { IgxOverlayService } from '../overlay';\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_scroll.html).\n * Scroll strategies determines how the scrolling will be handled in the provided IgxOverlayService.\n */\nexport class IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n\n    /**\n     * Initializes the strategy. Should be called once\n     * @param document reference to Document object.\n     * @param overlayService IgxOverlay service to use in this strategy\n     * @param id Unique id for this strategy.\n     * ```typescript\n     * settings.scrollStrategy.initialize(document, overlay, id);\n     * ```\n     */\n    initialize(document: Document, overlayService: IgxOverlayService, id: string) { }\n\n    /**\n     * Attaches the strategy\n     * ```typescript\n     * settings.scrollStrategy.attach();\n     * ```\n     */\n    attach(): void { }\n\n    /**\n     * Detaches the strategy\n     * ```typescript\n     * settings.scrollStrategy.detach();\n     * ```\n     */\n    detach(): void { }\n}\n","import { EventEmitter } from '@angular/core';\n\nexport enum TransactionType {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update'\n}\n\nexport interface Transaction {\n    id: any;\n    type: TransactionType;\n    newValue: any;\n}\n\n/** @experimental @hidden */\nexport interface HierarchicalTransaction extends Transaction {\n    parentId: any;\n}\n\nexport interface State {\n    value: any;\n    recordRef: any;\n    type: TransactionType;\n}\n\n/** @experimental @hidden */\nexport interface HierarchicalState extends State {\n    parentId: any;\n}\n\n/** @experimental @hidden */\nexport interface HierarchicalTransactionNode {\n    id: any;\n    parentId?: any;\n    childNodes: HierarchicalTransactionNode[];\n}\n\nexport interface TransactionService<T extends Transaction, S extends State> {\n    /**\n     * Returns whether transaction is enabled for this service\n     */\n    readonly enabled: boolean;\n\n    /**\n     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo.\n     */\n    onStateUpdate?: EventEmitter<void>;\n\n    /**\n     * @returns if there are any transactions in the Undo stack\n     */\n    canUndo: boolean;\n\n    /**\n     * @returns if there are any transactions in the Redo stack\n     */\n    canRedo: boolean;\n\n    /**\n     * Adds provided  transaction with recordRef if any\n     * @param transaction Transaction to be added\n     * @param recordRef Reference to the value of the record in the data source related to the changed item\n     */\n    add(transaction: T, recordRef?: any): void;\n\n    /**\n     * Returns all recorded transactions in chronological order.\n     * @param id Optional record id to get transactions for\n     * @returns All transaction in the service or for the specified record\n     */\n    getTransactionLog(id?: any): Transaction[];\n\n    /**\n     * Remove the last transaction if any\n     */\n    undo(): void;\n\n    /**\n     * Applies the last undone transaction if any\n     */\n    redo(): void;\n\n    /**\n     * Returns aggregated changes from all transactions\n     * @param mergeChanges If set to true will merge each state's value over relate recordRef\n     * and will record resulting value in the related transaction\n     * @returns Collection of aggregated transactions for each changed record\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[];\n\n    /**\n     * Returns the state of the record with provided id\n     * @param id The id of the record\n     * @returns State of the record if any\n     */\n    getState(id: any): S;\n\n    /**\n     * Returns value of the required id including all uncommitted changes\n     * @param id The id of the record to return value for\n     * @param mergeChanges If set to true will merge state's value over relate recordRef\n     * and will return merged value\n     * @returns Value with changes or **null**\n     */\n    getAggregatedValue(id: any, mergeChanges: boolean): any;\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     */\n    commit(data: any[]): void;\n\n    /**\n     * Clears all transactions\n     */\n    clear(): void;\n\n    /**\n     * Starts pending transactions. All transactions passed after call to startPending\n     * will not be added to transaction log\n     */\n    startPending(): void;\n\n    /**\n     * Clears all pending transactions and aggregated pending state. If commit is set to true\n     * commits pending states as single transaction\n     * @param commit Should commit the pending states\n     */\n    endPending(commit: boolean): void;\n}\n","import { TransactionService, Transaction, State } from './transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {\n    protected _isPending = false;\n    protected _pendingTransactions: T[] = [];\n    protected _pendingStates: Map<any, S> = new Map();\n    public get canRedo(): boolean {\n        return false;\n    }\n    public get canUndo(): boolean {\n        return false;\n    }\n    public get enabled(): boolean {\n        return this._isPending;\n    }\n\n    public onStateUpdate = new EventEmitter<void>();\n\n    public add(transaction: T, recordRef?: any): void {\n        if (this._isPending) {\n            this.updateState(this._pendingStates, transaction, recordRef);\n            this._pendingTransactions.push(transaction);\n        }\n    }\n\n    getTransactionLog(id?: any): T[] { return []; }\n\n    undo(): void { }\n\n    redo(): void { }\n\n    getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._pendingStates.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    public getState(id: any): S {\n        return this._pendingStates.get(id);\n    }\n\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._pendingStates.get(id);\n        if (!state) {\n            return null;\n        }\n        if (mergeChanges) {\n            return this.updateValue(state);\n        }\n        return state.value;\n    }\n\n    commit(data: any): void { }\n\n    clear(): void {\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n    public startPending(): void {\n        this._isPending = true;\n    }\n\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        if (state) {\n            if (isObject(state.value)) {\n                mergeObjects(state.value, transaction.newValue);\n            } else {\n                state.value = transaction.newValue;\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n    }\n\n    /**\n     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types\n     * @param state State to update value for\n     * @returns updated value including all the changes in provided state\n     */\n    protected updateValue(state: S) {\n        return this.mergeValues(state.recordRef, state.value);\n    }\n\n    /**\n     * Merges second values in first value and the result in empty object. If values are primitive type\n     * returns second value if exists, or first value.\n     * @param first Value to merge into\n     * @param second Value to merge\n     */\n    protected mergeValues<U>(first: U, second: U): U {\n        let result: U;\n        if (isObject(first) || isObject(second)) {\n            result = mergeObjects(mergeObjects({}, first), second);\n        } else {\n            result = second ? second : first;\n        }\n        return result;\n    }\n}\n","import { Transaction, State, TransactionType } from './transaction';\nimport { IgxBaseTransactionService } from './base-transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {\n    protected _transactions: T[] = [];\n    protected _redoStack: { transaction: T, recordRef: any, useInUndo?: boolean }[] = [];\n    protected _undoStack: { transaction: T, recordRef: any, useInUndo?: boolean }[] = [];\n    protected _states: Map<any, S> = new Map();\n\n    get canUndo(): boolean {\n        return this._undoStack.length > 0;\n    }\n\n    get canRedo(): boolean {\n        return this._redoStack.length > 0;\n    }\n\n    public onStateUpdate = new EventEmitter<void>();\n\n    public add(transaction: T, recordRef?: any): void {\n        const states = this._isPending ? this._pendingStates : this._states;\n        this.verifyAddedTransaction(states, transaction, recordRef);\n        this.addTransaction(transaction, states, recordRef);\n    }\n\n    private addTransaction(transaction: T, states: Map<any, S>, recordRef?: any, useInUndo: boolean = true) {\n        this.updateState(states, transaction, recordRef);\n\n        const transactions = this._isPending ? this._pendingTransactions : this._transactions;\n        transactions.push(transaction);\n\n        if (!this._isPending) {\n            this._undoStack.push({ transaction, recordRef, useInUndo });\n            this._redoStack = [];\n            this.onStateUpdate.emit();\n        }\n    }\n\n    public getTransactionLog(id?: any): T[] {\n        if (id) {\n            return this._transactions.filter(t => t.id === id);\n        }\n        return [...this._transactions];\n    }\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    public getState(id: any): S {\n        return this._states.get(id);\n    }\n\n    public get enabled(): boolean {\n        return true;\n    }\n\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._states.get(id);\n        const pendingState = super.getState(id);\n\n        //  if there is no state and there is no pending state return null\n        if (!state && !pendingState) {\n            return null;\n        }\n\n        const pendingChange = super.getAggregatedValue(id, false);\n        const change = state && state.value;\n        let aggregatedValue = this.mergeValues(change, pendingChange);\n        if (mergeChanges) {\n            const originalValue = state ? state.recordRef : pendingState.recordRef;\n            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);\n        }\n        return aggregatedValue;\n    }\n\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        if (commit) {\n            let i = 0;\n            this._pendingStates.forEach((s: S, k: any) => {\n                this.addTransaction({ id: k, newValue: s.value, type: s.type } as T, this._states, s.recordRef, i === 0);\n                i++;\n            });\n        }\n        super.endPending(commit);\n    }\n\n    public commit(data: any[]): void {\n        this._states.forEach((s: S) => {\n            const index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(s.recordRef));\n            switch (s.type) {\n                case TransactionType.ADD:\n                    data.push(s.value);\n                    break;\n                case TransactionType.DELETE:\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (0 <= index && index < data.length) {\n                        data[index] = this.updateValue(s);\n                    }\n                    break;\n            }\n        });\n        this.clear();\n    }\n\n    public clear(): void {\n        this._transactions = [];\n        this._states.clear();\n        this._redoStack = [];\n        this._undoStack = [];\n        this.onStateUpdate.emit();\n    }\n\n    public undo(): void {\n        if (this._undoStack.length <= 0) {\n            return;\n        }\n\n        let action: { transaction: T, recordRef: any, useInUndo?: boolean };\n        do {\n            action = this._undoStack.pop();\n            this._transactions.pop();\n            this._redoStack.push(action);\n        } while (!action.useInUndo);\n\n        this._states.clear();\n        this._undoStack.map(a => this.updateState(this._states, a.transaction, a.recordRef));\n        this.onStateUpdate.emit();\n    }\n\n    public redo(): void {\n        if (this._redoStack.length > 0) {\n            //  remove first item from redo stack (it should always has useInUndo === true)\n            //  and then all next items until there are items and useInUndo === false.\n            //  If there are no more items, or next item's useInUndo === true leave.\n            let undoItem: { transaction: T, recordRef: any, useInUndo?: boolean };\n            undoItem = this._redoStack.pop();\n            this.updateState(this._states, undoItem.transaction, undoItem.recordRef);\n            this._transactions.push(undoItem.transaction);\n            this._undoStack.push(undoItem);\n\n            while (this._redoStack[this._redoStack.length - 1] && !this._redoStack[this._redoStack.length - 1].useInUndo) {\n                undoItem = this._redoStack.pop();\n                this.updateState(this._states, undoItem.transaction, undoItem.recordRef);\n                this._transactions.push(undoItem.transaction);\n                this._undoStack.push(undoItem);\n            }\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * Verifies if the passed transaction is correct. If not throws an exception.\n     * @param transaction Transaction to be verified\n     */\n    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        const state = states.get(transaction.id);\n        switch (transaction.type) {\n            case TransactionType.ADD:\n                if (state) {\n                    //  cannot add same item twice\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);\n                }\n                break;\n            case TransactionType.DELETE:\n            case TransactionType.UPDATE:\n                if (state && state.type === TransactionType.DELETE) {\n                    //  cannot delete or update deleted items\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);\n                }\n                if (!state && !recordRef && !this._isPending) {\n                    //  cannot initially add transaction or delete item with no recordRef\n                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +\n                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        //  if TransactionType is ADD simply add transaction to states;\n        //  if TransactionType is DELETE:\n        //    - if there is state with this id of type ADD remove it from the states;\n        //    - if there is state with this id of type UPDATE change its type to DELETE;\n        //    - if there is no state with this id add transaction to states;\n        //  if TransactionType is UPDATE:\n        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value\n        //    - if there is state with this id of type UPDATE merge new value into state new value\n        //    - if there is state with this id and state type is DELETE change its type to UPDATE\n        //    - if there is no state with this id add transaction to states;\n        if (state) {\n            switch (transaction.type) {\n                case TransactionType.DELETE:\n                    if (state.type === TransactionType.ADD) {\n                        states.delete(transaction.id);\n                    } else if (state.type === TransactionType.UPDATE) {\n                        state.value = transaction.newValue;\n                        state.type = TransactionType.DELETE;\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (isObject(state.value)) {\n                        if (state.type === TransactionType.ADD) {\n                            state.value = this.mergeValues(state.value, transaction.newValue);\n                        }\n                        if (state.type === TransactionType.UPDATE) {\n                            mergeObjects(state.value, transaction.newValue);\n                        }\n                    } else {\n                        state.value = transaction.newValue;\n                    }\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n\n        //  should not clean pending state. This will happen automatically on endPending call\n        if (!this._isPending) {\n            this.cleanState(transaction.id, states);\n        }\n    }\n\n    /**\n     * Compares the state with recordRef and clears all duplicated values. If any state ends as\n     * empty object removes it from states.\n     * @param state State to clean\n     */\n    protected cleanState(id: any, states: Map<any, S>): void {\n        const state = states.get(id);\n        //  do nothing if\n        //  there is no state, or\n        //  there is no state value (e.g. DELETED transaction), or\n        //  there is no recordRef (e.g. ADDED transaction)\n        if (state && state.value && state.recordRef) {\n            //  if state's value is object compare each key with the ones in recordRef\n            //  if values in any key are the same delete it from state's value\n            //  if state's value is not object, simply compare with recordRef and remove\n            //  the state if they are equal\n            if (isObject(state.recordRef)) {\n                for (const key of Object.keys(state.value)) {\n                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {\n                        delete state.value[key];\n                    }\n                }\n\n                //  if state's value is empty remove the state from the states, only if state is not DELETE type\n                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {\n                    states.delete(id);\n                }\n            } else {\n                if (state.recordRef === state.value) {\n                    states.delete(id);\n                }\n            }\n        }\n    }\n}\n","import { HierarchicalTransaction, HierarchicalState, TransactionType, HierarchicalTransactionNode } from './transaction';\nimport { Injectable } from '@angular/core';\nimport { IgxTransactionService } from '..';\n\n/** @experimental @hidden */\n@Injectable()\nexport class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState>\n    extends IgxTransactionService<T, S> {\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            this.clearArraysFromObject(value);\n            result.push({ id: key, parentId: state.parentId, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        super.updateState(states, transaction, recordRef);\n        const currentState = states.get(transaction.id);\n        if (currentState && transaction.type === TransactionType.ADD) {\n            currentState.parentId = transaction.parentId;\n        }\n    }\n\n    //  TODO: remove this method. Force cloning to strip child arrays when needed instead\n    private clearArraysFromObject(obj: {}) {\n        for (const prop of Object.keys(obj)) {\n            if (Array.isArray(obj[prop])) {\n                delete obj[prop];\n            }\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Inject\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { OverlaySettings, OverlayEventArgs, ConnectedPositioningStrategy, AbsoluteScrollStrategy } from '../../services';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subscription, OperatorFunction, Subject } from 'rxjs';\nimport { OverlayCancelableEventArgs } from '../../services/overlay/utilities';\nimport { CancelableEventArgs } from '../../core/utils';\n\n@Directive({\n    exportAs: 'toggle',\n    selector: '[igxToggle]'\n})\nexport class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    private _overlayId: string;\n    private destroy$ = new Subject<boolean>();\n    private _overlaySubFilter: OperatorFunction<OverlayEventArgs, OverlayEventArgs>[] = [\n        filter(x => x.id === this._overlayId)\n    ];\n    private _overlayOpenedSub: Subscription;\n    private _overlayClosingSub: Subscription;\n    private _overlayClosedSub: Subscription;\n\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableEventArgs>();\n\n    private _collapsed = true;\n    /**\n     * @hidden\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle--hidden')\n    @HostBinding('attr.aria-hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        private elementRef: ElementRef,\n        private cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) private overlayService: IgxOverlayService,\n        @Optional() private navigationService: IgxNavigationService) {\n    }\n\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        this._collapsed = false;\n        this.cdr.detectChanges();\n\n        const openEventArgs: CancelableEventArgs = { cancel: false };\n        this.onOpening.emit(openEventArgs);\n        if (openEventArgs.cancel) {\n            this._collapsed = true;\n            this.cdr.detectChanges();\n            return;\n        }\n\n        if (this._overlayId) {\n            this.overlayService.show(this._overlayId, overlaySettings);\n        } else {\n            this._overlayId = this.overlayService.show(this.elementRef, overlaySettings);\n        }\n\n        this.unsubscribe();\n        this._overlayOpenedSub = this.overlayService.onOpened.pipe(...this._overlaySubFilter, takeUntil(this.destroy$)).subscribe(() => {\n            this.onOpened.emit();\n        });\n        this._overlayClosingSub = this.overlayService\n            .onClosing\n            .pipe(...this._overlaySubFilter, takeUntil(this.destroy$))\n            .subscribe((e: OverlayCancelableEventArgs) => {\n                const eventArgs: CancelableEventArgs = { cancel: false };\n                this.onClosing.emit(eventArgs);\n                e.cancel = eventArgs.cancel;\n\n                //  in case event is not canceled this will close the toggle and we need to unsubscribe.\n                //  Otherwise if for some reason, e.g. close on outside click, close() gets called before\n                //  onClosed was fired we will end with calling onClosing more than once\n                if (!e.cancel) {\n                    this.clearSubscription(this._overlayClosingSub);\n                }\n            });\n        this._overlayClosedSub = this.overlayService.onClosed\n            .pipe(...this._overlaySubFilter, takeUntil(this.destroy$))\n            .subscribe(this.overlayClosed);\n    }\n\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    public close() {\n        this.overlayService.hide(this._overlayId);\n    }\n\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        this.collapsed ? this.open(overlaySettings) : this.close();\n    }\n\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    public reposition() {\n        this.overlayService.reposition(this._overlayId);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navigationService && this.id) {\n            this.navigationService.add(this.id, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navigationService && this.id) {\n            this.navigationService.remove(this.id);\n        }\n        if (!this.collapsed && this._overlayId) {\n            this.overlayService.hide(this._overlayId);\n        }\n        this.unsubscribe();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private overlayClosed = () => {\n        this._collapsed = true;\n        this.cdr.detectChanges();\n        delete this._overlayId;\n        this.onClosed.emit();\n        this.unsubscribe();\n    }\n\n    private unsubscribe() {\n        this.clearSubscription(this._overlayOpenedSub);\n        this.clearSubscription(this._overlayClosingSub);\n        this.clearSubscription(this._overlayClosedSub);\n    }\n\n    private clearSubscription(subscription: Subscription) {\n        if (subscription && !subscription.closed) {\n            subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    exportAs: 'toggle-action',\n    selector: '[igxToggleAction]'\n})\nexport class IgxToggleActionDirective implements OnInit {\n    protected _overlayDefaults: OverlaySettings;\n\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    private _closeOnOutsideClick: boolean;\n    /**\n     * DEPRECATED. Determines whether the toggle should close when you click outside.\n     *\n     * ```typescript\n     * // get\n     * let closesOnOutsideClick = this.toggle.closeOnOutsideClick;\n     * ```\n     */\n    public get closeOnOutsideClick(): boolean {\n        return this._closeOnOutsideClick;\n    }\n    /**\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [closeOnOutsideClick]=\"'true'\"></div>\n     * ```\n     */\n    @Input()\n    public set closeOnOutsideClick(v: boolean) {\n        console.warn(`igxToggleAction 'closeOnOutsideClick' input is deprecated. Use 'overlaySettings' input object instead.`);\n        this._closeOnOutsideClick = v;\n    }\n\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    @Input('igxToggleOutlet')\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input('igxToggleAction')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this.navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    protected _target: IToggleView | string;\n\n    constructor(private element: ElementRef, @Optional() private navigationService: IgxNavigationService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._overlayDefaults = {\n            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            closeOnOutsideClick: true,\n            modal: false\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this.closeOnOutsideClick !== undefined) {\n            this._overlayDefaults.closeOnOutsideClick = this.closeOnOutsideClick;\n        }\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n        if (this.overlaySettings && this.overlaySettings.positionStrategy && !this.overlaySettings.positionStrategy.settings.target) {\n            this.overlaySettings.positionStrategy.settings.target = this.element.nativeElement;\n        }\n        this.target.toggle(Object.assign({}, this._overlayDefaults, this.overlaySettings));\n    }\n}\n\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\n@Directive({\n    exportAs: 'overlay-outlet',\n    selector: '[igxOverlayOutlet]'\n})\nexport class IgxOverlayOutletDirective {\n    constructor(public element: ElementRef) { }\n\n    /** @hidden */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n}\n\n@NgModule({\n    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxToggleModule { }\n","import {\n    Directive, ElementRef, HostListener, Input, NgModule, Renderer2, ChangeDetectorRef, OnInit,\n    Output, EventEmitter, Optional, HostBinding, OnDestroy\n} from '@angular/core';\nimport { useAnimation } from '@angular/animations';\nimport { scaleInCenter } from '../../animations/scale/index';\nimport { fadeOut } from '../../animations/fade/index';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { HorizontalAlignment, AutoPositionStrategy, PositionSettings } from '../../services';\nimport { CommonModule } from '@angular/common';\nimport { IgxNavigationService } from '../../core/navigation';\nimport { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';\n\nexport interface ITooltipShowEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\nexport interface ITooltipHideEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\n\n/**\n * **Ignite UI for Angular Tooltip Target** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.\n * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the\n * target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltipTarget',\n    selector: '[igxTooltipTarget]'\n})\nexport class IgxTooltipTargetDirective extends IgxToggleActionDirective implements OnInit {\n    /**\n     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipShowDelay = this.tooltipTarget.showDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" showDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('showDelay')\n    public showDelay = 500;\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipHideDelay = this.tooltipTarget.hideDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" hideDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('hideDelay')\n    public hideDelay = 500;\n\n    /**\n     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)\n     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,\n     * the developer will still be able to show/hide the tooltip through the API.\n     *\n     * ```typescript\n     * // get\n     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" [tooltipDisabled]=\"true\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('tooltipDisabled')\n    public tooltipDisabled = false;\n\n    /**\n     * @hidden\n     */\n    @Input('igxTooltipTarget')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this._navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    /**\n     * Gets the respective native element of the directive.\n     *\n     * ```typescript\n     * let tooltipTargetElement = this.tooltipTarget.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Indicates if the tooltip that is is associated with this target is currently hidden.\n     *\n     * ```typescript\n     * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;\n     * ```\n     */\n    public get tooltipHidden(): boolean {\n        return !this.target || this.target.collapsed;\n    }\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts showing.\n     * This event is fired before the start of the countdown to showing the tooltip.\n     *\n     * ```typescript\n     * tooltipShowing(args: ITooltipShowEventArgs) {\n     *    alert(\"Tooltip started showing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipShow = new EventEmitter<ITooltipShowEventArgs>();\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts hiding.\n     * This event is fired before the start of the countdown to hiding the tooltip.\n     *\n     * ```typescript\n     * tooltipHiding(args: ITooltipHideEventArgs) {\n     *    alert(\"Tooltip started hiding!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipHide = new EventEmitter<ITooltipHideEventArgs>();\n\n    constructor(private _element: ElementRef,\n        @Optional() private _navigationService: IgxNavigationService) {\n        super(_element, _navigationService);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        const positionSettings: PositionSettings = {\n            target: this.nativeElement,\n            horizontalDirection: HorizontalAlignment.Center,\n            horizontalStartPoint: HorizontalAlignment.Center,\n            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),\n            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })\n        };\n\n        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);\n        this._overlayDefaults.closeOnOutsideClick = false;\n    }\n\n    private checkOutletAndOutsideClick() {\n        if (this.closeOnOutsideClick !== undefined) {\n            this._overlayDefaults.closeOnOutsideClick = this.closeOnOutsideClick;\n        }\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n    }\n\n    private get mergedOverlaySettings() {\n        return Object.assign({}, this._overlayDefaults, this.overlaySettings);\n    }\n\n    // Return true if the execution in onMouseEnter should be terminated after this method\n    private preMouseEnterCheck() {\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n        }\n\n        // If Tooltip is opened or about to be hidden\n        if (!this.target.collapsed || this.target.toBeHidden) {\n            clearTimeout(this.target.timeoutId);\n\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return true;\n            } else {\n                this.target.close();\n                this.target.toBeHidden = false;\n            }\n        }\n\n        return false;\n    }\n\n    // Return true if the execution in onMouseLeave should be terminated after this method\n    private preMouseLeaveCheck(): boolean {\n        clearTimeout(this.target.timeoutId);\n\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n            this.target.toBeHidden = false;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.close();\n        this.target.toBeHidden = false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        return;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseEnterCheck();\n        if (shouldReturn) {\n            return;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseLeaveCheck();\n        if (shouldReturn || this.target.collapsed) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('touchstart', ['$event'])\n    public onTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        event.preventDefault();\n        this.showTooltip();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:touchstart', ['$event'])\n    public onDocumentTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        if (this.nativeElement !== event.target &&\n            !this.nativeElement.contains(event.target)\n        ) {\n            this.hideTooltip();\n        }\n    }\n\n    /**\n     * Shows the tooltip by respecting the 'showDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.showTooltip();\n     * ```\n     */\n    public showTooltip() {\n        clearTimeout(this.target.timeoutId);\n\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            } else {\n                this.target.close();\n                this.target.toBeHidden = false;\n            }\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * Hides the tooltip by respecting the 'hideDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.hideTooltip();\n     * ```\n     */\n    public hideTooltip() {\n        if (this.target.collapsed && this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n        }\n\n        if (this.target.collapsed || this.target.toBeHidden) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n}\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Tooltip** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\n * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\n * respective target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltip',\n    selector: '[igxTooltip]'\n})\nexport class IgxTooltipDirective extends IgxToggleDirective {\n    /**\n     * @hidden\n     */\n    public timeoutId;\n\n    /**\n     * @hidden\n     */\n    public toBeHidden = false;\n\n    /**\n     * @hidden\n     */\n    public toBeShown = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--desktop')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * Gets/sets any tooltip related data.\n     * The 'context' can be used for storing any information that is necessary\n     * to access when working with the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipContext = this.tooltip.context;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.tooltip.context = \"Tooltip's context\";\n     * ```\n     */\n    @Input('context')\n    public context;\n\n    /**\n     * Identifier for the tooltip.\n     * If this is property is not explicitly set, it will be automatically generated.\n     *\n     * ```typescript\n     * let tooltipId = this.tooltip.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tooltip-${NEXT_ID++}`;\n\n    /**\n     * Get the role attribute of the tooltip.\n     *\n     * ```typescript\n     * let tooltipRole = this.tooltip.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'tooltip';\n    }\n}\n\n@NgModule({\n    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    imports: [CommonModule],\n    providers: [IgxOverlayService]\n})\nexport class IgxTooltipModule { }\n\n","/**\n * Provides base filtering operations\n * Implementations should be Singleton\n *\n * @export\n */\nexport class IgxFilteringOperand {\n    public operations: IFilteringOperation[];\n\n    public constructor() {\n        this.operations = [{\n            name: 'null',\n            isUnary: true,\n            iconName: 'is_null',\n            logic: (target: any) => {\n                return target === null;\n            }\n        }, {\n            name: 'notNull',\n            isUnary: true,\n            iconName: 'is_not_null',\n            logic: (target: any) => {\n                return target !== null;\n            }\n        }];\n    }\n\n    public conditionList(): string[] {\n        return this.operations.map((element) => element.name);\n    }\n\n    public condition(name: string): IFilteringOperation {\n        return this.operations.find((element) => element.name === name);\n    }\n\n    public append(operation: IFilteringOperation) {\n        this.operations.push(operation);\n    }\n}\n\n/**\n * Provides filtering operations for booleans\n *\n * @export\n */\nexport class IgxBooleanFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxBooleanFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'all',\n            isUnary: true,\n            iconName: 'all',\n            logic: (target: boolean) => {\n                return true;\n            }\n        }, {\n            name: 'true',\n            isUnary: true,\n            iconName: 'is_true',\n            logic: (target: boolean) => {\n                return !!(target && target !== null && target !== undefined);\n            }\n        }, {\n            name: 'false',\n            isUnary: true,\n            iconName: 'is_false',\n            logic: (target: boolean) => {\n                return !target && target !== null && target !== undefined;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: boolean) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: boolean) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxBooleanFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n}\n\n/**\n * Provides filtering operations for Dates\n *\n * @export\n */\nexport class IgxDateFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxDateFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year === searchp.year &&\n                    targetp.month === searchp.month &&\n                    targetp.day === searchp.day;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return true;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year !== searchp.year ||\n                    targetp.month !== searchp.month ||\n                    targetp.day !== searchp.day;\n            }\n        }, {\n            name: 'before',\n            isUnary: false,\n            iconName: 'is_before',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target < searchVal;\n            }\n        }, {\n            name: 'after',\n            isUnary: false,\n            iconName: 'is_after',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target > searchVal;\n            }\n        }, {\n            name: 'today',\n            isUnary: true,\n            iconName: 'today',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');\n                return d.year === now.year &&\n                    d.month === now.month &&\n                    d.day === now.day;\n            }\n        }, {\n            name: 'yesterday',\n            isUnary: true,\n            iconName: 'yesterday',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const td = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\n                const yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');\n                return td.year === yesterday.year &&\n                    td.month === yesterday.month &&\n                    td.day === yesterday.day;\n            }\n        }, {\n            name: 'thisMonth',\n            isUnary: true,\n            iconName: 'this_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'lastMonth',\n            isUnary: true,\n            iconName: 'last_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (!now.month) {\n                    now.month = 11;\n                    now.year -= 1;\n                } else {\n                    now.month--;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'nextMonth',\n            isUnary: true,\n            iconName: 'next_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (now.month === 11) {\n                    now.month = 0;\n                    now.year += 1;\n                } else {\n                    now.month++;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'thisYear',\n            isUnary: true,\n            iconName: 'this_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year;\n            }\n        }, {\n            name: 'lastYear',\n            isUnary: true,\n            iconName: 'last_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year - 1;\n            }\n        }, {\n            name: 'nextYear',\n            isUnary: true,\n            iconName: 'next_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year + 1;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: Date) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: Date) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxDateFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * Splits a Date object into parts\n     *\n     * @memberof IgxDateFilteringOperand\n     */\n    public static getDateParts(date: Date, dateFormat?: string): IDateParts {\n        const res = {\n            day: null,\n            hours: null,\n            milliseconds: null,\n            minutes: null,\n            month: null,\n            seconds: null,\n            year: null\n        };\n        if (!date || !dateFormat) {\n            return res;\n        }\n        if (dateFormat.indexOf('y') >= 0) {\n            res.year = date.getFullYear();\n        }\n        if (dateFormat.indexOf('M') >= 0) {\n            res.month = date.getMonth();\n        }\n        if (dateFormat.indexOf('d') >= 0) {\n            res.day = date.getDate();\n        }\n        if (dateFormat.indexOf('h') >= 0) {\n            res.hours = date.getHours();\n        }\n        if (dateFormat.indexOf('m') >= 0) {\n            res.minutes = date.getMinutes();\n        }\n        if (dateFormat.indexOf('s') >= 0) {\n            res.seconds = date.getSeconds();\n        }\n        if (dateFormat.indexOf('f') >= 0) {\n            res.milliseconds = date.getMilliseconds();\n        }\n        return res;\n    }\n\n    private validateInputData(target: Date) {\n        if (!(target instanceof Date)) {\n            throw new Error('Could not perform filtering on \\'date\\' column because the datasource object type is not \\'Date\\'.');\n        }\n    }\n}\n\n/**\n * Provides filtering operations for numbers\n *\n * @export\n */\nexport class IgxNumberFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxNumberFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: number, searchVal: number) => {\n                return target === searchVal;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: number, searchVal: number) => {\n                return target !== searchVal;\n            }\n        }, {\n            name: 'greaterThan',\n            isUnary: false,\n            iconName: 'greater_than',\n            logic: (target: number, searchVal: number) => {\n                return target > searchVal;\n            }\n        }, {\n            name: 'lessThan',\n            isUnary: false,\n            iconName: 'less_than',\n            logic: (target: number, searchVal: number) => {\n                return target < searchVal;\n            }\n        }, {\n            name: 'greaterThanOrEqualTo',\n            isUnary: false,\n            iconName: 'greater_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target >= searchVal;\n            }\n        }, {\n            name: 'lessThanOrEqualTo',\n            isUnary: false,\n            iconName: 'less_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target <= searchVal;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: number) => {\n                return target === null || target === undefined || isNaN(target);\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: number) => {\n                return target !== null && target !== undefined && !isNaN(target);\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxNumberFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n}\n\n/**\n * Provides filtering operations for strings\n *\n * @export\n */\nexport class IgxStringFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxStringFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'contains',\n            isUnary: false,\n            iconName: 'contains',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) !== -1;\n            }\n        }, {\n            name: 'doesNotContain',\n            isUnary: false,\n            iconName: 'does_not_contain',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) === -1;\n            }\n        }, {\n            name: 'startsWith',\n            isUnary: false,\n            iconName: 'starts_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.startsWith(search);\n            }\n        }, {\n            name: 'endsWith',\n            isUnary: false,\n            iconName: 'ends_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.endsWith(search);\n            }\n        }, {\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target === search;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target !== search;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: string) => {\n                return target === null || target === undefined || target.length === 0;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: string) => {\n                return target !== null && target !== undefined && target.length > 0;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxStringFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * Applies case sensitivity on strings if provided\n     *\n     * @memberof IgxStringFilteringOperand\n     */\n    public static applyIgnoreCase(a: string, ignoreCase: boolean): string {\n        a = a || '';\n        // bulletproof\n        return ignoreCase ? ('' + a).toLowerCase() : a;\n    }\n}\n\n/**\n * Interface describing filtering operations\n *\n * @export\n */\nexport interface IFilteringOperation {\n    name: string;\n    isUnary: boolean;\n    iconName: string;\n    logic: (value: any, searchVal?: any, ignoreCase?: boolean) => boolean;\n}\n\n/**\n * Interface describing Date object in parts\n *\n * @export\n */\nexport interface IDateParts {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n}\n","import { ISortingExpression } from './sorting-expression.interface';\n\nexport class GroupedRecords extends Array<any> {}\n\nexport interface IGroupByRecord {\n    expression: ISortingExpression;\n    level: number;\n    records: GroupedRecords;\n    value: any;\n    groupParent: IGroupByRecord;\n    groups?: IGroupByRecord[];\n }\n","import { SortingStrategy } from './sorting-strategy';\n\n/**\n * @hidden\n */\nexport class StableSortingStrategy extends SortingStrategy {\n    protected compareObjects(obj1: any, obj2: any): number {\n        const res = super.compareObjects.apply(this, arguments);\n        const replacerFn = (key, val) => {\n            if (val === undefined) {\n                return null;\n            }\n            return val;\n        };\n        if (!res) {\n            return JSON.stringify(obj1, replacerFn)\n                        .localeCompare(JSON.stringify(obj2, replacerFn));\n        }\n        return res;\n    }\n}\n","import { IDataState } from './data-state.interface';\nimport { DataUtil } from './data-util';\nimport { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { IFilteringState } from './filtering-state.interface';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\nimport { IPagingState, PagingError } from './paging-state.interface';\nimport { IRecordInfo } from './record-info.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport { ISortingState } from './sorting-state.interface';\nimport { ISortingStrategy, SortingStrategy } from './sorting-strategy';\n\n/**\n * @hidden\n */\nexport enum DataAccess {\n    OriginalData,\n    TransformedData\n}\n\n/**\n * @hidden\n */\nexport class DataContainer {\n    public data: any[];\n    /**\n     * processed data\n     */\n    public transformedData: any[];\n    public state: IDataState = {\n    };\n    constructor(data: any[] = []) {\n        this.data = data;\n        this.transformedData = data;\n    }\n    public process(state?: IDataState): DataContainer {\n        if (state) {\n            this.state = state;\n        }\n        this.transformedData = this.data;\n        // apply data operations\n        this.transformedData = DataUtil.process(this.data, this.state);\n        return this;\n    }\n    // CRUD operations\n    // access data records\n    public getIndexOfRecord(record: object, dataAccess: DataAccess = DataAccess.OriginalData): number {\n        const data = this.accessData(dataAccess);\n        return data.indexOf(record);\n    }\n    public getRecordByIndex(index: number, dataAccess: DataAccess = DataAccess.OriginalData): object {\n        const data = this.accessData(dataAccess);\n        return data[index];\n    }\n    public getRecordInfoByKeyValue(fieldName: string,\n                                   value: any,\n                                   dataAccess: DataAccess = DataAccess.OriginalData): IRecordInfo {\n        const data = this.accessData(dataAccess);\n        const len = data.length;\n        const res: IRecordInfo = {index: -1, record: undefined};\n        let i;\n        for (i = 0; i < len; i++) {\n            if (data[i][fieldName] === value) {\n                res.index = i;\n                res.record = data[i];\n                break;\n            }\n        }\n        return res;\n    }\n    public addRecord(record: object, at?: number): void {\n        const data = this.accessData(DataAccess.OriginalData);\n        if (at === null || at === undefined) {\n            data.push(record);\n        } else {\n            data.splice(at, 0, record);\n        }\n    }\n    public deleteRecord(record: object): boolean {\n        const index: number = this.getIndexOfRecord(record, DataAccess.OriginalData);\n        return this.deleteRecordByIndex(index);\n    }\n    public deleteRecordByIndex(index: number): boolean {\n        const data = this.accessData(DataAccess.OriginalData);\n        return data.splice(index, 1).length === 1;\n    }\n    public updateRecordByIndex(index: number, newProperties: object): object {\n        const dataAccess: DataAccess = DataAccess.OriginalData;\n        const foundRec = this.getRecordByIndex(index, dataAccess);\n        if (!foundRec) {\n            return undefined;\n        }\n        return Object.assign(foundRec, newProperties);\n    }\n    protected accessData(dataAccess: DataAccess) {\n        let res;\n        switch (dataAccess) {\n            case DataAccess.OriginalData:\n            res = this.data;\n            break;\n            case DataAccess.TransformedData:\n            res = this.transformedData;\n            break;\n        }\n        return res;\n    }\n}\n","import { Injectable, SecurityContext, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * **Ignite UI for Angular Icon Service** -\n *\n * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.\n * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.\n *\n * Example:\n * ```typescript\n * this.iconService.registerFontSetAlias('material', 'material-icons');\n * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n * ```\n */\n\n@Injectable()\nexport class IgxIconService {\n    private _fontSet = 'material-icons';\n    private _fontSetAliases = new Map<string, string>();\n    private _svgContainer: HTMLElement;\n    private _cachedSvgIcons: Set<string> = new Set<string>();\n\n    constructor (private _sanitizer: DomSanitizer, private _httpClient: HttpClient, @Inject(DOCUMENT) private _document: any) { }\n\n    /**\n     *  Returns the default font set.\n     *```typescript\n     *   const defaultFontSet = this.iconService.defaultFontSet;\n     * ```\n     */\n    get defaultFontSet(): string {\n        return this._fontSet;\n    }\n\n    /**\n     *  Sets the default font set.\n     *```typescript\n     *   this.iconService.defaultFontSet = 'svg-flags';\n     * ```\n     */\n    set defaultFontSet(className: string) {\n        this._fontSet = className;\n    }\n\n    /**\n     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.\n     *```typescript\n     *   this.iconService.registerFontSetAlias('material', 'material-icons');\n     * ```\n     */\n    public registerFontSetAlias(alias: string, className: string = alias): this {\n        this._fontSetAliases.set(alias, className);\n        return this;\n    }\n\n    /**\n     *  Returns the custom class, if any, associated to a given fontSet.\n     *```typescript\n     *   const fontSetClass = this.iconService.fontSetClassName('material');\n     * ```\n     */\n    public fontSetClassName(alias: string): string {\n        return this._fontSetAliases.get(alias) || alias;\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is an url.\n     *```typescript\n     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n     * ```\n     */\n    public addSvgIcon(iconName: string, url: string, fontSet: string = '') {\n        if (iconName && url) {\n            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n            if (!safeUrl) {\n                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"${url}\".`);\n            }\n\n            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!sanitizedUrl) {\n                throw new Error(`The URL provided was not trusted as a resource URL: \"${url}\".`);\n            }\n\n            this.fetchSvg(iconName, url, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is its text.\n     *```typescript\n     *   this.iconService.addSvgIcon('simple', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\">\n     *   <path d=\"M74 74h54v54H74\" /></svg>', 'svg-flags');\n     * ```\n     */\n    public addSvgIconFromText(iconName: string, iconText: string, fontSet: string = '') {\n        if (iconName && iconText) {\n            this.cacheSvgIcon(iconName, iconText, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Returns wheather a given SVG image is present in the cache.\n     *```typescript\n     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');\n     * ```\n     */\n    public isSvgIconCached(iconName: string, fontSet: string = ''): boolean {\n        const iconKey = this.getSvgIconKey(iconName, fontSet);\n        return this._cachedSvgIcons.has(iconKey);\n    }\n\n    /**\n     *  Returns the key of a cached SVG image.\n     *```typescript\n     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');\n     * ```\n     */\n    public getSvgIconKey(iconName: string, fontSet: string = '') {\n        return fontSet + '_' + iconName;\n    }\n\n    /**\n     * @hidden\n     */\n    private fetchSvg(iconName: string, url: string, fontSet: string = '') {\n        const request = this._httpClient.get(url, { responseType: 'text' });\n        const subscription = request.subscribe((value: string) => {\n            this.cacheSvgIcon(iconName, value, fontSet);\n        }, (error) => {\n            subscription.unsubscribe();\n            throw new Error(`Could not fetch SVG from url: ${url}; error: ${error.message}`);\n        }, () => {\n            subscription.unsubscribe();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    private cacheSvgIcon(iconName: string, value: string, fontSet: string = '') {\n        if (iconName && value) {\n            this.ensureSvgContainerCreated();\n\n            const div = this._document.createElement('DIV');\n            div.innerHTML = value;\n            const svg = div.querySelector('svg') as SVGElement;\n\n            if (svg) {\n                const iconKey = this.getSvgIconKey(iconName, fontSet);\n\n                svg.setAttribute('id', iconKey);\n                svg.setAttribute('fit', '');\n                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n                if (this._cachedSvgIcons.has(iconKey)) {\n                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);\n                    this._svgContainer.removeChild(oldChild);\n                }\n\n                this._svgContainer.appendChild(svg);\n                this._cachedSvgIcons.add(iconKey);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private ensureSvgContainerCreated() {\n        if (!this._svgContainer) {\n            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');\n            if (!this._svgContainer) {\n                this._svgContainer = this._document.createElement('DIV');\n                this._svgContainer.classList.add('igx-svg-container');\n                this._document.documentElement.appendChild(this._svgContainer);\n            }\n        }\n    }\n}\n","\n/**\n * @hidden\n */\nexport function DeprecateClass(message: string): ClassDecorator {\n    return (constructor: any) => {\n        console.warn(constructor.name + ': ' + message);\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateMethod(message: string): MethodDecorator {\n    return (constructor: any) => {\n        console.warn(constructor.constructor.name + ': ' + message);\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateProperty(message: string): PropertyDecorator {\n    return (constructor: any) => {\n        console.warn(constructor.constructor.name + ': ' + message);\n    };\n}\n","import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { IgxIconService } from './icon.service';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n/**\n * **Ignite UI for Angular Icon** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/icon.html)\n *\n * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons\n * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearence\n * of the icon.\n *\n * Example:\n * ```html\n * <igx-icon color=\"#00ff00\" isActive=\"true\">home</igx-icon>\n * ```\n */\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-icon',\n    template: `<ng-template #noLigature></ng-template>\n\n<ng-template #explicitLigature>\n    <ng-content></ng-content>\n</ng-template>\n\n<!-- TODO: remove this after glyphName property is deprecated. -->\n<ng-template #implicitLigature>\n    {{getIconName}}\n</ng-template>\n\n<ng-template #svgImage>\n    <svg>\n        <use [attr.href]=\"getSvgKey\"></use>\n    </svg>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n`\n})\n\nexport class IgxIconComponent implements OnInit {\n    @ViewChild('noLigature', { read: TemplateRef })\n    private noLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('explicitLigature', { read: TemplateRef })\n    private explicitLigature: TemplateRef<HTMLElement>;\n\n    // TODO: remove this after glyphName property is deprecated.\n    @ViewChild('implicitLigature', { read: TemplateRef })\n    private implicitLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('svgImage', { read: TemplateRef })\n    private svgImage: TemplateRef<HTMLElement>;\n\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.cssClass = \"\";\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('class.igx-icon')\n    public cssClass = 'igx-icon';\n\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.ariaHidden = false;\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('attr.aria-hidden')\n    public ariaHidden = true;\n\n    /**\n    *  An @Input property that sets the value of the `id` attribute.\n    *```html\n    *<igx-icon id=\"igx-icon-1\" fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-icon-${NEXT_ID++}`;\n\n    /**\n    *  An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n    *```html\n    *<igx-icon fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @Input('fontSet')\n    public font: string;\n\n    /**\n    *  An @Input property that allows you to disable the `active` property. By default it's applied.\n    *```html\n    *<igx-icon [isActive]=\"false\" fontSet=\"material\" color=\"blue\">settings</igx-icon>\n    *```\n    */\n    @Input('isActive')\n    public active = true;\n\n    /**\n    *  An @Input property that allows you to change the `iconColor` of the icon.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">settings</igx-icon>\n    *```\n    */\n    @Input('color')\n    public iconColor: string;\n\n    /**\n    *  An @Input property that allows you to set the `iconName` of the icon.\n    *  The `iconName` can be set using the `name` property.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">question_answer</igx-icon>\n    *```\n    */\n    @Input('name')\n    public iconName: string;\n\n    /**\n    *    An @Input property that allows you to change the `glyphName` of the icon.\n    *    The `glyphName` can be set using `iconName`.\n    *    You can provide either ligature `name` or glyph `iconName`, but not both at the same time.\n    *```html\n    *<igx-icon iconName=\"question_answer\" color=\"blue\" [isActive]=\"true\" fontSet=\"material\"></igx-icon>\n    *```\n    */\n    @DeprecateProperty(`'iconName' property is deprecated. To set the icon name for 'material' icons place the name of the icon between ` +\n        `the opening and closing tags. For 'Font Awesome' and SVG icons use 'name' property.`)\n    @Input('iconName')\n    public glyphName: string;\n\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    public el: ElementRef;\n\n    constructor(private _el: ElementRef, private iconService: IgxIconService) {\n        this.el = _el;\n        this.font = this.iconService.defaultFontSet;\n        this.iconService.registerFontSetAlias('material', 'material-icons');\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.updateIconClass();\n    }\n\n    /**\n     *  An accessor that returns the value of the font property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string {\n        return this.font;\n    }\n\n    /**\n     *  An accessor that returns the value of the active property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean {\n        return this.active;\n    }\n\n    /**\n     *  An accessor that returns inactive property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-icon--inactive')\n    get getInactive(): boolean {\n        return !this.active;\n    }\n\n    /**\n     *  An accessor that returns the opposite value of the `iconColor` property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    @HostBinding('style.color')\n    get getIconColor(): string {\n        return this.iconColor;\n    }\n\n    /**\n     *  An accessor that returns the value of the iconName property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string {\n        return this.iconName;\n    }\n\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string {\n        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);\n        }\n\n        return null;\n    }\n\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement> {\n        if (this.iconName) {\n            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n                return this.svgImage;\n            }\n\n            // TODO: remove this after glyphName property is deprecated.\n            const materialFS = 'material-icons';\n            const materialFSAlias = 'material';\n            if (this.font === materialFS || this.font === materialFSAlias ||\n                (!this.font && (this.iconService.defaultFontSet === materialFS || this.iconService.defaultFontSet === materialFSAlias))) {\n                return this.implicitLigature;\n            }\n\n            return this.noLigature;\n        }\n\n        return this.explicitLigature;\n    }\n\n    /**\n     * @hidden\n     */\n    private updateIconClass() {\n        const className = this.iconService.fontSetClassName(this.font);\n        this.el.nativeElement.classList.add(className);\n\n        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            this.el.nativeElement.classList.add(this.iconName);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { IgxIconComponent } from './icon.component';\nimport { IgxIconService } from './icon.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n    declarations: [IgxIconComponent],\n    exports: [IgxIconComponent],\n    imports: [CommonModule, HttpClientModule],\n    providers: [IgxIconService]\n})\nexport class IgxIconModule {\n    public static forRoot() {\n        return {\n            ngModule: IgxIconModule,\n            providers: [IgxIconService]\n        };\n    }\n}\n\nexport * from './icon.component';\nexport * from './icon.service';\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Size {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large'\n}\n/**\n * **Ignite UI for Angular Avatar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)\n *\n * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an\n * image, someone's initials or a material icon from the google material icon set.\n *\n * Example:\n * ```html\n * <igx-avatar initials=\"MS\" roundShape=\"true\" size=\"large\">\n * </igx-avatar>\n * ```\n */\n@Component({\n    selector: 'igx-avatar',\n    template: `<ng-template #imageTemplate>\n    <div #image [style.backgroundImage]=\"getSrcUrl()\" class=\"igx-avatar__image\" [style.backgroundColor]=\"bgColor\" [attr.aria-roledescription]=\"roleDescription\"\n    ></div>\n</ng-template>\n\n<ng-template #initialsTemplate>\n    <div class=\"igx-avatar__initials\" [style.backgroundColor]=\"bgColor\" [style.color]=\"color\" [attr.aria-roledescription]=\"roleDescription\">\n        <span>{{initials.substring(0, 2)}}</span>\n    </div>\n</ng-template>\n\n<ng-template #iconTemplate>\n    <span class=\"igx-avatar__icon\" [style.backgroundColor]=\"bgColor\" [style.color]=\"color\" [attr.aria-roledescription]=\"roleDescription\">\n        <igx-icon>{{icon}}</igx-icon>\n    </span>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n<ng-content></ng-content>\n`\n})\nexport class IgxAvatarComponent implements OnInit, AfterViewInit {\n\n\n    /**\n     * This is a reference to the avatar `image` element in the DOM.\n     *\n     * ```typescript\n     *  let image =  this.avatar.image;\n     * ```\n     * @memberof IgxAvatarComponent\n     */\n    @ViewChild('image')\n    public image: ElementRef;\n\n\n    /**\n     *@hidden\n     */\n    @ViewChild('imageTemplate', { read: TemplateRef })\n    protected imageTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('initialsTemplate', { read: TemplateRef })\n    protected initialsTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    @ViewChild('iconTemplate', { read: TemplateRef })\n    protected iconTemplate: TemplateRef<any>;\n    /**\n     * Returns the `aria-label` of the avatar.\n     *\n     * ```typescript\n     * let ariaLabel = this.avatar.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'avatar';\n    /**\n     * Returns the `role` attribute of the avatar.\n     *\n     * ```typescript\n     * let avatarRole = this.avatar.role;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'img';\n    /**\n     * Returns the class of the avatar.\n     *\n     * ```typescript\n     * let avatarCLass =  this.avatar.cssClass;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar')\n    public cssClass = 'igx-avatar';\n    /**\n     * Returns the type of the avatar.\n     * The avatar can be: `\"initials type avatar\"`, `\"icon type avatar\"` or `\"image type avatar\"`.\n     *\n     * ```typescript\n     * let avatarDescription = this.avatar.roleDescription;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public roleDescription: string;\n\n    /**\n     * @hidden\n     */\n    private _size: string | Size = 'small';\n\n    /**\n     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `\"igx-avatar-0\"`.\n     *\n     * ```html\n     * <igx-avatar id=\"my-first-avatar\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-avatar-${NEXT_ID++}`;\n    /**\n     * Sets a round shape to the avatar if `roundShape` is `\"true\"`.\n     * By default the shape of the avatar is a square.\n     *\n     * ```html\n     * <igx-avatar roundShape = \"true\" ></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar--rounded')\n    @Input()\n    public roundShape = false;\n\n    /**\n     * Sets the avatar's `initials`/`icon` color.\n     *\n     *```html\n     *<igx-avatar color=\"blue\"></igx-avatar>\n     *```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public color: string;\n\n    /**\n     * Sets the background color of the avatar.\n     *\n     * ```html\n     * <igx-avatar bgColor=\"yellow\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public bgColor: string;\n\n    /**\n     * Sets `initials` to the avatar.\n     *\n     * ```html\n     * <igx-avatar initials=\"MN\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public initials: string;\n\n    /**\n     * Sets an `icon` to the avatar. All icons from the material icon set are supported.\n     *\n     * ```html\n     * <igx-avatar icon=\"phone\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets the `image` source of the avatar.\n     *\n     * ```html\n     * <igx-avatar src=\"images/picture.jpg\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public src: string;\n\n    /**\n     * Returns the `size` of the avatar.\n     *\n     * ```typescript\n     *let avatarSize =  this.avatar.size;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public get size(): string | Size {\n        return this._size;\n    }\n\n    /**\n     * Sets the `size`  of the avatar.\n     * By default the `size` is `\"small\"`. It can be set to `\"medium\"` or `\"large\"`.\n     *\n     * ```\n     * <igx-avatar size=\"large\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public set size(value: string | Size) {\n        switch (value) {\n            case 'small':\n            case 'medium':\n            case 'large':\n                this._size = value;\n                break;\n            default:\n                this._size = 'small';\n        }\n    }\n    /**\n     * Returns the template of the avatar.\n     *\n     * ```typescript\n     * let template = this.avatar.template;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get template() {\n        if (this.src) {\n            return this.imageTemplate;\n        }\n\n        if (this.initials) {\n            return this.initialsTemplate;\n        }\n\n        return this.iconTemplate;\n\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.roleDescription = this.getRole();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        this.elementRef.nativeElement.classList.add(`igx-avatar--${this._size}`);\n    }\n    /**\n     * @hidden\n     */\n    private getRole() {\n        if (this.initials) {\n            return 'initials type avatar';\n        } else if (this.src) {\n            return 'image type avatar';\n        } else {\n            return 'icon type avatar';\n        }\n    }\n\n    /**\n     * Returns the url of the `image`.\n     *\n     * ```typescript\n     * let imageSourceUrl = this.avatar.getSrcUrl();\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public getSrcUrl() {\n        return `url(${this.src})`;\n    }\n}\n/**\n * The `IgxAvatarModule` provides the {@link IgxAvatarComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxAvatarComponent],\n    exports: [IgxAvatarComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxAvatarModule { }\n","import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Type {\n    DEFAULT = 'default',\n    INFO = 'info',\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    ERROR = 'error'\n}\n/**\n * **Ignite UI for Angular Badge** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/badge.html)\n *\n * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the\n * application when visual notification is needed. They are usually designed as icons with a predefined\n * style to communicate information, success, warnings, or errors.\n *\n * Example:\n * ```html\n * <igx-avatar icon=\"person\" roundShape=\"true\" size=\"small\">\n *   <igx-badge icon=\"check\" type=\"success\" class=\"badge-style\">\n *   </igx-badge>\n * </igx-avatar>\n * ```\n * The `badge-style` class is used to position the badge:\n * ```css\n * .badge-style {\n *   position: absolute;\n *   bottom: -6px;\n *   right:-50px;\n * }\n * ```\n */\n@Component({\n    selector: 'igx-badge',\n    template: `<div class=\"igx-badge__circle\" [ngClass]=\"setClasses()\" [attr.aria-roledescription]=\"roleDescription\">\n    <span *ngIf=\"!icon\" class=\"igx-badge__circle-value\">{{value}}</span>\n    <igx-icon *ngIf=\"icon\" fontSet=\"material\">{{icon}}</igx-icon>\n</div>\n`\n})\nexport class IgxBadgeComponent {\n\n    /**\n    * An @Input property that sets the value of the `id` attribute.\n    * ```html\n    *<igx-badge id=\"igx-badge-2\" icon=\"check\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-badge-${NEXT_ID++}`;\n\n    /**\n    * An @Input property controlling the type of the badge.\n    * Allowed values are `default`, `info`, `success`, `warning`, `error`.\n    * Providing an invalid value won't display a badge.\n    * ```html\n    *<igx-badge type=\"success\" icon=\"check\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public type: string | Type = 'default';\n\n    /**\n    * An @Input property that sets the value to be displayed inside the badge.\n    * If an `icon` property is already set the `icon` will be displayed.\n    * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.\n    * ```html\n    *<igx-badge value=\"11\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public value = '';\n\n    /**\n     * Set an icon for the badge from the material icons set.\n     * Has priority over the `value` property.\n     * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n     * Providing an invalid value won't display anything.\n     * ```html\n     *<igx-badge icon=\"check\" type=\"success\" class=\"badge-style\" value=\"11\"></igx-badge>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * This allows you to set value to role attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"badge-status\";\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'status';\n\n    /**\n     * This allows you to disable igx-badge class. The default it's applied.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.cssClass = false;\n     * ```\n     */\n    @HostBinding('class.igx-badge')\n    public cssClass = 'igx-badge';\n\n    /**\n     * This allows you to set value to aria-label attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"icon-badge\";\n     * ```\n     */\n    @HostBinding('attr.aria-label')\n    public label = 'badge';\n\n    /**\n     * @hidden\n     * Defines a human-readable, accessor, author-localized description for the `type` and the `icon` or `value` of the element.\n     */\n    get roleDescription() {\n        let message;\n\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (this.icon) {\n            message = this.type + ' type badge with icon type ' + this.icon;\n        } else if (this.value) {\n            message = this.type + ' badge type with value ' + this.value;\n        } else {\n            message = this.type + ' badge type without value';\n        }\n\n        return message;\n    }\n\n    /**\n     * @hidden\n     * Method which makes the name of the class more descriptive.\n     * This helps the styling of the badges.\n     */\n    public setClasses() {\n        let classes = {};\n\n        switch (Type[this.type.toUpperCase()]) {\n            case Type.DEFAULT:\n                classes = {\n                    [`${this.cssClass}__circle--default`]: true\n                };\n                break;\n            case Type.INFO:\n                classes = {\n                    [`${this.cssClass}__circle--info`]: true\n                };\n                break;\n            case Type.SUCCESS:\n                classes = {\n                    [`${this.cssClass}__circle--success`]: true\n                };\n                break;\n            case Type.WARNING:\n                classes = {\n                    [`${this.cssClass}__circle--warning`]: true\n                };\n                break;\n            case Type.ERROR:\n                classes = {\n                    [`${this.cssClass}__circle--error`]: true\n                };\n                break;\n        }\n\n        return classes;\n    }\n\n}\n\n/**\n * The IgxBadgeComponent provides the {@link IgxBadgeComponent} inside your application.\n */\n\n@NgModule({\n    declarations: [IgxBadgeComponent],\n    exports: [IgxBadgeComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxBadgeModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { takeUntil } from 'rxjs/operators';\n\nexport enum ButtonGroupAlignment { horizontal, vertical }\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Button Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)\n *\n * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports\n * single, multiple and toggle selection.\n *\n * Example:\n * ```html\n * <igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">\n * </igx-buttongroup>\n * ```\n * The `fontOptions` value shown above is defined as:\n * ```typescript\n * this.fontOptions = [\n *   { icon: 'format_bold', selected: false },\n *   { icon: 'format_italic', selected: false },\n *   { icon: 'format_underlined', selected: false }];\n * ```\n */\n@Component({\n    selector: 'igx-buttongroup',\n    template: `<div class=\"igx-button-group\" role=\"group\" [class.igx-button-group--vertical]=\"isVertical\">\n    <span *ngFor=\"let button of values; let i = 'index'\" type=\"button\" igxButton=\"flat\" [selected]=\"button.selected\"\n        [attr.data-togglable]=\"button.togglable\" [disabled]=\"disabled || button.disabled\" [igxButtonColor]=\"button.color\"\n        [igxButtonBackground]=\"button.bgcolor\" [igxLabel]=\"button.label\" [igxRipple]=\"button.ripple\">\n        <div class=\"igx-button-group__item-content {{ itemContentCssClass }}\">\n            <igx-icon *ngIf=\"button.icon\" fontSet=\"material\">{{button.icon}}</igx-icon>\n            <span *ngIf=\"button.label\">{{button.label}}</span>\n        </div>\n    </span>\n    <ng-content></ng-content>\n</div>\n`\n})\n\nexport class IgxButtonGroupComponent implements AfterViewInit, OnDestroy {\n    private _disabled = false;\n    protected buttonClickNotifier$ = new Subject<boolean>();\n    protected queryListNotifier$ = new Subject<boolean>();\n\n    @ViewChildren(IgxButtonDirective) private viewButtons: QueryList<IgxButtonDirective>;\n    @ContentChildren(IgxButtonDirective) private templateButtons: QueryList<IgxButtonDirective>;\n\n    /**\n     * A collection containing all buttons inside the button group.\n     */\n    public get buttons(): IgxButtonDirective[] {\n        return [...this.viewButtons.toArray(), ...this.templateButtons.toArray()];\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.\n     * ```html\n     *  <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-buttongroup-${NEXT_ID++}`;\n\n    /**\n     * Allows you to set a style using the `itemContentCssClass` input.\n     * The value should be the CSS class name that will be applied to the button group.\n     *```typescript\n     *public style1 = \"styleClass\";\n     * //..\n     *```\n     * ```html\n     *<igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     *```\n     */\n    @Input() set itemContentCssClass(value: string) {\n        this._itemContentCssClass = value || this._itemContentCssClass;\n    }\n\n    /**\n     * Returns the CSS class of the item content of the `IgxButtonGroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *   let buttonSelect = this.buttonG.itemContentCssClass;\n     *}\n     *```\n     */\n    get itemContentCssClass(): string {\n        return this._itemContentCssClass;\n    }\n\n    /**\n     * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public multiSelection = false;\n    /**\n     * An @Input property that allows setting the buttons in the button group.\n     * ```typescript\n     *  public ngOnInit() {\n     *      this.cities = [\n     *        new Button({\n     *          label: \"Sofia\"\n     *      }),\n     *        new Button({\n     *          label: \"London\"\n     *      }),\n     *        new Button({\n     *          label: \"New York\",\n     *          selected: true\n     *      }),\n     *        new Button({\n     *          label: \"Tokyo\"\n     *      })\n     *  ];\n     *  }\n     *  //..\n     * ```\n     * ```html\n     *  <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public values: any;\n    /**\n     * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.\n     * ```html\n     * <igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n    public set disabled(value: boolean) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this.viewButtons && this.templateButtons) {\n                this.buttons.forEach((b) => b.disabled = this._disabled);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectedIndexes: number[] = [];\n\n    /**\n     * Allows you to set the button group alignment.\n     * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.\n     * ```typescript\n     *public alignment = ButtonGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     *<igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() set alignment(value: ButtonGroupAlignment) {\n        this._isVertical = value === ButtonGroupAlignment.vertical;\n    }\n    /**\n     * Returns the alignment of the `igx-buttongroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let buttonAlignment = this.buttonG.alignment;\n     *}\n     *```\n     */\n    get alignment(): ButtonGroupAlignment {\n        return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;\n    }\n\n    /**\n     * An @Ouput property that emits an event when a button is selected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onSelect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * <igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have made a selection!\"></igx-toast>\n     *```\n     */\n    @Output() public onSelect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * An @Ouput property that emits an event when a button is deselected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onUnselect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * igx-buttongroup #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have deselected a button!\"></igx-toast>\n     *```\n     */\n    @Output() public onUnselect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * Returns true if the `igx-buttongroup` alignment is vertical.\n     * Note that in order for the accessor to work correctly the property should be set explicitly.\n     * ```html\n     * <igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">\n     * ```\n     * ```typescript\n     * //...\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let orientation = this.buttonG.isVertical;\n     *}\n     *```\n     */\n    public get isVertical(): boolean {\n        return this._isVertical;\n    }\n    private _isVertical: boolean;\n    private _itemContentCssClass: string;\n\n    constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2) {\n    }\n\n    /**\n     * Gets the selected button/buttons.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let selectedButton = this.buttonG.selectedButtons;\n     *}\n     *```\n     */\n    get selectedButtons(): IgxButtonDirective[] {\n        return this.buttons.filter((b, i) => {\n            return this.selectedIndexes.indexOf(i) !== -1;\n        });\n\n    }\n\n    /**\n     * Selects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.selectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     *```\n     */\n    public selectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.push(index);\n        button.selected = true;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');\n        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onSelect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = true;\n        }\n\n        // deselect other buttons if multiSelection is not enabled\n        if (!this.multiSelection && this.selectedIndexes.length > 1) {\n            this.buttons.forEach((b, i) => {\n                if (i !== index && this.selectedIndexes.indexOf(i) !== -1) {\n                    this.deselectButton(i);\n                }\n            });\n        }\n    }\n\n    /**\n     * Deselects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     * ```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.deselectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     * ```\n     */\n    public deselectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);\n        button.selected = false;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');\n        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onUnselect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        const initButtons = () => {\n            // Cancel any existing buttonClick subscriptions\n            this.buttonClickNotifier$.next();\n\n            this.selectedIndexes.splice(0, this.selectedIndexes.length);\n\n            // initial configuration\n            this.buttons.forEach((button, index) => {\n                const buttonElement = button.nativeElement;\n\n                if (this.disabled) {\n                    button.disabled = true;\n                }\n\n                if (!button.disabled && button.selected) {\n                    this.selectButton(index);\n                }\n\n                button.buttonClick.pipe(takeUntil(this.buttonClickNotifier$)).subscribe((ev) => this._clickHandler(ev, index));\n                this._renderer.addClass(buttonElement, 'igx-button-group__item');\n            });\n        };\n\n        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        initButtons();\n\n        this._cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.buttonClickNotifier$.next();\n        this.buttonClickNotifier$.complete();\n\n        this.queryListNotifier$.next();\n        this.queryListNotifier$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    public _clickHandler(event, i) {\n        if (this.selectedIndexes.indexOf(i) !== -1) {\n            this.deselectButton(i);\n        } else {\n            this.selectButton(i);\n        }\n    }\n}\n\nexport interface IButtonGroupEventArgs {\n    button: IgxButtonDirective;\n    index: number;\n}\n\n/**\n * The IgxButtonGroupModule provides the {@link IgxButtonGroupComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxButtonGroupComponent],\n    exports: [IgxButtonGroupComponent],\n    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]\n})\n\nexport class IgxButtonGroupModule {\n}\n","\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport function range(start = 0, stop, step = 1) {\n    const res = [];\n    const cur = (stop === undefined) ? 0 : start;\n    const max = (stop === undefined) ? start : stop;\n    for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n        res.push(i);\n    }\n    return res;\n}\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport function isLeap(year: number): boolean {\n    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));\n}\n\nexport function weekDay(year: number, month: number, day: number): number {\n    return new Date(year, month, day).getDay();\n}\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport function monthRange(year: number, month: number): number[] {\n    if ((month < 0) || (month > 11)) {\n        throw new Error('Invalid month specified');\n    }\n    const day = weekDay(year, month, 1);\n    let nDays = MDAYS[month];\n    if ((month === FEBRUARY) && (isLeap(year))) {\n        nDays++;\n    }\n    return [day, nDays];\n}\n\nexport interface ICalendarDate {\n    date: Date;\n    isCurrentMonth: boolean;\n    isPrevMonth: boolean;\n    isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n    value: string;\n    literal?: string;\n    combined: string;\n}\n\nexport enum WEEKDAYS {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6\n}\n\nexport class Calendar {\n\n    private _firstWeekDay: number | WEEKDAYS;\n\n    constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n        this._firstWeekDay = firstWeekDay;\n    }\n\n    public get firstWeekDay(): number {\n        return this._firstWeekDay % 7;\n    }\n\n    public set firstWeekDay(value: number) {\n        this._firstWeekDay = value;\n    }\n\n    /**\n     * Returns an array of weekdays for one week starting\n     * with the currently set `firstWeekDay`\n     *\n     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n     *\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public weekdays(): number[] {\n        const res = [];\n        for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n            res.push(i % 7);\n        }\n        return res;\n    }\n\n    /**\n     * Returns the date values for one month. It will always iterate throught\n     * complete weeks, so it will contain dates outside the specified month.\n     *\n     * @param year\n     * @param month\n     * @param boolean\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdates(year: number, month: number, extraWeek: boolean = false): ICalendarDate[] {\n        let date = new Date(year, month, 1);\n        let days = (date.getDay() - this.firstWeekDay) % 7;\n        if (days < 0) {\n            days = 7 - Math.abs(days);\n        }\n        date = this.timedelta(date, 'day', -days);\n        const res = [];\n        let value: ICalendarDate;\n\n        while (true) {\n\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n            date = this.timedelta(date, 'day', 1);\n\n            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {\n                if (extraWeek && res.length <= 35) {\n                    for (const i of range(0, 7)) {\n                        value = this.generateICalendarDate(date, year, month);\n                        res.push(value);\n                        date = this.timedelta(date, 'day', 1);\n                    }\n                }\n                break;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns a matrix (array of arrays) representing a month's calendar.\n     * Each row represents a full week; week entries are ICalendarDate objects.\n     *\n     * @param year\n     * @param month\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdatescalendar(year: number, month: number, extraWeek: boolean = false): ICalendarDate[][] {\n        const dates = this.monthdates(year, month, extraWeek);\n        const res = [];\n        for (const i of range(0, dates.length, 7)) {\n            res.push(dates.slice(i, i + 7));\n        }\n        return res;\n    }\n\n    public timedelta(date: Date, interval: string, units: number): Date {\n        const ret = new Date(date);\n\n        const checkRollover = () => {\n            if (ret.getDate() !== date.getDate()) {\n                ret.setDate(0);\n            }\n        };\n\n        switch (interval.toLowerCase()) {\n            case 'year':\n                ret.setFullYear(ret.getFullYear() + units);\n                checkRollover();\n                break;\n            case 'quarter':\n                ret.setMonth(ret.getMonth() + 3 * units);\n                checkRollover();\n                break;\n            case 'month':\n                ret.setMonth(ret.getMonth() + units);\n                checkRollover();\n                break;\n            case 'week':\n                ret.setDate(ret.getDate() + 7 * units);\n                break;\n            case 'day':\n                ret.setDate(ret.getDate() + units);\n                break;\n            case 'hour':\n                ret.setTime(ret.getTime() + units * 3600000);\n                break;\n            case 'minute':\n                ret.setTime(ret.getTime() + units * 60000);\n                break;\n            case 'second':\n                ret.setTime(ret.getTime() + units * 1000);\n                break;\n            default:\n                throw new Error('Invalid interval specifier');\n        }\n        return ret;\n    }\n\n    public formatToParts(date: Date, locale: string, options: any, parts: string[]) {\n        const formatter = new Intl.DateTimeFormat(locale, options);\n        const result = {\n            date,\n            full: formatter.format(date)\n        };\n\n        if ((formatter as any).formatToParts) {\n            const formattedParts = (formatter as any).formatToParts(date);\n\n            const toType = (partType: string) => {\n                const index = formattedParts.findIndex(({ type }) => type === partType);\n                const o: IFormattedParts = { value: '', literal: '', combined: ''};\n\n                if (partType === 'era' && index > -1) {\n                    o.value = formattedParts[index].value;\n                    return o;\n                } else if (partType === 'era' && index === -1) {\n                    return o;\n                }\n\n                o.value = formattedParts[index].value;\n                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';\n                o.combined = [o.value, o.literal].join('');\n                return o;\n            };\n\n            for (const each of parts) {\n                result[each] = toType(each);\n            }\n        } else {\n            for (const each of parts) {\n                result[each] = { value: '', literal: '', combined: ''};\n            }\n        }\n        return result;\n    }\n\n    private generateICalendarDate(date: Date, year: number, month: number): ICalendarDate {\n        return {\n            date,\n            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n            isNextMonth: this.isNextMonth(date, year, month),\n            isPrevMonth: this.isPreviousMonth(date, year, month)\n        };\n    }\n\n    private isPreviousMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() < month;\n        }\n        return date.getFullYear() < year;\n    }\n\n    private isNextMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() > month;\n        }\n\n        return date.getFullYear() > year;\n    }\n}\n","import { transition, trigger, useAnimation } from '@angular/animations';\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChildren\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../animations/main';\nimport { Calendar, ICalendarDate, range, WEEKDAYS } from './calendar';\nimport {\n    IgxCalendarDateDirective,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarSubheaderTemplateDirective\n} from './calendar.directives';\nimport { DateRangeDescriptor, DateRangeType } from '../core/dates/dateRange';\nimport { isDate } from 'util';\n\nlet NEXT_ID = 0;\n\nexport enum CalendarView {\n    DEFAULT,\n    YEAR,\n    DECADE\n}\n\nexport enum CalendarSelection {\n    SINGLE = 'single',\n    MULTI = 'multi',\n    RANGE = 'range'\n}\n\nexport class CalendarHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\n/**\n * **Ignite UI for Angular Calendar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/calendar.html)\n *\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * Example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxCalendarComponent\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CalendarHammerConfig\n        }\n    ],\n    selector: 'igx-calendar',\n    template: `<ng-template let-result #defaultHeader>\n    <span class=\"date-text\">{{ getFormattedDate().weekday }},&nbsp;</span>\n    <span class=\"date-text\">{{ getFormattedDate().monthday }}</span>\n</ng-template>\n\n<ng-template let-result #defaultMonth>\n    <span (click)=\"activeViewYear()\" class=\"date__el\">\n        {{ formattedMonth(viewDate) }}\n    </span>\n    <span (click)=\"activeViewDecade()\" class=\"date__el\">\n        {{ formattedYear(viewDate) }}\n    </span>\n</ng-template>\n\n<div *ngIf=\"selection === 'single'\" class=\"igx-calendar__header\">\n    <h5 class=\"igx-calendar__header-year\">{{ formattedYear(headerDate) }}</h5>\n    <h2 class=\"igx-calendar__header-date\">\n        <ng-container *ngTemplateOutlet=\"headerTemplate ? headerTemplate : defaultHeader; context: headerContext\">\n        </ng-container>\n    </h2>\n</div>\n\n<div *ngIf=\"isDefaultView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\" (swiperight)=\"previousMonth()\" (swipeleft)=\"nextMonth()\">\n    <div class=\"igx-calendar__body-picker\">\n        <div class=\"prev\" (click)=\"previousMonth()\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_left</igx-icon>\n        </div>\n        <div class=\"date\">\n            <ng-container *ngTemplateOutlet=\"subheaderTemplate ? subheaderTemplate : defaultMonth; context: context\">\n            </ng-container>\n        </div>\n        <div class=\"next\" (click)=\"nextMonth()\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_right</igx-icon>\n        </div>\n    </div>\n\n    <div class=\"igx-calendar__body-row\">\n        <span *ngFor=\"let dayName of generateWeekHeader()\" class=\"igx-calendar__label\">\n            {{ dayName | titlecase }}\n        </span>\n    </div>\n\n    <div *ngFor=\"let week of getCalendarMonth; last as isLast; index as i; trackBy: rowTracker\" class=\"igx-calendar__body-row\" [@animateChange]=\"monthAction\"\n        (@animateChange.done)=\"animationDone($event, isLast)\">\n        <span [igxCalendarDate]=\"day\" (onDateSelection)=\"childClicked($event)\" *ngFor=\"let day of week; trackBy: dateTracker\">\n            {{ formattedDate(day.date) }}\n        </span>\n    </div>\n</div>\n\n<div *ngIf=\"isYearView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\">\n    <div class=\"igx-calendar__body-row--wrap\">\n        <div (onMonthSelection)=\"changeMonth($event)\" [igxCalendarMonth]=\"month\" [index]=\"i\" *ngFor=\"let month of months; index as i;\">\n            {{ formattedMonth(month) | titlecase }}\n        </div>\n    </div>\n</div>\n\n<div *ngIf=\"isDecadeView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\">\n    <div class=\"igx-calendar__body-column\" (wheel)=\"onScroll($event)\" (pan)=\"onPan($event)\">\n        <span (onYearSelection)=\"changeYear($event)\" [igxCalendarYear]=\"year\" *ngFor=\"let year of decade\">\n            {{ formattedYear(year) }}\n        </span>\n    </div>\n</div>\n`\n})\nexport class IgxCalendarComponent implements OnInit, ControlValueAccessor {\n    /**\n     * Sets/gets the `id` of the calendar.\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     * ```html\n     * <igx-calendar id = \"my-first-calendar\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let calendarId =  this.calendar.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-calendar-${NEXT_ID++}`;\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     * ```typescript\n     * let weekStart =  this.calendar.weekStart;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @Input()\n    public get weekStart(): WEEKDAYS | number {\n        return this.calendarModel.firstWeekDay;\n    }\n    /**\n     * Sets the start day of the week.\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     * ```html\n     * <igx-calendar [weekStart] = \"1\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set weekStart(value: WEEKDAYS | number) {\n        this.calendarModel.firstWeekDay = value;\n    }\n\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.calendar.locale;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the calendar.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-calendar [locale] = \"de\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initFormatters();\n    }\n\n    /**\n     *\n     * Gets the selection type of the calendar.\n     * Default value is `\"single\"`.\n     * Changing the type of selection in the calendar resets the currently\n     * selected values if any.\n     * ```typescript\n     * let selectionType =  this.calendar.selection;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @Input()\n    public get selection(): string {\n        return this._selection;\n    }\n    /**\n     * Sets the selection type of the calendar.\n     * ```html\n     * <igx-calendar [selection] = \"'multi'\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set selection(value: string) {\n        switch (value) {\n            case 'single':\n                this.selectedDates = null;\n                break;\n            case 'multi':\n            case 'range':\n                this.selectedDates = [];\n                break;\n            default:\n                throw new Error('Invalid selection value');\n        }\n        this._onChangeCallback(this.selectedDates);\n        this.rangeStarted = false;\n        this._selection = value;\n    }\n\n    /**\n     * Gets the date that is presented in the calendar.\n     * By default it is the current date.\n     * ```typescript\n     * let date = this.calendar.viewDate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @Input()\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n    /**\n     * Sets the date that will be presented in the default view when the calendar renders.\n     * ```html\n     * <igx-calendar viewDate = \"15/06/2018\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set viewDate(value: Date) {\n        this._viewDate = this.getDateOnly(value);\n    }\n\n    /**\n     * Gets the selected date(s) of the calendar.\n     *\n     * When the calendar selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     * ```typescript\n     * let selectedDates =  this.calendar.value;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @Input()\n    public get value(): Date | Date[] {\n        return this.selectedDates;\n    }\n    /**\n     * Sets the selected date(s) of the calendar.\n     *\n     * When the calendar selection is set to `single`, it accepts\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     * ```typescript\n     *  this.calendar.value =  new Date(`2016-06-12`);\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set value(value: Date | Date[]) {\n        this.selectDate(value);\n    }\n\n    /**\n     * Gets the date format options of the calendar.\n     * ```typescript\n     * let dateFormatOptions = this.calendar.formatOptions.\n     * ```\n     */\n    @Input()\n    public get formatOptions(): object {\n        return this._formatOptions;\n    }\n    /**\n     * Sets the date format options of the calendar.\n     * ```html\n     * <igx-calendar> [formatOptions] = \"{ day: '2-digit', month: 'short', weekday: 'long', year: 'numeric' }\"</igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set formatOptions(formatOptions: object) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n        this.initFormatters();\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     * ```typescript\n     * let formatViews = this.calendar.formatViews;\n     * ```\n     */\n    @Input()\n    public get formatViews(): object {\n        return this._formatViews;\n    }\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     * ```html\n     * <igx-calendar [formatViews] = \"{ day: true, month: false, year: true }\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set formatViews(formatViews: object) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let isVertical = this.calendar.vertical;\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.calendar.disabledDates;\n     * ```\n     */\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.disabledDates = [\n     *      new DateRangeDescriptor(DateRangeType.Between, [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]),\n     *      new DateRangeDescriptor(DateRangeType.Weekends)];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.calendar.specialDates;\n     * ```\n     */\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.specialDates = [\n     *      new DateRangeDescriptor(DateRangeType.Between, [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]),\n     *      new DateRangeDescriptor(DateRangeType.Weekends)];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Emits an event when a selection is made in the calendar.\n     * Provides reference the `selectedDates` property in the `IgxCalendarComponent`.\n     * ```html\n     * <igx-calendar (onSelection) = \"onSelection($event)\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date | Date[]>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(forwardRef(() => IgxCalendarDateDirective), { read: IgxCalendarDateDirective })\n    public dates: QueryList<IgxCalendarDateDirective>;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * The default aria role attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'grid';\n\n    /**\n     * The default aria lebelled by attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy = 'calendar';\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClass(): string {\n        if (this.vertical) {\n            return 'igx-calendar--vertical';\n        }\n        return 'igx-calendar';\n    }\n\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[] {\n        let start = new Date(this._viewDate.getFullYear(), 0, 1);\n        const result = [];\n\n        for (let i = 0; i < 12; i++) {\n            result.push(start);\n            start = this.calendarModel.timedelta(start, 'month', 1);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns an array of date objects which are then used to properly\n     * render the years.\n     *\n     * Used in the template of the component.\n     *\n     * @hidden\n     */\n    get decade(): number[] {\n        const result = [];\n        const start = this._viewDate.getFullYear() - 3;\n        const end = this._viewDate.getFullYear() + 4;\n\n        for (const year of range(start, end)) {\n            result.push(new Date(year, this._viewDate.getMonth(), this._viewDate.getDate()));\n        }\n\n        return result;\n    }\n\n    get isDefaultView(): boolean {\n        return this._activeView === CalendarView.DEFAULT;\n    }\n\n    get isYearView(): boolean {\n        return this._activeView === CalendarView.YEAR;\n    }\n\n    get isDecadeView(): boolean {\n        return this._activeView === CalendarView.DECADE;\n    }\n\n    /**\n     * Gets the current active view of the calendar.\n     * ```typescript\n     * let activeView =  this.calendar.activeView;\n     * ```\n     */\n    get activeView(): CalendarView {\n        return this._activeView;\n    }\n\n    /**\n     * @hidden\n     */\n    get monthAction(): string {\n        return this._monthAction;\n    }\n    /**\n     * Gets the header template.\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any {\n        if (this.headerTemplateDirective) {\n            return this.headerTemplateDirective.template;\n        }\n        return null;\n    }\n    /**\n     * Sets the header template.\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any) {\n        this.headerTemplateDirective = directive;\n    }\n    /**\n     * Gets the subheader template.\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any {\n        if (this.subheaderTemplateDirective) {\n            return this.subheaderTemplateDirective.template;\n        }\n        return null;\n    }\n    /**\n     * Sets the subheader template.\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any) {\n        this.subheaderTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext() {\n        const date: Date = this.headerDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context() {\n        const date: Date = this._viewDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerDate(): Date {\n        return this.selectedDates ? this.selectedDates : new Date();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective })\n    private headerTemplateDirective: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:max-line-length\n    @ContentChild(forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective })\n    private subheaderTemplateDirective: IgxCalendarSubheaderTemplateDirective;\n    /**\n     *@hidden\n     */\n    private _viewDate: Date;\n    /**\n     *@hidden\n     */\n    private calendarModel: Calendar;\n    /**\n     *@hidden\n     */\n    private _activeView = CalendarView.DEFAULT;\n    /**\n     *@hidden\n     */\n    private selectedDates;\n    /**\n     *@hidden\n     */\n    private _selection: CalendarSelection | string = CalendarSelection.SINGLE;\n    /**\n     *@hidden\n     */\n    private rangeStarted = false;\n    /**\n     *@hidden\n     */\n    private _monthAction = '';\n    /**\n    *@hidden\n    */\n    private _locale = 'en';\n    /**\n     *@hidden\n     */\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n    /**\n     *@hidden\n     */\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n    /**\n     *@hidden\n     */\n    private _disabledDates: DateRangeDescriptor[] = null;\n    /**\n     *@hidden\n     */\n    private formatterMonth;\n    /**\n     *@hidden\n     */\n    private formatterDay;\n    /**\n     *@hidden\n     */\n    private formatterYear;\n    /**\n     *@hidden\n     */\n    private formatterMonthday;\n    /**\n     *@hidden\n     */\n    private formatterWeekday;\n    /**\n     *@hidden\n     */\n    private _specialDates: DateRangeDescriptor[] = null;\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.calendarModel = new Calendar();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        const today = new Date();\n\n        this.calendarModel.firstWeekDay = this.weekStart;\n        this._viewDate = this._viewDate ? this._viewDate : today;\n        this.initFormatters();\n    }\n\n    /**\n     * Resets the formatters when locale or formatOptions are changed\n     *\n     * @hidden\n     */\n    private initFormatters() {\n        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });\n        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });\n        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });\n        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });\n        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date | Date[]) {\n        this.selectedDates = value;\n    }\n\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this._formatViews.month) {\n            return this.formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * Returns the locale representation of the date in the default view if enabled,\n     * otherwise returns the default `Date.getDate()` value.\n     *\n     * @hidden\n     */\n    public formattedDate(value: Date): string {\n        if (this._formatViews.day) {\n            return this.formatterDay.format(value);\n        }\n        return `${value.getDate()}`;\n    }\n\n    /**\n     * Returns the locale representation of the year in the year view if enabled,\n     * otherwise returns the default `Date.getFullYear()` value.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this._formatViews.year) {\n            return this.formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentMonth(value: Date): boolean {\n        return this.viewDate.getMonth() === value.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentYear(value: Date): boolean {\n        return this.viewDate.getFullYear() === value.getFullYear();\n    }\n\n    /**\n     * @hidden\n     */\n    public previousMonth() {\n        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'month', -1);\n        this._monthAction = 'prev';\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMonth() {\n        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'month', 1);\n        this._monthAction = 'next';\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYear() {\n        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'year', -1);\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYear() {\n        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'year', 1);\n    }\n\n    /**\n     * @hidden\n     */\n    public getFormattedDate(): { weekday: string, monthday: string } {\n\n        const date = this.headerDate;\n\n        return {\n            monthday: this.formatterMonthday.format(date),\n            weekday: this.formatterWeekday.format(date),\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public childClicked(instance: ICalendarDate) {\n        if (instance.isPrevMonth) {\n            this.previousMonth();\n        }\n\n        if (instance.isNextMonth) {\n            this.nextMonth();\n        }\n\n        this.selectDateFromClient(instance.date);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    public animationDone(event, isLast: boolean) {\n        if (isLast) {\n            const date = this.dates.find((d) => d.selected);\n            if (date) {\n                setTimeout(() => date.nativeElement.focus(),\n                    parseInt(slideInRight.options.params.duration, 10));\n            }\n        }\n    }\n\n    /**\n     * Selects date(s) (based on the selection type).\n     *```typescript\n     * this.calendar.selectDate(new Date(`2018-06-12`));\n     *```\n     */\n    public selectDate(value: Date | Date[]) {\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n            throw new Error('Date or array should be set for the selectDate method.');\n        }\n\n        switch (this.selection) {\n            case 'single':\n                this.selectSingle(value as Date);\n                break;\n            case 'multi':\n                this.selectMultiple(value);\n                break;\n            case 'range':\n                this.selectRange(value);\n                break;\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     *```typescript\n     * this.calendar.deselectDate(new Date(`2018-06-12`));\n     *````\n     */\n    public deselectDate(value?: Date | Date[]) {\n        if (this.selectedDates === null || this.selectedDates === []) {\n            return;\n        }\n\n        if (value === null || value === undefined) {\n            this.selectedDates = this.selection === 'single' ? null : [];\n            this._onChangeCallback(this.selectedDates);\n            return;\n        }\n\n        switch (this.selection) {\n            case 'single':\n                this.deselectSingle(value as Date);\n                break;\n            case 'multi':\n                this.deselectMultiple(value as Date[]);\n                break;\n            case 'range':\n                this.deselectRange(value as Date[]);\n                break;\n        }\n    }\n\n    /**\n     * Checks whether a date is disabled.\n     *```typescript\n     * this.calendar.isDateDisabled(new Date(`2018-06-12`));\n     *```\n     * @hidden\n     */\n    public isDateDisabled(date: Date) {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return this.isDateInRanges(date, this.disabledDates);\n    }\n\n    /**\n     * Checks whether a date is special.\n     *```typescript\n     * this.calendar.isDateSpecial(new Date(`2018-06-12`));\n     *```\n     * @hidden\n     */\n    public isDateSpecial(date: Date) {\n        if (this.specialDates === null) {\n            return false;\n        }\n\n        return this.isDateInRanges(date, this.specialDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public generateWeekHeader(): string[] {\n        const dayNames = [];\n        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];\n        for (const day of rv) {\n            dayNames.push(this.formatterWeekday.format(day.date));\n        }\n\n        return dayNames;\n    }\n\n    /**\n     * @hidden\n     */\n    public get getCalendarMonth(): ICalendarDate[][] {\n        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);\n    }\n\n    /**\n     * @hidden\n     */\n    public changeYear(event: Date) {\n        this._viewDate = new Date(event.getFullYear(), this._viewDate.getMonth());\n        this._activeView = CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public changeMonth(event: Date) {\n        this._viewDate = new Date(this._viewDate.getFullYear(), event.getMonth());\n        this._activeView = CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYear(): void {\n        this._activeView = CalendarView.YEAR;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(): void {\n        this._activeView = CalendarView.DECADE;\n    }\n\n    /**\n     * @hidden\n     */\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const delta = event.deltaY < 0 ? -1 : 1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public onPan(event) {\n        const delta = event.deltaY < 0 ? 1 : -1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.previousMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.nextMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pageup', ['$event'])\n    public onKeydownShiftPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.previousYear();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pagedown', ['$event'])\n    public onKeydownShiftPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.nextYear();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index - 7 > -1; index -= 7) {\n            const date = dates[index - 7];\n            if (!date.isDisabled) {\n                date.nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index + 7 < this.dates.length; index += 7) {\n            const date = dates[index + 7];\n            if (!date.isDisabled) {\n                date.nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index > 0; index--) {\n            const date = dates[index - 1];\n            if (!date.isDisabled) {\n                date.nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index < this.dates.length - 1; index++) {\n            const date = dates[index + 1];\n            if (!date.isDisabled) {\n                date.nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = 0; i < dates.length; i++) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = dates.length - 1; i >= 0; i--) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public dateTracker(index, item): string {\n        return `${item.date.getMonth()}--${item.date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public rowTracker(index, item): string {\n        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;\n    }\n\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle(value: Date) {\n        this.selectedDates = this.getDateOnly(value);\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple(value: Date | Date[]) {\n        if (Array.isArray(value)) {\n            this.selectedDates = this.selectedDates.concat(value.map(v => this.getDateOnly(v)));\n        } else {\n            const valueDateOnly = this.getDateOnly(value);\n            if (this.selectedDates.every((date: Date) => date.getTime() !== valueDateOnly.getTime())) {\n                this.selectedDates.push(valueDateOnly);\n            } else {\n                this.selectedDates = this.selectedDates.filter(\n                    (date: Date) => date.getTime() !== valueDateOnly.getTime()\n                );\n            }\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n    /**\n     *@hidden\n     */\n    private selectRange(value: Date | Date[], excludeDisabledDates: boolean = false) {\n        let start: Date;\n        let end: Date;\n\n        if (Array.isArray(value)) {\n            this.rangeStarted = false;\n            value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n            start = this.getDateOnly(value[0]);\n            end = this.getDateOnly(value[value.length - 1]);\n            this.selectedDates = [start, ...this.generateDateRange(start, end)];\n        } else {\n            if (!this.rangeStarted) {\n                this.rangeStarted = true;\n                this.selectedDates = [value];\n            } else {\n                this.rangeStarted = false;\n\n                if (this.selectedDates[0].getTime() === value.getTime()) {\n                    this.selectedDates = [];\n                    this._onChangeCallback(this.selectedDates);\n                    return;\n                }\n\n                this.selectedDates.push(value);\n                this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n                start = this.selectedDates.shift();\n                end = this.selectedDates.pop();\n                this.selectedDates = [start, ...this.generateDateRange(start, end)];\n            }\n        }\n\n        if (excludeDisabledDates) {\n            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle(value: Date) {\n        if (this.selectedDates !== null &&\n            this.getDateOnlyInMs(value as Date) === this.getDateOnlyInMs(this.selectedDates)) {\n            this.selectedDates = null;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple(value: Date[]) {\n        value = value.filter(v => v !== null);\n        const selectedDatesCount = this.selectedDates.length;\n        const datesInMsToDeselect: Set<number> = new Set<number>(\n            value.map(v => this.getDateOnlyInMs(v)));\n\n        for (let i = this.selectedDates.length - 1; i >= 0; i--) {\n            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {\n                this.selectedDates.splice(i, 1);\n            }\n        }\n\n        if (this.selectedDates.length !== selectedDatesCount) {\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange(value: Date[]) {\n        value = value.filter(v => v !== null && isDate(v));\n        if (value.length < 1) {\n            return;\n        }\n\n        value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const valueStart = this.getDateOnlyInMs(value[0]);\n        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);\n\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);\n        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);\n\n        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {\n            this.selectedDates = [];\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private selectDateFromClient(value: Date) {\n        switch (this.selection) {\n            case 'single':\n            case 'multi':\n                if (!this.isDateDisabled(value)) {\n                    this.selectDate(value);\n                }\n\n                break;\n            case 'range':\n                this.selectRange(value, true);\n                break;\n        }\n    }\n    /**\n     *@hidden\n     */\n    private isDateInRanges(date: Date, ranges: DateRangeDescriptor[]): boolean {\n        date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n        const dateInMs = date.getTime();\n\n        for (const descriptor of ranges) {\n            const dRanges = descriptor.dateRange ? descriptor.dateRange.map(\n                r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;\n            switch (descriptor.type) {\n                case (DateRangeType.After):\n                    if (dateInMs > dRanges[0].getTime()) {\n                        return true;\n                    }\n\n                    break;\n                case (DateRangeType.Before):\n                    if (dateInMs < dRanges[0].getTime()) {\n                        return true;\n                    }\n\n                    break;\n                case (DateRangeType.Between):\n                    const dRange = dRanges.map(d => d.getTime());\n                    const min = Math.min(dRange[0], dRange[1]);\n                    const max = Math.max(dRange[0], dRange[1]);\n                    if (dateInMs >= min && dateInMs <= max) {\n                        return true;\n                    }\n\n                    break;\n                case (DateRangeType.Specific):\n                    const datesInMs = dRanges.map(d => d.getTime());\n                    for (const specificDateInMs of datesInMs) {\n                        if (dateInMs === specificDateInMs) {\n                            return true;\n                        }\n                    }\n\n                    break;\n                case (DateRangeType.Weekdays):\n                    const day = date.getDay();\n                    if (day % 6 !== 0) {\n                        return true;\n                    }\n\n                    break;\n                case (DateRangeType.Weekends):\n                    const weekday = date.getDay();\n                    if (weekday % 6 === 0) {\n                        return true;\n                    }\n\n                    break;\n                default:\n                    return false;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     * @hidden\n     */\n    private generateContext(value: Date) {\n        const formatObject = {\n            monthView: () => this.activeViewYear(),\n            yearView: () => this.activeViewDecade(),\n            ...this.calendarModel.formatToParts(value, this.locale, this._formatOptions,\n                ['era', 'year', 'month', 'day', 'weekday'])\n        };\n        return { $implicit: formatObject };\n    }\n    /**\n     *@hidden\n     */\n    private generateDateRange(start: Date, end: Date): Date[] {\n        const result = [];\n        start = this.getDateOnly(start);\n        end = this.getDateOnly(end);\n        while (start.getTime() !== end.getTime()) {\n            start = this.calendarModel.timedelta(start, 'day', 1);\n            result.push(start);\n        }\n\n        return result;\n    }\n    /**\n     *@hidden\n     */\n    private generateYearRange(delta: number) {\n        const currentYear = new Date().getFullYear();\n\n        if ((delta > 0 && this._viewDate.getFullYear() - currentYear >= 95) ||\n            (delta < 0 && currentYear - this._viewDate.getFullYear() >= 95)) {\n            return;\n        }\n        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'year', delta);\n    }\n    /**\n     *@hidden\n     */\n    private getDateOnlyInMs(date: Date) {\n        return this.getDateOnly(date).getTime();\n    }\n    /**\n     *@hidden\n     */\n    private getDateOnly(date: Date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n}\n","/**\n * This file contains all the directives used by the @link IgxCalendarComponent.\n * Except for the directives which are used for templating the calendar itself\n * you should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Host,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    TemplateRef\n} from '@angular/core';\nimport { ICalendarDate } from './calendar';\nimport { IgxCalendarComponent } from './calendar.component';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarYear]'\n})\nexport class IgxCalendarYearDirective {\n\n    @Input('igxCalendarYear')\n    public value: Date;\n\n    @Output()\n    public onYearSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__year')\n    get defaultCSS(): boolean {\n        return !this.isCurrentYear;\n    }\n\n    @HostBinding('class.igx-calendar__year--current')\n    get currentCSS(): boolean {\n        return this.isCurrentYear;\n    }\n\n    get isCurrentYear(): boolean {\n        return this.calendar.isCurrentYear(this.value);\n    }\n\n    constructor(@Host() public calendar: IgxCalendarComponent) {}\n\n    @HostListener('click')\n    public onClick() {\n        this.onYearSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarMonth]'\n})\nexport class IgxCalendarMonthDirective {\n\n    @Input('igxCalendarMonth')\n    public value: Date;\n\n    @Input()\n    public index;\n\n    @Output()\n    public onMonthSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__month')\n    get defaultCSS(): boolean {\n        return !this.isCurrentMonth;\n    }\n\n    @HostBinding('class.igx-calendar__month--current')\n    get currentCSS(): boolean {\n        return this.isCurrentMonth;\n    }\n\n    get isCurrentMonth(): boolean {\n        return this.calendar.isCurrentMonth(this.value);\n    }\n\n    constructor(@Host() public calendar: IgxCalendarComponent) {}\n\n    @HostListener('click')\n    public onClick() {\n        this.onMonthSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarDate]'\n})\nexport class IgxCalendarDateDirective {\n\n    @Input('igxCalendarDate')\n    public date: ICalendarDate;\n\n    get selected(): boolean {\n        const date = this.date.date;\n\n        if (!this.calendar.value) {\n            return;\n        }\n\n        if (this.calendar.selection === 'single') {\n            this._selected = (this.calendar.value as Date).getTime() === date.getTime();\n        } else {\n            this._selected = (this.calendar.value as Date[])\n                .some((each) => each.getTime() === date.getTime());\n        }\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        this._selected = value;\n    }\n\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    get isCurrentMonth(): boolean {\n        return this.date.isCurrentMonth;\n    }\n\n    get isPreviousMonth(): boolean {\n        return this.date.isPrevMonth;\n    }\n\n    get isNextMonth(): boolean {\n        return this.date.isNextMonth;\n    }\n\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    get isInactive(): boolean {\n        return this.date.isNextMonth || this.date.isPrevMonth;\n    }\n\n    get isToday(): boolean {\n        const today = new Date(Date.now());\n        const date = this.date.date;\n        return (date.getFullYear() === today.getFullYear() &&\n            date.getMonth() === today.getMonth() &&\n            date.getDate() === today.getDate()\n        );\n    }\n\n    get isWeekend(): boolean {\n        const day = this.date.date.getDay();\n        return day === 0 || day === 6;\n    }\n\n    get isDisabled(): boolean {\n        return this.calendar.isDateDisabled(this.date.date);\n    }\n\n    get isSpecial(): boolean {\n        return this.calendar.isDateSpecial(this.date.date);\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__date')\n    get defaultCSS(): boolean {\n        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--inactive')\n    get isInactiveCSS(): boolean {\n        return this.isInactive;\n    }\n\n    @HostBinding('class.igx-calendar__date--current')\n    get isTodayCSS(): boolean {\n        return this.isToday && !this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--selected')\n    get isSelectedCSS(): boolean {\n        return this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--weekend')\n    get isWeekendCSS(): boolean {\n        return this.isWeekend;\n    }\n\n    @HostBinding('class.igx-calendar__date--disabled')\n    get isDisabledCSS(): boolean {\n        return this.isDisabled;\n    }\n\n    @HostBinding('class.igx-calendar__date--special')\n    get isSpecialCSS(): boolean {\n        return this.isSpecial;\n    }\n\n    private _selected = false;\n\n    constructor(@Host() public calendar: IgxCalendarComponent, private elementRef: ElementRef) { }\n\n    @HostListener('click')\n    @HostListener('keydown.enter')\n    public onSelect() {\n        this.onDateSelection.emit(this.date);\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarHeader]'\n})\nexport class IgxCalendarHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarSubheader]'\n})\nexport class IgxCalendarSubheaderTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxCalendarComponent } from './calendar.component';\nimport {\n    IgxCalendarDateDirective,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarMonthDirective,\n    IgxCalendarSubheaderTemplateDirective,\n    IgxCalendarYearDirective\n} from './calendar.directives';\n\n@NgModule({\n    declarations: [\n        IgxCalendarComponent,\n        IgxCalendarDateDirective,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    exports: [\n        IgxCalendarComponent,\n        IgxCalendarDateDirective,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    imports: [CommonModule, FormsModule, IgxIconModule]\n})\nexport class IgxCalendarModule { }\n","import { Component, Directive, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * IgxCardHeader is container for the card header\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-header'\n})\nexport class IgxCardHeaderDirective { }\n\n/**\n * IgxCardContent is container for the card content\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-content'\n})\nexport class IgxCardContentDirective { }\n\n/**\n * IgxCardActions is container for the card actions\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-actions'\n})\nexport class IgxCardActionsDirective { }\n\n/**\n * IgxCardFooter is container for the card footer\n */\n@Directive({\n    /*     host: {\n            role: \"footer\"\n        }, */\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-footer'\n})\nexport class IgxCardFooterDirective {\n    @Input() public role = 'footer';\n}\n\n/**\n * **Ignite UI for Angular Card** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/card.html)\n *\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way.  There are\n * four sections in a card that you can use to organize your content.  These are header, footer, content & actions.\n *\n * Example:\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <div>\n *       <h3 class=\"igx-card-header__title--small\">{{title}}</h3>\n *       <h5 class=\"igx-card-header__subtitle\">{{subtitle}}</h5>\n *     </div>\n *   </igx-card-header>\n *   <igx-card-actions>\n *     <div>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *     </div>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\n@Component({\n    selector: 'igx-card',\n    template: `<div class=\"igx-card\" role=\"group\">\n    <ng-content></ng-content>\n</div>`\n})\nexport class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     * @memberof IgxCardComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-card-${NEXT_ID++}`;\n}\n/**\n * The `IgxCardModule` provides the {@link IgxCardComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxCardComponent, IgxCardHeaderDirective,\n        IgxCardContentDirective, IgxCardActionsDirective, IgxCardFooterDirective],\n    exports: [IgxCardComponent, IgxCardHeaderDirective,\n        IgxCardContentDirective, IgxCardActionsDirective, IgxCardFooterDirective],\n    imports: [IgxButtonModule]\n})\nexport class IgxCardModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Direction { NONE, NEXT, PREV }\n\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\n@Component({\n    selector: 'igx-carousel',\n    template: `<div tabindex=\"0\" aria-label=\"carousel\" class=\"igx-carousel\"\n        (mouseenter)=\"stop()\"\n        (mouseleave)=\"play()\"\n        (swipeleft)=\"next()\"\n        (swiperight)=\"prev()\"\n        (tap)=\"isPlaying ? stop() : play()\">\n    <ul class=\"igx-carousel__indicators\" [hidden]=\"slides.length <= 1\">\n        <li *ngFor=\"let slide of slides\" [attr.aria-label]=\"setAriaLabel(slide)\" [attr.aria-selected]=\"slide.active\" [class.active]=\"slide.active === true\"\n            (click)=\"select(slide)\"></li>\n    </ul>\n    <div class=\"igx-carousel__inner\" role=\"list\">\n        <ng-content></ng-content>\n    </div>\n    <div *ngIf=\"navigation\">\n        <a role=\"button\" tabindex=\"0\" class=\"igx-carousel__arrow--prev\" (click)=\"prev()\" [hidden]=\"!slides.length\">\n            <igx-icon fontSet=\"material\">arrow_back</igx-icon>\n        </a>\n        <a role=\"button\" tabindex=\"0\" class=\"igx-carousel__arrow--next\" (click)=\"next()\" [hidden]=\"!slides.length\">\n            <igx-icon fontSet=\"material\">arrow_forward</igx-icon>\n        </a>\n    </div>\n</div>\n`\n})\n\nexport class IgxCarouselComponent implements OnDestroy {\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.role') public role = 'region';\n\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-carousel-${NEXT_ID++}`;\n\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public loop = true;\n\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public pause = true;\n\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @Input()\n    get interval(): number {\n        return this._interval;\n    }\n\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number) {\n        this._interval = +value;\n        this._restartInterval();\n    }\n    /**\n     * Returns the `tabIndex` of the carousel component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return 0;\n    }\n\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public navigation = true;\n\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideChanged = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideAdded = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideRemoved = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPaused = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPlaying = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * The collection of `slides` currently in the carousel.\n     * ```typescript\n     * let slides: IgxSlideComponent[] = this.carousel.slides;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public slides: IgxSlideComponent[] = [];\n    private _interval: number;\n    private _lastInterval: any;\n    private _playing: boolean;\n    private _currentSlide: IgxSlideComponent;\n    private _destroyed: boolean;\n    private _total = 0;\n\n    constructor(private element: ElementRef) { }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this._destroyed = true;\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n        }\n    }\n    /**\n     * @hidden\n     * @memberof IgxCarouselComponent\n     */\n    public setAriaLabel(slide) {\n        return `Item ${slide.index + 1} of ${this.total}`;\n    }\n\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get total(): number {\n        return this._total;\n    }\n\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get current(): number {\n        return !this._currentSlide ? 0 : this._currentSlide.index;\n    }\n\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isPlaying(): boolean {\n        return this._playing;\n    }\n\n    /**\n     * Returns Ð° boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isDestroyed(): boolean {\n        return this._destroyed;\n    }\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get(index: number): IgxSlideComponent {\n        for (const each of this.slides) {\n            if (each.index === index) {\n                return each;\n            }\n        }\n    }\n\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public add(slide: IgxSlideComponent) {\n        slide.index = this.total;\n        this.slides.push(slide);\n        this._total += 1;\n\n        if (this.total === 1 || slide.active) {\n            this.select(slide);\n            if (this.total === 1) {\n                this.play();\n            }\n        } else {\n            slide.active = false;\n        }\n\n        this.onSlideAdded.emit({ carousel: this, slide });\n    }\n\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public remove(slide: IgxSlideComponent) {\n        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel\n            if (slide.index === this.current) {\n                slide.active = false;\n                this.next();\n            }\n\n            this.slides.splice(slide.index, 1);\n            this._total -= 1;\n\n            if (!this.total) {\n                this._currentSlide = null;\n                return;\n            }\n\n            for (let i = 0; i < this.total; i++) {\n                this.slides[i].index = i;\n            }\n\n            this.onSlideRemoved.emit({ carousel: this, slide });\n        }\n    }\n\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public select(slide: IgxSlideComponent, direction: Direction = Direction.NONE) {\n        const newIndex = slide.index;\n        if (direction === Direction.NONE) {\n            direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;\n        }\n\n        if (slide && slide !== this._currentSlide) {\n            this._moveTo(slide, direction);\n        }\n    }\n\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public next() {\n        const index = (this.current + 1) % this.total;\n\n        if (index === 0 && !this.loop) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.NEXT);\n    }\n\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public prev() {\n        const index = this.current - 1 < 0 ?\n            this.total - 1 : this.current - 1;\n\n        if (!this.loop && index === this.total - 1) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.PREV);\n    }\n\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public play() {\n        if (!this._playing) {\n            this._playing = true;\n            this.onCarouselPlaying.emit(this);\n            this._restartInterval();\n        }\n    }\n\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public stop() {\n        if (this.pause) {\n            this._playing = false;\n            this.onCarouselPaused.emit(this);\n            this._resetInterval();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _moveTo(slide: IgxSlideComponent, direction: Direction) {\n        if (this._destroyed) {\n            return;\n        }\n\n        slide.direction = direction;\n        slide.active = true;\n\n        if (this._currentSlide) {\n            this._currentSlide.direction = direction;\n            this._currentSlide.active = false;\n        }\n\n        this._currentSlide = slide;\n\n        this.onSlideChanged.emit({ carousel: this, slide });\n        this._restartInterval();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n    /**\n     *@hidden\n     */\n    private _resetInterval() {\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n            this._lastInterval = null;\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _restartInterval() {\n        this._resetInterval();\n\n        if (!isNaN(this.interval) && this.interval > 0) {\n            this._lastInterval = setInterval(() => {\n                const tick = +this.interval;\n                if (this._playing && this.total && !isNaN(tick) && tick > 0) {\n                    this.next();\n                } else {\n                    this.stop();\n                }\n            }, this.interval);\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowright')\n    public onKeydownArrowRight() {\n        this.next();\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowleft')\n    public onKeydownArrowLeft() {\n        this.prev();\n    }\n}\n\n/**\n * A slide component that usually holds an image and/or a caption text.\n * IgxSlideComponent is usually a child component of an IgxCarouselComponent.\n *\n * ```\n * <igx-slide [input bindings] >\n *    <ng-content></ng-content>\n * </igx-slide>\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'igx-slide',\n    template: `<div\n    role=\"listitem\"\n    [class.active]=\"active\"\n    class=\"igx-slide\"\n    [attr.aria-selected]=\"active\"\n    [attr.aria-live]=\"active ? 'polite' : null\"\n    [attr.tabIndex]=\"active ? 0 : null\"\n>\n    <ng-content></ng-content>\n</div>\n`\n})\n\nexport class IgxSlideComponent implements OnInit, OnDestroy {\n\n    /**\n     * Gets/sets the `index` of the slide inside the carousel.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide index = \"1\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public index: number;\n\n    /**\n     * Gets/sets the target `direction` for the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide direction=\"NEXT\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public direction: Direction;\n    /**\n     * Gets/sets the `active` state of the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [active] =\"false\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.active')\n    @Input() public active: boolean;\n\n    constructor(private carousel: IgxCarouselComponent) { }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        this.carousel.add(this);\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this.carousel.remove(this);\n    }\n}\n\nexport interface ISlideEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n/**\n * The `IgxCarouselModule` provides the {@link IgxCarouselComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxCarouselComponent, IgxSlideComponent],\n    exports: [IgxCarouselComponent, IgxSlideComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxCarouselModule {\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum LabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeCheckboxEventArgs {\n    checked: boolean;\n    checkbox: IgxCheckboxComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Checkbox** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/checkbox.html)\n *\n * The Ignite UI Checkbox is a selection control that allows users to make a binary choice. It behaves similarly\n * to the native browser checkbox.\n *\n * Example:\n * ```html\n * <igx-checkbox checked=\"true\">\n *   simple checkbox\n * </igx-checkbox>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent, multi: true }],\n    selector: 'igx-checkbox',\n    preserveWhitespaces: false,\n    template: `<input #checkbox class=\"igx-checkbox__input\"\n    type=\"checkbox\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [tabindex]=\"tabindex\"\n    [disabled]=\"disabled\"\n    [indeterminate]=\"indeterminate\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-labelledby]=\"ariaLabelledBy\"\n    [attr.aria-label]=\"ariaLabel\"\n    (change)=\"_onCheckboxChange($event)\"\n    (click)=\"_onCheckboxClick($event)\"\n    (focus)=\"onFocus($event)\"\n    (blur)=\"onBlur($event)\" />\n\n<label #label class=\"igx-checkbox__composite\"\n    igxRipple\n    igxRippleTarget=\".igx-checkbox__ripple\"\n    [igxRippleDisabled]=\"disableRipple\"\n    [igxRippleCentered]=\"true\"\n    [igxRippleDuration]=\"300\"\n    [attr.for]=\"inputId\">\n    <svg class=\"igx-checkbox__composite-mark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M4.1,12.7 9,17.6 20.3,6.3\" />\n    </svg>\n    <div class=\"igx-checkbox__ripple\"></div>\n</label>\n\n<span #placeholderLabel role=\"label\"\n    [class]=\"labelClass\"\n    [id]=\"labelId\"\n    (click)=\"_onLabelClick($event)\">\n    <ng-content></ng-content>\n</span>\n`\n})\nexport class IgxCheckboxComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.checkbox.checkboxElement;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox') public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.checkbox.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.checkbox.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n    /**\n     * Sets/gets the `id` of the checkbox component.\n     * If not set, the `id` of the first checkbox component will be `\"igx-checkbox-0\"`.\n     * ```html\n     * <igx-checkbox id=\"my-first-checkbox\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let checkboxId =  this.checkbox.id;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-checkbox-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element.\n     * If not set, the id of the `label` in the first checkbox component will be `\"igx-checkbox-0-label\"`.\n     * ```html\n     * <igx-checkbox labelId = \"Label1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelId =  this.checkbox.labelId;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-checkbox [value] = \"'CheckboxValue'\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let value =  this.checkbox.value;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute.\n     * ```html\n     * <igx-checkbox name = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let name =  this.checkbox.name;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-checkbox [tabindex] = \"1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.checkbox.tabindex;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     *  Sets/gets the position of the `label`.\n     *  If not set, the `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-checkbox labelPosition = \"before\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.checkbox.labelPosition;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelPosition: LabelPosition | string = LabelPosition.AFTER;\n    /**\n     * Enables/Disables the ripple effect.\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-checkbox [disableRipple] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.checkbox.desableRipple;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the checkbox is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-checkbox [required] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRequired =  this.checkbox.required;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-checkbox aria-labelledby = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-checkbox aria-label = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabel = this.checkbox.aruaLabel;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the checkbox state is changed.\n     * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.\n     * @memberof IgxCheckboxComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeCheckboxEventArgs> = new EventEmitter<IChangeCheckboxEventArgs>();\n    /**\n     * Returns the class of the checkbox component.\n     * ```typescript\n     * let class =  this.checkbox.cssClass;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox')\n    public cssClass = 'igx-checkbox';\n    /**\n     * Sets/gets whether the checkbox component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.checkbox.focused =  true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.checkbox.focused;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--focused')\n    public focused = false;\n    /**\n     * Sets/gets the checkbox indeterminate visual state.\n     * Default value is `false`;\n     * ```html\n     * <igx-checkbox [indeterminate] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isIndeterminate = this.checkbox.indeterminate;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--indeterminate')\n    @Input() public indeterminate = false;\n    /**\n     * Sets/gets whether the checkbox is checked.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [checked] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isChecked =  this.checkbox.checked;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets whether the checkbox is disabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disabled] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isDesabled = this.checkbox.disabled;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--disabled')\n    @Input() public disabled = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * If `disabled` is `false`, switches the `checked` state.\n     * ```typescript\n     * this.checkbox.toggle();\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.indeterminate = false;\n        this.focused = false;\n        this.checked = !this.checked;\n\n        this.change.emit({ checked: this.checked, checkbox: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxChange(event) {\n        // We have to stop the original checkbox change event\n        // from bubbling up since we emit our own change event\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxClick(event) {\n        // Since the original checkbox is hidden and the label\n        // is used for styling and to change the checked state of the checkbox,\n        // we need to prevent the checkbox click event from bubbling up\n        // as it gets triggered on label click\n        event.stopPropagation();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        // We use a span element as a placeholder label\n        // in place of the native label, we need to emit\n        // the change event separately here alongside\n        // the click event emitted on click\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case LabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case LabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n}\n\nexport const IGX_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]`,\n    providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]\n})\nexport class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator { }\n/**\n *The IgxCheckboxModule provides the {@link IgxCheckboxComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxCheckboxModule { }\n","import {\n    AfterViewInit,\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    Renderer2,\n    TemplateRef\n} from '@angular/core';\nimport { DisplayDensity } from '../core/displayDensity';\nimport {\n    IgxDragDirective,\n    IDragBaseEventArgs,\n    IDragStartEventArgs,\n    IgxDropEnterEventArgs,\n    IgxDropEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\n\n\nexport interface IBaseChipEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipComponent;\n}\n\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\n\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\n\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\n\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n\nlet CHIP_ID = 0;\n\n@Component({\n    selector: 'igx-chip',\n    template: `<div #chipArea class=\"igx-chip__item\"\n    [attr.tabindex]=\"chipTabindex\"\n    (keydown)=\"onChipKeyDown($event)\"\n    [igxDrag]=\"{chip: this}\"\n    [hideBaseOnDrag]=\"true\"\n    [animateOnRelease]=\"true\"\n    [ghostImageClass]=\"ghostClass\"\n    (dragStart)=\"onChipDragStart($event)\"\n    (dragEnd)=\"onChipDragEnd()\"\n    (returnMoveEnd)=\"onChipMoveEnd($event)\"\n    (dragClicked)=\"onChipDragClicked($event)\"\n    igxDrop\n    (onEnter)=\"onChipDragEnterHandler($event)\"\n    (onDrop)=\"onChipDrop($event)\">\n\n    <div [ngClass]=\"selectClass(selected)\" *ngIf=\"selectable\">\n        <ng-container *ngTemplateOutlet=\"selectIconTemplate\"></ng-container>\n    </div>\n\n    <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n\n    <div class=\"igx-chip__content\">\n        <ng-content></ng-content>\n    </div>\n\n    <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n\n    <div class=\"igx-chip__remove\" *ngIf=\"removable\"\n        tabindex=\"0\"\n        (keydown)=\"onRemoveBtnKeyDown($event)\"\n        (pointerdown)=\"onRemoveMouseDown($event)\"\n        (mousedown)=\"onRemoveMouseDown($event)\"\n        (click)=\"onRemoveClick($event)\"\n        (touchmove)=\"onRemoveTouchMove()\"\n        (touchend)=\"onRemoveTouchEnd($event)\">\n        <ng-container *ngTemplateOutlet=\"removeButtonTemplate\"></ng-container>\n    </div>\n</div>\n\n<ng-template #defaultSelectIcon>\n    <igx-icon>done</igx-icon>\n</ng-template>\n\n<ng-template #defaultRemoveIcon>\n    <igx-icon>cancel</igx-icon>\n</ng-template>\n`\n})\nexport class IgxChipComponent {\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-chip-${CHIP_ID++}`;\n\n    /**\n     * An @Input property that stores data related to the chip.\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public data: any;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public draggable = false;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public removable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public removeIcon: TemplateRef<any>;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public selectable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public selectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     */\n    @Input()\n    public set selected(newValue: boolean) {\n        this.changeSelection(newValue);\n    }\n\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    public get selected() {\n        return this._selected;\n    }\n\n    /**\n     * Returns the `IgxChipComponent` theme.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     *     ngAfterViewInit(){\n     *     let chipTheme = this.chip.displayDensity;\n     * }\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity;\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` theme.\n     * Available options are `compact`, `cosy`, `comfortable`.\n     * The default theme is `comfortable`.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [displayDensity]=\"'compact'\"></igx-chip>\n     * ```\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        switch (val) {\n            case 'compact':\n                this._displayDensity = DisplayDensity.compact;\n                break;\n            case 'cosy':\n                this._displayDensity = DisplayDensity.cosy;\n                break;\n            case 'comfortable':\n            default:\n                this._displayDensity = DisplayDensity.comfortable;\n        }\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public set color(newColor) {\n        this.chipArea.nativeElement.style.backgroundColor = newColor;\n    }\n\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    public get color() {\n        return this.chipArea.nativeElement.style.backgroundColor;\n    }\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     * ```typescript\n     * moveStarted(event: IBaseChipEventArgs){\n     *     let movingChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     * ```typescript\n     * moveEnded(event: IBaseChipEventArgs){\n     *     let movedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     * ```typescript\n     * remove(event: IBaseChipEventArgs){\n     *     let removedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onRemove)=\"remove($event)\">\n     * ```\n     */\n    @Output()\n    public onRemove = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     * ```typescript\n     * chipClick(event: IChipClickEventArgs){\n     *     let clickedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onClick)=\"chipClick($event)\">\n     * ```\n     */\n    @Output()\n    public onClick = new EventEmitter<IChipClickEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     * ```typescript\n     * chipSelect(event: IChipSelectEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onSelection)=\"chipSelect($event)\">\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipSelectEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     * ```typescript\n     * chipKeyDown(event: IChipKeyDownEventArgs){\n     *     let keyDown = event.key;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onKeyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    @Output()\n    public onKeyDown = new EventEmitter<IChipKeyDownEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     * ```typescript\n     * chipEnter(event: IChipEnterDragAreaEventArgs){\n     *     let targetChip = event.targetChip;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    @Output()\n    public onDragEnter = new EventEmitter<IChipEnterDragAreaEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [];\n        switch (this._displayDensity) {\n            case DisplayDensity.cosy:\n                classes.push('igx-chip--cosy');\n                break;\n            case DisplayDensity.compact:\n                classes.push('igx-chip--compact');\n                break;\n            default:\n                classes.push('igx-chip');\n        }\n        classes.push(this.disabled ? 'igx-chip--disabled' : '');\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: ElementRef })\n    public chipArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: IgxDragDirective })\n    public dragDir: IgxDragDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRemoveIcon', { read: TemplateRef })\n    public defaultRemoveIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultSelectIcon', { read: TemplateRef })\n    public defaultSelectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get removeButtonTemplate() {\n        return this.removeIcon || this.defaultRemoveIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get selectIconTemplate() {\n        return this.selectIcon || this.defaultSelectIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get ghostClass(): string {\n        switch (this._displayDensity) {\n            case DisplayDensity.cosy:\n                return 'igx-chip__ghost--cosy';\n            case DisplayDensity.compact:\n                return 'igx-chip__ghost--compact';\n            default:\n                return 'igx-chip__ghost';\n        }\n    }\n\n    public get chipTabindex() {\n        return !this.disabled ? 0 : '';\n    }\n\n    protected _displayDensity = DisplayDensity.comfortable;\n    protected _selected = false;\n    protected _selectedItemClass = 'igx-chip__item--selected';\n    protected _movedWhileRemoving = false;\n\n    constructor(public cdr: ChangeDetectorRef, public elementRef: ElementRef, private renderer: Renderer2) { }\n\n    /**\n     * @hidden\n     */\n    public selectClass(condition: boolean): object {\n        const SELECT_CLASS = 'igx-chip__select';\n\n        return {\n            [SELECT_CLASS]: condition,\n            [`${SELECT_CLASS}--hidden`]: !condition\n        };\n    }\n\n    protected changeSelection(newValue: boolean, srcEvent = null) {\n        const onSelectArgs: IChipSelectEventArgs = {\n            originalEvent: srcEvent,\n            owner: this,\n            selected: false,\n            cancel: false\n        };\n\n        if (newValue && !this._selected) {\n            onSelectArgs.selected = true;\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        } else if (!newValue && this._selected) {\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: KeyboardEvent) {\n        const keyDownArgs: IChipKeyDownEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n\n        this.onKeyDown.emit(keyDownArgs);\n        if (keyDownArgs.cancel) {\n            return;\n        }\n\n        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n        }\n\n        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n\n        if (event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveBtnKeyDown(event: KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onRemoveMouseDown(event: PointerEvent | MouseEvent) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveClick(event: MouseEvent | TouchEvent) {\n        this.onRemove.emit({\n            originalEvent: event,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchMove() {\n        // We don't remove chip if user starting touch interacting on the remove button moves the chip\n        this._movedWhileRemoving = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchEnd(event: TouchEvent) {\n        if (!this._movedWhileRemoving) {\n            this.onRemoveClick(event);\n        }\n        this._movedWhileRemoving = false;\n    }\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrag behaviour\n    public onChipDragStart(event: IDragStartEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n        event.cancel = !this.draggable || this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragEnd() {\n        this.dragDir.dropFinished();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipMoveEnd(event: IDragBaseEventArgs) {\n        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n\n        if (this.selected) {\n            this.chipArea.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragClicked(event: IDragBaseEventArgs) {\n        const clickEventArgs: IChipClickEventArgs = {\n            originalEvent: event.originalEvent,\n            owner: this,\n            cancel: false\n        };\n        this.onClick.emit(clickEventArgs);\n\n        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event.originalEvent);\n        }\n    }\n    // End chip igxDrag behaviour\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrop behaviour\n    public onChipDragEnterHandler(event: IgxDropEnterEventArgs) {\n        if (this.dragDir === event.drag || !event.dragData || !event.dragData.chip) {\n            return;\n        }\n\n        const eventArgs: IChipEnterDragAreaEventArgs = {\n            owner: this,\n            dragChip: event.dragData.chip,\n            originalEvent: event\n        };\n        this.onDragEnter.emit(eventArgs);\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDrop(event: IgxDropEventArgs) {\n        // Cancel the default drop logic\n        event.cancel = true;\n    }\n    // End chip igxDrop behaviour\n}\n","import {\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    DoCheck,\n    AfterViewInit,\n    OnDestroy,\n    ElementRef\n} from '@angular/core';\nimport {\n    IgxChipComponent,\n    IChipSelectEventArgs,\n    IChipKeyDownEventArgs,\n    IChipEnterDragAreaEventArgs,\n    IBaseChipEventArgs\n} from './chip.component';\nimport {\n    IgxDropEnterEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/internal/Subject';\n\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipsAreaComponent;\n}\n\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\n\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n\n@Component({\n    selector: 'igx-chips-area',\n    template: `<ng-content></ng-content>\n`,\n})\nexport class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass() {\n        const classes = ['igx-chip-area'];\n        classes.push(this.class);\n\n        return classes.join(' ');\n    }\n\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.width.px')\n    @Input()\n    public width: number;\n\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.height.px')\n    @Input()\n    public height: number;\n\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public changedOrder(event: IChipsAreaReorderEventArgs){\n     *      let chips: IgxChipComponent[] = event.chipsArray;\n     * }\n     * ```\n     */\n    @Output()\n    public onReorder = new EventEmitter<IChipsAreaReorderEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public selection(event: IChipsAreaSelectEventArgs){\n     *      let selectedChips: IgxChipComponent[] = event.newSelection;\n     * }\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipsAreaSelectEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveStart(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveEnd(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    @ContentChildren(IgxChipComponent)\n    public chipsList: QueryList<IgxChipComponent>;\n\n    private modifiedChipsArray: IgxChipComponent[];\n    private _differ: IterableDiffer<IgxChipComponent> | null = null;\n    private selectedChips: IgxChipComponent[] = [];\n    protected destroy$ = new Subject<boolean>();\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef,\n        private _iterableDiffers: IterableDiffers) {\n        this._differ = this._iterableDiffers.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.\n        if (this.chipsList.length) {\n            this.selectedChips = this.chipsList.filter((item: IgxChipComponent) => item.selected);\n            if (this.selectedChips.length) {\n                this.onSelection.emit({\n                    originalEvent: null,\n                    newSelection: this.selectedChips,\n                    owner: this\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this.chipsList) {\n            const changes = this._differ.diff(this.chipsList.toArray());\n            if (changes) {\n                changes.forEachAddedItem((addedChip) => {\n                    addedChip.item.onMoveStart.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveStart(args);\n                    });\n                    addedChip.item.onMoveEnd.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveEnd(args);\n                    });\n                    addedChip.item.onDragEnter.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipDragEnter(args);\n                    });\n                    addedChip.item.onKeyDown.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipKeyDown(args);\n                    });\n                    if (addedChip.item.selectable) {\n                        addedChip.item.onSelection.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                            this.onChipSelectionChange(args);\n                        });\n                    }\n                });\n                this.modifiedChipsArray = this.chipsList.toArray();\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs) {\n        let orderChanged = false;\n        const chipsArray = this.chipsList.toArray();\n        const dragChipIndex = chipsArray.findIndex((el) => el === event.owner);\n        if (event.originalEvent.shiftKey === true) {\n            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);\n                if (orderChanged) {\n                    setTimeout(() => {\n                        this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();\n                    });\n                }\n            } else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);\n            }\n        } else {\n            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {\n                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();\n            } else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&\n                dragChipIndex < chipsArray.length - 1) {\n                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs) {\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs) {\n        const dropChipRect = event.owner.elementRef.nativeElement.getBoundingClientRect();\n        const dropChipIndex = this.chipsList.toArray().findIndex((el) => el === event.owner);\n        const dragChipIndex = this.chipsList.toArray().findIndex((el) => el === event.dragChip);\n        if (dragChipIndex < dropChipIndex) {\n            // from the left to right\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);\n        } else {\n            // from the right to left\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected positionChipAtIndex(chipIndex, targetIndex, shiftRestLeft, originalEvent) {\n        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||\n            targetIndex < 0 || this.chipsList.length <= targetIndex) {\n            return false;\n        }\n\n        const chipsArray = this.chipsList.toArray();\n        const result: IgxChipComponent[] = [];\n        for (let i = 0; i < chipsArray.length; i++) {\n            if (shiftRestLeft) {\n                if (chipIndex <= i && i < targetIndex) {\n                    result.push(chipsArray[i + 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            } else {\n                if (targetIndex < i && i <= chipIndex) {\n                    result.push(chipsArray[i - 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            }\n        }\n        this.modifiedChipsArray = result;\n\n        const eventData: IChipsAreaReorderEventArgs = {\n            chipsArray: this.modifiedChipsArray,\n            originalEvent: originalEvent,\n            owner: this\n        };\n        this.onReorder.emit(eventData);\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs) {\n        if (event.selected) {\n            this.selectedChips.push(event.owner);\n        } else if (!event.selected) {\n            this.selectedChips = this.selectedChips.filter((chip) => {\n                return chip.id !== event.owner.id;\n            });\n        }\n        this.onSelection.emit({\n            originalEvent: event.originalEvent,\n            newSelection: this.selectedChips,\n            owner: this\n        });\n    }\n}\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-prefix,[igxPrefix]'\n})\nexport class IgxPrefixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxPrefixDirective],\n    exports: [IgxPrefixDirective]\n})\nexport class IgxPrefixModule { }\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-suffix,[igxSuffix]'\n})\nexport class IgxSuffixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSuffixDirective],\n    exports: [IgxSuffixDirective]\n})\nexport class IgxSuffixModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxChipComponent } from './chip.component';\nimport { IgxChipsAreaComponent } from './chips-area.component';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxPrefixModule, IgxPrefixDirective} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule, IgxSuffixDirective } from '../directives/suffix/suffix.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxChipsAreaComponent,\n    IgxChipComponent\n  ],\n  exports: [\n    IgxChipsAreaComponent,\n    IgxChipComponent,\n    IgxPrefixDirective,\n    IgxSuffixDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule,\n    IgxDragDropModule,\n    IgxPrefixModule,\n    IgxSuffixModule\n  ]\n})\nexport class IgxChipsModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeader]'\n})\nexport class IgxComboHeaderDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboFooter]'\n})\nexport class IgxComboFooterDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboItem]'\n})\nexport class IgxComboItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboEmpty]'\n})\nexport class IgxComboEmptyDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeaderItem]'\n})\n\nexport class IgxComboHeaderItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboAddItem]'\n})\nexport class IgxComboAddItemDirective {\n}\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string,  Set<any>> = new Map<string, Set<any>>();\n\n    /**\n     * Get current component selection.\n     * @param componentID ID of the component.\n     */\n    public get(componentID: string): Set<any> {\n        return this.selection.get(componentID);\n    }\n\n    /**\n     * Set new component selection.\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    public set(componentID: string, newSelection: Set<any>) {\n        if (!componentID) {\n            throw Error('Invalid value for component id!');\n        }\n        this.selection.set(componentID, newSelection);\n    }\n\n    /**\n     * Clears selection for component.\n     * @param componentID ID of the component.\n     */\n    public clear(componentID: string) {\n        this.selection.set(componentID, this.get_empty());\n    }\n\n    /**\n     * Get current component selection length.\n     * @param componentID ID of the component.\n     */\n    public size(componentID: string): number {\n        const sel = this.get(componentID);\n        return sel ? sel.size : 0;\n    }\n\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    public add_item(componentID: string, itemID, sel?: Set<any>): Set<any> {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            sel = this.get_empty();\n        }\n        if (!itemID && itemID !== 0) {\n            throw Error('Invalid value for item id!');\n        }\n        sel.add(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    public add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any> {\n        let selection: Set<any>;\n        if (clearSelection) {\n            selection = this.get_empty();\n        }\n        itemIDs.forEach((item) => selection = this.add_item(componentID, item, selection));\n        return selection;\n    }\n\n    /**\n     * Add item to the current component selection.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    public select_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.add_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Add items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    public select_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.add_items(componentID, itemID, clearSelection));\n    }\n\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    public delete_item(componentID: string, itemID, sel?: Set<any>) {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            return;\n        }\n        sel.delete(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    public delete_items(componentID: string, itemIDs: any[]): Set<any> {\n        let selection: Set<any>;\n        itemIDs.forEach((deselectedItem) => selection = this.delete_item(componentID, deselectedItem, selection));\n        return selection;\n    }\n\n    /**\n     * Remove item from the current component selection.\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    public deselect_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.delete_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Remove items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    public deselect_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.delete_items(componentID, itemID));\n    }\n\n    /**\n     * Check if the item is selected in the component selection.\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    public is_item_selected(componentID: string, itemID): boolean {\n        const sel = this.get(componentID);\n        if (!sel) {\n            return false;\n        }\n        return sel.has(itemID);\n    }\n\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    public first_item(componentID: string) {\n        const sel = this.get(componentID);\n        if (sel && sel.size > 0) {\n            return sel.values().next().value;\n       }\n    }\n\n    /**\n     * Returns whether all items are selected.\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    public are_all_selected(componentID: string, dataCount: number): boolean {\n        return this.size(componentID) === dataCount;\n    }\n\n    /**\n     * Returns whether any of the items is selected.\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    public are_none_selected(componentID: string): boolean {\n        return this.size(componentID) === 0;\n    }\n\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    public get_all_ids(data, primaryKey?) {\n        return primaryKey ? data.map((x) => x[primaryKey]) : data;\n    }\n\n    /**\n     * Returns empty selection collection.\n     * @returns empty set.\n    */\n    public get_empty() {\n        return new Set();\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    DoCheck\n} from '@angular/core';\nimport { IgxDropDownComponent, ISelectionEventArgs } from './drop-down.component';\n\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n\nexport class IgxDropDownItemBase {\n\n    /**\n     * @hidden\n     */\n    protected _isFocused = false;\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        return;\n    }\n\n    /**\n     * Gets/sets the value of the item if the item is databound\n     *\n     * ```typescript\n     * // usage in IgxDropDownItemComponent\n     * // get\n     * let mySelectedItemValue = this.dropdown.selectedItem.value;\n     *\n     * // set\n     * let mySelectedItem = this.dropdown.selectedItem;\n     * mySelectedItem.value = { id: 123, name: 'Example Name' }\n     *\n     * // usage in IgxComboItemComponent\n     * // get\n     * let myComboItemValue = this.combo.items[0].value;\n     * ```\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drop-down__item')\n    get itemStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.isSelected; // true\n     * ```\n     */\n    get isSelected() {\n        return this.dropDown.selectedItem === this;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-drop-down__item--selected')\n    get selectedStyle(): boolean {\n        return this.isSelected;\n    }\n\n    /**\n     * Sets/gets if the given item is focused\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemFocused = mySelectedItem.isFocused;\n     * ```\n     */\n    @HostBinding('class.igx-drop-down__item--focused')\n    get isFocused() {\n        return this._isFocused;\n    }\n\n    /**\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" isFocused={{!item.isFocused}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    set isFocused(value: boolean) {\n        if (this.disabled || this.isHeader) {\n            this._isFocused = false;\n            return;\n        }\n\n        if (this.dropDown.allowItemsFocus && value && !this.dropDown.collapsed) {\n            this.elementRef.nativeElement.focus({ preventScroll: true });\n        }\n        this._isFocused = value;\n    }\n\n    /**\n     * Sets/gets if the given item is header\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemHeader = mySelectedItem.isHeader;\n     * ```\n     *\n     * ```html\n     *  <!--set-->\n     *  <igx-dropdown-item *ngFor=\"let item of items\">\n     *      <div *ngIf=\"items.indexOf(item) === 5; then item.isHeader = true\">\n     *          {{item.field}}\n*           </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__header')\n    public isHeader = false;\n\n    /**\n     * Sets/gets if the given item is disabled\n     *\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let myItemIsDisabled = mySelectedItem.disabled;\n     * ```\n     *\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{!item.disabled}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__item--disabled')\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    get setTabIndex() {\n        const shouldSetTabIndex = this.dropDown.allowItemsFocus && !(this.disabled || this.isHeader);\n        if (shouldSetTabIndex) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Gets item index\n     * @hidden\n     */\n    public get index(): number {\n        return this.dropDown.items.indexOf(this);\n    }\n\n    /**\n     * Gets item element height\n     * @hidden\n     */\n    public get elementHeight(): number {\n        return this.elementRef.nativeElement.clientHeight;\n    }\n\n    /**\n     * Get item html element\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef;\n    }\n\n    constructor(\n        public dropDown: any,\n        protected elementRef: ElementRef\n    ) { }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.isFocused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.elementRef.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        this.dropDown.navigateItem(this.index);\n        this.dropDown.selectItem(this, event);\n    }\n\n    /**\n     * @hidden\n     */\n    markItemSelected() {\n        this.dropDown.setSelectedItem(this.index);\n        this.dropDown.close();\n    }\n}\n\n@Component({\n    selector: 'igx-drop-down-item',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxDropDownItemComponent extends IgxDropDownItemBase implements DoCheck {\n    /**\n     * @hidden\n     */\n    protected _isSelected = false;\n\n    constructor(\n        @Inject(forwardRef(() => IgxDropDownComponent)) public dropDown: IgxDropDownComponent,\n        protected elementRef: ElementRef\n    ) {\n        super(dropDown, elementRef);\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.isSelected; // true\n     * ```\n     */\n    get isSelected() {\n        return this._isSelected;\n    }\n    @Input()\n    set isSelected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n\n        this._isSelected = value;\n    }\n\n    ngDoCheck(): void {\n        if (this.isSelected) {\n            const dropDownSelectedItem = this.dropDown.selectedItem;\n            if (!dropDownSelectedItem || this !== dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            }\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgModule,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChild,\n    Self,\n    Optional,\n    HostListener,\n    Directive,\n    Inject\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxToggleDirective, IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownItemComponent, IgxDropDownItemBase } from './drop-down-item.component';\nimport { OverlaySettings } from '../services';\nimport { IToggleView } from '../core/navigation';\nimport { IgxComboDropDownComponent } from '../combo/combo-dropdown.component';\nimport { CancelableEventArgs } from '../core/utils';\n\nlet NEXT_ID = 0;\n\n/**\n * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.\n *\n * @export\n */\nexport interface ISelectionEventArgs extends CancelableEventArgs {\n    oldSelection: IgxDropDownItemBase;\n    newSelection: IgxDropDownItemBase;\n}\n\n/** @hidden */\nexport enum Navigate {\n    Up = -1,\n    Down = 1\n}\n\n\nexport class IgxDropDownBase implements OnInit, IToggleView {\n    private _initiallySelectedItem: IgxDropDownItemComponent = null;\n    protected _focusedItem: any = null;\n    private _width;\n    private _height;\n    private _id = `igx-drop-down-${NEXT_ID++}`;\n\n    @ContentChildren(forwardRef(() => IgxDropDownItemComponent))\n    protected children: QueryList<IgxDropDownItemBase>;\n\n    @ViewChild(IgxToggleDirective)\n    protected toggleDirective: IgxToggleDirective;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<ISelectionEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     *  Gets the width of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentWidth = this.dropdown.width;\n     * ```\n     */\n    @Input()\n    get width() {\n        return this._width;\n    }\n    /**\n     * Sets the width of the drop down\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [width]='160px'></igx-drop-down>\n     * ```\n     */\n    set width(value) {\n        this._width = value;\n        this.toggleDirective.element.style.width = value;\n    }\n\n    /**\n     * Gets the height of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentHeight = this.dropdown.height;\n     * ```\n     */\n    @Input()\n    get height() {\n        return this._height;\n    }\n    /**\n     * Sets the height of the drop down\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [height]='400px'></igx-drop-down>\n     * ```\n     */\n    set height(value) {\n        this._height = value;\n        this.toggleDirective.element.style.height = value;\n    }\n\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public allowItemsFocus = false;\n\n    /**\n     * Gets the drop down's id\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentId = this.dropdown.id;\n     * ```\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n    /**\n     * Sets the drop down's id\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>\n     * ```\n     */\n    set id(value: string) {\n        this.selection.set(value, this.selection.get(this.id));\n        this._id = value;\n        this.toggleDirective.id = value;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.toggleDirective.collapsed;\n    }\n\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    public get selectedItem(): any {\n        const selectedItem = this.selection.first_item(this.id);\n        if (selectedItem) {\n            if (selectedItem.isSelected) {\n                return selectedItem;\n            }\n            this.selection.clear(this.id);\n        }\n        return null;\n    }\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxDropDownItemBase[] {\n        const items: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * Get all header items\n     *\n     * ```typescript\n     * let myDropDownHeaderItems = this.dropdown.headers;\n     * ```\n     */\n    public get headers(): IgxDropDownItemBase[] {\n        const headers: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Get dropdown html element\n     *\n     * ```typescript\n     * let myDropDownElement = this.dropdown.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Get dropdown's html element of it scroll container\n     */\n    protected get scrollContainer() {\n        return this.toggleDirective.element;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService) { }\n\n    /**\n     * Select an item by index\n     * @param index of the item to select\n     */\n    setSelectedItem(index: number) {\n        if (index < 0 || index >= this.items.length) {\n            return;\n        }\n\n        const newSelection = this.items.find((item) => item.index === index);\n        if (newSelection.isHeader) {\n            return;\n        }\n\n        this.changeSelectedItem(newSelection);\n    }\n\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    open(overlaySettings?: OverlaySettings) {\n        this.toggleDirective.open(overlaySettings);\n    }\n\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    close() {\n        this.toggleDirective.close();\n    }\n\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    toggle(overlaySettings?: OverlaySettings) {\n        if (this.toggleDirective.collapsed) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get focusedItem() {\n        return this._focusedItem;\n    }\n\n    /**\n     * @hidden\n     */\n    public set focusedItem(item) {\n        this._focusedItem = item;\n    }\n\n    /**\n     * @hidden\n     */\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this._focusedItem.index;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        this.navigateItem(newIndex, direction);\n    }\n\n    /**\n     * @hidden\n     */\n    navigateFirst() {\n        this.navigate(Navigate.Down, -1);\n    }\n\n    /**\n     * @hidden\n     */\n    navigateLast() {\n        this.navigate(Navigate.Up, this.items.length);\n    }\n\n    /**\n     * @hidden\n     */\n    navigateNext() {\n        this.navigate(Navigate.Down);\n    }\n\n    /**\n     * @hidden\n     */\n    navigatePrev() {\n        this.navigate(Navigate.Up);\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.toggleDirective.id = this.id;\n        this.selection.clear(this.id);\n    }\n\n\n    /**\n     * @hidden\n     */\n    onToggleOpening(e: CancelableEventArgs) {\n        const eventArgs = { cancel: false };\n        this.onOpening.emit(eventArgs);\n        e.cancel = eventArgs.cancel;\n        if (eventArgs.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleOpened() {\n        this._initiallySelectedItem = this.selectedItem;\n        this._focusedItem = this.selectedItem;\n        if (this._focusedItem) {\n            this._focusedItem.isFocused = true;\n        } else if (this.allowItemsFocus) {\n            const firstItemIndex = this.getNearestSiblingFocusableItemIndex(-1, Navigate.Down);\n            if (firstItemIndex !== -1) {\n                this.navigateItem(firstItemIndex);\n            }\n        }\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleClosing(e: CancelableEventArgs) {\n        const eventArgs = { cancel: false };\n        this.onClosing.emit(eventArgs);\n        e.cancel = eventArgs.cancel;\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleClosed() {\n        if (this._focusedItem) {\n            this._focusedItem.isFocused = false;\n        }\n\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollToItem(item: IgxDropDownItemBase) {\n        const itemPosition = this.calculateScrollPosition(item);\n        this.scrollContainer.scrollTop = (itemPosition);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollToHiddenItem(newItem: IgxDropDownItemBase) {\n        const elementRect = newItem.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        if (parentRect.top > elementRect.top) {\n            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);\n        }\n\n        if (parentRect.bottom < elementRect.bottom) {\n            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectItem(item: IgxDropDownItemBase, event?) {\n        if (item === null) {\n            return;\n        }\n        this.changeSelectedItem(item);\n\n        if (event) {\n            this.toggleDirective.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected changeSelectedItem(newSelection?: IgxDropDownItemBase): boolean {\n        const oldSelection = this.selectedItem;\n        if (!newSelection) {\n            newSelection = this._focusedItem;\n        }\n\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n        if (!args.cancel) {\n            this.selection.set(this.id, new Set([newSelection]));\n        }\n\n        return !args.cancel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateScrollPosition(item: IgxDropDownItemBase): number {\n        if (!item) {\n            return 0;\n        }\n\n        const elementRect = item.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        const scrollDelta = parentRect.top - elementRect.top;\n        let scrollPosition = this.scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = this.scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += item.elementHeight / 2;\n\n        return Math.floor(scrollPosition);\n    }\n\n    private getNearestSiblingFocusableItemIndex(startIndex: number, direction: Navigate): number {\n        let index = startIndex;\n        while (this.items[index + direction] && this.items[index + direction].disabled) {\n            index += direction;\n        }\n\n        index += direction;\n        if (index >= 0 && index < this.items.length) {\n            return index;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected navigateItem(newIndex: number, direction?: Navigate) {\n        if (newIndex !== -1) {\n            const oldItem = this._focusedItem;\n            const newItem = this.items[newIndex];\n            if (oldItem) {\n                oldItem.isFocused = false;\n            }\n            this._focusedItem = newItem;\n            this.scrollToHiddenItem(newItem);\n            this._focusedItem.isFocused = true;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxDropDownItemNavigation]'\n})\nexport class IgxDropDownItemNavigationDirective {\n\n    private _target;\n\n    constructor(private element: ElementRef,\n        @Inject(forwardRef(() => IgxDropDownComponent)) @Self() @Optional() public dropdown: IgxDropDownComponent) { }\n\n    /**\n     * @hidden\n     */\n    get target() {\n        return this._target;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input('igxDropDownItemNavigation')\n    set target(target: IgxDropDownBase) {\n        this._target = target ? target : this.dropdown;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        if (event) {\n            const key = event.key.toLowerCase();\n            if (!this.target.collapsed) { // If dropdown is opened\n                const navKeys = ['esc', 'escape', 'enter', 'tab', 'space', 'spacebar', ' ',\n            'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];\n                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            } else { // If dropdown is closed, do nothing\n                return;\n            }\n            switch (key) {\n                case 'esc':\n                case 'escape':\n                    this.onEscapeKeyDown(event);\n                    break;\n                case 'enter':\n                case 'tab':\n                    this.onEnterKeyDown(event);\n                    break;\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                    this.onSpaceKeyDown(event);\n                    break;\n                case 'arrowup':\n                case 'up':\n                    this.onArrowUpKeyDown(event);\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    this.onArrowDownKeyDown(event);\n                    break;\n                case 'home':\n                    this.onHomeKeyDown(event);\n                    break;\n                case 'end':\n                    this.onEndKeyDown(event);\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    onEscapeKeyDown(event) {\n        this.target.close();\n    }\n\n    /**\n     * @hidden\n     */\n    onSpaceKeyDown(event) {\n        // V.S. : IgxDropDownComponent.selectItem needs event to be true in order to close DD as per specification\n        this.target.selectItem(this.target.focusedItem, this.target instanceof IgxDropDownComponent);\n    }\n\n    /**\n     * @hidden\n     */\n    onEnterKeyDown(event) {\n        if (!(this.target instanceof IgxDropDownComponent)) {\n            if (this.target.focusedItem.value === 'ADD ITEM') {\n                const targetC = this.target as IgxComboDropDownComponent;\n                targetC.combo.addItemToCollection();\n            } else {\n                this.target.close();\n            }\n            return;\n        }\n        this.target.selectItem(this.target.focusedItem, event);\n    }\n\n    /**\n     * @hidden\n     */\n    onArrowDownKeyDown(event) {\n        this.target.navigateNext();\n    }\n\n    /**\n     * @hidden\n     */\n    onArrowUpKeyDown(event) {\n        this.target.navigatePrev();\n    }\n\n    /**\n     * @hidden\n     */\n    onEndKeyDown(event) {\n        this.target.navigateLast();\n    }\n\n    /**\n     * @hidden\n     */\n    onHomeKeyDown(event) {\n        this.target.navigateFirst();\n    }\n}\n\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop-down.html)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Component({\n    selector: 'igx-drop-down',\n    template: `<div class=\"igx-drop-down\">\n    <div class=\"igx-drop-down__list\" igxToggle (onOpening)=\"onToggleOpening($event)\" (onOpened)=\"onToggleOpened()\" (onClosing)=\"onToggleClosing($event)\" (onClosed)=\"onToggleClosed()\">\n        <ng-container *ngIf=\"!collapsed\">\n            <ng-content></ng-content>\n        </ng-container>\n    </div>\n</div>`\n})\nexport class IgxDropDownComponent extends IgxDropDownBase {\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService) {\n        super(elementRef, cdr, selection);\n    }\n\n    protected changeSelectedItem(newSelection?: IgxDropDownItemComponent): boolean {\n        const oldSelection = this.selectedItem;\n        const selectionChanged = super.changeSelectedItem(newSelection);\n\n        if (selectionChanged) {\n            if (oldSelection) {\n                oldSelection.isSelected = false;\n            }\n            if (newSelection) {\n                newSelection.isSelected = true;\n            }\n        }\n\n        return selectionChanged;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownItemNavigationDirective],\n    exports: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownItemNavigationDirective],\n    imports: [CommonModule, IgxToggleModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxDropDownModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nenum IgxHintPosition {\n    START,\n    END\n}\n\n@Directive({\n    selector: 'igx-hint,[igxHint]'\n})\nexport class IgxHintDirective implements OnInit {\n    private _position: IgxHintPosition = IgxHintPosition.START;\n    /**\n     * Sets/gets whether the hint position is at the start.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionStart = true;\n     * ```\n     * ```typescript\n     * let isHintPositionStart = this.igxHint.isPositionStart;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--start')\n    public isPositionStart = false;\n    /**\n     * Sets/gets whether the hint position is at the end.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionEnd = true;\n     * ```\n     * ```typescript\n     * let isHintPositionEnd = this.igxHint.isPositionEnd;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--end')\n    public isPositionEnd = false;\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     * Sets the position of the hint.\n     * ```html\n     * <igx-input-group>\n     *  <input igxInput type=\"text\"/>\n     *  <igx-hint #hint [position]=\"'start'\">IgxHint displayed at the start</igx-hint>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @Input('position')\n    set position(value: string) {\n        const position: IgxHintPosition = (IgxHintPosition as any)[value.toUpperCase()];\n        if (position !== undefined) {\n            this._position = position;\n            this._applyPosition(this._position);\n        }\n    }\n    /**\n     * Gets the position of the hint.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * let hintPosition =  this.igxHint.position;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    get position() {\n        return this._position.toString();\n    }\n    /**\n     *@hidden\n     */\n    ngOnInit() {\n        this._applyPosition(this._position);\n    }\n\n    private _applyPosition(position: IgxHintPosition) {\n        this.isPositionStart = this.isPositionEnd = false;\n        switch (position) {\n            case IgxHintPosition.START:\n                this.isPositionStart = true;\n                break;\n            case IgxHintPosition.END:\n                this.isPositionEnd = true;\n                break;\n            default: break;\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { IgxInputGroupComponent } from '../../input-group/input-group.component';\n\nconst nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];\n\nexport enum IgxInputState {\n    INITIAL,\n    VALID,\n    INVALID\n}\n\n@Directive({\n    selector: '[igxInput]'\n})\nexport class IgxInputDirective implements AfterViewInit, OnDestroy {\n    private _valid = IgxInputState.INITIAL;\n    private _statusChanges$: Subscription;\n\n    constructor(\n        @Inject(forwardRef(() => IgxInputGroupComponent))\n        public inputGroup: IgxInputGroupComponent,\n        @Optional() @Self() @Inject(NgModel) protected ngModel: NgModel,\n        @Optional() @Self() @Inject(FormControlName) protected formControl: FormControlName,\n        protected element: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    private get ngControl(): NgControl {\n        return this.ngModel ? this.ngModel : this.formControl;\n    }\n    /**\n     * Sets the `value` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input('value')\n    set value(value: any) {\n        this.nativeElement.value = value;\n    }\n    /**\n     * Gets the `value` propery.\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let inputValue = this.igxInput.value;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     * Sets the `disabled` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set disabled(value: boolean) {\n        this.nativeElement.disabled = value;\n        this.inputGroup.disabled = value;\n    }\n    /**\n     * Gets the `disabled` property\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let isDisabled = this.igxInput.disabled;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get disabled() {\n        return this.nativeElement.hasAttribute('disabled');\n    }\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__input')\n    public isInput = false;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__textarea')\n    public isTextArea = false;\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.inputGroup.isFocused = true;\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.inputGroup.isFocused = false;\n        this._valid = IgxInputState.INITIAL;\n        if (this.ngControl) {\n            if (!this.ngControl.valid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        } else if (this._hasValidators() && !this.nativeElement.checkValidity()) {\n            this._valid = IgxInputState.INVALID;\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('input')\n    public onInput() {\n        if (!this.ngControl && this._hasValidators()) {\n            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;\n        }\n    }\n    /**\n     *@hidden\n     */\n    ngAfterViewInit() {\n        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');\n        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');\n        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');\n\n        // Also check the control's validators for required\n        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {\n            const validation = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = validation && validation.required;\n        }\n\n\n        const elTag = this.nativeElement.tagName.toLowerCase();\n        if (elTag === 'textarea') {\n            this.isTextArea = true;\n        } else {\n            this.isInput = true;\n        }\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this.cdr.detectChanges();\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n    /**\n     * Sets a focus on the igxInput.\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public focus() {\n        this.nativeElement.focus();\n    }\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    protected onStatusChanged() {\n        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {\n            if (this.ngControl.control.touched || this.ngControl.control.dirty) {\n                if (this.inputGroup.isFocused) {\n                    // the user is still typing in the control\n                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n                } else {\n                    // the user had touched the control previosly but now the value is changing due to changes in the form\n                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n                }\n            } else if (this._valid !== IgxInputState.INITIAL) {\n                this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            } else if (this._valid === IgxInputState.INITIAL && this.ngControl.value !== undefined && this.ngControl.invalid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        }\n    }\n    /**\n     * Gets whether the igxInput is required.\n     * ```typescript\n     * let isRequired = this.igxInput.required;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get required() {\n        return this.nativeElement.hasAttribute('required');\n    }\n    /**\n     * Gets whether the igxInput has a placeholder.\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get hasPlaceholder() {\n        return this.nativeElement.hasAttribute('placeholder');\n    }\n    /**\n     * Gets the placeholder element of the igxInput.\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get placeholder() {\n        return this.nativeElement.placeholder;\n    }\n\n    private _hasValidators(): boolean {\n        for (const nativeValidationAttribute of nativeValidationAttributes) {\n            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {\n                return true;\n            }\n        }\n\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n    /**\n     * Gets whether the igxInput is focused.\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get focused() {\n        return this.inputGroup.isFocused;\n    }\n    /**\n     * Gets the state of the igxInput.\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get valid(): IgxInputState {\n        return this._valid;\n    }\n    /**\n     * Sets the state of the igxInput.\n     * ```typescript\n     * this.igxInput.valid = IgxInputState.INVALID;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public set valid(value: IgxInputState) {\n        this._valid = value;\n    }\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxLabel]'\n})\nexport class IgxLabelDirective {\n    @HostBinding('class.igx-input-group__label')\n    public defaultClass = true;\n}\n","import { InjectionToken, Input } from '@angular/core';\n\n/**\n * Defines the posible values of the components' display density.\n */\nexport const enum DisplayDensity {\n    comfortable = 'comfortable',\n    cosy = 'cosy',\n    compact = 'compact'\n}\n\n/**\n * Describes the object used to configure the DisplayDensity in Angular DI.\n */\nexport interface IDisplayDensity {\n    displayDensity: DisplayDensity;\n}\n\n/**\n * Defines the DisplayDensity DI token.\n */\nexport const DisplayDensityToken = new InjectionToken<IDisplayDensity>('DisplayDensity');\n\n/**\n * Base class containing all logic required for implementing DisplayDensity.\n */\nexport class DisplayDensityBase {\n    protected _displayDensity: DisplayDensity | string;\n\n    /**\n     * Returns the theme of the component.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let componentTheme = this.component.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity;\n    }\n\n    /**\n     * Sets the theme of the component.\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        switch (val) {\n            case 'compact':\n                this._displayDensity = DisplayDensity.compact;\n                break;\n            case 'cosy':\n                this._displayDensity = DisplayDensity.cosy;\n                break;\n            case 'comfortable':\n            default:\n                this._displayDensity = DisplayDensity.comfortable;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    protected isCosy(): boolean {\n        return this._displayDensity === DisplayDensity.cosy ||\n            (!this._displayDensity && this.displayDensityOptions && this.displayDensityOptions.displayDensity === DisplayDensity.cosy);\n    }\n\n    /**\n     *@hidden\n     */\n    protected isComfortable(): boolean {\n        return this._displayDensity === DisplayDensity.comfortable ||\n            (!this._displayDensity && (!this.displayDensityOptions ||\n             this.displayDensityOptions.displayDensity === DisplayDensity.comfortable));\n    }\n\n    /**\n     *@hidden\n     */\n    protected isCompact(): boolean {\n        return this._displayDensity === DisplayDensity.compact ||\n            (!this._displayDensity && this.displayDensityOptions && this.displayDensityOptions.displayDensity === DisplayDensity.compact);\n    }\n\n    constructor(protected displayDensityOptions: IDisplayDensity) {}\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    QueryList,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxPrefixDirective, IgxPrefixModule} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixDirective, IgxSuffixModule } from '../directives/suffix/suffix.directive';\nimport { DisplayDensity, IDisplayDensity, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\n\nlet NEXT_ID = 0;\n\nenum IgxInputGroupType {\n    LINE,\n    BOX,\n    BORDER,\n    SEARCH\n}\n\n@Component({\n    selector: 'igx-input-group',\n    template: `<div class=\"igx-input-group__wrapper\" *ngIf=\"isTypeBox; else bundle\">\n    <ng-container *ngTemplateOutlet=\"bundle\"></ng-container>\n</div>\n<div class=\"igx-input-group__hint\" *ngIf=\"hasHints\">\n    <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n</div>\n<ng-template #bundle>\n    <div class=\"igx-input-group__bundle\">\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n        <div class=\"igx-input-group__bundle-main\">\n            <ng-content select=\"[igxLabel]\"></ng-content>\n            <ng-content select=\"[igxInput]\"></ng-content>\n        </div>\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n    </div>\n    <div class=\"igx-input-group__border\" *ngIf=\"hasBorder\"></div>\n</ng-template>\n`\n})\nexport class IgxInputGroupComponent extends DisplayDensityBase {\n    private _type = IgxInputGroupType.LINE;\n    private _filled = false;\n    private _supressInputAutofocus = false;\n\n    /**\n     * An ElementRef property of the `IgxInputGroupComponent`.\n     */\n    public element: ElementRef;\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-input-group [id]=\"'igx-input-group-55'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-input-group-${NEXT_ID++}`;\n\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     *```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *this.inputGroup.defaultClass = false;\n     *```\n     *}\n     */\n    @HostBinding('class.igx-input-group')\n    public defaultClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--placeholder')\n    public hasPlaceholder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--required')\n    public isRequired = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--focused')\n    public isFocused = false;\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--box')\n    public isBox = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--border')\n    public isBorder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--search')\n    public isSearch = false;\n\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('class.igx-input-group--disabled')\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.input.valid === IgxInputState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.input.valid === IgxInputState.INVALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--warning')\n    public hasWarning = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxHintDirective, { read: IgxHintDirective })\n    protected hints: QueryList<IgxHintDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this._supressInputAutofocus) {\n            this.input.focus();\n        }\n    }\n\n    /**\n     * An @Input property that sets how the input will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `line`.\n     * ```html\n     *<igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    @Input('type')\n    set type(value: string) {\n        const type: IgxInputGroupType = (IgxInputGroupType as any)[value.toUpperCase()];\n        if (type !== undefined) {\n            this.isBox = this.isBorder = this.isSearch = false;\n            switch (type) {\n                case IgxInputGroupType.BOX:\n                    this.isBox = true;\n                    break;\n                case IgxInputGroupType.BORDER:\n                    this.isBorder = true;\n                    break;\n                case IgxInputGroupType.SEARCH:\n                    this.isSearch = true;\n                    break;\n                default: break;\n            }\n\n            this._type = type;\n        }\n    }\n\n    /**\n     * Returns whether the input element of the input group will be automatically focused on click.\n     * ```typescript\n     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;\n     * ```\n     */\n    @Input()\n    public get supressInputAutofocus(): boolean {\n        return this._supressInputAutofocus;\n    }\n\n    /**\n     * Sets whether the input element of the input group will be automatically focused on click.\n     * ```html\n     * <igx-input-group [supressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    public set supressInputAutofocus(value: boolean) {\n        this._supressInputAutofocus = value;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--filled')\n    get isFilled() {\n        return this._filled || (this.input && this.input.value);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--cosy')\n    get isDisplayDensityCosy() {\n        return this.isCosy();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--comfortable')\n    get isDisplayDensityComfortable() {\n        return this.isComfortable();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--compact')\n    get isDisplayDensityCompact() {\n        return this.isCompact();\n    }\n\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * Values are `line` - 0, `box` - 1, `border` - 2  and `search` - 3. The default is `line`.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     *}\n     * ```\n     */\n    get type() {\n        return this._type.toString();\n    }\n\n    constructor(private _element: ElementRef, @Optional() @Inject(DisplayDensityToken) private _displayDensityOptions: IDisplayDensity) {\n        super(_displayDensityOptions);\n        this.element = _element;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     *}\n     * ```\n     */\n    get hasHints() {\n        return this.hints.length > 0;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputBroder = this.inputGroup.hasBorder;\n     *}\n     * ```\n     */\n    get hasBorder() {\n        return this._type === IgxInputGroupType.LINE ||\n            this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     *}\n     * ```\n     */\n    public get isTypeLine(): boolean {\n        return  this._type === IgxInputGroupType.LINE;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     *}\n     *```\n     */\n    get isTypeBox() {\n        return this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     *}\n     * ```\n     */\n    get isTypeBorder() {\n        return this._type === IgxInputGroupType.BORDER;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     *}\n     * ```\n     */\n    get isTypeSearch() {\n        return  this._type === IgxInputGroupType.SEARCH;\n    }\n\n    get filled() {\n        return this._filled;\n    }\n\n    set filled(val) {\n        this._filled = val;\n    }\n}\n\n/**\n * The IgxInputGroupModule provides the {@link IgxInputGroupComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxInputGroupComponent, IgxHintDirective, IgxInputDirective, IgxLabelDirective],\n    exports: [IgxInputGroupComponent,  IgxHintDirective, IgxInputDirective, IgxLabelDirective, IgxPrefixDirective, IgxSuffixDirective],\n    imports: [CommonModule, IgxPrefixModule, IgxSuffixModule]\n})\nexport class IgxInputGroupModule { }\n","import {\n    ChangeDetectorRef, Component, ContentChild,\n    ElementRef, forwardRef, Inject, QueryList, EventEmitter, OnDestroy\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxDropDownBase, Navigate } from '../drop-down/drop-down.component';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.component';\nimport { IgxComboComponent } from './combo.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { Subject } from 'rxjs';\nimport { CancelableEventArgs } from '../core/utils';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-drop-down',\n    template: `<div class=\"igx-drop-down\">\n    <div class=\"igx-drop-down__list\" igxToggle (onOpening)=\"onToggleOpening($event)\" (onOpened)=\"onToggleOpened()\" (onClosing)=\"onToggleClosing($event)\" (onClosed)=\"onToggleClosed()\">\n        <ng-container *ngIf=\"!collapsed\">\n            <ng-content></ng-content>\n        </ng-container>\n    </div>\n</div>`\n})\nexport class IgxComboDropDownComponent extends IgxDropDownBase implements OnDestroy {\n    private _children: QueryList<IgxDropDownItemBase>;\n    private _scrollPosition = 0;\n    private destroy$ = new Subject<boolean>();\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Inject(forwardRef(() => IgxComboComponent))\n        public combo: IgxComboComponent) {\n        super(elementRef, cdr, selection);\n    }\n\n    /**\n     * @hidden\n     */\n    protected get scrollContainer() {\n        return this.verticalScrollContainer.dc.location.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isScrolledToLast(): boolean {\n        const scrollTop = this.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const scrollHeight = this.verticalScrollContainer.getVerticalScroll().scrollHeight;\n        return Math.floor(scrollTop + this.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n    }\n\n    protected get lastVisibleIndex(): number {\n        return this.combo.totalItemCount ?\n            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :\n            this.items.length - 1;\n    }\n\n    /**\n     *  Event emitter overrides\n     *\n     * @hidden\n     */\n    public onOpened = this.combo.onOpened;\n\n    /**\n     * @hidden\n     */\n    public onOpening = this.combo.onOpening;\n\n    /**\n     * @hidden\n     */\n    public onClosing = this.combo.onClosing;\n\n    /**\n     * @hidden\n     */\n    public onClosed = this.combo.onClosed;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxForOfDirective), { read: IgxForOfDirective })\n    public verticalScrollContainer: IgxForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    protected get children(): QueryList<IgxDropDownItemBase> {\n        return this.combo.children;\n    }\n\n    protected set children(list: QueryList<IgxDropDownItemBase>) {\n        this._children = list;\n    }\n\n    /**\n     * @hidden\n     */\n    onFocus() {\n        this._focusedItem = this._focusedItem ? this._focusedItem : this.items.length ? this.items[0] : this.children.first;\n        if (this._focusedItem) {\n            this._focusedItem.isFocused = true;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    onBlur(evt?) {\n        if (this._focusedItem) {\n            this._focusedItem.isFocused = false;\n            this._focusedItem = null;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get selectedItem(): any[] {\n        const sel = this.selection.get(this.combo.id);\n        return sel ? Array.from(sel) : [];\n    }\n\n    /**\n     * @hidden\n     */\n    navigatePrev() {\n        if (this._focusedItem.index === 0 && this.verticalScrollContainer.state.startIndex === 0) {\n            this.combo.searchInput.nativeElement.focus();\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    navigateFirst() {\n        const vContainer = this.verticalScrollContainer;\n        if (vContainer.state.startIndex === 0) {\n            this.focusItem(0);\n            return;\n        }\n        vContainer.scrollTo(0);\n        this.subscribeNext(vContainer, () => {\n            this.combo.triggerCheck();\n            this.focusItem(0);\n            this.combo.triggerCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    navigateLast() {\n        const vContainer = this.verticalScrollContainer;\n        const scrollTarget = this.combo.totalItemCount ?\n            this.combo.totalItemCount - 1 :\n            Math.max(this.combo.data.length - 1, vContainer.igxForOf.length - 1);\n        if (vContainer.igxForOf.length <= vContainer.state.startIndex + vContainer.state.chunkSize) {\n            this.focusItem(this.items.length - 1);\n            return;\n        }\n        vContainer.scrollTo(scrollTarget);\n        this.subscribeNext(vContainer, () => {\n            this.combo.triggerCheck();\n            this.focusItem(this.items.length - 1);\n            this.combo.triggerCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    private navigateRemoteItem(direction) {\n        this.verticalScrollContainer.addScrollTop(direction * this.combo.itemHeight);\n        this.subscribeNext(this.verticalScrollContainer, () => {\n            if (direction === Navigate.Up) {\n                this.focusItem(0);\n            } else {\n                this.focusItem(this.focusedItem.index);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    setSelectedItem(itemID: any, select = true) {\n        this.combo.setSelectedItem(itemID, select);\n    }\n\n    /**\n     * @hidden\n     */\n    selectItem(item: IgxComboItemComponent, event?: Event) {\n        if (item.value === 'ADD ITEM') {\n            if (event) {\n                this.combo.addItemToCollection();\n            }\n        } else {\n            this.setSelectedItem(item.itemID);\n            this._focusedItem = item;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    navigateItem(newIndex: number, direction?: number) {\n        // Virtual scrolling holds one hidden loaded element at the bottom of the drop down list.\n        // At the top there isn't such a hidden element.\n        // That's why we hold the first or the one before the last list item as focused, during keyboard navigation.\n        // This means that if we want to focus next element, it's the last hidden element when scrolling down\n        // and when scrolling up it is not loaded at all.\n        // It's more special case when srcolling down and the hidden element is group header,\n        // which is not part of the this.items collection.\n        // In that case the real item is not hidden, but not loaded at all by the virtualization,\n        // and this is the same case as normal scroll up.\n        const vContainer = this.verticalScrollContainer;\n        const extraScroll = this.combo.isAddButtonVisible();\n        if (direction) {\n            if (direction === Navigate.Down && extraScroll) {\n                if (vContainer.igxForOf[vContainer.igxForOf.length - 1] === this.focusedItem.value) {\n                    if (this.focusedItem) {\n                        this.focusedItem.isFocused = false;\n                    }\n                    this.focusedItem = this.children.last;\n                    this.focusedItem.isFocused = true;\n                    return;\n                } else if (vContainer.igxForOf[vContainer.state.chunkSize + vContainer.state.startIndex - 2] ===\n                    this.focusedItem.value) {\n                    this.subscribeNext(vContainer, () => {\n                        if (this.focusedItem.isHeader &&\n                            vContainer.state.startIndex + vContainer.state.chunkSize < vContainer.igxForOf.length) {\n                            vContainer.scrollNext();\n                        }\n                    });\n                    vContainer.scrollNext();\n                    return;\n                }\n            }\n        }\n        if (newIndex === -1) {\n            this.navigateVirtualItem(direction, extraScroll ? 1 : 0);\n        } else if (newIndex === this.lastVisibleIndex && !this.isScrolledToLast) {\n            this.navigateVirtualItem(direction, extraScroll ? 1 : 0);\n        } else if (newIndex === this.lastVisibleIndex && this.isScrolledToLast) {\n            // When initially scrolling to the last item, a pseudo element is present in the children list\n            // We need to check if the element we're on is an actual element or an empty 'igx-combo-item' child\n            if (this.items[newIndex].element && this.items[newIndex].element.nativeElement.clientHeight) {\n                super.navigateItem(newIndex);\n            }\n            return;\n        } else {\n            super.navigateItem(newIndex);\n        }\n    }\n\n    private navigateVirtualItem(direction: Navigate, extraScroll?: number) {\n        const vContainer = this.verticalScrollContainer;\n        // If the data is vitualized, data.length === vContainer.chunkSize, so the below checks are no-longer valid\n        if (vContainer && vContainer.totalItemCount && vContainer.totalItemCount !== 0) {\n            this.navigateRemoteItem(direction);\n            return;\n        }\n        let state = vContainer.state;\n        if (this.isScrolledToLast && direction === Navigate.Down) { // If on the bottom most item, do not subscribe\n            return;\n        }\n        // If on the topmost item, do not subscribe\n        if (this.verticalScrollContainer.getVerticalScroll().scrollTop === 0 && direction === Navigate.Up) {\n            return;\n        }\n        const isScrollUp = direction === Navigate.Up;\n        let newScrollStartIndex = isScrollUp ? state.startIndex - 1 : state.startIndex + 1;\n        if (newScrollStartIndex < 0) {\n            newScrollStartIndex = 0;\n        }\n        let data = vContainer.igxForOf;\n\n        if (data.length === 0) {\n            const newItem = this.children.first;\n            if (!newItem) { return; }\n            newItem.isFocused = true;\n            this._focusedItem = newItem;\n            return;\n        }\n        // Following the big comment above, when the new item is group header, then we need to load 2 elements at once.\n        if (data[newScrollStartIndex].isHeader && direction === Navigate.Up ||\n            data[newScrollStartIndex + state.chunkSize - 2].isHeader && direction === Navigate.Down) {\n            newScrollStartIndex = isScrollUp ? newScrollStartIndex - 1 : newScrollStartIndex + 1;\n            // newScrollStartIndex = mod && direction === Navigate.Down ? newScrollStartIndex + 1 : newScrollStartIndex;\n            if (newScrollStartIndex < 0) { // If the next item loaded is a header and is also the very first item in the list.\n                vContainer.scrollTo(0); // Scrolls to the beginning of the list and switches focus to the searchInput\n                this.subscribeNext(vContainer, () => {\n                    this.combo.searchInput.nativeElement.focus();\n                    if (this.focusedItem) {\n                        this.focusedItem.isFocused = false;\n                    }\n                    this.focusedItem = null;\n                });\n                return;\n            }\n        }\n        // If it is the very last item in the collection, when moving down\n        if (newScrollStartIndex + state.chunkSize === data.length + 1) {\n            vContainer.scrollTo(newScrollStartIndex);\n            return;\n        }\n        vContainer.scrollTo(newScrollStartIndex);\n        this.subscribeNext(vContainer, () => {\n            state = vContainer.state;\n            data = vContainer.igxForOf;\n\n            // Because we are sure that if we scroll up then the top element is not a header, then we focus the first one.\n            // When we scroll down, if the newly loaded element that is hidden is group header,\n            // then we focus the last item from the this.items array.\n            // This is because the this.items doens't contains the group headers, while there are rendered in the combo drop down.\n            // If the newly loaded element that is hidden isn't a header, this means that the first visible item, the one that needs focus,\n            // should be either the one that is before the last item (this.items).\n            const isBottomHiddenHeader = data[state.startIndex + state.chunkSize - 1].isHeader;\n            const index = isScrollUp ? 0 : isBottomHiddenHeader ? this.items.length - 1 - extraScroll : this.items.length - 2 - extraScroll;\n\n            this.focusItem(index);\n        });\n    }\n\n    private subscribeNext(virtualContainer: any, callback: (elem?) => void) {\n        virtualContainer.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe({\n            next: (e: any) => {\n                callback(e);\n            }\n        });\n    }\n\n    private focusItem(visibleIndex: number) {\n        const oldItem = this._focusedItem;\n        if (oldItem) {\n            oldItem.isFocused = false;\n        }\n        const newItem = this.items[visibleIndex];\n        newItem.isFocused = true;\n        this._focusedItem = newItem;\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleOpening(e: CancelableEventArgs) {\n        const eventArgs = { cancel: false };\n        this.onOpening.emit(eventArgs);\n        e.cancel = eventArgs.cancel;\n        if (eventArgs.cancel) {\n            return;\n        }\n        this.combo.handleInputChange();\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleOpened() {\n        this.combo.triggerCheck();\n        this.combo.searchInput.nativeElement.focus();\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleClosed() {\n        this.combo.comboInput.nativeElement.focus();\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleClosing(e: CancelableEventArgs) {\n        this.combo.searchValue = '';\n        super.onToggleClosing(e);\n        this._scrollPosition = this.verticalScrollContainer.getVerticalScroll().scrollTop;\n    }\n\n    /**\n     * @hidden\n     */\n    updateScrollPosition() {\n        this.verticalScrollContainer.getVerticalScroll().scrollTop = this._scrollPosition;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    forwardRef,\n    HostListener,\n    HostBinding,\n    Inject,\n    Input\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-item',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxComboItemComponent extends IgxDropDownItemBase {\n    private get combo() {\n        return this.dropDown.combo;\n    }\n\n    /**\n     * Gets the height of a list item\n     */\n    @HostBinding('style.height.px')\n    get itemHeight() {\n        return this.combo.itemHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        return this.combo.isRemote ? JSON.stringify(this.value) : this.value;\n    }\n\n    constructor(\n        @Inject(forwardRef(() => IgxComboDropDownComponent)) public dropDown: IgxComboDropDownComponent,\n        protected elementRef: ElementRef,\n        protected selection: IgxSelectionAPIService\n    ) {\n        super(dropDown, elementRef);\n    }\n\n    /**\n     * @hidden\n     */\n    get isSelected() {\n        return this.combo.isItemSelected(this.itemID);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.focusedItem;\n            if (focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        this.dropDown.selectItem(this, event);\n    }\n}\n","import { forwardRef, Inject, Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../core/utils';\nimport { DataUtil } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxComboComponent } from './combo.component';\nimport { IFilteringState } from '../data-operations/filtering-state.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\n\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboFiltering'\n})\nexport class IgxComboFilteringPipe implements PipeTransform {\n\n    constructor(\n        @Inject(forwardRef(() => IgxComboComponent))\n        public combo: IgxComboComponent\n    ) { }\n\n    public transform(collection: any[], expressions: IFilteringExpression[],\n                     logic: FilteringLogic) {\n        const filteringExpressionsTree =  new FilteringExpressionsTree(logic);\n        filteringExpressionsTree.filteringOperands = expressions;\n        const state: IFilteringState = { expressionsTree: filteringExpressionsTree, strategy: new SimpleFilteringStrategy()};\n        state.expressionsTree.filteringOperands = this.combo.filteringExpressions;\n\n        if (!state.expressionsTree.filteringOperands.length) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        return result;\n    }\n}\n\n/** @hidden */\nexport class SimpleFilteringStrategy extends FilteringStrategy {\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = expr.fieldName === undefined ? rec : rec[expr.fieldName];\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboSorting',\n    pure: true\n})\nexport class IgxComboSortingPipe implements PipeTransform {\n    constructor(\n        @Inject(forwardRef(() => IgxComboComponent))\n        public combo: IgxComboComponent\n    ) { }\n\n    public transform(collection: any[], expression: ISortingExpression | ISortingExpression[]) {\n        const state = { expressions: [] };\n        state.expressions = this.combo.sortingExpressions;\n\n        if (!state.expressions.length) {\n            return collection;\n        }\n        const result = DataUtil.sort(cloneArray(collection), state);\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboGrouping'\n})\nexport class IgxComboGroupingPipe implements PipeTransform {\n\n    constructor(\n        @Inject(forwardRef(() => IgxComboComponent))\n        public combo: IgxComboComponent\n    ) { }\n\n    public transform(collection: any[], groupKey: any) {\n        this.combo.filteredData = collection;\n        if ((!groupKey && groupKey !== 0) || !collection.length) {\n            return collection;\n        }\n        const data = cloneArray(collection);\n        let inserts = 0;\n        let currentHeader = null;\n        for (let i = 0; i < collection.length; i++) {\n            let insertFlag = 0;\n            if (currentHeader !== collection[i][groupKey]) {\n                currentHeader = collection[i][groupKey];\n                insertFlag = 1;\n            }\n            if (insertFlag) {\n                data.splice(i + inserts, 0, {\n                    [this.combo.valueKey]: currentHeader,\n                    [this.combo.groupKey]: currentHeader,\n                    isHeader: true\n                });\n                inserts++;\n            }\n        }\n        return data;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\n\nexport class IgxComboFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n","import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';\nimport { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectorRef, Component, ContentChild,\n    ElementRef, EventEmitter,\n    HostBinding, HostListener, Input, NgModule, OnInit, OnDestroy, Output, QueryList,\n    TemplateRef, ViewChild, ViewChildren, Optional, Self, Inject, Directive\n} from '@angular/core';\nimport {\n    IgxComboItemDirective,\n    IgxComboEmptyDirective,\n    IgxComboHeaderItemDirective,\n    IgxComboHeaderDirective,\n    IgxComboFooterDirective,\n    IgxComboAddItemDirective\n} from './combo.directives';\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NgControl } from '@angular/forms';\nimport { IgxCheckboxComponent, IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, CancelableEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic } from '../data-operations/filtering-expression.interface';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxForOfModule, IForOfState } from '../directives/for-of/for_of.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.component';\nimport { IgxDropDownModule } from '../drop-down/drop-down.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { IgxComboFilterConditionPipe, IgxComboFilteringPipe, IgxComboGroupingPipe, IgxComboSortingPipe } from './combo.pipes';\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services';\nimport { Subscription } from 'rxjs';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\n/** Custom strategy to provide the combo with callback on initial positioning */\nclass ComboConnectedPositionStrategy extends ConnectedPositioningStrategy {\n    private _callback: () => void;\n    constructor(callback: () => void) {\n        super();\n        this._callback = callback;\n    }\n\n    position(contentElement, size, document?, initialCall?) {\n        if (initialCall) {\n            this._callback();\n        }\n        super.position(contentElement, size);\n    }\n}\n\n/**\n * @hidden\n */\nenum DataTypes {\n    EMPTY = 'empty',\n    PRIMITIVE = 'primitive',\n    COMPLEX = 'complex',\n    PRIMARYKEY = 'valueKey'\n}\n\nexport enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL,\n    /**\n     * Combo with valid state.\n     */\n    VALID,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID\n}\n\nexport interface IComboSelectionChangeEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    event?: Event;\n}\n\nexport interface IComboItemAdditionEvent {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\n\nlet NEXT_ID = 0;\nconst noop = () => { };\n\n@Component({\n    selector: 'igx-combo',\n    template: `<ng-template #complex let-display let-data=\"data\" let-key=\"displayKey\">\n    {{display[key]}}\n</ng-template>\n<ng-template #primitive let-display>\n    {{display}}\n</ng-template>\n<ng-template #empty>\n    <span>The list is empty</span>\n</ng-template>\n<ng-template #addItemDefault let-control>\n    <button igxButton=\"flat\" igxRipple>Add item</button>\n</ng-template>\n<ng-template #headerItemBase let-item let-key=\"valueKey\" let-groupKey=\"groupKey\">\n    {{ item[key] }}\n</ng-template>\n\n<div class=\"igx-combo\" [style.width]=\"width\" role=\"combobox\" [attr.aria-expanded]=\"!dropdown.collapsed\" aria-haspopup=\"listbox\" [attr.aria-owns]=\"dropdown.id\">\n    <igx-input-group [type]=\"type\" (click)=\"onInputClick($event)\">\n        <input igxInput #comboInput name=\"comboInput\" type=\"text\" [(ngModel)]=\"value\" readonly [placeholder]=\"placeholder\" [disabled]=\"disabled\" (blur)=\"onBlur($event)\"/>\n        <igx-suffix *ngIf=\"value.length\" class=\"clearButton\" aria-label=\"Clear Selection\" igxRipple (click)=\"handleClearItems($event)\">\n            <igx-icon fontSet=\"material\">clear</igx-icon>\n        </igx-suffix>\n        <igx-suffix igxButton=\"icon\" class=\"dropdownToggleButton\" igxRipple>\n            <igx-icon *ngIf=\"dropdown.collapsed; else toggleUp\" fontSet=\"material\">arrow_drop_down</igx-icon>\n            <ng-template #toggleUp>\n                <igx-icon fontSet=\"material\">arrow_drop_up</igx-icon>\n            </ng-template>\n        </igx-suffix>\n    </igx-input-group>\n    <igx-combo-drop-down #igxComboDropDown class=\"igx-combo__drop-down\" [width]=\"itemsWidth || '100%'\">\n        <igx-input-group class=\"igx-combo__search\">\n            <input class=\"igx-combo-input\" igxInput #searchInput name=\"searchInput\" type=\"text\" [(ngModel)]=\"searchValue\" (ngModelChange)=\"handleInputChange($event)\"\n                (keyup)=\"handleKeyUp($event)\" (keydown)=\"handleKeyDown($event)\" (focus)=\"dropdown.onBlur($event)\" [placeholder]=\"searchPlaceholder\" aria-autocomplete=\"both\"\n                [attr.aria-owns]=\"dropdown.id\" [attr.aria-labelledby]=\"ariaLabelledBy\" />\n        </igx-input-group>\n        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: this}\">\n        </ng-container>\n        <div #dropdownItemContainer class=\"igx-combo__content\" [style.overflow]=\"'hidden'\" [style.maxHeight.px]=\"itemsMaxHeight\"\n            [igxDropDownItemNavigation]=\"dropdown\" [tabindex]=\"dropdown.collapsed ? -1 : 0\" role=\"listbox\" [attr.id]=\"dropdown.id\">\n            <ng-template igxFor let-item [igxForOf]=\"data | comboFiltering:filteringExpressions:filteringLogic | comboSorting:sortingExpressions | comboGrouping:groupKey\"\n                [igxForScrollOrientation]=\"'vertical'\" [igxForContainerSize]=\"itemsMaxHeight\"\n                [igxForItemSize]=\"itemHeight\" (onChunkPreload)=\"dataLoading($event)\" #virtualScrollContainer>\n                <igx-combo-item [value]=\"item\" isHeader={{item.isHeader}} role=\"option\">\n                    <ng-container *ngIf=\"!item.isHeader\">\n                        <igx-checkbox [checked]=\"isItemSelected(item)\" disableRipple=\"true\" disabled=\"true\" class=\"igx-combo__checkbox\"></igx-checkbox>\n                    </ng-container>\n                    <ng-container *ngIf=\"item.isHeader\">\n                        <ng-container *ngTemplateOutlet=\"headerItemTemplate ? headerItemTemplate : headerItemBase; context: {$implicit: item, data: data, valueKey: valueKey, groupKey: groupKey, displayKey: displayKey}\"></ng-container>\n                    </ng-container>\n                    <ng-container *ngIf=\"!item.isHeader\">\n                        <ng-container #listItem *ngTemplateOutlet=\"template; context: {$implicit: item, data: data, valueKey: valueKey, displayKey: displayKey};\"></ng-container>\n                    </ng-container>\n                </igx-combo-item>\n            </ng-template>\n        </div>\n        <div class=\"igx-combo__add\" *ngIf=\"filteredData.length === 0 || isAddButtonVisible()\">\n            <div class=\"igx-combo__empty\" *ngIf=\"filteredData.length === 0\">\n                <ng-container *ngTemplateOutlet=\"emptyTemplate ? emptyTemplate : empty; context: {$implicit: this}\">\n                </ng-container>\n            </div>\n            <igx-combo-item *ngIf=\"isAddButtonVisible()\" [tabindex]=\"dropdown.collapsed ? -1 : customValueFlag ? 1 : -1\" class=\"igx-combo__add-item\"\n                    igxRipple (keypress)=\"addItemToCollection()\" [isHeader]=\"false\" [disabled]=\"false\" [value]=\"'ADD ITEM'\" role=\"button\"\n                    aria-label=\"Add Item\">\n                <ng-container *ngTemplateOutlet=\"addItemTemplate ? addItemTemplate : addItemDefault; context: {$implicit: this}\">\n                </ng-container>\n            </igx-combo-item>\n        </div>\n        <ng-container *ngTemplateOutlet=\"footerTemplate; context: {$implicit: this}\">\n        </ng-container>\n    </igx-combo-drop-down>\n</div>\n`\n})\nexport class IgxComboComponent implements AfterViewInit, ControlValueAccessor, OnInit, OnDestroy {\n    /**\n     * @hidden\n     */\n    public customValueFlag = true;\n    /**\n     * @hidden\n     */\n    public defaultFallbackGroup = 'Other';\n    /**\n     * @hidden\n     */\n    protected stringFilters = IgxStringFilteringOperand;\n    /**\n     * @hidden\n     */\n    protected boolenFilters = IgxBooleanFilteringOperand;\n    /**\n     * @hidden\n     */\n    protected _filteringLogic = FilteringLogic.Or;\n    /**\n     * @hidden\n     */\n    protected _filteringExpressions = [];\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions = [];\n    /**\n     * @hidden\n     */\n    protected _groupKey: string | number = '';\n    /**\n     * @hidden\n     */\n    protected _valueKey: string | number = '';\n    /**\n     * @hidden\n     */\n    protected _displayKey: string | number = '';\n    private _addItemTemplate: TemplateRef<any>;\n    private _emptyTemplate: TemplateRef<any>;\n    private _footerTemplate: TemplateRef<any>;\n    private _headerTemplate: TemplateRef<any>;\n    private _headerItemTemplate: TemplateRef<any>;\n    private _itemTemplate: TemplateRef<any>;\n    private _dataType = '';\n    private _data = [];\n    private _filteredData = [];\n    private _children: QueryList<IgxDropDownItemBase>;\n    private _dropdownContainer: ElementRef = null;\n    private _searchInput: ElementRef<HTMLInputElement> = null;\n    private _comboInput: ElementRef<HTMLInputElement> = null;\n    private _valid = IgxComboState.INITIAL;\n    private _statusChanges$: Subscription;\n    private _width = '100%';\n    private _positionCallback: () => void;\n    private _onChangeCallback: (_: any) => void = noop;\n    private overlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true\n    };\n\n    private _value = '';\n    private _searchValue = '';\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Self() @Optional() public ngControl: NgControl) {\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxComboDropDownComponent, { read: IgxComboDropDownComponent })\n    public dropdown: IgxComboDropDownComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectAllCheckbox', { read: IgxCheckboxComponent })\n    public selectAllCheckbox: IgxCheckboxComponent;\n\n    /**\n     * @hidden\n     */\n    get searchInput() {\n        return this._searchInput;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('searchInput')\n    set searchInput(content: ElementRef<HTMLInputElement>) {\n        this._searchInput = content;\n    }\n\n    /**\n     * @hidden\n     */\n    get comboInput() {\n        return this._comboInput;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('comboInput')\n    set comboInput(content: ElementRef<HTMLInputElement>) {\n        this._comboInput = content;\n    }\n\n    @ContentChild(IgxComboItemDirective, { read: TemplateRef })\n    public set itemTemplate(val: TemplateRef<any>) {\n        this._itemTemplate = val;\n    }\n\n    public get itemTemplate(): TemplateRef<any> {\n        return this._itemTemplate;\n    }\n\n    @ContentChild(IgxComboHeaderDirective, { read: TemplateRef })\n    public set headerTemplate(val: TemplateRef<any>) {\n        this._headerTemplate = val;\n    }\n\n    public get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n\n    @ContentChild(IgxComboFooterDirective, { read: TemplateRef })\n    public set footerTemplate(val: TemplateRef<any>) {\n        this._footerTemplate = val;\n    }\n\n    public get footerTemplate(): TemplateRef<any> {\n        return this._footerTemplate;\n    }\n\n    @ContentChild(IgxComboHeaderItemDirective, { read: TemplateRef })\n    public set headerItemTemplate(val: TemplateRef<any>) {\n        this._headerItemTemplate = val;\n    }\n\n    public get headerItemTemplate(): TemplateRef<any> {\n        return this._headerItemTemplate;\n    }\n\n\n    @ContentChild(IgxComboAddItemDirective, { read: TemplateRef })\n    public set addItemTemplate(val: TemplateRef<any>) {\n        this._addItemTemplate = val;\n    }\n\n    public get addItemTemplate(): TemplateRef<any> {\n        return this._addItemTemplate;\n    }\n\n    @ContentChild(IgxComboEmptyDirective, { read: TemplateRef })\n    public set emptyTemplate(val: TemplateRef<any>) {\n        this._emptyTemplate = val;\n    }\n\n    public get emptyTemplate(): TemplateRef<any> {\n        return this._emptyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    @ViewChild('primitive', { read: TemplateRef })\n    protected primitiveTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('complex', { read: TemplateRef })\n    protected complexTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @DeprecateProperty(`Setting combo item template with '#emptyTemplate' is deprecated.\\n` +\n        `Use \\`igxComboEmpty\\` directive instead.`)\n    @ContentChild('emptyTemplate', { read: TemplateRef })\n    private set oldEmptyTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.emptyTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateProperty(`Setting combo item template with '#headerTemplate' is deprecated.\\n` +\n        `Use \\`igxComboHeader\\` directive instead.`)\n    @ContentChild('headerTemplate', { read: TemplateRef })\n    private set oldHeaderTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.headerTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateProperty(`Setting combo item template with '#footerTemplate' is deprecated.\\n` +\n        `Use \\`igxComboFooter\\` directive instead.`)\n    @ContentChild('footerTemplate', { read: TemplateRef })\n    private set oldFooterTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.footerTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateProperty(`Setting combo item template with '#itemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboItem\\` directive instead.`)\n    @ContentChild('itemTemplate', { read: TemplateRef })\n    private set oldItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.itemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateProperty(`Setting combo item template with '#addItemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboAddItem\\` directive instead.`)\n    @ContentChild('addItemTemplate', { read: TemplateRef })\n    private set oldAddItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.addItemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateProperty(`Setting combo item template with '#headerItemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboHeaderItem\\` directive instead.`)\n    @ContentChild('headerItemTemplate', { read: TemplateRef })\n    private set oldHeaderItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.headerItemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('dropdownItemContainer')\n    protected set dropdownContainer(val: ElementRef) {\n        this._dropdownContainer = val;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get dropdownContainer(): ElementRef {\n        return this._dropdownContainer;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxComboItemComponent, { read: IgxComboItemComponent })\n    public set children(list: QueryList<IgxDropDownItemBase>) {\n        this._children = list;\n    }\n\n    /**\n     * @hidden\n     */\n    public get children(): QueryList<IgxDropDownItemBase> {\n        return this._children;\n    }\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSelectionChange = new EventEmitter<IComboSelectionChangeEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onAddition = new EventEmitter<IComboItemAdditionEvent>();\n\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSearchInput = new EventEmitter();\n\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<any>();\n\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-combo-${NEXT_ID++}`;\n\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    @HostBinding('style.width')\n    @Input()\n    public get width() {\n        return this._width;\n    }\n\n    public set width(val) {\n        this._width = val;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this._valid === IgxComboState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this._valid === IgxComboState.INVALID;\n    }\n\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    @Input()\n    public allowCustomValues = false;\n\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n    */\n    @Input()\n    public itemsMaxHeight = 480;\n\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemsWidth: string;\n\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemHeight = 48;\n\n    /**\n     * @hidden\n     */\n    public filteringLogic = FilteringLogic.Or;\n\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public placeholder = '';\n\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public searchPlaceholder = 'Enter a Search Term';\n\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    @Input()\n    get data() {\n        return this._data;\n    }\n    set data(val: any[]) {\n        this._data = (val) ? val : [];\n    }\n\n    /**\n     * Combo value data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    get valueKey() {\n        return this._valueKey;\n    }\n    set valueKey(val: string | number) {\n        this._valueKey = val;\n    }\n\n    @Input()\n    set displayKey(val: string | number) {\n        this._displayKey = val;\n    }\n\n    /**\n     * Combo text data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='mydisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey() {\n        return this._displayKey ? this._displayKey : this._valueKey;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public set groupKey(val: string | number) {\n        this.clearSorting(this._groupKey);\n        this._groupKey = val;\n        this.sort(this._groupKey);\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    public get groupKey(): string | number {\n        return this._groupKey;\n    }\n\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     *<igx-combo [filterable]=\"'false'\">\n     * ```\n     */\n    @Input()\n    public filterable = true;\n\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     *<igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    @Input()\n    public ariaLabelledBy: string;\n\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     *<igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     *<igx-combo [type]=\"'line'\">\n     * ```\n     */\n    @Input()\n    public type = 'box';\n\n    /**\n     * @hidden\n     */\n    public onBlur(event) {\n        if (this.dropdown.collapsed) {\n            this._valid = IgxComboState.INITIAL;\n            if (this.ngControl) {\n                if (!this.ngControl.valid) {\n                    this._valid = IgxComboState.INVALID;\n                }\n            } else if (this._hasValidators() && !this.elementRef.nativeElement.checkValidity()) {\n                this._valid = IgxComboState.INVALID;\n            }\n        }\n    }\n\n    private _hasValidators(): boolean {\n        if (this.elementRef.nativeElement.hasAttribute('required')) {\n            return true;\n        }\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    onArrowDown(evt) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        if (this.dropdown.collapsed) {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    // @HostListener('keydown.ArrowUp', ['$event'])\n    // @HostListener('keydown.Alt.ArrowUp', ['$event'])\n    onArrowUp(evt) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        if (!this.dropdown.collapsed) {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    onInputClick(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n        this.toggle();\n    }\n\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n    */\n    get virtualizationState(): IForOfState {\n        return this.dropdown.verticalScrollContainer.state;\n    }\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state) {\n        this.dropdown.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n    */\n    get totalItemCount() {\n        return this.dropdown.verticalScrollContainer.totalItemCount;\n    }\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count) {\n        this.dropdown.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Gets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n    */\n    public get valid(): IgxComboState {\n        return this._valid;\n    }\n\n    /**\n     * Sets valid state of the combo\n     *\n     * ```typescript\n     * // get\n     * this.combo.valid(IgxComboState.INVALID);\n     * ```\n     */\n    public set valid(value: IgxComboState) {\n        this._valid = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public get values(): any[] {\n        return this.valueKey !== undefined ? this.selectedItems().map((e) => e[this.valueKey]) : [];\n    }\n\n    /**\n     * @hidden\n     */\n    public get filteringExpressions() {\n        return this.filterable ? this._filteringExpressions : [];\n    }\n\n    /**\n     * @hidden\n     */\n    public set filteringExpressions(value) {\n        this._filteringExpressions = cloneArray(value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public get sortingExpressions() {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * @hidden\n     */\n    public set sortingExpressions(value) {\n        this._sortingExpressions = cloneArray(value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected clearSorting(field?: string | number) {\n        if (field === undefined || field === null) {\n            this.sortingExpressions = [];\n            return;\n        }\n        const currentState = cloneArray(this.sortingExpressions);\n        const index = currentState.findIndex((expr) => expr.fieldName === field);\n        if (index > -1) {\n            currentState.splice(index, 1);\n            this.sortingExpressions = currentState;\n        }\n    }\n\n    /**\n     * Combo value\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string {\n        return this._value;\n    }\n    /**\n     * Combo value\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [value]='newValue'></igx-combo>\n     * ```\n     */\n    set value(val) {\n        this._value = val;\n    }\n\n    /**\n     * @hidden\n     */\n    get searchValue() {\n        return this._searchValue;\n    }\n\n    /**\n     * @hidden\n     */\n    set searchValue(val: string) {\n        this._searchValue = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get filteredData(): any[] {\n        return this.filterable ? this._filteredData : this.data;\n    }\n\n    /**\n     * @hidden\n     */\n    public set filteredData(val: any[]) {\n        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden\n     */\n    public handleKeyUp(evt) {\n        if (evt.key === 'ArrowDown' || evt.key === 'Down') {\n            this.dropdownContainer.nativeElement.focus();\n            this.dropdown.onFocus();\n            this.dropdown.focusedItem = this.dropdown.items[0];\n        } else if (evt.key === 'Escape' || evt.key === 'Esc') {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public handleKeyDown(evt) {\n        if (evt.key === 'ArrowUp' || evt.key === 'Up') {\n            this.onArrowUp(evt);\n        }\n    }\n\n    private checkMatch() {\n        this.customValueFlag = this.displayKey || this.displayKey === 0 ?\n            !this.filteredData\n                .some((e) => (e[this.displayKey]).toString().toLowerCase() === this.searchValue.trim().toLowerCase()) &&\n            this.allowCustomValues :\n            !this.filteredData\n                .some((e) => e.toString().toLowerCase() === this.searchValue.trim().toLowerCase()) && this.allowCustomValues;\n    }\n\n    /**\n     * @hidden\n     */\n    public handleInputChange(event?) {\n        if (event !== undefined) {\n            this.dropdown.verticalScrollContainer.scrollTo(0);\n            this.onSearchInput.emit(event);\n        }\n        if (this.filterable) {\n            this.filter();\n        } else {\n            this.checkMatch();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public sort(fieldName: string | number, dir: SortingDirection = SortingDirection.Asc, ignoreCase: boolean = true): void {\n        if (!fieldName && fieldName !== 0) {\n            return;\n        }\n        const sortingState = cloneArray(this.sortingExpressions, true);\n\n        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase);\n        this.sortingExpressions = sortingState;\n    }\n\n    /**\n     * @hidden\n     */\n    public getValueByValueKey(val: any): any {\n        if (!val && val !== 0) {\n            return undefined;\n        }\n        return this.valueKey === 0 || this.valueKey ?\n            this.data.filter((e) => e[this.valueKey] === val)[0] :\n            this.data.filter((e) => e === val);\n    }\n\n    /**\n     * @hidden\n     */\n    protected prepare_sorting_expression(state, fieldName, dir, ignoreCase) {\n\n        if (dir === SortingDirection.None) {\n            state.splice(state.findIndex((expr) => expr.fieldName === fieldName), 1);\n            return;\n        }\n\n        const expression = state.find((expr) => expr.fieldName === fieldName);\n\n        if (!expression) {\n            state.push({ fieldName, dir, ignoreCase });\n        } else {\n            Object.assign(expression, { fieldName, dir, ignoreCase });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get dataType(): string {\n        if (this.valueKey) {\n            return DataTypes.COMPLEX;\n        }\n        return DataTypes.PRIMITIVE;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isRemote() {\n        return this.totalItemCount > 0 &&\n            this.valueKey &&\n            this.dataType === DataTypes.COMPLEX;\n    }\n\n    private _stringifyItemID(itemID) {\n        return this.isRemote && typeof itemID === 'object' ? JSON.stringify(itemID) : itemID;\n    }\n\n    private _parseItemID(itemID) {\n        return this.isRemote && typeof itemID === 'string' ? JSON.parse(itemID) : itemID;\n    }\n\n    private changeSelectedItem(newItem: any, select?: boolean) {\n        if (!newItem && newItem !== 0) {\n            return;\n        }\n        const newSelection = select ?\n            this.selection.add_item(this.id, newItem) :\n            this.selection.delete_item(this.id, newItem);\n        this.triggerSelectionChange(newSelection);\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedItem(itemID: any, select = true) {\n        if (itemID === undefined || itemID === null) {\n            return;\n        }\n        const newItem = this.dropdown.items.find((item) => item.itemID === itemID);\n        if (newItem) {\n            if (newItem.disabled || newItem.isHeader) {\n                return;\n            }\n            if (!newItem.isSelected) {\n                this.changeSelectedItem(itemID, true);\n            } else {\n                this.changeSelectedItem(itemID, false);\n            }\n        } else {\n            const target = typeof itemID === 'object' ? itemID : this.getValueByValueKey(itemID);\n            if (target) {\n                this.changeSelectedItem(target, select);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isItemSelected(item) {\n        return this.selection.is_item_selected(this.id, this._stringifyItemID(item));\n    }\n\n    /**\n     * @hidden\n     */\n    protected triggerSelectionChange(newSelectionAsSet: Set<any>) {\n        const oldSelection = this.dropdown.selectedItem;\n        const newSelection = newSelectionAsSet ? Array.from(newSelectionAsSet) : [];\n        if (oldSelection !== newSelection) {\n            const args: IComboSelectionChangeEventArgs = { oldSelection, newSelection };\n            this.onSelectionChange.emit(args);\n            newSelectionAsSet = this.selection.get_empty();\n            for (let i = 0; i < args.newSelection.length; i++) {\n                newSelectionAsSet.add(args.newSelection[i]);\n            }\n            this.selection.set(this.id, newSelectionAsSet);\n            this.value = this.dataType !== DataTypes.PRIMITIVE ?\n                newSelection.map((id) => this._parseItemID(id)[this.displayKey]).join(', ') :\n                newSelection.join(', ');\n            // this.isHeaderChecked();\n            this._onChangeCallback(newSelection);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public triggerCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public isAddButtonVisible(): boolean {\n        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;\n        return this.searchValue !== '' && this.customValueFlag;\n    }\n\n    /**\n     * @hidden\n     */\n    public handleSelectAll(evt) {\n        if (evt.checked) {\n            this.selectAllItems();\n        } else {\n            this.deselectAllItems();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public addItemToCollection() {\n        if (!this.searchValue) {\n            return false;\n        }\n        const newValue = this.searchValue.trim();\n        const addedItem = this.displayKey ? {\n            [this.valueKey]: newValue,\n            [this.displayKey]: newValue\n        } : newValue;\n        if (this.groupKey || this.groupKey === 0) {\n            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });\n        }\n        const oldCollection = this.data;\n        const newCollection = [...this.data];\n        newCollection.push(addedItem);\n        const args: IComboItemAdditionEvent = {\n            oldCollection, addedItem, newCollection\n        };\n        this.onAddition.emit(args);\n        this.data.push(addedItem);\n        // If you mutate the array, no pipe is invoked and the display isn't updated;\n        // if you replace the array, the pipe executes and the display is updated.\n        this.data = cloneArray(this.data);\n        this.changeSelectedItem(addedItem, true);\n        this.customValueFlag = false;\n        if (this.searchInput) {\n            this.searchInput.nativeElement.focus();\n        }\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden\n     */\n    protected prepare_filtering_expression(searchVal, condition, ignoreCase, fieldName?) {\n        const newArray = [...this.filteringExpressions];\n        const expression = newArray.find((expr) => expr.fieldName === fieldName);\n        const newExpression = { fieldName, searchVal, condition, ignoreCase };\n        if (!expression) {\n            newArray.push(newExpression);\n        } else {\n            Object.assign(expression, newExpression);\n        }\n        if (this.groupKey) {\n            const expression2 = newArray.find((expr) => expr.fieldName === 'isHeader');\n            const headerExpression = {\n                fieldName: 'isHeader', searchVale: '',\n                condition: IgxBooleanFilteringOperand.instance().condition('true'), ignoreCase: true\n            };\n            if (!expression2) {\n                newArray.push(headerExpression);\n            } else {\n                Object.assign(expression2, headerExpression);\n            }\n        }\n        this.filteringExpressions = newArray;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onStatusChanged() {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            this._valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public filter() {\n        this.prepare_filtering_expression(this.searchValue.trim(), IgxStringFilteringOperand.instance().condition('contains'),\n            true, this.dataType === DataTypes.PRIMITIVE ? undefined : this.displayKey);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._positionCallback = () => this.dropdown.updateScrollPosition();\n        this.overlaySettings.positionStrategy = new ComboConnectedPositionStrategy(this._positionCallback);\n        this.overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;\n\n        if (this.ngControl && this.ngControl.value) {\n            this.triggerSelectionChange(this.ngControl.value);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.filteredData = [...this.data];\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: any): void {\n        // selectItems can handle Array<any>, no valueKey is needed;\n        this.selectItems(value, true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void { }\n\n    /**\n     * @hidden\n     */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public get template(): TemplateRef<any> {\n        this._dataType = this.dataType;\n        if (this.itemTemplate) {\n            return this.itemTemplate;\n        }\n        if (this._dataType === DataTypes.COMPLEX) {\n            return this.complexTemplate;\n        }\n        return this.primitiveTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public handleClearItems(event) {\n        this.deselectAllItems(true);\n        event.stopPropagation();\n    }\n\n    /**\n     * A method that opens/closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.toggle()>Toggle Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public toggle() {\n        this.dropdown.toggle(this.overlaySettings);\n    }\n\n    /**\n     * A method that opens the combo.\n     *\n     *```html\n     *<button (click)=\"combo.open()>Open Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public open() {\n        this.dropdown.open(this.overlaySettings);\n    }\n\n    /**\n     * A method that closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.close()>Close Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public close() {\n        this.dropdown.close();\n    }\n\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.collapsed;\n     * ```\n    */\n    public get collapsed() {\n        return this.dropdown.collapsed;\n    }\n\n    /**\n     * Get current selection state\n     * @returns Array of selected items\n     * ```typescript\n     * // get\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    public selectedItems() {\n        const items = this.dropdown.selectedItem;\n        return this.isRemote ? items.map(item => this._parseItemID(item)) : items;\n    }\n\n    /**\n     * Select defined items\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * // get\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public selectItems(newItems: Array<any>, clearCurrentSelection?: boolean) {\n        if (newItems) {\n            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);\n            this.triggerSelectionChange(newSelection);\n        }\n    }\n\n    /**\n     * Deselect defined items\n     * @param items items to deselected\n     * ```typescript\n     * // get\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public deselectItems(items: Array<any>) {\n        if (items) {\n            const newSelection = this.selection.delete_items(this.id, items);\n            this.triggerSelectionChange(newSelection);\n        }\n    }\n\n    /**\n     * Select all (filtered) items\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * // get\n     * this.combo.selectAllItems();\n     * ```\n     */\n    public selectAllItems(ignoreFilter?: boolean) {\n        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData);\n        const newSelection = this.selection.add_items(this.id, allVisible);\n        this.triggerSelectionChange(newSelection);\n    }\n\n    /**\n     * Deselect all (filtered) items\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * // get\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    public deselectAllItems(ignoreFilter?: boolean) {\n        const newSelection = this.filteredData.length === this.data.length || ignoreFilter ?\n            this.selection.get_empty() :\n            this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData));\n        this.triggerSelectionChange(newSelection);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboFilterConditionPipe, IgxComboGroupingPipe,\n        IgxComboFilteringPipe, IgxComboSortingPipe, IgxComboDropDownComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective],\n    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxComboModule { }\n","import { DOCUMENT } from '@angular/common';\nimport { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-title,[igxDialogTitle]'\n})\nexport class IgxDialogTitleDirective {\n\n    @HostBinding('class.igx-dialog__window-title')\n    public defaultStyle = true;\n }\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-actions,[igxDialogActions]'\n})\nexport class IgxDialogActionsDirective {\n\n    @HostBinding('class.igx-dialog__window-actions')\n    public defaultClass = true;\n }\n","import { useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxDialogActionsDirective, IgxDialogTitleDirective } from './dialog.directives';\nimport { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, GlobalPositionStrategy, NoOpScrollStrategy, PositionSettings } from '../services';\nimport { slideInBottom, slideOutTop } from '../animations/slide/index';\n\nlet DIALOG_ID = 0;\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-dialog',\n    template: `<div tabindex=\"0\" #dialog class=\"igx-dialog\" igxToggle (click)=\"onDialogSelected($event)\">\n    <div #dialogWindow class=\"igx-dialog__window\"  [attr.role]=\"role\" [attr.aria-labelledby]=\"titleId\">\n\n        <div *ngIf=\"title\" [attr.id]=\"titleId\" class=\"igx-dialog__window-title\">\n            {{ title }}\n        </div>\n        <ng-content *ngIf=\"!title\" select=\"igx-dialog-title,[igxDialogTitle]\"></ng-content>\n\n        <div class=\"igx-dialog__window-content\" *ngIf=\"message\">{{ message }}</div>\n        <ng-content *ngIf=\"!message\"></ng-content>\n\n        <div *ngIf=\"leftButtonLabel || rightButtonLabel\" class=\"igx-dialog__window-actions\">\n            <button *ngIf=\"leftButtonLabel\" type=\"button\" igxButton=\"{{ leftButtonType }}\" igxButtonColor=\"{{ leftButtonColor }}\" igxButtonBackground=\"{{ leftButtonBackgroundColor }}\"\n                igxRipple=\"{{ leftButtonRipple }}\" (click)=\"onInternalLeftButtonSelect($event)\">\n                {{ leftButtonLabel }}\n            </button>\n            <button *ngIf=\"rightButtonLabel\" type=\"button\" igxButton=\"{{ rightButtonType }}\" igxButtonColor=\"{{ rightButtonColor }}\" igxButtonBackground=\"{{ rightButtonBackgroundColor }}\"\n                igxRipple=\"{{ rightButtonRipple }}\" (click)=\"onInternalRightButtonSelect($event)\">\n                {{ rightButtonLabel }}\n            </button>\n        </div>\n        <ng-content *ngIf=\"!leftButtonLabel && !rightButtonLabel\" select=\"igx-dialog-actions,[igxDialogActions]\"></ng-content>\n\n    </div>\n</div>\n`\n})\nexport class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private static NEXT_ID = 1;\n    private static readonly DIALOG_CLASS = 'igx-dialog';\n\n    @ViewChild(IgxToggleDirective)\n    public toggleRef: IgxToggleDirective;\n\n    /**\n    * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n    *```html\n    *<igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\" leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-dialog-${DIALOG_ID++}`;\n\n    @Input()\n    get isModal() {\n        return this._isModal;\n    }\n\n    set isModal(val: boolean) {\n        this._overlayDefaultSettings.modal = val;\n        this._isModal = val;\n    }\n\n    /**\n    * An @Input property controlling the `title` of the dialog.\n    *```html\n    *<igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @Input()\n    public title = '';\n\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     *```html\n     *<igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public message = '';\n\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     *```html\n     *<igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonLabel = '';\n\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonType = 'flat';\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonColor = '';\n\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonRipple = '';\n\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     *```html\n     *<igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonLabel = '';\n\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonType = 'flat';\n\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonColor = '';\n\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the right button `ripple`.\n     *```html\n     *<igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonRipple = '';\n\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     *```html\n     *<igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     *rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     *</igx-dialog>\n     *```\n     */\n    @Input()\n    get closeOnOutsideSelect() {\n        return this._closeOnOutsideSelect;\n    }\n\n    set closeOnOutsideSelect(val: boolean) {\n        this._overlayDefaultSettings.closeOnOutsideClick = val;\n        this._closeOnOutsideSelect = val;\n    }\n\n    /**\n     * An event that is emitted when the dialog is opened.\n     *```html\n     *<igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the dialog is closed.\n     *```html\n     *<igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the left button is clicked.\n     *```html\n     *<igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onLeftButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     *<igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     *#dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     *rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onRightButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    private _animaitonSettings: PositionSettings = {\n        openAnimation: useAnimation(slideInBottom, {params: {fromPosition: 'translateY(100%)'}}),\n        closeAnimation: useAnimation(slideOutTop, {params: {toPosition: 'translateY(-100%)'}})\n    };\n\n    private _overlayDefaultSettings: OverlaySettings;\n    private _closeOnOutsideSelect = false;\n    private _isModal = true;\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    private _titleId: string;\n\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogState = this.dialog.state;\n     *}\n     *```\n     */\n    get state(): string {\n        return this.isOpen ? 'open' : 'close';\n    }\n\n    /**\n     * Returns whether the dialog is visible to the end user.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogOpen = this.dialog.isOpen;\n     *}\n     * ```\n     */\n    @Input()\n    get isOpen() {\n        return !this.toggleRef.collapsed;\n    }\n\n    @HostBinding('class.igx-dialog--hidden')\n    get isCollapsed() {\n        return this.toggleRef.collapsed;\n    }\n\n    /**\n     *Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogRole = this.dialog.role;\n     *}\n     * ```\n     */\n    @Input()\n    get role() {\n        if (this.leftButtonLabel !== '' && this.rightButtonLabel !== '') {\n            return 'dialog';\n        } else if (\n            this.leftButtonLabel !== '' ||\n            this.rightButtonLabel !== ''\n        ) {\n            return 'alertdialog';\n        } else {\n            return 'alert';\n        }\n    }\n\n    /**\n     *Returns the value of the title id.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogTitle = this.dialog.titleId;\n     *}\n     * ```\n     */\n    @Input()\n    get titleId() {\n        return this._titleId;\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService\n    ) {\n        this._titleId = IgxDialogComponent.NEXT_ID++ + '_title';\n\n        this._overlayDefaultSettings = {\n            positionStrategy: new GlobalPositionStrategy(this._animaitonSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: this.isModal,\n            closeOnOutsideClick: this.closeOnOutsideSelect\n        };\n    }\n\n    ngAfterContentInit() {\n        this.toggleRef.onClosing.pipe(takeUntil(this.destroy$)).subscribe(() => this.emitCloseFromDialog());\n    }\n\n    private emitCloseFromDialog() {\n        this.onClose.emit({ dialog: this, event: null });\n    }\n\n    /**\n     * A method that opens the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public open(overlaySettings: OverlaySettings = this._overlayDefaultSettings) {\n        if (this.isOpen) {\n            return;\n        }\n\n        this.toggleRef.open(overlaySettings);\n        this.onOpen.emit({ dialog: this, event: null });\n    }\n\n    /**\n     *A method that that closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public close() {\n        if (!this.isOpen) {\n            return;\n        }\n        // `onClose` will emit from `toggleRef.onClosing` subscription\n        this.toggleRef.close();\n    }\n\n\n    /**\n     * A method that opens/closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDialogSelected(event) {\n        event.stopPropagation();\n        if (\n            this.isOpen &&\n            this.closeOnOutsideSelect &&\n            event.target.classList.contains(IgxDialogComponent.DIALOG_CLASS)\n        ) {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalLeftButtonSelect(event) {\n        this.onLeftButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalRightButtonSelect(event) {\n        this.onRightButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n\n    }\n\n}\n\nexport interface IDialogEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\n\n/**\n * The IgxDialogComponent provides {@link IgxDialogComponent} inside your application.\n */\n\n@NgModule({\n    declarations: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    exports: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    imports: [CommonModule, IgxToggleModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxDialogModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ContentChild,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    HostListener,\n    ElementRef,\n    TemplateRef,\n    Directive\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    IgxCalendarComponent,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarModule,\n    IgxCalendarSubheaderTemplateDirective,\n    WEEKDAYS\n} from '../calendar/index';\nimport { IgxDialogComponent, IgxDialogModule } from '../dialog/dialog.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputDirective } from '../input-group/index';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings } from '../services';\nimport { DeprecateClass } from '../core/deprecateDecorators';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\n\n@Directive({\n    selector: '[igxDatePickerTemplate]'\n})\nexport class IgxDatePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Date Picker** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)\n *\n * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.\n *\n * Example:\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\n@Component({\n    providers:\n        [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxDatePickerComponent, multi: true }],\n    // tslint:disable-next-line:component-selector\n    selector: 'igx-datePicker, igx-date-picker',\n    styles: [':host {display: block;}'],\n    template: `<div [ngClass]=\"{'igx-date-picker': !vertical, 'igx-date-picker--vertical': vertical}\">\n    <ng-template #defaultDatePickerTemplate>\n        <igx-input-group (click)=\"openDialog()\">\n            <igx-prefix>\n                <igx-icon>today</igx-icon>\n            </igx-prefix>\n            <label *ngIf=\"labelVisibility\" igxLabel>{{label}}</label>\n            <input class=\"igx-date-picker__input-date\" igxInput [value]=\"displayData\" [disabled]=\"disabled\" readonly />\n        </igx-input-group>\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\n    <igx-dialog class=\"igx-date-picker__dialog-popup\" closeOnOutsideSelect=\"true\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"alert.close()\"\n        [rightButtonLabel]=\"todayButtonLabel\" (onRightButtonSelect)=\"triggerTodaySelection()\">\n        <ng-container #container></ng-container>\n    </igx-dialog>\n</div>\n`\n})\n@DeprecateClass('\\'igx-datePicker\\' selector is deprecated. Use \\'igx-date-picker\\' selector instead.')\nexport class IgxDatePickerComponent implements ControlValueAccessor, EditorProvider, OnInit, OnDestroy {\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-date-picker-${NEXT_ID++}`;\n\n    /**\n     *An @Input property that applies custom formatter on the selected or passed date.\n     *```typescript\n     *public date: Date = new Date();\n     *private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     *private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *public formatter = (date: Date) => { return `You selected\n     *                     ${this.dayFormatter.format(date)},\n     *                     ${date.getDate()} ${this.monthFormatter.format(date)},\n     *                     ${date.getFullYear()}`;\n     *}\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public formatter: (val: Date) => string;\n\n    /**\n     *An @Input property that disables the `IgxDatePickerComponent`.\n     *```html\n     *<igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     *An @Input property that sets the selected date.\n     *```typescript\n     *public date: Date = new Date();\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public value: Date;\n\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label.\n     * The default label is 'Date'.\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public label = 'Date';\n\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label visibility.\n     * By default the visibility is set to true.\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    @Input()\n    public labelVisibility = true;\n\n    /**\n     *An @Input property that sets locales. Default locale is en.\n     *```html\n     *<igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input() public locale: string = Constants.DEFAULT_LOCALE_DATE;\n\n    /**\n     *An @Input property that sets on which day the week starts.\n     *```html\n     *<igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input() public weekStart: WEEKDAYS | number = WEEKDAYS.SUNDAY;\n\n    /**\n     *Returns the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatOptions = this.datePicker.formatOptions;\n     *}\n     *```\n     */\n    @Input()\n    public get formatOptions(): IFormatOptions {\n        return this._formatOptions;\n    }\n    /**\n     *Sets the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Options;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Options = {\n     *        day: \"numeric\",\n     *        month: \"long\",\n     *        weekday: \"long\",\n     *        year: \"numeric\"\n     *    }\n     *this.datePicker.formatOptions = this.Options;\n     *}\n     *```\n     */\n    public set formatOptions(formatOptions: IFormatOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n    }\n\n    /**\n     *Returns the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatViews = this.datePicker.formatViews;\n     *}\n     *```\n     */\n    @Input()\n    public get formatViews(): IFormatViews {\n        return this._formatViews;\n    }\n\n    /**\n     *Sets the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Views;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Views = {day:false, month: false, year:false};\n     *    this.datePicker.formatViews = this.Views;\n     *}\n     *```\n     */\n    public set formatViews(formatViews: IFormatViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * ```\n     */\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.disabledDates = [\n     *      new DateRangeDescriptor(DateRangeType.Between, [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]),\n     *      new DateRangeDescriptor(DateRangeType.Weekends)];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * ```\n     */\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.specialDates = [\n     *      new DateRangeDescriptor(DateRangeType.Between, [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]),\n     *      new DateRangeDescriptor(DateRangeType.Weekends)];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     *An @Input proeprty that sets the orientation of the `IgxDatePickerComponent` header.\n     *```html\n     *<igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     *An @Input property that renders today button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public todayButtonLabel: string;\n\n    /**\n     *An @Input property that renders cancel button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public cancelButtonLabel: string;\n\n    /**\n     *An event that is emitted when the `IgxDatePickerComponent` is opened.\n     *```typescript\n     *public open(event){\n     *    alert(\"The date-picker has been opened!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onOpen)=\"open($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     *\"An event that is emitted when the `IgxDatePickerComponent` is closed.\n     *```typescript\n     *public close(event){\n     *    alert(\"The date-picker has been closed!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onClose)=\"close($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IgxDatePickerComponent>();\n    /**\n     *An @Output property that is fired when selection is made in the calendar.\n     *```typescript\n     *public selection(event){\n     *    alert(\"A date has been selected!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onSelection)=\"selection($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /*\n     * @hidden\n     */\n    @ViewChild('defaultDatePickerTemplate', { read: TemplateRef })\n    protected defaultDatePickerTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective })\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n\n    /**\n     *Returns the formatted date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *public selection(event){\n     *    let selectedDate = this.datePicker.displayData;\n     *    alert(selectedDate);\n     *}\n     *```\n     *```html\n     *<igx-date-picker #MyDatePicker (onSelection)=\"selection()\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    public get displayData() {\n        if (this.value) {\n            return this._customFormatChecker(this.formatter, this.value);\n        }\n\n        return '';\n    }\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective })\n\n    public headerTemplate: IgxCalendarHeaderTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective })\n    public subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('container', { read: ViewContainerRef })\n    public container: ViewContainerRef;\n\n    /**\n     *@hidden\n     */\n    @ViewChild(IgxDialogComponent)\n    public alert: IgxDialogComponent;\n\n    /**\n     *@hidden\n     */\n    public calendarRef: ComponentRef<IgxCalendarComponent>;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     *@hidden\n     */\n    public get calendar() {\n        return this.calendarRef.instance;\n    }\n\n    protected destroy$ = new Subject<boolean>();\n\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n\n    private _disabledDates: DateRangeDescriptor[] = null;\n\n    private _specialDates: DateRangeDescriptor[] = null;\n\n    @ViewChild(IgxInputDirective) protected input: IgxInputDirective;\n\n    constructor(private resolver: ComponentFactoryResolver) { }\n\n    /**\n     *Method that sets the selected date.\n     *```typescript\n     *public date = new Date();\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.writeValue(this.date);\n     *}\n     *```\n     *@param value The date you want to select.\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public writeValue(value: Date) {\n        this.value = value;\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this.input.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        this.alert.onOpen.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._focusTheDialog());\n        this.alert.toggleRef.onClosed.pipe(takeUntil(this.destroy$)).subscribe((ev) => this.handleDialogCloseAction());\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     *Selects today's date from calendar and change the input field value, @calendar.viewDate and @calendar.value.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.triggerTodaySelection();\n     *}\n     *```\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public triggerTodaySelection() {\n        const today = new Date(Date.now());\n        this.handleSelection(today);\n    }\n\n    /**\n     * Change the calendar selection and calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.selectDate(this.date);\n     *}\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public selectDate(date: Date) {\n        this.value = date;\n        this.onSelection.emit(date);\n        this._onChangeCallback(date);\n    }\n\n    /**\n     * Deselects the calendar date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.deselectDate();\n     *}\n     * ```\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public deselectDate() {\n        this.value = null;\n        this._onChangeCallback(null);\n    }\n\n    /**\n     * Open the dialog and update the calendar.\n     *\n     * @hidden\n     */\n    public openDialog(): void {\n        this.createCalendarRef();\n        if (this.outlet) {\n            const overlaySettings: OverlaySettings = {\n                outlet: this.outlet\n            };\n            this.alert.open(overlaySettings);\n        } else {\n            this.alert.open();\n        }\n        this._onTouchedCallback();\n        this.onOpen.emit(this);\n    }\n\n    private createCalendarRef(): void {\n        const factory = this.resolver.resolveComponentFactory(IgxCalendarComponent);\n\n        this.calendarRef = this.container.createComponent(factory);\n\n        this.calendarRef.changeDetectorRef.detach();\n        this.updateCalendarInstance();\n        this.calendarRef.location.nativeElement.classList.add('igx-date-picker__date--opened');\n        this.calendarRef.changeDetectorRef.reattach();\n    }\n\n    /**\n     * Closes the dialog, after was clearing all calendar items from dom.\n     *\n     * @hidden\n     */\n    public handleDialogCloseAction() {\n        this.onClose.emit(this);\n        this.calendarRef.destroy();\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden\n     */\n    public handleSelection(date: Date) {\n        if (this.value !== null && this.value !== undefined) {\n            date.setHours(this.value.getHours());\n            date.setMinutes(this.value.getMinutes());\n            date.setSeconds(this.value.getSeconds());\n            date.setMilliseconds(this.value.getMilliseconds());\n        }\n\n        this.value = date;\n        this.calendar.viewDate = date;\n        this._onChangeCallback(date);\n        this.alert.close();\n        this.onSelection.emit(date);\n    }\n\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onSpaceClick(event) {\n        this.openDialog();\n        event.preventDefault();\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.datePickerTemplateDirective) {\n            return this.datePickerTemplateDirective.template;\n        }\n        return this.defaultDatePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayData: this.displayData,\n            openDialog: () => { this.openDialog(); }\n        };\n    }\n\n    private updateCalendarInstance() {\n        this.calendar.formatOptions = this._formatOptions;\n        this.calendar.formatViews = this._formatViews;\n        this.calendar.locale = this.locale;\n        this.calendar.vertical = this.vertical;\n        this.calendar.disabledDates = this.disabledDates;\n        this.calendar.specialDates = this.specialDates;\n\n        if (this.headerTemplate) {\n            this.calendar.headerTemplate = this.headerTemplate;\n        }\n\n        if (this.subheaderTemplate) {\n            this.calendar.subheaderTemplate = this.subheaderTemplate;\n        }\n\n        if (this.value) {\n            this.calendar.value = this.value;\n            this.calendar.viewDate = this.value;\n        }\n        this.calendar.weekStart = this.weekStart;\n        this.calendar.onSelection.pipe(takeUntil(this.destroy$)).subscribe((ev: Date) => this.handleSelection(ev));\n    }\n\n    // Focus the dialog element, after its appearence into DOM.\n    private _focusTheDialog() {\n        requestAnimationFrame(() => this.alert.toggleRef.element.focus());\n    }\n\n    private _setLocaleToDate(value: Date, locale: string = Constants.DEFAULT_LOCALE_DATE): string {\n        return value.toLocaleDateString(locale);\n    }\n\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker(formatter: (_: Date) => string, date: Date) {\n        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date, this.locale);\n    }\n\n    private _onTouchedCallback: () => void = () => { };\n\n    private _onChangeCallback: (_: Date) => void = () => { };\n}\n\nclass Constants {\n    public static readonly DEFAULT_LOCALE_DATE = 'en';\n}\n\n/**\n * The IgxDatePickerModule provides the {@link IgxDatePickerComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxDatePickerComponent, IgxDatePickerTemplateDirective],\n    entryComponents: [IgxCalendarComponent],\n    exports: [IgxDatePickerComponent, IgxDatePickerTemplateDirective],\n    imports: [CommonModule, IgxIconModule, IgxInputGroupModule, IgxDialogModule, IgxCalendarModule]\n})\nexport class IgxDatePickerModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { cloneArray, isEqual, mergeObjects } from '../core/utils';\nimport { DataUtil, DataType } from '../data-operations/data-util';\nimport { IFilteringExpression, FilteringLogic } from '../data-operations/filtering-expression.interface';\nimport { IGroupByExpandState } from '../data-operations/groupby-expand-state.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { IGridEditEventArgs, IgxGridBaseComponent } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { Transaction, TransactionType } from '../services/index';\nimport { ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { SortingStateDefaults } from '../data-operations/sorting-state.interface';\n/**\n *@hidden\n */\n@Injectable()\nexport class GridBaseAPIService <T extends IgxGridBaseComponent> {\n\n    public change: Subject<any> = new Subject<any>();\n    protected state: Map<string, T> = new Map<string, T>();\n    protected editCellState: Map<string, any> = new Map<string, any>();\n    protected editRowState: Map<string, { rowID: any, rowIndex: number }> = new Map();\n    protected summaryCacheMap: Map<string, Map<string, any[]>> = new Map<string, Map<string, any[]>>();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    public register(grid: T) {\n        this.state.set(grid.id, grid);\n        this.destroyMap.set(grid.id, new Subject<boolean>());\n    }\n\n    public unsubscribe(grid: T) {\n        this.state.delete(grid.id);\n    }\n\n    public get(id: string): T {\n        return this.state.get(id);\n    }\n\n    public unset(id: string) {\n        this.state.delete(id);\n        this.summaryCacheMap.delete(id);\n        this.editCellState.delete(id);\n        this.editRowState.delete(id);\n        this.destroyMap.delete(id);\n    }\n\n    public reset(oldId: string, newId: string) {\n        const destroy = this.destroyMap.get(oldId);\n        const summary = this.summaryCacheMap.get(oldId);\n        const editCellState = this.editCellState.get(oldId);\n        const editRowState = this.editRowState.get(oldId);\n        const grid = this.get(oldId);\n\n        this.unset(oldId);\n\n        if (grid) {\n            this.state.set(newId, grid);\n        }\n\n        if (destroy) {\n            this.destroyMap.set(newId, destroy);\n        }\n\n        if (summary) {\n            this.summaryCacheMap.set(newId, summary);\n        }\n\n        if (editCellState) {\n            this.editCellState.set(newId, editCellState);\n        }\n\n        if (editRowState) {\n            this.editRowState.set(newId, editRowState);\n    }\n    }\n\n    public get_column_by_name(id: string, name: string): IgxColumnComponent {\n        return this.get(id).columnList.find((col) => col.field === name);\n    }\n\n    public set_summary_by_column_name(id: string, name: string) {\n        if (!this.summaryCacheMap.get(id)) {\n            this.summaryCacheMap.set(id, new Map<string, any[]>());\n        }\n        const column = this.get_column_by_name(id, name);\n        const grid = this.get(id);\n        let data = grid.filteredData;\n        if (!data) {\n            if (grid.transactions.enabled) {\n                data = DataUtil.mergeTransactions(\n                    cloneArray(grid.data),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey\n                );\n            } else {\n                data = grid.data;\n            }\n        }\n        if (data) {\n            const columnValues = data.map((rec) => rec[column.field]);\n            this.calculateSummaries(id, column, columnValues);\n        }\n    }\n\n    public get_summaries(id: string) {\n        return this.summaryCacheMap.get(id);\n    }\n\n    public remove_summary(id: string, name?: string) {\n        if (this.summaryCacheMap.has(id)) {\n            if (!name) {\n                this.summaryCacheMap.delete(id);\n            } else {\n                this.summaryCacheMap.get(id).delete(name);\n            }\n        }\n    }\n\n    public set_cell_inEditMode(gridId: string, cell: IgxGridCellComponent) {\n        const grid = this.get(gridId);\n        const args: IGridEditEventArgs = {\n            rowID: cell.cellID.rowID,\n            cellID: cell.cellID,\n            oldValue: cell.value,\n            cancel: false\n        };\n        grid.onCellEditEnter.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        if (grid.rowEditable) {\n            const currentEditRow = this.get_edit_row_state(gridId);\n            if (currentEditRow && currentEditRow.rowID !== cell.cellID.rowID) {\n                grid.endEdit(true);\n                grid.startRowEdit(cell.cellID);\n            }\n            if (!currentEditRow) {\n                grid.startRowEdit(cell.cellID);\n            }\n        }\n\n        if (!this.get_cell_inEditMode(gridId)) {\n            const cellCopy = Object.assign({}, cell);\n            cellCopy.row = Object.assign({}, cell.row);\n        this.editCellState.set(gridId, { cellID: cell.cellID, cell: cellCopy });\n        }\n    }\n\n    public escape_editMode(gridId, cellId?) {\n        const editableCell = this.get_cell_inEditMode(gridId);\n        if (editableCell) {\n            if (cellId) {\n                if (cellId.rowID === editableCell.cellID.rowID &&\n                    cellId.columnID === editableCell.cellID.columnID) {\n                    this.editCellState.delete(gridId);\n                }\n            } else {\n                const grid = this.get(gridId);\n                this.editCellState.delete(gridId);\n            }\n        }\n\n        this.get(gridId).refreshSearch();\n    }\n\n\n    public get_cell_inEditMode(gridId): {\n        cellID: {\n            rowID: any,\n            columnID: number,\n            rowIndex: number\n        },\n        cell: any\n    } {\n        const editCellId = this.editCellState.get(gridId);\n        if (editCellId) {\n            return editCellId;\n        } else {\n            return null;\n        }\n    }\n\n    public get_row_index_in_data(id: string, rowID: any): number {\n        const grid = this.get(id) as IgxGridBaseComponent;\n        if (!grid) {\n            return -1;\n        }\n        const data = this.get_all_data(id);\n        return grid.primaryKey ? data.findIndex(record => record[grid.primaryKey] === rowID) : data.indexOf(rowID);\n    }\n\n    public get_row_by_key(id: string, rowSelector: any): IgxRowComponent<IgxGridBaseComponent> {\n        const primaryKey = this.get(id).primaryKey;\n        if (primaryKey !== undefined && primaryKey !== null) {\n            return this.get(id).dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);\n        } else {\n            return this.get(id).dataRowList.find((row) => row.rowData === rowSelector);\n        }\n    }\n\n    public get_row_by_index(id: string, rowIndex: number): IgxRowComponent<IgxGridBaseComponent> {\n        return this.get(id).rowList.find((row) => row.index === rowIndex);\n    }\n\n    public get_edit_row_state(gridId): {\n        rowID: any,\n        rowIndex: number\n    } {\n        const editRow = this.editRowState.get(gridId);\n        return editRow ? editRow : null;\n\n    }\n\n    public set_edit_row_state(gridId, row: { rowID: any, rowIndex: number }) {\n        if (!row) {\n            this.editRowState.delete(gridId);\n        } else {\n            this.editRowState.set(gridId, row);\n        }\n    }\n\n\n    public get_cell_by_key(id: string, rowSelector: any, field: string): IgxGridCellComponent {\n        const row = this.get_row_by_key(id, rowSelector);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.column.field === field);\n        }\n    }\n\n    public get_cell_by_index(id: string, rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(id, rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.columnIndex === columnIndex);\n        }\n    }\n\n    public get_cell_by_visible_index(id: string, rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(id, rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);\n        }\n    }\n\n    public submit_value(gridId) {\n        const editableCell = this.get_cell_inEditMode(gridId);\n        if (editableCell) {\n            const gridEditState = this.create_grid_edit_args(gridId, editableCell.cellID.rowID,\n                editableCell.cellID.columnID, editableCell.cell.editValue);\n            if (!editableCell.cell.column.inlineEditorTemplate && editableCell.cell.column.dataType === 'number') {\n                if (!editableCell.cell.editValue) {\n                    gridEditState.args.newValue = 0;\n                    this.update_cell(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID, 0, gridEditState);\n                } else {\n                    const val = parseFloat(editableCell.cell.editValue);\n                    if (!isNaN(val) || isFinite(val)) {\n                        gridEditState.args.newValue = val;\n                        this.update_cell(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID, val, gridEditState);\n                    }\n                }\n            } else {\n                this.update_cell(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID,\n                    editableCell.cell.editValue, gridEditState);\n            }\n            if (gridEditState.args.cancel) {\n                return;\n            }\n            this.escape_editMode(gridId, editableCell.cellID);\n        }\n    }\n\n    public create_grid_edit_args(id: string, rowID, columnID, editValue): {\n        args: IGridEditEventArgs,\n        isRowSelected: boolean,\n        rowData: any\n    } {\n        const grid = this.get(id);\n        const data = this.get_all_data(id);\n        const isRowSelected = grid.selection.is_item_selected(id, rowID);\n        const editableCell = this.get_cell_inEditMode(id);\n        const column = grid.columnList.toArray()[columnID];\n        columnID = columnID !== undefined && columnID !== null ? columnID : null;\n        let cellObj;\n        if (columnID !== null) {\n            if ((editableCell && editableCell.cellID.rowID === rowID && editableCell.cellID.columnID === columnID)) {\n                cellObj = editableCell;\n            } else {\n                cellObj = grid.columnList.toArray()[columnID].cells.find((cell) => cell.cellID.rowID === rowID);\n            }\n        }\n        let rowIndex = this.get_row_index_in_data(id, rowID);\n        let oldValue: any;\n        let rowData: any;\n        if (rowIndex !== -1) {\n            oldValue = columnID !== null ? data[rowIndex][column.field] : null;\n            rowData = data[rowIndex];\n        }\n\n        //  if we have transactions and add row was edited look for old value and row data in added rows\n        if (rowIndex < 0 && grid.transactions.enabled) {\n            const dataWithTransactions = grid.dataWithAddedInTransactionRows;\n            rowIndex = grid.primaryKey ?\n            dataWithTransactions.map((record) => record[grid.primaryKey]).indexOf(rowID) :\n            dataWithTransactions.indexOf(rowID);\n            if (rowIndex !== -1) {\n                //  Check if below change will work on added rows with transactions\n                // oldValue = this.get_all_data(id, true)[rowIndex][column.field];\n                // rowData = this.get_all_data(id, true)[rowIndex];\n                oldValue = columnID !== null ? dataWithTransactions[rowIndex][column.field] : null;\n                rowData = dataWithTransactions[rowIndex];\n            }\n        }\n        const args = {\n            rowID,\n                oldValue: oldValue,\n                newValue: editValue,\n                cancel: false\n        };\n        if (cellObj) {\n            Object.assign(args, {\n                cellID: cellObj.cellID\n            });\n        }\n        return {\n            args,\n            isRowSelected,\n            rowData\n        };\n    }\n\n    //  TODO: refactor update_cell. Maybe separate logic in two methods - one with transaction\n    //  and one without transaction\n    public update_cell(id: string, rowID, columnID, editValue, gridEditState?: {\n        args: IGridEditEventArgs,\n        isRowSelected: boolean,\n        rowData: any\n    }): void {\n        const grid = this.get(id);\n        const data = this.get_all_data(id);\n        const currentGridEditState = gridEditState || this.create_grid_edit_args(id, rowID, columnID, editValue);\n        const emittedArgs = currentGridEditState.args;\n        const column = grid.columnList.toArray()[columnID];\n        const rowIndex = this.get_row_index_in_data(id, rowID);\n\n        if (emittedArgs.oldValue !== undefined && currentGridEditState.rowData !== undefined) {\n            grid.onCellEdit.emit(emittedArgs);\n            if (emittedArgs.cancel) {\n                return;\n            }\n            //  if we are editing the cell for second or next time, get the old value from transaction\n            const oldValueInTransaction = grid.transactions.getAggregatedValue(rowID, true);\n            if (oldValueInTransaction) {\n                emittedArgs.oldValue = oldValueInTransaction[column.field];\n            }\n\n            //  if edit (new) value is same as old value do nothing here\n            if (emittedArgs.oldValue !== undefined\n                && isEqual(emittedArgs.oldValue, emittedArgs.newValue)) { return; }\n            const transaction: Transaction = {\n                id: rowID, type: TransactionType.UPDATE, newValue: { [column.field]: emittedArgs.newValue }\n            };\n            if (grid.transactions.enabled) {\n                grid.transactions.add(transaction, currentGridEditState.rowData);\n            } else {\n                const rowValue = this.get_all_data(id)[rowIndex];\n                mergeObjects(rowValue, {[column.field]: emittedArgs.newValue });\n            }\n            if (grid.primaryKey === column.field && currentGridEditState.isRowSelected) {\n                grid.selection.deselect_item(id, rowID);\n                grid.selection.select_item(id, emittedArgs.newValue);\n            }\n            if (!grid.rowEditable || !grid.rowInEditMode || grid.rowInEditMode.rowID !== rowID) {\n                (grid as any)._pipeTrigger++;\n            }\n        }\n    }\n\n    public update_row(value: any, id: string, rowID: any, gridState?: {\n        args: IGridEditEventArgs,\n        isRowSelected: boolean,\n        rowData: any\n    }): void {\n        const grid = this.get(id);\n        const data = this.get_all_data(id);\n        const currentGridState = gridState ? gridState : this.create_grid_edit_args(id, rowID, null, value);\n        const emitArgs = currentGridState.args;\n        const index = this.get_row_index_in_data(id, rowID);\n        const currentRowInEditMode = this.get_edit_row_state(id);\n        let oldValue = Object.assign({}, data[index]);\n        if (grid.currentRowState && grid.currentRowState[grid.primaryKey] === rowID\n            || currentRowInEditMode && currentRowInEditMode.rowID === rowID) {\n            oldValue = Object.assign(oldValue, grid.currentRowState);\n        } else if (grid.transactions.enabled) {\n            // If transactions are enabled, old value == last commited value (as it's not applied in data yet)\n            const lastCommitedValue = // Last commited value (w/o pending)\n                grid.transactions.getState(rowID) ? Object.assign({}, grid.transactions.getState(rowID).value) : null;\n            oldValue = lastCommitedValue ? Object.assign(oldValue, lastCommitedValue) : oldValue;\n        }\n        Object.assign(emitArgs, { oldValue, rowID});\n        if (index !== -1) {\n            grid.onRowEdit.emit(emitArgs);\n            if (emitArgs.cancel) {\n                return;\n            }\n            if (currentRowInEditMode) {\n                grid.transactions.endPending(false);\n            }\n            if (grid.transactions.enabled && emitArgs.newValue !== null) {\n                grid.transactions.add({id: rowID, newValue: emitArgs.newValue, type: TransactionType.UPDATE}, emitArgs.oldValue);\n            } else if (emitArgs.newValue !== null && emitArgs.newValue !== undefined) {\n                Object.assign(data[index], emitArgs.newValue);\n            }\n            if (currentGridState.isRowSelected) {\n                grid.selection.deselect_item(id, rowID);\n                const newRowID = (grid.primaryKey) ? emitArgs.newValue[grid.primaryKey] : emitArgs.newValue;\n                grid.selection.select_item(id, newRowID);\n            }\n            (grid as any)._pipeTrigger++;\n        }\n    }\n\n    protected update_row_in_array(id: string, value: any, rowID: any, index: number) {\n        const grid = this.get(id);\n        grid.data[index] = value;\n    }\n\n    public sort(id: string, fieldName: string, dir: SortingDirection, ignoreCase: boolean, strategy: ISortingStrategy): void {\n        if (dir === SortingDirection.None) {\n            this.remove_grouping_expression(id, fieldName);\n        }\n        const sortingState = cloneArray(this.get(id).sortingExpressions);\n        strategy = strategy ? strategy : this.getSortStrategyPerColumn(id, fieldName);\n        this.prepare_sorting_expression([sortingState], { fieldName, dir, ignoreCase, strategy });\n        this.get(id).sortingExpressions = sortingState;\n    }\n\n    public sort_multiple(id: string, expressions: ISortingExpression[]): void {\n        const sortingState = cloneArray(this.get(id).sortingExpressions);\n\n        for (const each of expressions) {\n            if (each.dir === SortingDirection.None) {\n                this.remove_grouping_expression(id, each.fieldName);\n            }\n            each.strategy = each.strategy ? each.strategy : this.getSortStrategyPerColumn(id, each.fieldName);\n            this.prepare_sorting_expression([sortingState], each);\n        }\n\n        this.get(id).sortingExpressions = sortingState;\n    }\n\n    public filter(id: string, fieldName: string, term, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase: boolean) {\n        const grid = this.get(id);\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        const fieldFilterIndex = filteringTree.findIndex(fieldName);\n        if (fieldFilterIndex > -1) {\n            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);\n        }\n\n        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase);\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public filter_global(id, term, condition, ignoreCase) {\n        const grid = this.get(id);\n        const filteringTree = grid.filteringExpressionsTree;\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        filteringTree.filteringOperands = [];\n        this.remove_summary(id);\n\n        if (condition) {\n            for (const column of grid.columns) {\n                this.prepare_filtering_expression(filteringTree, column.field, term,\n                    condition, ignoreCase || column.filteringIgnoreCase);\n            }\n        }\n\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public clear_filter(id, fieldName) {\n        if (fieldName) {\n            const column = this.get_column_by_name(id, fieldName);\n            if (!column) {\n                return;\n            }\n        }\n\n        const grid = this.get(id);\n        const filteringState = grid.filteringExpressionsTree;\n        const index = filteringState.findIndex(fieldName);\n\n        if (index > -1) {\n            filteringState.filteringOperands.splice(index, 1);\n            this.remove_summary(id, fieldName);\n        } else {\n            filteringState.filteringOperands = [];\n            this.remove_summary(id);\n        }\n\n        grid.filteredData = null;\n        grid.filteringExpressionsTree = filteringState;\n    }\n\n    protected calculateSummaries(id: string, column, data) {\n        if (!this.summaryCacheMap.get(id).get(column.field)) {\n            this.summaryCacheMap.get(id).set(column.field,\n                column.summaries.operate(data));\n        }\n    }\n\n    public clear_sort(id, fieldName) {\n        const sortingState = this.get(id).sortingExpressions;\n        const index = sortingState.findIndex((expr) => expr.fieldName === fieldName);\n        if (index > -1) {\n            sortingState.splice(index, 1);\n            this.get(id).sortingExpressions = sortingState;\n        }\n    }\n\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal,\n        conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean) {\n\n        let newExpressionsTree;\n        const oldExpressionsTreeIndex = filteringState.findIndex(fieldName);\n        const expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            conditionOrExpressionsTree as IFilteringExpressionsTree : null;\n        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            null : conditionOrExpressionsTree as IFilteringOperation;\n        const newExpression: IFilteringExpression = { fieldName, searchVal, condition, ignoreCase };\n\n        if (oldExpressionsTreeIndex === -1) {\n            // no expressions tree found for this field\n            if (expressionsTree) {\n                filteringState.filteringOperands.push(expressionsTree);\n            } else if (condition) {\n                // create expressions tree for this field and add the new expression to it\n                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);\n                newExpressionsTree.filteringOperands.push(newExpression);\n                filteringState.filteringOperands.push(newExpressionsTree);\n            }\n        }\n    }\n\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression) {\n        if (expression.dir === SortingDirection.None) {\n            stateCollections.forEach(state => {\n                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);\n            });\n            return;\n        }\n\n        /**\n         * We need to make sure the states in each collection with same fields point to the same object reference.\n         * If the different state collections provided have different sizes we need to get the largest one.\n         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.\n         */\n        let maxCollection = stateCollections[0];\n        for (let i = 1; i < stateCollections.length; i++) {\n            if (maxCollection.length < stateCollections[i].length) {\n                maxCollection = stateCollections[i];\n            }\n        }\n        const maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);\n\n        stateCollections.forEach(collection => {\n            const myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);\n            if (!myExpr && !maxExpr) {\n                // Expression with this fieldName is missing from the current and the max collection.\n                collection.push(expression);\n            } else if (!myExpr && maxExpr) {\n                // Expression with this fieldName is missing from the current and but the max collection has.\n                collection.push(maxExpr);\n                Object.assign(maxExpr, expression);\n            } else {\n                // The current collection has the expression so just update it.\n                Object.assign(myExpr, expression);\n            }\n        });\n    }\n\n    protected remove_grouping_expression(id, fieldName) {\n        }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number;\n    }\n\n    public get_all_data(id: string, transactions?: boolean): any[] {\n        const grid = this.get(id);\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.data;\n        return data ? data : [];\n    }\n\n    protected getSortStrategyPerColumn(id: string, fieldName: string) {\n        return this.get_column_by_name(this.get(id).id, fieldName) ?\n            this.get_column_by_name(id, fieldName).sortStrategy : undefined;\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { isNavigationKey, valToPxlsUsingRange } from '../core/utils';\nimport { State } from '../services/index';\nimport { IgxGridBaseComponent, IGridEditEventArgs } from './grid-base.component';\nimport { first } from 'rxjs/operators';\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.Default,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-cell',\n    template: `<ng-template #defaultCell igxTextHighlight [cssClass]=\"highlightClass\" [activeCssClass]=\"activeHighlightClass\" [groupName]=\"gridID\"\n        [value]=\"formatter ? formatter(value) : value\" [row]=\"rowIndex\" [column]=\"this.column.visibleIndex\" [page]=\"this.grid.page\" [containerClass]=\"'igx-grid__td-text'\">\n    <ng-container *ngIf=\"column.dataType === 'boolean' || column.dataType === 'string' || formatter; else default\" >\n        <div class=\"igx-grid__td-text\">{{ formatter ? formatter(value) : value }}</div>\n    </ng-container>\n    <ng-template #default>\n        <div class=\"igx-grid__td-text\">{{ column.dataType === 'number' ? (value | igxdecimal) : (value | igxdate) }}</div>\n    </ng-template>\n</ng-template>\n<ng-template #inlineEditor  let-cell=\"cell\">\n    <ng-container *ngIf=\"column.dataType === 'string'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input igxInput [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'number'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input igxInput [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\" type=\"number\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'boolean'\">\n        <igx-checkbox [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [checked]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\" [disableRipple]=\"true\"></igx-checkbox>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'date'\">\n        <igx-datePicker [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\" [labelVisibility]=\"false\"></igx-datePicker>\n    </ng-container>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template; context: context\">\n</ng-container>\n`\n})\nexport class IgxGridCellComponent implements OnInit, AfterViewInit {\n\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public row: any;\n\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public cellTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightClass = 'igx-highlight';\n\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public activeHighlightClass = 'igx-highlight__active';\n\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get formatter(): (value: any) => any {\n        return this.column.formatter;\n    }\n\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any {\n        return {\n            $implicit: this.value,\n            cell: this\n        };\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.inEditMode) {\n            const inlineEditorTemplate = this.column.inlineEditorTemplate;\n            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;\n        }\n        if (this.cellTemplate) {\n            return this.cellTemplate;\n        }\n        return this.defaultCellTemplate;\n    }\n\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any {\n        return this.row.gridID;\n    }\n\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any {\n        return this.gridAPI.get(this.gridID);\n    }\n\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-rowIndex')\n    get rowIndex(): number {\n        return this.row.index;\n    }\n\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number {\n        return this.column.index;\n    }\n\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-visibleIndex')\n    get visibleColumnIndex(): number {\n        return this.column.visibleIndex;\n    }\n\n    /**\n     * Gets the `index` of the unpinned column in which the cell is stored.\n     * ```typescript\n     * let unpinnedColumnIndex = this.cell.ununpinnedColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get unpinnedColumnIndex(): number {\n        return this.grid.unpinnedColumns.filter(c => !c.columnGroup).indexOf(this.column);\n    }\n\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get cellID() {\n        const primaryKey = this.grid.primaryKey;\n        const rowID = primaryKey ? this.row.rowData[primaryKey] : this.row.rowData;\n        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };\n    }\n\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Gets whether the cell is in edit mode.\n     * ```typescript\n     * let isCellInEditMode = this.cell.inEditMode;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get inEditMode(): boolean {\n        const editableCell = this.gridAPI.get_cell_inEditMode(this.gridID);\n        if (editableCell) {\n            return this.cellID.rowID === editableCell.cellID.rowID &&\n                this.cellID.columnID === editableCell.cellID.columnID;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Enables/disables the edit mode of the cell\n     * ```typescript\n     * this.cell.inEditMode = true;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    set inEditMode(value: boolean) {\n        if (this.row.deleted) {\n            return;\n        }\n        if (this.column.editable && value) {\n            this.editValue = this.value;\n            this.gridAPI.set_cell_inEditMode(this.gridID, this);\n            if (this.highlight && this.grid.lastSearchInfo.searchText) {\n                this.highlight.observe();\n            }\n        } else {\n            this.gridAPI.escape_editMode(this.gridID, this.cellID);\n        }\n        this.cdr.detectChanges();\n        this.grid.cdr.markForCheck();\n    }\n\n    /**\n     * Sets/get the `tabindex` property of the cell.\n     * Default value is `0`.\n     * ```typescript\n     * this.cell.tabindex = 1;\n     * ```\n     * ```typescript\n     * let cellTabIndex = this.cell.tabindex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'gridcell';\n\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-readonly')\n    get readonly(): boolean {\n        return !this.column.editable;\n    }\n\n    /**\n * @hidden\n */\n    @HostBinding('style.min-height.px')\n    get minHeight() {\n        return this.grid ? this.grid.rowHeight : 32;\n    }\n\n    /**\n     * Returns a string containing the grid `id` and the column `field` concatenated by \"_\".\n     * ```typescript\n     * let describedBy = this.cell.describedBy;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedby(): string {\n        return `${this.row.gridID}_${this.column.field}`;\n    }\n\n    /**\n     * Gets the style classes of the cell.\n     * ```typescript\n     * let cellStyleClasses = this.cell.styleClasses.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveStyleClasses();\n    }\n\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        const hasVerticalScroll = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const colWidth = this.column.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (colWidth && !isPercentageWidth) {\n            let cellWidth = this.isLastUnpinned && hasVerticalScroll ?\n                parseInt(colWidth, 10) - 18 + '' : colWidth;\n\n            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {\n                cellWidth += 'px';\n            }\n\n            return cellWidth;\n        } else {\n            return colWidth;\n        }\n    }\n\n    /**\n     * Gets whether the cell is stored in a pinned column.\n     * ```typescript\n     * let isPinned = this.cell.isPinned;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get isPinned() {\n        return this.column.pinned;\n    }\n\n    /**\n     * Gets whether the cell is stored in the last column in the pinned area.\n     * ```typescript\n     * let isLastPinned = this.cell.isLastPinned;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get isLastPinned() {\n        const pinnedCols = this.grid.pinnedColumns;\n        return pinnedCols[pinnedCols.length - 1] === this.column;\n    }\n\n    /**\n     * Gets whether the cell is stored in the last column in the unpinned area.\n     * ```typescript\n     * let isLastUnpinned = this.cell.isLastUnpinned;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get isLastUnpinned() {\n        const unpinnedColumns = this.grid.unpinnedColumns;\n        return unpinnedColumns[unpinnedColumns.length - 1] === this.column;\n    }\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get selected() {\n        return this.isSelected = this.isCellSelected();\n    }\n\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-selected')\n    set selected(val: boolean) {\n        this.isSelected = val;\n    }\n\n    get dirty() {\n        if (this.grid.rowEditable) {\n            const rowCurrentState = this.grid.transactions.getAggregatedValue(this.row.rowID, false);\n            if (rowCurrentState) {\n                return rowCurrentState && rowCurrentState[this.column.field];\n            }\n        } else {\n            const rowTransaction: State = this.grid.transactions.getState(this.row.rowID);\n            return rowTransaction && rowTransaction.value && rowTransaction.value[this.column.field];\n        }\n\n        return false;\n    }\n    @ViewChild('defaultCell', { read: TemplateRef })\n    protected defaultCellTemplate: TemplateRef<any>;\n\n    @ViewChild('inlineEditor', { read: TemplateRef })\n    protected inlineEditorTemplate: TemplateRef<any>;\n\n    @ViewChild(IgxTextHighlightDirective, { read: IgxTextHighlightDirective })\n    private highlight: IgxTextHighlightDirective;\n\n    /**\n     * @hidden\n     */\n    public editValue;\n    public focused = false;\n    protected isSelected = false;\n    private cellSelectionID: string;\n    private prevCellSelectionID: string;\n    private previousCellEditMode = false;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        public selection: IgxSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private element: ElementRef) { }\n\n    public _updateCellSelectionStatus(fireFocus = true, event) {\n        if (this.selected) {\n            return;\n        }\n        this._clearCellSelection();\n        this._saveCellSelection();\n        const hasFilteredResults = this.grid.filteredData ? this.grid.filteredData.length > 0 : true;\n        if (hasFilteredResults) {\n            if (this.column.editable && this.previousCellEditMode && hasFilteredResults) {\n                this.inEditMode = true;\n            }\n            if (!this.inEditMode && this.gridAPI.get_edit_row_state(this.gridID)) {\n                // If there is a row being edited & this cell did not enter edit mode (!editable, row.deleted)\n                this.grid.endEdit(true);\n            }\n            this.selected = true;\n            if (fireFocus) {\n                this.nativeElement.focus();\n            }\n            this.grid.onSelection.emit({ cell: this, event });\n        }\n    }\n\n    private _clearCellSelection() {\n        const cell = this._getLastSelectedCell();\n        if (cell) {\n            cell.selected = false;\n            cell.focused = false;\n        }\n        const editCell = this.gridAPI.get_cell_inEditMode(this.gridID);\n        if (editCell) {\n            if (editCell.cell.column.field === this.grid.primaryKey) {\n                if (editCell.cellID.rowIndex === this.cellID.rowIndex && editCell.cellID.columnID === this.cellID.columnID) {\n                    this.previousCellEditMode = false;\n                } else {\n                    this.previousCellEditMode = true;\n                    this.gridAPI.submit_value(this.gridID);\n                }\n            } else {\n                this.previousCellEditMode = true;\n                this.gridAPI.submit_value(this.gridID);\n            }\n        } else {\n            this.previousCellEditMode = false;\n        }\n        this._saveCellSelection(this.selection.get_empty());\n    }\n\n    private _saveCellSelection(newSelection?: Set<any>) {\n        const sel = this.selection.get(this.cellSelectionID);\n        if (sel && sel.size > 0) {\n            this.selection.set(this.prevCellSelectionID, sel);\n        }\n        if (!newSelection) {\n            newSelection = this.selection.add_item(this.cellSelectionID, this.cellID);\n        }\n        this.selection.set(this.cellSelectionID, newSelection);\n    }\n\n    private _getLastSelectedCell() {\n        const cellID = this.selection.first_item(this.cellSelectionID);\n        if (cellID) {\n            return this.gridAPI.get_cell_by_index(this.gridID, cellID.rowIndex, cellID.columnID);\n        }\n    }\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public isCellSelected() {\n        const selectedCellID = this.selection.first_item(this.cellSelectionID);\n        if (selectedCellID) {\n            return this.cellID.rowID === selectedCellID.rowID &&\n                this.cellID.columnID === selectedCellID.columnID;\n        }\n        return false;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        this.cellSelectionID = `${this.gridID}-cell`;\n        this.prevCellSelectionID = `${this.gridID}-prev-cell`;\n    }\n\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public update(val: any) {\n        const rowSelector = this.cellID.rowID;\n        const editableCell = this.gridAPI.get_cell_inEditMode(this.gridID);\n        const gridEditState = this.gridAPI.create_grid_edit_args(this.gridID, rowSelector, this.cellID.columnID, val);\n        this.gridAPI.update_cell(this.gridID, rowSelector, this.cellID.columnID, val, gridEditState);\n        if (editableCell && editableCell.cellID.rowID === this.cellID.rowID\n            && editableCell.cellID.columnID === this.cellID.columnID) {\n            if (gridEditState.args.cancel) {\n                return;\n            }\n            this.gridAPI.escape_editMode(this.gridID, editableCell.cellID);\n        }\n        this.cdr.markForCheck();\n        this.grid.refreshSearch();\n    }\n\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        if (this.highlight && this.grid.lastSearchInfo.searchText) {\n            this.highlight.highlight(this.grid.lastSearchInfo.searchText,\n                this.grid.lastSearchInfo.caseSensitive,\n                this.grid.lastSearchInfo.exactMatch);\n            this.highlight.activateIfNecessary();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('dblclick', ['$event'])\n    public onDoubleClick(event) {\n        if (this.column.editable) {\n            this.inEditMode = true;\n        }\n\n        this.grid.onDoubleClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        this.grid.onCellClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('contextmenu', ['$event'])\n    public onContextMenu(event) {\n        this.grid.onContextMenu.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.focused = true;\n        this.row.focused = true;\n        if (!this.selected) {\n            this._updateCellSelectionStatus(false, event);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.focused = false;\n        this.row.focused = false;\n    }\n\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (!this.isKeySupportedInCell(key)) {\n            return;\n        }\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n\n        if (key === 'tab') {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        if (this.gridAPI.get_cell_inEditMode(this.gridID)) {\n            event.stopPropagation();\n        }\n\n        if (this.inEditMode && isNavigationKey(key)) {\n            return;\n        }\n\n        if (isNavigationKey(key)) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        if (event.altKey) {\n            if (this.row.nativeElement.tagName.toLowerCase() === 'igx-tree-grid-row' && this.isToggleKey(key)) {\n                const collapse = (this.row as any).expanded && (key === 'left' || key === 'arrowleft');\n                const expand = !(this.row as any).expanded && (key === 'right' || key === 'arrowright');\n                if (collapse) {\n                    (this.gridAPI as any).trigger_row_expansion_toggle(\n                        this.gridID, this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n                } else if (expand) {\n                    (this.gridAPI as any).trigger_row_expansion_toggle(\n                        this.gridID, this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n                }\n            return;\n            }\n        }\n\n        const args = {cell: this, groupRow: null, event: event, cancel: false };\n        this.grid.onFocusChange.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        switch (key) {\n            case 'tab':\n                if (shift) {\n                    this.grid.navigation.performShiftTabKey(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.performTab(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n                break;\n            case 'home':\n            case 'arrowleft':\n            case 'left':\n                if (ctrl && key === 'home') {\n                    this.grid.navigation.goToFirstCell();\n                    return;\n                }\n                if (ctrl || key === 'home') {\n                    this.grid.navigation.onKeydownHome(this.rowIndex);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.rowIndex, this.visibleColumnIndex);\n                break;\n            case 'end':\n            case 'arrowright':\n            case 'right':\n                if (ctrl && key === 'end') {\n                    this.grid.navigation.goToLastCell();\n                    return;\n                }\n                if (ctrl || key === 'end') {\n                    this.grid.navigation.onKeydownEnd(this.rowIndex);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.rowIndex, this.visibleColumnIndex);\n                break;\n            case 'arrowup':\n            case 'up':\n                if (ctrl) {\n                    this.grid.navigation.navigateTop(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateUp(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n                break;\n            case 'arrowdown':\n            case 'down':\n                if (ctrl) {\n                    this.grid.navigation.navigateBottom(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateDown(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n                break;\n            case 'enter':\n            case 'f2':\n                this.onKeydownEnterEditMode(event);\n                break;\n            case 'escape':\n            case 'esc':\n                this.onKeydownExitEditMode(event);\n                break;\n            case ' ':\n            case 'spacebar':\n            case 'space':\n                if (this.row.rowSelectable) {\n                    this.row.checkboxElement.toggle();\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    public onKeydownEnterEditMode(event) {\n        if (this.column.editable) {\n            if (this.inEditMode) {\n                this.grid.endEdit(true);\n                this.nativeElement.focus();\n            } else {\n                this.inEditMode = true;\n            }\n        }\n    }\n\n    public onKeydownExitEditMode(event) {\n        if (this.column.editable) {\n            const editableCell = this;\n            const args: IGridEditEventArgs = {\n                cellID: editableCell.cellID,\n                rowID: editableCell.cellID.rowID,\n                oldValue: editableCell.value,\n                newValue: editableCell.editValue,\n                cancel: false\n            };\n            this.grid.onCellEditCancel.emit(args);\n            if (args.cancel) {\n                return;\n            }\n            this.grid.endEdit(false);\n            this.inEditMode = false;\n            this.nativeElement.focus();\n        }\n    }\n\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;\n    }\n\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public clearHighlight() {\n        if (this.highlight && this.column.searchable) {\n            this.highlight.clearHighlight();\n        }\n    }\n    private isKeySupportedInCell(key) {\n        return isNavigationKey(key) || key === 'tab' || key === 'enter' || key === 'f2' || key === 'escape' || key === 'esc';\n\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveStyleClasses(): string {\n        const defaultClasses = ['igx-grid__td igx-grid__td--fw'];\n\n        if (this.column.cellClasses) {\n            Object.entries(this.column.cellClasses).forEach(([name, cb]) => {\n                const value = typeof cb === 'function' ? (cb as any)(this.row.rowData, this.column.field) : cb;\n                if (value) {\n                    defaultClasses.push(name);\n                }\n            }, this);\n        }\n\n        const classList = {\n            'igx_grid__cell--edit': this.inEditMode,\n            'igx-grid__td--number': this.gridAPI.should_apply_number_style(this.column),\n            'igx-grid__td--editing': this.inEditMode,\n            'igx-grid__th--pinned': this.column.pinned,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__td--selected': this.selected,\n            'igx-grid__td--edited': this.dirty\n        };\n\n        Object.entries(classList).forEach(([klass, value]) => {\n            if (value) {\n                defaultClasses.push(klass);\n            }\n        });\n        return defaultClasses.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        return Math.max(...Array.from(this.nativeElement.children)\n                   .map((child) => valToPxlsUsingRange(range, child)));\n    }\n\n    private isToggleKey(key) {\n        return ['left', 'right', 'arrowleft', 'arrowright'].indexOf(key.toLowerCase()) !== -1;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    Input,\n    QueryList,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { TransactionType, State } from '../services';\nimport { IgxGridBaseComponent } from './grid-base.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-row',\n    template: `<ng-container *ngIf=\"grid.groupingExpressions.length > 0\">\n    <div class=\"igx-grid__row-indentation igx-grid__row-indentation--level-{{grid.groupingExpressions.length}}\"></div>\n</ng-container>\n<ng-container *ngIf=\"rowSelectable\">\n    <div class=\"igx-grid__cbx-selection\">\n        <igx-checkbox [checked]=\"isSelected\" (change)=\"onCheckboxClick($event)\" disableRipple=\"true\" [aria-label]=\"rowCheckboxAriaLabel\"></igx-checkbox>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"pinnedColumns.length > 0\">\n    <igx-grid-cell *ngFor=\"let col of notGroups(pinnedColumns)\" [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\"></igx-grid-cell>\n</ng-container>\n<ng-template igxGridFor let-col [igxGridForOf]=\"notGroups(unpinnedColumns)\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]='grid.unpinnedWidth' [igxForTrackBy]='grid.trackColumnChanges' #igxDirRef>\n    <igx-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\"></igx-grid-cell>\n</ng-template>\n`\n})\nexport class IgxRowComponent<T extends IgxGridBaseComponent> implements DoCheck {\n\n    private _rowData: any;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public get rowData(): any {\n        if (this.inEditMode) {\n            return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));\n        }\n        return this._rowData;\n    }\n\n    public set rowData(v: any) {\n        this._rowData = v;\n    }\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent })\n    public checkboxElement: IgxCheckboxComponent;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxGridCellComponent), { read: IgxGridCellComponent })\n    public cells: QueryList<IgxGridCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveClasses();\n    }\n\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[] {\n        return this.grid.visibleColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowSelectable() {\n        return this.grid.rowSelectable;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-selected')\n    public isSelected: boolean;\n\n    /** @hidden */\n    public get dirty(): boolean {\n        const row: State = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;\n        }\n\n        return false;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.isRowDeleted();\n    }\n\n    public get inEditMode(): boolean {\n        if (this.grid.rowEditable) {\n            const editRowState = this.gridAPI.get_edit_row_state(this.gridID);\n            return (editRowState && editRowState.rowID === this.rowID) || false;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T {\n        return this.gridAPI.get(this.gridID);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowID() {\n        // A row in the grid is identified either by:\n        // primaryKey data value,\n        // or if the primaryKey is omitted, then the whole rowData is used instead.\n        const primaryKey = this.grid.primaryKey;\n        return primaryKey ? this._rowData[primaryKey] : this._rowData;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public focused = false;\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__tr';\n\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n\n    constructor(public gridAPI: GridBaseAPIService<T>,\n        private selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n\n    /**\n     * @hidden\n     */\n    public onCheckboxClick(event) {\n        const newSelection = (event.checked) ?\n            this.selection.add_item(this.gridID, this.rowID) :\n            this.selection.delete_item(this.gridID, this.rowID);\n        this.grid.triggerRowSelectionChange(newSelection, this, event);\n    }\n\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    public update(value: any) {\n        const editableCell = this.gridAPI.get_cell_inEditMode(this.gridID);\n        if (editableCell && editableCell.cellID.rowID === this.rowID) {\n            this.grid.endEdit(false);\n        }\n        this.gridAPI.update_row(value, this.gridID, this.rowID);\n        this.cdr.markForCheck();\n        this.grid.refreshSearch();\n    }\n\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    public delete() {\n        this.grid.deleteRowById(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel() {\n        return this.grid.primaryKey ?\n            this.isSelected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :\n            this.isSelected ? 'Deselect row' : 'Select row';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isSelected = this.rowSelectable ?\n            this.grid.allRowsSelected ? true : this.selection.is_item_selected(this.gridID, this.rowID) :\n            this.selection.is_item_selected(this.gridID, this.rowID);\n        this.cdr.markForCheck();\n        if (this.checkboxElement) {\n            this.checkboxElement.checked = this.isSelected;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    notGroups(arr) {\n        return arr.filter(c => !c.columnGroup);\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;\n        const selectedClass = this.isSelected ? 'igx-grid__tr--selected' : '';\n        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';\n        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';\n        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';\n        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass} ${deletedClass}`.trim();\n    }\n\n    protected isRowDeleted(): boolean {\n        const state: State = this.grid.transactions.getState(this.rowID);\n        if (state) {\n            return state.type === TransactionType.DELETE;\n        }\n\n        return false;\n    }\n}\n","import { DataUtil } from '../data-operations/data-util';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nexport interface ISummaryExpression {\n    fieldName: string;\n    customSummary?: any;\n}\nexport interface IgxSummaryResult {\n    key: string;\n    label: string;\n    summaryResult: any;\n}\n\nexport class IgxSummaryOperand {\n    /**\n     * Counts all the records in the data source.\n     * If filtering is applied, counts only the filtered records.\n     * ```typescript\n     * IgxSummaryOperand.count(dataSource);\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public static count(data: any[]): any {\n        return data.length;\n    }\n    /**\n     * Executes the static `count` method and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomSummary extends IgxSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"test\",\n     *       label: \"Test\",\n     *       summaryResult: IgxSummaryOperand.count(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomSummary;\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        return [{\n            key: 'count',\n            label: 'Count',\n            summaryResult: IgxSummaryOperand.count(data)\n        }];\n    }\n}\n\n// @dynamic\nexport class IgxNumberSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the minimum numeric value in the provided data records.\n     * If filtering is applied, returns the minimum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.min(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static min(data: any[]): any {\n        return data.length ? data.reduce((a, b) => Math.min(a, b)) : [];\n    }\n    /**\n     * Returns the maximum numeric value in the provided data records.\n     * If filtering is applied, returns the maximum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.max(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static max(data: any[]): any {\n        return data.length ? data.reduce((a, b) => Math.max(a, b)) : [];\n    }\n    /**\n     * Returns the sum of the numeric values in the provided data records.\n     * If filtering is applied, returns the sum of the numeric values in the data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.sum(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static sum(data: any[]): any {\n        return data.length ? data.reduce((a, b) => +a + +b) : [];\n    }\n    /**\n     * Returns the average numeric value in the data provided data records.\n     * If filtering is applied, returns the average numeric value in the filtered data records.\n     * ```typescript\n     * IgxSummaryOperand.average(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static average(data: any[]): any {\n        return data.length ? this.sum(data) / this.count(data) : [];\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomNumberSummary extends IgxNumberSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"avg\",\n     *       label: \"Avg\",\n     *       summaryResult: IgxNumberSummaryOperand.average(data)\n     *     });\n     *     result.push({\n     *       key: \"max\",\n     *       label: \"Max\",\n     *       summaryResult: IgxNumberSummaryOperand.max(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomNumberSummary;\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'min',\n            label: 'Min',\n            summaryResult: IgxNumberSummaryOperand.min(data)\n        });\n        result.push({\n            key: 'max',\n            label: 'Max',\n            summaryResult: IgxNumberSummaryOperand.max(data)\n        });\n        result.push({\n            key: 'sum',\n            label: 'Sum',\n            summaryResult: IgxNumberSummaryOperand.sum(data)\n        });\n        result.push({\n            key: 'average',\n            label: 'Avg',\n            summaryResult: IgxNumberSummaryOperand.average(data)\n        });\n        return result;\n    }\n}\n\n// @dynamic\nexport class IgxDateSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the latest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.latest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static latest(data: any[]) {\n        return data.sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())[0];\n    }\n    /**\n     * Returns the earliest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.earliest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static earliest(data: any[]) {\n        return data.sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())[data.length - 1];\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomDateSummary extends IgxDateSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"latest\",\n     *       label: \"Latest Date\",\n     *       summaryResult: IgxDateSummaryOperand.latest(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomDateSummary;\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'earliest',\n            label: 'Earliest',\n            summaryResult: IgxDateSummaryOperand.earliest(data)\n        });\n        result.push({\n            key: 'latest',\n            label: 'Latest',\n            summaryResult: IgxDateSummaryOperand.latest(data)\n        });\n        return result;\n    }\n}\n","import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Injectable,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    TemplateRef\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Observable, Subject } from 'rxjs';\nimport { map, switchMap, takeUntil, throttle } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxDragDirective, IgxDropDirective } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { ConnectedPositioningStrategy } from '../services';\nimport { getPointFromPositionsSettings, VerticalAlignment, PositionSettings } from '../services/overlay/utilities';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizer]'\n})\nexport class IgxColumnResizerDirective implements OnInit, OnDestroy {\n\n    @Input()\n    public restrictHResizeMin: number = Number.MIN_SAFE_INTEGER;\n\n    @Input()\n    public restrictHResizeMax: number = Number.MAX_SAFE_INTEGER;\n\n    @Input()\n    public resizeEndTimeout = 0;\n\n    @Output()\n    public resizeEnd = new Subject<any>();\n\n    @Output()\n    public resizeStart = new Subject<any>();\n\n    @Output()\n    public resize = new Subject<any>();\n\n    private _left;\n    private _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, @Inject(DOCUMENT) public document, public zone: NgZone) {\n\n        this.resizeStart.pipe(\n            map((event) => event.clientX),\n            takeUntil(this._destroy),\n            switchMap((offset) => this.resize.pipe(\n                map((event) => event.clientX - offset),\n                takeUntil(this.resizeEnd),\n                takeUntil(this._destroy)\n            ))\n        ).subscribe((pos) => {\n            const left = this._left + pos;\n\n            this.left = left < this.restrictHResizeMin ? this.restrictHResizeMin + 'px' : left + 'px';\n\n            if (left > this.restrictHResizeMax) {\n                this.left = this.restrictHResizeMax + 'px';\n            } else if (left > this.restrictHResizeMin) {\n                this.left = left + 'px';\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.document.defaultView, 'mousedown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMousedown(res));\n\n            fromEvent(this.document.defaultView, 'mousemove').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy)\n            ).subscribe((res) => this.onMousemove(res));\n\n            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMouseup(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.unsubscribe();\n    }\n\n    public set left(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.left = val);\n    }\n\n    onMouseup(event) {\n        setTimeout(() => {\n            this.resizeEnd.next(event);\n            this.resizeEnd.complete();\n        }, this.resizeEndTimeout);\n    }\n\n    onMousedown(event) {\n        this.resizeStart.next(event);\n        event.preventDefault();\n\n        const elStyle = this.document.defaultView.getComputedStyle(this.element.nativeElement);\n        this._left = Number.isNaN(parseInt(elStyle.left, 10)) ? 0 : parseInt(elStyle.left, 10);\n    }\n\n    onMousemove(event) {\n        this.resize.next(event);\n        event.preventDefault();\n    }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCell]'\n})\nexport class IgxCellTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeader]'\n})\nexport class IgxCellHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxFooter]'\n})\nexport class IgxCellFooterTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCellEditor]'\n})\nexport class IgxCellEditorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxColumnMovingService {\n    private _icon: any;\n    private _column: IgxColumnComponent;\n\n    public cancelDrop: boolean;\n    public selection: {\n        column: IgxColumnComponent,\n        rowID: any\n    };\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n    set column(val: IgxColumnComponent) {\n        if (val) {\n            this._column = val;\n        }\n    }\n\n    get icon(): any {\n        return this._icon;\n    }\n    set icon(val: any) {\n        if (val) {\n            this._icon = val;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport enum DropPosition {\n    BeforeDropTarget,\n    AfterDropTarget,\n    None\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrag]'\n})\nexport class IgxColumnMovingDragDirective extends IgxDragDirective {\n\n    @Input('igxColumnMovingDrag')\n    set data(val: IgxColumnComponent) {\n        this._column = val;\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get draggable(): boolean {\n        return this.column && (this.column.movable || this.column.groupable);\n    }\n\n    public get icon(): HTMLElement {\n        return this.cms.icon;\n    }\n\n    private _column: IgxColumnComponent;\n    private _ghostImageClass = 'igx-grid__drag-ghost-image';\n    private _dragGhostImgIconClass = 'igx-grid__drag-ghost-image-icon';\n    private _dragGhostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';\n\n    @HostListener('document:keydown.escape', ['$event'])\n    public onEscape(event) {\n        this.cms.cancelDrop = true;\n        this.onPointerUp(event);\n    }\n\n    constructor(\n        _element: ElementRef,\n        _zone: NgZone,\n        _renderer: Renderer2,\n        _cdr: ChangeDetectorRef,\n        private cms: IgxColumnMovingService,\n    ) {\n        super(_cdr, _element, _zone, _renderer);\n    }\n\n    public onPointerDown(event) {\n\n        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._removeOnDestroy = false;\n        this.cms.column = this.column;\n        this.ghostImageClass = this._ghostImageClass;\n\n        super.onPointerDown(event);\n\n        this.column.grid.isColumnMoving = true;\n        this.column.grid.cdr.detectChanges();\n\n        const currSelection = this.column.grid.selection.first_item(this.column.gridID + '-cell');\n        if (currSelection) {\n            this.cms.selection = {\n                column: this.column.grid.columnList.toArray()[currSelection.columnID],\n                rowID: currSelection.rowID\n            };\n        }\n\n        const args = {\n            source: this.column\n        };\n        this.column.grid.onColumnMovingStart.emit(args);\n    }\n\n    public onPointerMove(event) {\n        event.preventDefault();\n        super.onPointerMove(event);\n\n        if (this._dragStarted && this._dragGhost && !this.column.grid.draggedColumn) {\n            this.column.grid.draggedColumn = this.column;\n            this.column.grid.cdr.detectChanges();\n        }\n\n        if (this.column.grid.isColumnMoving) {\n            const args = {\n                source: this.column,\n                cancel: false\n            };\n            this.column.grid.onColumnMoving.emit(args);\n\n            if (args.cancel) {\n                this.onEscape(event);\n            }\n        }\n    }\n\n    public onPointerUp(event) {\n        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.\n        this.zone.run(() => {\n            super.onPointerUp(event);\n\n            this.column.grid.isColumnMoving = false;\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        });\n    }\n\n    protected createDragGhost(event) {\n        super.createDragGhost(event);\n\n        let pageX, pageY;\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            pageX = event.pageX;\n            pageY = event.pageY;\n        } else {\n            pageX = event.touches[0].pageX;\n            pageY = event.touches[0].pageY;\n        }\n\n        this._dragGhost.style.height = null;\n        this._dragGhost.style.minWidth = null;\n        this._dragGhost.style.flexBasis = null;\n        this._dragGhost.style.position = null;\n\n        const icon = document.createElement('i');\n        const text = document.createTextNode('block');\n        icon.appendChild(text);\n\n        icon.classList.add('material-icons');\n        this.cms.icon = icon;\n\n        if (!this.column.columnGroup) {\n            this.renderer.addClass(icon, this._dragGhostImgIconClass);\n\n            this._dragGhost.removeChild(this._dragGhost.children[2]);\n            this._dragGhost.insertBefore(icon, this._dragGhost.children[1]);\n\n            this.left = this._dragStartX = pageX - ((this._dragGhost.getBoundingClientRect().width / 3) * 2);\n            this.top = this._dragStartY = pageY - ((this._dragGhost.getBoundingClientRect().height / 3) * 2);\n        } else {\n            this._dragGhost.removeChild(this._dragGhost.children[2]);\n            this._dragGhost.removeChild(this._dragGhost.firstElementChild);\n            this._dragGhost.removeChild(this._dragGhost.lastElementChild);\n            this._dragGhost.insertBefore(icon, this._dragGhost.firstElementChild);\n\n            this.renderer.addClass(icon, this._dragGhostImgIconGroupClass);\n            this._dragGhost.children[1].style.paddingLeft = '0px';\n\n            this.left = this._dragStartX = pageX - ((this._dragGhost.getBoundingClientRect().width / 3) * 2);\n            this.top = this._dragStartY = pageY - ((this._dragGhost.getBoundingClientRect().height / 3) * 2);\n        }\n    }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrop]'\n})\nexport class IgxColumnMovingDropDirective extends IgxDropDirective implements OnDestroy {\n    @Input('igxColumnMovingDrop')\n    set data(val: any) {\n        if (val instanceof IgxColumnComponent) {\n            this._column = val;\n        }\n\n        if (val instanceof IgxGridForOfDirective) {\n            this._hVirtDir = val;\n        }\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get isDropTarget(): boolean {\n        return this._column && this._column.grid.hasMovableColumns;\n    }\n\n    get horizontalScroll(): any {\n        if (this._hVirtDir) {\n            return this._hVirtDir;\n        }\n    }\n\n    private _dropPos: DropPosition;\n    private _dropIndicator: any = null;\n    private _lastDropIndicator: any = null;\n    private _column: IgxColumnComponent;\n    private _hVirtDir: IgxGridForOfDirective<any>;\n    private _dragLeave = new Subject<boolean>();\n    private _dropIndicatorClass = 'igx-grid__th-drop-indicator--active';\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone, private cms: IgxColumnMovingService) {\n        super(elementRef, renderer, zone);\n    }\n\n    public ngOnDestroy() {\n        this._dragLeave.next(true);\n        this._dragLeave.complete();\n    }\n\n    public onDragOver(event) {\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n            if (this._lastDropIndicator) {\n                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n\n            const pos = this.elementRef.nativeElement.getBoundingClientRect().left + parseFloat(this.column.width) / 2;\n\n            if (event.detail.pageX < pos) {\n                this._dropPos = DropPosition.BeforeDropTarget;\n                this._lastDropIndicator = this._dropIndicator = this.elementRef.nativeElement.firstElementChild;\n            } else {\n                this._dropPos = DropPosition.AfterDropTarget;\n                this._lastDropIndicator = this._dropIndicator = this.elementRef.nativeElement.lastElementChild;\n            }\n\n            if (this.cms.icon.innerText !== 'block') {\n                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n        }\n    }\n\n    public onDragEnter(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n                if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {\n                    this.cms.icon.innerText = 'swap_horiz';\n                }\n\n                if (!this.cms.column.pinned && this.column.pinned) {\n                    const nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n\n                    if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                        this.cms.icon.innerText = 'lock';\n                    } else {\n                        this.cms.icon.innerText = 'block';\n                    }\n                }\n            } else {\n                this.cms.icon.innerText = 'block';\n            }\n\n            if (this.horizontalScroll) {\n                this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';\n\n                interval(100).pipe(takeUntil(this._dragLeave)).subscribe((val) => {\n                    event.target.id === 'right' ? this.horizontalScroll.getHorizontalScroll().scrollLeft += 15 :\n                        this.horizontalScroll.getHorizontalScroll().scrollLeft -= 15;\n                });\n            }\n    }\n\n    public onDragLeave(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        this.cms.icon.innerText = 'block';\n\n        if (this._dropIndicator) {\n            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n    }\n\n    public onDragDrop(event) {\n        event.preventDefault();\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n\n        if (this.isDropTarget) {\n            const args = {\n                source: this.cms.column,\n                target: this.column\n            };\n\n            let nextPinnedWidth;\n            if (this.column.pinned && !this.cms.column.pinned) {\n                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n            }\n\n            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||\n                this.column.level !== this.cms.column.level ||\n                this.column.parent !== this.cms.column.parent ||\n                this.cms.cancelDrop) {\n                    this.cms.cancelDrop = false;\n                    this.column.grid.onColumnMovingEnd.emit(args);\n                    return;\n            }\n\n            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);\n\n            if (this.cms.selection && this.cms.selection.column) {\n                const colID = this.column.grid.columnList.toArray().indexOf(this.cms.selection.column);\n\n                this.column.grid.selection.set(this.column.gridID + '-cell', new Set([{\n                    rowID: this.cms.selection.rowID,\n                    columnID: colID\n                }]));\n\n                const cell = this.column.grid.getCellByKey(this.cms.selection.rowID, this.cms.selection.column.field);\n\n                if (cell) {\n                    cell.nativeElement.focus();\n                }\n\n                this.cms.selection = null;\n            }\n\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        }\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdate'\n})\nexport class IgxDatePipeComponent extends DatePipe implements PipeTransform {\n    transform(value: any): string {\n        if (value && value instanceof Date) {\n            return super.transform(value);\n        } else {\n            return value;\n        }\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdecimal'\n})\nexport class IgxDecimalPipeComponent extends DecimalPipe implements PipeTransform {\n    transform(value: any): string {\n        if (value && typeof value === 'number') {\n            return super.transform(value);\n        } else {\n            return value;\n        }\n    }\n}\n\nexport interface ContainerPositionSettings extends PositionSettings {\n    container?: HTMLElement;\n}\n\nexport class ContainerPositioningStrategy extends ConnectedPositioningStrategy {\n    isTop = false;\n    isTopInitialPosition = null;\n    public settings: ContainerPositionSettings;\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        const container = this.settings.container; // grid.tbody\n        const target = <HTMLElement>this.settings.target; // current grid.row\n        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);\n\n        // Position of the overlay depends on the available space in the grid.\n        // If the bottom space is not enough then the the row overlay will show at the top of the row.\n        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),\n        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).\n        this.isTop = this.isTopInitialPosition !== null ?\n            this.isTopInitialPosition :\n            container.clientHeight <\n            target.offsetTop + target.getBoundingClientRect().height + contentElement.getBoundingClientRect().height;\n        this.settings.verticalStartPoint = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;\n        const startPoint = getPointFromPositionsSettings(this.settings, contentElement.parentElement);\n        contentElement.style.top = startPoint.y + (this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom) * size.height + 'px';\n        contentElement.style.width = target.clientWidth + 'px';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Input,\n    QueryList,\n    TemplateRef,\n    forwardRef,\n    AfterViewInit\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxDateSummaryOperand, IgxNumberSummaryOperand, IgxSummaryOperand, IgxSummaryResult } from './grid-summary';\nimport { IgxRowComponent } from './row.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective\n} from './grid.common';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { valToPxlsUsingRange } from '../core/utils';\nimport {\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand,\n    IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { SortingStrategy } from '../data-operations/sorting-strategy';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\n/**\n * **Ignite UI for Angular Column** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html#columns-configuration)\n *\n * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,\n * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside\n * the column using `ng-template` which will be used for all cells within the column.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-column',\n    template: ``\n})\nexport class IgxColumnComponent implements AfterContentInit {\n    /**\n     * Sets/gets the `field` value.\n     * ```typescript\n     * let columnField = this.column.field;\n     * ```\n     * ```html\n     * <igx-column [field] = \"'ID'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public field: string;\n    /**\n     * Sets/gets the `header` value.\n     * ```typescript\n     * let columnHeader = this.column.header;\n     * ```\n     * ```html\n     * <igx-column [header] = \"'ID'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public header = '';\n    /**\n     * Sets/gets whether the column is sortable.\n     * Default value is `false`.\n     * ```typescript\n     * let isSortable = this.column.sortable;\n     * ```\n     * ```html\n     * <igx-column [sortable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortable = false;\n    /**\n     * Sets/gets whether the column is groupable.\n     * Default value is `false`.\n     * ```typescript\n     * let isGroupable = this.column.groupable;\n     * ```\n     * ```html\n     * <igx-column [groupable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public groupable = false;\n    /**\n     * Sets/gets whether the column is editable.\n     * Default value is `false`.\n     * ```typescript\n     * let isEditable = this.column.editable;\n     * ```\n     * ```html\n     * <igx-column [editable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public editable = null;\n    /**\n     * Sets/gets whether the column is filterable.\n     * Default value is `true`.\n     * ```typescript\n     * let isFilterable = this.column.filterable;\n     * ```\n     * ```html\n     * <igx-column [filterable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public filterable = true;\n    /**\n     * Sets/gets whether the column is resizable.\n     * Default value is `false`.\n     * ```typescript\n     * let isResizable = this.column.resizable;\n     * ```\n     * ```html\n     * <igx-column [resizable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public resizable = false;\n    /**\n     * Enables/disables summary for the column.\n     * Default value is `false`.\n     * ```typescript\n     * let hasSummary = this.column.hasSummary;\n     * ```\n     * ```html\n     * <igx-column [hasSummary] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public hasSummary = false;\n    /**\n     * Gets whether the column is hidden.\n     * ```typescript\n     * let isHidden = this.column.hidden;\n     * ```\n     *@memberof IgxColumnComponent\n     */\n    @Input()\n    get hidden(): boolean {\n        return this._hidden;\n    }\n    /**\n     * Sets the column hidden property.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hidden(value: boolean) {\n        if (this._hidden !== value) {\n            this._hidden = value;\n            if (this.grid) {\n                this.grid.endEdit(true);\n            }\n            const cellInEditMode = this.gridAPI.get_cell_inEditMode(this.gridID);\n            if (cellInEditMode) {\n                if (cellInEditMode.cell.column.field === this.field) {\n                    this.gridAPI.escape_editMode(this.gridID, cellInEditMode.cellID);\n                }\n            }\n            this.check();\n            if (this.grid) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.grid.id);\n                if (!activeInfo) {\n                    return;\n                }\n                const oldIndex = activeInfo.columnIndex;\n\n                if (this.grid.lastSearchInfo.searchText) {\n                    if (this.index <= oldIndex) {\n                        const newIndex = this.hidden ? oldIndex - 1 : oldIndex + 1;\n                        IgxColumnComponent.updateHighlights(oldIndex, newIndex, this.grid);\n                    } else if (oldIndex === -1 && !this.hidden) {\n                        this.grid.refreshSearch();\n                    }\n                }\n                if (this.hasSummary) {\n                    this.grid.summariesHeight = 0;\n                }\n\n                this.grid.reflow();\n                this.grid.filteringService.refreshExpressions();\n            }\n        }\n    }\n    /**\n     * Gets whether the hiding is disabled.\n     * ```typescript\n     * let isHidingDisabled =  this.column.disableHiding;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get disableHiding(): boolean {\n        return this._disableHiding;\n    }\n    /**\n     * Enables/disables hiding for the column.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set disableHiding(value: boolean) {\n        if (this._disableHiding !== value) {\n            this._disableHiding = value;\n            this.check();\n        }\n    }\n    /**\n     * Sets/gets whether the column is movable.\n     * Default value is `false`.\n     * ```typescript\n     * let isMovable = this.column.movable;\n     * ```\n     * ```html\n     * <igx-column [movable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public movable = false;\n    /**\n     * Gets the `width` of the column.\n     * ```typescript\n     * let columnWidth = this.column.width;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get width(): string {\n        return this.widthSetByUser ? this._width : this.defaultWidth;\n    }\n    /**\n     * Sets the `width` of the column.\n     * ```html\n     * <igx-column [width] = \"'25%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set width(value: string) {\n        if (value) {\n            this.widthSetByUser = true;\n            this._width = value;\n        }\n    }\n    /**\n     * Sets/gets the maximum `width` of the column.\n     * ```typescript\n     * let columnMaxWidth = this.column.width;\n     * ```\n     * ```html\n     * <igx-column [maxWidth] = \"'75%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public maxWidth: string;\n    /**\n     * Sets/gets the minimum `width` of the column.\n     * Default value is `88`;\n     * ```typescript\n     * let columnMinWidth = this.column.minWidth;\n     * ```\n     * ```html\n     * <igx-column [minWidth] = \"'15%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public minWidth = this.defaultMinWidth;\n    /**\n     * Sets/gets the class selector of the column header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerClasses;\n     * ```\n     * ```html\n     * <igx-column [headerClasses] = \"'column-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public headerClasses = '';\n    /**\n     * Sets a conditional class selector of the column cells.\n     * Accepts an object literal, containing key-value pairs,\n     * where the key is the name of the CSS class, while the\n     * value is either a callback function that returns a boolean,\n     * or boolean, like so:\n     * ```typescript\n     * callback = (rowData, columnKey) => { return rowData[columnKey] > 6; }\n     * cellClasses = { 'className' : this.callback };\n     * ```\n     * ```html\n     * <igx-column [cellClasses] = \"cellClasses\"></igx-column>\n     * <igx-column [cellClasses] = \"{'class1' : true }\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public cellClasses: any;\n    /**\n     * Gets the column index.\n     * ```typescript\n     * let columnIndex = this.column.index;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get index(): number {\n        return this.grid.columns.indexOf(this);\n    }\n    /**\n     * Sets/gets formatter for the column.\n     * ```typescript\n     * let columnFormatter = this.column.formatter;\n     * ```\n     * ```typescript\n     * this.column.formatter = (val: Date) => {\n     * return new Intl.DateTimeFormat(\"en-US\").format(val);\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public formatter: (value: any) => any;\n    /**\n     * Sets/gets whether the column filtering should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let filteringIgnoreCase = this.column.filteringIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [filteringIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public filteringIgnoreCase = true;\n    /**\n     * Sets/gets whether the column sorting should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let sortingIgnoreCase = this.column.sortingIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [sortingIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortingIgnoreCase = true;\n    /**\n     * Sets/gets the data type of the column values.\n     * Default value is `string`.\n     * ```typescript\n     * let columnDataType = this.column.dataType;\n     * ```\n     * ```html\n     * <igx-column [dataType] = \"'number'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public dataType: DataType = DataType.String;\n    /**\n     * Gets whether the column is `pinned`.\n     * ```typescript\n     * let isPinned = this.column.pinned;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get pinned(): boolean {\n        return this._pinned;\n    }\n    /**\n     * Sets whether the column is pinned.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set pinned(value: boolean) {\n        if (this._pinned !== value) {\n            if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {\n                value ? this.pin() : this.unpin();\n                return;\n            }\n            /* No grid/width available at initialization. `initPinning` in the grid\n               will re-init the group (if present)\n            */\n            this._pinned = value;\n        }\n    }\n    /**\n     * Gets/Sets the `id` of the `igx-grid`.\n     * ```typescript\n     * let columnGridId = this.column.gridID;\n     * ```\n     * ```typescript\n     * this.column.gridID = 'grid-1';\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public gridID: string;\n    /**\n     * Gets the column `summaries`.\n     * ```typescript\n     * let columnSummaries = this.column.summaries;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column `summaries`.\n     * ```typescript\n     * this.column.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set summaries(classRef: any) {\n        this._summaries = new classRef();\n    }\n    /**\n     * Sets/gets whether the column is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.column.searchable';\n     * ```\n     * ```html\n     *  <igx-column [searchable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column `filters`.\n     * ```typescript\n     * let columnFilters = this.column.filters'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column `filters`.\n     * ```typescript\n     * this.column.filters = IgxBooleanFilteringOperand.\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set filters(classRef: any) {\n        this._filters = classRef;\n    }\n    /**\n     * Gets the column `sortStrategy`.\n     * ```typescript\n     * let sortStrategy = this.column.sortStrategy'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get sortStrategy(): any {\n        return this._sortStrategy;\n    }\n    /**\n     * Sets the column `sortStrategy`.\n     * ```typescript\n     * this.column.sortStrategy = new CustomSortingStrategy().\n     *\n     * class CustomSortingStrategy extends SortingStrategy {\n     * ...\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set sortStrategy(classRef: any) {\n        this._sortStrategy = classRef;\n    }\n\n\n    /**\n     * Gets the default minimum `width` of the column.\n     * ```typescript\n     * let defaultMinWidth =  this.column.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get defaultMinWidth(): string {\n        return this._defaultMinWidth;\n    }\n    /**\n     * Returns reference to the `igx-grid`.\n     * ```typescript\n     * let gridComponent = this.column.grid;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get grid(): IgxGridBaseComponent {\n        return this.gridAPI.get(this.gridID);\n    }\n    /**\n     * Returns a reference to the `bodyTemplate`.\n     * ```typescript\n     * let bodyTemplate = this.column.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * Sets the body template.\n     * ```html\n     * <ng-template #bodyTemplate igxCell let-val>\n     *    <div style = \"background-color: yellowgreen\" (click) = \"changeColor(val)\">\n     *       <span> {{val}} </span>\n     *    </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'bodyTemplate'\", {read: TemplateRef })\n     * public bodyTemplate: TemplateRef<any>;\n     * this.column.bodyTemplate = this.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set bodyTemplate(template: TemplateRef<any>) {\n        this._bodyTemplate = template;\n        this.grid.markForCheck();\n    }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.column.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * Sets the header template.\n     * ```html\n     * <ng-template #headerTemplate>\n     *   <div style = \"background-color:black\" (click) = \"changeColor(val)\">\n     *       <span style=\"color:red\" >{{column.field}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'headerTemplate'\", {read: TemplateRef })\n     * public headerTemplate: TemplateRef<any>;\n     * this.column.headerTemplate = this.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) {\n        this._headerTemplate = template;\n        this.grid.markForCheck();\n    }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.column.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * Sets the inline editor template.\n     * ```html\n     * <ng-template #inlineEditorTemplate igxCellEditor let-cell=\"cell\">\n     *     <input type=\"string\" [(ngModel)]=\"cell.value\"/>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'inlineEditorTemplate'\", {read: TemplateRef })\n     * public inlineEditorTemplate: TemplateRef<any>;\n     * this.column.inlineEditorTemplate = this.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) {\n        this._inlineEditorTemplate = template;\n        this.grid.markForCheck();\n    }\n    /**\n     * Gets the cells of the column.\n     * ```typescript\n     * let columnCells =  this.column.cells;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return this.grid.rowList.filter((row) => row instanceof IgxRowComponent)\n            .map((row) => {\n                if (row.cells) {\n                    return row.cells.filter((cell) => cell.columnIndex === this.index);\n                }\n            }).reduce((a, b) => a.concat(b), []);\n    }\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => !c.columnGroup);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => !c.columnGroup);\n        let col = this;\n        let vIndex = -1;\n\n        if (this.columnGroup) {\n            col = this.allChildren.filter(c => !c.columnGroup)[0] as any;\n        }\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(col);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(col);\n        }\n        return vIndex;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnGroup() {\n        return false;\n    }\n    /**\n     * Returns the children columns collection.\n     * Returns an empty array if the column does not contain children columns.\n     * ```typescript\n     * let childrenColumns =  this.column.allChildren;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return [];\n    }\n    /**\n     * Returns the level of the column in a column group.\n     * Returns `0` if the column doesn't have a `parent`.\n     * ```typescript\n     * let columnLevel =  this.column.level;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get level() {\n        let ptr = this.parent;\n        let lvl = 0;\n\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parent;\n        }\n        return lvl;\n    }\n\n    /**\n     * hidden\n     */\n    public defaultWidth: string;\n\n    /**\n     * hidden\n     */\n    public widthSetByUser: boolean;\n\n    /**\n     * Returns the filteringExpressionsTree of the column.\n     * ```typescript\n     * let tree =  this.column.filteringExpressionsTree;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filteringExpressionsTree(): FilteringExpressionsTree {\n        return this.grid.filteringExpressionsTree.find(this.field) as FilteringExpressionsTree;\n    }\n    /**\n     * Sets/gets the parent column.\n     * ```typescript\n     * let parentColumn = this.column.parent;\n     * ```\n     * ```typescript\n     * this.column.parent = higherLevelColumn;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    parent = null;\n    /**\n     * Sets/gets the children columns.\n     * ```typescript\n     * let columnChildren = this.column.children;\n     * ```\n     * ```typescript\n     * this.column.children = childrenColumns;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    children;\n    /**\n     *@hidden\n     */\n    protected _unpinnedIndex;\n    /**\n     *@hidden\n     */\n    protected _pinned = false;\n    /**\n     *@hidden\n     */\n    protected _bodyTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _headerTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _inlineEditorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _summaries = null;\n    /**\n     *@hidden\n     */\n    protected _filters = null;\n    /**\n     *@hidden\n     */\n    protected _sortStrategy = new SortingStrategy();\n    /**\n     *@hidden\n     */\n    protected _hidden = false;\n    /**\n     *@hidden\n     */\n    protected _index: number;\n    /**\n     *@hidden\n     */\n    protected _disableHiding = false;\n    /**\n     *@hidden\n     */\n    protected _width: string;\n    /**\n     *@hidden\n     */\n    protected _defaultMinWidth = '64';\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellTemplateDirective, { read: IgxCellTemplateDirective })\n    protected cellTemplate: IgxCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective })\n    protected headTemplate: IgxCellHeaderTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective })\n    protected editorTemplate: IgxCellEditorTemplateDirective;\n\n    public static updateHighlights(oldIndex: number, newIndex: number, grid: IgxGridBaseComponent) {\n        const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(grid.id);\n\n        if (activeInfo && activeInfo.columnIndex === oldIndex) {\n            IgxTextHighlightDirective.setActiveHighlight(grid.id, {\n                columnIndex: newIndex,\n                rowIndex: activeInfo.rowIndex,\n                index: activeInfo.index,\n                page: activeInfo.page,\n            });\n\n            grid.refreshSearch(true);\n        }\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent>, public cdr: ChangeDetectorRef) { }\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.cellTemplate) {\n            this._bodyTemplate = this.cellTemplate.template;\n        }\n        if (this.headTemplate) {\n            this._headerTemplate = this.headTemplate.template;\n        }\n        if (this.editorTemplate) {\n            this._inlineEditorTemplate = this.editorTemplate.template;\n        }\n        if (!this.summaries) {\n            switch (this.dataType) {\n                case DataType.String:\n                case DataType.Boolean:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n                case DataType.Number:\n                    this.summaries = IgxNumberSummaryOperand;\n                    break;\n                case DataType.Date:\n                    this.summaries = IgxDateSummaryOperand;\n                    break;\n                default:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n            }\n        }\n        if (!this.filters) {\n            switch (this.dataType) {\n                case DataType.Boolean:\n                    this.filters = IgxBooleanFilteringOperand;\n                    break;\n                case DataType.Number:\n                    this.filters = IgxNumberFilteringOperand;\n                    break;\n                case DataType.Date:\n                    this.filters = IgxDateFilteringOperand;\n                    break;\n                case DataType.String:\n                default:\n                    this.filters = IgxStringFilteringOperand;\n                    break;\n            }\n        }\n    }\n    /**\n     * Updates the highlights when a column index is changed.\n     * ```typescript\n     * this.column.updateHighlights(1, 3);\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public updateHighlights(oldIndex: number, newIndex: number) {\n        const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.grid.id);\n\n        if (activeInfo && activeInfo.columnIndex === oldIndex) {\n            IgxTextHighlightDirective.setActiveHighlight(this.grid.id, {\n                columnIndex: newIndex,\n                rowIndex: activeInfo.rowIndex,\n                index: activeInfo.index,\n                page: activeInfo.page,\n            });\n\n            this.grid.refreshSearch(true);\n        }\n    }\n    /**\n     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.\n     * ```typescript\n     * this.column.pin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public pin(index?) {\n        // TODO: Probably should the return type of the old functions\n        // should be moved as a event parameter.\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (this._pinned) {\n            return false;\n        }\n\n        if (this.parent && !this.parent.pinned) {\n            return this.topLevelParent.pin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {\n            return false;\n        }\n\n        const width = parseInt(this.width, 10);\n        const oldIndex = this.visibleIndex;\n\n        if (!this.parent && (grid.getUnpinnedWidth(true) - width < grid.unpinnedAreaMinWidth)) {\n            return false;\n        }\n\n        this._pinned = true;\n        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);\n        index = index !== undefined ? index : grid._pinnedColumns.length;\n        const targetColumn = grid._pinnedColumns[index];\n        const args = { column: this, insertAtIndex: index };\n        grid.onColumnPinning.emit(args);\n\n        if (grid._pinnedColumns.indexOf(this) === -1) {\n            grid._pinnedColumns.splice(args.insertAtIndex, 0, this);\n\n            if (grid._unpinnedColumns.indexOf(this) !== -1) {\n                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1);\n            }\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.pin());\n            grid.reinitPinStates();\n        }\n\n        grid.cdr.detectChanges();\n        this.grid.filteringService.refreshExpressions();\n        const newIndex = this.visibleIndex;\n        IgxColumnComponent.updateHighlights(oldIndex, newIndex, grid);\n        return true;\n    }\n    /**\n     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.\n     * ```typescript\n     * this.column.unpin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public unpin(index?) {\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (!this._pinned) {\n            return false;\n        }\n\n        if (this.parent && this.parent.pinned) {\n            return this.topLevelParent.unpin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {\n            return false;\n        }\n\n        const oldIndex = this.visibleIndex;\n        index = (index !== undefined ? index :\n            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);\n        this._pinned = false;\n\n        const targetColumn = grid._unpinnedColumns[index];\n        grid._unpinnedColumns.splice(index, 0, this);\n        if (grid._pinnedColumns.indexOf(this) !== -1) {\n            grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.unpin());\n        }\n\n        grid.reinitPinStates();\n\n        grid.cdr.detectChanges();\n        this.grid.filteringService.refreshExpressions();\n        const newIndex = this.visibleIndex;\n        IgxColumnComponent.updateHighlights(oldIndex, newIndex, grid);\n        return true;\n    }\n    /**\n     * Returns a reference to the top level parent column.\n     * ```typescript\n     * let topLevelParent =  this.column.topLevelParent;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get topLevelParent() {\n        let parent = this.parent;\n        while (parent && parent.parent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n    /**\n     *@hidden\n     */\n    protected check() {\n        if (this.grid) {\n            this.grid.markForCheck();\n        }\n    }\n\n    /**\n     * Returns a reference to the header of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let headerCell = column.headerCell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerCell(): IgxGridHeaderComponent {\n        if (this.grid.headerList.length > 0) {\n            return flatten(this.grid.headerList.toArray()).find((h) => h.column === this);\n        }\n    }\n\n    /**\n     * Autosize the column to the longest currently visible cell value, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * column.autosize();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public autosize() {\n        if (!this.columnGroup) {\n\n            this.width = this.getLargestCellWidth();\n\n            this.grid.markForCheck();\n            this.grid.reflow();\n        }\n    }\n\n    /**\n     * @hidden\n     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let size = column.getLargestCellWidth();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public getLargestCellWidth(): string {\n        const range = this.grid.document.createRange();\n        const largest = new Map<number, number>();\n\n        if (this.cells.length > 0) {\n            let cellsContentWidths = [];\n            if (this.cells[0].nativeElement.children.length > 0) {\n                this.cells.forEach((cell) => cellsContentWidths.push(cell.calculateSizeToFit(range)));\n            } else {\n                cellsContentWidths = this.cells.map((cell) => valToPxlsUsingRange(range, cell.nativeElement));\n            }\n\n            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));\n            const cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);\n            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +\n                parseFloat(cellStyle.borderRightWidth);\n\n            largest.set(Math.max(...cellsContentWidths), cellPadding);\n        }\n\n        if (this.headerCell) {\n            let headerCell;\n            const titleIndex = this.grid.hasMovableColumns ? 1 : 0;\n            if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[titleIndex].children.length > 0) {\n                headerCell =  Math.max(...Array.from(this.headerCell.elementRef.nativeElement.children[titleIndex].children)\n                    .map((child) => valToPxlsUsingRange(range, child)));\n            } else {\n                headerCell = valToPxlsUsingRange(range, this.headerCell.elementRef.nativeElement.children[titleIndex]);\n            }\n\n            if (this.sortable || (this.grid.allowFiltering && this.filterable)) {\n                headerCell += this.headerCell.elementRef.nativeElement.children[titleIndex + 1].getBoundingClientRect().width;\n            }\n\n            const headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);\n            const headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +\n                parseFloat(headerStyle.borderRightWidth);\n            largest.set(headerCell, headerPadding);\n\n        }\n\n        const largestCell = Math.max(...Array.from(largest.keys()));\n        const width = Math.ceil(largestCell + largest.get(largestCell));\n\n        if (Number.isNaN(width)) {\n            return this.width;\n        } else {\n            return width + 'px';\n        }\n    }\n\n}\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnGroupComponent) }],\n    selector: 'igx-column-group',\n    template: ``\n})\nexport class IgxColumnGroupComponent extends IgxColumnComponent implements AfterContentInit {\n\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })\n    children = new QueryList<IgxColumnComponent>();\n    /**\n     * Gets the column group `summaries`.\n     * ```typescript\n     * let columnGroupSummaries = this.columnGroup.summaries;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column group `summaries`.\n     * ```typescript\n     * this.columnGroup.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set summaries(classRef: any) { }\n    /**\n     * Sets/gets whether the column group is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.columnGroup.searchable;\n     * ```\n     * ```html\n     *  <igx-column-group [searchable] = \"false\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column group `filters`.\n     * ```typescript\n     * let columnGroupFilters = this.columnGroup.filters;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column group `filters`.\n     * ```typescript\n     * this.columnGroup.filters = IgxStringFilteringOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set filters(classRef: any) { }\n    /**\n     * Gets the default minimum `width` of the column group.\n     * ```typescript\n     * let defaultMinWidth = this.columnGroup.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get defaultMinWidth(): string {\n        return this._defaultMinWidth;\n    }\n    /**\n     * Returns a reference to the body template.\n     * ```typescript\n     * let bodyTemplate = this.columnGroup.bodyTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set bodyTemplate(template: TemplateRef<any>) { }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.columnGroup.headerTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * @hidden\n     * @memberof IgxColumnGroupComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) { }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) { }\n    /**\n     * Gets the column group cells.\n     * ```typescript\n     * let columnCells = this.columnGroup.cells;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return [];\n    }\n    /**\n     * Gets whether the column group is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this.allChildren.every(c => c.hidden);\n    }\n    /**\n     * Sets the column group hidden property.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n    }\n    /**\n     *@hidden\n     */\n    ngAfterContentInit() {\n        /*\n            @ContentChildren with descendants still returns the `parent`\n            component in the query list.\n        */\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parent = this;\n        });\n    }\n    /**\n     * Returns the children columns collection.\n     * ```typescript\n     * let columns =  this.columnGroup.allChildren;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return flatten(this.children.toArray());\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let isColumnGroup =  this.columnGroup.columnGroup\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get columnGroup() {\n        return true;\n    }\n    /**\n     * Gets the width of the column group.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        let isChildrenWidthInPercent = false;\n        const width = `${this.children.reduce((acc, val) => {\n            if (val.hidden) {\n                return acc;\n            }\n\n            if (val.width && val.width.indexOf('%') !== -1) {\n                isChildrenWidthInPercent = true;\n            }\n\n            return acc + parseInt(val.width, 10);\n        }, 0)}`;\n        return isChildrenWidthInPercent ? width + '%' : width;\n    }\n\n    set width(val) { }\n}\n\n\n\nfunction flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            result = result.concat(flatten(el.children.toArray()));\n        }\n    });\n    return result;\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nexport interface IValueChangedEventArgs {\n    oldValue: any;\n    newValue: any;\n}\n\n/**\n *@hidden\n */\nexport abstract class ItemPropertyValueChanged {\n    private _object: any;\n    private _propName: string;\n\n    get object() {\n        return this._object;\n    }\n\n    set object(value) {\n        if (value) {\n            this._object = value;\n        }\n    }\n\n    @Input()\n    get value() {\n        return (this.object) ? this.object[this._propName] : null;\n    }\n\n    set value(value) {\n        this.onValueChanged(value);\n    }\n\n    @Output()\n    public valueChanged = new EventEmitter<IValueChangedEventArgs>();\n\n    constructor(propName: string) {\n        this._propName = propName;\n    }\n\n    protected onValueChanged(value) {\n        const currentValue = this.value;\n        if (value !== currentValue) {\n            this.object[this._propName] = value;\n            this.valueChanged.emit({ oldValue: currentValue, newValue: value });\n        }\n    }\n}\n\n/** @hidden */\nexport class ColumnChooserItemBase extends ItemPropertyValueChanged {\n    @Input()\n    get column() {\n        return this.object;\n    }\n\n    set column(value) {\n        if (value) {\n            this.object = value;\n        }\n    }\n\n    @Input()\n    public indentation = 30;\n\n    @Input()\n    public container: any;\n\n    constructor(public prop: string) {\n        super(prop);\n    }\n\n    get name() {\n        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';\n    }\n\n    get level() {\n        return this.column.level;\n    }\n\n    get calcIndent() {\n        return this.indentation * this.level;\n    }\n}\n","\nimport { Directive } from '@angular/core';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport interface IColumnVisibilityChangedEventArgs {\n    column: any;\n    newValue: boolean;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxColumnHidingItem]'\n})\nexport class IgxColumnHidingItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('hidden');\n    }\n\n    get disabled() {\n        return this.column.disableHiding;\n    }\n}\n","import { ChangeDetectorRef, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { DataUtil } from '../data-operations/data-util';\nimport { IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport enum ColumnDisplayOrder {\n    Alphabetical = 'Alphabetical',\n    DisplayOrder = 'DisplayOrder'\n}\n\n/** @hidden */\nexport abstract class ColumnChooserBase implements OnDestroy {\n    /**\n     * Gets the grid columns that are going to be manipulated.\n     * ```typescript\n     * let gridColumns = this.columnHidingUI.columns;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n\n    @Input()\n    get columns() {\n        return this._gridColumns;\n    }\n    /**\n     * Sets the the grid columns that are going to be manipulated.\n     * ```html\n     * <igx-column-hiding [columns]=\"grid.columns\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columns(value) {\n        if (value) {\n            this._gridColumns = value;\n            this.createColumnItems();\n            if (this.filterCriteria) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Sets/gets the title of the column chooser.\n     * ```typescript\n     * let title =  this.columnHidingUI.title;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get title() {\n        return this._title;\n    }\n    /**\n     * ```html\n     * <igx-column-hiding [title]=\"'IgxColumnHidingComponent Title'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set title(value) {\n        this._title = (value) ? value : '';\n    }\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * ```typescript\n     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is going to be displayed in the filter input.\n     * ```html\n     * <igx-column-hiding [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterColumnsPrompt(value) {\n        this._filterColumnsPrompt = (value) ? value : '';\n    }\n    /**\n     * Gets the items of the selected columns.\n     * ```typescript\n     * let columnItems =  this.columnHidingUI.columnItems;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnItems() {\n        return this._currentColumns;\n    }\n    /**\n     * Gets the value which filters the columns list.\n     * ```typescript\n     * let filterCriteria =  this.columnHidingUI.filterCriteria;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterCriteria() {\n        return this._filterCriteria;\n    }\n\n    /**\n     * Sets the value which filters the columns list.\n     * ```html\n     *  <igx-column-hiding [filterCriteria]=\"'ID'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterCriteria(value) {\n        if (!value || value.length === 0) {\n            this.clearFiltering();\n            this._filterCriteria = '';\n            this.cdr.detectChanges();\n            return;\n        } else if (this._filterCriteria && this._filterCriteria.length > value.length) {\n            this.clearFiltering();\n        }\n\n        this._filterCriteria = value;\n        this.filter();\n        this.cdr.detectChanges();\n    }\n    /**\n     * Gets the display order of the columns.\n     * ```typescript\n     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * ```typescript\n     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value !== undefined) {\n            this.orderColumns(value);\n            if (this._filterCriteria.length > 0) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Access to the columnHidingUI:\n     * ```typescript\n     * @ViewChild('column-hiding-component')\n     *  public columnHidingUI: IgxColumnHidingComponent;\n     * ```\n     * Sets/gets the max height of the column area.\n     * ```typescript\n     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [columnsAreaMaxHeight]=\"200px\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-hiding';\n    /**\n     *@hidden\n     */\n    private _currentColumns = [];\n    /**\n     *@hidden\n     */\n    private _gridColumns = [];\n    /**\n     *@hidden\n     */\n    private _rawColumns = [];\n    /**\n     *@hidden\n     */\n    private _columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     *@hidden\n     */\n    private _filterCriteria = '';\n    /**\n     *@hidden\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     *@hidden\n     */\n    private _title = '';\n\n    constructor(public cdr: ChangeDetectorRef) {\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        for (const item of this._currentColumns) {\n            item.valueChanged.unsubscribe();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private createColumnItems() {\n        if (this._gridColumns.length > 0) {\n            this._rawColumns = [];\n            this._gridColumns.forEach((column) => {\n                const item = this.createColumnItem(this, column);\n                if (item) {\n                    this._rawColumns.push(item);\n                }\n            });\n            this._currentColumns = this._rawColumns.slice(0);\n            this.orderColumns(this._columnDisplayOrder);\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected abstract createColumnItem(container: any, column: any);\n    /**\n     *@hidden\n     */\n    private orderColumns(value) {\n        this._columnDisplayOrder = value;\n        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||\n            value === ColumnDisplayOrder.Alphabetical) {\n            this._currentColumns = this._rawColumns.slice(0).sort((current, next) => {\n                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());\n            });\n        } else {\n            this._currentColumns = this._rawColumns;\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected filter() {\n        const filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));\n\n        const strategy = new CustomFilteringStrategy();\n        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);\n    }\n    /**\n     *@hidden\n     */\n    protected createFilteringExpression(fieldName: string): IFilteringExpression {\n        return {\n            condition: IgxStringFilteringOperand.instance().condition('contains'),\n            fieldName: fieldName,\n            ignoreCase: true,\n            searchVal: this._filterCriteria\n        };\n    }\n    /**\n     *@hidden\n     */\n    protected clearFiltering() {\n        this.createColumnItems();\n    }\n}\n\nclass CustomFilteringStrategy extends FilteringStrategy {\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[] {\n        const res: ColumnChooserItemBase[] = [];\n        data.forEach((item: ColumnChooserItemBase) => {\n            if (this.matchRecord(item, expressionsTree.filteringOperands[0] as IFilteringExpression)) {\n                res.push(item);\n            } else if (item.column.columnGroup) {\n                if (item.column.allChildren.findIndex((child) =>\n                    this.matchRecord(child, expressionsTree.filteringOperands[1] as IFilteringExpression) ||\n                    this.matchRecord(child, expressionsTree.filteringOperands[2] as IFilteringExpression)) > -1) {\n                    res.push(item);\n                }\n            }\n        });\n\n        return res;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    NgModule,\n    Output,\n    OnDestroy\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-hiding',\n    template: `<div class=\"igx-column-hiding__header\">\n    <h4 class=\"igx-column-hiding__header-title\" *ngIf=\"title\">{{ title }}</h4>\n\n    <igx-input-group class=\"igx-column-hiding__header-input\">\n        <input igxInput\n            type=\"text\"\n            [(ngModel)]=\"filterCriteria\"\n            [placeholder]=\"filterColumnsPrompt\"\n            autocomplete=\"off\" />\n    </igx-input-group>\n</div>\n\n<div class=\"igx-column-hiding__columns\"\n    [style.max-height]=\"columnsAreaMaxHeight\">\n    <igx-checkbox igxColumnHidingItem\n        *ngFor=\"let columnItem of columnItems\"\n        class=\"igx-column-hiding__columns-item\"\n        (onColumnVisibilityChanged)=\"onVisibilityChanged($event)\"\n        (change)=\"columnItem.value = !columnItem.value\"\n        [checked]=\"columnItem.value\"\n        [disabled]=\"columnItem.disabled\"\n        [style.margin-left.px]=\"columnItem.calcIndent\">\n        {{ columnItem.name }}\n    </igx-checkbox>\n</div>\n\n<div class=\"igx-column-hiding__buttons\">\n    <button igxButton igxRipple (click)=\"showAllColumns()\" [disabled]=\"disableShowAll\">{{ showAllText }}</button>\n    <button igxButton igxRipple (click)=\"hideAllColumns()\" [disabled]=\"disableHideAll\">{{ hideAllText }}</button>\n</div>\n`\n})\nexport class IgxColumnHidingComponent extends ColumnChooserBase implements OnDestroy {\n    /**\n     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.\n     * ```html\n     * <igx-column-hiding #columnHidingUI\n     *     [columns]=\"grid.columns\" [title]=\"'Column Hiding'\">\n     * </igx-column-hiding>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'columnHidingUI'\")\n     * public columnHiding: IgxColumnHidingComponent;\n     * let isHideAlldisabled =  this.columnHiding.disableHideAll;\n     * ```\n     *@memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableHideAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount === this.columns.length) {\n            return true;\n        } else if (this.hidableColumns.length < 1 ||\n            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.\n     * ```typescript\n     * let isShowAlldisabled =  this.columnHiding.disableShowAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableShowAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {\n            return true;\n        } else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Sets/gets the text of the button that shows all columns if they are hidden.\n     * ```typescript\n     * let showAllButtonText =  this.columnHiding.showAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [showAllText] = \"'Show Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public showAllText = 'Show All';\n    /**\n     * Sets/gets the text of the button that hides all columns if they are shown.\n     * ```typescript\n     * let hideAllButtonText =  this.columnHiding.hideAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [hideAllText] = \"'Hide Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public hideAllText = 'Hide All';\n    /**\n     * An event that is emitted after the columns visibility is changed.\n     * Provides references to the `column` and the `newValue` properties as event arguments.\n     * ```html\n     *  <igx-column-hiding (onColumnVisibilityChanged) = \"onColumnVisibilityChanged($event)\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n    /**\n     * Gets the count of the hidden columns.\n     * ```typescript\n     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public get hiddenColumnsCount() {\n        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    private get hidableColumns() {\n        return this.columnItems.filter((col) => !col.disabled);\n    }\n\n    private destroy$ = new Subject<boolean>();\n    /**\n     *@hidden\n     */\n    protected createColumnItem(container: any, column: any) {\n        const item = new IgxColumnHidingItemDirective();\n        item.container = container;\n        item.column = column;\n        if (!item.column.columnGroup) {\n            item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                this.onVisibilityChanged({ column: item.column, newValue: args.newValue });\n            });\n        }\n        return item;\n    }\n    /**\n     * Shows all columns in the grid.\n     * ```typescript\n     * this.columnHiding.showAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public showAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = false;\n        }\n    }\n    /**\n     * Hides all columns in the grid.\n     * ```typescript\n     * this.columnHiding.hideAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public hideAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = true;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onVisibilityChanged(args: IColumnVisibilityChangedEventArgs) {\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n/**\n *The `IgxColumnHidingModule` provides the {@link IgxColumnHidingComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxColumnHidingComponent, IgxColumnHidingItemDirective],\n    exports: [IgxColumnHidingComponent],\n    imports: [\n        IgxButtonModule,\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule,\n    ]\n})\nexport class IgxColumnHidingModule {\n}\n","\nimport { CommonModule } from '@angular/common';\nimport { Directive, Component, EventEmitter, Output, NgModule, ChangeDetectorRef } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\n\n@Directive({\n    selector: '[igxColumnPinningItem]'\n})\nexport class IgxColumnPinningItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('pinned');\n    }\n\n    /**\n     * Returns whether a column could be pinned.\n     * It's not possible to pin a column if there is not enough space for the unpinned area.\n     * ```typescript\n     * const columnItem: IgxColumnPinningItemDirective;\n     * this.columnItem.pinnable;\n     * ```\n     */\n    get pinnable() {\n        if (this.column.grid.getUnpinnedWidth(true) - this.column.width < this.column.grid.unpinnedAreaMinWidth) {\n            return false;\n        }\n        return true;\n    }\n}\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-pinning',\n    template: `\n<div class=\"igx-column-hiding__header\">\n    <h4 class=\"igx-column-hiding__header-title\" *ngIf=\"title\">{{ title }}</h4>\n\n    <igx-input-group class=\"igx-column-hiding__header-input\">\n        <input igxInput\n            type=\"text\"\n            [(ngModel)]=\"filterCriteria\"\n            [placeholder]=\"filterColumnsPrompt\"\n            autocomplete=\"off\" />\n    </igx-input-group>\n</div>\n\n<div class=\"igx-column-hiding__columns\"\n    [style.max-height]=\"columnsAreaMaxHeight\">\n    <igx-checkbox igxColumnPinningItem\n        *ngFor=\"let columnItem of columnItems\"\n        class=\"igx-column-hiding__columns-item\"\n        (change)=\"checkboxValueChange($event, columnItem)\"\n        [checked]=\"columnItem.value\">\n        {{ columnItem.name }}\n    </igx-checkbox>\n</div>\n`\n})\nexport class IgxColumnPinningComponent extends ColumnChooserBase {\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    createColumnItem(container: any, column: any) {\n        if (column.level !== 0) {\n            return null;\n        }\n        const item = new IgxColumnPinningItemDirective();\n        item.container = container;\n        item.column = column;\n        return item;\n    }\n\n    /**\n     * @hidden\n     */\n    public checkboxValueChange(event, columnItem: IgxColumnPinningItemDirective) {\n        if (event.checked && !columnItem.pinnable) {\n            event.checkbox.checked = false;\n            return false;\n        }\n        columnItem.value = !columnItem.value;\n    }\n}\n\n/**\n * The IgxColumnPinningModule provides the {@link IgxColumnPinningComponent}, {@link IgxColumnPinningItemDirective} inside your application.\n */\n@NgModule({\n    declarations: [IgxColumnPinningComponent, IgxColumnPinningItemDirective],\n    exports: [IgxColumnPinningComponent],\n    imports: [\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule\n    ]\n})\nexport class IgxColumnPinningModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    Input,\n    Optional,\n    ViewChild\n} from '@angular/core';\n\nimport { DisplayDensity } from '../core/displayDensity';\nimport {\n    CsvFileTypes,\n    IgxBaseExporter,\n    IgxCsvExporterOptions,\n    IgxCsvExporterService,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    AbsoluteScrollStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { IgxColumnHidingComponent } from './column-hiding.component';\nimport { IgxColumnPinningComponent } from './column-pinning.component';\nimport { OverlaySettings, PositionSettings, HorizontalAlignment, VerticalAlignment } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position';\n\n/** @hidden */\n@Component({\n    selector: 'igx-grid-toolbar',\n    template: `<span class=\"igx-grid-toolbar__title\">\n    {{ getTitle() }}\n</span>\n\n<div class=\"igx-grid-toolbar__actions\">\n    <div *ngIf=\"grid.columnHiding\">\n        <button igxButton=\"flat\" #columnHidingButton name=\"btnColumnHiding\" igxButton igxRipple\n            (click)=\"toggleColumnHidingUI()\">\n            <div  class=\"igx-grid-toolbar__button-space\">\n                <igx-icon *ngIf=\"grid.hiddenColumnsCount > 0\">visibility_off</igx-icon>\n                <igx-icon *ngIf=\"grid.hiddenColumnsCount === 0\">visibility</igx-icon>\n                <span>{{ grid.hiddenColumnsCount }}</span>\n                <span>{{ grid.hiddenColumnsText }}</span>\n            </div>\n        </button>\n        <igx-drop-down #columnHidingDropdown>\n            <igx-column-hiding\n                [columns]=\"grid.columnList\"\n                [title]=\"grid.columnHidingTitle\"\n                [filterColumnsPrompt]=\"filterColumnsPrompt\"\n                [columnsAreaMaxHeight]=\"defaultDropDownsMaxHeight\"\n                (onColumnVisibilityChanged)=\"grid.toggleColumnVisibility($event)\">\n            </igx-column-hiding>\n        </igx-drop-down>\n    </div>\n    <div *ngIf=\"grid.columnPinning\">\n        <button igxButton=\"flat\" #columnPinningButton name=\"btnColumnPinning\" igxButton igxRipple\n            (click)=\"toggleColumnPinningUI()\">\n            <div  class=\"igx-grid-toolbar__button-space\">\n                <igx-icon *ngIf=\"pinnedColumnsCount > 0\">lock</igx-icon>\n                <igx-icon *ngIf=\"pinnedColumnsCount === 0\">lock_open</igx-icon>\n                <span>{{ pinnedColumnsCount }}</span>\n                <span>{{ grid.pinnedColumnsText }}</span>\n                <span></span>\n            </div>\n        </button>\n        <igx-drop-down #columnPinningDropdown>\n            <igx-column-pinning\n                [columns]=\"grid.columnList\"\n                [title]=\"grid.columnPinningTitle\"\n                [filterColumnsPrompt]=\"filterColumnsPrompt\"\n                [columnsAreaMaxHeight]=\"defaultDropDownsMaxHeight\"></igx-column-pinning>\n        </igx-drop-down>\n    </div>\n\n\n    <div class=\"igx-grid-toolbar__dropdown\" *ngIf=\"shouldShowExportButton\" id=\"btnExport\">\n        <button igxButton=\"flat\" igxRipple #btnExport\n                (click)=\"exportClicked()\">\n            <span class=\"igx-grid-toolbar__button-space\">\n                <igx-icon fontSet=\"material\">import_export</igx-icon>\n                <span>{{ getExportText() }}</span>\n                <igx-icon fontSet=\"material\">arrow_drop_down</igx-icon>\n            </span>\n        </button>\n\n        <igx-drop-down #exportDropdown>\n            <ul class=\"igx-grid-toolbar__dd-list\">\n                <li class=\"igx-grid-toolbar__dd-list-items\" igxRipple *ngIf=\"shouldShowExportExcelButton\" id=\"btnExportExcel\"\n                (click)=\"exportToExcelClicked()\">{{ getExportExcelText() }}</li>\n                <li class=\"igx-grid-toolbar__dd-list-items\" igxRipple *ngIf=\"shouldShowExportCsvButton\" id=\"btnExportCsv\"\n                (click)=\"exportToCsvClicked()\">{{ getExportCsvText() }}</li>\n            </ul>\n        </igx-drop-down>\n    </div>\n</div>\n`\n})\nexport class IgxGridToolbarComponent {\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid-toolbar')\n    @Input()\n    public gridID: string;\n\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value;\n    }\n\n    private _filterColumnsPrompt = 'Filter columns list ...';\n\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    @Input()\n    get defaultDropDownsMaxHeight() {\n        const gridHeight = this.grid.calcHeight;\n        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';\n    }\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    @ViewChild('columnHidingDropdown', { read: IgxDropDownComponent })\n    public columnHidingDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnHidingComponent`.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    @ViewChild(IgxColumnHidingComponent)\n    public columnHidingUI: IgxColumnHidingComponent;\n\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    @ViewChild('columnHidingButton')\n    public columnHidingButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    @ViewChild('exportDropdown', { read: IgxDropDownComponent })\n    public exportDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    @ViewChild('btnExport')\n    public exportButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild('columnPinningDropdown', { read: IgxDropDownComponent })\n    public columnPinningDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnPinningComponent`.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild(IgxColumnPinningComponent)\n    public columnPinningUI: IgxColumnPinningComponent;\n\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    @ViewChild('columnPinningButton')\n    public columnPinningButton;\n\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.get(this.gridID);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * cosnt exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    public get shouldShowExportButton(): boolean {\n        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * cosnt exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    public get shouldShowExportExcelButton(): boolean {\n        return (this.grid != null && this.grid.exportExcel);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * cosnt exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    public get shouldShowExportCsvButton(): boolean {\n        return (this.grid != null && this.grid.exportCsv);\n    }\n\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    public get pinnedColumnsCount() {\n        return this.grid.pinnedColumns.length;\n    }\n\n    private _displayDensity: DisplayDensity | string;\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let toolbarTheme = this.grid.toolbar.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity;\n    }\n\n    /**\n     * Sets the theme of the `IgxGridToolbarComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [displayDensity]=\"'compact'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        switch (val) {\n            case 'compact':\n                this._displayDensity = DisplayDensity.compact;\n                break;\n            case 'cosy':\n                this._displayDensity = DisplayDensity.cosy;\n                break;\n            case 'comfortable':\n            default:\n                this._displayDensity = DisplayDensity.comfortable;\n        }\n    }\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        switch (this._displayDensity) {\n            case DisplayDensity.compact:\n                return 'igx-grid-toolbar--compact';\n            case DisplayDensity.cosy:\n                return 'igx-grid-toolbar--cosy';\n            case DisplayDensity.comfortable:\n            default:\n                return 'igx-grid-toolbar';\n        }\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        public cdr: ChangeDetectorRef,\n        @Optional() public excelExporter: IgxExcelExporterService,\n        @Optional() public csvExporter: IgxCsvExporterService) {\n    }\n\n    private _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _overlaySettings: OverlaySettings = {\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true\n    };\n\n\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getTitle(): string {\n        return this.grid != null ? this.grid.toolbarTitle : '';\n    }\n\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getExportText(): string {\n        return this.grid != null ? this.grid.exportText : '';\n    }\n\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    public getExportExcelText(): string {\n        return this.grid != null ? this.grid.exportExcelText : '';\n    }\n\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    public getExportCsvText(): string {\n        return this.grid != null ? this.grid.exportCsvText : '';\n    }\n\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    public exportClicked() {\n        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.exportDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    public exportToExcelClicked() {\n        this.performExport(this.excelExporter, 'excel');\n    }\n\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    public exportToCsvClicked() {\n        this.performExport(this.csvExporter, 'csv');\n    }\n\n    private performExport(exp: IgxBaseExporter, exportType: string) {\n        this.exportClicked();\n\n        const fileName = 'ExportedData';\n        const options = exportType === 'excel' ?\n            new IgxExcelExporterOptions(fileName) :\n            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);\n\n        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };\n\n        this.grid.onToolbarExporting.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        exp.export(this.grid, options);\n    }\n\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    public toggleColumnHidingUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnHidingDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    public toggleColumnPinningUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnPinningDropdown.toggle(this._overlaySettings);\n    }\n}\n","/* tslint:disable */\nexport default [\n    {\n        name: 'add_filter',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n<path d=\"M19 15v-3h-2v3h-3v2h3v3h2v-3h3v-2h-3zM5 10h10v2H5zM2 5h16v2H2zM8 15h4v2H8z\"/>\n</svg>`},\n    {\n        name: 'contains',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 3v18h18V3zm16 16H5V5h14z\"/>\n        <path d=\"M12 11.3a4.39 4.39 0 0 0-2.54.63 2.07 2.07 0 0 0-.9 1.78 2.29 2.29 0 0 0 .66 1.74 2.63 2.63 0 0 0 1.89.63 2.39 2.39 0 0 0 1.32-.37 3.05 3.05 0 0 0 1-.93 3.72 3.72 0 0 0 .08.57c0 .19.1.38.16.58h1.79a4.51 4.51 0 0 1-.21-.88 5.57 5.57 0 0 1-.07-.93v-3.5a2.44 2.44 0 0 0-.84-2 3.34 3.34 0 0 0-2.22-.7 3.54 3.54 0 0 0-2.3.72A1.93 1.93 0 0 0 9 10.29h1.71a.93.93 0 0 1 .29-.71 1.5 1.5 0 0 1 1-.29 1.45 1.45 0 0 1 1 .35 1.3 1.3 0 0 1 .37 1v.69zm1.4 1.08v1.17a1.61 1.61 0 0 1-.71.77 2.27 2.27 0 0 1-1.21.34 1.18 1.18 0 0 1-.84-.27.92.92 0 0 1-.3-.72 1.16 1.16 0 0 1 .44-.9 1.76 1.76 0 0 1 1.22-.39z\"/>\n      </svg>`\n    },\n    {\n        name: 'does_not_contain',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21,19.74V3H4.26L2.89,1.63,1.63,2.92,3,4.29V21H19.73l1.37,1.37,1.27-1.26ZM5,19V6.28l5.28,5.27a3.19,3.19,0,0,0-.81.38,2.07,2.07,0,0,0-.9,1.78,2.29,2.29,0,0,0,.66,1.74,2.63,2.63,0,0,0,1.89.63,2.39,2.39,0,0,0,1.32-.37,3.05,3.05,0,0,0,1-.93,3.72,3.72,0,0,0,.08.57c0,.19.1.38.16.58h1L17.73,19Zm5.79-6.23a1.31,1.31,0,0,1,.45-.25l1.37,1.36.28.29a1.57,1.57,0,0,1-.19.15,2.27,2.27,0,0,1-1.21.34,1.18,1.18,0,0,1-.84-.27.92.92,0,0,1-.3-.72A1.16,1.16,0,0,1,10.79,12.77Zm2.6-1.47h-.83L10.94,9.68l.08-.1a1.5,1.5,0,0,1,1-.29,1.45,1.45,0,0,1,1,.35,1.3,1.3,0,0,1,.37,1ZM19,17.74l-3.85-3.85V10.62a2.44,2.44,0,0,0-.84-2,3.34,3.34,0,0,0-2.22-.7,3.64,3.64,0,0,0-2.24.67L6.26,5H19Z\"/>\n    </svg>`\n    },\n    {\n        name: 'all',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M2 14h8v2H2zM2 6h12v2H2zM16 17l-3-3-1.5 1.5L16 20l7-7-1.5-1.5L16 17zM2 10h12v2H2z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 17h2v2H5zM13 17h2v2h-2zM5 13h2v2H5zM17 17h2v2h-2zM13 5h2v2h-2zM9 17h2v2H9zM17 9h2v2h-2zM17 13h2v2h-2zM17 5h2v2h-2zM5 9h2v2H5zM5 5h2v2H5zM9 5h2v2H9z\"/>\n      </svg>`\n    },\n    {\n        name: 'end_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M13.14 6.76L17.49 12l-4.35 5.24 1.54 1.28L20.09 12l-5.41-6.52-1.54 1.28z\"/>\n        <path d=\"M11.91 11h2v2h-2zM7.91 11h2v2h-2zM3.91 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'ends_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 14.5h2v2H3zM11 14.5h2v2h-2zM7 14.5h2v2H7zM20.8 14.8v-3A2.1 2.1 0 0 0 20 10a3 3 0 0 0-2-.6 3 3 0 0 0-2 .6 1.7 1.7 0 0 0-.7 1.5h1.5a.8.8 0 0 1 .3-.7 1.3 1.3 0 0 1 .9-.3 1.3 1.3 0 0 1 .9.4 1.1 1.1 0 0 1 .3.8v.6H18a3.8 3.8 0 0 0-2.2.6 1.8 1.8 0 0 0-.8 1.5 2 2 0 0 0 .6 1.6 2.3 2.3 0 0 0 1.6.6 2.1 2.1 0 0 0 1.2-.4 2.8 2.8 0 0 0 .8-.8 4.3 4.3 0 0 0 .1.5l.1.5H21a4.1 4.1 0 0 1-.2-.7 5.4 5.4 0 0 1 0-1zm-1.6-.5a1.5 1.5 0 0 1-.6.7 2 2 0 0 1-1 .2 1.1 1.1 0 0 1-.8-.2.8.8 0 0 1-.2-.6 1 1 0 0 1 .3-.8 1.5 1.5 0 0 1 1.1-.3h1.2z\"/>\n      </svg>`\n    },\n    {\n        name: 'equals',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 13.5h14v2H5zM5 8.5h14v2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 9.47L6 3v2.11L15.09 10 6 14.9v2.11l12-6.47V9.47z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 7.11L15.09 12 6 16.89V19l12-6.46v-1.08L6 5v2.11z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'is_after',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 7h4v10h-4v2h6V5h-6v2zM11 3h2v18h-2zM7 5h2v2H7zM3 5h2v2H3zM3 17h2v2H3zM3 13h2v2H3zM3 9h2v2H3zM7 17h2v2H7z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_before',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 19h6v-2H5V7h4V5H3v14zM11 3h2v18h-2zM15 5h2v2h-2zM19 5h2v2h-2zM19 13h2v2h-2zM15 17h2v2h-2zM19 17h2v2h-2zM19 9h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_false',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm4.31 9.79l-1.52 1.52L8 13.52l-2.79 2.79-1.52-1.52L6.48 12 3.69 9.21l1.52-1.52L8 10.48l2.79-2.79 1.52 1.52L9.52 12zM18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7z\"/>\n        <path d=\"M17.52 13.85l2.91-2.92-.78-.78-2.13 2.12-1.17-1.15-.38.37-.41.41.42.42L17 13.34l.52.51z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_not_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M16.58 6.07l.79-1.36-1.74-1-.78 1.35a7.5 7.5 0 0 0-7.43 12.87l-.79 1.36 1.74 1 .78-1.35a7.5 7.5 0 0 0 7.43-12.87zM6.5 12A5.5 5.5 0 0 1 12 6.5a5.65 5.65 0 0 1 1.84.32l-5.41 9.36A5.49 5.49 0 0 1 6.5 12zm5.5 5.5a5.65 5.65 0 0 1-1.84-.32l5.41-9.36A5.5 5.5 0 0 1 12 17.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 4.5a7.5 7.5 0 1 0 7.5 7.5A7.5 7.5 0 0 0 12 4.5zm0 13a5.5 5.5 0 1 1 5.5-5.5 5.5 5.5 0 0 1-5.5 5.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_true',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.44 14.22zM16.56 14.22zM16.56 14.22L18 12.79l1.44 1.43.78-.78L18.79 12l1.43-1.44-.78-.78L18 11.21l-1.44-1.43-.78.78L17.21 12l-1.43 1.44.78.78z\"/>\n        <path d=\"M18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7zM8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm-.93 10.18l-3.38-3.37 1.13-1.12 2.25 2.25 4.11-4.12 1.13 1.12z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.5 14a4.48 4.48 0 1 0 4.5 4.5 4.47 4.47 0 0 0-4.5-4.5zm3.5 5.5h-4v2l-3-3 3-3v2h4zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 10v11H7v2h14a2 2 0 0 0 2-2V10z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.87 9l-2.99 3 2.99 3v-2.25h5.26v-1.5H8.87V9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 14.9L8.91 10 18 5.11V3L6 9.47v1.07l12 6.47V14.9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 12.54L18 19v-2.11L8.91 12 18 7.11V5L6 11.46v1.08z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2 6.74v-2h-4v-2h4v-2l3 3zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M11.13 11.25H5.88v1.5h5.25V15l3-3-3-3v2.25z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 9h2v2H5zM9 17h2v2H9zM13 17h2v2h-2zM17 9h2v2h-2zM17 5h2v2h-2zM5 17h2v2H5zM13 5h2v2h-2zM5 13h2v2H5zM19 15v-2h-2v.47L18.53 15H19zM11 7V5H9v.46L10.54 7H11zM2.76 1.76L1.5 3.06 20.97 22.5l1.26-1.26-8.89-8.89L2.76 1.76z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.37 4.71l-1.74-1-2.76 4.79H5v2h6.71l-1.73 3H5v2h3.82l-2.19 3.79 1.74 1 2.76-4.79H19v-2h-6.71l1.73-3H19v-2h-3.82l2.19-3.79z\"/>\n      </svg>`\n    },\n    {\n        name: 'start_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M18.1 11h2v2h-2zM10.1 11h2v2h-2z\"/>\n        <path d=\"M10.9 6.8L9.3 5.5 4 12l5.4 6.5 1.6-1.3L6.5 12 11 6.8zM14.1 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'starts_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M4.97 13.23h3.06L6.5 9.12l-1.53 4.11z\"/>\n        <path d=\"M5.89 7.5L2 16.5h1.72l.73-1.8h4.1l.73 1.8H11l-3.89-9zM5 13.23l1.5-4.11L8 13.23zM12 14.5h2v2h-2zM20 14.5h2v2h-2zM16 14.5h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 9h2v2H6zM6 13h2v2H6zM11 13h2v2h-2zM6 17h2v2H6zM11 17h2v2h-2zM11 9h2v2h-2zM16 9h2v2h-2zM21 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2.94 5.41l-1.75-1.76.69-.71 1.05 1L20 16.83l.71.71z\"/>\n        <path d=\"M5 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.85 13.15l-1.77-1.77-.88.89 2.65 2.65 4.95-4.96-.88-.88-4.07 4.07z\"/>\n      </svg>`\n    },\n    {\n        name: 'today',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n        <path d=\"M16.53 12.06L15.47 11l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 18l5.94-5.94z\"/>\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 15h5v5h-5zM6 13h5v5H6zM13 6h5v5h-5zM6 6h5v5H6z\"/>\n        <path d=\"M20 2H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h9v-2H4V4h16v9h2V4a2 2 0 0 0-2-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'yesterday',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M10.68 15.38h6.13v-1.75h-6.13V11l-3.49 3.5 3.49 3.5v-2.62z\"/>\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n      </svg>`\n    }\n];\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { DataUtil } from '../data-operations/data-util';\nimport { cloneArray } from '../core/utils';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\nexport class IgxGridFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridTransaction',\n    pure: true\n})\nexport class IgxGridTransactionPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent>) { }\n\n    transform(collection: any[], id: string, pipeTrigger: number) {\n        const grid: IgxGridBaseComponent = this.gridAPI.get(id);\n\n        if (collection && grid.transactions.enabled) {\n            const result = DataUtil.mergeTransactions(\n                cloneArray(collection),\n                grid.transactions.getAggregatedChanges(true),\n                grid.primaryKey);\n            return result;\n        }\n        return collection;\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseComponent, IColumnResizeEventArgs } from '../grid-base.component';\nimport icons from './svgIcons';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IgxGridFilterConditionPipe } from '../grid-common.pipes';\nimport { TitleCasePipe, DatePipe } from '@angular/common';\n\nconst FILTERING_ICONS_FONT_SET = 'filtering-icons';\n\n/**\n *@hidden\n */\nexport class ExpressionUI {\n    public expression: IFilteringExpression;\n    public beforeOperator: FilteringLogic;\n    public afterOperator: FilteringLogic;\n    public isSelected = false;\n}\n\n/**\n *@hidden\n */\n@Injectable()\nexport class IgxFilteringService implements OnDestroy {\n\n    private columnsWithComplexFilter = new Set<string>();\n    private areEventsSubscribed = false;\n    private destroy$ = new Subject<boolean>();\n    private isFiltering = false;\n    private columnToExpressionsMap = new Map<string, ExpressionUI[]>();\n    private filterPipe = new IgxGridFilterConditionPipe();\n    private titlecasePipe = new TitleCasePipe();\n    private datePipe = new DatePipe(window.navigator.language);\n\n    public gridId: string;\n    public isFilterRowVisible = false;\n    public filteredColumn = null;\n    public selectedExpression: IFilteringExpression = null;\n    public columnToChipToFocus = new Map<string, boolean>();\n    public columnToMoreIconHidden = new Map<string, boolean>();\n    public columnStartIndex = -1;\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent>, private iconService: IgxIconService) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.get(this.gridId);\n    }\n\n    /**\n     * Subscribe to grid's events.\n     */\n    public subscribeToEvents() {\n        if (!this.areEventsSubscribed) {\n            this.areEventsSubscribed = true;\n\n            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnResizeEventArgs) => {\n                this.updateFilteringCell(eventArgs.column.field);\n            });\n\n            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IForOfState) => {\n                if (eventArgs.startIndex !== this.columnStartIndex) {\n                    this.columnStartIndex = eventArgs.startIndex;\n                    this.grid.filterCellList.forEach((filterCell) => {\n                        filterCell.updateFilterCellArea();\n                        if (filterCell.getChipToFocus()) {\n                            this.columnToChipToFocus.set(filterCell.column.field, false);\n                            filterCell.focusChip();\n                        }\n                    });\n                }\n            });\n\n            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe((event) => {\n                this.grid.filterCellList.forEach((filterCell) => {\n                    filterCell.updateFilterCellArea();\n                });\n            });\n        }\n    }\n\n    /**\n     * Execute filtering on the grid.\n     */\n    public filter(field: string, expressionsTree: FilteringExpressionsTree): void {\n        this.isFiltering = true;\n\n        this.grid.filter(field, null, expressionsTree);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(expressionsTree));\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Clear the filter of a given column.\n     */\n    public clearFilter(field: string): void {\n        this.isFiltering = true;\n\n        this.grid.clearFilter(field);\n\n        const expr = this.grid.filteringExpressionsTree.find(field);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(expr as FilteringExpressionsTree));\n\n        const expressions = this.getExpressions(field);\n        expressions.length = 0;\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    public registerSVGIcons(): void {\n        for (const icon of icons) {\n            if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {\n                this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);\n            }\n        }\n    }\n\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    public getExpressions(columnId: string): ExpressionUI[] {\n        if (!this.columnToExpressionsMap.has(columnId)) {\n            const column = this.grid.columns.find((col) => col.field === columnId);\n            const expressionUIs = new Array<ExpressionUI>();\n\n            this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);\n            this.columnToExpressionsMap.set(columnId, expressionUIs);\n\n            return expressionUIs;\n        }\n\n        return this.columnToExpressionsMap.get(columnId);\n    }\n\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    public refreshExpressions() {\n        if (!this.isFiltering) {\n            this.columnsWithComplexFilter.clear();\n\n            this.columnToExpressionsMap.forEach((value: ExpressionUI[], key: string) => {\n                const column = this.grid.columns.find((col) => col.field === key);\n                value.length = 0;\n\n                this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);\n\n                const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n                if (isComplex) {\n                    this.columnsWithComplexFilter.add(key);\n                }\n\n                this.updateFilteringCell(key);\n            });\n        }\n    }\n\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    public removeExpression(columnId: string, indexToRemove: number) {\n        const expressionsList = this.getExpressions(columnId);\n\n        if (indexToRemove === 0 && expressionsList.length > 1) {\n            expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === expressionsList.length - 1) {\n            expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;\n            expressionsList[0].beforeOperator = null;\n            expressionsList[expressionsList.length - 1].afterOperator = null;\n        }\n\n        expressionsList.splice(indexToRemove, 1);\n    }\n\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    public createSimpleFilteringTree(columnId: string): FilteringExpressionsTree {\n        const expressionsList = this.getExpressions(columnId);\n        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);\n        let currAndBranch: FilteringExpressionsTree;\n        let currExpressionUI: ExpressionUI;\n\n        for (let i = 0; i < expressionsList.length; i++) {\n            currExpressionUI = expressionsList[i];\n\n            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||\n                 currExpressionUI.beforeOperator === FilteringLogic.Or) &&\n                currExpressionUI.afterOperator === FilteringLogic.And) {\n\n                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                expressionsTree.filteringOperands.push(currAndBranch);\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n\n            } else if (currExpressionUI.beforeOperator === FilteringLogic.And) {\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n            } else {\n                expressionsTree.filteringOperands.push(currExpressionUI.expression);\n                currAndBranch = null;\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    public isFilterComplex(columnId: string) {\n        if (this.columnsWithComplexFilter.has(columnId)) {\n            return true;\n        }\n\n        const column = this.grid.columns.find((col) => col.field === columnId);\n        const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n        if (isComplex) {\n            this.columnsWithComplexFilter.add(columnId);\n        }\n\n        return isComplex;\n    }\n\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    public getOperatorAsString(operator: FilteringLogic): any {\n        return FilteringLogic[operator];\n    }\n\n    /**\n     * Genererate the label of a chip from a given filtering expression.\n     */\n    public getChipLabel(expression: IFilteringExpression): any {\n        if (expression.condition.isUnary) {\n            return this.titlecasePipe.transform(this.filterPipe.transform(expression.condition.name));\n        } else if (expression.searchVal instanceof Date) {\n            return this.datePipe.transform(expression.searchVal);\n        } else {\n            return expression.searchVal;\n        }\n    }\n\n    private updateFilteringCell(columnId: string) {\n        const filterCell = this.grid.filterCellList.find(cell => cell.column.field === columnId);\n        if (filterCell) {\n            filterCell.updateFilterCellArea();\n        }\n    }\n\n    private isFilteringTreeComplex(expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (!expressions) {\n            return false;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            if (expressionsTree.operator === FilteringLogic.Or) {\n                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);\n\n                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.\n                return andOperatorsCount > 1;\n            }\n\n            let isComplex = false;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);\n            }\n\n            return isComplex;\n        }\n\n        return false;\n    }\n\n    private getChildAndOperatorsCount(expressions: IFilteringExpressionsTree): number {\n        let count = 0;\n        let operand;\n        for (let i = 0; i < expressions.filteringOperands.length; i++) {\n            operand = expressions[i];\n            if (operand instanceof FilteringExpressionsTree) {\n                if (operand.operator === FilteringLogic.And) {\n                    count++;\n                }\n\n                count = count + this.getChildAndOperatorsCount(operand);\n            }\n        }\n\n        return count;\n    }\n\n    private generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression,\n                                    operator: FilteringLogic,\n                                    expressionsUIs: ExpressionUI[]): void {\n        if (!expressions) {\n            return;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                this.generateExpressionsList(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);\n            }\n        } else {\n            const exprUI = new ExpressionUI();\n            exprUI.expression = expressions as IFilteringExpression;\n            if (expressionsUIs.length !== 0) {\n                exprUI.beforeOperator = operator;\n            }\n\n            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];\n            if (prevExprUI) {\n                prevExprUI.afterOperator = operator;\n            }\n\n            expressionsUIs.push(exprUI);\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgZone,\n    OnInit,\n    ViewChild,\n    QueryList,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { RestrictDrag } from '../directives/dragdrop/dragdrop.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from './column.component';\nimport { IgxColumnMovingService } from './grid.common';\nimport { isFirefox } from '../core/utils';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header',\n    template: `<ng-template #defaultColumn>\n    {{ column.header || column.field }}\n</ng-template>\n\n<ng-container *ngIf=\"column.columnGroup\">\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid__th-drop-indicator-left\"></span>\n    <div class=\"igx-grid__thead-title\" [style.width.px]=\"column.width\">{{ column.header }}</div>\n    <div class=\"igx-grid__thead-group\">\n        <ng-container *ngFor=\"let child of column.children\">\n            <div class=\"igx-grid__thead-subgroup\">\n                <igx-grid-header [igxColumnMovingDrag]=\"child\" [attr.droppable]=\"true\" [igxColumnMovingDrop]=\"child\" *ngIf=\"!child.hidden\" [gridID]=\"column.gridID\" [column]=\"child\"\n                    [style.min-width.px]=\"child.width\" [style.flex-basis.px]='child.width' [style.max-width.px]='child.width'></igx-grid-header>\n                <igx-grid-filtering-cell [attr.draggable]=\"false\" *ngIf=\"grid.allowFiltering && !child.children && !child.hidden\" [column]=\"child\"\n                    [style.min-width.px]=\"child.width\" [style.flex-basis.px]='child.width' [style.max-width.px]='child.width'></igx-grid-filtering-cell>\n            </div>\n        </ng-container>\n    </div>\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid__th-drop-indicator-right\"></span>\n</ng-container>\n\n<ng-container *ngIf=\"!column.columnGroup\">\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid__th-drop-indicator-left\">\n    </span>\n    <span class=\"igx-grid__th-title\">\n        <ng-container *ngTemplateOutlet=\"column.headerTemplate ? column.headerTemplate : defaultColumn; context: { $implicit: column }\">\n        </ng-container>\n    </span>\n    <div class=\"igx-grid__th-icons\" *ngIf=\"!column.columnGroup\">\n        <igx-icon class=\"sort-icon\" *ngIf=\"column.sortable\">{{sortingIcon}}</igx-icon>\n        <!-- <igx-grid-filter [column]=\"column\" *ngIf=\"column.filterable\"></igx-grid-filter> -->\n    </div>\n\n    <span *ngIf=\"!column.columnGroup\" [attr.draggable]=\"false\" [style.cursor]=\"resizeCursor\" #resizeArea\n        class=\"igx-grid__th-resize-handle\">\n\n        <div *ngIf=\"showResizer\" igxResizer\n            class=\"igx-grid__th-resize-line\"\n            [style.height.px]=\"resizerHeight\"\n            [restrictHResizeMax]=\"restrictResizeMax\"\n            [restrictHResizeMin]=\"restrictResizeMin\"\n            [resizeEndTimeout]=\"resizeEndTimeout\"\n            (resizeEnd)=\"onResize($event)\">\n        </div>\n\n    </span>\n\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid__th-drop-indicator-right\">\n    </span>\n</ng-container>\n\n`\n})\nexport class IgxGridHeaderComponent implements OnInit, DoCheck, AfterViewInit, OnDestroy {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__th--fw',\n            this.column.headerClasses\n        ];\n\n        const classList = {\n            'igx-grid__th': !this.column.columnGroup,\n            'asc': this.ascending,\n            'desc': this.descending,\n            'igx-grid__th--number': this.column.dataType === DataType.Number,\n            'igx-grid__th--sorted': this.sorted,\n            'igx-grid__drag-col-header': this.dragged,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__th--filtering': this.filteringService.filteredColumn === this.column\n        };\n\n        Object.entries(classList).forEach(([klass, value]) => {\n            if (value) {\n                defaultClasses.push(klass);\n            }\n        });\n        return defaultClasses.join(' ');\n    }\n\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        // HACK - think of a better solution\n        const colWidth = this.column.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (isPercentageWidth) {\n            const firstContentCell = this.column.cells[0];\n            if (firstContentCell) {\n                return firstContentCell.nativeElement.getBoundingClientRect().width + 'px';\n            }\n        } else {\n            return this.column.width;\n        }\n    }\n\n    @HostBinding('style.height.px')\n    get height() {\n        if (this.grid.hasColumnGroups) {\n            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight;\n        }\n        return null;\n    }\n\n    get ascending() {\n        return this.sortDirection === SortingDirection.Asc;\n    }\n\n    get descending() {\n        return this.sortDirection === SortingDirection.Desc;\n    }\n\n    get sortingIcon(): string {\n        if (this.sortDirection !== SortingDirection.None) {\n            // arrow_downward and arrow_upward\n            // are material icons ligature strings\n            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';\n        }\n        return 'none';\n    }\n\n    get sorted() {\n        return this.sortDirection !== SortingDirection.None;\n    }\n\n    get dragged() {\n        return this.column === this.column.grid.draggedColumn;\n    }\n\n    @HostBinding('style.z-index')\n    get zIndex() {\n        if (!this.column.pinned) {\n            return null;\n        }\n        return 9999 - this.grid.pinnedColumns.indexOf(this.column);\n    }\n\n    @HostBinding('attr.role')\n    public hostRole = 'columnheader';\n\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    @HostBinding('attr.id')\n    get headerID() {\n        return `${this.gridID}_${this.column.field}`;\n    }\n\n    @ViewChild('resizeArea')\n    public resizeArea: ElementRef;\n\n    @ViewChildren(IgxGridHeaderComponent, { read: IgxGridHeaderComponent })\n    public children: QueryList<IgxGridHeaderComponent>;\n\n    public resizeCursor = null;\n    public showResizer = false;\n    public resizerHeight;\n    public dragDirection: RestrictDrag = RestrictDrag.HORIZONTALLY;\n    public resizeEndTimeout = isFirefox() ? 200 : 0;\n\n    protected sortDirection = SortingDirection.None;\n\n    private _startResizePos;\n    private _pinnedMaxWidth;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        public zone: NgZone,\n        private cms: IgxColumnMovingService,\n        public filteringService: IgxFilteringService\n    ) { }\n\n    public ngOnInit() {\n        this.column.columnGroup ? this.zone.runTask(() => this.cdr.markForCheck()) :\n            this.cdr.markForCheck();\n    }\n\n    public ngDoCheck() {\n        this.getSortDirection();\n        this.cdr.markForCheck();\n    }\n\n    ngAfterViewInit() {\n        if (!this.column.columnGroup) {\n            this.zone.runOutsideAngular(() => {\n                this.resizeArea.nativeElement.addEventListener('mouseover', this.onResizeAreaMouseOver.bind(this));\n                this.resizeArea.nativeElement.addEventListener('mousedown', this.onResizeAreaMouseDown.bind(this));\n                this.resizeArea.nativeElement.addEventListener('dblclick', this.onResizeAreaDblClick.bind(this));\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        if (!this.column.columnGroup) {\n            this.zone.runOutsideAngular(() => {\n                this.resizeArea.nativeElement.removeEventListener('mouseover', this.onResizeAreaMouseOver);\n                this.resizeArea.nativeElement.removeEventListener('mousedown', this.onResizeAreaMouseDown);\n                this.resizeArea.nativeElement.removeEventListener('dblclick', this.onResizeAreaDblClick);\n            });\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this.column.grid.isColumnResizing) {\n            event.stopPropagation();\n            if (this.grid.filteringService.isFilterRowVisible) {\n                if (this.column.filterable && !this.column.columnGroup &&\n                    !this.grid.filteringService.isFilterComplex(this.column.field)) {\n                    this.grid.filteringService.filteredColumn = this.column;\n                }\n            } else if (this.column.sortable) {\n                const groupingExpr = this.grid.groupingExpressions ?\n                    this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;\n                const sortDir = groupingExpr ?\n                    this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc\n                    : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;\n                this.sortDirection = sortDir;\n                this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,\n                    strategy: this.column.sortStrategy });\n                this.grid.onSortingDone.emit({\n                    dir: this.sortDirection,\n                    fieldName: this.column.field,\n                    ignoreCase: this.column.sortingIgnoreCase,\n                    strategy: this.column.sortStrategy\n                });\n            }\n        }\n    }\n\n    get restrictResizeMin(): number {\n        const actualMinWidth = parseFloat(this.column.minWidth);\n        const defaultMinWidth = parseFloat(this.column.defaultMinWidth);\n\n        let minWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;\n        minWidth = minWidth < parseFloat(this.column.width) ? minWidth : parseFloat(this.column.width);\n\n        return minWidth - this.elementRef.nativeElement.getBoundingClientRect().width;\n    }\n\n    get restrictResizeMax(): number {\n        const actualWidth = this.elementRef.nativeElement.getBoundingClientRect().width;\n\n        if (this.column.pinned) {\n            const pinnedMaxWidth = this._pinnedMaxWidth =\n                this.grid.calcPinnedContainerMaxWidth - this.grid.getPinnedWidth(true) + actualWidth;\n\n            if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {\n                this._pinnedMaxWidth = this.column.maxWidth;\n\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return pinnedMaxWidth - actualWidth;\n            }\n        } else {\n            if (this.column.maxWidth) {\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n\n    get grid(): any {\n        return this.gridAPI.get(this.gridID);\n    }\n\n    get isPinned() {\n        return this.column.pinned;\n    }\n\n    get isLastPinned() {\n        const pinnedCols = this.grid.pinnedColumns;\n        if (pinnedCols.length === 0) {\n            return false;\n        } else {\n            return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;\n        }\n    }\n\n    protected getSortDirection() {\n        const expr = this.gridAPI.get(this.gridID).sortingExpressions.find((x) => x.fieldName === this.column.field);\n        this.sortDirection = expr ? expr.dir : SortingDirection.None;\n    }\n\n    private onResizeAreaMouseOver() {\n        if (this.column.resizable) {\n            this.resizeCursor = 'col-resize';\n            this.cdr.detectChanges();\n        }\n    }\n\n    private onResizeAreaMouseDown(event) {\n        if (event.button === 0 && this.column.resizable) {\n            this.showResizer = true;\n            this.column.grid.isColumnResizing = true;\n            this.resizerHeight = this.grid.calcResizerHeight;\n            this._startResizePos = event.clientX;\n        } else {\n            this.resizeCursor = null;\n        }\n        this.cdr.detectChanges();\n    }\n\n    private onResizeAreaDblClick() {\n        if (this.column.resizable) {\n            const currentColWidth = this.elementRef.nativeElement.getBoundingClientRect().width;\n\n            const size = this.column.getLargestCellWidth();\n\n            if (this.column.pinned) {\n                const newPinnedWidth = this.grid.getPinnedWidth(true) - currentColWidth + parseFloat(size);\n\n                if (newPinnedWidth <= this.grid.calcPinnedContainerMaxWidth) {\n                    this.column.width = size;\n                }\n            } else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {\n                this.column.width = parseFloat(this.column.maxWidth) + 'px';\n            } else if (parseFloat(size) < parseFloat(this.column.defaultMinWidth)) {\n                this.column.width = this.column.defaultMinWidth + 'px';\n            } else {\n                this.column.width = size;\n            }\n\n            this.grid.markForCheck();\n            this.grid.reflow();\n            this.grid.onColumnResized.emit({ column: this.column, prevWidth: currentColWidth.toString(), newWidth: this.column.width });\n        }\n    }\n\n    public onResize(event) {\n        this.column.grid.isColumnResizing = false;\n\n        this.showResizer = false;\n        const diff = event.clientX - this._startResizePos;\n\n        if (this.column.resizable) {\n            let currentColWidth = parseFloat(this.column.width);\n\n            const actualMinWidth = parseFloat(this.column.minWidth);\n            const defaultMinWidth = parseFloat(this.column.defaultMinWidth);\n\n            let colMinWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;\n            const colMaxWidth = this.column.pinned ? parseFloat(this._pinnedMaxWidth) : parseFloat(this.column.maxWidth);\n\n            const actualWidth = this.elementRef.nativeElement.getBoundingClientRect().width;\n\n            currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n            colMinWidth = colMinWidth < currentColWidth ? colMinWidth : currentColWidth;\n\n            if (currentColWidth + diff < colMinWidth) {\n                this.column.width = colMinWidth + 'px';\n            } else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {\n                this.column.width = colMaxWidth + 'px';\n            } else {\n                this.column.width = (currentColWidth + diff) + 'px';\n            }\n\n            this.grid.markForCheck();\n            this.grid.reflow();\n\n            if (currentColWidth !== parseFloat(this.column.width)) {\n                this.grid.onColumnResized.emit({ column: this.column, prevWidth: currentColWidth.toString(), newWidth: this.column.width });\n            }\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\n\nenum MoveDirection {\n    LEFT = 'left',\n    RIGHT = 'right'\n}\n\n/** @hidden */\n@Injectable()\nexport class IgxGridNavigationService {\n    public grid: IgxGridBaseComponent;\n\n    get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    get displayContainerScrollLeft() {\n        return parseInt(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft, 10);\n    }\n\n    get verticalDisplayContainerElement() {\n        return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public horizontalScroll(rowIndex) {\n        return this.grid.dataRowList.find((row) => row.index === rowIndex).virtDirRow;\n    }\n\n    public getColumnUnpinnedIndex(visibleColumnIndex: number) {\n        const column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    public isColumnFullyVisible(visibleColumnIndex: number) {\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth ||\n            this.grid.columnList.filter(c => !c.columnGroup).find((column) => column.visibleIndex === visibleColumnIndex).pinned) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        return this.displayContainerWidth >=\n            this.grid.dataRowList.first.virtDirRow.getColumnScrollLeft(index + 1) -\n            this.displayContainerScrollLeft;\n    }\n\n    public isColumnLeftFullyVisible(visibleColumnIndex) {\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth ||\n            this.grid.columnList.filter(c => !c.columnGroup).find((column) => column.visibleIndex === visibleColumnIndex).pinned) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        return this.displayContainerScrollLeft <=\n            this.grid.dataRowList.first.virtDirRow.getColumnScrollLeft(index);\n    }\n\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup);\n    }\n\n    public isRowInEditMode(rowIndex): boolean {\n        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);\n    }\n\n    public isColumnEditable(visibleColumnIndex: number): boolean {\n        const column = this.gridOrderedColumns.find(c => c.visibleIndex === visibleColumnIndex);\n        return column ? column.editable : false;\n    }\n\n    public findNextEditable(direction: string, visibleColumnIndex: number) {\n        const gridColumns = this.gridOrderedColumns;\n        if (direction === MoveDirection.LEFT) {\n            return gridColumns.splice(0, visibleColumnIndex + 1).reverse().findIndex(e => e.editable);\n        } else if (direction === MoveDirection.RIGHT) {\n            return gridColumns.splice(visibleColumnIndex, gridColumns.length - 1).findIndex(e => e.editable);\n        }\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex) {\n        if (this.isTreeGrid && visibleColumnIndex === 0) {\n            return this.grid.nativeElement.querySelector(\n                `igx-tree-grid-cell[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        }\n        return this.grid.nativeElement.querySelector(\n            `igx-grid-cell[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public onKeydownArrowRight(element, rowIndex, visibleColumnIndex) {\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n        if (this.isColumnFullyVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned\n            if (element.classList.contains('igx-grid__th--pinned-last')) {\n                if (this.isColumnLeftFullyVisible(visibleColumnIndex + 1)) {\n                    element.nextElementSibling.firstElementChild.focus();\n                } else {\n                    this.grid.nativeElement.focus({preventScroll: true});\n                    this.grid.parentVirtDir.onChunkLoad\n                        .pipe(first())\n                        .subscribe(() => {\n                            element.nextElementSibling.firstElementChild.focus();\n                        });\n                        this.horizontalScroll(rowIndex).scrollTo(0);\n                }\n            } else {\n                element.nextElementSibling.focus();\n            }\n        } else {\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1);\n        }\n    }\n\n    public onKeydownArrowLeft(element, rowIndex, visibleColumnIndex) {\n        if (visibleColumnIndex === 0) {\n            return;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);\n        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === - 1) {\n            element.parentNode.previousElementSibling.focus();\n        } else if (!this.isColumnLeftFullyVisible(visibleColumnIndex - 1)) {\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1);\n        } else {\n            element.previousElementSibling.focus();\n        }\n\n    }\n\n    public movePreviousEditable(rowIndex, visibleColumnIndex) {\n        const addedIndex = this.isColumnEditable(visibleColumnIndex - 1) ?\n            0 :\n            this.findNextEditable(MoveDirection.LEFT, visibleColumnIndex - 1);\n        if (addedIndex === -1) {\n            this.grid.rowEditTabs.last.element.nativeElement.focus();\n            return;\n        }\n        const editableIndex = visibleColumnIndex - 1 - addedIndex;\n        if (this.getColumnUnpinnedIndex(editableIndex) === -1 && this.grid.pinnedColumns.length) {\n            // if target is NOT pinned and there are pinned columns\n            // since addedIndex !== -1, there will always be a target\n            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();\n        } else if (!this.isColumnLeftFullyVisible(editableIndex)) {  // if not fully visible, perform scroll\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.performHorizontalScrollToCell(rowIndex, editableIndex);\n        } else {\n            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // if fully visible, just focus\n        }\n    }\n\n    public moveNextEditable(element, rowIndex, visibleColumnIndex) {\n        let addedIndex = 0;\n        addedIndex = this.isColumnEditable(visibleColumnIndex + 1) ?\n                0 :\n        this.findNextEditable(MoveDirection.RIGHT, visibleColumnIndex + 1);\n        if (addedIndex === -1 && this.grid.rowEditTabs) { // no previous edit column -> go to RE buttons\n            this.grid.rowEditTabs.first.element.nativeElement.focus();\n            return;\n        }\n        const editableIndex = visibleColumnIndex + 1 + addedIndex;\n        if (this.isColumnFullyVisible(editableIndex)) { // If column is fully visible\n            if (element.classList.contains('igx-grid__th--pinned-last')) { // If this is pinned\n                if (this.isColumnLeftFullyVisible(editableIndex)) { // If next column is fully visible LEFT\n                    this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // focus\n                } else { // if NOT fully visible, perform scroll\n                    this.grid.nativeElement.focus({preventScroll: true});\n                    this.performHorizontalScrollToCell(rowIndex, editableIndex);\n                }\n            } else { // cell is next cell\n                this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();\n            }\n        } else {\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.performHorizontalScrollToCell(rowIndex, editableIndex);\n        }\n    }\n    public onKeydownHome(rowIndex) {\n        const rowElement = this.grid.dataRowList.find((row) => row.index === rowIndex).nativeElement;\n        let firstCell = this.isTreeGrid ?\n        rowElement.querySelector('igx-tree-grid-cell') :\n        rowElement.querySelector('igx-grid-cell');\n        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {\n            firstCell.focus();\n        } else {\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    this.grid.nativeElement.focus({preventScroll: true});\n                    firstCell = this.isTreeGrid ? rowElement.querySelector('igx-tree-grid-cell') :\n                    rowElement.querySelector('igx-grid-cell');\n                    firstCell.focus();\n                });\n            this.horizontalScroll(rowIndex).scrollTo(0);\n        }\n    }\n\n    public onKeydownEnd(rowIndex) {\n        const index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;\n        const rowElement = this.grid.dataRowList.find((row) => row.index === rowIndex).nativeElement;\n        const allCells = rowElement.querySelectorAll('igx-grid-cell');\n        const lastCell = allCells[allCells.length - 1];\n        if (this.isColumnFullyVisible(index)) {\n            lastCell.focus();\n        } else {\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    this.grid.nativeElement.focus({preventScroll: true});\n                    lastCell.focus();\n                });\n            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.isTreeGrid && visibleColumnIndex === 0 ? 'igx-tree-grid-cell' : 'igx-grid-cell';\n        if (verticalScroll.scrollTop === 0) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[0].focus();\n        } else {\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.grid.verticalScrollContainer.scrollTo(0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[0].focus(); }\n                });\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.isTreeGrid && visibleColumnIndex === 0 ? 'igx-tree-grid-cell' : 'igx-grid-cell';\n        if (verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[cells.length - 1].focus();\n        } else {\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                });\n        }\n    }\n\n    public navigateUp(rowElement, currentRowIndex, visibleColumnIndex) {\n        if (currentRowIndex === 0) {\n            this.grid.rowList.first.cells.first._clearCellSelection();\n\n            if (this.grid.allowFiltering) {\n                const visColLength = this.grid.visibleColumns.length;\n                this.grid.headerContainer.scrollTo(visColLength - 1);\n                this.grid.filteringService.columnToChipToFocus.set(this.grid.visibleColumns[visColLength - 1].field, true);\n            }\n\n            return;\n        }\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        if (!rowElement.previousElementSibling ||\n            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    if (tag === 'igx-grid-row' || tag === 'igx-tree-grid-row') {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                    } else {\n                        rowElement = this.grid.nativeElement.querySelector(\n                            `igx-grid-groupby-row[data-rowindex=\"${currentRowIndex}\"]`);\n                    }\n                    this.focusPreviousElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusPreviousElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    private focusPreviousElement(currentRowEl, visibleColumnIndex) {\n        if (currentRowEl.previousElementSibling.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n            currentRowEl.previousElementSibling.focus();\n        } else {\n            if (this.isColumnFullyVisible(visibleColumnIndex) && this.isColumnLeftFullyVisible(visibleColumnIndex)) {\n                const cell = this.isTreeGrid && visibleColumnIndex === 0 ?\n                currentRowEl.previousElementSibling.querySelector(`igx-tree-grid-cell[data-visibleIndex=\"${visibleColumnIndex}\"]`) :\n                currentRowEl.previousElementSibling.querySelector(`igx-grid-cell[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cell.focus();\n                return;\n            }\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.performHorizontalScrollToCell(parseInt(\n                currentRowEl.previousElementSibling.getAttribute('data-rowindex'), 10), visibleColumnIndex);\n            }\n        }\n\n    public navigateDown(rowElement, currentRowIndex, visibleColumnIndex) {\n        if (currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1) {\n            return;\n        }\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = rowElement.nextElementSibling ?\n        rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :\n        containerHeight + rowHeight;\n        this.grid.nativeElement.focus({preventScroll: true});\n        if (containerHeight && containerHeight < targetEndTopOffset) {\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex + 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    if (tag === 'igx-grid-row' || tag === 'igx-tree-grid-row') {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                    } else {\n                        rowElement = this.grid.nativeElement.querySelector(\n                            `igx-grid-groupby-row[data-rowindex=\"${currentRowIndex}\"]`);\n                    }\n                    this.focusNextElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusNextElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    private focusNextElement(rowElement, visibleColumnIndex) {\n        if (rowElement.nextElementSibling.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n            rowElement.nextElementSibling.focus();\n        } else {\n            if (this.isColumnFullyVisible(visibleColumnIndex) && this.isColumnLeftFullyVisible(visibleColumnIndex)) {\n                const cell = this.isTreeGrid && visibleColumnIndex === 0 ?\n                rowElement.nextElementSibling.querySelector(`igx-tree-grid-cell[data-visibleIndex=\"${visibleColumnIndex}\"]`) :\n                rowElement.nextElementSibling.querySelector(`igx-grid-cell[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cell.focus();\n                return;\n            }\n            this.performHorizontalScrollToCell(parseInt(\n                rowElement.nextElementSibling.getAttribute('data-rowindex'), 10), visibleColumnIndex);\n            }\n        }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (verticalScroll.scrollTop === 0) {\n            if (!this.isTreeGrid) {\n                this.onKeydownHome(this.grid.dataRowList.first.index);\n            } else {\n                this.onKeydownHome(0);\n            }\n        } else {\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        }\n    }\n\n    public goToLastCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        if (verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rows = this.getAllRows();\n            const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n            this.onKeydownEnd(rowIndex);\n        } else {\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rows = this.getAllRows();\n                if (rows.length > 0) {\n                    const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n                    this.onKeydownEnd(rowIndex);\n                }\n                });\n        }\n    }\n\n    public performTab(currentRowEl, rowIndex, visibleColumnIndex) {\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            if (this.isRowInEditMode(rowIndex)) {\n                this.grid.rowEditTabs.first.element.nativeElement.focus();\n                return;\n            }\n            if (this.grid.rowList.find(row => row.index === rowIndex + 1)) {\n                this.navigateDown(currentRowEl, rowIndex, 0);\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex);\n            if (cell) {\n                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {\n                    this.moveNextEditable(cell, rowIndex, visibleColumnIndex);\n                    return;\n                }\n                this.onKeydownArrowRight(cell, rowIndex, visibleColumnIndex);\n            }\n        }\n    }\n\n    public performShiftTabKey(currentRowEl, rowIndex, visibleColumnIndex) {\n        if (visibleColumnIndex === 0) {\n                if (this.isRowInEditMode(rowIndex)) {\n                    this.grid.rowEditTabs.last.element.nativeElement.focus();\n                    return;\n                }\n                this.navigateUp(currentRowEl, rowIndex,\n                    this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex);\n        } else {\n            const cell = currentRowEl.querySelector(`igx-grid-cell[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            if (cell) {\n                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {\n                    this.movePreviousEditable( rowIndex, visibleColumnIndex);\n                    return;\n                }\n                this.onKeydownArrowLeft(cell, rowIndex, visibleColumnIndex);\n            }\n        }\n    }\n\n    private performHorizontalScrollToCell(rowIndex, visibleColumnIndex) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex).focus();\n            });\n        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n    }\n    private getRowByIndex(index) {\n        return this.isTreeGrid ? this.grid.nativeElement.querySelector(\n            `igx-tree-grid-row[data-rowindex=\"${index}\"]`) :\n            this.grid.nativeElement.querySelector(\n                `igx-grid-row[data-rowindex=\"${index}\"]`);\n    }\n\n    private getAllRows() {\n        return this.isTreeGrid ? this.grid.nativeElement.querySelectorAll('igx-tree-grid-row') :\n        this.grid.nativeElement.querySelectorAll('igx-grid-row');\n    }\n\n    private get isTreeGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';\n    }\n}\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, QueryList } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxGridNavigationService } from './grid-navigation.service';\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEdit]'\n})\nexport class IgxRowEditTemplateDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditText]'\n})\nexport class IgxRowEditTextDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditActions]'\n})\nexport class IgxRowEditActionsDirective { }\n\n/** @hidden */\n@Directive({\n    selector: `[igxRowEditTabStop]`\n})\nexport class IgxRowEditTabStopDirective {\n    private get allTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.grid.rowEditTabs;\n    }\n    constructor(\n        @Inject(forwardRef(() => IgxGridBaseComponent)) public grid: IgxGridBaseComponent,\n        public element: ElementRef,\n        @Inject(forwardRef(() => IgxGridNavigationService)) public navigationService: IgxGridNavigationService) {}\n    @HostListener('keydown.Tab', [`$event`])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    public handleTab(event: KeyboardEvent): void {\n        event.stopPropagation();\n        if (this.allTabs.length > 1) {\n            if ((this.allTabs.last ===  this && !event.shiftKey) ||\n                (this.allTabs.first ===  this && event.shiftKey)\n            ) {\n                this.move(event);\n            }\n        } else {\n            this.move(event);\n        }\n    }\n    private focusNextCell(rowIndex, cellIndex) {\n        const grid = this.grid as any;\n        grid.parentVirtDir.onChunkLoad.pipe(first()).subscribe(() => {\n            grid.rowInEditMode.cells.find(c => c.visibleColumnIndex === cellIndex).element.nativeElement.focus();\n        });\n    }\n    private move(event: KeyboardEvent) {\n        event.preventDefault();\n        const horizontalScroll = this.grid.parentVirtDir.getHorizontalScroll();\n        const targetIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;\n        const targetCell = this.grid.rowInEditMode.cells.find(e => e.visibleColumnIndex === targetIndex);\n        if (!targetCell ||\n            !this.navigationService.isColumnFullyVisible(targetIndex)\n            || !this.navigationService.isColumnLeftFullyVisible(targetIndex)) {\n            this.focusNextCell(this.grid.rowInEditMode.index, targetIndex);\n            horizontalScroll.scrollLeft =\n            this.grid.rowInEditMode.virtDirRow.getColumnScrollLeft(this.navigationService.getColumnUnpinnedIndex(targetIndex));\n        } else {\n            targetCell._updateCellSelectionStatus(true, event);\n            targetCell.inEditMode = true;\n            targetCell.nativeElement.focus();\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    HostBinding,\n    AfterViewInit,\n    ElementRef,\n    HostListener,\n    OnInit\n} from '@angular/core';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { IgxFilteringService, ExpressionUI } from './grid-filtering.service';\nimport { KEYS, cloneArray } from '../../core/utils';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\n\n/**\n * @hidden\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-cell',\n    template: `<ng-template #emptyFilter>\n        <igx-chips-area [attr.draggable]=\"false\" class=\"igx-filtering-chips\">\n            <igx-chip #ghostChip [attr.draggable]=\"false\" (click)=\"onChipClicked()\" (keydown)=\"onChipKeyDown($event)\" [displayDensity]=\"'cosy'\">\n                <igx-icon [attr.draggable]=\"false\" igxPrefix>filter_list</igx-icon>\n                <span [attr.draggable]=\"false\">Filter</span>\n            </igx-chip>\n        </igx-chips-area>\n</ng-template>\n\n<ng-template #defaultFilter>\n    <igx-chips-area #chipsArea class=\"igx-filtering-chips\">\n        <ng-container *ngFor=\"let item of visibleExpressionsList; let last = last;\" >\n            <igx-chip\n                [removable]=\"true\"\n                [displayDensity]=\"'cosy'\"\n                (click)=\"onChipClicked(item.expression)\"\n                (keydown)=\"onChipKeyDown($event, item.expression)\"\n                (onRemove)=\"onChipRemoved($event, item)\">\n                <igx-icon igxPrefix\n                    fontSet=\"filtering-icons\"\n                    [name]=\"item.expression.condition.iconName\">\n                </igx-icon>\n                <span #label>\n                    {{filteringService.getChipLabel(item.expression)}}\n                </span>\n            </igx-chip>\n            <span class=\"igx-filtering-chips__connector\" *ngIf=\"!last\">{{filteringService.getOperatorAsString(item.afterOperator)}}</span>\n        </ng-container>\n        <div #moreIcon [ngClass]=\"filteringIndicatorClass()\" (click)=\"onChipClicked()\" tabindex=\"0\">\n            <igx-icon>filter_list</igx-icon>\n            <igx-badge [value]=\"moreFiltersCount\"></igx-badge>\n        </div>\n    </igx-chips-area>\n</ng-template>\n\n<ng-template #complexFilter>\n    <igx-chip #complexChip [removable]=\"true\" [displayDensity]=\"'cosy'\" (onRemove)=\"clearFiltering()\">\n        <igx-icon igxPrefix>filter_list</igx-icon>\n        <span>Complex Filter</span>\n    </igx-chip>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template; context: { $implicit: this }\"></ng-container>\n`\n})\nexport class IgxGridFilteringCellComponent implements AfterViewInit, OnInit {\n\n    private rootExpressionsTree: FilteringExpressionsTree;\n    private expressionsList: ExpressionUI[];\n    private baseClass = 'igx-grid__filtering-cell-indicator';\n    private currentTemplate = null;\n\n    public visibleExpressionsList: ExpressionUI[];\n    public moreFiltersCount = 0;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('emptyFilter', { read: TemplateRef })\n    protected emptyFilter: TemplateRef<any>;\n\n    @ViewChild('defaultFilter', { read: TemplateRef })\n    protected defaultFilter: TemplateRef<any>;\n\n    @ViewChild('complexFilter', { read: TemplateRef })\n    protected complexFilter: TemplateRef<any>;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChild('moreIcon', { read: ElementRef })\n    protected moreIcon: ElementRef;\n\n    @ViewChild('ghostChip', { read: IgxChipComponent })\n    protected ghostChip: IgxChipComponent;\n\n    @ViewChild('complexChip', { read: IgxChipComponent })\n    protected complexChip: IgxChipComponent;\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        // HACK - think of a better solution\n        const colWidth = this.column.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (isPercentageWidth) {\n            const firstContentCell = this.column.cells[0];\n            if (firstContentCell) {\n                return firstContentCell.nativeElement.getBoundingClientRect().width + 'px';\n            }\n        } else {\n            return this.column.width;\n        }\n    }\n\n    @HostBinding('class.igx-grid__filtering-cell')\n    public cssClass = 'igx-grid__filtering-cell';\n\n    @HostBinding('class.igx-grid__th--pinned-last')\n    get isLastPinned() {\n        const pinnedCols = this.filteringService.grid.pinnedColumns;\n        if (pinnedCols.length === 0) {\n            return false;\n        } else {\n            return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef, public filteringService: IgxFilteringService, public navService: IgxGridNavigationService) {\n        this.filteringService.subscribeToEvents();\n    }\n\n    ngOnInit(): void {\n        this.filteringService.columnToChipToFocus.set(this.column.field, false);\n        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n    }\n\n    ngAfterViewInit(): void {\n        this.updateFilterCellArea();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeyDown(eventArgs) {\n        if (eventArgs.shiftKey) {\n            if (this.column.visibleIndex > 0 && !this.navService.isColumnLeftFullyVisible(this.column.visibleIndex - 1)) {\n                eventArgs.preventDefault();\n                this.filteringService.grid.headerContainer.scrollTo(this.column.visibleIndex - 1);\n            } else if (this.column.visibleIndex === 0) {\n                eventArgs.preventDefault();\n            }\n        } else {\n            if (this.column.visibleIndex === this.filteringService.grid.columnList.length - 1) {\n                if (this.currentTemplate === this.defaultFilter) {\n                    if (this.isMoreIconVisible() === false) {\n                        if (this.moreIcon.nativeElement === document.activeElement) {\n                            this.navService.goToFirstCell();\n                        }\n                    } else if (this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__item`) ===\n                               document.activeElement) {\n                        this.navService.goToFirstCell();\n                    }\n                } else {\n                    this.navService.goToFirstCell();\n                }\n            } else if (!this.navService.isColumnFullyVisible(this.column.visibleIndex + 1)) {\n                eventArgs.preventDefault();\n                this.filteringService.grid.headerContainer.scrollTo(this.column.visibleIndex + 1);\n            }\n        }\n\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * Returns the chip to be focused.\n     */\n    public getChipToFocus() {\n        return this.filteringService.columnToChipToFocus.get(this.column.field);\n    }\n\n    /**\n     * Updates the filtering cell area.\n     */\n    public updateFilterCellArea() {\n        this.expressionsList = this.filteringService.getExpressions(this.column.field);\n        this.updateVisibleFilters();\n    }\n\n    get template(): TemplateRef<any> {\n        if (!this.column.filterable) {\n            this.currentTemplate = null;\n            return null;\n        }\n\n        const expressionTree = this.column.filteringExpressionsTree;\n        if (!expressionTree || expressionTree.filteringOperands.length === 0) {\n            this.currentTemplate = this.emptyFilter;\n            return this.emptyFilter;\n        }\n\n        if (this.filteringService.isFilterComplex(this.column.field)) {\n            this.currentTemplate = this.complexFilter;\n            return this.complexFilter;\n        }\n\n        this.currentTemplate = this.defaultFilter;\n        return this.defaultFilter;\n    }\n\n    /**\n     * Chip clicked event handler.\n     */\n    public onChipClicked(expression?: IFilteringExpression) {\n        if (expression) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = (item.expression === expression);\n            });\n        } else if (this.expressionsList.length > 0) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = false;\n            });\n            this.expressionsList[0].isSelected = true;\n        }\n\n        this.filteringService.filteredColumn = this.column;\n        this.filteringService.isFilterRowVisible = true;\n        this.filteringService.selectedExpression = expression;\n    }\n\n    /**\n     * Chip removed event handler.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove);\n    }\n\n    /**\n     * Clears the filtering.\n     */\n    public clearFiltering(): void {\n        this.filteringService.clearFilter(this.column.field);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Chip keydown event handler.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, expression?: IFilteringExpression) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.onChipClicked(expression);\n        }\n    }\n\n    /**\n     * Returns the filtering indicator class.\n     */\n    public filteringIndicatorClass() {\n        return {\n            [this.baseClass]: !this.isMoreIconVisible(),\n            [`${this.baseClass}--hidden`]: this.isMoreIconVisible()\n        };\n    }\n\n    /**\n     * Focus a chip depending on the current visible template.\n     */\n    public focusChip() {\n        if (this.currentTemplate === this.defaultFilter) {\n            if (this.isMoreIconVisible() === false) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n            }\n        } else if (this.currentTemplate === this.emptyFilter) {\n            this.ghostChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else if (this.currentTemplate === this.complexFilter) {\n            this.complexChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        }\n    }\n\n    private removeExpression(indexToRemove: number) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.updateVisibleFilters();\n        this.filter();\n    }\n\n    private filter(): void {\n        this.rootExpressionsTree = this.filteringService.createSimpleFilteringTree(this.column.field);\n\n        this.filteringService.filter(this.column.field, this.rootExpressionsTree);\n    }\n\n    private isMoreIconVisible(): boolean {\n        return this.filteringService.columnToMoreIconHidden.get(this.column.field);\n    }\n\n    private updateVisibleFilters() {\n        this.visibleExpressionsList = cloneArray(this.expressionsList);\n\n        // TODO: revise the usage of this.cdr.detectChanges() here\n        this.cdr.detectChanges();\n\n        if (this.moreIcon) {\n            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n        }\n        if (this.chipsArea && this.expressionsList.length > 1) {\n            const areaWidth = this.chipsArea.element.nativeElement.offsetWidth;\n            let viewWidth = 0;\n            const chipsAreaElements = this.chipsArea.element.nativeElement.children;\n            let visibleChipsCount = 0;\n            const moreIconWidth = this.moreIcon.nativeElement.offsetWidth -\n            parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);\n\n            for (let index = 0; index < chipsAreaElements.length - 1; index++) {\n                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {\n                    viewWidth += chipsAreaElements[index].offsetWidth;\n                    if (index % 2 === 0) {\n                        visibleChipsCount++;\n                    } else {\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);\n                    }\n                } else {\n                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    } else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    }\n                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;\n                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);\n                    this.visibleExpressionsList.splice(visibleChipsCount);\n                    break;\n                }\n            }\n            this.cdr.detectChanges();\n        }\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ContentChildren,\n    ContentChild,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    IterableChangeRecord,\n    IterableDiffers,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    AfterViewChecked,\n    ViewContainerRef,\n    InjectionToken\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil, first } from 'rxjs/operators';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, isNavigationKey, mergeObjects, CancelableEventArgs } from '../core/utils';\nimport { DataType, DataUtil } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IGroupByExpandState } from '../data-operations/groupby-expand-state.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IForOfState, IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { IgxBaseExporter, IgxExporterOptionsBase, AbsoluteScrollStrategy, HorizontalAlignment, VerticalAlignment } from '../services/index';\nimport { IgxCheckboxComponent } from './../checkbox/checkbox.component';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './column-hiding-item.directive';\nimport { IgxColumnComponent } from './column.component';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../chips/chips-area.component';\nimport { ISummaryExpression } from './grid-summary';\nimport { DropPosition, ContainerPositioningStrategy } from './grid.common';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionType, TransactionService, State } from '../services/index';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditTabStopDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditActionsDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { DisplayDensity } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\n\nconst MINIMUM_COLUMN_WIDTH = 136;\n\nexport const IgxGridTransaction = new InjectionToken<string>('IgxGridTransaction');\n\nexport interface IGridCellEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n}\n\nexport interface IGridEditEventArgs extends CancelableEventArgs {\n    rowID: any;\n    cellID?: {\n        rowID: any,\n        columnID: any,\n        rowIndex: number\n    };\n    oldValue: any;\n    newValue?: any;\n    event?: Event;\n}\n\nexport interface IPinColumnEventArgs {\n    column: IgxColumnComponent;\n    insertAtIndex: number;\n}\n\nexport interface IPageEventArgs {\n    previous: number;\n    current: number;\n}\n\nexport interface IRowDataEventArgs {\n    data: any;\n}\n\nexport interface IColumnResizeEventArgs {\n    column: IgxColumnComponent;\n    prevWidth: string;\n    newWidth: string;\n}\n\nexport interface IRowSelectionEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    row?: IgxRowComponent<IgxGridBaseComponent>;\n    event?: Event;\n}\n\nexport interface ISearchInfo {\n    searchText: string;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n    activeMatchIndex: number;\n    matchInfoCache: any[];\n}\n\nexport interface IGridToolbarExportEventArgs {\n    grid: IgxGridBaseComponent;\n    exporter: IgxBaseExporter;\n    options: IgxExporterOptionsBase;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingStartEventArgs {\n    source: IgxColumnComponent;\n}\n\nexport interface IColumnMovingEventArgs {\n    source: IgxColumnComponent;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingEndEventArgs {\n    source: IgxColumnComponent;\n    target: IgxColumnComponent;\n}\n\nexport interface IFocusChangeEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n    cancel: boolean;\n}\n\nexport abstract class IgxGridBaseComponent implements OnInit, OnDestroy, AfterContentInit, AfterViewInit {\n\n    /**\n     * An @Input property that lets you fill the `IgxGridComponent` with an array of data.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public data: any[];\n\n    /**\n     * An @Input property that autogenerates the `IgxGridComponent` columns.\n     * The default value is false.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public autoGenerate = false;\n\n    public abstract id: string;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is empty.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyGridTemplate: TemplateRef<any>;\n\n    @Input()\n    public get filteringLogic() {\n        return this._filteringExpressionsTree.operator;\n    }\n\n    /**\n     * Sets the filtering logic of the `IgxGridComponent`.\n     * The default is AND.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set filteringLogic(value: FilteringLogic) {\n        this._filteringExpressionsTree.operator = value;\n    }\n\n    /**\n     * Returns the filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let filteringExpressionsTree = this.grid.filteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get filteringExpressionsTree() {\n        return this._filteringExpressionsTree;\n    }\n\n    /**\n     * Sets the filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And, \"ID\");\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     }\n     * ];\n     * this.grid.filteringExpressionsTree = (logic);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            const val = (value as FilteringExpressionsTree);\n            for (let index = 0; index < val.filteringOperands.length; index++) {\n                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {\n                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);\n                    newExpressionsTree.filteringOperands.push(val.filteringOperands[index] as IFilteringExpression);\n                    val.filteringOperands[index] = newExpressionsTree;\n                }\n            }\n\n            // clone the filtering expression tree in order to trigger the filtering pipe\n            const filteringExpressionTreeClone = new FilteringExpressionsTree(value.operator, value.fieldName);\n            filteringExpressionTreeClone.filteringOperands = value.filteringOperands;\n            this._filteringExpressionsTree = filteringExpressionTreeClone;\n\n            this.filteringService.refreshExpressions();\n            this.clearSummaryCache();\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n\n        this.restoreHighlight();\n    }\n\n    /**\n     * @hidden\n     */\n    protected collapsedHighlightedItem: any = null;\n\n    /**\n     * Returns whether the paging feature is enabled/disabled.\n     * The default state is disabled (false).\n     * ```\n     * const paging = this.grid.paging;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get paging(): boolean {\n        return this._paging;\n    }\n\n    /**\n     * Enables/Disables the paging feature.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set paging(value: boolean) {\n        this._paging = value;\n        this._pipeTrigger++;\n\n        if (this._ngAfterViewInitPaassed) {\n            this.cdr.detectChanges();\n            this.calculateGridHeight();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * Returns the current page index.\n     * ```html\n     * let gridPage = this.grid.page;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get page(): number {\n        return this._page;\n    }\n\n    /**\n     * Sets the current page index.\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [page]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     */\n    set page(val: number) {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.onPagingDone.emit({ previous: this._page, current: val });\n        this._page = val;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns the number of visible items per page of the `IgxGridComponent`.\n     * The default is 15.\n     * ```html\n     * let itemsPerPage = this.grid.perPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    /**\n     * Sets the number of visible items per page of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [perPage]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set perPage(val: number) {\n        if (val < 0) {\n            return;\n        }\n\n        this._perPage = val;\n        this.page = 0;\n        this.endEdit(true);\n        this.restoreHighlight();\n    }\n\n    /**\n     * You can provide a custom `ng-template` for the pagination UI of the grid.\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public paginationTemplate: TemplateRef<any>;\n\n    /**\n     * Return the display density currently applied to the grid.\n     * The default value is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let gridTheme = this.grid.displayDensity;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity;\n    }\n\n    /**\n     * Sets the display density currently applied to the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [displayDensity]=\"'compact'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        switch (val) {\n            case 'compact':\n                this._displayDensity = DisplayDensity.compact;\n                break;\n            case 'cosy':\n                this._displayDensity = DisplayDensity.cosy;\n                break;\n            case 'comfortable':\n            default:\n                this._displayDensity = DisplayDensity.comfortable;\n        }\n\n        this.onDensityChanged.emit();\n    }\n\n    /**\n     * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * By default it is disabled (false).\n     * ```typescript\n     * let gridColHiding = this.grid.columnHiding;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get columnHiding() {\n        return this._columnHiding;\n    }\n\n    /**\n     * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnHiding(value) {\n        if (this._columnHiding !== value) {\n            this._columnHiding = value;\n            if (this.gridAPI.get(this.id)) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPaassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets whether the `IgxGridRowComponent` selection is enabled.\n     * By default it is set to false.\n     * ```typescript\n     * let rowSelectable = this.grid.rowSelectable;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get rowSelectable(): boolean {\n        return this._rowSelection;\n    }\n\n    /**\n     * Sets whether rows can be selected.\n     * ```html\n     * <igx-grid #grid [showToolbar]=\"true\" [rowSelectable]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowSelectable(val: boolean) {\n        this._rowSelection = val;\n        if (this.gridAPI.get(this.id)) {\n\n            // should selection persist?\n            this.allRowsSelected = false;\n            this.deselectAllRows();\n            this.markForCheck();\n        }\n    }\n\n    /**\n * Sets whether the `IgxGridRowComponent` is editable.\n * By default it is set to false.\n * ```typescript\n * let rowEditable = this.grid.rowEditable;\n * ```\n * @memberof IgxGridBaseComponent\n */\n    @Input()\n    get rowEditable(): boolean {\n        return this._rowEditable;\n    }\n    /**\n    * Sets whether rows can be edited.\n    * ```html\n    * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [columnHiding]=\"true\"></igx-grid>\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    set rowEditable(val: boolean) {\n        this._rowEditable = val;\n        this.refreshGridState();\n    }\n\n    /**\n     * Returns the height of the `IgxGridComponent`.\n     * ```typescript\n     * let gridHeight = this.grid.height;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @HostBinding('style.height')\n    @Input()\n    public get height() {\n        return this._height;\n    }\n\n    /**\n     * Sets the height of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set height(value: string) {\n        if (this._height !== value) {\n            this._height = value;\n            requestAnimationFrame(() => {\n                this.calculateGridHeight();\n                this.cdr.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * Returns the width of the `IgxGridComponent`.\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @HostBinding('style.width')\n    @Input()\n    public get width() {\n        return this._width;\n    }\n\n    /**\n     * Sets the width of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [width]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set width(value: string) {\n        if (this._width !== value) {\n            this._width = value;\n            requestAnimationFrame(() => {\n                // Calling reflow(), because the width calculation\n                // might make the horizontal scrollbar appear/disappear.\n                // This will change the height, which should be recalculated.\n                this.reflow();\n            });\n        }\n    }\n\n    /**\n     * Returns the width of the header of the `IgxGridComponent`.\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerWidth() {\n        return parseInt(this._width, 10) - 17;\n    }\n\n    /**\n     * An @Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public evenRowCSS = 'igx-grid__tr--even';\n\n    /**\n     * An @Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public oddRowCSS = 'igx-grid__tr--odd';\n\n    /**\n     * Returns the row height.\n     * ```typescript\n     * const rowHeight = this.grid.rowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get rowHeight() {\n        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;\n    }\n\n    /**\n     * Sets the row height.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set rowHeight(value) {\n        this._rowHeight = parseInt(value, 10);\n    }\n\n    /**\n     * An @Input property that sets the default width of the `IgxGridComponent`'s columns.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get columnWidth(): string {\n        return this._columnWidth;\n    }\n    public set columnWidth(value: string) {\n        this._columnWidth = value;\n        this._columnWidthSetByUser = true;\n    }\n\n    /**\n     * An @Input property that sets the primary key of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"6\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public primaryKey;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyGridMessage = 'Grid has no data.';\n\n    /**\n     * An @Input property that sets the message displayed when there are no records and the grid is filtered.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyFilteredGridMessage = 'No records found.';\n\n    /**\n     * An @Input property that sets the title to be displayed in the built-in column hiding UI.\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnHidingTitle = '';\n\n    /**\n     * Returns if the built-in column pinning UI should be shown in the toolbar.\n     * ```typescript\n     *  let colPinning = this.grid.columnPinning;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get columnPinning() {\n        return this._columnPinning;\n    }\n\n    /**\n     * Sets if the built-in column pinning UI should be shown in the toolbar.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnPinning(value) {\n        if (this._columnPinning !== value) {\n            this._columnPinning = value;\n            if (this.gridAPI.get(this.id)) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPaassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the UI of the column pinning.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnPinningTitle = '';\n\n    /**\n     * Returns if the filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowFiltering;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get allowFiltering() {\n        return this._allowFiltering;\n    }\n\n    /**\n     * Sets if the filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set allowFiltering(value) {\n        if (this._allowFiltering !== value) {\n            this._allowFiltering = value;\n            this.filteringService.registerSVGIcons();\n            if (this.gridAPI.get(this.id)) {\n                this.markForCheck();\n            }\n        }\n    }\n\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClick(e){\n     *     alert(\"The cell has been clicked!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellSelect(e){\n     *     alert(\"The cell has been selected!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onRowClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClickChange(e){\n     *     alert(\"The selected row has been changed!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowSelectionChange = new EventEmitter<IRowSelectionEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnPinning = new EventEmitter<IPinColumnEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent`\n     * editing has been performed in the grid and the values have **not** been submitted.\n     * On `IgxGridCellComponent` editing, both `IgxGridCellComponent` and `IgxGridRowComponent`\n     * objects in the event arguments are defined for the corresponding\n     * `IgxGridCellComponent` that is being edited and the `IgxGridRowComponent` the `IgxGridCellComponent` belongs to.\n     * ```typescript\n     * editCancel(event: IgxColumnComponent){\n     *    const column: IgxColumnComponent = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` enters edit mode.\n     * On `IgxGridCellComponent` editing, both `IgxGridCellComponent` and `IgxGridRowComponent`\n     * objects in the event arguments are defined for the corresponding\n     * `IgxGridCellComponent` that is being edited and the `IgxGridRowComponent` the `IgxGridCellComponent` belongs to.\n     * ```typescript\n     * editStart(event: IgxColumnComponent){\n     *    const column: IgxColumnComponent = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.\n     * On `IgxGridCellComponent` editing, both `IgxGridCellComponent` and `IgxGridRowComponent`\n     * objects in the event arguments are defined for the corresponding\n     * `IgxGridCellComponent` that is being edited and the `IgxGridRowComponent` the `IgxGridCellComponent` belongs to.\n     * ```typescript\n     * editDone(event: IgxColumnComponent){\n     *    const column: IgxColumnComponent = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" a row enters edit mode.\n     *\n     * Emits the current row and it's state.\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editStart(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const editedRow = emitted.row;\n     *          const cancelValue = emitted.newValue;\n     *          const oldValue = emitted.oldValue;\n     *      }\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onRowEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing data operations (filtering, sorting, etc.) while editing a row, hitting the `Commit`\n     * button inside of the rowEditingOverlay or hitting the `Enter` key while editing a cell.\n     *\n     * Emits the current row and it's state.\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editDone(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const editedRow = emitted.row;\n     *          const newValue = emitted.newValue;\n     *          const oldValue = emitted.oldValue;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     *\n     * Emits the current row and it's state.\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const editedRow = emitted.row;\n     *          const cancelValue = emitted.newValue;\n     *          const oldValue = emitted.oldValue;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when a grid column is initialized. Returns the column object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"</igx-grid>\n     * ```\n     * ```typescript\n     * initColumns(event: IgxColumnComponent) {\n     * const column: IgxColumnComponent = event;\n     *       column.filterable = true;\n     *       column.sortable = true;\n     *       column.editable = true;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnInit = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * Emitted when sorting is performed through the UI. Returns the sorting expression.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * sortingDone(event: SortingDirection){\n     *     const sortingDirection = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSortingDone = new EventEmitter<ISortingExpression>();\n\n    /**\n     * Emitted when filtering is performed through the UI.\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * ```typescript\n     * filteringDone(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     *}\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onFilteringDone = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.\n     * ```typescript\n     * pagingDone(event: IPageEventArgs){\n     *     const paging = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onPagingDone = new EventEmitter<IPageEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * ```typescript\n     * rowAdded(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowAdded = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.\n     * Returns an `IRowDataEventArgs` object.\n     * ```typescript\n     * rowDeleted(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowDeleted = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is resized.\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * ```typescript\n     * resizing(event: IColumnResizeEventArgs){\n     *     const grouping = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnResized = new EventEmitter<IColumnResizeEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * contextMenu(event: IGridCellEventArgs){\n     *     const resizing = event;\n     *     console.log(resizing);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onContextMenu = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * dblClick(event: IGridCellEventArgs){\n     *     const dblClick = event;\n     *     console.log(dblClick);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDoubleClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }\n     * ```typescript\n     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){\n     *    const visiblity = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.\n     * ```typescript\n     * movingStart(event: IColumnMovingStartEventArgs){\n     *     const movingStarts = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingStart = new EventEmitter<IColumnMovingStartEventArgs>();\n\n    /**\n     * Emitted throughout the `IgxColumnComponent` moving operation.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * moving(event: IColumnMovingEventArgs){\n     *     const moving = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMoving = new EventEmitter<IColumnMovingEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving ends.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * movingEnds(event: IColumnMovingEndEventArgs){\n     *     const movingEnds = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingEnd = new EventEmitter<IColumnMovingEndEventArgs>();\n\n    @Output()\n    public onFocusChange = new EventEmitter<IFocusChangeEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    protected onDensityChanged = new EventEmitter<any>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })\n    public columnList: QueryList<IgxColumnComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxGridHeaderComponent, { read: IgxGridHeaderComponent })\n    public headerList: QueryList<IgxGridHeaderComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxGridFilteringCellComponent, { read: IgxGridFilteringCellComponent })\n    public filterCellList: QueryList<IgxGridFilteringCellComponent>;\n\n    @ViewChildren('row')\n    private _rowList: QueryList<IgxGridRowComponent>;\n\n    /**\n     * A list of `IgxGridRowComponent`.\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get rowList() {\n        const res = new QueryList<any>();\n        if (!this._rowList) {\n            return res;\n        }\n        const rList = this._rowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    @ViewChildren(IgxRowComponent, { read: IgxRowComponent })\n    private _dataRowList: QueryList<any>;\n\n    /**\n     * A list of `IgxGridRowComponent`, currently rendered.\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get dataRowList() {\n        const res = new QueryList<any>();\n        if (!this._dataRowList) {\n            return res;\n        }\n        const rList = this._dataRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * A template reference for the template when the filtered `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('emptyFilteredGrid', { read: TemplateRef })\n    public emptyFilteredGridTemplate: TemplateRef<any>;\n\n    /**\n     * A template reference for the template when the `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('defaultEmptyGrid', { read: TemplateRef })\n    public emptyGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scrollContainer', { read: IgxGridForOfDirective })\n    public parentVirtDir: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective })\n    public verticalScrollContainer: IgxGridForOfDirective<any>;\n\n    @ViewChild('summaryContainer', { read: IgxGridForOfDirective })\n    protected summaryContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scr', { read: ElementRef })\n    public scr: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('paginator', { read: ElementRef })\n    public paginator: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { read: IgxGridForOfDirective })\n    public headerContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckboxContainer')\n    public headerCheckboxContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerGroupContainer')\n    public headerGroupContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckbox', { read: IgxCheckboxComponent })\n    public headerCheckbox: IgxCheckboxComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('theadRow')\n    public theadRow: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tbody')\n    public tbody: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tfoot')\n    public tfoot: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('summaries')\n    public summaries: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective })\n    public outletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective })\n    private rowEditingOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRowEditTemplate', { read: TemplateRef })\n    private defaultRowEditTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef })\n    public rowEditCustom: TemplateRef<any>;\n\n    /** @hidden */\n    public get rowEditContainer(): TemplateRef<any> {\n        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;\n    }\n    /** @hidden */\n    @ContentChild(IgxRowEditTextDirective, { read: TemplateRef })\n    public rowEditText: TemplateRef<any>;\n    /** @hidden */\n    @ContentChild(IgxRowEditActionsDirective, { read: TemplateRef })\n    public rowEditActions: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get rowInEditMode(): IgxRowComponent<IgxGridBaseComponent> {\n        const editRowState = this.gridAPI.get_edit_row_state(this.id);\n        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.rowID) : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get firstEditableColumnIndex(): number {\n        const index = [...this.pinnedColumns, ...this.unpinnedColumns].filter(e => !e.columnGroup).findIndex(e => e.editable);\n        return index !== -1 ? index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get lastEditableColumnIndex(): number {\n        const orderedColumns = [...this.pinnedColumns, ...this.unpinnedColumns].filter(e => !e.columnGroup);\n        const index = orderedColumns.reverse().findIndex(e => e.editable);\n        return index !== -1 ? orderedColumns.length - 1 - index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    public get rowEditTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective)\n    public rowEditingOverlay: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        switch (this._displayDensity) {\n            case DisplayDensity.cosy:\n                return 'igx-grid--cosy';\n            case DisplayDensity.compact:\n                return 'igx-grid--compact';\n            default:\n                return 'igx-grid';\n        }\n    }\n\n    get bannerClass(): string {\n        let bannerClass = '';\n        switch (this._displayDensity) {\n            case DisplayDensity.cosy:\n                bannerClass = 'igx-banner--cosy';\n                break;\n            case DisplayDensity.compact:\n                bannerClass = 'igx-banner--compact';\n                break;\n            default:\n                bannerClass = 'igx-banner';\n        }\n        bannerClass += this.rowEditPositioningStrategy.isTop ? ' igx-banner__border-top' : ' igx-banner__border-bottom';\n        return bannerClass;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public hostRole = 'grid';\n\n    /**\n     * @hidden\n     */\n    get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * Returns the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * const sortingState = this.grid.sortingExpressions;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get sortingExpressions() {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * Sets the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.sortingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Desc,\n     *     ignoreCase: true\n     * }];\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set sortingExpressions(value) {\n        this._sortingExpressions = cloneArray(value);\n        this.cdr.markForCheck();\n\n        this.restoreHighlight();\n    }\n\n    /**\n     * Returns the state of the grid virtualization, including the start index and how many records are rendered.\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get virtualizationState() {\n        return this.verticalScrollContainer.state;\n    }\n\n    /**\n     * @hidden\n     */\n    set virtualizationState(state) {\n        this.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * Returns the total number of records in the data source.\n     * Works only with remote grid virtualization.\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    /**\n     * Sets the total number of records in the data source.\n     * This property is required for virtualization to function when the grid is bound remotely.\n     * ```typescript\n     * this.grid1.totalItemCount = 55;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Returns the number of hidden `IgxColumnComponent`.\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount() {\n        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const hiddenColText = this.grid.hiddenColumnsText;\n     * ``\n     */\n    @Input()\n    get hiddenColumnsText() {\n        return this._hiddenColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set hiddenColumnsText(value) {\n        this._hiddenColumnsText = value;\n\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const pinnedText = this.grid.pinnedColumnsText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get pinnedColumnsText() {\n        return this._pinnedColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set pinnedColumnsText(value) {\n        this._pinnedColumnsText = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden\n    */\n    public columnsWithNoSetWidths = null;\n\n    /* Toolbar related definitions */\n    private _showToolbar = false;\n    private _exportExcel = false;\n    private _exportCsv = false;\n    private _toolbarTitle: string = null;\n    private _exportText: string = null;\n    private _exportExcelText: string = null;\n    private _exportCsvText: string = null;\n    private _rowEditable = false;\n    private _currentRowState: any;\n    /**\n     * @hidden\n    */\n    public get currentRowState(): any {\n        return this._currentRowState;\n    }\n\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('toolbar', { read: IgxGridToolbarComponent })\n    public toolbar: IgxGridToolbarComponent = null;\n\n    @ViewChild('toolbar', { read: ElementRef })\n    private toolbarHtml: ElementRef = null;\n\n    public get shouldShowToolbar(): boolean {\n        return this.showToolbar &&\n            (this.columnHiding ||\n                this.columnPinning ||\n                this.exportExcel ||\n                this.exportCsv ||\n                (this.toolbarTitle && this.toolbarTitle !== null && this.toolbarTitle !== ''));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.\n     * ```typescript\n     * const toolbarGrid = this.grid.showToolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get showToolbar(): boolean {\n        return this._showToolbar;\n    }\n\n    /**\n     * Shows or hides the `IgxGridComponent`'s toolbar.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set showToolbar(newValue: boolean) {\n        if (this._showToolbar !== newValue) {\n            this._showToolbar = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the toolbar's title.\n     * ```typescript\n     * const toolbarTitle  = this.grid.toolbarTitle;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get toolbarTitle(): string {\n        return this._toolbarTitle;\n    }\n\n    /**\n     * Sets the toolbar's title.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set toolbarTitle(newValue: string) {\n        if (this._toolbarTitle !== newValue) {\n            this._toolbarTitle = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to MS Excel is enabled or disabled.\n     * ```typescript\n     * cosnt excelExporter = this.grid.exportExcel;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get exportExcel(): boolean {\n        return this.getExportExcel();\n    }\n\n    /**\n     * Enable or disable the option for exporting to MS Excel.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcel(newValue: boolean) {\n        if (this._exportExcel !== newValue) {\n            this._exportExcel = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to CSV is enabled or disabled.\n     * ```typescript\n     * const exportCsv = this.grid.exportCsv;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get exportCsv(): boolean {\n        return this.getExportCsv();\n    }\n\n    /**\n     * Enable or disable the option for exporting to CSV.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsv(newValue: boolean) {\n        if (this._exportCsv !== newValue) {\n            this._exportCsv = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the main export button.\n     * ```typescript\n     * const exportText = this.grid.exportText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get exportText(): string {\n        return this._exportText;\n    }\n\n    /**\n     * Sets the textual content for the main export button.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportText(newValue: string) {\n        if (this._exportText !== newValue) {\n            this._exportText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the MS Excel export button.\n     * ```typescript\n     * const excelText = this.grid.exportExcelText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get exportExcelText(): string {\n        return this._exportExcelText;\n    }\n\n    /**\n     * Sets the textual content for the MS Excel export button.\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcelText(newValue: string) {\n        if (this._exportExcelText !== newValue) {\n            this._exportExcelText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the CSV export button.\n     * ```typescript\n     * const csvText = this.grid.exportCsvText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get exportCsvText(): string {\n        return this._exportCsvText;\n    }\n\n    /**\n     * Sets the textual content for the CSV export button.\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsvText(newValue: string) {\n        if (this._exportCsvText !== newValue) {\n            this._exportCsvText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public rowEditMessage;\n\n    /**\n     * Emitted when an export process is initiated by the user.\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onToolbarExporting = new EventEmitter<IGridToolbarExportEventArgs>();\n\n    /* End of toolbar related definitions */\n\n    /**\n     * @hidden\n     */\n    public pagingState;\n    /**\n     * @hidden\n     */\n    public calcWidth: number;\n    /**\n     * @hidden\n     */\n    public calcRowCheckboxWidth: number;\n    /**\n     * @hidden\n     */\n    public calcHeight: number;\n    /**\n     * @hidden\n     */\n    public tfootHeight: number;\n    /**\n     * @hidden\n     */\n    public chipsGoupingExpressions = [];\n    /**\n     * @hidden\n     */\n    public summariesHeight: number;\n\n    /**\n     * @hidden\n     */\n    public draggedColumn: IgxColumnComponent;\n    /**\n     * @hidden\n     */\n    public isColumnResizing: boolean;\n    /**\n     * @hidden\n     */\n    public isColumnMoving: boolean;\n\n    /**\n     * @hidden\n     */\n    public eventBus = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public allRowsSelected = false;\n\n    /**\n     * @hidden\n     */\n    public lastSearchInfo: ISearchInfo = {\n        searchText: '',\n        caseSensitive: false,\n        exactMatch: false,\n        activeMatchIndex: 0,\n        matchInfoCache: []\n    };\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    protected _perPage = 15;\n    /**\n     * @hidden\n     */\n    protected _page = 0;\n    /**\n     * @hidden\n     */\n    protected _paging = false;\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression> = [];\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth = null;\n    /**\n     * @hidden\n     */\n    protected _columnHiding = false;\n    /**\n     * @hidden\n     */\n    protected _columnPinning = false;\n    protected _allowFiltering = false;\n    private _filteredData = null;\n    private resizeHandler;\n    private columnListDiffer;\n    private _hiddenColumnsText = '';\n    private _pinnedColumnsText = '';\n    private _height = '100%';\n    private _width = '100%';\n    private _rowHeight;\n    private _displayDensity = DisplayDensity.comfortable;\n    private _ngAfterViewInitPaassed = false;\n    private _horizontalForOfs;\n\n    private _columnWidth: string;\n    private _columnWidthSetByUser = false;\n\n    private _defaultTargetRecordNumber = 10;\n\n    private rowEditPositioningStrategy = new ContainerPositioningStrategy({\n        horizontalDirection: HorizontalAlignment.Left,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalStartPoint: VerticalAlignment.Bottom,\n        closeAnimation: null\n    });\n\n    private rowEditSettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        outlet: this.rowEditingOutletDirective,\n        positionStrategy: this.rowEditPositioningStrategy\n    };\n\n    private verticalScrollHandler(event) {\n        this.verticalScrollContainer.onScroll(event);\n        this.zone.run(() => {\n            this.cdr.detectChanges();\n            this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);\n            if (this.rowEditable) {\n                this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);\n            }\n        });\n    }\n\n    private horizontalScrollHandler(event) {\n        const scrollLeft = event.target.scrollLeft;\n\n        this.headerContainer.onHScroll(scrollLeft);\n        this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));\n        if (this.summaryContainer) {\n            this.summaryContainer.onHScroll(scrollLeft);\n        }\n        this.zone.run(() => {\n            this.cdr.detectChanges();\n            this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);\n        });\n    }\n\n    private keydownHandler(event) {\n        const key = event.key.toLowerCase();\n        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {\n            event.preventDefault();\n            if (key === 'pagedown') {\n                this.verticalScrollContainer.scrollNextPage();\n                this.nativeElement.focus();\n            } else if (key === 'pageup') {\n                this.verticalScrollContainer.scrollPrevPage();\n                this.nativeElement.focus();\n            }\n        }\n    }\n\n    constructor(\n        private gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        public selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: TransactionService<Transaction, State>,\n        private elementRef: ElementRef,\n        private zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        public cdr: ChangeDetectorRef,\n        private resolver: ComponentFactoryResolver,\n        protected differs: IterableDiffers,\n        private viewRef: ViewContainerRef,\n        private navigation: IgxGridNavigationService,\n        public filteringService: IgxFilteringService) {\n        this.resizeHandler = () => {\n            this.calculateGridSizes();\n            this.zone.run(() => this.markForCheck());\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.gridAPI.register(this);\n        this.navigation.grid = this;\n        this.filteringService.gridId = this.id;\n        this.columnListDiffer = this.differs.find([]).create(null);\n        this.calcWidth = this._width && this._width.indexOf('%') === -1 ? parseInt(this._width, 10) : 0;\n        this.calcHeight = 0;\n        this.calcRowCheckboxWidth = 0;\n\n        this.onRowAdded.pipe(takeUntil(this.destroy$)).subscribe(() => this.refreshGridState());\n        this.onRowDeleted.pipe(takeUntil(this.destroy$)).subscribe(() => this.refreshGridState());\n        this.onFilteringDone.pipe(takeUntil(this.destroy$)).subscribe(() => this.refreshGridState());\n        this.onCellEdit.pipe(takeUntil(this.destroy$)).subscribe((editCell) => this.clearSummaryCache(editCell));\n        this.onRowEdit.pipe(takeUntil(this.destroy$)).subscribe(() => this.clearSummaryCache());\n        this.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.endEdit(true);\n        });\n        this.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe(() => this.endEdit(true));\n        this.onPagingDone.pipe(takeUntil(this.destroy$)).subscribe(() => this.endEdit(true));\n        this.onSortingDone.pipe(takeUntil(this.destroy$)).subscribe(() => this.endEdit(true));\n        this.transactions.onStateUpdate.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.clearSummaryCache();\n            this._pipeTrigger++;\n            this.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.autoGenerate) {\n            this.autogenerateColumns();\n        }\n\n        this.initColumns(this.columnList, (col: IgxColumnComponent) => this.onColumnInit.emit(col));\n\n        this.columnListDiffer.diff(this.columnList);\n        this.clearSummaryCache();\n        this.summariesHeight = this.calcMaxSummaryHeight();\n        this._derivePossibleHeight();\n        this.markForCheck();\n\n        this.columnList.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxColumnComponent>) => {\n                const diff = this.columnListDiffer.diff(change);\n                if (diff) {\n\n                    this.initColumns(this.columnList);\n\n                    diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                        this.clearSummaryCache();\n                        this.calculateGridSizes();\n                        this.onColumnInit.emit(record.item);\n                    });\n\n                    diff.forEachRemovedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                        // Recalculate Summaries\n                        this.clearSummaryCache();\n                        this.calculateGridSizes();\n\n                        // Clear Filtering\n                        this.gridAPI.clear_filter(this.id, record.item.field);\n\n                        // Clear Sorting\n                        this.gridAPI.clear_sort(this.id, record.item.field);\n                    });\n                }\n                this.markForCheck();\n            });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.addEventListener('resize', this.resizeHandler);\n            this.nativeElement.addEventListener('keydown', this.keydownHandler.bind(this));\n        });\n        this.calculateGridWidth();\n        this.initPinning();\n        this.calculateGridSizes();\n        this.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            requestAnimationFrame(() => {\n                this.summariesHeight = 0;\n                this.reflow();\n                this.verticalScrollContainer.recalcUpdateSizes();\n            });\n        });\n        this._ngAfterViewInitPaassed = true;\n\n        // In some rare cases we get the AfterViewInit before the grid is added to the DOM\n        // and as a result we get 0 width and can't size ourselves properly.\n        // In order to prevent that add a mutation observer that watches if we have been added.\n        if (!this.calcWidth && this._width !== undefined) {\n            const config = { childList: true, subtree: true };\n            let observer: MutationObserver = null;\n            const callback = (mutationsList) => {\n                mutationsList.forEach((mutation) => {\n                    if (mutation.type === 'childList') {\n                        const addedNodes = new Array(...mutation.addedNodes);\n                        addedNodes.forEach((node) => {\n                            const added = this.checkIfGridIsAdded(node);\n                            if (added) {\n                                this.calculateGridWidth();\n                                observer.disconnect();\n                            }\n                        });\n                    }\n                });\n            };\n\n            observer = new MutationObserver(callback);\n            observer.observe(this.document.body, config);\n        }\n\n        this._dataRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(list =>\n            this._horizontalForOfs = list.toArray()\n                .filter(item => item.element.nativeElement.parentElement !== null)\n                .map(row => row.virtDirRow)\n        );\n\n        this.zone.runOutsideAngular(() =>\n            this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this.verticalScrollHandler.bind(this))\n        );\n\n        this.zone.runOutsideAngular(() =>\n            this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', this.horizontalScrollHandler.bind(this))\n        );\n        this._horizontalForOfs = this._dataRowList.map(row => row.virtDirRow);\n        const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n        vertScrDC.addEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.removeEventListener('resize', this.resizeHandler);\n            this.nativeElement.removeEventListener('keydown', this.keydownHandler);\n            this.verticalScrollContainer.getVerticalScroll().removeEventListener('scroll', this.verticalScrollHandler);\n            this.parentVirtDir.getHorizontalScroll().removeEventListener('scroll', this.horizontalScrollHandler);\n            const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n            vertScrDC.removeEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n        });\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.gridAPI.unset(this.id);\n    }\n\n    /**\n     * @hidden\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * Toggles the specified column's visibility.\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs) {\n        const col = this.getColumnByName(args.column.field);\n        col.hidden = args.newValue;\n        this.onColumnVisibilityChanged.emit(args);\n\n        this.markForCheck();\n    }\n\n    /**\n     * Returns the native element of the `IgxGridComponent`.\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get calcResizerHeight(): number {\n        if (this.hasSummarizedColumns) {\n            return this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight +\n                this.tfoot.nativeElement.clientHeight;\n        }\n        return this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;\n    }\n\n    /**\n     * Returns the `IgxGridComponent`'s rows height.\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultRowHeight(): number {\n        switch (this._displayDensity) {\n            case DisplayDensity.compact:\n                return 32;\n            case DisplayDensity.cosy:\n                return 40;\n            case DisplayDensity.comfortable:\n            default:\n                return 50;\n        }\n    }\n\n    /**\n     * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get calcPinnedContainerMaxWidth(): number {\n        return (this.calcWidth * 80) / 100;\n    }\n\n    /**\n     * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedAreaMinWidth(): number {\n        return (this.calcWidth * 20) / 100;\n    }\n\n    /**\n     * Returns the current width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedWidth() {\n        return this.getPinnedWidth();\n    }\n\n    /**\n     * Returns the current width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedWidth() {\n        return this.getUnpinnedWidth();\n    }\n\n    /**\n     * @hidden\n     */\n    get summariesMargin() {\n        return this.rowSelectable ? this.calcRowCheckboxWidth : 0;\n    }\n\n    /**\n     * Returns an array of `IgxColumnComponent`s.\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get columns(): IgxColumnComponent[] {\n        return this._columns;\n    }\n\n    /**\n     * Returns an array of the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this._pinnedColumns.filter((col) => !col.hidden);\n    }\n\n    /**\n     * Returns an array of unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this._unpinnedColumns.filter((col) => !col.hidden); // .sort((col1, col2) => col1.index - col2.index);\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public getColumnByName(name: string): IgxColumnComponent {\n        return this.columnList.find((col) => col.field === name);\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by index.\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByIndex(index: number): IgxRowComponent<IgxGridBaseComponent> {\n        return this.gridAPI.get_row_by_index(this.id, index);\n    }\n\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByKey(keyValue: any): IgxRowComponent<IgxGridBaseComponent> {\n        return this.gridAPI.get_row_by_key(this.id, keyValue);\n    }\n\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get visibleColumns(): IgxColumnComponent[] {\n        return this.columnList.filter((col) => !col.hidden);\n    }\n\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent {\n        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);\n        if (columnId !== -1) {\n            return this.gridAPI.get_cell_by_index(this.id, rowIndex, columnId);\n        }\n    }\n\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * Requires that the primaryKey property is set.\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_key(this.id, rowSelector, columnField);\n    }\n\n    /**\n     * Returns the total number of pages.\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalPages(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countPages;\n        }\n        return -1;\n    }\n\n    /**\n     * Returns the total number of records.\n     * Only functions when paging is enabled.\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalRecords(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countRecords;\n        }\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalWidth(): number {\n        // Take only top level columns\n        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);\n        let totalWidth = 0;\n        let i = 0;\n        for (i; i < cols.length; i++) {\n            totalWidth += parseInt(cols[i].width, 10) || 0;\n        }\n        return totalWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const list = this.columnList.toArray();\n        const fromIndex = list.indexOf(from);\n        let toIndex = list.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n            if (toIndex < 0) {\n                toIndex = 0;\n            }\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        let activeColumn = null;\n        let activeColumnIndex = -1;\n\n        if (this.lastSearchInfo.searchText) {\n            const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n            activeColumnIndex = activeInfo.columnIndex;\n\n            if (activeColumnIndex !== -1) {\n                activeColumn = list[activeColumnIndex];\n            }\n        }\n\n        list.splice(toIndex, 0, ...list.splice(fromIndex, 1));\n        const newList = this._resetColumnList(list);\n        this.columnList.reset(newList);\n        this.columnList.notifyOnChanges();\n        this._columns = this.columnList.toArray();\n\n        if (activeColumn !== null && activeColumn !== undefined) {\n            const newIndex = newList.indexOf(activeColumn);\n            IgxColumnComponent.updateHighlights(activeColumnIndex, newIndex, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?) {\n        if (!list) {\n            list = this.columnList.toArray();\n        }\n        let newList = [];\n        list.filter(c => c.level === 0).forEach(p => {\n            newList.push(p);\n            if (p.columnGroup) {\n                newList = newList.concat(p.allChildren);\n            }\n        });\n        return newList;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _reorderPinnedColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition) {\n        const pinned = this._pinnedColumns;\n        let dropIndex = pinned.indexOf(to);\n\n        if (position === DropPosition.BeforeDropTarget) {\n            dropIndex--;\n        }\n\n        if (position === DropPosition.AfterDropTarget) {\n            dropIndex++;\n        }\n\n        pinned.splice(dropIndex, 0, ...pinned.splice(pinned.indexOf(from), 1));\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const buffer = parent.children.toArray();\n        const fromIndex = buffer.indexOf(from);\n        let toIndex = buffer.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        buffer.splice(toIndex, 0, ...buffer.splice(fromIndex, 1));\n        parent.children.reset(buffer);\n    }\n    /**\n     * Moves a column to the specified drop target.\n     * ```typescript\n     * grid.moveColumn(compName, persDetails);\n     * ```\n\t  * @memberof IgxGridBaseComponent\n\t  */\n    public moveColumn(column: IgxColumnComponent, dropTarget: IgxColumnComponent, pos: DropPosition = DropPosition.None) {\n\n        let position = pos;\n        const fromIndex = column.visibleIndex;\n        const toIndex = dropTarget.visibleIndex;\n\n        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {\n            position = DropPosition.BeforeDropTarget;\n        } else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {\n            position = DropPosition.AfterDropTarget;\n        } else {\n            position = DropPosition.None;\n        }\n\n\n        if ((column.level !== dropTarget.level) ||\n            (column.topLevelParent !== dropTarget.topLevelParent)) {\n            return;\n        }\n\n        this.gridAPI.submit_value(this.id);\n        if (column.level) {\n            this._moveChildColumns(column.parent, column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && column.pinned) {\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && !column.pinned) {\n            column.pin();\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (!dropTarget.pinned && column.pinned) {\n            column.unpin();\n\n            const list = this.columnList.toArray();\n            const fi = list.indexOf(column);\n            const ti = list.indexOf(dropTarget);\n\n            if (pos === DropPosition.BeforeDropTarget && fi < ti) {\n                position = DropPosition.BeforeDropTarget;\n            } else if (pos === DropPosition.AfterDropTarget && fi > ti) {\n                position = DropPosition.AfterDropTarget;\n            } else {\n                position = DropPosition.None;\n            }\n        }\n\n        this._moveColumns(column, dropTarget, position);\n        this.cdr.detectChanges();\n\n        const args = {\n            source: column,\n            target: dropTarget\n        };\n\n        this.onColumnMovingEnd.emit(args);\n    }\n\n    /**\n     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n\n    /**\n     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxGridBaseComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.page = val;\n    }\n\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public markForCheck() {\n        if (this.rowList) {\n            this.rowList.forEach((row) => row.cdr.markForCheck());\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     * @memberof IgxGridBaseComponent\n     */\n    public addRow(data: any, parentID?: any): void {\n        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions\n        // If there is a row in edit - > commit and close\n        if (this.transactions.enabled) {\n            const transactionId = this.primaryKey ? data[this.primaryKey] : data;\n            const transaction: Transaction = { id: transactionId, type: TransactionType.ADD, newValue: data };\n            this.transactions.add(transaction);\n        } else {\n            this.data.push(data);\n        }\n\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.cdr.markForCheck();\n\n        this.refreshSearch();\n    }\n\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     * @memberof IgxGridBaseComponent\n     */\n    public deleteRow(rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            this.deleteRowById(rowSelector);\n        }\n    }\n\n    /**\n     * @hidden\n     * @param\n     */\n    public deleteRowById(rowId: any) {\n        let index: number;\n        const data = this.gridAPI.get_all_data(this.id);\n        if (this.primaryKey) {\n            index = data.map((record) => record[this.primaryKey]).indexOf(rowId);\n        } else {\n            index = data.indexOf(rowId);\n        }\n        const state: State = this.transactions.getState(rowId);\n        const hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;\n\n        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode\n        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above\n        //  Otherwise just exit - there is nothing to delete\n        if (index !== -1 || hasRowInNonDeletedState) {\n            const editableCell = this.gridAPI.get_cell_inEditMode(this.id);\n            if (editableCell && editableCell.cellID.rowID === rowId) {\n                this.gridAPI.escape_editMode(this.id, editableCell.cellID);\n            }\n        } else {\n            return;\n        }\n\n        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!\n        this.onRowDeleted.emit({ data: data[index] });\n\n        //  first deselect row then delete it\n        if (this.rowSelectable && this.selection.is_item_selected(this.id, rowId)) {\n            this.deselectRows([rowId]);\n        } else {\n            this.checkHeaderCheckboxStatus();\n        }\n\n        this.deleteRowFromData(rowId, index);\n        this._pipeTrigger++;\n        this.cdr.markForCheck();\n\n        this.refreshSearch();\n        if (data.length % this.perPage === 0 && this.isLastPage && this.page !== 0) {\n            this.page--;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        if (index !== -1) {\n            if (this.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                this.transactions.add(transaction, this.data[index]);\n            } else {\n                this.data.splice(index, 1);\n            }\n        } else {\n            const state: State = this.transactions.getState(rowID);\n            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     * @memberof IgxGridBaseComponent\n     */\n    public updateCell(value: any, rowSelector: any, column: string): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            const columnEdit = this.columnList.toArray().filter((col) => col.field === column);\n            if (columnEdit.length > 0) {\n                const columnId = this.columnList.toArray().indexOf(columnEdit[0]);\n                const editableCell = this.gridAPI.get_cell_inEditMode(this.id);\n                const gridEditState = this.gridAPI.create_grid_edit_args(this.id, rowSelector, columnId, value);\n                this.gridAPI.update_cell(this.id, rowSelector, columnId, value, gridEditState);\n                if (editableCell && editableCell.cellID.rowID === rowSelector &&\n                    editableCell.cellID.columnID === columnId) {\n                    if (gridEditState.args.cancel) {\n                        return;\n                    }\n                    this.gridAPI.escape_editMode(this.id, editableCell.cellID);\n                }\n                this.cdr.markForCheck();\n                this.refreshSearch();\n            }\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent`, which is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     * @memberof IgxGridBaseComponent\n     */\n    public updateRow(value: any, rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            const editableCell = this.gridAPI.get_cell_inEditMode(this.id);\n            if (editableCell && editableCell.cellID.rowID === rowSelector) {\n                this.gridAPI.escape_editMode(this.id, editableCell.cellID);\n            }\n            this.gridAPI.update_row(value, this.id, rowSelector);\n            this.cdr.markForCheck();\n            this.refreshSearch();\n        }\n    }\n\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public sort(expression: ISortingExpression | Array<ISortingExpression>): void;\n    public sort(...rest): void {\n        this.endEdit(false);\n        if (rest.length === 1 && rest[0] instanceof Array) {\n            this._sortMultiple(rest[0]);\n        } else {\n            this._sort(rest[0]);\n        }\n    }\n\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        const col = this.gridAPI.get_column_by_name(this.id, name);\n        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);\n\n        if (conditionOrExpressionTree) {\n            this.gridAPI.filter(this.id, name, value, conditionOrExpressionTree, filteringIgnoreCase);\n        } else {\n            const expressionsTreeForColumn = this._filteringExpressionsTree.find(name);\n            if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {\n                this.gridAPI.filter(this.id, name, value, expressionsTreeForColumn, filteringIgnoreCase);\n            } else {\n                const expressionForColumn = expressionsTreeForColumn as IFilteringExpression;\n                this.gridAPI.filter(this.id, name, value, expressionForColumn.condition, filteringIgnoreCase);\n            }\n        }\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filterGlobal(value: any, condition?, ignoreCase?) {\n        this.gridAPI.filter_global(this.id, value, condition, ignoreCase);\n    }\n\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     * @memberof IgxGridBaseComponent\n     */\n    public enableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._multipleSummaries(rest[0], true);\n        } else {\n            this._summaries(rest[0], true, rest[1]);\n        }\n        this.summariesHeight = 0;\n        this.markForCheck();\n        this.calculateGridHeight();\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Disable summaries for the specified column.\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     *\n     * Disable summaries for the listed columns.\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public disableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._disableMultipleSummaries(rest[0]);\n        } else {\n            this._summaries(rest[0], false);\n        }\n        this.summariesHeight = 0;\n        this.markForCheck();\n        this.calculateGridHeight();\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearFilter(name?: string) {\n        if (name) {\n            const column = this.gridAPI.get_column_by_name(this.id, name);\n            if (!column) {\n                return;\n            }\n        }\n\n        this.gridAPI.clear_filter(this.id, name);\n    }\n\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearSort(name?: string) {\n        if (!name) {\n            this.sortingExpressions = [];\n            return;\n        }\n        if (!this.gridAPI.get_column_by_name(this.id, name)) {\n            return;\n        }\n        this.gridAPI.clear_sort(this.id, name);\n    }\n\n    /**\n     * @hidden\n     */\n    public clearSummaryCache(editCell?) {\n        if (editCell && editCell.cell) {\n            this.gridAPI.remove_summary(this.id, editCell.cell.column.filed);\n        } else {\n            this.gridAPI.remove_summary(this.id);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshGridState(editCell?) {\n        this.endEdit(true);\n        this.clearSummaryCache(editCell);\n    }\n\n    // TODO: We have return values here. Move them to event args ??\n\n    /**\n     * Pins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public pinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.pin(index);\n    }\n\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public unpinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.unpin(index);\n    }\n\n\n    /**\n     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public reflow() {\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Recalculates grid summary area.\n     * Should be run for example when enabling or disabling summaries for a column.\n     * ```typescript\n     * this.grid.recalculateSummaries();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public recalculateSummaries() {\n        this.summariesHeight = 0;\n        requestAnimationFrame(() => this.calculateGridSizes());\n    }\n\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, 1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ````\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, -1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Reapplies the existing search.\n     * Returns how many times the grid contains the last search.\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     * @memberof IgxGridBaseComponent\n     */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        if (this.lastSearchInfo.searchText) {\n            this.rebuildMatchCache();\n\n            if (updateActiveInfo) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                    if (match.column === activeInfo.columnIndex &&\n                        match.row === activeInfo.rowIndex &&\n                        match.index === activeInfo.index &&\n                        match.page === activeInfo.page) {\n                        this.lastSearchInfo.activeMatchIndex = i;\n                    }\n                });\n            }\n\n            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Removes all the highlights in the cell.\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public clearSearch() {\n        this.lastSearchInfo = {\n            searchText: '',\n            caseSensitive: false,\n            exactMatch: false,\n            activeMatchIndex: 0,\n            matchInfoCache: []\n        };\n\n        this.rowList.forEach((row) => {\n            if (row.cells) {\n                row.cells.forEach((c) => {\n                    c.clearHighlight();\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSortableColumns(): boolean {\n        return this.columnList.some((col) => col.sortable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasEditableColumns(): boolean {\n        return this.columnList.some((col) => col.editable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasFilterableColumns(): boolean {\n        return this.columnList.some((col) => col.filterable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSummarizedColumns(): boolean {\n        const summarizedColumns = this.columnList.filter(col => col.hasSummary);\n        return summarizedColumns.length > 0 && summarizedColumns.some(col => !col.hidden);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasMovableColumns(): boolean {\n        return this.columnList && this.columnList.some((col) => col.movable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasColumnGroups(): boolean {\n        return this.columnList.some(col => col.columnGroup);\n    }\n\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[] {\n        if (this.dataRowList) {\n            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))\n                .reduce((a, b) => a.concat(b), []);\n        }\n        return [];\n    }\n\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight() {\n        if (this.data && this.data.length) {\n            return this.dataLength * this.rowHeight;\n        }\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _derivePossibleHeight() {\n        if ((this._height && this._height.indexOf('%') === -1) || !this._height) {\n            return;\n        }\n        if (!this.nativeElement.parentNode.clientHeight) {\n            const viewPortHeight = document.documentElement.clientHeight;\n            this._height = this.rowBasedHeight <= viewPortHeight ? null : viewPortHeight.toString();\n        } else {\n            const parentHeight = this.nativeElement.parentNode.getBoundingClientRect().height;\n            this._height = this.rowBasedHeight <= parentHeight ? null : this._height;\n        }\n        this.calculateGridHeight();\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    protected _derivePossibleWidth() {\n        if (!this._columnWidthSetByUser) {\n            this._columnWidth = this.getPossibleColumnWidth();\n            this.initColumns(this.columnList, null);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private get defaultTargetBodyHeight(): number {\n        const allItems = this.totalItemCount || this.dataLength;\n        return this.rowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridHeight() {\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n\n        // TODO: Calculate based on grid density\n        if (this.maxLevelHeaderDepth) {\n            this.theadRow.nativeElement.style.height = `${(this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +\n                (this.allowFiltering ? this._rowHeight : 0) + 1}px`;\n        }\n\n        if (!this._height) {\n            this.calcHeight = null;\n            if (this.hasSummarizedColumns && !this.summariesHeight) {\n                this.summariesHeight = this.summaries ?\n                    this.calcMaxSummaryHeight() : 0;\n            }\n            return;\n        }\n\n        let toolbarHeight = 0;\n        if (this.showToolbar && this.toolbarHtml != null) {\n            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?\n                this.toolbarHtml.nativeElement.offsetHeight : 0;\n        }\n\n        let pagingHeight = 0;\n        if (this.paging && this.paginator) {\n            pagingHeight = this.paginator.nativeElement.firstElementChild ?\n                this.paginator.nativeElement.offsetHeight : 0;\n        }\n\n        if (!this.summariesHeight) {\n            this.summariesHeight = this.summaries ?\n                this.calcMaxSummaryHeight() : 0;\n        }\n\n        const groupAreaHeight = this.getGroupAreaHeight();\n\n        if (this._height && this._height.indexOf('%') !== -1) {\n            /*height in %*/\n            this.calcHeight = this._calculateGridBodyHeight(\n                parseInt(computed.getPropertyValue('height'), 10), toolbarHeight, pagingHeight, groupAreaHeight);\n        } else {\n            this.calcHeight = this._calculateGridBodyHeight(\n                parseInt(this._height, 10), toolbarHeight, pagingHeight, groupAreaHeight);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight(gridHeight: number,\n        toolbarHeight: number, pagingHeight: number, groupAreaHeight: number) {\n        const footerBordersAndScrollbars = this.tfoot.nativeElement.offsetHeight -\n            this.tfoot.nativeElement.clientHeight;\n        if (isNaN(gridHeight)) {\n            return this.defaultTargetBodyHeight;\n        }\n\n        return Math.abs(gridHeight - toolbarHeight -\n            this.theadRow.nativeElement.offsetHeight -\n            this.summariesHeight - pagingHeight - groupAreaHeight -\n            footerBordersAndScrollbars -\n            this.scr.nativeElement.clientHeight);\n    }\n\n    /**\n     * @hidden\n     */\n    protected getPossibleColumnWidth() {\n        let computedWidth = parseInt(\n            this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n\n        if (this.rowSelectable) {\n            computedWidth -= this.headerCheckboxContainer.nativeElement.clientWidth;\n        }\n\n        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);\n\n        const columnsWithSetWidths = visibleChildColumns.filter(c => c.widthSetByUser);\n        const columnsToSize = visibleChildColumns.length - columnsWithSetWidths.length;\n\n        const sumExistingWidths = columnsWithSetWidths\n            .reduce((prev, curr) => prev + parseInt(curr.width, 10), 0);\n\n        const columnWidth = !Number.isFinite(sumExistingWidths) ?\n            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :\n            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH);\n\n        return columnWidth.toString();\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridWidth() {\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n\n        if (this._width && this._width.indexOf('%') !== -1) {\n            /* width in %*/\n            const width = parseInt(computed.getPropertyValue('width'), 10);\n            if (Number.isFinite(width) && width !== this.calcWidth) {\n                this.calcWidth = width;\n\n                this.cdr.markForCheck();\n            }\n        } else {\n            this.calcWidth = parseInt(this._width, 10);\n        }\n\n        this._derivePossibleWidth();\n    }\n\n    /**\n     * @hidden\n     */\n    protected calcMaxSummaryHeight() {\n        let maxSummaryLength = 0;\n        this.columnList.filter((col) => col.hasSummary && !col.hidden).forEach((column) => {\n            this.gridAPI.set_summary_by_column_name(this.id, column.field);\n            const getCurrentSummaryColumn = this.gridAPI.get_summaries(this.id).get(column.field);\n            if (getCurrentSummaryColumn) {\n                if (maxSummaryLength < getCurrentSummaryColumn.length) {\n                    maxSummaryLength = getCurrentSummaryColumn.length;\n                }\n            }\n        });\n        return maxSummaryLength * this.defaultRowHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes() {\n        this.calculateGridWidth();\n        this.cdr.detectChanges();\n        this.calculateGridHeight();\n        if (this.rowSelectable) {\n            this.calcRowCheckboxWidth = this.headerCheckboxContainer.nativeElement.clientWidth;\n        }\n        if (this.rowEditable) {\n            this.repositionRowEditingOverlay(this.rowInEditMode);\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;\n        let sum = 0;\n        for (const col of fc) {\n            if (col.level === 0) {\n                sum += parseInt(col.width, 10);\n            }\n        }\n        if (this.rowSelectable) {\n            sum += this.calcRowCheckboxWidth;\n        }\n\n        return sum;\n    }\n\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    protected getUnpinnedWidth(takeHidden = false) {\n        const width = this._width && this._width.indexOf('%') !== -1 ?\n            this.calcWidth :\n            parseInt(this._width, 10);\n        return width - this.getPinnedWidth(takeHidden);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _sort(expression: ISortingExpression) {\n        this.gridAPI.sort(this.id, expression.fieldName, expression.dir, expression.ignoreCase, expression.strategy);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _sortMultiple(expressions: ISortingExpression[]) {\n        this.gridAPI.sort_multiple(this.id, expressions);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any) {\n        const column = this.gridAPI.get_column_by_name(this.id, fieldName);\n        column.hasSummary = hasSummary;\n        if (summaryOperand) {\n            column.summaries = summaryOperand;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean) {\n        expressions.forEach((element) => {\n            this._summaries(element.fieldName, hasSummary, element.customSummary);\n        });\n    }\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions: string[]) {\n        expressions.forEach((column) => { this._summaries(column, false); });\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec) {\n        if (typeof rec === 'number') {\n            return DataType.Number;\n        } else if (typeof rec === 'boolean') {\n            return DataType.Boolean;\n        } else if (typeof rec === 'object' && rec instanceof Date) {\n            return DataType.Date;\n        }\n        return DataType.String;\n    }\n\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns() {\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const fields = Object.keys(this.data[0]);\n        const columns = [];\n\n        fields.forEach((field) => {\n            const ref = this.viewRef.createComponent(factory, null, this.viewRef.injector);\n            ref.instance.field = field;\n            ref.instance.dataType = this.resolveDataTypes(this.data[0][field]);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n\n        this.columnList.reset(columns);\n    }\n\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr) {\n        return arr.filter(c => c.level === 0);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        // XXX: Deprecate index\n        this._columns = this.columnList.toArray();\n        collection.forEach((column: IgxColumnComponent) => {\n            column.gridID = this.id;\n            column.defaultWidth = this.columnWidth;\n            this.setColumnEditState(column);\n\n            if (cb) {\n                cb(column);\n            }\n        });\n\n        this.reinitPinStates();\n    }\n\n    private setColumnEditState(column: IgxColumnComponent) {\n        // When rowEditable is true, then all columns, with defined field, excluding priamaryKey, are set to editable by default.\n        if (this.rowEditable && column.editable === null &&\n            column.field && column.field !== this.primaryKey) {\n            column.editable = this.rowEditable;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected reinitPinStates() {\n        if (this.hasColumnGroups) {\n            this._pinnedColumns = this.columnList.filter((c) => c.pinned);\n        }\n        this._unpinnedColumns = this.columnList.filter((c) => !c.pinned);\n    }\n\n    /**\n     * @hidden\n     */\n    public onHeaderCheckboxClick(event) {\n        this.allRowsSelected = event.checked;\n        const newSelection =\n            event.checked ?\n                this.filteredData ?\n                    this.selection.add_items(this.id, this.selection.get_all_ids(this._filteredData, this.primaryKey)) :\n                    this.selection.get_all_ids(this.dataWithAddedInTransactionRows, this.primaryKey) :\n                this.filteredData ?\n                    this.selection.delete_items(this.id, this.selection.get_all_ids(this._filteredData, this.primaryKey)) :\n                    this.selection.get_empty();\n        this.triggerRowSelectionChange(newSelection, null, event, event.checked);\n        this.checkHeaderCheckboxStatus(event.checked);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerCheckboxAriaLabel() {\n        return this._filteringExpressionsTree.filteringOperands.length > 0 ?\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all filtered' : 'Select all filtered' :\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all' : 'Select all';\n    }\n\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.data && this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public checkHeaderCheckboxStatus(headerStatus?: boolean) {\n        if (headerStatus === undefined) {\n            const dataLength = this.filteredData ? this.filteredData.length : this.dataLength;\n            this.allRowsSelected = this.selection.are_all_selected(this.id, dataLength);\n            if (this.headerCheckbox) {\n                this.headerCheckbox.indeterminate = !this.allRowsSelected && !this.selection.are_none_selected(this.id);\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.checked =\n                        this.allRowsSelected;\n                }\n            }\n            this.cdr.markForCheck();\n        } else if (this.headerCheckbox) {\n            this.headerCheckbox.checked = headerStatus !== undefined ? headerStatus : false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public filteredItemsStatus(componentID: string, filteredData: any[], primaryKey?) {\n        const currSelection = this.selection.get(componentID);\n        let atLeastOneSelected = false;\n        let notAllSelected = false;\n        if (currSelection) {\n            for (const key of Object.keys(filteredData)) {\n                const dataItem = primaryKey ? filteredData[key][primaryKey] : filteredData[key];\n                if (currSelection.has(dataItem)) {\n                    atLeastOneSelected = true;\n                    if (notAllSelected) {\n                        return 'indeterminate';\n                    }\n                } else {\n                    notAllSelected = true;\n                    if (atLeastOneSelected) {\n                        return 'indeterminate';\n                    }\n                }\n            }\n        }\n        return atLeastOneSelected ? 'allSelected' : 'noneSelected';\n    }\n\n    /**\n     * @hidden\n     */\n    public updateHeaderCheckboxStatusOnFilter(data) {\n        if (!data) {\n            this.checkHeaderCheckboxStatus();\n            return;\n        }\n        switch (this.filteredItemsStatus(this.id, data, this.primaryKey)) {\n            case 'allSelected': {\n                if (!this.allRowsSelected) {\n                    this.allRowsSelected = true;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            case 'noneSelected': {\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            default: {\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = true;\n                }\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                break;\n            }\n        }\n    }\n\n    /**\n     * Get current selection state.\n     * Returns an array with selected rows' IDs (primaryKey or rowData)\n     * ```typescript\n     * const selectedRows = this.grid.selectedRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectedRows(): any[] {\n        let selection: Set<any>;\n        selection = this.selection.get(this.id);\n        return selection ? Array.from(selection) : [];\n    }\n\n    /**\n     * Select specified rows by ID.\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     * @memberof IgxGridBaseComponent\n     */\n    public selectRows(rowIDs: any[], clearCurrentSelection?: boolean) {\n        let newSelection: Set<any>;\n        newSelection = this.selection.add_items(this.id, rowIDs, clearCurrentSelection);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Deselect specified rows by ID.\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     * @memberof IgxGridBaseComponent\n     */\n    public deselectRows(rowIDs: any[]) {\n        let newSelection: Set<any>;\n        newSelection = this.selection.delete_items(this.id, rowIDs);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Selects all rows\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * ```typescript\n     * this.grid.selectAllRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_all_ids(this.dataWithAddedInTransactionRows, this.primaryKey));\n    }\n\n    /**\n     * Deselects all rows\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     */\n    public deselectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_empty());\n    }\n\n    /**\n     * @hidden\n     */\n    public triggerRowSelectionChange(newSelectionAsSet: Set<any>, row?: IgxRowComponent<IgxGridBaseComponent>,\n        event?: Event, headerStatus?: boolean) {\n        const oldSelectionAsSet = this.selection.get(this.id);\n        const oldSelection = oldSelectionAsSet ? Array.from(oldSelectionAsSet) : [];\n        const newSelection = newSelectionAsSet ? Array.from(newSelectionAsSet) : [];\n        const args: IRowSelectionEventArgs = { oldSelection, newSelection, row, event };\n        this.onRowSelectionChange.emit(args);\n        newSelectionAsSet = this.selection.get_empty();\n        for (let i = 0; i < args.newSelection.length; i++) {\n            newSelectionAsSet.add(args.newSelection[i]);\n        }\n        this.selection.set(this.id, newSelectionAsSet);\n        this.checkHeaderCheckboxStatus(headerStatus);\n    }\n\n    /**\n     * @hidden\n     */\n    // @HostListener('scroll', ['$event'])\n    public scrollHandler(event) {\n        this.parentVirtDir.getHorizontalScroll().scrollLeft += event.target.scrollLeft;\n        this.verticalScrollContainer.getVerticalScroll().scrollTop += event.target.scrollTop;\n        event.target.scrollLeft = 0;\n        event.target.scrollTop = 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public wheelHandler() {\n        // tslint:disable-next-line:no-bitwise\n        if (document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS) {\n            (document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public trackColumnChanges(index, col) {\n        return col.field + col.width;\n    }\n\n    private find(text: string, increment: number, caseSensitive?: boolean, exactMatch?: boolean, scroll?: boolean) {\n        if (!this.rowList) {\n            return 0;\n        }\n\n        const editModeCell = this.gridAPI.get_cell_inEditMode(this.id);\n        if (editModeCell) {\n            this.endEdit(false);\n        }\n\n        if (this.collapsedHighlightedItem) {\n            this.collapsedHighlightedItem = null;\n        }\n\n        if (!text) {\n            this.clearSearch();\n            return 0;\n        }\n\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n        let rebuildCache = false;\n\n        if (this.lastSearchInfo.searchText !== text ||\n            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||\n            this.lastSearchInfo.exactMatch !== exactMatchResolved) {\n            this.lastSearchInfo = {\n                searchText: text,\n                activeMatchIndex: 0,\n                caseSensitive: caseSensitiveResolved,\n                exactMatch: exactMatchResolved,\n                matchInfoCache: []\n            };\n\n            rebuildCache = true;\n        } else {\n            this.lastSearchInfo.activeMatchIndex += increment;\n        }\n\n        if (rebuildCache) {\n            this.rowList.forEach((row) => {\n                if (row.cells) {\n                    row.cells.forEach((c) => {\n                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);\n                    });\n                }\n            });\n\n            this.rebuildMatchCache();\n        }\n\n        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {\n            this.lastSearchInfo.activeMatchIndex = 0;\n        } else if (this.lastSearchInfo.activeMatchIndex < 0) {\n            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;\n        }\n\n        if (this.lastSearchInfo.matchInfoCache.length) {\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n\n            IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                columnIndex: matchInfo.column,\n                rowIndex: matchInfo.row,\n                index: matchInfo.index,\n                page: matchInfo.page\n            });\n\n            if (scroll !== false) {\n                this.scrollTo(matchInfo.row, matchInfo.column, matchInfo.page, matchInfo.groupByRecord);\n            }\n        } else {\n            IgxTextHighlightDirective.clearActiveHighlight(this.id);\n        }\n\n        return this.lastSearchInfo.matchInfoCache.length;\n    }\n\n    /**\n     * Returns an array containing the filtered data.\n     * ```typescript\n     * const filteredData = this.grid1.filteredSortedData;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filteredSortedData(): any[] {\n        return this.resolveFilteredSortedData();\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveFilteredSortedData(): any[] {\n        let data: any[] = this.filteredData ? this.filteredData : this.data;\n        if (!this.filteredData && this.transactions.enabled) {\n            data = DataUtil.mergeTransactions(\n                cloneArray(data),\n                this.transactions.getAggregatedChanges(true),\n                this.primaryKey\n            );\n        }\n\n        return data;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initPinning() {\n        let currentPinnedWidth = 0;\n        const pinnedColumns = [];\n        const unpinnedColumns = [];\n        const newUnpinnedCols = [];\n\n        // When a column is a group or is inside a group, pin all related.\n        this._pinnedColumns.forEach(col => {\n            if (col.parent) {\n                col.parent.pinned = true;\n            }\n            if (col.columnGroup) {\n                col.children.forEach(child => child.pinned = true);\n            }\n        });\n\n        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.\n        // We take into account top level columns (top level groups and non groups).\n        // If top level is unpinned the pinning handles all children to be unpinned as well.\n        for (let i = 0; i < this._columns.length; i++) {\n            if (this._columns[i].pinned && !this._columns[i].parent) {\n                // Pinned column. Check if with it the unpinned min width is exceeded.\n                const colWidth = parseInt(this._columns[i].width, 10);\n                if (currentPinnedWidth + colWidth > this.calcWidth - this.unpinnedAreaMinWidth) {\n                    // unpinned min width is exceeded. Unpin the columns and add it to the unpinned collection.\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                    newUnpinnedCols.push(this._columns[i]);\n                } else {\n                    // unpinned min width is not exceeded. Keep it pinned and add it to the pinned collection.\n                    currentPinnedWidth += colWidth;\n                    pinnedColumns.push(this._columns[i]);\n                }\n            } else if (this._columns[i].pinned && this._columns[i].parent) {\n                if (this._columns[i].topLevelParent.pinned) {\n                    pinnedColumns.push(this._columns[i]);\n                } else {\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                }\n            } else {\n                unpinnedColumns.push(this._columns[i]);\n            }\n        }\n\n        if (newUnpinnedCols.length) {\n            console.warn(\n                'igxGrid - The pinned area exceeds maximum pinned width. ' +\n                'The following columns were unpinned to prevent further issues:' +\n                newUnpinnedCols.map(col => '\"' + col.header + '\"').toString() + '. For more info see our documentation.'\n            );\n        }\n\n        // Assign the applicaple collections.\n        this._pinnedColumns = pinnedColumns;\n        this._unpinnedColumns = unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: number, column: number, page: number, groupByRecord?: IGroupByRecord): void {\n        if (this.paging) {\n            this.page = page;\n        }\n\n        this.scrollDirective(this.verticalScrollContainer, row);\n\n        const scrollRow = this.rowList.find(r => r.virtDirRow);\n        const virtDir = scrollRow ? scrollRow.virtDirRow : null;\n\n        if (this.pinnedColumns.length) {\n            if (column >= this.pinnedColumns.length) {\n                column -= this.pinnedColumns.length;\n                this.scrollDirective(virtDir, column);\n            }\n        } else {\n            this.scrollDirective(virtDir, column);\n        }\n    }\n\n    private scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void {\n        if (!directive) {\n            return;\n        }\n        directive.scrollTo(goal);\n    }\n\n    private rebuildMatchCache() {\n        this.lastSearchInfo.matchInfoCache = [];\n\n        const caseSensitive = this.lastSearchInfo.caseSensitive;\n        const exactMatch = this.lastSearchInfo.exactMatch;\n        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();\n        const data = this.filteredSortedData;\n        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);\n\n        const groupIndexData = this.getGroupIncrementData();\n        const groupByRecords = this.getGroupByRecords();\n        let collapsedRowsCount = 0;\n\n        data.forEach((dataRow, i) => {\n            const groupByRecord = groupByRecords ? groupByRecords[i] : null;\n            const groupByIncrement = groupIndexData ? groupIndexData[i] : 0;\n            const pagingIncrement = this.getPagingIncrement(groupByIncrement, groupIndexData, Math.floor(i / this.perPage));\n            let rowIndex = this.paging ? (i % this.perPage) + pagingIncrement : i + groupByIncrement;\n\n            if (this.paging && i % this.perPage === 0) {\n                collapsedRowsCount = 0;\n            }\n\n            rowIndex -= collapsedRowsCount;\n\n            if (groupByRecord && !this.isExpandedGroup(groupByRecord)) {\n                collapsedRowsCount++;\n            }\n            columnItems.forEach((c, j) => {\n                const value = c.formatter ? c.formatter(dataRow[c.field]) : dataRow[c.field];\n                if (value !== undefined && value !== null && c.searchable) {\n                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();\n                    const pageIndex = this.paging ? Math.floor(i / this.perPage) : 0;\n\n                    if (exactMatch) {\n                        if (searchValue === searchText) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: rowIndex,\n                                column: j,\n                                page: pageIndex,\n                                index: 0,\n                                groupByRecord: groupByRecord,\n                                item: dataRow\n                            });\n                        }\n                    } else {\n                        let occurenceIndex = 0;\n                        let searchIndex = searchValue.indexOf(searchText);\n\n                        while (searchIndex !== -1) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: rowIndex,\n                                column: j,\n                                page: pageIndex,\n                                index: occurenceIndex++,\n                                groupByRecord: groupByRecord,\n                                item: dataRow\n                            });\n\n                            searchValue = searchValue.substring(searchIndex + searchText.length);\n                            searchIndex = searchValue.indexOf(searchText);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        return undefined;\n    }\n\n    /**\n    * @hidden\n    */\n    protected getGroupByRecords(): IGroupByRecord[] {\n        return null;\n    }\n\n    // For paging we need just the increment between the start of the page and the current row\n    private getPagingIncrement(groupByIncrement: number, groupIndexData: number[], page: number) {\n        let pagingIncrement = 0;\n\n        if (this.paging && groupByIncrement) {\n            const lastRowOnPrevPageInrement = page ? groupIndexData[page * this.perPage - 1] : 0;\n            const firstRowOnThisPageInrement = groupIndexData[page * this.perPage];\n            // If the page ends in the middle of the group, on the next page there is\n            // one additional group by row. We need to account for this.\n            const additionalPagingIncrement = lastRowOnPrevPageInrement === firstRowOnThisPageInrement ? 1 : 0;\n            pagingIncrement = groupByIncrement - lastRowOnPrevPageInrement + additionalPagingIncrement;\n        }\n\n        return pagingIncrement;\n    }\n\n    /**\n     * @hidden\n     */\n    protected restoreHighlight(): void {\n        if (this.lastSearchInfo.searchText) {\n            const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n            const data = this.filteredSortedData;\n            const groupByIncrements = this.getGroupIncrementData();\n\n            const rowIndex = matchInfo ? data.indexOf(matchInfo.item) : -1;\n            const page = this.paging ? Math.floor(rowIndex / this.perPage) : 0;\n            let increment = groupByIncrements && rowIndex !== -1 ? groupByIncrements[rowIndex] : 0;\n            if (this.paging && increment) {\n                increment = this.getPagingIncrement(increment, groupByIncrements, page);\n            }\n\n            const row = this.paging ? (rowIndex % this.perPage) + increment : rowIndex + increment;\n\n            this.rebuildMatchCache();\n\n            if (rowIndex !== -1) {\n                if (this.collapsedHighlightedItem && groupByIncrements !== null) {\n                    this.collapsedHighlightedItem.info.page = page;\n                    this.collapsedHighlightedItem.info.rowIndex = row;\n                } else {\n                    IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                        columnIndex: activeInfo.columnIndex,\n                        rowIndex: row,\n                        index: activeInfo.index,\n                        page: page\n                    });\n\n                    this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                        if (match.column === activeInfo.columnIndex &&\n                            match.row === row &&\n                            match.index === activeInfo.index &&\n                            match.page === page) {\n                            this.lastSearchInfo.activeMatchIndex = i;\n                        }\n                    });\n                }\n            } else {\n                this.lastSearchInfo.activeMatchIndex = 0;\n                this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n            }\n        }\n    }\n\n    // This method's idea is to get by how much each data row is offset by the group by rows before it.\n    /**\n    * @hidden\n    */\n    protected getGroupIncrementData(): number[] {\n        return null;\n    }\n\n    private checkIfGridIsAdded(node): boolean {\n        if (node === this.nativeElement) {\n            return true;\n        } else {\n            for (const childNode of node.childNodes) {\n                const added = this.checkIfGridIsAdded(childNode);\n                if (added) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    notGroups(arr) {\n        return arr.filter(c => !c.columnGroup);\n    }\n\n    /*     @HostListener('keydown.pagedown', ['$event'])\n        public onKeydownPageDown(event) {\n            event.preventDefault();\n            this.nativeElement.focus();\n        }\n\n        @HostListener('keydown.pageup', ['$event'])\n        public onKeydownPageUp(event) {\n            event.preventDefault();\n            this.verticalScrollContainer.scrollPrevPage();\n            this.nativeElement.focus();\n        } */\n\n        private changeRowEditingOverlayStateOnScroll(row: IgxRowComponent<IgxGridBaseComponent>) {\n            if (!this.rowEditable || this.rowEditingOverlay.collapsed) {\n                return;\n            }\n            if (!row) {\n                this.toggleRowEditingOverlay(false);\n            } else {\n                this.repositionRowEditingOverlay(row);\n            }\n        }\n\n        /**\n     * @hidden\n     */\n    public startRowEdit(cell: {\n        rowID: any,\n        columnID: any,\n        rowIndex: any\n    }) {\n        const args: IGridEditEventArgs = {\n            rowID: cell.rowID,\n            oldValue: this.gridAPI.get_row_by_key(this.id, cell.rowID).rowData,\n            cancel: false\n        };\n        this.onRowEditEnter.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        const rowState = { rowID: cell.rowID, rowIndex: cell.rowIndex };\n        this.gridAPI.set_edit_row_state(this.id, rowState);\n        this._currentRowState = this.transactions.getAggregatedValue(args.rowID, true);\n        this.transactions.startPending();\n        this.configureRowEditingOverlay(cell.rowID);\n        this.rowEditingOverlay.open(this.rowEditSettings);\n        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;\n        this.rowEditingOverlay.element.addEventListener('wheel', this.rowEditingWheelHandler.bind(this));\n    }\n\n    /**\n     * @hidden\n     */\n    public closeRowEditingOverlay() {\n        this.gridAPI.set_edit_row_state(this.id, null);\n        this.rowEditingOverlay.element.removeEventListener('wheel', this.rowEditingWheelHandler);\n        this.rowEditPositioningStrategy.isTopInitialPosition = null;\n        this.rowEditingOverlay.close();\n        this.rowEditingOverlay.element.parentElement.style.display = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public toggleRowEditingOverlay(show) {\n        const rowStyle = this.rowEditingOverlay.element.style;\n        if (show) {\n            rowStyle.display = 'block';\n        } else {\n            rowStyle.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public repositionRowEditingOverlay(row: IgxRowComponent<IgxGridBaseComponent>) {\n        if (!this.rowEditingOverlay.collapsed) {\n            const rowStyle = this.rowEditingOverlay.element.parentElement.style;\n            if (row) {\n                rowStyle.display = '';\n                this.configureRowEditingOverlay(row.rowID);\n                this.rowEditingOverlay.reposition();\n            } else {\n                rowStyle.display = 'none';\n            }\n        }\n    }\n\n    private configureRowEditingOverlay(rowID: any) {\n        this.rowEditSettings.outlet = this.rowEditingOutletDirective;\n        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;\n        // this.rowEditPositioningStrategy.settings.target = row.element.nativeElement;\n        const targetRow = this.gridAPI.get_row_by_key(this.id, rowID);\n        if (!targetRow) {\n            return;\n        }\n        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;\n        this.toggleRowEditingOverlay(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowChangesCount() {\n        if (!this.rowInEditMode) {\n            return 0;\n        }\n        const rowChanges = this.transactions.getAggregatedValue(this.rowInEditMode.rowID, false);\n        return rowChanges ? Object.keys(rowChanges).length : 0;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.data[rowIndex], value);\n    }\n    /**\n     * TODO: Refactor\n     * @hidden\n     */\n\n    private endRowTransaction(commit: boolean, rowID: any, rowObject: IgxRowComponent<IgxGridBaseComponent>) {\n        const valueInTransactions = this.transactions.getAggregatedValue(rowID, true);\n        const rowIndex = this.gridAPI.get_row_index_in_data(this.id, rowID);  // Get actual index in data\n        const newValue = valueInTransactions ? valueInTransactions : this.gridAPI.get_all_data(this.id)[rowIndex];\n        const oldValue =  Object.assign(\n            {},\n            this.gridAPI.get_all_data(this.id)[rowIndex],\n            this._currentRowState\n        );\n        // if (this.transactions.enabled) {\n        // If transactions are enabled, old value == last commited value (as it's not applied in data yet)\n        //     const lastCommitedValue = // Last commited value (w/o pending)\n        //         this.transactions.getState(rowID) ? Object.assign({}, this.transactions.getState(rowID).value) : null;\n        //     oldValue = lastCommitedValue ? Object.assign(oldValue, lastCommitedValue) : oldValue;\n        // }\n        const currentGridState = this.gridAPI.create_grid_edit_args(this.id, rowID,\n            null,\n            newValue);\n        const emitArgs = currentGridState.args;\n        Object.assign(emitArgs, {\n            oldValue,\n            rowID,\n        });\n        if (!commit) {\n            this.onRowEditCancel.emit(emitArgs);\n        } else {\n            this.gridAPI.update_row(emitArgs.newValue, this.id, rowID, currentGridState);\n        }\n        if (emitArgs.cancel) {\n            this.transactions.startPending();\n            return;\n        }\n        this.transactions.endPending(commit);\n        this.closeRowEditingOverlay();\n    }\n\n    /**\n     * Finishes the row transactions on the current row.\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     *\n     * Binding to the event\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    public endEdit(commit = true, event?: Event) {\n        const row = this.gridAPI.get_edit_row_state(this.id);\n        const cell = this.gridAPI.get_cell_inEditMode(this.id);\n        const rowObj = row ? this.getRowByKey(row.rowID) : null;\n\n        if (commit) {\n            this.gridAPI.submit_value(this.id);\n        } else {\n            this.gridAPI.escape_editMode(this.id);\n        }\n        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {\n            return;\n        }\n        this.endRowTransaction(commit, row.rowID, rowObj);\n        const currentCell = (row && cell) ? this.gridAPI.get_cell_by_index(this.id, row.rowIndex, cell.cellID.columnID) : null;\n        if (currentCell && event) {\n            currentCell.nativeElement.focus();\n        }\n    }\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler(event: WheelEvent) {\n        if (event.deltaY > 0) {\n            this.verticalScrollContainer.scrollNext();\n        } else {\n            this.verticalScrollContainer.scrollPrev();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get dataWithAddedInTransactionRows() {\n        const result = <any>cloneArray(this.gridAPI.get_all_data(this.id));\n        if (this.transactions.enabled) {\n            result.push(...this.transactions.getAggregatedChanges(true)\n                .filter(t => t.type === TransactionType.ADD)\n                .map(t => t.newValue));\n        }\n\n        return result;\n    }\n\n    private get dataLength() {\n        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data(this.id).length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return this._exportExcel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return this._exportCsv;\n    }\n}\n","import {Directive, EmbeddedViewRef, Input, OnChanges, ChangeDetectorRef,\n     SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef, NgModule, NgZone, ViewRef, Output, EventEmitter} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({selector: '[igxTemplateOutlet]'})\nexport class IgxTemplateOutletDirective implements OnChanges {\n  private _viewRef !: EmbeddedViewRef<any>;\n\n    /**\n    * The embedded views cache. Collection is key-value paired.\n    * Key is the template id, value is the embedded view for the related template.\n    */\n  private _embeddedViewsMap: Map<string, EmbeddedViewRef<any>> = new Map();\n\n  @Input() public igxTemplateOutletContext !: Object;\n\n  @Input() public igxTemplateOutlet !: TemplateRef<any>;\n\n\n  constructor(private _viewContainerRef: ViewContainerRef,  private _zone: NgZone,  public cdr: ChangeDetectorRef) {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const recreateView = this._shouldRecreateView(changes);\n    if (recreateView) {\n        // view should be re-created due to changes in the template or context.\n        // check if we have existing view with the new template stored in the cache.\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        if (!this._viewRef || !cachedView) {\n            // if view does not exist yet\n            // or if there is no template defined in the template outlet context\n            // or if there's no such view in the cache - then re-create view.\n            this._recreateView();\n        } else {\n           // if view exists, but template has been changed and there is a view in the cache with the related template\n           // then detach old view and insert the stored one with the matching template\n           // after that update its context.\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n            this._viewRef = cachedView;\n            this._viewContainerRef.insert(this._viewRef, 0);\n            this._updateExistingContext(this.igxTemplateOutletContext);\n        }\n    } else {\n        // view should not be re-created. Check if it exists and if context exists and just update it.\n      if (this._viewRef && this.igxTemplateOutletContext) {\n          this._updateExistingContext(this.igxTemplateOutletContext);\n      }\n    }\n  }\n\n  private _recreateView() {\n     // remove and recreate\n     if (this._viewRef) {\n         this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n      }\n      if (this.igxTemplateOutlet) {\n        this._viewRef = this._viewContainerRef.createEmbeddedView(\n              this.igxTemplateOutlet, this.igxTemplateOutletContext);\n            const tmplId = this.igxTemplateOutletContext['templateID'];\n            if (tmplId) {\n                // if context contains a template id, check if we have a view for that template already stored in the cache\n                // if not create a copy and add it to the cache in detached state.\n                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.\n                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);\n                if (!res) {\n                    let emptyView = this._viewContainerRef.createEmbeddedView(\n                        this.igxTemplateOutlet, {});\n                    emptyView = this._viewContainerRef.detach(this._viewContainerRef.indexOf(emptyView)) as EmbeddedViewRef<any>;\n                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], emptyView);\n                }\n            }\n      }\n  }\n  private _shouldRecreateView(changes: SimpleChanges): boolean {\n    const ctxChange = changes['igxTemplateOutletContext'];\n    return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n  }\n\n  private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n    const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n    const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n    if (prevCtxKeys.length === currCtxKeys.length) {\n      for (const propName of currCtxKeys) {\n        if (prevCtxKeys.indexOf(propName) === -1) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  private _updateExistingContext(ctx: Object): void {\n    for (const propName of Object.keys(ctx)) {\n      (<any>this._viewRef.context)[propName] = (<any>this.igxTemplateOutletContext)[propName];\n      }\n  }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTemplateOutletDirective],\n    entryComponents: [],\n    exports: [IgxTemplateOutletDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxTemplateOutletModule {\n}\n","import {\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component, DoCheck, HostBinding, Input\n} from '@angular/core';\nimport { DisplayDensity } from '../core/displayDensity';\nimport { DataType } from '../data-operations/data-util';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridBaseComponent } from './grid-base.component';\n/**\n *@hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary',\n    template: `<ng-container *ngIf=\"column.hasSummary\">\n    <ng-container *ngFor=\"let summary of resolveSummaries\">\n        <div class=\"{{itemClass}}\" [style.height.px]=\"summaryItemHeight\">\n            <span class=\"igx-grid-summary__label\" title=\"{{ summary.label }}\">{{ summary.label }}</span>\n            <span class=\"igx-grid-summary__result\" title=\"{{ summary.summaryResult }}\">\n                {{ column.dataType === 'number' ? (summary.summaryResult | igxdecimal) : column.dataType === 'date' ? (summary.summaryResult | igxdate) : (summary.summaryResult) }}\n            </span>\n        </div>\n    </ng-container>\n</ng-container>\n`\n})\nexport class IgxGridSummaryComponent implements DoCheck {\n\n    fieldName: string;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class.igx-grid-summary--fw')\n    get widthPersistenceClass(): boolean {\n        return this.column.width !== null;\n    }\n\n    @HostBinding('class.igx-grid-summary--pinned')\n    get isPinned() {\n        return this.column.pinned;\n    }\n\n    @HostBinding('class.igx-grid-summary--pinned-last')\n    get isLastPinned() {\n        const pinnedCols = this.gridAPI.get(this.gridID).pinnedColumns;\n        if (pinnedCols.length === 0) {\n            return false;\n        } else {\n            return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;\n        }\n    }\n\n    @HostBinding('class.igx-grid-summary--empty')\n    get emptyClass(): boolean {\n        return !this.column.hasSummary;\n    }\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.column.width;\n    }\n\n    @HostBinding('class.igx-grid-summary--compact')\n    get compactCSS() {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    @HostBinding('class.igx-grid-summary--cosy')\n    get cosyCSS() {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    @HostBinding('class.igx-grid-summary')\n    get defaultCSS() {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    get dataType(): DataType {\n        return this.column.dataType;\n    }\n    public summaryItemHeight;\n    public itemClass = 'igx-grid-summary__item';\n    private displayDensity: DisplayDensity | string;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent>, public cdr: ChangeDetectorRef) { }\n\n    ngDoCheck() {\n        this.displayDensity = this.gridAPI.get(this.gridID).displayDensity;\n        this.summaryItemHeight = this.gridAPI.get(this.gridID).defaultRowHeight;\n        this.cdr.detectChanges();\n    }\n\n    get resolveSummaries(): any[] {\n        if (this.fieldName) {\n            const field = this.fieldName;\n            this.fieldName = null;\n            this.gridAPI.set_summary_by_column_name(this.gridID, field);\n            if (this.column.field === field) {\n                return this.gridAPI.get_summaries(this.gridID).get(field);\n            } else {\n                return this.gridAPI.get_summaries(this.gridID).get(this.column.field);\n            }\n        } else {\n            this.gridAPI.set_summary_by_column_name(this.gridID, this.column.field);\n            return this.gridAPI.get_summaries(this.gridID).get(this.column.field);\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    OnDestroy,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    HostBinding,\n    HostListener\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DataType } from '../../data-operations/data-util';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../drop-down/drop-down.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings } from '../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../services/overlay/position/connected-positioning-strategy';\nimport { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IChipSelectEventArgs, IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { ExpressionUI } from './grid-filtering.service';\nimport { IgxDropDownItemComponent } from '../../drop-down/drop-down-item.component';\nimport { IgxFilteringService } from './grid-filtering.service';\nimport { KEYS } from '../../core/utils';\nimport { AbsoluteScrollStrategy } from '../../services/overlay/scroll';\n\n/**\n * @hidden\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-row',\n    template: `<!-- Have to apply styles inline because of the overlay outlet ... -->\n<igx-drop-down #inputGroupConditions [height]=\"'200px'\" (onSelection)=\"onConditionsChanged($event)\">\n    <igx-drop-down-item\n        *ngFor=\"let condition of conditions\"\n        [value]=\"condition\"\n        [isSelected]=\"isConditionSelected(condition)\">\n        <igx-icon fontSet=\"filtering-icons\" [name]=\"getCondition(condition).iconName\"></igx-icon>\n        <span style=\"margin-left: 16px\">{{ condition | filterCondition | titlecase }}</span>\n    </igx-drop-down-item>\n</igx-drop-down>\n\n<ng-template #defaultFilterUI>\n    <igx-input-group type=\"box\" [displayDensity]=\"'compact'\" [supressInputAutofocus]=\"true\">\n        <igx-prefix #inputGroupPrefix\n                    (click)=\"toggleConditionsDropDown(inputGroupPrefix)\"\n                    (keydown)=\"onPrefixKeyDown($event)\"\n                    tabindex=\"0\"\n                    [igxDropDownItemNavigation]=\"inputGroupConditions\">\n            <igx-icon fontSet=\"filtering-icons\" [name]=\"getIconName()\"></igx-icon>\n        </igx-prefix>\n        <input\n            #input\n            igxInput\n            tabindex=\"0\"\n            [placeholder]=\"placeholder\"\n            autocomplete=\"off\"\n            [(ngModel)]=\"value\"\n            [type]=\"type\"\n            [readonly]=\"isUnaryCondition\"\n            (keydown)=\"onInputKeyDown($event)\"/>\n            <igx-suffix *ngIf=\"input.value.length > 0\" (keydown)=\"onClearKeyDown($event)\" (click)=\"clearInput()\" tabindex=\"0\">\n                <igx-icon>clear</igx-icon>\n            </igx-suffix>\n    </igx-input-group>\n</ng-template>\n\n<ng-template #defaultDateUI>\n    <igx-datePicker tabindex=\"0\" [(ngModel)]=\"value\" [locale]=\"locale\" (onClose)=\"datePickerClose()\">\n        <ng-template igxDatePickerTemplate let-openDialog=\"openDialog\" let-displayData=\"displayData\">\n            <igx-input-group type=\"box\" [displayDensity]=\"'compact'\" [supressInputAutofocus]=\"true\">\n                <igx-prefix #inputGroupPrefix\n                            tabindex=\"0\"\n                            (click)=\"toggleConditionsDropDown(inputGroupPrefix)\"\n                            (keydown)=\"onPrefixKeyDown($event)\"\n                            [igxDropDownItemNavigation]=\"inputGroupConditions\">\n                    <igx-icon fontSet=\"filtering-icons\" [name]=\"expression.condition.iconName\"></igx-icon>\n                </igx-prefix>\n                <input #input\n                       igxInput\n                       tabindex=\"0\"\n                (click)=\"openDialog()\"\n                [placeholder]=\"placeholder\"\n                autocomplete=\"off\"\n                       [value]=\"displayData | date\"\n                       [readonly]=\"true\"\n                       (keydown)=\"onInputKeyDown($event)\"/>\n                <igx-suffix *ngIf=\"input.value.length > 0\" (keydown)=\"onClearKeyDown($event)\" (click)=\"clearInput()\" tabindex=\"0\">\n                    <igx-icon>clear</igx-icon>\n                </igx-suffix>\n            </igx-input-group>\n            </ng-template>\n    </igx-datePicker>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template; context: { $implicit: this }\"></ng-container>\n\n<button igxButton=\"icon\" class=\"igx-grid__filtering-row-scroll-start\" *ngIf=\"showArrows\" (keydown)=\"onLeftArrowKeyDown($event)\" (click)=\"scrollChipsOnArrowPress('left')\">\n    <igx-icon>navigate_before</igx-icon>\n</button>\n\n<div #container class=\"igx-grid__filtering-row-main\">\n    <div>\n         <igx-chips-area #chipsArea>\n            <ng-container *ngFor=\"let item of expressionsList; index as i; let last = last;\" tabindex=\"0\">\n                <igx-chip #chip id='chip'\n                    (onSelection)=\"onChipSelected($event, item.expression)\"\n                    (keydown)=\"onChipKeyDown($event, chip)\"\n                    (onRemove)=\"onChipRemoved($event, item)\"\n                    [selectable]=\"true\"\n                    [selected]=\"item.isSelected\"\n                    [displayDensity]=\"'cosy'\"\n                    [removable]=\"true\">\n                    <igx-icon\n                        igxPrefix\n                        fontSet=\"filtering-icons\"\n                        [name]=\"item.expression.condition.iconName\">\n                    </igx-icon>\n                    <span>{{filteringService.getChipLabel(item.expression)}}</span>\n                </igx-chip>\n\n                <span id='operand' *ngIf=\"!last\">\n                    <button igxButton (click)=\"toggleOperatorsDropDown($event, i)\" [igxDropDownItemNavigation]=\"operators\">\n                        <igx-icon>expand_more</igx-icon>\n                        <span>{{filteringService.getOperatorAsString(item.afterOperator)}}</span>\n                    </button>\n                    <igx-drop-down #operators (onSelection)=\"onLogicOperatorChanged($event, item)\">\n                            <igx-drop-down-item [value]=\"0\" [isSelected]=\"item.afterOperator === 0\">And</igx-drop-down-item>\n                            <igx-drop-down-item [value]=\"1\" [isSelected]=\"item.afterOperator === 1\">Or</igx-drop-down-item>\n                    </igx-drop-down>\n                </span>\n            </ng-container>\n        </igx-chips-area>\n    </div>\n</div>\n\n<button igxButton=\"icon\" class=\"igx-grid__filtering-row-scroll-end\" *ngIf=\"showArrows\" (click)=\"scrollChipsOnArrowPress('right')\">\n    <igx-icon>navigate_next</igx-icon>\n</button>\n\n<div #buttonsContainer class=\"igx-grid__filtering-row-editing-buttons\">\n    <button igxButton igxRipple (click)=\"clearFiltering()\" [disabled]=\"disabled\">Reset</button>\n    <button #closeButton igxButton igxRipple (click)=\"close()\">Close</button>\n</div>\n`\n})\nexport class IgxGridFilteringRowComponent implements AfterViewInit, OnDestroy {\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _conditionsOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private _operatorsOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private rootExpressionsTree: FilteringExpressionsTree;\n    private chipsAreaWidth: number;\n    private chipAreaScrollOffset = 0;\n    private conditionChanged = new Subject();\n    private unaryConditionChanged = new Subject();\n    private _column = null;\n\n    public showArrows: boolean;\n    public expression: IFilteringExpression;\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    set column(val) {\n        if (val) {\n            this._column = val;\n\n            this.expressionsList = this.filteringService.getExpressions(this._column.field);\n\n            this.resetExpression();\n\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    @Input()\n    get value(): any {\n        return this.expression ? this.expression.searchVal : null;\n    }\n\n    set value(val) {\n        if (!val && val !== 0) {\n            this.expression.searchVal = null;\n        } else {\n            this.expression.searchVal = this.transformValue(val);\n            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n                this.addExpression(true);\n            }\n        }\n\n        this.filter();\n    }\n\n    get locale() {\n        return window.navigator.language;\n    }\n\n    @ViewChild('defaultFilterUI', { read: TemplateRef })\n    protected defaultFilterUI: TemplateRef<any>;\n\n    @ViewChild('defaultDateUI', { read: TemplateRef })\n    protected defaultDateUI: TemplateRef<any>;\n\n    @ViewChild('input', { read: ElementRef })\n    protected input: ElementRef;\n\n    @ViewChild('inputGroupConditions', { read: IgxDropDownComponent })\n    protected dropDownConditions: IgxDropDownComponent;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChildren('operators', { read: IgxDropDownComponent })\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n\n    @ViewChild('inputGroupPrefix', { read: ElementRef })\n    protected inputGroupPrefix: ElementRef;\n\n    @ViewChild('container')\n    protected container: ElementRef;\n\n    @ViewChild('operand')\n    protected operand: ElementRef;\n\n    @ViewChild('closeButton')\n    protected closeButton: ElementRef;\n\n    @HostBinding('class.igx-grid__filtering-row')\n    public cssClass = 'igx-grid__filtering-row';\n\n    constructor(public filteringService: IgxFilteringService, public element: ElementRef, public cdr: ChangeDetectorRef) {\n        this.unaryConditionChanged.subscribe(() => this.unaryConditionChangedCallback());\n        this.conditionChanged.subscribe(() => this.conditionChangedCallback());\n    }\n\n    ngAfterViewInit() {\n        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;\n\n        if (this.column.dataType === DataType.Date) {\n            // TODO: revise usage of cdr.detectChanges() here\n            this.cdr.detectChanges();\n        }\n\n        this.input.nativeElement.focus();\n    }\n\n    ngOnDestroy() {\n        this.conditionChanged.unsubscribe();\n        this.unaryConditionChanged.unsubscribe();\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeydown(event) {\n        event.stopPropagation();\n        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {\n            event.preventDefault();\n        }\n    }\n\n    get disabled(): boolean {\n        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.defaultDateUI;\n        }\n\n        return this.defaultFilterUI;\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.String:\n            case DataType.Boolean:\n                return 'text';\n            case DataType.Number:\n                return 'number';\n        }\n    }\n\n    get conditions(): any {\n        return this.column.filters.instance().conditionList();\n    }\n\n    get isUnaryCondition(): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.isUnary;\n        } else {\n            return true;\n        }\n    }\n\n    get placeholder(): string {\n        if (this.expression.condition && this.expression.condition.isUnary) {\n            return this.filteringService.getChipLabel(this.expression);\n        } else {\n            return 'Add filter value';\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    public onPrefixKeyDown(event: KeyboardEvent) {\n        if ((event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) &&\n            this.dropDownConditions.collapsed) {\n            this._conditionsOverlaySettings.positionStrategy.settings.target = this.inputGroupPrefix.nativeElement;\n            this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n            event.stopImmediatePropagation();\n        } else if (event.key === KEYS.TAB && event.shiftKey) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input.\n     */\n    public onInputKeyDown(event: KeyboardEvent) {\n        if (event.key === KEYS.ENTER) {\n            this.chipsArea.chipsList.filter(chip => chip.selected = false);\n\n            let indexToDeselect = -1;\n            for (let index = 0; index < this.expressionsList.length; index++) {\n                const expression = this.expressionsList[index].expression;\n                if (expression.searchVal === null && !expression.condition.isUnary) {\n                    indexToDeselect = index;\n                }\n            }\n\n            if (indexToDeselect !== -1) {\n                this.removeExpression(indexToDeselect, this.expression);\n            }\n\n            this.resetExpression();\n            this.scrollChipsWhenAddingExpression();\n        } else if (event.key === KEYS.DOWN_ARROW) {\n            this.input.nativeElement.blur();\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * Event handler for datepicker's close.\n     */\n    public datePickerClose() {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.instance().condition(value);\n    }\n\n    /**\n     * Returns the icon name of the current condition.\n     */\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expression.searchVal === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else {\n            return this.expression.condition.iconName;\n        }\n    }\n\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    public isConditionSelected(conditionName: string): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.name === conditionName;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Clears the current filtering.\n     */\n    public clearFiltering() {\n        this.filteringService.clearFilter(this.column.field);\n        this.resetExpression();\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Clears the value of the input.\n     */\n    public clearInput() {\n        this.value = null;\n    }\n\n    /**\n     * Event handler for keydown on clear button.\n     */\n    public onClearKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.clearInput();\n        }\n    }\n\n    /**\n     * Closes the filtering edit row.\n     */\n    public close() {\n        if (this.expressionsList.length === 1 &&\n            this.expressionsList[0].expression.searchVal === null &&\n            this.expressionsList[0].expression.condition.isUnary === false) {\n            this.filteringService.clearFilter(this.column.field);\n        } else {\n            this.expressionsList.forEach((item) => {\n                if (item.expression.searchVal === null && !item.expression.condition.isUnary) {\n                    this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(item));\n                }\n            });\n        }\n\n        this.filteringService.isFilterRowVisible = false;\n        this.filteringService.filteredColumn = null;\n        this.filteringService.selectedExpression = null;\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Opens the conditions dropdown.\n     */\n    public toggleConditionsDropDown(target: any) {\n        this._conditionsOverlaySettings.positionStrategy.settings.target = target;\n        this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n    }\n\n    /**\n     * Opens the logic operators dropdown.\n     */\n    public toggleOperatorsDropDown(eventArgs, index) {\n        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;\n        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);\n    }\n\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    public onConditionsChanged(eventArgs) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expression.condition = this.getCondition(value);\n        if (this.expression.condition.isUnary) {\n            this.unaryConditionChanged.next(value);\n        } else {\n            this.conditionChanged.next(value);\n        }\n\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     *  Event handler for chip selected event.\n     */\n    public onChipSelected(eventArgs: IChipSelectEventArgs, expression: IFilteringExpression) {\n        if (eventArgs.selected) {\n            if (this.chipsArea.chipsList) {\n                this.chipsArea.chipsList.forEach((chip) => {\n                    if (chip !== eventArgs.owner) {\n                        chip.selected = false;\n                    }\n                });\n            }\n            this.expression = expression;\n\n            if (this.input) {\n                this.input.nativeElement.focus();\n            }\n        } else if (this.expression === expression) {\n            this.resetExpression();\n        }\n    }\n\n    /**\n     * Event handler for chip keydown event.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, chip: IgxChipComponent) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            chip.selected = !chip.selected;\n        }\n    }\n\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    public onLeftArrowKeyDown(event) {\n        if (event.key === KEYS.TAB) {\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * Event handler for chip removed event.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove, item.expression);\n\n        this.scrollChipsOnRemove();\n    }\n\n    /**\n     * Event handler for logic operator changed event.\n     */\n    public onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI) {\n        if (eventArgs.oldSelection) {\n            expression.afterOperator = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;\n            this.filter();\n        }\n    }\n\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    public scrollChipsOnArrowPress(arrowPosition: string) {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        if (arrowPosition === 'right') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {\n                    count++;\n                }\n            }\n\n            if (count < chipAraeChildren.length) {\n                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -\n                    Math.ceil(containerRect.right) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n\n        if (arrowPosition === 'left') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                    count++;\n                }\n            }\n\n            if (count > 0) {\n                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -\n                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n    }\n\n    private showHideArrowButtons() {\n        requestAnimationFrame(() => {\n            const containerWidth = this.container.nativeElement.getBoundingClientRect().width;\n            this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;\n\n            this.showArrows = this.chipsAreaWidth >= containerWidth;\n\n            // TODO: revise the cdr.detectChanges() usage here\n            this.cdr.detectChanges();\n        });\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n\n    private addExpression(isSelected: boolean) {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = this.expression;\n        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;\n        exprUI.isSelected = isSelected;\n\n        this.expressionsList.push(exprUI);\n\n        const length = this.expressionsList.length;\n        if (this.expressionsList[length - 2]) {\n            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private removeExpression(indexToRemove: number, expression: IFilteringExpression) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.filter();\n\n        if (this.expression === expression) {\n            this.resetExpression();\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private resetExpression() {\n        this.expression = {\n            fieldName: this.column.field,\n            condition: null,\n            searchVal: null,\n            ignoreCase: this.column.filteringIgnoreCase\n        };\n\n        if (this.column.dataType !== DataType.Boolean) {\n            this.expression.condition = this.getCondition(this.conditions[0]);\n        }\n\n        if (this.column.dataType === DataType.Date && this.input) {\n            this.input.nativeElement.value = null;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private scrollChipsWhenAddingExpression() {\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        if (!chipAraeChildren || chipAraeChildren.length === 0) {\n            return;\n        }\n\n        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);\n\n        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);\n        if (lastChipRectRight >= containerRectRight) {\n            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    private transform(offset: number) {\n        requestAnimationFrame(() => {\n            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;\n        });\n    }\n\n    private scrollChipsOnRemove() {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        for (let index = 0; index < chipAraeChildren.length; index++) {\n            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                count++;\n            }\n        }\n\n        if (count <= 2) {\n            this.chipAreaScrollOffset = 0;\n        } else {\n            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;\n            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;\n        }\n\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    private conditionChangedCallback() {\n        if (!!this.expression.searchVal || this.expression.searchVal === 0) {\n            this.filter();\n        } else if (this.value) {\n            this.value = null;\n        }\n    }\n\n    private unaryConditionChangedCallback() {\n        if (this.value) {\n            this.value = null;\n        }\n        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n            this.addExpression(true);\n        }\n        this.filter();\n    }\n\n    private filter() {\n        this.rootExpressionsTree = this.filteringService.createSimpleFilteringTree(this.column.field);\n\n        this.filteringService.filter(this.column.field, this.rootExpressionsTree);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDatePickerModule } from '../date-picker/date-picker.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IgxForOfModule } from '../directives/for-of/for_of.directive';\nimport { IgxTemplateOutletModule } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxTextHighlightModule } from '../directives/text-highlight/text-highlight.directive';\nimport { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownModule } from '../drop-down/drop-down.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from './column.component';\nimport { IgxColumnHidingModule } from './column-hiding.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridSummaryComponent } from './grid-summary.component';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxColumnResizerDirective,\n    IgxColumnMovingDragDirective,\n    IgxColumnMovingDropDirective,\n    IgxColumnMovingService,\n    IgxDecimalPipeComponent,\n    IgxDatePipeComponent\n} from './grid.common';\nimport { IgxGridTransaction } from './grid-base.component';\nimport {\n    IgxGridFilterConditionPipe,\n    IgxGridTransactionPipe\n} from './grid-common.pipes';\nimport { IgxRowComponent } from './row.component';\nimport { IgxChipsModule } from '../chips/chips.module';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxButtonGroupModule } from '../buttonGroup/buttonGroup.component';\nimport { IgxColumnPinningModule } from './column-pinning.component';\nimport { TransactionService } from '../services';\nimport { IgxBaseTransactionService } from '../services/transaction/base-transaction';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditActionsDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditTabStopDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\n\n@NgModule({\n    declarations: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxGridHeaderComponent,\n        IgxGridSummaryComponent,\n        IgxGridToolbarComponent,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxRowComponent\n\n    ],\n    entryComponents: [\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n    ],\n    exports: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxGridHeaderComponent,\n        IgxGridSummaryComponent,\n        IgxGridToolbarComponent,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxRowComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule\n    ],\n    providers: [\n        IgxSelectionAPIService,\n        IgxColumnMovingService,\n        IgxGridNavigationService,\n        { provide: IgxGridTransaction, useClass: IgxBaseTransactionService }\n    ]\n})\nexport class IgxGridCommonModule { }\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent } from '../grid-base.component';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-groupby-row',\n    template: `<ng-container #defaultGroupRow>\n    <div (click)=\"toggle()\" class=\"igx-grid__grouping-indicator\">\n        <igx-icon *ngIf=\"!expanded\" fontSet=\"material\">chevron_right</igx-icon>\n        <igx-icon *ngIf=\"expanded\" fontSet=\"material\">expand_more</igx-icon>\n    </div>\n\n    <div class=\"igx-grid__group-content\" #groupContent>\n        <ng-container *ngTemplateOutlet=\"grid.groupRowTemplate ? grid.groupRowTemplate : defaultGroupByTemplate; context: { $implicit: groupRow }\">\n        </ng-container>\n    </div>\n\n    <ng-template #defaultGroupByTemplate>\n        <div class=\"igx-group-label\">\n            <igx-icon fontSet=\"material\" class=\"igx-group-label__icon\">group_work</igx-icon>\n            <span class=\"igx-group-label__column-name\">\n            {{ groupRow.expression ? groupRow.expression.fieldName : '' }}:\n            </span>\n\n            <ng-container *ngIf=\"dataType === 'boolean' || dataType === 'string'; else default\" >\n                <span class=\"igx-group-label__text\">{{ groupRow.value }}</span>\n            </ng-container>\n            <ng-template #default>\n                <ng-container *ngIf=\"dataType === 'number'\">\n                    <span class=\"igx-group-label__text\">{{ groupRow.value | number }}</span>\n                </ng-container>\n                <ng-container *ngIf=\"dataType === 'date'\">\n                    <span class=\"igx-group-label__text\">{{ groupRow.value | date }}</span>\n                </ng-container>\n            </ng-template>\n\n            <igx-badge [value]=\"groupRow.records ? groupRow.records.length : 0\" class='igx-group-label__count-badge'></igx-badge>\n        </div>\n    </ng-template>\n</ng-container>\n`\n})\nexport class IgxGridGroupByRowComponent {\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        private selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__group-row';\n\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass = 'igx-grid__group-row--padding-level';\n\n    /**\n     * @hidden\n     */\n    protected isFocused = false;\n\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean {\n        return this.isFocused;\n    }\n\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public groupRow: IGroupByRecord;\n\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    @ViewChild('groupContent')\n    public groupContent: ElementRef;\n\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this.grid.isExpandedGroup(this.groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedBy(): string {\n        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';\n        return this.gridID + '_' + grRowExpr;\n    }\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +\n            (this.focused ? ` ${this.defaultCssClass}--active` : '');\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.isFocused = true;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.isFocused = false;\n    }\n\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle(key?) {\n        const shouldExpand = (!key && !this.expanded) || (key && !this.expanded && (key === 'arrowleft' || key === 'left'));\n        this.handleToggleScroll();\n        if (!shouldExpand) {\n            this.grid.verticalScrollContainer.getVerticalScroll().dispatchEvent(new Event('scroll'));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const alt = event.altKey;\n        const key = event.key.toLowerCase();\n\n        if (!this.isKeySupportedInGroupRow(key) || event.ctrlKey) { return; }\n\n        if (this.isToggleKey(key)) {\n            if (!alt) { return; }\n            this.toggle(key);\n            return;\n        }\n        const args = { cell: null, groupRow: this, event: event, cancel: false };\n        this.grid.onFocusChange.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        const colIndex = this._getSelectedColIndex() || 0;\n        const visibleColumnIndex = this.grid.columnList.toArray()[colIndex].visibleIndex !== -1 ?\n            this.grid.columnList.toArray()[colIndex].visibleIndex : 0;\n        switch (key) {\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(this.nativeElement, this.index, visibleColumnIndex);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(this.nativeElement, this.index, visibleColumnIndex);\n                break;\n            case 'tab':\n                if (event.shiftKey) {\n                    this.grid.navigation.navigateUp(this.nativeElement, this.index,\n                        this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex);\n                } else {\n                    this.grid.navigation.navigateDown(this.nativeElement, this.index, 0);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): any {\n        return this.gridAPI.get(this.gridID);\n    }\n\n    /**\n     * @hidden\n     */\n    get dataType(): any {\n        return this.grid.getColumnByName(this.groupRow.expression.fieldName).dataType;\n    }\n\n    private _getSelectedColIndex() {\n        const cell = this.selection.first_item(this.gridID + '-cell');\n        if (cell) {\n            return cell.columnID;\n        }\n    }\n\n    private isKeySupportedInGroupRow(key) {\n        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n            'tab'].indexOf(key) !== -1;\n    }\n\n    private isToggleKey(key) {\n        return ['left', 'right', 'arrowleft', 'arrowright'].indexOf(key) !== -1;\n    }\n    private handleToggleScroll() {\n        if (this.grid.rowList.length > 0 && this.grid.rowList.last.index ===\n            this.grid.verticalScrollContainer.igxForOf.length - 1) {\n            const groupRowIndex = this.index;\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    this.grid.nativeElement.querySelector(`[data-rowIndex=\"${groupRowIndex}\"]`).focus();\n                });\n        }\n        this.grid.toggleGroup(this.groupRow);\n    }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { ISortingExpression, SortingDirection } from '../../data-operations/sorting-expression.interface';\nimport { ISortingStrategy } from '../../data-operations/sorting-strategy';\n\nexport class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {\n\n    public groupBy(id: string, fieldName: string, dir: SortingDirection, ignoreCase: boolean, strategy: ISortingStrategy): void {\n        const groupingState = cloneArray(this.get(id).groupingExpressions);\n        const sortingState = cloneArray(this.get(id).sortingExpressions);\n        strategy = strategy ? strategy : this.getSortStrategyPerColumn(id, fieldName);\n        this.prepare_sorting_expression([sortingState, groupingState], { fieldName, dir, ignoreCase, strategy });\n        this.get(id).groupingExpressions = groupingState;\n        this.arrange_sorting_expressions(id);\n    }\n\n    public groupBy_multiple(id: string, expressions: ISortingExpression[]): void {\n        const groupingState = cloneArray(this.get(id).groupingExpressions);\n        const sortingState = cloneArray(this.get(id).sortingExpressions);\n\n        for (const each of expressions) {\n            each.strategy = each.strategy ? each.strategy : this.getSortStrategyPerColumn(id, each.fieldName);\n            this.prepare_sorting_expression([sortingState, groupingState], each);\n        }\n\n        this.get(id).groupingExpressions = groupingState;\n        this.arrange_sorting_expressions(id);\n    }\n\n    public clear_groupby(id: string, name?: string | Array<string>) {\n        const groupingState = cloneArray(this.get(id).groupingExpressions);\n        const sortingState = cloneArray(this.get(id).sortingExpressions);\n\n        if (name) {\n            const names = typeof name === 'string' ? [ name ] : name;\n            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            this.get(id).groupingExpressions = groupedCols;\n            this.get(id).sortingExpressions = newSortingExpr;\n            names.forEach((colName) => {\n                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);\n                const grpExpandState = this.get(id).groupingExpansionState;\n                /* remove expansion states related to the cleared group\n                and all with deeper hierarchy than the cleared group */\n                this.get(id).groupingExpansionState = grpExpandState\n                    .filter((val) => {\n                        return val.hierarchy && val.hierarchy.length <= grExprIndex;\n                    });\n            });\n        } else {\n            // clear all\n            this.get(id).groupingExpressions = [];\n            this.get(id).groupingExpansionState = [];\n            for (const grExpr of groupingState) {\n                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);\n                if (sortExprIndex > -1) {\n                    sortingState.splice(sortExprIndex, 1);\n                }\n            }\n            this.get(id).sortingExpressions = sortingState;\n        }\n    }\n\n    public groupBy_get_expanded_for_group(id: string, groupRow: IGroupByRecord): IGroupByExpandState {\n        const grState = this.get(id).groupingExpansionState;\n        const hierarchy = DataUtil.getHierarchy(groupRow);\n        return grState.find((state) =>\n            DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n    }\n\n    public groupBy_is_row_in_group(id: string, groupRow: IGroupByRecord, rowID): boolean {\n        const grid = this.get(id);\n        let rowInGroup = false;\n        groupRow.records.forEach(row => {\n            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {\n                rowInGroup = true;\n            }\n        });\n        return rowInGroup;\n    }\n\n    public groupBy_toggle_group(id: string, groupRow: IGroupByRecord) {\n        const grid = this.get(id);\n        const expansionState = grid.groupingExpansionState;\n        let toggleRowEditingOverlay: boolean;\n        let isEditRowInGroup = false;\n        if (grid.rowEditable) {\n            const rowState = this.get_edit_row_state(id);\n\n            // Toggle only row editing overlays that are inside current expanded/collapsed group.\n            isEditRowInGroup = rowState ? this.groupBy_is_row_in_group(id, groupRow, this.get_edit_row_state(id).rowID) : false;\n        }\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(id, groupRow);\n        if (state) {\n            state.expanded = !state.expanded;\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = state.expanded;\n            }\n        } else {\n            expansionState.push({\n                expanded: !grid.groupsExpanded,\n                hierarchy: DataUtil.getHierarchy(groupRow)\n            });\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = false;\n            }\n        }\n        this.get(id).groupingExpansionState = expansionState;\n        if (grid.rowEditable) {\n            grid.repositionRowEditingOverlay(grid.rowInEditMode);\n        }\n    }\n\n    protected remove_grouping_expression(id, fieldName) {\n        const groupingExpressions = this.get(id).groupingExpressions;\n        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);\n        if (index !== -1) {\n            groupingExpressions.splice(index, 1);\n        }\n    }\n\n    public arrange_sorting_expressions(id) {\n        const groupingState = this.get(id).groupingExpressions;\n        this.get(id).sortingExpressions.sort((a, b) => {\n            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);\n            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);\n            if (groupExprA && groupExprB) {\n                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;\n            } else if (groupExprA) {\n                return -1;\n            } else if (groupExprB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n}\n","import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';\nimport { IgxDropDirective } from '../../directives/dragdrop/dragdrop.directive';\nimport { IgxColumnMovingDragDirective } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxGridComponent } from './grid.component';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupByRow]'\n})\nexport class IgxGroupByRowTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupAreaDrop]'\n})\nexport class IgxGroupAreaDropDirective extends IgxDropDirective {\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone) {\n        super(elementRef, renderer, zone);\n    }\n\n    @HostBinding('class.igx-drop-area--hover')\n    public hovered = false;\n\n\n    public onDragEnter(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        const grid = <IgxGridComponent>column.grid;\n        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n        if (column.groupable && !isGrouped) {\n            drag.icon.innerText = 'group_work';\n            this.hovered = true;\n        } else {\n            drag.icon.innerText = 'block';\n            this.hovered = false;\n        }\n    }\n\n    public onDragLeave(event) {\n        event.detail.owner.icon.innerText = 'block';\n        this.hovered = false;\n    }\n\n    public onDragDrop(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        if (drag instanceof IgxColumnMovingDragDirective) {\n            const column: IgxColumnComponent = drag.column;\n            const grid = <IgxGridComponent>column.grid;\n            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n            if (column.groupable && !isGrouped) {\n                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,\n                    strategy: column.sortStrategy });\n            }\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IGroupByResult, ISortingStrategy } from '../../data-operations/sorting-strategy';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxGridBaseComponent } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridAPIService } from './grid-api.service';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridSort',\n    pure: true\n})\nexport class IgxGridSortingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent>) { }\n\n    public transform(collection: any[], expressions: ISortingExpression | ISortingExpression[],\n        id: string, pipeTrigger: number): any[] {\n        let strategy: ISortingStrategy;\n        const state = { expressions: [], strategy };\n        state.expressions = this.gridAPI.get(id).sortingExpressions;\n\n        if (!state.expressions.length) {\n            return collection;\n        }\n\n        // DataUtil.sort needs a sorting strategy to start with, so it makes sense to start with the strategy from the first expression\n        // sorting-strategy.ts, sortDataRecursive method then takes care and use the corresponding strategy for each expression\n        strategy = expressions[0].strategy;\n        state.strategy = strategy;\n\n        return DataUtil.sort(cloneArray(collection), state);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPreGroupBy',\n    pure: true\n})\nexport class IgxGridPreGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expression: ISortingExpression | ISortingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, pipeTrigger: number): IGroupByResult {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.get(id);\n        state.expressions = grid.groupingExpressions;\n\n        if (!state.expressions.length) {\n            return {\n                data: collection,\n                metadata: collection\n            };\n        }\n\n        state.expansion = grid.groupingExpansionState;\n        state.defaultExpanded = grid.groupsExpanded;\n\n        return DataUtil.group(cloneArray(collection), state);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPostGroupBy',\n    pure: true\n})\nexport class IgxGridPostGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: IGroupByResult, expression: ISortingExpression | ISortingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, groupsRecords: any[], pipeTrigger: number): any[] {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.get(id);\n        state.expressions = grid.groupingExpressions;\n\n        if (!state.expressions.length) {\n            return collection.data;\n        }\n\n        state.expansion = grid.groupingExpansionState;\n        state.defaultExpanded = grid.groupsExpanded;\n\n        return DataUtil.restoreGroups({\n            data: cloneArray(collection.data),\n            metadata: cloneArray(collection.metadata)\n        }, state, groupsRecords);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPaging',\n    pure: true\n})\nexport class IgxGridPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent>) { }\n\n    public transform(collection: IGroupByResult, page = 0, perPage = 15, id: string, pipeTrigger: number): IGroupByResult {\n\n        if (!this.gridAPI.get(id).paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: IGroupByResult = {\n            data: DataUtil.page(cloneArray(collection.data), state),\n            metadata: DataUtil.page(cloneArray(collection.metadata), state)\n        };\n        this.gridAPI.get(id).pagingState = state;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridFiltering',\n    pure: true\n})\nexport class IgxGridFilteringPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent>) { }\n\n    public transform(collection: any[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number) {\n        const grid = this.gridAPI.get(id);\n        const state = { expressionsTree: expressionsTree };\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        grid.filteredData = result;\n        return result;\n    }\n}\n","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren,\n    QueryList, ViewChild, ElementRef, TemplateRef, DoCheck, NgZone, ChangeDetectorRef, ComponentFactoryResolver,\n    IterableDiffers, ViewContainerRef, Inject, AfterContentInit, HostBinding, forwardRef, OnInit } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction, IFocusChangeEventArgs } from '../grid-base.component';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { cloneArray } from '../../core/utils';\nimport { IgxTextHighlightDirective } from '../../directives/text-highlight/text-highlight.directive';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective } from './grid.directives';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { DisplayDensity } from '../../core/displayDensity';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { TransactionService, Transaction, State } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxGridSortingPipe } from './grid.pipes';\nimport { IgxColumnComponent } from '../column.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\n\nlet NEXT_ID = 0;\n\nexport interface IGridFocusChangeEventArgs extends IFocusChangeEventArgs {\n    groupRow: IgxGridGroupByRowComponent;\n}\nexport interface IGroupingDoneEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n\n/**\n * **Ignite UI for Angular Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n *\n * Example:\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    providers: [IgxGridNavigationService,\n        { provide: GridBaseAPIService, useClass: IgxGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxGridComponent) },\n        IgxFilteringService\n    ],\n    selector: 'igx-grid',\n    template: `<igx-grid-toolbar role=\"rowgroup\" [style.width.px]=\"calcWidth\" *ngIf=\"shouldShowToolbar\" [gridID]=\"id\" [displayDensity]=\"displayDensity\" #toolbar>\n</igx-grid-toolbar>\n\n<ng-template #defaultPager let-api>\n    <button [disabled]=\"api.isFirstPage\" (click)=\"api.paginate(0)\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">first_page</igx-icon>\n    </button>\n    <button [disabled]=\"api.isFirstPage\" (click)=\"api.previousPage()\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">chevron_left</igx-icon>\n    </button>\n    <span>{{ api.page + 1 }} of {{ api.totalPages }}</span>\n    <button [disabled]=\"api.isLastPage\" (click)=\"api.nextPage()\" igxRipple igxRippleCentered=\"true\" igxButton=\"icon\">\n        <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n    </button>\n        <button [disabled]=\"api.isLastPage\" (click)=\"api.paginate(api.totalPages - 1)\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">last_page</igx-icon>\n    </button>\n    <select style=\"margin-left: 1rem;\" (change)=\"api.perPage = $event.target.value\">\n            <option [value]=\"val\" [selected]=\"api.perPage == val\" *ngFor=\"let val of [5, 10, 15, 25, 50, 100, 500]\">{{ val }}</option>\n    </select>\n</ng-template>\n\n<div [style.width.px]='calcWidth' class=\"igx-grid__grouparea\" *ngIf=\"groupingExpressions.length > 0 || hasGroupableColumns\" #groupArea>\n    <igx-chips-area (onReorder)=\"chipsOrderChanged($event)\" (onMoveEnd)=\"chipsMovingEnded()\">\n        <ng-container *ngFor=\"let expr of chipsGoupingExpressions; let last = last;\">\n            <igx-chip [id]=\"expr.fieldName\" [removable]=\"getColumnByName(expr.fieldName).groupable\" [draggable]=\"getColumnByName(expr.fieldName).groupable\" [displayDensity]=\"displayDensity\"\n                (onKeyDown)=\"onChipKeyDown($event)\" (onRemove)=\"onChipRemoved($event)\" (onClick)=\"getColumnByName(expr.fieldName).groupable ? onChipClicked($event): null\" [disabled]='!getColumnByName(expr.fieldName).groupable'>\n                    <span>{{ getColumnByName(expr.fieldName).header || expr.fieldName }}</span>\n                    <igx-icon igxSuffix>{{ expr.dir == 1 ? 'arrow_upward' : 'arrow_downward' }}</igx-icon>\n            </igx-chip>\n            <span class=\"igx-grid__grouparea-connector\">\n                <igx-icon [style.visibility]=\"(!last || dropAreaVisible) ? 'visible' : 'hidden'\" >arrow_forward</igx-icon>\n            </span>\n        </ng-container>\n        <div igxGroupAreaDrop [style.visibility]=\"dropAreaVisible ? 'visible' : 'hidden'\" [class]=\"groupAreaHostClass\">\n            <ng-container *ngTemplateOutlet=\"dropAreaTemplateResolved\"></ng-container>\n        </div>\n    </igx-chips-area>\n</div>\n\n<div class=\"igx-grid__thead\" role=\"rowgroup\" [style.width.px]='calcWidth' #theadRow>\n    <div class=\"igx-grid__tr\" [style.width.px]='calcWidth' role=\"row\">\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-left\"></span>\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n        <ng-container *ngIf=\"groupingExpressions.length > 0\">\n            <div class=\"igx-grid__header-indentation igx-grid__row-indentation--level-{{groupingExpressions.length}}\" #headerGroupContainer>\n                <igx-icon role=\"button\" class=\"igx-grid__group-expand-btn\" (click)=\"toggleAllGroupRows()\">reorder</igx-icon>\n            </div>\n        </ng-container>\n        <ng-container *ngIf=\"rowSelectable\">\n            <div class=\"igx-grid__cbx-selection\" #headerCheckboxContainer>\n                <igx-checkbox [checked]=\"allRowsSelected\" (change)=\"onHeaderCheckboxClick($event)\" disableRipple=\"true\" [aria-label]=\"headerCheckboxAriaLabel\" #headerCheckbox></igx-checkbox>\n            </div>\n        </ng-container>\n        <ng-container *ngIf=\"pinnedColumns.length > 0\">\n            <ng-template ngFor let-col [ngForOf]=\"onlyTopLevel(pinnedColumns)\">\n                <div class=\"igx-grid__thead-item igx-grid__th--pinned\">\n                    <igx-grid-header [igxColumnMovingDrag]=\"col\" [attr.droppable]=\"true\" [igxColumnMovingDrop]=\"col\" [gridID]=\"id\"\n                        [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [style.max-width.px]='col.width'></igx-grid-header>\n                    <igx-grid-filtering-cell *ngIf=\"allowFiltering && !col.columnGroup && filteringService.filteredColumn !== col\"\n                        [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width' [style.max-width.px]='col.width'></igx-grid-filtering-cell>\n                </div>\n            </ng-template>\n        </ng-container>\n        <ng-template igxGridFor let-col [igxGridForOf]=\"onlyTopLevel(unpinnedColumns)\" [igxForScrollOrientation]=\"'horizontal'\" [igxForScrollContainer]=\"parentVirtDir\"\n            [igxForContainerSize]='unpinnedWidth' [igxForTrackBy]='trackColumnChanges' #headerContainer>\n            <div class=\"igx-grid__thead-item\">\n                <igx-grid-header [igxColumnMovingDrag]=\"col\" [attr.droppable]=\"true\" [igxColumnMovingDrop]=\"col\" [gridID]=\"id\" [column]=\"col\"\n                    [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width' [style.max-width.px]='col.width'></igx-grid-header>\n                <igx-grid-filtering-cell *ngIf=\"allowFiltering && !col.columnGroup && filteringService.filteredColumn !== col\" [column]=\"col\"\n                    [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width' [style.max-width.px]='col.width'></igx-grid-filtering-cell>\n            </div>\n        </ng-template>\n        <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    </div>\n    <igx-grid-filtering-row *ngIf=\"filteringService.isFilterRowVisible\" [column]=\"filteringService.filteredColumn\"></igx-grid-filtering-row>\n</div>\n\n<div class=\"igx-grid__tbody\" role=\"rowgroup\" [style.height.px]='calcHeight' [style.width.px]='calcWidth' #tbody (scroll)='scrollHandler($event)' (wheel)=\"wheelHandler()\">\n    <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-left\"></span>\n    <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n    <ng-template igxGridFor let-rowData [igxGridForOf]=\"data | gridTransaction:id:pipeTrigger\n    | gridFiltering:filteringExpressionsTree:id:pipeTrigger\n    | gridSort:sortingExpressions:id:pipeTrigger\n    | gridPreGroupBy:groupingExpressions:groupingExpansionState:groupsExpanded:id:pipeTrigger\n    | gridPaging:page:perPage:id:pipeTrigger\n    | gridPostGroupBy:groupingExpressions:groupingExpansionState:groupsExpanded:id:groupsRecords:pipeTrigger\"\n    let-rowIndex=\"index\" [igxForScrollOrientation]=\"'vertical'\"\n    [igxForContainerSize]='calcHeight' [igxForItemSize]=\"rowHeight\" #verticalScrollContainer (onChunkPreload)=\"dataLoading($event)\">\n        <ng-template #record_template>\n            <igx-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [rowData]=\"rowData\" #row>\n            </igx-grid-row>\n        </ng-template>\n        <ng-template #group_template>\n            <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row>\n            </igx-grid-groupby-row>\n        </ng-template>\n        <ng-container *igxTemplateOutlet=\"isGroupByRecord(rowData) ? group_template : record_template; context: getContext(rowData) \"></ng-container>\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n    <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    <div class=\"igx-grid__row-editing-outlet\" igxOverlayOutlet #igxRowEditingOverlayOutlet></div>\n</div>\n\n\n<div class=\"igx-grid__tfoot\" role=\"rowgroup\" [style.width.px]='calcWidth' #tfoot>\n    <div *ngIf=\"hasSummarizedColumns\" class=\"igx-grid__summaries\" [style.height.px]=\"summariesHeight\" role=\"row\" #summaries>\n        <ng-container *ngIf=\"groupingExpressions.length > 0\">\n            <div class=\"igx-grid__row-indentation igx-grid__row-indentation--level-{{groupingExpressions.length}}\"></div>\n        </ng-container>\n        <ng-container *ngIf=\"summariesMargin\">\n            <div\n            class=\"igx-grid__summaries-patch\"\n            [style.min-width.px]=\"summariesMargin\"\n            [style.flex-basis.px]=\"summariesMargin\"\n            ></div>\n        </ng-container>\n        <ng-container *ngIf=\"pinnedColumns.length > 0\">\n            <igx-grid-summary [gridID]=\"id\" *ngFor=\"let col of notGroups(pinnedColumns)\"  [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width'></igx-grid-summary>\n        </ng-container>\n        <ng-template igxGridFor let-col [igxGridForOf]=\"notGroups(unpinnedColumns)\" [igxForScrollOrientation]=\"'horizontal'\" [igxForScrollContainer]=\"parentVirtDir\" [igxForContainerSize]='unpinnedWidth' [igxForTrackBy]='trackColumnChanges' #summaryContainer>\n            <igx-grid-summary [gridID]=\"id\" [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width'></igx-grid-summary>\n        </ng-template>\n    </div>\n</div>\n\n<div class=\"igx-grid__scroll\" [style.height]=\"'18px'\" #scr [hidden]=\"unpinnedWidth - totalWidth >= 0\">\n    <div class=\"igx-grid__scroll-start\" [style.width.px]='pinnedWidth' [hidden]=\"pinnedWidth === 0\"></div>\n    <div class=\"igx-grid__scroll-main\" [style.width.px]='unpinnedWidth'>\n        <ng-template igxGridFor [igxGridForOf]='[]' #scrollContainer>\n        </ng-template>\n    </div>\n</div>\n\n<div class=\"igx-paginator igx-grid-paginator\" *ngIf=\"paging\" #paginator>\n    <ng-container *ngTemplateOutlet=\"paginationTemplate ? paginationTemplate : defaultPager; context: { $implicit: this }\">\n    </ng-container>\n</div>\n\n<ng-template #emptyFilteredGrid>\n    <span class=\"igx-grid__tbody-message\">{{emptyFilteredGridMessage}}</span>\n</ng-template>\n\n<ng-template #defaultEmptyGrid>\n    <span class=\"igx-grid__tbody-message\">{{emptyGridMessage}}</span>\n</ng-template>\n\n<ng-template #defaultDropArea>\n    <igx-icon fontSet=\"material\" class=\"igx-drop-area__icon\">group_work</igx-icon>\n    <span class=\"igx-drop-area__text\">{{dropAreaMessage}}</span>\n</ng-template>\n\n<div *ngIf=\"rowEditable\" igxToggle>\n    <div [className]=\"bannerClass\">\n        <ng-container *ngTemplateOutlet=\"rowEditContainer; context: { rowChangesCount: rowChangesCount, endEdit: endEdit.bind(this) }\"></ng-container>\n    </div>\n</div>\n<ng-template #defaultRowEditText>\n    You have {{ rowChangesCount }} changes in this row\n</ng-template>\n<ng-template #defaultRowEditActions>\n    <button igxButton igxRowEditTabStop (click)=\"endEdit(false, $event)\">Cancel</button>\n    <button igxButton igxRowEditTabStop (click)=\"endEdit(true, $event)\">Done</button>\n</ng-template>\n<ng-template #defaultRowEditTemplate>\n    <div class=\"igx-banner__message\">\n        <span class=\"igx-banner__text\">\n            <ng-container *ngTemplateOutlet=\"rowEditText ? rowEditText : defaultRowEditText; context: { $implicit: rowChangesCount }\"></ng-container>\n        </span>\n    </div>\n    <div class=\"igx-banner__actions\">\n        <div class=\"igx-banner__row\">\n            <ng-container *ngTemplateOutlet=\"rowEditActions ? rowEditActions : defaultRowEditActions; context: { $implicit: endEdit.bind(this) }\"></ng-container>\n        </div>\n    </div>\n</ng-template>\n\n<div class=\"igx-grid__outlet\" #igxFilteringOverlayOutlet igxOverlayOutlet></div>\n`\n})\nexport class IgxGridComponent extends IgxGridBaseComponent implements OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-grid-${NEXT_ID++}`;\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions = [];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer;\n    private _hideGroupedColumns = false;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        if (this._id !== value) {\n            const oldId = this._id;\n            this._id = value;\n            this._gridAPI.reset(oldId, this._id);\n        }\n    }\n\n    private _gridAPI: IgxGridAPIService;\n\n    constructor(\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) _transactions: TransactionService<Transaction, State>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxGridNavigationService,\n        filteringService: IgxFilteringService) {\n            super(gridAPI, selection, _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                  filteringService);\n            this._gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    /**\n     * Returns the group by state of the `IgxGridComponent`.\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpressions(): ISortingExpression[] {\n        return this._groupingExpressions;\n    }\n\n    /**\n     * Sets the group by state of the `IgxGridComponent` and emits the `onGroupingDone`\n     * event with the appropriate arguments.\n     * ```typescript\n     * this.grid.groupingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Asc,\n     *     ignoreCase: false\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpressions(value: ISortingExpression[]) {\n        if (value && value.length > 10) {\n            throw Error('Maximum amount of grouped columns is 10.');\n        }\n        const oldExpressions: Array<ISortingExpression> = this.groupingExpressions;\n        const newExpressions: Array<ISortingExpression> = value;\n        this._groupingExpressions = cloneArray(value);\n        this.chipsGoupingExpressions = cloneArray(value);\n        if (this._gridAPI.get(this.id)) {\n            this._gridAPI.arrange_sorting_expressions(this.id);\n            /* grouping should work in conjunction with sorting\n            and without overriding separate sorting expressions */\n            this._applyGrouping();\n            this.cdr.markForCheck();\n        } else {\n            // setter called before grid is registered in grid API service\n            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);\n        }\n        if (JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {\n            const groupedCols: Array<IgxColumnComponent> | IgxColumnComponent = [];\n            const ungroupedCols: Array<IgxColumnComponent> | IgxColumnComponent = [];\n            const groupedColsArr = newExpressions.filter((obj) => {\n                return !oldExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            groupedColsArr.forEach((elem) => {\n                groupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const ungroupedColsArr = oldExpressions.filter((obj) => {\n                return !newExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            ungroupedColsArr.forEach((elem) => {\n                ungroupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const groupingDoneArgs: IGroupingDoneEventArgs = {\n                expressions: newExpressions,\n                groupedColumns: groupedCols,\n                ungroupedColumns: ungroupedCols\n            };\n            this.onGroupingDone.emit(groupingDoneArgs);\n    }\n    }\n\n    /**\n     * Returns a list of expansion states for group rows.\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * ```typescript\n     * const groupExpState = this.grid.groupingExpansionState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpansionState() {\n        return this._groupingExpandState;\n    }\n\n    /**\n     * Sets a list of expansion states for group rows.\n     * ```typescript\n     *      this.grid.groupingExpansionState = [{\n     *      expanded: false,\n     *      hierarchy: [{ fieldName: 'ID', value: 1 }]\n     *   }];\n     * // You can use DataUtil.getHierarchy(groupRow) to get the group `IgxGridRowComponent` hierarchy.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpansionState(value) {\n        const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n\n        let highlightItem = null;\n        if (this.collapsedHighlightedItem) {\n            highlightItem = this.collapsedHighlightedItem.item;\n        } else if (this.lastSearchInfo.matchInfoCache.length) {\n            highlightItem = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex].item;\n        }\n\n        this._groupingExpandState = cloneArray(value);\n\n        this.refreshSearch();\n\n        if (highlightItem !== null && this.groupingExpressions.length) {\n            const index = this.filteredSortedData.indexOf(highlightItem);\n            const groupRow = this.getGroupByRecords()[index];\n\n            if (!this.isExpandedGroup(groupRow)) {\n                IgxTextHighlightDirective.clearActiveHighlight(this.id);\n                this.collapsedHighlightedItem = {\n                    info: activeInfo,\n                    item: highlightItem\n                };\n            } else if (this.collapsedHighlightedItem !== null) {\n                const collapsedInfo = this.collapsedHighlightedItem.info;\n                IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                    columnIndex: collapsedInfo.columnIndex,\n                    rowIndex: collapsedInfo.rowIndex,\n                    index: collapsedInfo.index,\n                    page: collapsedInfo.page\n                });\n            }\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * An @Input property that determines whether created groups are rendered expanded or collapsed.\n     * The default rendered state is expanded.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public groupsExpanded = true;\n\n    /**\n     * A hierarchical representation of the group by records.\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupsRecords: IGroupByRecord[] = [];\n\n    /**\n     * An @Input property that sets whether the grouped columns should be hidden as well.\n     * The default value is \"false\"\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public get hideGroupedColumns() {\n        return this._hideGroupedColumns;\n    }\n\n    public set hideGroupedColumns(value: boolean) {\n        if (value) {\n            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();\n        } else {\n            this.groupingDiffer = null;\n        }\n        if (this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(value);\n        }\n\n        this._hideGroupedColumns = value;\n    }\n\n    /**\n     * An @Input property that sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public dropAreaMessage = 'Drag a column header and drop it here to group by that column.';\n\n    /**\n     * An @Input property that sets the template that will be rendered as a GroupBy drop area.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     *\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     * ```ts\n     * @ViewChild('myDropArea', { read: TemplateRef })\n     * public dropAreaRef: TemplateRef<any>;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public dropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Emitted when a new `IgxColumnComponent` gets grouped/ungrouped, or multiple columns get\n     * grouped/ungrouped at once by using the Group By API.\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * ```typescript\n     * groupingDone(event: IGroupingDoneEventArgs){\n     *     const expressions = event.expressions;\n     *     //the newly grouped columns\n     *     const groupedColumns = event.groupedColumns;\n     *     //the newly ungrouped columns\n     *     const ungroupedColumns = event.ungroupedColumns;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onGroupingDone = new EventEmitter<IGroupingDoneEventArgs>();\n\n    @Output()\n    public onFocusChange = new EventEmitter<IGridFocusChangeEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective })\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n\n    @ViewChildren(IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent })\n    private _groupsRowList: QueryList<IgxGridGroupByRowComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultDropArea', { read: TemplateRef })\n    public defaultDropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * A list of all group rows.\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get groupsRowList() {\n        const res = new QueryList<any>();\n        if (!this._groupsRowList) {\n            return res;\n        }\n        const rList = this._groupsRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('groupArea')\n    public groupArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get groupAreaHostClass(): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 'igx-drop-area--cosy';\n            case DisplayDensity.compact:\n                return 'igx-drop-area--compact';\n            default:\n                return 'igx-drop-area';\n        }\n    }\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group row.\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupRowTemplate(): TemplateRef<any> {\n        return this._groupRowTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group `IgxGridRowComponent`.\n     * ```typescript\n     * this.grid.groupRowTemplate = myRowTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupRowTemplate(template: TemplateRef<any>) {\n        this._groupRowTemplate = template;\n        this.markForCheck();\n    }\n\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupAreaTemplate(): TemplateRef<any> {\n        return this._groupAreaTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupAreaTemplate(template: TemplateRef<any>) {\n        this._groupAreaTemplate = template;\n        this.markForCheck();\n    }\n\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n            { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n            { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n            { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n        ]);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupBy(expression: ISortingExpression | Array<ISortingExpression>): void;\n    public groupBy(...rest): void {\n        this.endEdit(true);\n        this._gridAPI.submit_value(this.id);\n        if (rest.length === 1 && rest[0] instanceof Array) {\n            this._groupByMultiple(rest[0]);\n        } else {\n            this._groupBy(rest[0]);\n        }\n        this.cdr.detectChanges();\n        this.calculateGridSizes();\n        this.restoreHighlight();\n    }\n\n    /**\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     *\n     */\n    public clearGrouping(name?: string | Array<string>): void {\n        this._gridAPI.clear_groupby(this.id, name);\n        this.calculateGridSizes();\n        this.restoreHighlight();\n    }\n\n    /**\n     * Returns if a group is expanded or not.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        const state: IGroupByExpandState = this._getStateForGroupRow(group);\n        return state ? state.expanded : this.groupsExpanded;\n    }\n\n    /**\n     * Toggles the expansion state of a group.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleGroup(groupRow: IGroupByRecord) {\n        this._toggleGroup(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    public isGroupByRecord(record: any): boolean {\n        // return record.records instance of GroupedRecords fails under Webpack\n        return record.records && record.records.length;\n    }\n\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleAllGroupRows() {\n        this.groupingExpansionState = [];\n        this.groupsExpanded = !this.groupsExpanded;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get hasGroupableColumns(): boolean {\n        return this.columnList.some((col) => col.groupable);\n    }\n\n    private _setGroupColsVisibility(value) {\n        this.groupingExpressions.forEach((expr) => {\n            const col = this.getColumnByName(expr.fieldName);\n            col.hidden = value;\n        });\n    }\n\n    /**\n     * Returns if the grid's group by drop area is visible.\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get dropAreaVisible(): boolean {\n        return (this.draggedColumn && this.draggedColumn.groupable) ||\n            !this.chipsGoupingExpressions.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _groupBy(expression: ISortingExpression) {\n        this._gridAPI.groupBy(this.id, expression.fieldName, expression.dir, expression.ignoreCase, expression.strategy);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _groupByMultiple(expressions: ISortingExpression[]) {\n        this._gridAPI.groupBy_multiple(this.id, expressions);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState {\n        return this._gridAPI.groupBy_get_expanded_for_group(this.id, groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_toggle_group(this.id, groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _applyGrouping() {\n        this._gridAPI.sort_multiple(this.id, this._groupingExpressions);\n    }\n\n    /**\n    * @hidden\n    */\n   public getContext(rowData): any {\n        return {\n            $implicit: rowData,\n            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : 'dataRow'\n        };\n    }\n\n    // This method's idea is to get by how much each data row is offset by the group by rows before it.\n    /**\n    * @hidden\n    */\n    protected getGroupIncrementData(): number[] {\n        if (this.groupingExpressions && this.groupingExpressions.length) {\n            const groupsRecords = this.getGroupByRecords();\n            const groupByIncrements = [];\n            const values = [];\n\n            let prevHierarchy = null;\n            let increment = 0;\n\n            groupsRecords.forEach((gbr) => {\n                if (values.indexOf(gbr) === -1) {\n                    let levelIncrement = 1;\n\n                    if (prevHierarchy !== null) {\n                        levelIncrement += this.getLevelIncrement(0, gbr.groupParent, prevHierarchy.groupParent);\n                    } else {\n                        // This is the first level we stumble upon, so we haven't accounted for any of its parents\n                        levelIncrement += gbr.level;\n                    }\n\n                    increment += levelIncrement;\n                    prevHierarchy = gbr;\n                    values.push(gbr);\n                }\n\n                groupByIncrements.push(increment);\n            });\n            return groupByIncrements;\n        } else {\n            return null;\n        }\n    }\n\n    private getLevelIncrement(currentIncrement, currentHierarchy, prevHierarchy) {\n        if (currentHierarchy !== prevHierarchy && !!prevHierarchy && !!currentHierarchy) {\n            return this.getLevelIncrement(++currentIncrement, currentHierarchy.groupParent, prevHierarchy.groupParent);\n        } else {\n            return currentIncrement;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupByRecords(): IGroupByRecord[] {\n        if (this.groupingExpressions && this.groupingExpressions.length) {\n            const state = {\n                expressions: this.groupingExpressions,\n                expansion: this.groupingExpansionState,\n                defaultExpanded: this.groupsExpanded\n            };\n\n            return DataUtil.group(cloneArray(this.filteredSortedData), state).metadata;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipRemoved(event: IBaseChipEventArgs) {\n        this.clearGrouping(event.owner.id);\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsOrderChanged(event: IChipsAreaReorderEventArgs) {\n        const newGrouping = [];\n        for (let i = 0; i < event.chipsArray.length; i++) {\n            const expr = this.groupingExpressions.filter((item) => {\n                return item.fieldName === event.chipsArray[i].id;\n            })[0];\n\n            if (!this.getColumnByName(expr.fieldName).groupable) {\n                // disallow changing order if there are columns with groupable: false\n                return;\n            }\n            newGrouping.push(expr);\n        }\n        this.groupingExpansionState = [];\n        this.chipsGoupingExpressions = newGrouping;\n\n        if (event.originalEvent instanceof KeyboardEvent) {\n            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.\n            this.groupingExpressions = this.chipsGoupingExpressions;\n        }\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsMovingEnded() {\n        this.groupingExpressions = this.chipsGoupingExpressions;\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipClicked(event: IChipClickEventArgs) {\n        const sortingExpr = this.sortingExpressions;\n        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n        columnExpr.dir = 3 - columnExpr.dir;\n        this.sort(columnExpr);\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: IChipKeyDownEventArgs) {\n        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {\n            const sortingExpr = this.sortingExpressions;\n            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n            columnExpr.dir = 3 - columnExpr.dir;\n            this.sort(columnExpr);\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return this.groupArea ? this.groupArea.nativeElement.offsetHeight : 0;\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        let sum = super.getPinnedWidth(takeHidden);\n\n        if (this.groupingExpressions.length > 0 && this.headerGroupContainer) {\n            sum += this.headerGroupContainer.nativeElement.clientWidth;\n        }\n        return sum;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: number, column: number, page: number, groupByRecord?: IGroupByRecord): void {\n        if (groupByRecord && !this.isExpandedGroup(groupByRecord)) {\n            this.toggleGroup(groupByRecord);\n        }\n\n        super.scrollTo(row, column, page, groupByRecord);\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveFilteredSortedData(): any[] {\n        let data: any[] = super.resolveFilteredSortedData();\n\n        if (this.sortingExpressions &&\n            this.sortingExpressions.length > 0) {\n\n            const sortingPipe = new IgxGridSortingPipe(this._gridAPI);\n            data = sortingPipe.transform(data, this.sortingExpressions, this.id, -1);\n        }\n        return data;\n    }\n\n    /**\n    * @hidden\n    */\n   public get dropAreaTemplateResolved(): TemplateRef<any> {\n        if (this.dropAreaTemplate) {\n            return this.dropAreaTemplate;\n        } else {\n            return this.defaultDropAreaTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.groupTemplate) {\n            this._groupRowTemplate = this.groupTemplate.template;\n        }\n\n        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(this.hideGroupedColumns);\n        }\n        super.ngAfterContentInit();\n    }\n\n    public ngOnInit() {\n        super.ngOnInit();\n        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe(() => this.endEdit(true));\n    }\n\n    public ngDoCheck(): void {\n        if (this.groupingDiffer) {\n            const changes = this.groupingDiffer.diff(this.groupingExpressions);\n            if (changes && this.columnList) {\n                changes.forEachAddedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = true;\n                });\n                changes.forEachRemovedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = false;\n                });\n            }\n        }\n    }\n\n}\n","import { Component, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxRowComponent } from '../row.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-row',\n    template: `<ng-container *ngIf=\"grid.groupingExpressions.length > 0\">\n    <div class=\"igx-grid__row-indentation igx-grid__row-indentation--level-{{grid.groupingExpressions.length}}\"></div>\n</ng-container>\n<ng-container *ngIf=\"rowSelectable\">\n    <div class=\"igx-grid__cbx-selection\">\n        <igx-checkbox [checked]=\"isSelected\" (change)=\"onCheckboxClick($event)\" disableRipple=\"true\" [aria-label]=\"rowCheckboxAriaLabel\"></igx-checkbox>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"pinnedColumns.length > 0\">\n    <igx-grid-cell *ngFor=\"let col of notGroups(pinnedColumns)\" [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\"></igx-grid-cell>\n</ng-container>\n<ng-template igxGridFor let-col [igxGridForOf]=\"notGroups(unpinnedColumns)\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]='grid.unpinnedWidth' [igxForTrackBy]='grid.trackColumnChanges' #igxDirRef>\n    <igx-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\"></igx-grid-cell>\n</ng-template>\n`,\n    providers: [{provide: IgxRowComponent, useExisting: forwardRef(() => IgxGridRowComponent)}]\n})\nexport class IgxGridRowComponent extends IgxRowComponent<IgxGridComponent> {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n    IgxGroupAreaDropDirective,\n    IgxGroupByRowTemplateDirective\n} from './grid.directives';\nimport { IgxGridComponent } from './grid.component';\nimport {\n    IgxGridPagingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPreGroupingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n} from './grid.pipes';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { DeprecateMethod } from '../../core/deprecateDecorators';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxGridComponent,\n    IgxGridRowComponent,\n    IgxGridGroupByRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridPreGroupingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n  ],\n  exports: [\n    IgxGridComponent,\n    IgxGridGroupByRowComponent,\n    IgxGridRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridCommonModule\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule\n  ]\n})\nexport class IgxGridModule {\n  @DeprecateMethod('IgxGridModule.forRoot method is deprecated. Use IgxGridModule instead.')\n  public static forRoot() {\n    return {\n        ngModule: IgxGridModule\n    };\n  }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { IgxColumnComponent } from '../column.component';\nimport { first } from 'rxjs/operators';\n\nexport class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {\n    public get_all_data(id: string, transactions?: boolean): any[] {\n        const grid = this.get(id);\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;\n        return data ? data : [];\n    }\n\n    public expand_row(id: string, rowID: any) {\n        const grid = this.get(id);\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, true);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public collapse_row(id: string, rowID: any) {\n        const grid = this.get(id);\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, false);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public toggle_row_expansion(id: string, rowID: any) {\n        const grid = this.get(id);\n        const expandedStates = grid.expansionStates;\n        const treeRecord = grid.records.get(rowID);\n\n        if (treeRecord) {\n            const isExpanded = this.get_row_expansion_state(id, rowID, treeRecord.level);\n            expandedStates.set(rowID, !isExpanded);\n            grid.expansionStates = expandedStates;\n        }\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public trigger_row_expansion_toggle(id: string, row: ITreeGridRecord, expanded: boolean, event?: Event, visibleColumnIndex?) {\n        const grid = this.get(id);\n\n        if (!row.children || row.children.length <= 0 && row.expanded === expanded) {\n            return;\n        }\n\n        const args: IRowToggleEventArgs = {\n            rowID: row.rowID,\n            expanded: expanded,\n            event: event,\n            cancel: false\n        };\n        grid.onRowToggle.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n        visibleColumnIndex = visibleColumnIndex ? visibleColumnIndex : 0;\n        const groupRowIndex = super.get_row_by_key(id, row.rowID).index;\n        const shouldScroll = !(grid.unpinnedWidth - grid.totalWidth >= 0);\n        const isScrolledToBottom = grid.rowList.length > 0 && grid.rowList.last.index ===\n        grid.verticalScrollContainer.igxForOf.length - 1;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(row.rowID, expanded);\n        grid.expansionStates = expandedStates;\n\n        if (isScrolledToBottom) {\n            grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    grid.nativeElement.querySelector(\n                        `[data-rowIndex=\"${groupRowIndex}\"][data-visibleindex=\"${visibleColumnIndex}\"]`).focus();\n                });\n        }\n        if (expanded) {\n            grid.verticalScrollContainer.getVerticalScroll().dispatchEvent(new Event('scroll'));\n            if (shouldScroll) {\n                grid.parentVirtDir.getHorizontalScroll().dispatchEvent(new Event('scroll'));\n            }\n        }\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_row_expansion_state(id: string, rowID: any, indentationLevel: number): boolean {\n        const grid = this.get(id);\n        const states = grid.expansionStates;\n        const expanded = states.get(rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return indentationLevel < grid.expansionDepth;\n        }\n    }\n\n    protected update_row_in_array(id: string, value: any, rowID: any, index: number) {\n        const grid = this.get(id);\n        if (grid.primaryKey && grid.foreignKey) {\n            super.update_row_in_array(id, value, rowID, index);\n        } else {\n            const record = grid.records.get(rowID);\n            const childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;\n            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            childData[index] = value;\n        }\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number && column.visibleIndex !== 0;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ElementRef,\n    HostBinding,\n    Input,\n    IterableDiffers,\n    ViewContainerRef,\n    Output,\n    EventEmitter,\n    Inject,\n    NgZone,\n    forwardRef\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { TransactionService, HierarchicalTransaction, HierarchicalState, TransactionType } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { mergeObjects } from '../../core/utils';\nimport { IgxHierarchicalTransactionService } from '../../services';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-tree-grid',\n    template: `<igx-grid-toolbar role=\"rowgroup\" [style.width.px]=\"calcWidth\" *ngIf=\"shouldShowToolbar\" [gridID]=\"id\" [displayDensity]=\"displayDensity\" #toolbar>\n</igx-grid-toolbar>\n\n<ng-template #defaultPager let-api>\n    <button [disabled]=\"api.isFirstPage\" (click)=\"api.paginate(0)\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">first_page</igx-icon>\n    </button>\n    <button [disabled]=\"api.isFirstPage\" (click)=\"api.previousPage()\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">chevron_left</igx-icon>\n    </button>\n    <span>{{ api.page + 1 }} of {{ api.totalPages }}</span>\n    <button [disabled]=\"api.isLastPage\" (click)=\"api.nextPage()\" igxRipple igxRippleCentered=\"true\" igxButton=\"icon\">\n        <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n    </button>\n        <button [disabled]=\"api.isLastPage\" (click)=\"api.paginate(api.totalPages - 1)\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">last_page</igx-icon>\n    </button>\n    <select style=\"margin-left: 1rem;\" (change)=\"api.perPage = $event.target.value\">\n            <option [value]=\"val\" [selected]=\"api.perPage == val\" *ngFor=\"let val of [5, 10, 15, 25, 50, 100, 500]\">{{ val }}</option>\n    </select>\n</ng-template>\n\n<div class=\"igx-grid__thead\" role=\"rowgroup\" [style.width.px]='calcWidth' #theadRow>\n    <div class=\"igx-grid__tr\" [style.width.px]='calcWidth' role=\"row\">\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-left\"></span>\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n        <ng-container *ngIf=\"rowSelectable\">\n            <div class=\"igx-grid__cbx-selection\" #headerCheckboxContainer>\n                <igx-checkbox [checked]=\"allRowsSelected\" (change)=\"onHeaderCheckboxClick($event)\" disableRipple=\"true\" [aria-label]=\"headerCheckboxAriaLabel\" #headerCheckbox></igx-checkbox>\n            </div>\n        </ng-container>\n        <ng-container *ngIf=\"pinnedColumns.length > 0\">\n            <ng-template ngFor let-col [ngForOf]=\"onlyTopLevel(pinnedColumns)\">\n                <div class=\"igx-grid__thead-item igx-grid__th--pinned\">\n                    <igx-grid-header [igxColumnMovingDrag]=\"col\" [attr.droppable]=\"true\" [igxColumnMovingDrop]=\"col\" [gridID]=\"id\"\n                        [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\"></igx-grid-header>\n                    <igx-grid-filtering-cell *ngIf=\"allowFiltering && !col.columnGroup && filteringService.filteredColumn !== col\"\n                        [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width' [style.max-width.px]='col.width'></igx-grid-filtering-cell>\n                </div>\n            </ng-template>\n        </ng-container>\n        <ng-template igxGridFor let-col [igxGridForOf]=\"onlyTopLevel(unpinnedColumns)\" [igxForScrollOrientation]=\"'horizontal'\" [igxForScrollContainer]=\"parentVirtDir\"\n            [igxForContainerSize]='unpinnedWidth' [igxForTrackBy]='trackColumnChanges' #headerContainer>\n            <div class=\"igx-grid__thead-item\">\n                <igx-grid-header [igxColumnMovingDrag]=\"col\" [attr.droppable]=\"true\" [igxColumnMovingDrop]=\"col\" [gridID]=\"id\" [column]=\"col\"\n                    [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width'></igx-grid-header>\n                <igx-grid-filtering-cell *ngIf=\"allowFiltering && !col.columnGroup && filteringService.filteredColumn !== col\"\n                    [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width' [style.max-width.px]='col.width'></igx-grid-filtering-cell>\n            </div>\n        </ng-template>\n        <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    </div>\n    <igx-grid-filtering-row *ngIf=\"filteringService.isFilterRowVisible\" [column]=\"filteringService.filteredColumn\"></igx-grid-filtering-row>\n</div>\n\n<div class=\"igx-grid__tbody\" role=\"rowgroup\" [style.height.px]='calcHeight' [style.width.px]='calcWidth' #tbody (scroll)='scrollHandler($event)' (wheel)=\"wheelHandler()\">\n    <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-left\"></span>\n    <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n    <ng-template igxGridFor let-rowData [igxGridForOf]=\"data \n\t| treeGridTransaction:id:pipeTrigger\t\n\t| treeGridHierarchizing:primaryKey:foreignKey:childDataKey:id:pipeTrigger\n    | treeGridFiltering:filteringExpressionsTree:id:pipeTrigger \n    | treeGridSorting:sortingExpressions:id:pipeTrigger\n    | treeGridFlattening:id:expansionDepth:expansionStates:pipeTrigger\n    | treeGridPaging:page:perPage:id:pipeTrigger\"\n\n    let-rowIndex=\"index\" [igxForScrollOrientation]=\"'vertical'\"\n    [igxForContainerSize]='calcHeight' [igxForItemSize]=\"rowHeight\" #verticalScrollContainer (onChunkPreload)=\"dataLoading($event)\">\n        <ng-template #record_template>\n            <igx-tree-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [treeRow]=\"rowData\" #row>\n            </igx-tree-grid-row>\n        </ng-template>\n     \n        <ng-container *igxTemplateOutlet=\"record_template; context: getContext(rowData) \"></ng-container>\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n    <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    <div class=\"igx-grid__row-editing-outlet\" igxOverlayOutlet #igxRowEditingOverlayOutlet></div>\n</div>\n\n<div class=\"igx-grid__tfoot\" role=\"rowgroup\" [style.width.px]='calcWidth' #tfoot>\n    <!-- Hiding until summaries are implemented for TreeGrid -->\n    <!-- <div *ngIf=\"hasSummarizedColumns\" class=\"igx-grid__summaries\" [style.height.px]=\"summariesHeight\" role=\"row\" #summaries>\n        <ng-container *ngIf=\"summariesMargin\">\n            <div\n            class=\"igx-grid__summaries-patch\"\n            [style.min-width.px]=\"summariesMargin\"\n            [style.flex-basis.px]=\"summariesMargin\"\n            ></div>\n        </ng-container>\n        <ng-container *ngIf=\"pinnedColumns.length > 0\">\n            <igx-grid-summary [gridID]=\"id\" *ngFor=\"let col of notGroups(pinnedColumns)\"  [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width'></igx-grid-summary>\n        </ng-container>\n        <ng-template igxGridFor let-col [igxGridForOf]=\"notGroups(unpinnedColumns)\" [igxForScrollOrientation]=\"'horizontal'\" [igxForScrollContainer]=\"parentVirtDir\" [igxForContainerSize]='unpinnedWidth' [igxForTrackBy]='trackColumnChanges' #summaryContainer>\n            <igx-grid-summary [gridID]=\"id\" [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width'></igx-grid-summary>\n        </ng-template>\n    </div> -->\n</div>\n\n<div class=\"igx-grid__scroll\" [style.height]=\"'18px'\" #scr [hidden]=\"unpinnedWidth - totalWidth >= 0\">\n    <div class=\"igx-grid__scroll-start\" [style.width.px]='pinnedWidth' [hidden]=\"pinnedWidth === 0\"></div>\n    <div class=\"igx-grid__scroll-main\" [style.width.px]='unpinnedWidth'>\n        <ng-template igxGridFor [igxGridForOf]='[]' #scrollContainer>\n        </ng-template>\n    </div>\n</div>\n\n<div class=\"igx-paginator igx-grid-paginator\" *ngIf=\"paging\" #paginator>\n    <ng-container *ngTemplateOutlet=\"paginationTemplate ? paginationTemplate : defaultPager; context: { $implicit: this }\">\n    </ng-container>\n</div>\n\n<ng-template #emptyFilteredGrid>\n    <span class=\"igx-grid__tbody-message\">{{emptyFilteredGridMessage}}</span>\n</ng-template>\n\n<ng-template #defaultEmptyGrid>\n    <span class=\"igx-grid__tbody-message\">{{emptyGridMessage}}</span>\n</ng-template>\n\n<div *ngIf=\"rowEditable\" igxToggle>\n    <div [className]=\"bannerClass\"> \n        <ng-container *ngTemplateOutlet=\"rowEditContainer; context: { rowChangesCount: rowChangesCount, endEdit: endEdit.bind(this) }\"></ng-container>\n    </div>\n</div>\n<ng-template #defaultRowEditTemplate >\n    <div class=\"igx-banner__message\">\n        <span class=\"igx-banner__text\">You have {{ rowChangesCount }} changes in this row</span>\n    </div>\n    <div class=\"igx-banner__actions\">\n        <div class=\"igx-banner__row\">\n            <button igxButton igxRowEditTabStop (click)=\"endEdit(false, $event)\">Cancel</button>\n            <button igxButton igxRowEditTabStop (click)=\"endEdit(true, $event)\">Done</button>\n        </div>\n    </div>\n</ng-template>\n\n<div class=\"igx-grid__outlet\" #igxFilteringOverlayOutlet igxOverlayOutlet></div>\n`,\n    providers: [ IgxGridNavigationService, { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxTreeGridComponent) }, IgxFilteringService]\n})\nexport class IgxTreeGridComponent extends IgxGridBaseComponent {\n    private _id = `igx-tree-grid-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        if (this._id !== value) {\n            const oldId = this._id;\n            this._id = value;\n            this._gridAPI.reset(oldId, this._id);\n        }\n    }\n\n    /**\n     * Get transactions service for the grid.\n     * @experimental @hidden\n     */\n    get transactions(): IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState> {\n        return this._transactions;\n    }\n\n    /**\n    * @hidden\n    */\n    public flatData: any[];\n\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public rootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public records: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRecords: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"employees\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public childDataKey;\n\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"employeeID\" [foreignKey]=\"parentID\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public foreignKey;\n\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"employeeID\" [foreignKey]=\"parentID\" cascadeOnDelete=\"false\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public cascadeOnDelete = true;\n\n    private _expansionDepth = Infinity;\n\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"employees\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionDepth(): number {\n        return this._expansionDepth;\n    }\n\n    public set expansionDepth(value: number) {\n        this._expansionDepth = value;\n        this.cdr.markForCheck();\n    }\n\n    private _expansionStates:  Map<any, boolean> = new Map<any, boolean>();\n\n    /**\n     * Returns a list of key-value pairs [row ID, expansion state]. Includes only states that differ from the default one.\n     * ```typescript\n     * const expansionStates = this.grid.expansionStates;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionStates() {\n        return this._expansionStates;\n    }\n\n    /**\n     * Sets a list of key-value pairs [row ID, expansion state].\n     * ```typescript\n     * const states = new Map<any, boolean>();\n     * states.set(1, true);\n     * this.grid.expansionStates = states;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public set expansionStates(value) {\n        this._expansionStates = this.cloneMap(value);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     * ```typescript\n     * rowToggle(event: IRowToggleEventArgs){\n     *  // the id of the row\n     *  const rowID = event.rowID;\n     *  // the new expansion state\n     *  const newExpandedState = event.expanded;\n     *  // the original event that triggered onRowToggle\n     *  const originalEvent = event.event;\n     *  // whether the event should be cancelled\n     *  event.cancel = true;\n     * }\n     * ```\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Output()\n    public onRowToggle = new EventEmitter<IRowToggleEventArgs>();\n\n    private _gridAPI: IgxTreeGridAPIService;\n\n    constructor(\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxGridNavigationService,\n        filteringService: IgxFilteringService) {\n            super(gridAPI, selection, _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                filteringService);\n        this._gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     * Returns if the `IgxTreeGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    get hasSummarizedColumns(): boolean {\n        return false;\n    }\n\n    private cloneMap(mapIn: Map<any, boolean>):  Map<any, boolean> {\n        const mapCloned: Map<any, boolean> = new Map<any, boolean>();\n\n        mapIn.forEach((value: boolean, key: any, mapObj: Map<any, boolean>) => {\n\n          mapCloned.set(key, value);\n        });\n\n        return mapCloned;\n    }\n\n    /**\n     * Expands the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be expanded.\n     * ```typescript\n     * this.grid.expandRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandRow(rowID: any) {\n        this._gridAPI.expand_row(this.id, rowID);\n    }\n\n    /**\n     * Collapses the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be collapsed.\n     * ```typescript\n     * this.grid.collapseRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseRow(rowID: any) {\n        this._gridAPI.collapse_row(this.id, rowID);\n    }\n\n    /**\n     * Toggles the expansion state of the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be toggled.\n     * ```typescript\n     * this.grid.toggleRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public toggleRow(rowID: any) {\n        this._gridAPI.toggle_row_expansion(this.id, rowID);\n    }\n\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandAll() {\n        this._expansionDepth = Infinity;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseAll() {\n        this._expansionDepth = 0;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    public addRow(data: any, parentRowID?: any) {\n        if (parentRowID) {\n            const parentRecord = this.records.get(parentRowID);\n\n            if (!parentRecord) {\n                throw Error('Invalid parent row ID!');\n            }\n\n            if (this.primaryKey && this.foreignKey) {\n                data[this.foreignKey] = parentRowID;\n                super.addRow(data);\n            } else {\n                const parentData = parentRecord.data;\n                const childKey = this.childDataKey;\n                if (this.transactions.enabled) {\n                    const rowId = this.primaryKey ? data[this.primaryKey] : data;\n                    this.transactions.add({\n                        id: rowId,\n                        parentId: parentRowID,\n                        newValue: data,\n                        type: TransactionType.ADD\n                    } as HierarchicalTransaction,\n                        null);\n                } else {\n                    if (!parentData[childKey]) {\n                        parentData[childKey] = [];\n                    }\n                    parentData[childKey].push(data);\n                }\n\n                this.onRowAdded.emit({ data });\n                this._pipeTrigger++;\n                this.cdr.markForCheck();\n\n                this.refreshSearch();\n            }\n        } else {\n            super.addRow(data);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public deleteRowById(rowId: any) {\n        if (this.transactions.enabled && this.cascadeOnDelete) {\n            this.transactions.startPending();\n        }\n\n        super.deleteRowById(rowId);\n\n        if (this.transactions.enabled && this.cascadeOnDelete) {\n            this.transactions.endPending(true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n         if (this.primaryKey && this.foreignKey) {\n            super.deleteRowFromData(rowID, index);\n\n            if (this.cascadeOnDelete) {\n                const treeRecord = this.records.get(rowID);\n                if (treeRecord && treeRecord.children && treeRecord.children.length > 0) {\n                    for (let i = 0; i < treeRecord.children.length; i++) {\n                        const child = treeRecord.children[i];\n                        super.deleteRowById(child.rowID);\n                    }\n                }\n            }\n       } else {\n            const record = this.records.get(rowID);\n            const childData = record.parent ? record.parent.data[this.childDataKey] : this.data;\n            index = this.primaryKey ? childData.map(c => c[this.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            if (this.transactions.enabled) {\n                this.transactions.add({\n                    id: rowID,\n                    type: TransactionType.DELETE,\n                    newValue: null,\n                    parentId: record.parent ? record.parent.rowID : undefined\n                },\n                this.data);\n            } else {\n                childData.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected calcMaxSummaryHeight() {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    protected restoreHighlight(): void {\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public clearSearch() {\n    }\n\n    /**\n    * @hidden\n    */\n   public getContext(rowData): any {\n        return {\n            $implicit: rowData,\n            templateID: 'dataRow'\n        };\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.flatData[rowIndex], value);\n    }\n}\n","import { Component, forwardRef, Input, ViewChildren, QueryList, HostBinding } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { State, TransactionType } from '../../services';\n\n@Component({\n    selector: 'igx-tree-grid-row',\n    template: `<ng-container *ngIf=\"rowSelectable\">\n    <div class=\"igx-grid__cbx-selection\">\n        <igx-checkbox [checked]=\"isSelected\" (change)=\"onCheckboxClick($event)\" disableRipple=\"true\" [aria-label]=\"rowCheckboxAriaLabel\"></igx-checkbox>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"pinnedColumns.length > 0\">\n    <ng-template ngFor let-col [ngForOf]=\"notGroups(pinnedColumns)\">\n        <ng-template #cellTemplate>\n            <igx-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\" #treeCell></igx-grid-cell>\n            </ng-template>\n        <ng-template #treeCellTemplate>\n            <igx-tree-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\" #treeCell></igx-tree-grid-cell>\n        </ng-template>\n        <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 ? treeCellTemplate : cellTemplate\"></ng-container>\n    </ng-template>\n</ng-container>\n<ng-template igxGridFor let-col [igxGridForOf]=\"notGroups(unpinnedColumns)\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]='grid.unpinnedWidth' [igxForTrackBy]='grid.trackColumnChanges' #igxDirRef>\n    <ng-template #cellTemplate>\n        <igx-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\" #treeCell></igx-grid-cell>\n    </ng-template>\n    <ng-template #treeCellTemplate>\n        <igx-tree-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\" #treeCell></igx-tree-grid-cell>\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 ? treeCellTemplate : cellTemplate\"></ng-container>\n</ng-template>\n`,\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]\n})\nexport class IgxTreeGridRowComponent extends IgxRowComponent<IgxTreeGridComponent> {\n    private _treeRow: ITreeGridRecord;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1);\n     * const cells = row.cells;\n     * ```\n     */\n    @ViewChildren('treeCell')\n    public cells: QueryList<any>;\n\n    /**\n     * The `ITreeGridRecord` passed to the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const treeRow = row.treeRow;\n     * ```\n     */\n    @Input()\n    public get treeRow(): ITreeGridRecord {\n        return this._treeRow;\n    }\n    public set treeRow(value: ITreeGridRecord) {\n        if (this._treeRow !== value) {\n            this._treeRow = value;\n            this.rowData = this._treeRow.data;\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const expanded = row.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this._treeRow.expanded;\n    }\n\n    /**\n     * Sets a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.expanded = true;\n     * ```\n     */\n    set expanded(value: boolean) {\n        (this.gridAPI as IgxTreeGridAPIService).trigger_row_expansion_toggle(this.gridID, this._treeRow, value);\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const classes = super.resolveClasses();\n        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';\n        return `${classes} ${filteredClass}`;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.hasDeletedParent(this.rowID) || super.isRowDeleted();\n    }\n\n    private hasDeletedParent(rowId: any): boolean {\n        if (this.grid.cascadeOnDelete) {\n            const node = this.grid.records.get(rowId);\n            for (const parentId of node.path) {\n                const state: State = this.grid.transactions.getState(parentId);\n                if (state && state.type === TransactionType.DELETE) {\n                    if (this.gridAPI.get_row_by_key(this.grid.id, parentId).deleted) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray, cloneHierarchicalArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ISortingExpression } from '../../../public_api';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseComponent } from '../grid';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridHierarchizing',\n    pure: true\n})\nexport class IgxTreeGridHierarchizingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.get(id);\n        let hierarchicalRecords: ITreeGridRecord[] = [];\n        const treeGridRecordsMap = new Map<any, ITreeGridRecord>();\n\n        if (primaryKey && foreignKey) {\n            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap);\n            grid.flatData = grid.data;\n        } else if (childDataKey) {\n            const flatData: any[] = [];\n            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined,\n                flatData, 0, treeGridRecordsMap);\n            grid.flatData = flatData;\n        }\n\n        grid.records = treeGridRecordsMap;\n        grid.rootRecords = hierarchicalRecords;\n        return hierarchicalRecords;\n    }\n\n    private getRowID(primaryKey: any, rowData: any) {\n        return primaryKey ? rowData[primaryKey] : rowData;\n    }\n\n    private hierarchizeFlatData(id: string, collection: any[], primaryKey: string, foreignKey: string, map: Map<any, ITreeGridRecord>):\n        ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n        const missingParentRecords: ITreeGridRecord[] = [];\n        collection.forEach(row => {\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, row),\n                data: row,\n                children: [],\n                path: []\n            };\n            const parent = map.get(row[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                if (parent) {\n                    record.path.push(...parent.path);\n                    record.path.push(parent.rowID);\n                }\n                parent.children.push(record);\n            } else {\n                missingParentRecords.push(record);\n            }\n\n            map.set(row[primaryKey], record);\n        });\n\n        missingParentRecords.forEach(record => {\n            const parent = map.get(record.data[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                result.push(record);\n            }\n        });\n\n        this.setIndentationLevels(id, result, 0);\n\n        return result;\n    }\n\n    private setIndentationLevels(id: string, collection: ITreeGridRecord[], indentationLevel: number) {\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            record.level = indentationLevel;\n            record.expanded = this.gridAPI.get_row_expansion_state(id, record.rowID, record.level);\n\n            if (record.children && record.children.length > 0) {\n                this.setIndentationLevels(id, record.children, indentationLevel + 1);\n            }\n        }\n    }\n\n    private hierarchizeRecursive(id: string, collection: any[], primaryKey: string, childDataKey: string,\n        parent: ITreeGridRecord, flatData: any[], indentationLevel: number, map: Map<any, ITreeGridRecord>): ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n\n        for (let i = 0; i < collection.length; i++) {\n            const item = collection[i];\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, item),\n                data: item,\n                parent: parent,\n                level: indentationLevel,\n                path: []\n            };\n            if (parent) {\n                record.path.push(...parent.path);\n                record.path.push(parent.rowID);\n            }\n            record.expanded = this.gridAPI.get_row_expansion_state(id, record.rowID, record.level);\n            flatData.push(item);\n            map.set(record.rowID, record);\n            record.children = item[childDataKey] ?\n                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :\n                undefined;\n            result.push(record);\n        }\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridFlattening',\n    pure: true\n})\nexport class IgxTreeGridFlatteningPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], id: string,\n        expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[] {\n\n        const grid: IgxTreeGridComponent = this.gridAPI.get(id);\n        const data: ITreeGridRecord[] = [];\n\n        grid.processedRootRecords = collection;\n        grid.processedRecords = new Map<any, ITreeGridRecord>();\n\n        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);\n\n        return data;\n    }\n\n    private getFlatDataRecursive(collection: ITreeGridRecord[], data: ITreeGridRecord[] = [],\n        expandedLevels: number, expandedStates: Map<any, boolean>, gridID: string,\n        parentExpanded: boolean) {\n        if (!collection || !collection.length) {\n            return;\n        }\n\n        for (let i = 0; i < collection.length; i++) {\n            const hierarchicalRecord = collection[i];\n\n            if (parentExpanded) {\n                data.push(hierarchicalRecord);\n            }\n\n            const grid: IgxTreeGridComponent = this.gridAPI.get(gridID);\n\n            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(gridID,\n                hierarchicalRecord.rowID, hierarchicalRecord.level);\n            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);\n\n            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);\n\n            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels,\n                expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);\n        }\n    }\n\n    private updateNonProcessedRecordExpansion(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.expanded = record.expanded;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSorting',\n    pure: true\n})\nexport class IgxTreeGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(\n        hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression | ISortingExpression[],\n        id: string,\n        pipeTrigger: number): ITreeGridRecord[] {\n        const state = { expressions: [] };\n        const grid = this.gridAPI.get(id);\n        state.expressions = grid.sortingExpressions;\n\n        let result: ITreeGridRecord[];\n        if (!state.expressions.length) {\n            result = hierarchicalData;\n        } else {\n            result = DataUtil.hierarchicalSort(hierarchicalData, state, undefined);\n        }\n\n        return result;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridPaging',\n    pure: true\n})\nexport class IgxTreeGridPagingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], page = 0, perPage = 15, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        if (!this.gridAPI.get(id).paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: ITreeGridRecord[] = DataUtil.page(cloneArray(collection), state);\n\n        this.gridAPI.get(id).pagingState = state;\n        return result;\n    }\n}\n/** @hidden */\n@Pipe({\n    name: 'treeGridTransaction',\n    pure: true\n})\nexport class IgxTreeGridTransactionPipe implements PipeTransform {\n\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    transform(collection: any[], id: string, pipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.get(id);\n        if (collection && grid.transactions.enabled) {\n            const primaryKey = grid.primaryKey;\n            if (!primaryKey) {\n                return collection;\n            }\n\n            const foreignKey = grid.foreignKey;\n            const childDataKey = grid.childDataKey;\n\n            if (foreignKey) {\n                return DataUtil.mergeTransactions(\n                    cloneArray(collection),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey);\n            } else if (childDataKey) {\n                return DataUtil.mergeHierarchicalTransactions(\n                    cloneHierarchicalArray(collection, childDataKey),\n                    grid.transactions.getAggregatedChanges(true),\n                    childDataKey,\n                    grid.primaryKey\n                );\n            }\n        }\n\n        return collection;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { valToPxlsUsingRange } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseComponent } from '../grid';\n\n@Component({\n    selector: 'igx-tree-grid-cell',\n    template: `<ng-template #defaultCell igxTextHighlight [cssClass]=\"highlightClass\" [activeCssClass]=\"activeHighlightClass\" [groupName]=\"gridID\"\n        [value]=\"formatter ? formatter(value) : value\" [row]=\"rowIndex\" [column]=\"this.column.visibleIndex\" [page]=\"this.grid.page\" [containerClass]=\"'igx-grid__td-text'\">\n    <ng-container *ngIf=\"column.dataType === 'boolean' || column.dataType === 'string' || formatter; else default\" >\n        <div class=\"igx-grid__td-text\">{{ formatter ? formatter(value) : value }}</div>\n    </ng-container>\n    <ng-template #default>\n        <div class=\"igx-grid__td-text\">{{ column.dataType === 'number' ? (value | igxdecimal) : (value | igxdate) }}</div>\n    </ng-template>\n</ng-template>\n<ng-template #inlineEditor  let-cell=\"cell\">\n    <ng-container *ngIf=\"column.dataType === 'string'\">\n        <igx-input-group>\n            <input igxInput [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'number'\">\n        <igx-input-group>\n            <input igxInput [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\"  type=\"number\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'boolean'\">\n        <igx-checkbox [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [checked]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [disableRipple]=\"true\"></igx-checkbox>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'date'\">\n        <igx-datePicker [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [labelVisibility]=\"false\"></igx-datePicker>\n    </ng-container>\n</ng-template>\n<ng-container *ngIf=\"!inEditMode\">\n    <ng-container *ngIf=\"indentation > 0\">\n        <div #indentationDiv class=\"igx-grid__tree-cell--padding-level-{{indentation}}\"></div>\n    </ng-container>\n    <div #indicator class=\"igx-grid__tree-grouping-indicator\" [ngStyle]=\"{'visibility': hasChildren ? 'visible' : 'hidden'}\"\n         (click)=\"toggle($event)\" (focus)=\"onIndicatorFocus($event)\" tabindex=\"-1\">\n        <igx-icon *ngIf=\"!expanded\" fontSet=\"material\">chevron_right</igx-icon>\n        <igx-icon *ngIf=\"expanded\" fontSet=\"material\">expand_more</igx-icon>\n    </div>\n</ng-container>\n<ng-container *ngTemplateOutlet=\"template; context: context\">\n</ng-container>\n`\n})\nexport class IgxTreeGridCellComponent extends IgxGridCellComponent {\n    private treeGridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n                selection: IgxSelectionAPIService,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                @Inject(DOCUMENT) public document) {\n        super(gridAPI, selection, cdr, element);\n        this.treeGridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    @ViewChild('indicator', { read: ElementRef })\n    public indicator: ElementRef;\n\n    @ViewChild('indentationDiv', { read: ElementRef })\n    public indentationDiv: ElementRef;\n\n    /**\n     * @hidden\n     */\n    protected resolveStyleClasses(): string {\n        return super.resolveStyleClasses() + ' igx-grid__td--tree-cell';\n    }\n\n    /**\n     * @hidden\n     */\n    public get indentation() {\n        return this.row.treeRow.level;\n    }\n\n    /**\n     * @hidden\n     */\n    public get hasChildren() {\n        return this.row.treeRow.children && this.row.treeRow.children.length > 0;\n    }\n\n    /**\n     * @hidden\n     */\n    get expanded(): boolean {\n        return this.row.expanded;\n    }\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        this.treeGridAPI.trigger_row_expansion_toggle(this.gridID, this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n    }\n\n    /**\n     * @hidden\n     */\n    public onIndicatorFocus(event: Event) {\n        this.gridAPI.submit_value(this.gridID);\n        this.onFocus(event);\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        const indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;\n        const indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);\n        const indicatorMargin = parseFloat(indicatorStyle.marginRight);\n        let leftPadding = 0;\n        if (this.indentationDiv) {\n            const indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);\n            leftPadding = parseFloat(indentationStyle.paddingLeft);\n        }\n        const largestWidth = Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => valToPxlsUsingRange(range, child)));\n        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringState } from '../../data-operations/filtering-state.interface';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent } from '../grid';\n\n/** @hidden */\nexport class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    public filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree): ITreeGridRecord[] {\n        return this.filterImpl(data, expressionsTree, undefined);\n    }\n\n    private filterImpl(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree, parent: ITreeGridRecord): ITreeGridRecord[] {\n        let i;\n        let rec: ITreeGridRecord;\n        const len = data.length;\n        const res: ITreeGridRecord[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = DataUtil.cloneTreeGridRecord(data[i]);\n            rec.parent = parent;\n            if (rec.children) {\n                const filteredChildren = this.filterImpl(rec.children, expressionsTree, rec);\n                rec.children = filteredChildren.length > 0 ? filteredChildren : null;\n            }\n\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            } else if (rec.children && rec.children.length > 0) {\n                rec.isFilteredOutParent = true;\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        const hierarchicalRecord = <ITreeGridRecord>rec;\n        return hierarchicalRecord.data[fieldName];\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridFiltering',\n    pure: true\n})\nexport class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.get(id);\n        const state = { expressionsTree: expressionsTree };\n\n        this.resetFilteredOutProperty(grid.records);\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            grid.filteredData = null;\n            return hierarchyData;\n        }\n\n        DataUtil.mergeDefaultProperties(state, { strategy: new TreeGridFilteringStrategy() });\n        const result = this.filter(hierarchyData, state);\n        const filteredData: any[] = [];\n        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);\n        grid.filteredData = filteredData;\n\n        return result;\n    }\n\n    private resetFilteredOutProperty(map: Map<any, ITreeGridRecord>) {\n        const keys = Array.from(map.keys());\n        for (let i = 0; i < keys.length; i++) {\n            map.get(keys[i]).isFilteredOutParent = undefined;\n        }\n    }\n\n    private expandAllRecursive(grid: IgxTreeGridComponent, data: ITreeGridRecord[],\n        expandedStates: Map<any, boolean>, filteredData: any[]) {\n        for (let i = 0; i < data.length; i++) {\n            const rec = data[i];\n            filteredData.push(rec.data);\n            this.updateNonProcessedRecord(grid, rec);\n\n            if (rec.children && rec.children.length > 0) {\n                expandedStates.set(rec.rowID, true);\n                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);\n            }\n        }\n    }\n\n    private updateNonProcessedRecord(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.isFilteredOutParent = record.isFilteredOutParent;\n    }\n\n    private filter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxTreeGridHierarchizingPipe } from './tree-grid.pipes';\nimport { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';\nimport { IgxTreeGridCellComponent } from './tree-cell.component';\nimport { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';\n\n@NgModule({\n  declarations: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxTreeGridHierarchizingPipe,\n    IgxTreeGridFlatteningPipe,\n    IgxTreeGridSortingPipe,\n    IgxTreeGridFilteringPipe,\n    IgxTreeGridPagingPipe,\n    IgxTreeGridTransactionPipe\n  ],\n  exports: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxGridCommonModule\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule\n  ]\n})\nexport class IgxTreeGridModule {\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\nexport interface IListChild {\n    index: number;\n}\n\nexport enum IgxListPanState { NONE, LEFT, RIGHT }\n\n@Directive({\n    selector: '[igxEmptyList]'\n})\nexport class IgxEmptyListTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxDataLoading]'\n})\nexport class IgxDataLoadingTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemLeftPanning]'\n})\nexport class IgxListItemLeftPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemRightPanning]'\n})\nexport class IgxListItemRightPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { DOCUMENT, ÉµgetDOM as getDOM } from '@angular/platform-browser';\n\nconst EVENT_SUFFIX = 'precise';\n\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n * @hidden\n */\n@Injectable()\nexport class HammerGesturesManager {\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions = {\n        // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)\n        // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803\n        inputClass: Hammer.TouchInput,\n        recognizers: [\n            [ Hammer.Pan, { threshold: 0 } ],\n            [ Hammer.Pinch, { enable: true } ],\n            [ Hammer.Rotate, { enable: true } ],\n            [ Hammer.Swipe, {\n                direction: Hammer.DIRECTION_HORIZONTAL\n            }]\n        ]\n    };\n\n    private _hammerManagers: Array<{ element: EventTarget, manager: HammerManager; }> = [];\n\n    constructor(private _zone: NgZone, @Inject(DOCUMENT) private doc: any) {\n    }\n\n    public supports(eventName: string): boolean {\n        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    public addEventListener(element: HTMLElement,\n                            eventName: string,\n                            eventHandler: (eventObj) => void,\n                            options: object = null): () => void {\n\n        // Creating the manager bind events, must be done outside of angular\n        return this._zone.runOutsideAngular(() => {\n            let mc: HammerManager = this.getManagerForElement(element);\n            if (mc === null) {\n                // new Hammer is a shortcut for Manager with defaults\n                mc = new Hammer(element, this.hammerOptions);\n                this.addManagerForElement(element, mc);\n            }\n            const handler = (eventObj) => { this._zone.run(() => { eventHandler(eventObj); }); };\n            mc.on(eventName, handler);\n            return () => { mc.off(eventName, handler); };\n        });\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    public addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj) => void): () => void {\n        const element = this.getGlobalEventTarget(target);\n\n        // Creating the manager bind events, must be done outside of angular\n        return this.addEventListener(element as HTMLElement, eventName, eventHandler);\n    }\n\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     * @param target Target name\n     */\n    public getGlobalEventTarget(target: string): EventTarget {\n        return getDOM().getGlobalEventTarget(this.doc, target);\n    }\n\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    public setManagerOption(element: EventTarget, event: string, options: any) {\n        const manager = this.getManagerForElement(element);\n        manager.get(event).set(options);\n    }\n\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public addManagerForElement(element: EventTarget, manager: HammerManager) {\n        this._hammerManagers.push({element, manager});\n    }\n\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public getManagerForElement(element: EventTarget): HammerManager {\n        const result =  this._hammerManagers.filter((value, index, array) => {\n            return value.element === element;\n        });\n        return result.length ? result[0].manager : null;\n    }\n\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public removeManagerForElement(element: HTMLElement) {\n        let index: number = null;\n        for (let i = 0; i < this._hammerManagers.length; i++) {\n            if (element === this._hammerManagers[i].element) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== null) {\n            const item = this._hammerManagers.splice(index, 1)[0];\n            // destroy also\n            item.manager.destroy();\n        }\n    }\n\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    public destroy() {\n        for (const item of this._hammerManagers) {\n            item.manager.destroy();\n        }\n        this._hammerManagers = [];\n    }\n}\n","\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    IgxListPanState,\n    IListChild\n} from './list.common';\n\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxListComponent } from './list.component';\n\n// ====================== ITEM ================================\n// The `<igx-item>` component is a container intended for row items in\n// a `<igx-list>` container.\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-list-item',\n    template: `   \n<div *ngIf=\"!isHeader && list.listItemLeftPanningTemplate != null\" #leftPanningTmpl class=\"igx-list__item-right\"\n    [style.width.px]=\"this.element.offsetWidth\" [style.height.px]=\"this.element.offsetHeight\">\n    <ng-container *ngTemplateOutlet=\"list.listItemLeftPanningTemplate.template; context: context\">\n    </ng-container>\n</div>\n\n<div *ngIf=\"!isHeader && list.listItemRightPanningTemplate != null\" #rightPanningTmpl class=\"igx-list__item-left\"\n    [style.width.px]=\"this.element.offsetWidth\" [style.height.px]=\"this.element.offsetHeight\">\n    <ng-container *ngTemplateOutlet=\"list.listItemRightPanningTemplate.template; context: context\">\n    </ng-container>\n</div>\n\n<ng-template #itemsContent>\n    <ng-content></ng-content>\n</ng-template>\n    \n<ng-container *ngIf=\"isHeader\">\n    <ng-container *ngTemplateOutlet=\"itemsContent\">\n    </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!isHeader\">\n    <div class=\"igx-list__item-content\">\n        <ng-container *ngTemplateOutlet=\"itemsContent\">\n        </ng-container>\n    </div>\n</ng-container>\n`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IgxListItemComponent implements IListChild {\n\n    /**\n     *@hidden\n     */\n    private _panState: IgxListPanState = IgxListPanState.NONE;\n\n    /**\n     *@hidden\n     */\n    private panOffset = 0;\n\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('leftPanningTmpl')\n    public leftPanningTemplateElement;\n\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('rightPanningTmpl')\n    public rightPanningTemplateElement;\n\n    constructor(\n        @Inject(forwardRef(() => IgxListComponent))\n        public list: IgxListComponent,\n        private elementRef: ElementRef,\n        private _renderer: Renderer2) {\n    }\n\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public hidden = false;\n\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return this.isHeader ? 'separator' : 'listitem';\n    }\n\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel: string;\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    public touchAction = 'pan-y';\n\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__header')\n    get headerStyle(): boolean {\n        return this.isHeader;\n    }\n\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__item-base')\n    get innerStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this.hidden ? 'none' : '';\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(evt) {\n        this.list.onItemClicked.emit({ item: this, event: evt });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panstart', ['$event'])\n    panStart(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panmove', ['$event'])\n    panMove(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n        const isPanningToLeft = ev.deltaX < 0;\n        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {\n            this.showLeftPanTemplate();\n            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));\n        } else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {\n            this.showRightPanTemplate();\n            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panend', ['$event'])\n    panEnd(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n\n        // the translation offset of the current list item content\n        const relativeOffset = this.panOffset;\n        const widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;\n\n        if (relativeOffset === 0) {\n            return; // no panning has occured\n        }\n\n        const oldPanState = this._panState;\n        if (Math.abs(relativeOffset) < widthTriggeringGrip) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n            this.hideLeftAndRightPanTemplates();\n            return;\n        }\n\n        const dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;\n        const args = { item: this, direction: dir, keepItem: false};\n\n        if (dir === IgxListPanState.LEFT) {\n            this.list.onLeftPan.emit(args);\n        } else {\n            this.list.onRightPan.emit(args);\n        }\n\n        if (args.keepItem === true) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n        } else {\n            if (dir === IgxListPanState.LEFT) {\n                this.setContentElementLeft(this.maxLeft);\n                this._panState = IgxListPanState.LEFT;\n            } else {\n                this.setContentElementLeft(this.maxRight);\n                this._panState = IgxListPanState.RIGHT;\n            }\n        }\n\n        if (oldPanState !== this._panState) {\n            const args2 = { oldState: oldPanState, newState: this._panState, item: this };\n            this.list.onPanStateChange.emit(args2);\n        }\n        this.hideLeftAndRightPanTemplates();\n    }\n\n    /**\n     *@hidden\n     */\n    private showLeftPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');\n    }\n\n    /**\n     *@hidden\n     */\n    private showRightPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');\n    }\n\n    /**\n     *@hidden\n     */\n    private hideLeftAndRightPanTemplates() {\n        setTimeout(() => {\n            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');\n        }, 500);\n    }\n\n    /**\n     *@hidden\n     */\n    private setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {\n        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {\n            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;\n        }\n        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {\n            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;\n        }\n    }\n\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get panState(): IgxListPanState {\n        return this._panState;\n    }\n\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get index(): number {\n        return this.list.children.toArray().indexOf(this);\n    }\n\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get contentElement() {\n        const candidates = this.element.getElementsByClassName('igx-list__item-content');\n        return (candidates && candidates.length > 0) ? candidates[0] : null;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get width() {\n        if (this.element) {\n            return this.element.offsetWidth;\n        }\n    }\n\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxLeft() {\n        return -this.width;\n    }\n\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxRight() {\n        return this.width;\n    }\n\n    /**\n     *@hidden\n     */\n    private setContentElementLeft(value: number) {\n        this.panOffset = value;\n        this.contentElement.style.transform = 'translateX(' + value + 'px)';\n    }\n\n    /**\n     *@hidden\n     */\n    private isTrue(value: boolean): boolean {\n        if (typeof (value) === 'boolean') {\n            return value;\n        } else {\n            return value === 'true';\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\n\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\nimport { IgxListItemComponent } from './list-item.component';\nimport {\n    IgxDataLoadingTemplateDirective,\n    IgxEmptyListTemplateDirective,\n    IgxListPanState,\n    IgxListItemLeftPanningTemplateDirective,\n    IgxListItemRightPanningTemplateDirective} from './list.common';\n\nlet NEXT_ID = 0;\nexport interface IPanStateChangeEventArgs {\n    oldState: IgxListPanState;\n    newState: IgxListPanState;\n    item: IgxListItemComponent;\n}\n\nexport interface IListItemClickEventArgs {\n    item: IgxListItemComponent;\n    event: Event;\n}\n\nexport interface IListItemPanningEventArgs {\n    item: IgxListItemComponent;\n    direction: IgxListPanState;\n    keepItem: boolean;\n}\n\n/**\n * **Ignite UI for Angular List** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)\n *\n * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering\n * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    selector: 'igx-list',\n    template: `<ng-content></ng-content>\n\n<ng-template #defaultEmptyList>\n    <article class=\"message\">\n        <p>There are no items in the list.</p>\n    </article>\n</ng-template>\n\n<ng-template #defaultDataLoading>\n    <article class=\"message\">\n        <p>Loading data from the server...</p>\n    </article>\n</ng-template>\n\n<ng-container *ngIf=\"!children || children.length === 0\">\n    <ng-container *ngTemplateOutlet=\"template; context: context\">\n    </ng-container>\n</ng-container>\n`\n})\nexport class IgxListComponent {\n\n    constructor(public element: ElementRef) {\n    }\n\n    /**\n     * Returns a collection of all items and headers in the list.\n     * ```typescript\n     * let listChildren: QueryList = this.list.children;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChildren(forwardRef(() => IgxListItemComponent))\n    public children: QueryList<IgxListItemComponent>;\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `false`.\n     * ```typescript\n     * let emptyTemplate = this.list.emptyListTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective })\n    public emptyListTemplate: IgxEmptyListTemplateDirective;\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `true`.\n     * ```typescript\n     * let loadingTemplate = this.list.dataLoadingTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective })\n    public dataLoadingTemplate: IgxDataLoadingTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when left panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective })\n    public listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when right panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective })\n    public listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    /**\n     * Provides a threshold after which the item's panning will be completed automatically.\n     * By default this property is set to 0.5 which is 50% of the list item's width.\n     * ```typescript\n     * this.list.panEndTriggeringThreshold = 0.8;\n     * ```\n     */\n    @Input()\n    public panEndTriggeringThreshold = 0.5;\n\n    /**@hidden*/\n    @ViewChild('defaultEmptyList', { read: TemplateRef })\n    protected defaultEmptyListTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ViewChild('defaultDataLoading', { read: TemplateRef })\n    protected defaultDataLoadingTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the `id` of the list.\n     * If not set, the `id` of the first list component will be `\"igx-list-0\"`.\n     * ```html\n     * <igx-list id = \"my-first-list\"></igx-list>\n     * ```\n     * ```typescript\n     * let listId =  this.list.id;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-list-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the left panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLeftPanningAllowed = this.list.allowLeftPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowLeftPanning = false;\n\n    /**\n     * Sets/gets whether the right panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowRightPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isRightPanningAllowed = this.list.allowRightPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowRightPanning = false;\n\n    /**\n     * Sets/gets whether the list is currently loading data.\n     * Set it to display the dataLoadingTemplate while data is being retrieved.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [isLoading]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLoading = this.list.isLoading;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public isLoading = false;\n\n    /**\n     * Emits an event within the current list when left pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\" (onLeftPan)=\"onLeftPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onLeftPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     * Emits an event within the current list when right pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\" (onRightPan)=\"onRightPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onRightPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n    * Emits an event within the current list when pan gesture is executed on list item.\n    * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.\n    * ```html\n    * <igx-list (onPanStateChange) = \"onPanStateChange($event)\"></igx-list>\n    * ```\n    * @memberof IgxListComponent\n    */\n    @Output()\n    public onPanStateChange = new EventEmitter<IPanStateChangeEventArgs>();\n\n    /**\n     * Emits an event within the current list when a list item has been clicked.\n     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.\n     *  ```html\n     * <igx-list (onItemClicked) = \"onItemClicked($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onItemClicked = new EventEmitter<IListItemClickEventArgs>();\n\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let listRole =  this.list.role;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'list';\n    }\n\n    /**\n     * Returns boolean indicating if the list is empty.\n     * ```typescript\n     * let isEmpty =  this.list.isListEmpty;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list-empty')\n    public get isListEmpty(): boolean {\n        return !this.children || this.children.length === 0;\n    }\n\n    /**\n     * Returns boolean indicating if the list has a `cssClass` attribute.\n     * ```typescript\n     * let hasCssClass =  this.list.cssClass;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list')\n    public get cssClass(): boolean {\n        return this.children && this.children.length > 0;\n    }\n\n    /**\n     * Returns the `items` in the list excluding the headers.\n     * ```typescript\n     * let listItems: IgxListItemComponent[] = this.list.items;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get items(): IgxListItemComponent[] {\n        const items: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Returns the headers in the list.\n     * ```typescript\n     * let listHeaders: IgxListItemComponent[] =  this.list.headers;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get headers(): IgxListItemComponent[] {\n        const headers: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list container`\n     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.\n     * ```typescript\n     * let listComponent =  this.list.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Returns the `template` of an empty list.\n     * ```typescript\n     * let listTemplate = this.list.template;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading) {\n            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;\n        } else {\n            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;\n        }\n    }\n}\n\n/**\n * The IgxListModule provides the {@link IgxListComponent} and the {@link IgxListItemComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxListComponent, IgxListItemComponent,\n        IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective],\n    exports: [IgxListComponent, IgxListItemComponent,\n        IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective],\n    imports: [CommonModule, IgxRippleModule]\n})\nexport class IgxListModule {\n}\n","import { Component, HostBinding, Inject,\n    forwardRef, ElementRef, Input, ChangeDetectorRef, OnInit } from '@angular/core';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\n\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-body',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxExpansionPanelBodyComponent implements OnInit {\n    private _labelledBy = '';\n    private _label = '';\n    constructor(@Inject(forwardRef(() => IgxExpansionPanelComponent))\n    public panel: IgxExpansionPanelComponent, public element: ElementRef,\n    public cdr: ChangeDetectorRef) {\n    }\n    @HostBinding('class.igx-expansion-panel__body')\n    public cssClass = `igx-expansion-panel__body`;\n    public _title = '';\n\n    @Input()\n    @HostBinding('attr.aria-label')\n    public get label(): string {\n        return this._label || this.panel.id + '-region';\n    }\n    public set label(val: string) {\n        this._label = val;\n    }\n\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public get labelledBy(): string {\n        return this._labelledBy;\n    }\n    public set labelledBy(val: string) {\n        this._labelledBy = val;\n    }\n\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'region';\n\n    ngOnInit() {\n        this.labelledBy = this.panel.headerId;\n        this.label = this.panel.id + '-region';\n    }\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ContentChild,\n    forwardRef,\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, useAnimation } from '@angular/animations';\nimport { growVerOut, growVerIn } from '../animations/main';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\n\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-expansion-panel',\n    template: `<ng-content select=\"igx-expansion-panel-header\"></ng-content>\n<ng-content *ngIf=\"!collapsed\" select=\"igx-expansion-panel-body\"></ng-content>\n`\n})\nexport class IgxExpansionPanelComponent {\n\n    @Input()\n    public animationSettings: { openAnimation: AnimationReferenceMetadata, closeAnimation: AnimationReferenceMetadata } = {\n        openAnimation: growVerIn,\n        closeAnimation: growVerOut\n    };\n\n    /**\n     * Sets/gets the `id` of the expansion panel component.\n     * If not set, `id` will have value `\"igx-expansion-panel-0\"`;\n     * ```html\n     * <igx-expansion-panel id = \"my-first-expansion-panel\"></igx-expansion-panel>\n     * ```\n     * ```typescript\n     * let panelId =  this.panel.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-expansion-panel-${NEXT_ID++}`;\n\n    @HostBinding('class.igx-expansion-panel')\n    public cssClass = 'igx-expansion-panel';\n\n    @Input()\n    public collapsed = true;\n\n    @Output()\n    public onCollapsed = new EventEmitter<any>();\n\n    @Output()\n    public onExpanded = new EventEmitter<any>();\n\n    public get headerId() {\n        return this.header ? `${this.id}-header` : '';\n    }\n    constructor(\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        private builder: AnimationBuilder) { }\n\n    @ContentChild(forwardRef(() => IgxExpansionPanelBodyComponent), { read: IgxExpansionPanelBodyComponent })\n    public body: IgxExpansionPanelBodyComponent;\n\n    @ContentChild(forwardRef(() => IgxExpansionPanelHeaderComponent), { read: IgxExpansionPanelHeaderComponent })\n    public header: IgxExpansionPanelHeaderComponent;\n\n\n    private playOpenAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.openAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n\n        openAnimationPlayer.onDone(() => {\n            cb();\n            openAnimationPlayer.reset();\n        });\n\n        openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.closeAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n        closeAnimationPlayer.onDone(() => {\n            cb();\n            closeAnimationPlayer.reset();\n        });\n\n        closeAnimationPlayer.play();\n    }\n\n    collapse(evt?: Event) {\n        this.playCloseAnimation(\n            () => {\n                this.onCollapsed.emit({ event: evt, panel: this });\n                this.collapsed = true;\n            }\n        );\n    }\n\n    expand(evt?: Event) {\n        this.collapsed = false;\n        this.cdr.detectChanges();\n        this.playOpenAnimation(\n            () => {\n                this.onExpanded.emit({ event: evt, panel: this });\n            }\n        );\n    }\n\n    toggle(evt?: Event) {\n        if (this.collapsed) {\n            this.expand(evt);\n        } else {\n            this.collapse(evt);\n        }\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-title'\n})\nexport class IgxExpansionPanelTitleDirective {\n    @HostBinding('class.igx-expansion-panel__header-title')\n    public cssClass = `igx-expansion-panel__header-title`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-description'\n})\nexport class IgxExpansionPanelDescriptionDirective {\n    @HostBinding('class.igx-expansion-panel__header-description')\n    public cssClass = `igx-expansion-panel__header-description`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-icon'\n})\nexport class IgxExpansionPanelIconDirective {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Renderer2,\n    Host,\n    EventEmitter,\n    Output,\n    ContentChild\n} from '@angular/core';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelIconDirective, IgxExpansionPanelTitleDirective } from './expansion-panel.directives';\n\nexport interface IExpansionPanelEventArgs {\n    event: Event;\n    panel: IgxExpansionPanelComponent;\n}\n\n/**\n * @hidden\n */\nexport enum ICON_POSITION {\n    LEFT = 'left',\n    NONE = 'none',\n    RIGHT = 'right'\n}\n\n\n@Component({\n    selector: 'igx-expansion-panel-header',\n    template: `<div class=\"igx-expansion-panel__header-inner\" tabindex=\"0\" role=\"button\" [attr.id]=\"id\"\n[attr.aria-disabled]=\"disabled\" [attr.aria-expanded]=\"isExpanded\" [attr.aria-controls]=\"controls\">\n    <div class=\"igx-expansion-panel__title-wrapper\">\n        <ng-content select=\"igx-expansion-panel-title\"></ng-content>\n        <ng-content select=\"igx-expansion-panel-description\"></ng-content>\n    </div>\n    <ng-content></ng-content>\n    <div [class]=\"iconPositionClass\">\n        <ng-content *ngIf=\"iconTemplate\" select=\"igx-expansion-panel-icon\"></ng-content>\n        <igx-icon *ngIf=\"!iconTemplate\" fontSet=\"material\">\n            {{panel.collapsed? 'expand_more':'expand_less'}}\n        </igx-icon>\n    </div>\n</div>\n`\n})\nexport class IgxExpansionPanelHeaderComponent {\n     // properties section\n    private _iconTemplate = false;\n    public id = '';\n\n    @ContentChild(IgxExpansionPanelIconDirective)\n    public set iconTemplate(val: any) {\n        this._iconTemplate = <boolean>val;\n    }\n\n    public get iconTemplate(): any {\n        return this._iconTemplate;\n    }\n\n    @HostBinding('attr.aria-level')\n    @Input()\n    public lv = '3';\n\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'heading';\n\n    public get controls (): string {\n        return this.panel.id;\n    }\n\n    @Input()\n    public iconPosition: ICON_POSITION = ICON_POSITION.LEFT;\n\n    @Output()\n    public onInteraction = new EventEmitter<IExpansionPanelEventArgs>();\n\n     @HostBinding('class.igx-expansion-panel__header')\n     public cssClass = 'igx-expansion-panel__header';\n\n\n     @HostBinding('class.igx-expansion-panel__header--expanded')\n     public get isExpanded () {\n            return !this.panel.collapsed;\n         }\n\n    @Input()\n    @HostBinding('class.igx-expansion-panel--disabled')\n    public disabled = false;\n\n    constructor(@Host() public panel: IgxExpansionPanelComponent, public cdr: ChangeDetectorRef,\n     public elementRef: ElementRef) {\n         this.id = `${this.panel.id}-header`;\n     }\n\n     @HostListener('keydown.Enter', ['$event'])\n     @HostListener('keydown.Space', ['$event'])\n     @HostListener('keydown.Spacebar', ['$event'])\n     @HostListener('click', ['$event'])\n     public onAction(evt?: Event) {\n         if (this.disabled) {\n            evt.stopPropagation();\n            return;\n         }\n         this.onInteraction.emit({ event: evt, panel: this.panel });\n         this.panel.toggle(evt);\n         evt.preventDefault();\n     }\n\n     public get iconPositionClass(): string {\n        switch (this.iconPosition) {\n            case (ICON_POSITION.LEFT):\n                return `igx-expansion-panel__header-icon--start`;\n            case (ICON_POSITION.RIGHT):\n                return `igx-expansion-panel__header-icon--end`;\n            case (ICON_POSITION.NONE):\n                return `igx-expansion-panel__header-icon--none`;\n            default:\n                return '';\n        }\n     }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective,\n  IgxExpansionPanelIconDirective } from './expansion-panel.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n  ],\n  entryComponents: [\n  ],\n  exports: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n      IgxExpansionPanelIconDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule\n  ]\n})\nexport class IgxExpansionPanelModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)\n *\n * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation\n * state such as a \"Go Back\" button. It also supports other actions represented by icons.\n *\n * Example:\n * ```html\n * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n *   <igx-icon>search</igx-icon>\n *   <igx-icon>favorite</igx-icon>\n *   <igx-icon>more_vert</igx-icon>\n * </igx-navbar>\n * ```\n */\n\n@Component({\n    selector: 'igx-navbar',\n    template: `<nav class=\"igx-navbar\" role=\"navigation\" [attr.aria-labelledby]=\"titleId\">\n    <div class=\"igx-navbar__left\">\n        <igx-icon (click)=\"_triggerAction()\" fontSet=\"material\" *ngIf=\"isActionButtonVisible\">{{actionButtonIcon}}</igx-icon>\n        <h1 class=\"igx-navbar__title\" [attr.id]=\"titleId\">{{ title }}</h1>\n    </div>\n    <div class=\"igx-navbar__right\">\n        <ng-content></ng-content>\n    </div>\n</nav>\n`\n})\n\nexport class IgxNavbarComponent {\n    private static NEXT_ID = 1;\n    private isVisible = true;\n\n    /**\n     *An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-navbar [id]=\"'igx-navbar-12'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-navbar-${NEXT_ID++}`;\n    /**\n     *Returns whether the `IgxNavbarComponent` action button is visible, true/false.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public navBar: IgxNavbarComponent;\n     *ngAfterViewInit(){\n     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;\n     *}\n     *```\n     */\n    @Input()\n    public get isActionButtonVisible(): boolean {\n        if (!this.actionButtonIcon) {\n            return false;\n        }\n        return this.isVisible;\n    }\n\n    /**\n     *Sets whether the action button of the `IgxNavbarComponent` is visible.\n     *```html\n     *<igx-navbar [title]=\"currentView\" [isActionButtonVisible]=\"'false'\"></igx-navbar>\n     *```\n     */\n    public set isActionButtonVisible(value: boolean) {\n        this.isVisible = value;\n    }\n    /**\n     *An @Input property that sets the icon of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar [title]=\"currentView\" actionButtonIcon=\"arrow_back\"></igx-navbar>\n     *```\n     */\n    @Input() public actionButtonIcon: string;\n\n    /**\n     *An @Input property that sets the title of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input() public title: string;\n\n    /**\n     *The event that will be thrown when the action is executed,\n     *provides reference to the `IgxNavbar` component as argument\n     *```typescript\n     *public actionExc(event){\n     *    alert(\"Action Execute!\");\n     *}\n     * //..\n     *```\n     *```html\n     *<igx-navbar (onAction)=\"actionExc($event)\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Output() public onAction = new EventEmitter<IgxNavbarComponent>();\n\n    /**\n     *An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.\n     *```html\n     *<igx-navbar [titleId]=\"'igx-navbar-7'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input()\n    public titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;\n\n    /**\n     *@hidden\n     */\n    public _triggerAction() {\n        this.onAction.emit(this);\n    }\n}\n    /**\n     *The IgxNavbarModule provides the {@link IgxNavbarComponent} inside your application.\n     */\n@NgModule({\n    declarations: [IgxNavbarComponent],\n    exports: [IgxNavbarComponent],\n    imports: [IgxButtonModule, IgxIconModule, CommonModule]\n})\nexport class IgxNavbarModule {\n}\n","import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDrawerItem]',\n    exportAs: 'igxDrawerItem'\n})\nexport class IgxNavDrawerItemDirective {\n\n    /**\n     * @hidden\n     */\n    @Input('active') public active = false;\n\n    /**\n     * @hidden\n     */\n    @Input('isHeader') public isHeader = false;\n\n    /**\n     * @hidden\n     */\n    public readonly activeClass = 'igx-nav-drawer__item--active';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item')\n    get defaultCSS(): boolean {\n        return !this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--active')\n    get currentCSS(): boolean {\n        return this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--header')\n    get headerCSS(): boolean {\n        return this.isHeader;\n    }\n}\n\n@Directive({\n    selector: '[igxDrawer]'\n})\nexport class IgxNavDrawerTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n\n@Directive({\n    selector: '[igxDrawerMini]'\n})\nexport class IgxNavDrawerMiniTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Renderer,\n    SimpleChange,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { fromEvent, interval, Subscription } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from './navigation-drawer.directives';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navigation Drawer** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navdrawer.html)\n *\n * The Ignite UI Navigation Drawer is a collapsible side navigation container commonly used in combination with the Navbar.\n *\n * Example:\n * ```html\n * <igx-nav-drawer id=\"navigation\" [isOpen]=\"true\">\n *   <ng-template igxDrawer>\n *     <nav>\n *       <span igxDrawerItem [isHeader]=\"true\">Email</span>\n *       <span igxDrawerItem igxRipple>Inbox</span>\n *       <span igxDrawerItem igxRipple>Deleted</span>\n *       <span igxDrawerItem igxRipple>Sent</span>\n *     </nav>\n *   </ng-template>\n * </igx-nav-drawer>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-nav-drawer',\n    template: `<ng-template #defaultItemsTemplate>\n    <div igxDrawerItem [isHeader]=\"true\">Navigation Drawer</div>\n    <div igxDrawerItem> Start by adding</div>\n    <div igxDrawerItem> <code>&lt;ng-template igxDrawer&gt;</code> </div>\n    <div igxDrawerItem> And some items inside </div>\n    <div igxDrawerItem> Style with igxDrawerItem </div>\n    <div igxDrawerItem> and igxRipple directives</div>\n</ng-template>\n\n<div [hidden]=\"pin\"\n    class=\"igx-nav-drawer__overlay\"\n    [class.igx-nav-drawer__overlay--hidden]=\"!isOpen\"\n    (click)=\"close()\" #overlay>\n</div>\n<aside role=\"navigation\"\n    class=\"igx-nav-drawer__aside\"\n    [class.igx-nav-drawer__aside--collapsed]=\"!miniTemplate && !isOpen\"\n    [class.igx-nav-drawer__aside--mini]=\"miniTemplate && !isOpen\"\n    [class.igx-nav-drawer__aside--normal]=\"!miniTemplate || isOpen\"\n    [class.igx-nav-drawer__aside--pinned]=\"pin\"\n    [class.igx-nav-drawer__aside--right]=\"position == 'right'\" #aside>\n\n    <ng-container *ngTemplateOutlet=\"template || defaultItemsTemplate\"></ng-container>\n</aside>\n<div class=\"igx-nav-drawer__style-dummy\" #dummy></div>\n`\n})\nexport class IgxNavigationDrawerComponent implements\n    IToggleView,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    OnChanges {\n\n    @HostBinding('class') public cssClass = 'igx-nav-drawer';\n\n    /**\n     * ID of the component\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerId = this.navdrawer.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     *  <igx-nav-drawer id='navdrawer'></igx-nav-drawer>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-nav-drawer-${NEXT_ID++}`;\n\n    /**\n     * Position of the Navigation Drawer. Can be \"left\"(default) or \"right\".\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerPosition = this.navdrawer.position;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [position]=\"'left'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public position = 'left';\n\n    /**\n     * Enables the use of touch gestures to manipulate the drawer:\n     * - swipe/pan from edge to open, swipe-toggle and pan-drag.\n     *\n     * ```typescript\n     * // get\n     * let gesturesEnabled = this.navdrawer.enableGestures;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [enableGestures]='true'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public enableGestures = true;\n\n    /**\n     * State of the drawer.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsOpen = this.navdrawer.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [isOpen]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public isOpen = false;\n\n    /**\n     * When pinned the drawer is relatively positioned instead of sitting above content.\n     * May require additional layout styling.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsPinned = this.navdrawer.pin;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pin]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pin = false;\n\n    /**\n     * Minimum device width required for automatic pin to be toggled.\n     * Default is 1024, can be set to a falsy value to disable this behavior.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerPinTreshold = this.navdrawer.pinThreshold;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pinTreshold]='1024'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pinThreshold = 1024;\n\n    /**\n     * Returns nativeElement of the component.\n     *\n     * @hidden\n     */\n    get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Width of the drawer in its open state. Defaults to \"280px\".\n     *\n     * ```typescript\n     * // get\n     * let navDrawerWidth = this.navdrawer.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [width]=\"'228px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public width = '280px';\n\n    /**\n     * Width of the drawer in its mini state. Defaults to 60px.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerMiniWidth = this.navdrawer.miniWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [miniWidth]=\"'34px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public miniWidth = '60px';\n\n    /**\n     * Pinned state change output for two-way binding.\n     *\n     * ```html\n     * <igx-nav-drawer [(pin)]='isPinned'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public pinChange = new EventEmitter<boolean>(true);\n    /**\n     * Event fired as the Navigation Drawer is about to open.\n     *\n     * ```html\n     *  <igx-nav-drawer (opening)='onOpening()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opening = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has opened.\n     *\n     * ```html\n     * <igx-nav-drawer (opened)='onOpened()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opened = new EventEmitter();\n    /**\n     * Event fired as the Navigation Drawer is about to close.\n     *\n     * ```html\n     * <igx-nav-drawer (closing)='onClosing()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closing = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has closed.\n     *\n     * ```html\n     * <igx-nav-drawer (closed)='onClosed()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closed = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    get template() {\n        if (this.miniTemplate && !this.isOpen) {\n            return this.miniTemplate.template;\n        } else if (this.contentTemplate) {\n            return this.contentTemplate.template;\n        }\n    }\n\n    private _miniTemplate: IgxNavDrawerMiniTemplateDirective;\n    /**\n     * @hidden\n     */\n    public get miniTemplate(): IgxNavDrawerMiniTemplateDirective {\n        return this._miniTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerMiniTemplateDirective, { read: IgxNavDrawerMiniTemplateDirective })\n    public set miniTemplate(v: IgxNavDrawerMiniTemplateDirective) {\n        if (!this.isOpen) {\n            this.setDrawerWidth(v ? this.miniWidth : '');\n        }\n        this._miniTemplate = v;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerTemplateDirective, { read: IgxNavDrawerTemplateDirective })\n    protected contentTemplate: IgxNavDrawerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flexBasis')\n    get flexWidth() {\n        if (!this.pin) {\n            return '0px';\n        }\n        if (this.isOpen) {\n            return this.width;\n        }\n        if (this.miniTemplate && this.miniWidth) {\n            return this.miniWidth;\n        }\n\n        return '0px';\n    }\n\n    /** @hidden */\n    @HostBinding('style.order')\n    get isPinnedRight() {\n        return this.pin && this.position === 'right' ?  '1' : '0';\n    }\n\n    private _gesturesAttached = false;\n    private _widthCache: { width: number, miniWidth: number, windowWidth: number } = { width: null, miniWidth: null, windowWidth: null };\n    private _resizeObserver: Subscription;\n    private css: { [name: string]: string; } = {\n        drawer: 'igx-nav-drawer__aside',\n        mini: 'igx-nav-drawer__aside--mini',\n        overlay: 'igx-nav-drawer__overlay',\n        styleDummy: 'igx-nav-drawer__style-dummy'\n    };\n\n    @ViewChild('aside') private _drawer: ElementRef;\n    @ViewChild('overlay') private _overlay: ElementRef;\n    @ViewChild('dummy') private _styleDummy: ElementRef;\n\n   /**\n     * @hidden\n     */\n    get drawer() {\n        return this._drawer.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get overlay() {\n        return this._overlay.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get styleDummy() {\n        return this._styleDummy.nativeElement;\n    }\n\n    /** Pan animation properties */\n    private _panning = false;\n    private _panStartWidth: number;\n    private _panLimit: number;\n\n    /**\n     * Property to decide whether to change width or translate the drawer from pan gesture.\n     *\n     * @hidden\n     */\n    public get hasAnimateWidth(): boolean {\n        return this.pin || !!this.miniTemplate;\n    }\n\n    private _maxEdgeZone = 50;\n    /**\n     * Used for touch gestures (swipe and pan).\n     * Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.\n     *\n     * @hidden\n     */\n    public get maxEdgeZone() {\n        return this._maxEdgeZone;\n    }\n\n    /**\n     * Gets the Drawer width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     *\n     * @hidden\n     */\n    public get expectedWidth() {\n        return this.getExpectedWidth(false);\n    }\n\n    /**\n     * Get the Drawer mini width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     */\n    public get expectedMiniWidth() {\n        return this.getExpectedWidth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchManager() {\n        return this._touchManager;\n    }\n\n    /**\n     * Exposes optional navigation service\n     *\n     * @hidden\n     */\n    public get state() {\n        return this._state;\n    }\n\n    constructor(\n        @Inject(ElementRef) private elementRef: ElementRef,\n        @Optional() private _state: IgxNavigationService,\n        // private animate: AnimationBuilder, TODO\n        protected renderer: Renderer,\n        private _touchManager: HammerGesturesManager) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        // DOM and @Input()-s initialized\n        if (this._state) {\n            this._state.add(this.id, this);\n        }\n        if (this.isOpen) {\n            this.setDrawerWidth(this.width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // wait for template and ng-content to be ready\n        this.updateEdgeZone();\n        this.checkPinThreshold();\n\n        this.ensureEvents();\n\n        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview\n        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._touchManager.destroy();\n        if (this._state) {\n            this._state.remove(this.id);\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted\n        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {\n            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === 'true');\n            this.ensureEvents();\n        }\n        if (changes.pin && changes.pin.currentValue !== undefined) {\n            this.pin = !!(this.pin && this.pin.toString() === 'true');\n            if (this.pin) {\n                this._touchManager.destroy();\n                this._gesturesAttached = false;\n            } else {\n                this.ensureEvents();\n            }\n        }\n\n        if (changes.pinThreshold) {\n            if (this.pinThreshold) {\n                this.ensureEvents();\n                this.checkPinThreshold();\n            }\n        }\n\n        if (changes.width && this.isOpen) {\n            this.setDrawerWidth(changes.width.currentValue);\n        }\n\n        if (changes.miniWidth) {\n            if (!this.isOpen) {\n                this.setDrawerWidth(changes.miniWidth.currentValue);\n            }\n            this.updateEdgeZone();\n        }\n    }\n\n    /**\n     * Toggle the open state of the Navigation Drawer.\n     *\n     * ```typescript\n     * this.navdrawer.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Open the Navigation Drawer. Has no effect if already opened.\n     *\n     * ```typescript\n     * this.navdrawer.open();\n     * ```\n     */\n    public open() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (this.isOpen) {\n            return;\n        }\n        this.opening.emit();\n        this.isOpen = true;\n\n        // TODO: Switch to animate API when available\n        // var animationCss = this.animate.css();\n        //     animationCss\n        //         .setStyles({'width':'50px'}, {'width':'400px'})\n        //         .start(this.elementRef.nativeElement)\n        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));\n\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.setDrawerWidth(this.width);\n    }\n\n    /**\n     * Close the Navigation Drawer. Has no effect if already closed.\n     *\n     * ```typescript\n     * this.navdrawer.close();\n     * ```\n     */\n    public close() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (!this.isOpen) {\n            return;\n        }\n        this.closing.emit();\n\n        this.isOpen = false;\n        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : '');\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleClosedEvent, false);\n    }\n\n    /**\n     * @hidden\n     */\n    protected set_maxEdgeZone(value: number) {\n        this._maxEdgeZone = value;\n    }\n\n    /**\n     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     * @param [mini] - Request mini width instead\n     */\n    protected getExpectedWidth(mini?: boolean): number {\n        if (mini) {\n            if (!this.miniTemplate) {\n                return 0;\n            }\n            if (this.miniWidth) {\n                return parseFloat(this.miniWidth);\n            } else {\n                // if (!this.isOpen) { // This WON'T work due to transition timings...\n                //     return this.elementRef.nativeElement.children[1].offsetWidth;\n                // } else {\n                if (this._widthCache.miniWidth === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, true);\n                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, false);\n                }\n                return this._widthCache.miniWidth;\n            }\n        } else {\n            if (this.width) {\n                return parseFloat(this.width);\n            } else {\n                if (this._widthCache.width === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this._widthCache.width = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                }\n                return this._widthCache.width;\n            }\n        }\n    }\n\n    private getWindowWidth() {\n        return (window.innerWidth > 0) ? window.innerWidth : screen.width;\n    }\n\n    /**\n     * Sets the drawer width.\n     */\n    private setDrawerWidth(width: string) {\n        window.requestAnimationFrame(() => {\n            if (this.drawer) {\n                this.renderer.setElementStyle(this.drawer, 'width', width);\n            }\n        });\n    }\n\n    /**\n     * Get current Drawer width.\n     */\n    private getDrawerWidth(): number {\n        return this.drawer.offsetWidth;\n    }\n\n    private ensureEvents() {\n        // set listeners for swipe/pan only if needed, but just once\n        if (this.enableGestures && !this.pin && !this._gesturesAttached) {\n            // Built-in manager handler(L20887) causes endless loop and max stack exception.\n            // https://github.com/angular/angular/issues/6993\n            // Use ours for now (until beta.10):\n            // this.renderer.listen(document, \"swipe\", this.swipe);\n            this._touchManager.addGlobalEventListener('document', 'swipe', this.swipe);\n            this._gesturesAttached = true;\n\n            // this.renderer.listen(document, \"panstart\", this.panstart);\n            // this.renderer.listen(document, \"pan\", this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panstart', this.panstart);\n            this._touchManager.addGlobalEventListener('document', 'panmove', this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panend', this.panEnd);\n        }\n        if (!this._resizeObserver) {\n            this._resizeObserver = fromEvent(window, 'resize').pipe(debounce(() => interval(150)))\n                .subscribe((value) => {\n                    this.checkPinThreshold(value);\n                });\n        }\n    }\n\n    private updateEdgeZone() {\n        let maxValue;\n\n        if (this.miniTemplate) {\n            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);\n            this.set_maxEdgeZone(maxValue);\n        }\n    }\n\n    private checkPinThreshold = (evt?: Event) => {\n        let windowWidth;\n        if (this.pinThreshold) {\n            windowWidth = this.getWindowWidth();\n            if (evt && this._widthCache.windowWidth === windowWidth) {\n                return;\n            }\n            this._widthCache.windowWidth = windowWidth;\n            if (!this.pin && windowWidth >= this.pinThreshold) {\n                this.pin = true;\n                this.pinChange.emit(true);\n            } else if (this.pin && windowWidth < this.pinThreshold) {\n                this.pin = false;\n                this.pinChange.emit(false);\n            }\n        }\n    }\n\n    private swipe = (evt: HammerInput) => {\n        // TODO: Could also force input type: http://stackoverflow.com/a/27108052\n        if (!this.enableGestures || evt.pointerType !== 'touch') {\n            return;\n        }\n\n        // HammerJS swipe is horizontal-only by default, don't check deltaY\n        let deltaX;\n        let startPosition;\n        if (this.position === 'right') {\n            // when on the right use inverse of deltaX\n            deltaX = -evt.deltaX;\n            startPosition = this.getWindowWidth() - (evt.center.x + evt.distance);\n        } else {\n            deltaX = evt.deltaX;\n            startPosition = evt.center.x - evt.distance;\n        }\n        // only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:\n        if ((this.isOpen && deltaX < 0) ||\n            // positive deltaX from the edge:\n            (deltaX > 0 && startPosition < this.maxEdgeZone)) {\n            this.toggle();\n        }\n    }\n\n    private panstart = (evt: HammerInput) => { // TODO: test code\n        if (!this.enableGestures || this.pin || evt.pointerType !== 'touch') {\n            return;\n        }\n        const startPosition = this.position === 'right' ? this.getWindowWidth() - (evt.center.x + evt.distance)\n            : evt.center.x - evt.distance;\n\n        // cache width during animation, flag to allow further handling\n        if (this.isOpen || (startPosition < this.maxEdgeZone)) {\n            this._panning = true;\n            this._panStartWidth = this.getExpectedWidth(!this.isOpen);\n            this._panLimit = this.getExpectedWidth(this.isOpen);\n\n            this.renderer.setElementClass(this.overlay, 'panning', true);\n            this.renderer.setElementClass(this.drawer, 'panning', true);\n        }\n    }\n\n    private pan = (evt: HammerInput) => {\n        // TODO: input.deltaX = prevDelta.x + (center.x - offset.x);\n        // get actual delta (not total session one) from event?\n        // pan WILL also fire after a full swipe, only resize on flag\n        if (!this._panning) {\n            return;\n        }\n        const right: boolean = this.position === 'right';\n        // when on the right use inverse of deltaX\n        const deltaX = right ? -evt.deltaX : evt.deltaX;\n        let visibleWidth;\n        let newX;\n        let percent;\n\n        visibleWidth = this._panStartWidth + deltaX;\n\n        if (this.isOpen && deltaX < 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth <= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panLimit) / (this._panStartWidth - this._panLimit);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panStartWidth;\n                newX = evt.deltaX;\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n\n        } else if (!this.isOpen && deltaX > 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth >= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panStartWidth) / (this._panLimit - this._panStartWidth);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panLimit;\n                newX = (this._panLimit - visibleWidth) * (right ? 1 : -1);\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n        }\n    }\n\n    private panEnd = (evt: HammerInput) => {\n        if (this._panning) {\n            const deltaX = this.position === 'right' ? -evt.deltaX : evt.deltaX;\n            const visibleWidth: number = this._panStartWidth + deltaX;\n            this.resetPan();\n\n            // check if pan brought the drawer to 50%\n            if (this.isOpen && visibleWidth <= this._panStartWidth / 2) {\n                this.close();\n            } else if (!this.isOpen && visibleWidth >= this._panLimit / 2) {\n                this.open();\n            }\n            this._panStartWidth = null;\n        }\n    }\n\n    private resetPan() {\n        this._panning = false;\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        this.renderer.setElementClass(this.overlay, 'panning', false);\n        this.renderer.setElementClass(this.drawer, 'panning', false);\n        this.setXSize(0, '');\n    }\n\n    /**\n     * Sets the absolute position or width in case the drawer doesn't change position.\n     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.\n     * @param opacity optional value to apply to the overlay\n     */\n    private setXSize(x: number, opacity?: string) {\n        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)\n        window.requestAnimationFrame(() => {\n            if (this.hasAnimateWidth) {\n                this.renderer.setElementStyle(this.drawer, 'width', x ? Math.abs(x) + 'px' : '');\n            } else {\n                this.renderer.setElementStyle(this.drawer, 'transform', x ? 'translate3d(' + x + 'px,0,0)' : '');\n                this.renderer.setElementStyle(this.drawer, '-webkit-transform',\n                    x ? 'translate3d(' + x + 'px,0,0)' : '');\n            }\n            if (opacity !== undefined) {\n                this.renderer.setElementStyle(this.overlay, 'opacity', opacity);\n            }\n        });\n    }\n\n    private toggleOpenedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.opened.emit();\n    }\n\n    private toggleClosedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleClosedEvent, false);\n        this.closed.emit();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxNavigationDrawerComponent } from './navigation-drawer.component';\nimport {\n    IgxNavDrawerItemDirective,\n    IgxNavDrawerMiniTemplateDirective,\n    IgxNavDrawerTemplateDirective\n} from './navigation-drawer.directives';\n\n@NgModule({\n    declarations: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    exports: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    imports: [CommonModule]\n})\nexport class IgxNavigationDrawerModule {}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxProcessBarText]'\n})\nexport class IgxProcessBarTextTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Renderer2,\n    ViewChild,\n    TemplateRef,\n    ContentChild\n} from '@angular/core';\nimport { IgxProcessBarTextTemplateDirective } from './progressbar.common';\n\nconst ONE_PERCENT = 0.01;\nconst MIN_VALUE = 0;\n\nexport enum IgxTextAlign {\n    START = 'start',\n    CENTER = 'center',\n    END = 'end'\n}\n\nexport interface IChangeProgressEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n\nexport abstract class BaseProgress {\n    /**\n     * @hidden\n     */\n    private requestAnimationId: number = undefined;\n\n    /**\n     * @hidden\n     */\n    protected _valueInPercent = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _max = 100;\n    /**\n     * @hidden\n     */\n    protected _value = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _animate = true;\n\n    /**\n     * @hidden\n     */\n    protected _step;\n\n    /**\n     *Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *public valuePercent(event){\n     *    let percentValue = this.progressBar.valueInPercent;\n     *    alert(percentValue);\n     *}\n     *```\n     */\n    public get valueInPercent(): number {\n        return this._valueInPercent;\n    }\n\n    /**\n     *Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *    public setValue(event){\n     *    this.progressBar.valueInPercent = 56;\n     *}\n     * //...\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"setValue()\">setValue</button>\n     *```\n     */\n    public set valueInPercent(value: number) {\n        this._valueInPercent = value;\n    }\n\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number) {\n        this.requestAnimationId = requestAnimationFrame(\n            () => this.updateProgressSmoothly.call(this, val, step));\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number) {\n        this._value += step;\n        const passedValue = convertInPercentage(val, this._max);\n        const progressValue = convertInPercentage(this._value, this._max);\n        if (this.valueInPercent === passedValue) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else if (this.isInLimitRange(progressValue, passedValue, step)) {\n                this.updateProgress(val);\n                cancelAnimationFrame(this.requestAnimationId);\n        } else {\n            this.valueInPercent = progressValue;\n            this.requestAnimationId = requestAnimationFrame(() => this.updateProgressSmoothly.call(this, val, step));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number, step: number): number {\n        if (currentValue < prevValue) {\n            return step;\n        }\n\n        return -step;\n    }\n\n    /**\n     * @hidden\n     */\n    private isInLimitRange(val: number, comparator: number, step: number) {\n        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);\n    }\n\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit(val: number, comparator: number, step: number) {\n        return val > comparator && step > 0;\n    }\n\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit(val: number, comparator: number, step: number) {\n        return val < comparator && step < 0;\n    }\n\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n}\nlet NEXT_LINEAR_ID = 0;\nlet NEXT_CIRCULAR_ID = 0;\n@Component({\n    selector: 'igx-linear-bar',\n    template: `<div class=\"progress-linear\" [class.progress-linear--striped]=\"striped\">\n    <div class=\"progress-linear__bar\" #linearBar role=\"progressbar\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"value\">\n        <div class=\"progress-linear__bar-base\"></div>\n        <div class=\"progress-linear__bar-progress{{type ? '--' + type : ''}}\" [style.width.%]=\"valueInPercent\"></div>\n    </div>\n    <span \n        class=\"progress-linear__value{{textAlign ? '--' + textAlign : ''}}\"\n        [class.progress-linear__value--top]=\"textTop\"\n        [class.progress-linear__value--hidden]=\"!textVisibility\">\n            {{text ? text : valueInPercent + '%'}}\n    </span>\n</div>\n`\n})\nexport class IgxLinearProgressBarComponent extends BaseProgress {\n\n    /**An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     *<igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-linear-bar-${NEXT_LINEAR_ID++}`;\n\n    /**\n     *Set the position that defines where the text is aligned.\n     Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     *```typescript\n     *public positionCenter: IgxTextAlign;\n     *public ngOnInit() {\n     *    this.positionCenter = IgxTextAlign.CENTER;\n     *}\n     * //...\n     *```\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textAlign: IgxTextAlign = IgxTextAlign.START;\n\n    /**\n     *Set the text to be visible. By default it is set to true.\n     * ```html\n     *<igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     *Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     *```html\n     *<igx-linear-bar type=\"danger\" [textTop]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textTop = false;\n\n    /**\n     *Set a custom text that is displayed according to the defined position.\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public text: string;\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     *```html\n     *<igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public striped = false;\n\n    /**\n     *Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `danger`.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"danger\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public type = 'default';\n\n    /**\n     *Animation on progress `IgxLinearProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-linear-bar [animate]=\"false\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxLinearProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     *```\n     */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    set value(val) {\n        val = Number(val);\n        if (this._value === val) {\n            return;\n        }\n\n        const valueInRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInRange)) {\n            return;\n        }\n        const changedValues = {\n            currentValue: valueInRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this._animate && val >= this.step) {\n            super.runAnimation(valueInRange, updateValue);\n        } else {\n            super.updateProgressDirectly(valueInRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-linear-bar (onProgressChanged)=\"progressChange($event)\" type=\"success\">\n     *```\n     */\n    @Output() public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    constructor() {\n        super();\n    }\n}\n\n@Component({\n    selector: 'igx-circular-bar',\n    template: `<svg #svg class=\"progress-circular\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"\n    viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\" role=\"progressbar\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"value\">\n    <circle class=\"progress-circular__innercircle\" cx=\"50\" cy=\"50\" r=\"46\" />\n    <circle #circle class=\"progress-circular__circle\" cx=\"50\" cy=\"50\" r=\"46\" />\n    <text #text [class.progress-circular__text--hidden]=\"!textVisibility\" id=\"myTimer\" text-anchor=\"middle\" x=\"50\" y=\"60\">\n            <ng-container *ngTemplateOutlet=\"textTemplate ? textTemplate.template : defaultTextTemplate; context: context\">\n            </ng-container>\n    </text>\n\n    <ng-template #defaultTextTemplate>\n        <tspan class=\"progress-circular__text\"> {{textContent ? textContent: valueInPercent + '%'}}</tspan>\n    </ng-template>\n</svg>`\n})\nexport class IgxCircularProgressBarComponent extends BaseProgress {\n\n    private readonly STROKE_OPACITY_DVIDER = 100;\n    private readonly STROKE_OPACITY_ADDITION = .2;\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     *```\n     */\n    @Output()\n    public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-circular-bar-${NEXT_CIRCULAR_ID++}`;\n\n    /**\n     *Sets the text visibility. By default it is set to true.\n     *```html\n     *<igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     *```html\n     *<igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     *```\n     *```typescript\n     *let text = this.circularBar.text;\n     *```\n     */\n    @Input()\n    public text: string;\n\n    @ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective })\n    public textTemplate: IgxProcessBarTextTemplateDirective;\n\n    /**\n     * @hidden\n    */\n    public get context(): any {\n        return {\n            $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max}\n        };\n    }\n\n    /**\n    *Animation on progress `IgxCircularProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-circular-bar [animate]=\"false\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxCircularProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     *```html\n     *<igx-circular-bar [max]=\"245\" [animate]=\"false\" [value]=\"currentValue\"></igx-circular-bar>\n     *```\n     */\n    get max(): number {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-circular-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     *```\n    */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```html\n     *<igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    set value(val: number) {\n        val = Number(val);\n        if (this._value === val) {\n            return;\n        }\n\n        const valueInProperRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInProperRange)) {\n            return;\n        }\n\n        const changedValues = {\n            currentValue: valueInProperRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this.animate && val >= this.step) {\n            super.runAnimation(valueInProperRange, updateValue);\n        } else {\n            this.updateProgressDirectly(valueInProperRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    private _circleRadius = 46;\n    private _circumference = 2 * Math.PI * this._circleRadius;\n\n    @ViewChild('circle') private _svgCircle: ElementRef;\n\n    constructor(private renderer: Renderer2) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressSmoothly(val: number, step: number) {\n        // Set frames for the animation\n        const FRAMES = [{\n            strokeDashoffset: this.getProgress(this._value),\n            strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }, {\n            strokeDashoffset: this.getProgress(this.valueInPercent),\n            strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }];\n        this._svgCircle.nativeElement.animate(FRAMES, {\n            easing: 'ease-out',\n            fill: 'forwards'\n        });\n\n        super.updateProgressSmoothly(val, step);\n    }\n\n    /**\n     * @hidden\n    */\n    public get textContent(): string {\n        return this.text;\n    }\n\n    /**\n     * @hidden\n    */\n    public updateProgressDirectly(val: number) {\n        super.updateProgressDirectly(val);\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-dashoffset',\n            this.getProgress(this.valueInPercent));\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-opacity',\n            (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);\n    }\n\n    private getProgress(percentage: number) {\n        return this._circumference - (percentage * this._circumference / 100);\n    }\n}\n\nexport function getValueInProperRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n}\n\nexport function convertInPercentage(value: number, max: number) {\n    return Math.floor(100 * value / max);\n}\n\n/**\n * The IgxProgressBarModule provides the {@link IgxLinearProgressBarComponent},\n * {@link IgxCircularProgressBarComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    exports: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    imports: [CommonModule]\n})\nexport class IgxProgressBarModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, Component, ElementRef, EventEmitter,\n    forwardRef, HostBinding, Input, NgModule, OnInit, Output, Renderer2,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SliderType {\n    /**\n     * Slider with single thumb.\n     */\n    SLIDER,\n    /**\n     *  Range slider with multiple thumbs, that can mark the range.\n     */\n    RANGE\n}\n\nenum SliderHandle {\n    FROM,\n    TO\n}\n\nexport interface IRangeSliderValue {\n    lower: number;\n    upper: number;\n}\n\nexport interface ISliderValueChangeEventArgs {\n    oldValue: number | IRangeSliderValue;\n    value: number | IRangeSliderValue;\n}\n\nconst noop = () => {\n};\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [isContinuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],\n    selector: 'igx-slider',\n    template: `<div class=\"igx-slider\" [class.igx-slider--disabled]=\"disabled\" #slider (panstart)=\"showThumbsLabels()\" (panend)=\"onPanEnd($event)\"\n    (pan)=\"update($event)\" (tap)=\"onTap($event)\">\n    <div class=\"igx-slider__track\">\n        <div #track class=\"igx-slider__track-fill\"></div>\n        <div #ticks class=\"igx-slider__track-ticks\"></div>\n    </div>\n    <div class=\"igx-slider__thumbs\">\n        <div (keydown)=\"onKeyDown($event);\" (keyup)=\"hideThumbsLabels()\" (blur)=\"hideThumbLabelsOnBlur()\" (focus)=\"onFocus($event);\"\n            *ngIf=\"isRange\" class=\"igx-slider__thumb-from\" tabindex=\"1\" [ngClass]=\"{ 'igx-slider__thumb-from--active': isActiveLabel }\"\n            #thumbFrom>\n            <span class=\"label\">{{ lowerValue}}</span>\n            <span class=\"dot\"></span>\n        </div>\n        <div (keydown)=\"onKeyDown($event);\" (keyup)=\"hideThumbsLabels()\" (blur)=\"hideThumbLabelsOnBlur()\" (focus)=\"onFocus($event);\"\n            class=\"igx-slider__thumb-to\" tabindex=\"1\" [ngClass]=\"{ 'igx-slider__thumb-to--active': isActiveLabel }\" #thumbTo>\n            <span *ngIf=\"isRange\" class=\"label\">{{ upperValue}}</span>\n            <span *ngIf=\"!isRange\" class=\"label\">{{ value }}</span>\n            <span class=\"dot\"></span>\n        </div>\n    </div>\n</div>\n`\n})\nexport class IgxSliderComponent implements ControlValueAccessor, EditorProvider, OnInit, AfterViewInit {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-slider-${NEXT_ID++}`;\n    /**\n     *An @Input property that disables or enables UI interaction.\n     *```html\n     *<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     *```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     * An @Input property that marks the `IgxSliderComponent` as continuous.\n     * By default is considered that the `IgxSliderComponent` is discrete.\n     * Discrete `IgxSliderComponent` does not have ticks and does not shows bubble labels for values.\n     * ```html\n     * <igx-slider #slider [isContinuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public isContinuous = false;\n\n    /**\n     * An @Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * sliderType: SliderType = SliderType.RANGE;\n     * //...\n     * ```\n     * ```html\n     * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public type: SliderType = SliderType.SLIDER;\n\n    /**\n     *An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     *```html\n     *<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     *```\n     */\n    @Input()\n    public thumbLabelVisibilityDuration = 750;\n\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public step = 1;\n\n    /**\n     * This event is emitted when user has stopped interacting the thumb and value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<ISliderValueChangeEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public isActiveLabel = false;\n\n    private activeHandle: SliderHandle = SliderHandle.TO;\n\n    @ViewChild('slider')\n    private slider: ElementRef;\n\n    @ViewChild('track')\n    private track: ElementRef;\n\n    @ViewChild('ticks')\n    private ticks: ElementRef;\n\n    @ViewChild('thumbFrom')\n    private thumbFrom: ElementRef;\n\n    @ViewChild('thumbTo')\n    private thumbTo: ElementRef;\n\n    private _minValue = 0;\n\n    // Measures & Coordinates\n    private width = 0;\n    private xOffset = 0;\n    private xPointer = 0;\n    private pPointer = 0;\n\n    // Limit handle travel zone\n    private pMin = 0;\n    private pMax = 1;\n\n    // From/upperValue in percent values\n    private hasViewInit = false;\n    private timer;\n    private _maxValue = 100;\n    private _lowerBound?: number;\n    private _upperBound?: number;\n    private _lowerValue: number;\n    private _upperValue: number;\n    private _trackUpperBound: boolean;\n    private _trackLowerBound: boolean;\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    constructor(private renderer: Renderer2) {\n    }\n\n    /**\n     *Returns whether the `IgxSliderComponent` type is RANGE.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderRange = this.slider.isRange;\n     *}\n     * ```\n     */\n    public get isRange(): boolean {\n        const isRange: boolean = this.type === SliderType.RANGE;\n\n        return isRange;\n    }\n\n\n    /**\n     * Returns the maximum value for the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMax = this.slider.maxValue;\n     *}\n     * ```\n     */\n    public get maxValue(): number {\n        return this._maxValue;\n    }\n\n    /**\n     * Sets the maximal value for the `IgxSliderComponent`.\n     * The default maximum value is 100.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set maxValue(value: number) {\n        if (value <= this._minValue) {\n            this._maxValue = this._minValue + 1;\n        } else {\n            this._maxValue = value;\n        }\n\n        if (this._trackUpperBound) {\n            this._upperBound = this._maxValue;\n        }\n        this.invalidateValue();\n    }\n\n    /**\n     *Returns the minimal value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMin = this.slider.minValue;\n     *}\n     *```\n     */\n    public get minValue(): number {\n        return this._minValue;\n    }\n\n    /**\n     * Sets the minimal value for the `IgxSliderComponent`.\n     * The default minimal value is 0.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public set minValue(value: number) {\n        if (value >= this.maxValue) {\n            this._minValue = this.maxValue - 1;\n        } else {\n            this._minValue = value;\n        }\n\n        if (this._trackLowerBound) {\n            this._lowerBound = this._minValue;\n        }\n        this.invalidateValue();\n    }\n\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderLowBound = this.slider.lowerBound;\n     *}\n     *```\n     */\n    public get lowerBound(): number {\n        return this._lowerBound;\n    }\n\n    /**\n     * Sets the lower boundary of the `IgxSliderComponent`.\n     * If not set is the same as min value.\n     * ```html\n     * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set lowerBound(value: number) {\n        if (this._trackLowerBound) {\n            this._trackLowerBound = false;\n        }\n\n        if (value >= this.upperBound) {\n            this._lowerBound = this.minValue;\n            return;\n        }\n\n        this._lowerBound = value;\n    }\n\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     *}\n     * ```\n     */\n    public get upperBound(): number {\n        return this._upperBound;\n    }\n\n    /**\n     * Sets the upper boundary of the `IgxSliderComponent`.\n     * If not set is the same as max value.\n     * ```html\n     * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set upperBound(value: number) {\n        if (this._trackUpperBound) {\n            this._trackUpperBound = false;\n        }\n\n        if (value <= this.lowerBound) {\n            this._upperBound = this.maxValue;\n\n            return;\n        }\n\n        this._upperBound = value;\n    }\n\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     *}\n     *```\n     */\n    public get lowerValue(): number {\n        return this._lowerValue;\n    }\n\n    /**\n     *Sets the lower value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public lowValue(event){\n     *    this.slider.lowerValue = 120;\n     *}\n     *```\n     */\n    public set lowerValue(value: number) {\n        if (value < this.lowerBound || this.upperBound < value) {\n            return;\n        }\n\n        if (this.isRange && value > this.upperValue) {\n            return;\n        }\n\n        this._lowerValue = value;\n    }\n\n    /**\n     *Returns the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    let upperValue = this.slider.upperValue;\n     *}\n     *```\n     */\n    public get upperValue() {\n        return this._upperValue;\n    }\n\n    /**\n     *Sets the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    this.slider.upperValue = 120;\n     *}\n     *```\n     */\n    public set upperValue(value: number) {\n        if (value < this.lowerBound || this.upperBound < value) {\n            return;\n        }\n\n        if (this.isRange && value < this.lowerValue) {\n            return;\n        }\n\n        this._upperValue = value;\n    }\n\n    /**\n     * Returns the slider value. If the slider is of type SLIDER the returned value is number.\n     * If the slider type is RANGE the returned value is object containing lower and upper properties for the values.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public sliderValue(event){\n     *    let sliderVal = this.slider.value;\n     *}\n     *```\n     */\n    public get value(): number | IRangeSliderValue {\n        if (this.isRange) {\n            return {\n                lower: this.snapValueToStep(this.lowerValue),\n                upper: this.snapValueToStep(this.upperValue)\n            };\n        } else {\n            const val = this.snapValueToStep(this.upperValue);\n            return val;\n        }\n    }\n\n    /**\n     * Sets the slider value.\n     * If the slider is of type SLIDER the argument is number. By default if no value is set the default value is\n     * same as lower upper bound.\n     * If the slider type is RANGE the the argument is object containing lower and upper properties for the values.\n     * By default if no value is set the default value is for lower value it is the same as lower bound and if no\n     * value is set for the upper value it is the same as the upper bound.\n     * ```typescript\n     *rangeValue = {\n     *   lower: 30,\n     *   upper: 60\n     *};\n     * ```\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set value(value: number | IRangeSliderValue) {\n        if (!this.isRange) {\n            this.upperValue = this.snapValueToStep(value as number);\n        } else {\n            this.upperValue =\n                this.snapValueToStep((value as IRangeSliderValue) == null ? null : (value as IRangeSliderValue).upper);\n            this.lowerValue =\n                this.snapValueToStep((value as IRangeSliderValue) == null ? null : (value as IRangeSliderValue).lower);\n        }\n\n        this._onChangeCallback(this.value);\n\n        if (this.hasViewInit) {\n            this.positionHandlesAndUpdateTrack();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.lowerBound === undefined) {\n            this.lowerBound = this.minValue;\n            this._trackLowerBound = true;\n        }\n\n        if (this.upperBound === undefined) {\n            this.upperBound = this.maxValue;\n            this._trackUpperBound = true;\n        }\n\n        if (this.isRange) {\n            if (Number.isNaN((this.value as IRangeSliderValue).lower)) {\n                this.value = {\n                    lower: this.lowerBound,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            }\n\n            if (Number.isNaN((this.value as IRangeSliderValue).upper)) {\n                this.value = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: this.upperBound\n                };\n            }\n        } else {\n            if (Number.isNaN(this.value as number)) {\n                this.value = this.lowerBound;\n            }\n        }\n\n        this.pMin = this.valueToFraction(this.lowerBound) || 0;\n        this.pMax = this.valueToFraction(this.upperBound) || 1;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.hasViewInit = true;\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval();\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: any): void {\n        this.value = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden */\n    getEditElement() {\n        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public showThumbsLabels() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.isContinuous) {\n            return;\n        }\n\n        if (this.timer !== null) {\n            clearInterval(this.timer);\n        }\n\n        this.isActiveLabel = true;\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public onFocus($event: FocusEvent) {\n        if (this.isRange && $event.target === this.thumbFrom.nativeElement) {\n            this.activeHandle = SliderHandle.FROM;\n        }\n\n        if ($event.target === this.thumbTo.nativeElement) {\n            this.activeHandle = SliderHandle.TO;\n        }\n\n        this.toggleThumbLabel();\n    }\n    /**\n     *\n     * @hidden\n     */\n    public onPanEnd($event) {\n        this.hideThumbsLabels();\n        this.emitValueChanged(null);\n    }\n    /**\n     *\n     * @hidden\n     */\n    public hideThumbLabelsOnBlur() {\n        if (this.timer !== null) {\n            clearInterval(this.timer);\n        }\n\n        this.isActiveLabel = false;\n    }\n    /**\n     *\n     * @hidden\n     */\n    public onKeyDown($event: KeyboardEvent) {\n        if (this.disabled) {\n            return true;\n        }\n\n        let incrementSign;\n\n        if ($event.key.endsWith('Left')) {\n            incrementSign = -1;\n        } else if ($event.key.endsWith('Right')) {\n            incrementSign = 1;\n        } else {\n            return;\n        }\n\n        const value = this.value;\n\n        if (this.isRange) {\n            if (this.activeHandle === SliderHandle.FROM) {\n                const newLower = (this.value as IRangeSliderValue).lower + incrementSign * this.step;\n\n                if (newLower >= (this.value as IRangeSliderValue).upper) {\n                    this.thumbTo.nativeElement.focus();\n                    return;\n                }\n\n                this.value = {\n                    lower: newLower,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            } else {\n                const newUpper = (this.value as IRangeSliderValue).upper + incrementSign * this.step;\n\n                if (newUpper <= (this.value as IRangeSliderValue).lower) {\n                    this.thumbFrom.nativeElement.focus();\n                    return;\n                }\n\n                this.value = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: (this.value as IRangeSliderValue).upper + incrementSign * this.step\n                };\n            }\n        } else {\n            this.value = this.value as number + incrementSign * this.step;\n        }\n\n        if (this.hasValueChanged(value)) {\n            this.emitValueChanged(value);\n        }\n\n        this.showThumbsLabels();\n    }\n    /**\n     *\n     * @hidden\n     */\n    public onTap($event) {\n        const value = this.value;\n        this.update($event);\n\n        if (this.hasValueChanged(value)) {\n            this.emitValueChanged(value);\n        }\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public update($event) {\n        if (this.disabled) {\n            return;\n        }\n\n        if ($event.type === 'tap') {\n            this.toggleThumbLabel();\n        }\n\n        // Set width and offset first\n        this.setSliderWidth();\n        this.setSliderOffset();\n\n        // Then get pointer coordinates\n        this.setPointerPosition($event);\n        this.setPointerPercent();\n\n        // Find the closest handle if dual slider\n        if (this.isRange) {\n            this.closestHandle();\n        }\n\n        // Update To/From Values\n        this.setValues();\n        // this.printInfo();\n\n        // Finally do positionHandlesAndUpdateTrack the DOM\n        // based on data values\n        this.positionHandlesAndUpdateTrack();\n        this._onTouchedCallback();\n    }\n\n    /**\n     * @hidden\n     */\n    public hideThumbsLabels() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.isContinuous) {\n            return;\n        }\n\n        this.timer = setTimeout(\n            () => this.isActiveLabel = false,\n            this.thumbLabelVisibilityDuration\n        );\n    }\n\n    private invalidateValue() {\n        if (!this.isRange) {\n            if (this.value >= this._lowerBound && this.value <= this._upperBound) {\n                this.positionHandlesAndUpdateTrack();\n            } else if (this.value < this._lowerBound) {\n                this.value = this._lowerBound;\n            } else if (this.value > this._upperBound) {\n                this.value = this._upperBound;\n            }\n        } else {\n            const value = this.value as IRangeSliderValue;\n\n            if (value.lower >= this._lowerBound && value.lower <= this._upperBound) {\n                this.positionHandlesAndUpdateTrack();\n            } else if (value.lower < this._lowerBound) {\n                this.value = {\n                    lower: this._lowerBound,\n                    upper: value.upper\n                };\n            } else if (value.lower > this._upperBound) {\n                this.value = {\n                    lower: value.lower,\n                    upper: this._upperBound\n                };\n            }\n\n            if (value.upper >= this._lowerBound && value.upper <= this._upperBound) {\n                this.positionHandlesAndUpdateTrack();\n            } else if (value.upper < this._lowerBound) {\n                this.value = {\n                    lower: this._lowerBound,\n                    upper: value.upper\n                };\n            } else if (value.upper > this._upperBound) {\n                this.value = {\n                    lower: value.lower,\n                    upper: this._upperBound\n                };\n            }\n        }\n    }\n\n    private generateTickMarks(color: string, interval: number) {\n        return `repeating-linear-gradient(\n            ${'to left'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        ), repeating-linear-gradient(\n            ${'to right'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        )`;\n    }\n\n    private toggleThumbLabel() {\n        this.showThumbsLabels();\n        this.hideThumbsLabels();\n    }\n\n    private getSliderOffset(): number {\n        return this.xOffset;\n    }\n\n    private toFixed(num: number): number {\n        num = parseFloat(num.toFixed(20));\n        return num;\n    }\n\n    private positionHandle(handle: ElementRef, position: number) {\n        handle.nativeElement.style.left = `${this.valueToFraction(position) * 100}%`;\n    }\n\n    private positionHandlesAndUpdateTrack() {\n        if (!this.isRange) {\n            this.positionHandle(this.thumbTo, this.value as number);\n        } else {\n            this.positionHandle(this.thumbTo, (this.value as IRangeSliderValue).upper);\n            this.positionHandle(this.thumbFrom, (this.value as IRangeSliderValue).lower);\n        }\n\n        this.updateTrack();\n    }\n\n    private closestHandle() {\n        const fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;\n        const toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;\n        const match = this.closestTo(this.xPointer, [fromOffset, toOffset]);\n\n        if (match === toOffset) {\n            this.thumbTo.nativeElement.focus();\n        } else if (match === fromOffset) {\n            this.thumbFrom.nativeElement.focus();\n        }\n    }\n\n    private setTickInterval() {\n        if (this.isContinuous) {\n            return;\n        }\n\n        const interval = this.step > 1 ? this.step : null;\n        this.renderer.setStyle(this.ticks.nativeElement, 'background', this.generateTickMarks('white', interval));\n    }\n\n    private snapValueToStep(value: number): number {\n        const valueModStep = (value - this.minValue) % this.step;\n        let snapValue = value - valueModStep;\n\n        if (Math.abs(valueModStep) * 2 >= this.step) {\n            snapValue += (valueModStep > 0) ? this.step : (-this.step);\n        }\n\n        return parseFloat(snapValue.toFixed(20));\n    }\n\n    private closestTo(goal: number, positions: number[]): number {\n        return positions.reduce((previous, current) => {\n            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);\n        });\n    }\n\n    // Set Values for To/From based on active handle\n    private setValues() {\n        if (this.activeHandle === SliderHandle.TO) {\n            if (this.isRange) {\n                this.value = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: this.fractionToValue(this.pPointer)\n                };\n            } else {\n                this.value = this.fractionToValue(this.pPointer);\n            }\n        }\n\n        if (this.activeHandle === SliderHandle.FROM) {\n            this.value = {\n                lower: this.fractionToValue(this.pPointer),\n                upper: (this.value as IRangeSliderValue).upper\n            };\n        }\n    }\n\n    private setSliderWidth(): void {\n        this.width = this.slider.nativeElement.offsetWidth;\n    }\n\n    private setPointerPosition(e) {\n        this.xPointer = e.center.x - this.getSliderOffset();\n    }\n\n    private setSliderOffset() {\n        const rect = this.slider.nativeElement.getBoundingClientRect();\n        this.xOffset = rect.left;\n    }\n\n    private setPointerPercent() {\n        this.pPointer = this.limit(this.toFixed(this.xPointer / this.width));\n    }\n\n    private valueToFraction(value: number) {\n        return this.limit((value - this.minValue) / (this.maxValue - this.minValue));\n    }\n\n    private fractionToValue(fraction: number): number {\n        const max: number = this.maxValue;\n        const min: number = this.minValue;\n\n        return (max - min) * fraction + min;\n    }\n\n    private fractionToPercent(fraction: number): number {\n        return this.toFixed(fraction * 100);\n    }\n\n    private limit(num: number): number {\n        return Math.max(this.pMin, Math.min(num, this.pMax));\n    }\n\n    private updateTrack() {\n        const fromPosition = this.valueToFraction(this.lowerValue);\n        const toPosition = this.valueToFraction(this.upperValue);\n        const positionGap = (this.valueToFraction(this.upperValue) - this.valueToFraction(this.lowerValue));\n\n        if (!this.isRange) {\n            this.track.nativeElement.style.transform = `scaleX(${toPosition})`;\n        }\n\n        if (this.isRange) {\n            this.track.nativeElement.style.transform = `scaleX(${1})`;\n            this.track.nativeElement.style.left = `${fromPosition * 100}%`;\n            this.track.nativeElement.style.width = `${positionGap * 100}%`;\n        }\n    }\n    private hasValueChanged(oldValue) {\n        const isSliderWithDifferentValue: boolean = !this.isRange && oldValue !== this.value;\n        const isRangeWithOneDifferentValue: boolean = this.isRange &&\n            ((oldValue as IRangeSliderValue).lower !== (this.value as IRangeSliderValue).lower ||\n                (oldValue as IRangeSliderValue).upper !== (this.value as IRangeSliderValue).upper);\n\n        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;\n    }\n\n    private emitValueChanged(oldValue: number | IRangeSliderValue) {\n        this.onValueChange.emit({ oldValue, value: this.value });\n    }\n}\n\n   /**\n    *The IgxSliderModule provides the {@link IgxSliderComponent} inside your application.\n    */\n\n@NgModule({\n    declarations: [IgxSliderComponent],\n    exports: [IgxSliderComponent],\n    imports: [CommonModule]\n})\nexport class IgxSliderModule {\n}\n","import {\n    animate,\n    AnimationEvent,\n    state,\n    style,\n    transition,\n    trigger,\n    useAnimation\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    NgZone,\n    Output\n} from '@angular/core';\nimport { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Snackbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n *\n * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\n * include a link to an action such as Undo.\n *\n * Example:\n * ```html\n * <button (click)=\"snackbar.show()\">Send message</button>\n * <div>\n *   <igx-snackbar #snackbar message=\"Message sent\">\n *   </igx-snackbar>\n * </div>\n * ```\n */\n@Component({\n    animations: [\n        trigger('slideInOut', [\n            transition('void => *', [\n                useAnimation(slideInBottom, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n                        fromPosition: 'translateY(100%)',\n                        toPosition: 'translateY(0)'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(slideOutBottom, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',\n                        fromPosition: 'translateY(0)',\n                        toOpacity: 1,\n                        toPosition: 'translateY(100%)'\n                    }\n                })\n            ])\n        ]),\n        trigger('fadeInOut', [\n            transition('void => *', [\n                useAnimation(fadeIn, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'ease-out'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(fadeOut, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'ease-out'\n                    }\n                })\n            ])\n        ])\n    ],\n    selector: 'igx-snackbar',\n    template: `<div class=\"igx-snackbar\" *ngIf=\"isVisible\" (@slideInOut.start)=\"snackbarAnimationStarted($event)\" (@slideInOut.done)=\"snackbarAnimationDone($event)\"\n    [@slideInOut]=\"isVisible\">\n    <span class=\"igx-snackbar__message\" [@fadeInOut]=\"isVisible\">{{ message }}</span>\n    <button class=\"igx-snackbar__button\" igxRipple=\"white\" *ngIf=\"actionText\" [@fadeInOut] (click)=\"triggerAction()\">\n        {{ actionText }}\n    </button>\n</div>\n`\n})\nexport class IgxSnackbarComponent {\n\n    /**\n     * Sets/gets the `id` of the snackbar.\n     * If not set, the `id` of the first snackbar component  will be `\"igx-snackbar-0\"`;\n     * ```html\n     * <igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let snackbarId = this.snackbar.id;\n     * ```\n     * @memberof IgxSnackbarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-snackbar-${NEXT_ID++}`;\n    /**\n     * Sets/gets the `message` attribute.\n     * ```html\n     * <igx-snackbar [message] = \"'Snackbar Component'\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let message =  this.snackbar.message;\n     * ```\n     */\n    @Input() public message: string;\n\n    /**\n     * Enables/Disables the visibility of the snackbar.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-snackbar [isVisible] = \"true\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let isVisible =  this.snackbar.isVisible;\n     * ```\n     */\n    @Input() public isVisible = false;\n\n    /**\n     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-snackbar [autoHide] = \"false\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let autoHide =  this.snackbar.autoHide;\n     * ```\n     */\n    @Input() public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.\n     * Default value is 4000.\n     * ```html\n     * <igx-snackbar [displayTime] = \"2000\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let displayTime = this.snackbar.displayTime;\n     * ```\n     */\n    @Input() public displayTime = 4000;\n\n    /**\n     * Sets/gets the `actionText` attribute.\n     * ```html\n     * <igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n     * ```\n     */\n    @Input() public actionText?: string;\n\n    /**\n     * An event that will be emitted when the action is executed.\n     * Provides reference to the `IgxSnackbarComponent` as an argument.\n     * ```html\n     * <igx-snackbar (onAction) = \"onAction($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxSnackbarComponent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation starts.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationStarted = new EventEmitter<AnimationEvent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation ends.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationDone = new EventEmitter<AnimationEvent>();\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.\n     * ```typescript\n     * this.snackbar.show();\n     * ```\n     */\n    public show(): void {\n        clearTimeout(this.timeoutId);\n        setTimeout(this.timeoutId);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the snackbar.\n     * ```typescript\n     * this.snackbar.hide();\n     * ```\n     */\n    public hide(): void {\n        this.isVisible = false;\n        clearTimeout(this.timeoutId);\n    }\n    /**\n     *@hidden\n     */\n    public triggerAction(): void {\n        this.onAction.emit(this);\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationStarted(evt: AnimationEvent): void {\n        if (evt.fromState === 'void') {\n            this.animationStarted.emit(evt);\n        }\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationDone(evt: AnimationEvent): void {\n        if (evt.fromState === 'show') {\n            this.animationDone.emit(evt);\n        }\n    }\n}\n/**\n *The IgxSnackbarModule provides the {@link IgxSnackbarComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxSnackbarComponent],\n    exports: [IgxSnackbarComponent],\n    imports: [CommonModule]\n})\nexport class IgxSnackbarModule { }\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SwitchLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeSwitchEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Switch** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/switch.html)\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * Example:\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],\n    selector: 'igx-switch',\n    template: `<input #checkbox class=\"igx-switch__input\" type=\"checkbox\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [tabindex]=\"tabindex\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-labelledby]=\"ariaLabelledBy\"\n    [attr.aria-label]=\"ariaLabel\"\n    (change)=\"_onSwitchChange($event)\"\n    (click)=\"_onSwitchClick($event)\"\n    (focus)=\"onFocus($event)\"\n    (blur)=\"onBlur($event)\" />\n\n<label #label class =\"igx-switch__composite\" [for]=\"inputId\"\n    igxRipple\n    igxRippleTarget=\".igx-switch__ripple\"\n    [igxRippleDisabled]=\"disableRipple\"\n    [igxRippleCentered]=\"true\"\n    [igxRippleDuration]=\"300\">\n    <div class=\"igx-switch__composite-thumb\">\n        <div class=\"igx-switch__ripple\"></div>\n    </div>\n</label>\n\n<span #placeholderLabel role=\"label\"\n    [class]=\"labelClass\"\n    [id]=\"labelId\"\n    (click)=\"_onLabelClick($event)\">\n    <ng-content></ng-content>\n</span>\n`\n})\nexport class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox') public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.switch.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     * ```typescript\n     * let switchId =  this.switch.id;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-switch-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelId =  this.switch.labelId;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     * ```html\n     * <igx-switch [value] = \"switchValue\"></igx-switch>\n     * ```\n     * ```typescript\n     * let value =  this.switch.value;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     * ```html\n     * <igx-switch name = \"Switch1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let name =  this.switch.name;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.switch.tabindex;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.switch.labelPosition;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelPosition: SwitchLabelPosition | string = 'after';\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.switch.disableRipple;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRequired = this.switch.required;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.switch.ariaLabelledBy;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.switch.ariaLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     * @memberof IgxSwitchComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeSwitchEventArgs> = new EventEmitter<IChangeSwitchEventArgs>();\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * Returns the class of the switch component.\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch')\n    public cssClass = 'igx-switch';\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     * ```html\n     *  <igx-switch [checked] = \"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isChecked =  this.switch.checked;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-switch [disabled] = \"true\"><igx-switch>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.switch.disabled;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.switch.focused;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * Toggles the checked state of the switch.\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.focused = false;\n        this.change.emit({ checked: this.checked, switch: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchClick(event) {\n        event.stopPropagation();\n        this.toggle();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case SwitchLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case SwitchLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\nexport const IGX_SWITCH_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxSwitchRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]`,\n    providers: [IGX_SWITCH_REQUIRED_VALIDATOR]\n})\nexport class IgxSwitchRequiredDirective extends CheckboxRequiredValidator { }\n/**\n * The IgxSwitchModule provides the {@link IgxSwitchComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxSwitchModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { DeprecateClass } from '../core/deprecateDecorators';\nimport { IgxIconModule } from '../icon/index';\n\nexport interface ISelectTabEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar.html)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\n@Component({\n    selector: 'igx-bottom-nav',\n    template: `<div>\n    <ng-content></ng-content>\n</div>\n<div #tablist class=\"{{itemStyle}}__menu {{itemStyle}}__menu--bottom\" role=\"tablist\" aria-orientation=\"horizontal\">\n    <igx-tab *ngFor=\"let panel of panels\" [id]=\"'igx-tab-' + panel.index\" [attr.aria-label]=\"panel.label\" [attr.aria-disabled]=\"panel.disabled\"\n        [attr.aria-selected]=\"panel.isSelected\" [attr.aria-controls]=\"'igx-tab-panel-'+ panel.index\" [ngClass]=\"{\n                 'igx-bottom-nav__menu-item': !panel.isSelected && !panel.disabled,\n                 'igx-bottom-nav__menu-item--selected': panel.isSelected,\n                 'igx-bottom-nav__menu-item--disabled': panel.disabled\n             }\" [relatedPanel]=\"panel\" (click)=\"panel.select()\" role=\"tab\">\n    </igx-tab>\n</div>\n`\n})\nexport class IgxBottomNavComponent implements AfterViewInit {\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ViewChildren(forwardRef(() => IgxTabComponent)) public tabs: QueryList<IgxTabComponent>;\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabPanelComponent)) public panels: QueryList<IgxTabPanelComponent>;\n\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-bottom-nav-${NEXT_ID++}`;\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabSelected = new EventEmitter<ISelectTabEventArgs>();\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabDeselected = new EventEmitter<ISelectTabEventArgs>();\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public selectedIndex = -1;\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-bottom-nav';\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        // initial selection\n        setTimeout(() => {\n            if (this.selectedIndex === -1) {\n                const selectablePanels = this.panels.filter((p) => !p.disabled);\n                const panel = selectablePanels[0];\n\n                if (panel) {\n                    panel.select();\n                }\n            }\n        }, 0);\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('onTabSelected', ['$event'])\n    public _selectedPanelHandler(args) {\n        this.selectedIndex = args.panel.index;\n\n        this.panels.forEach((p) => {\n            if (p.index !== this.selectedIndex) {\n                this._deselectPanel(p);\n            }\n        });\n    }\n    /**\n     *@hidden\n     */\n    private _deselectPanel(panel: IgxTabPanelComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (panel.disabled || this.selectedTab.index === panel.index) {\n            return;\n        }\n\n        panel.isSelected = false;\n        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });\n    }\n}\n\n// ================================= IgxTabPanelComponent ======================================\n\n@Component({\n    selector: 'igx-tab-panel',\n    template: `<ng-content></ng-content>\n`\n})\n\nexport class IgxTabPanelComponent implements AfterContentInit, AfterViewChecked {\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-tab-panel';\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public label: string;\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public icon: string;\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public disabled: boolean;\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('attr.role') public role = 'tabpanel';\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel')\n    get styleClass(): boolean {\n        return (!this.isSelected);\n    }\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanelIsSelected;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel--selected')\n    public isSelected = false;\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray()[this.index];\n        }\n    }\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get index() {\n        if (this._tabBar.panels) {\n            return this._tabBar.panels.toArray().indexOf(this);\n        }\n    }\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n    /**\n     *@hidden\n     */\n    private _tabTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })\n    protected tabTemplate: IgxTabTemplateDirective;\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-bottom-nav__panel-${this.index}`);\n    }\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public select() {\n        if (this.disabled || this._tabBar.selectedIndex === this.index) {\n            return;\n        }\n\n        this.isSelected = true;\n        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });\n    }\n}\n\n// ======================================= IgxTabComponent ==========================================\n\n@Component({\n    selector: 'igx-tab',\n    template: `<ng-template #defaultTabTemplate>\n    <div *ngIf=\"relatedPanel.icon\" class=\"tab-icon\">\n        <igx-icon fontSet=\"material\">{{relatedPanel.icon}}</igx-icon>\n        <igx-badge [value]=\"changesCount\" [hidden]=\"changesCount === 0\"></igx-badge>\n    </div>\n    <div *ngIf=\"relatedPanel.label\" ngClass=\"tab-label\">{{relatedPanel.label}}</div>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"relatedPanel.customTabTemplate ? relatedPanel.customTabTemplate : defaultTabTemplate; context: { $implicit: relatedPanel }\">\n</ng-container>`\n})\n\nexport class IgxTabComponent {\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @HostBinding('attr.role') public role = 'tab';\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input() public relatedPanel: IgxTabPanelComponent;\n    /**\n     *@hidden\n     */\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get disabled(): boolean {\n        const panel = this.relatedPanel;\n\n        if (panel) {\n            return panel.disabled;\n        }\n    }\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get isSelected(): boolean {\n        const panel = this.relatedPanel;\n\n        if (panel) {\n            return panel.isSelected;\n        }\n    }\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get index(): number {\n        return this._tabBar.tabs.toArray().indexOf(this);\n    }\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public select() {\n        this.relatedPanel.select();\n    }\n}\n/**\n * The IgxBottomNavModule provides the {@link IgxBottomNavComponent},\n * the {@link IgxTabPanelComponent} and the {@link IgxTabComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule]\n})\nexport class IgxBottomNavModule {\n}\n","import {\n    Component,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input\n} from '@angular/core';\n\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxTabsComponent } from './tabs.component';\n\n@Component({\n    selector: 'igx-tab-item',\n    template: `<ng-template #defaultTabTemplate>\n    <div *ngIf=\"relatedGroup.icon\" class=\"igx-tabs__header-menu-item-icon\">\n        <igx-icon fontSet=\"material\">{{relatedGroup.icon}}</igx-icon>\n        <igx-badge [value]=\"changesCount\" [hidden]=\"changesCount === 0\"></igx-badge>\n    </div>\n    <div *ngIf=\"relatedGroup.label\" ngClass=\"igx-tabs__item-label\">{{relatedGroup.label}}</div>\n\n</ng-template>\n<ng-container *ngTemplateOutlet=\"relatedGroup.customTabTemplate ? relatedGroup.customTabTemplate : defaultTabTemplate; context: { $implicit: relatedGroup }\">\n</ng-container>`\n})\n\nexport class IgxTabItemComponent {\n    private _nativeTabItem;\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n\n    /**\n     * Gets the group associated with the tab.\n     * ```html\n     * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;\n     * ```\n     */\n    @Input()\n    public relatedGroup: IgxTabsGroupComponent;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex;\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        this.select();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            this._tabs.selectedIndicator.nativeElement.style.width = `${this.nativeTabItem.nativeElement.offsetWidth}px`;\n            this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${this.nativeTabItem.nativeElement.offsetLeft}px)`;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        this._onKeyDown(false);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        this._onKeyDown(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        this._onKeyDown(false, 0);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        this._onKeyDown(false, this._tabs.tabs.toArray().length - 1);\n    }\n\n    private _onKeyDown(isLeftArrow: boolean, index = null): void {\n        const tabsArray = this._tabs.tabs.toArray();\n        if (index === null) {\n            index = (isLeftArrow)\n                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1\n                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;\n        }\n        const tab = tabsArray[index];\n        const viewPortWidth = this._tabs.viewPort.nativeElement.offsetWidth;\n        const nativeTabElement = tab.nativeTabItem.nativeElement;\n        const focusDelay = (nativeTabElement.offsetWidth + nativeTabElement.offsetLeft - this._tabs.offset > viewPortWidth) ? 200 : 50;\n        tab.select(focusDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    /**\n     * @hidden\n     */\n    get nativeTabItem() {\n        return this._nativeTabItem;\n    }\n\n    /**\n     * \tGets whether the tab is disabled.\n     * ```\n     * const disabledItem = this.myTabComponent.tabs.first.disabled;\n     * ```\n     */\n    get disabled(): boolean {\n        const group = this.relatedGroup;\n\n        if (group) {\n            return group.disabled;\n        }\n    }\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * const selectedItem = this.myTabComponent.tabs.first.isSelected;\n     * ```\n     */\n    get isSelected(): boolean {\n        const group = this.relatedGroup;\n\n        if (group) {\n            return group.isSelected;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get index(): number {\n        return this._tabs.tabs.toArray().indexOf(this);\n    }\n\n    constructor(@Inject(forwardRef(() => IgxTabsComponent)) private _tabs: IgxTabsComponent, private _element: ElementRef) {\n        this._nativeTabItem = _element;\n    }\n\n    /**\n     * @hidden\n     */\n    public select(focusDelay = 50) {\n        this.relatedGroup.select(focusDelay);\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Host,\n    HostBinding,\n    Inject,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTabsComponent } from './tabs.component';\n\nenum ButtonStyle {\n    VISIBLE = 'visible',\n    HIDDEN = 'hidden',\n    NOT_DISPLAYED = 'not_displayed'\n}\n\n@Directive({\n    selector: '[igxRightButtonStyle]'\n})\n\nexport class IgxRightButtonStyleDirective {\n    constructor(@Host() @Inject(forwardRef(() => IgxTabsComponent))\n    public tabs: IgxTabsComponent) {\n    }\n\n    private getRightButtonStyle() {\n        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;\n        const itemsContainerWidth = this.tabs.itemsContainer.nativeElement.offsetWidth;\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        const total = offset + viewPortWidth;\n\n        if (itemsContainerWidth <= headerContainerWidth && offset === 0) {\n            return ButtonStyle.NOT_DISPLAYED;\n        }\n\n        if (itemsContainerWidth > total) {\n            return ButtonStyle.VISIBLE;\n        } else {\n            return ButtonStyle.HIDDEN;\n        }\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n}\n\n@Directive({\n    selector: '[igxLeftButtonStyle]'\n})\n\nexport class IgxLeftButtonStyleDirective {\n    constructor(@Host() @Inject(forwardRef(() => IgxTabsComponent))\n    public tabs: IgxTabsComponent) {\n    }\n\n    private getLeftButtonStyle() {\n        const itemsContainerWidth = this.tabs.itemsContainer.nativeElement.offsetWidth;\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n\n        if (offset === 0) {\n            if (itemsContainerWidth <= headerContainerWidth) {\n                return ButtonStyle.NOT_DISPLAYED;\n            }\n            return ButtonStyle.HIDDEN;\n        } else {\n            return ButtonStyle.VISIBLE;\n        }\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n}\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabItemTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    Component,\n    ContentChild,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    Inject,\n    Input,\n    TemplateRef,\n    HostListener\n} from '@angular/core';\n\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsComponent } from './tabs.component';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\n\n@Component({\n    selector: 'igx-tabs-group',\n    template: `<ng-content *ngIf=\"isSelected\"></ng-content>\n`\n})\n\nexport class IgxTabsGroupComponent implements AfterContentInit, AfterViewChecked {\n    public isSelected = false;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public label: string;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public icon: string;\n\n    /**\n    * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.\n    *```html\n    *<igx-tabs-group label=\"Tab 2  Lorem ipsum dolor sit\" icon=\"home\" [disabled]=\"true\">\n    *```\n    */\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tabpanel';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClass(): string {\n        return 'igx-tabs__group';\n    }\n\n    /**\n     * An accessor that returns the `IgxTabItemComponent` component.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabComponent = this.tab.relatedTab;\n     * }\n     * ```\n     */\n    get relatedTab(): IgxTabItemComponent {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray()[this.index];\n        }\n    }\n\n    /**\n     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabIndex = this.tab.index;\n     * }\n     * ```\n     */\n    get index() {\n        if (this._tabs.groups) {\n            return this._tabs.groups.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     *@hidden\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    private _tabTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })\n    protected tabTemplate: IgxTabItemTemplateDirective;\n\n    constructor(\n        @Inject(forwardRef(() => IgxTabsComponent))\n        private _tabs: IgxTabsComponent,\n        private _element: ElementRef) {\n    }\n\n\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            const contentOffset = this._tabs.tabsContainer.nativeElement.offsetWidth * this.index;\n            this._tabs.contentsContainer.nativeElement.style.transitionDuration = `0s`;\n            this._tabs.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-item-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-tabs__group-${this.index}`);\n    }\n\n    /**\n     * A method that sets the focus on a tab.\n     * @memberOf {@link IgxTabGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public tab : IgxTabsGroupComponent;\n     *ngAfterViewInit(){\n     *    this.tab.select();\n     *}\n     *```\n     * @param focusDelay A number representing the expected delay.\n     */\n    public select(focusDelay = 50) {\n        if (this.disabled || this.isSelected) {\n            return;\n        }\n\n        this.isSelected = true;\n        this.relatedTab.tabindex = 0;\n\n        if (focusDelay !== 0) {\n            setTimeout(() => {\n                this.relatedTab.nativeTabItem.nativeElement.focus();\n            }, focusDelay);\n        }\n        this._handleSelection();\n        this._tabs.onTabItemSelected.emit({ tab: this._tabs.tabs.toArray()[this.index], group: this });\n    }\n\n    private _handleSelection() {\n        const tabElement = this.relatedTab.nativeTabItem.nativeElement;\n        const viewPortOffsetWidth = this._tabs.viewPort.nativeElement.offsetWidth;\n\n        if (tabElement.offsetLeft < this._tabs.offset) {\n            this._tabs.scrollElement(tabElement, false);\n        } else if (tabElement.offsetLeft + tabElement.offsetWidth > viewPortOffsetWidth + this._tabs.offset) {\n            this._tabs.scrollElement(tabElement, true);\n        }\n\n        const contentOffset = this._tabs.tabsContainer.nativeElement.offsetWidth * this.index;\n        this._tabs.contentsContainer.nativeElement.style.transitionDuration = `0.2s`;\n        this._tabs.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n\n        this._tabs.selectedIndicator.nativeElement.style.width = `${tabElement.offsetWidth}px`;\n        this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${tabElement.offsetLeft}px)`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';\n\nexport enum TabsType {\n    FIXED = 'fixed',\n    CONTENTFIT = 'contentfit'\n}\n\n@Component({\n    selector: 'igx-tabs',\n    template: `<!-- TODO Remove tab container from here -->\n<div #tabsContainer>\n    <div class=\"igx-tabs__header\" #headerContainer>\n        <button igxRipple class=\"igx-tabs__header-button\" igxButton=\"icon\" (click)=\"scrollLeft($event)\" igxLeftButtonStyle>\n            <igx-icon fontSet=\"material\">navigate_before</igx-icon>\n        </button>\n        <div class=\"igx-tabs__header-wrapper-fixed\" #viewPort>\n            <div #itemsContainer class=\"igx-tabs__header-wrapper-fluid\">\n                <igx-tab-item igxRipple *ngFor=\"let group of groups\" [id]=\"'igx-tab-item-' + group.index\" [attr.aria-label]=\"group.label\"\n                    [attr.aria-disabled]=\"group.disabled\" [attr.aria-selected]=\"group.isSelected\" [attr.aria-controls]=\"'igx-tab-item-group-'+ group.index\"\n                    [ngClass]=\"{\n                'igx-tabs__header-menu-item': !group.isSelected && !group.disabled,\n                'igx-tabs__header-menu-item--selected': group.isSelected,\n                'igx-tabs__header-menu-item--disabled': group.disabled }\" [relatedGroup]=\"group\" role=\"tab\">\n                </igx-tab-item>\n                <div #selectedIndicator *ngIf=\"groups.length > 0\" class=\"igx-tabs__header-menu-item-indicator\"></div>\n            </div>\n        </div>\n        <button igxRipple class=\"igx-tabs__header-button\" igxButton=\"icon\" (click)=\"scrollRight($event)\" igxRightButtonStyle>\n            <igx-icon fontSet=\"material\">navigate_next</igx-icon>\n        </button>\n    </div>\n    <div class=\"igx-tabs__content-fixed\">\n        <div #contentsContainer class=\"igx-tabs__content-fluid\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>`\n})\n\nexport class IgxTabsComponent implements AfterViewInit, OnDestroy {\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * ```typescript\n     * const tabItems = this.myTabComponent.tabs;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxTabItemComponent))\n    public tabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * Provides an observable collection of all `IgxTabsGroupComponent`s.\n     * ```typescript\n     * const groupItems = this.myTabComponent.tabs;\n     * ```\n     */\n    @ContentChildren(forwardRef(() => IgxTabsGroupComponent))\n    public groups: QueryList<IgxTabsGroupComponent>;\n\n    /**\n     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.\n     * By default the header sizing mode is `contentfit`.\n     * ```html\n     * <igx-tabs tabsType=\"fixed\">\n     *     <igx-tabs-group label=\"HOME\">Home</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     */\n    @Input('tabsType')\n    public tabsType: string | TabsType = 'contentfit';\n\n    /**\n     * An @Input property that sets the value of the `selectedIndex`.\n     * Default value is 0.\n     * ```html\n     * <igx-tabs selectedIndex=\"1\">\n     * ```\n     */\n    @Input()\n    public selectedIndex = 0;\n\n    /**\n     * Emitted when a tab item is selected.\n     * ```html\n     * <igx-tabs (onTabItemSelected)=\"itemSelected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemSelected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output() public onTabItemSelected = new EventEmitter();\n\n    /**\n     * Emitted when a tab item is deselected.\n     * ```html\n     * <igx-tabs (onTabItemDeselected)=\"itemDeselected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemDeselected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output() public onTabItemDeselected = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tabsContainer')\n    public tabsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer')\n    public headerContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('itemsContainer')\n    public itemsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('contentsContainer')\n    public contentsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectedIndicator')\n    public selectedIndicator: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('viewPort')\n    public viewPort: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    public get class() {\n        const defaultStyle = `igx-tabs`;\n        const fixedStyle = `igx-tabs--fixed`;\n        const iconStyle = `igx-tabs--icons`;\n        const iconLabelFound = this.groups.find((group) => group.icon != null && group.label != null);\n        let css;\n        switch (TabsType[this.tabsType.toUpperCase()]) {\n            case TabsType.FIXED: {\n                css = fixedStyle;\n                break;\n            }\n            default: {\n                css = defaultStyle;\n                break;\n            }\n        }\n\n        // Layout fix for items with icons\n        if (iconLabelFound !== undefined) {\n            css = `${css} ${iconStyle}`;\n        }\n\n        return css;\n    }\n\n    /**\n     * @hidden\n     */\n    public calculatedWidth: number;\n\n    /**\n     * @hidden\n     */\n    public visibleItemsWidth: number;\n\n    /**\n     * @hidden\n     */\n    public offset = 0;\n\n    private _groupChanges$: Subscription;\n\n    /**\n     * @hidden\n     */\n    public scrollLeft(event) {\n        this._scroll(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollRight(event) {\n        this._scroll(true);\n    }\n\n    private _scroll(scrollRight: boolean): void {\n        const tabsArray = this.tabs.toArray();\n        for (const tab of tabsArray) {\n            const element = tab.nativeTabItem.nativeElement;\n            if (scrollRight) {\n                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            } else {\n                if (element.offsetWidth + element.offsetLeft >= this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            }\n        }\n\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollElement(element: any, scrollRight: boolean): void {\n        requestAnimationFrame(() => {\n            const viewPortWidth = this.viewPort.nativeElement.offsetWidth;\n\n            this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;\n            this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;\n        });\n    }\n\n    /**\n     * Gets the selected `IgxTabItemComponent`.\n     * ```\n     * const selectedItem = this.myTabComponent.selectedTabItem;\n     * ```\n     */\n    get selectedTabItem(): IgxTabItemComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        setTimeout(() => {\n            if (this.selectedIndex <= 0 || this.selectedIndex >= this.groups.length) {\n                // if nothing is selected - select the first tabs group\n                this._selectGroupByIndex(0);\n            } else {\n                this._selectGroupByIndex(this.selectedIndex);\n            }\n        });\n\n        this._groupChanges$ = this.groups.changes.subscribe(() => {\n            this.resetSelectionOnCollectionChanged();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._groupChanges$) {\n            this._groupChanges$.unsubscribe();\n        }\n    }\n\n    private resetSelectionOnCollectionChanged() {\n        setTimeout(() => {\n            if (this.groups.toArray()[this.selectedIndex] !== undefined) {\n                // persist the selected index and applied it to the new collection\n                this._selectGroupByIndex(this.selectedIndex);\n            } else {\n                if (this.selectedIndex >= this.groups.length) {\n                    // in case the selected index is no longer valid, select the last group in the new collection\n                    this._selectGroupByIndex(this.groups.length - 1);\n                }\n            }\n        }, 0);\n    }\n\n    private _selectGroupByIndex(selectedIndex: number) {\n        const selectableGroups = this.groups.filter((selectableGroup) => !selectableGroup.disabled);\n        const group = selectableGroups[selectedIndex];\n\n        if (group) {\n            group.select(0);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('onTabItemSelected', ['$event'])\n    public _selectedGroupHandler(args) {\n        const prevSelectedIndex = this.selectedIndex;\n        if (prevSelectedIndex !== -1 && this.groups.toArray()[prevSelectedIndex] !== undefined) {\n            this.onTabItemDeselected.emit(\n                {\n                    tab: this.groups.toArray()[prevSelectedIndex].relatedTab,\n                    group: this.groups.toArray()[prevSelectedIndex]\n                });\n        }\n\n        this.selectedIndex = args.group.index;\n        this.groups.forEach((p) => {\n            if (p.index !== this.selectedIndex) {\n                this._deselectGroup(p);\n            }\n        });\n    }\n\n    private _deselectGroup(group: IgxTabsGroupComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (group.disabled || this.selectedTabItem.index === group.index) {\n            return;\n        }\n\n        group.isSelected = false;\n        group.relatedTab.tabindex = -1;\n    }\n}\n\n/**\n* The IgxTabsModule provides the {@link IgxTabsComponent}, {@link IgxTabsGroupComponent},\n*{@link IgxTabItemComponent}, {@link IgxTabItemTemplateDirective}, {@link IgxRightButtonStyleDirective}\n* and {@link IgxLeftButtonStyleDirective} inside your application.\n*/\n@NgModule({\n    declarations: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    exports: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]\n})\n\nexport class IgxTabsModule {\n}\n","/**\n * This file contains all the directives used by the @link IgxTimePickerComponent.\n * You should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Host,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    Output,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTimePickerComponent } from './time-picker.component';\n\n/** @hidden */\n@Directive({\n    selector: '[igxItemList]'\n})\nexport class IgxItemListDirective {\n\n    @Input('igxItemList')\n    public type: string;\n\n    public isActive: boolean;\n\n    constructor(@Host() @Inject(forwardRef(() => IgxTimePickerComponent))\n                public timePicker: IgxTimePickerComponent,\n                private elementRef: ElementRef) {}\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-time-picker__column')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__hourList')\n    get hourCSS(): boolean {\n        return this.type === 'hourList';\n    }\n\n    @HostBinding('class.igx-time-picker__minuteList')\n    get minuteCSS(): boolean {\n        return this.type === 'minuteList';\n    }\n\n    @HostBinding('class.igx-time-picker__ampmList')\n    get ampmCSS(): boolean {\n        return this.type === 'ampmList';\n    }\n\n    @HostListener('focus')\n    public onFocus() {\n        this.isActive = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    private nextItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.nextHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.nextMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.nextAmPm();\n                break;\n            }\n        }\n    }\n\n    private prevItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.prevHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.prevMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.prevAmPm();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.prevItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('hourList') !== -1) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if (listName.indexOf('minuteList') !== -1 && this.timePicker._ampmItems.length !== 0) {\n            this.timePicker.ampmList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('minuteList') !== -1) {\n            this.timePicker.hourList.nativeElement.focus();\n        } else if (listName.indexOf('ampmList') !== -1) {\n            this.timePicker.minuteList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.okButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.cancelButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onHover() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('wheel', ['$event'])\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.deltaY > 0) {\n            this.nextItem();\n        } else if (event.deltaY < 0) {\n            this.prevItem();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    public onPanMove(event) {\n        if (event.deltaY < 0) {\n            this.nextItem();\n        } else if (event.deltaY > 0) {\n            this.prevItem();\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHourItem]'\n})\nexport class IgxHourItemDirective {\n\n    @Input('igxHourItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedHour;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedHour && this.itemList.isActive;\n    }\n\n    get isSelectedHour(): boolean {\n        return this.timePicker.selectedHour === this.value;\n    }\n\n    constructor(@Host() @Inject(forwardRef(() => IgxTimePickerComponent))\n                public timePicker: IgxTimePickerComponent,\n                private itemList: IgxItemListDirective) {}\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollHourIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxMinuteItem]'\n})\nexport class IgxMinuteItemDirective {\n\n    @Input('igxMinuteItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedMinute;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedMinute && this.itemList.isActive;\n    }\n\n    get isSelectedMinute(): boolean {\n        return this.timePicker.selectedMinute === this.value;\n    }\n\n    constructor(@Host() @Inject(forwardRef(() => IgxTimePickerComponent))\n                public timePicker: IgxTimePickerComponent,\n                private itemList: IgxItemListDirective) {}\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollMinuteIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxAmPmItem]'\n})\nexport class IgxAmPmItemDirective {\n\n    @Input('igxAmPmItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedAmPm;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedAmPm && this.itemList.isActive;\n    }\n\n    get isSelectedAmPm(): boolean {\n        return this.timePicker.selectedAmPm === this.value;\n    }\n\n    constructor(@Host() @Inject(forwardRef(() => IgxTimePickerComponent))\n                public timePicker: IgxTimePickerComponent,\n                private itemList: IgxItemListDirective) {}\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollAmPmIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxTimePickerTemplate]'\n})\nexport class IgxTimePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n","import {\n    CommonModule\n} from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    AfterViewInit,\n    DoCheck,\n    ContentChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxDialogComponent, IgxDialogModule } from '../dialog/dialog.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxInputDirective } from '../directives/input/input.directive';\nimport {\n    IgxAmPmItemDirective,\n    IgxHourItemDirective,\n    IgxItemListDirective,\n    IgxMinuteItemDirective,\n    IgxTimePickerTemplateDirective\n} from './time-picker.directives';\nimport { Subscription } from 'rxjs';\nimport { EditorProvider } from '../core/edit-provider';\n\nlet NEXT_ID = 0;\nexport class TimePickerHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\nexport interface IgxTimePickerValueChangedEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\n\nexport interface IgxTimePickerValidationFailedEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxTimePickerComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: TimePickerHammerConfig\n        }\n    ],\n    selector: 'igx-time-picker',\n    styles: [':host {display: block;}'],\n    template: `<ng-template #defaultTimePickerTemplate>\n    <igx-input-group (click)=\"openDialog()\">\n        <igx-prefix>\n            <igx-icon>access_time</igx-icon>\n        </igx-prefix>\n        <label igxLabel>Time</label>\n        <input igxInput [value]=\"displayTime\" [disabled]=\"disabled\" tabindex=\"0\" readonly />\n    </igx-input-group>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\n<ng-container *ngTemplateOutlet=\"scroll\"></ng-container>\n<ng-template #scroll>\n    <igx-dialog class=\"igx-time-picker__dialog-popup\" closeOnOutsideSelect=\"true\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\"\n        [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n        <ng-container #container>\n            <div class=\"igx-time-picker__wrapper\">\n                <div class=\"igx-time-picker__header\">\n                    <h5 class=\"igx-time-picker__header-ampm\">{{ selectedAmPm }}</h5>\n                    <h2 class=\"igx-time-picker__header-hour\">\n                        <span>{{ selectedHour }}</span>:<span>{{ selectedMinute }}</span>\n                    </h2>\n                </div>\n                <div class=\"igx-time-picker__body\">\n                    <div #hourList [igxItemList]=\"'hourList'\">\n                        <span [igxHourItem]=\"hour\" *ngFor=\"let hour of hourView\">{{ hour }}</span>\n                    </div>\n                    <div #minuteList [igxItemList]=\"'minuteList'\">\n                        <span [igxMinuteItem]=\"minute\" *ngFor=\"let minute of minuteView\">{{ minute }}</span>\n                    </div>\n                    <div #ampmList [igxItemList]=\"'ampmList'\">\n                        <span [igxAmPmItem]=\"ampm\" *ngFor=\"let ampm of ampmView\">{{ ampm }}</span>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n    </igx-dialog>\n</ng-template>\n`\n})\nexport class IgxTimePickerComponent implements ControlValueAccessor, EditorProvider, OnInit, OnDestroy, DoCheck, AfterViewInit {\n\n    private _value: Date;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-time-picker-${NEXT_ID++}`;\n\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     *public date: Date = new Date(Date.now());\n     *  //...\n     *<igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set value(value: Date) {\n        if (this._isValueValid(value)) {\n            this._value = value;\n            this._onChangeCallback(value);\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: value,\n                setThroughUI: false\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     *@ViewChild(\"MyPick\")\n     *public pick: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date {\n        return this._value;\n    }\n\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public okButtonLabel = 'OK';\n\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public cancelButtonLabel = 'Cancel';\n\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes:1}`\n     * ```html\n     *<igx-time-picker [itemsDelta]=\"{hours:3, minutes:5}\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public itemsDelta = { hours: 1, minutes: 1 };\n\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     *```html\n     *public min: string = \"09:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public minValue: string;\n\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     *```html\n     *public max: string = \"18:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public maxValue: string;\n\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     *The minutes and hour spinning will wrap around by default.\n     *```html\n     *<igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     *<igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     *<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public format = 'hh:mm tt';\n\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     *```typescript\n     * @ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValueChanged(timepicker){\n     *    this.toast.show()\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     *```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<IgxTimePickerValueChangedEventArgs>();\n\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     *public min: string = \"09:00\";\n     *public max: string = \"18:00\";\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValidationFailed(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IgxTimePickerValidationFailedEventArgs>();\n\n    /**\n     * Emitted when a timePicker is being opened.\n     * ```html\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onOpen(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onOpen)=\"onOpen($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The time picker has been opened!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    @Output()\n    public onClose = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hourList')\n    public hourList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('minuteList')\n    public minuteList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ampmList')\n    public ampmList: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('defaultTimePickerTemplate', { read: TemplateRef })\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective })\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxInputDirective, { read: ElementRef })\n    private _input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxDialogComponent)\n    private _alert: IgxDialogComponent;\n\n    /**\n     * @hidden\n     */\n    public _hourItems = [];\n    /**\n     * @hidden\n     */\n    public _minuteItems = [];\n    /**\n     * @hidden\n     */\n    public _ampmItems = [];\n\n    private _isHourListLoop = this.isSpinLoop;\n    private _isMinuteListLoop = this.isSpinLoop;\n\n    private _hourView = [];\n    private _minuteView = [];\n    private _ampmView = [];\n\n    /**\n     * @hidden\n     */\n    public selectedHour: string;\n    /**\n     * @hidden\n     */\n    public selectedMinute: string;\n    /**\n     * @hidden\n     */\n    public selectedAmPm: string;\n\n    private _prevSelectedHour: string;\n    private _prevSelectedMinute: string;\n    private _prevSelectedAmPm: string;\n\n    protected dialogClosed = new Subscription();\n\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     *}\n     *```\n     */\n    public get displayTime(): string {\n        if (this.value) {\n            return this._formatTime(this.value, this.format);\n        }\n\n        return '';\n    }\n\n    /**\n     * @hidden\n     */\n    get hourView(): string[] {\n        return this._hourView;\n    }\n\n    /**\n     * @hidden\n     */\n    get minuteView(): string[] {\n        return this._minuteView;\n    }\n\n    /**\n     * @hidden\n     */\n    get ampmView(): string[] {\n        return this._ampmView;\n    }\n\n    /**\n     * opens the dialog.\n     * ```html\n     *<igx-time-picker #tp></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('tp', { read: IgxTimePickerComponent }) tp: IgxTimePickerComponent;\n     * tp.openDialog();\n     * ```\n     */\n    public openDialog(timePicker: IgxTimePickerComponent = this): void {\n        if (this.value) {\n            const foramttedTime = this._formatTime(this.value, this.format);\n            const sections = foramttedTime.split(/[\\s:]+/);\n\n            this.selectedHour = sections[0];\n            this.selectedMinute = sections[1];\n\n            if (this._ampmItems !== null) {\n                this.selectedAmPm = sections[2];\n            }\n        }\n\n        if (this.selectedHour === undefined) {\n            this.selectedHour = `${this._hourItems[3]}`;\n        }\n        if (this.selectedMinute === undefined) {\n            this.selectedMinute = '0';\n        }\n        if (this.selectedAmPm === undefined && this._ampmItems !== null) {\n            this.selectedAmPm = this._ampmItems[3];\n        }\n\n        this._prevSelectedHour = this.selectedHour;\n        this._prevSelectedMinute = this.selectedMinute;\n        this._prevSelectedAmPm = this.selectedAmPm;\n\n        this._alert.open();\n        this._onTouchedCallback();\n\n        this._updateHourView(0, 7);\n        this._updateMinuteView(0, 7);\n        this._updateAmPmView(0, 7);\n\n        if (this.selectedHour) {\n            this.scrollHourIntoView(this.selectedHour);\n        }\n        if (this.selectedMinute) {\n            this.scrollMinuteIntoView(this.selectedMinute);\n        }\n        if (this.selectedAmPm) {\n            this.scrollAmPmIntoView(this.selectedAmPm);\n        }\n\n        setTimeout(() => {\n            this.hourList.nativeElement.focus();\n        });\n\n        this.onOpen.emit(this);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this._generateHours();\n        this._generateMinutes();\n        if (this.format.indexOf('tt') !== -1) {\n            this._generateAmPm();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        this.dialogClosed = this._alert.toggleRef.onClosed.pipe().subscribe((ev) => this.handleDialogCloseAction());\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this.dialogClosed.unsubscribe();\n    }\n\n    // XXX - temporary fix related with issue #1660\n    public ngDoCheck(): void {\n        if (this.vertical && this._alert) {\n            this._alert.toggleRef.element.classList.remove('igx-time-picker');\n            this._alert.toggleRef.element.classList.add('igx-time-picker--vertical');\n        } else if (!this.vertical && this._alert) {\n            this._alert.toggleRef.element.classList.add('igx-time-picker');\n            this._alert.toggleRef.element.classList.remove('igx-time-picker--vertical');\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public handleDialogCloseAction() {\n        if (this._input) {\n            this._input.nativeElement.focus();\n        }\n        this.onClose.emit(this);\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        this.value = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this._input.nativeElement;\n    }\n\n    private _onTouchedCallback: () => void = () => { };\n\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    private _scrollItemIntoView(item: string, items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        let itemIntoView;\n        if (items) {\n            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));\n            let view;\n\n            if (index !== -1) {\n                if (isListLoop) {\n                    if (index > 0) {\n                        selectedItem = this._itemToString(items[index - 1], viewType);\n                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);\n                    } else {\n                        selectedItem = this._itemToString(items[1], viewType);\n                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);\n                    }\n                } else {\n                    view = items.slice(index - 3, index + 4);\n                    selectedItem = this._itemToString(items[index], viewType);\n                    itemIntoView = { selectedItem, view };\n                }\n                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);\n            }\n        }\n        return itemIntoView;\n    }\n\n    private _viewToString(view: any, viewType: string): any {\n        for (let i = 0; i < view.length; i++) {\n            if (typeof (view[i]) !== 'string') {\n                view[i] = this._itemToString(view[i], viewType);\n            }\n        }\n        return view;\n    }\n\n    private _itemToString(item: any, viewType: string): string {\n        if (item === null) {\n            item = '';\n        } else if (viewType && typeof (item) !== 'string') {\n            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));\n            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);\n\n            const leadZero = (viewType === 'hour') ? leadZeroHour : leadZeroMinute;\n            item = (leadZero) ? '0' + item : `${item}`;\n        }\n        return item;\n    }\n\n    private _prevItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex - 4 < 0) {\n                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3));\n            } else if (selectedIndex + 4 > itemsCount) {\n                view = items.slice(selectedIndex - 4, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            }\n\n            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];\n        } else if (selectedIndex > 3) {\n            view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            selectedItem = items[selectedIndex - 1];\n        } else if (selectedIndex === 3) {\n            view = items.slice(0, 7);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _nextItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex < 2) {\n                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5));\n            } else if (selectedIndex + 4 >= itemsCount) {\n                view = items.slice(selectedIndex - 2, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            }\n\n            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];\n        } else if (selectedIndex + 1 < itemsCount - 3) {\n            view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            selectedItem = items[selectedIndex + 1];\n        } else if (selectedIndex === itemsCount - 4) {\n            view = items.slice(selectedIndex - 3, itemsCount);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _formatTime(value: Date, format: string): string {\n        if (!value) {\n            return '';\n        } else {\n            let hour = value.getHours();\n            const minute = value.getMinutes();\n            let formattedMinute;\n            let formattedHour;\n            let amPM;\n\n            if (format.indexOf('h') !== -1) {\n                amPM = (hour > 11) ? 'PM' : 'AM';\n\n                if (hour > 12) {\n                    hour -= 12;\n                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;\n                } else if (hour === 0) {\n                    formattedHour = '12';\n                } else if (hour < 10 && format.indexOf('hh') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            } else {\n                if (hour < 10 && format.indexOf('HH') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            }\n\n            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;\n\n            return format.replace('hh', formattedHour).replace('h', formattedHour)\n                .replace('HH', formattedHour).replace('H', formattedHour)\n                .replace('mm', formattedMinute).replace('m', formattedMinute)\n                .replace('tt', amPM);\n        }\n    }\n\n    private _updateHourView(start: any, end: any): void {\n        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');\n    }\n\n    private _updateMinuteView(start: any, end: any): void {\n        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');\n    }\n\n    private _updateAmPmView(start: any, end: any): void {\n        this._ampmView = this._ampmItems.slice(start, end);\n    }\n\n    private _addEmptyItems(items: string[]): void {\n        for (let i = 0; i < 3; i++) {\n            items.push(null);\n        }\n    }\n\n    private _generateHours(): void {\n        let hourItemsCount = 24;\n        if (this.format.indexOf('h') !== -1) {\n            hourItemsCount = 13;\n        }\n\n        hourItemsCount /= this.itemsDelta.hours;\n\n        let i = this.format.indexOf('H') !== -1 ? 0 : 1;\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n            this._isHourListLoop = false;\n        }\n\n        if (hourItemsCount > 1) {\n            for (i; i < hourItemsCount; i++) {\n                this._hourItems.push(i * this.itemsDelta.hours);\n            }\n        } else {\n            this._hourItems.push(0);\n        }\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n        }\n    }\n\n    private _generateMinutes(): void {\n        const minuteItemsCount = 60 / this.itemsDelta.minutes;\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n            this._isMinuteListLoop = false;\n        }\n\n        for (let i = 0; i < minuteItemsCount; i++) {\n            this._minuteItems.push(i * this.itemsDelta.minutes);\n        }\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n        }\n    }\n\n    private _generateAmPm(): void {\n\n        this._addEmptyItems(this._ampmItems);\n\n        this._ampmItems.push('AM');\n        this._ampmItems.push('PM');\n\n        this._addEmptyItems(this._ampmItems);\n    }\n\n    private _getSelectedTime(): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        date.setHours(parseInt(this.selectedHour, 10));\n        date.setMinutes(parseInt(this.selectedMinute, 10));\n        date.setSeconds(0);\n        if (this.selectedAmPm === 'PM' && this.selectedHour !== '12') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {\n            date.setHours(0);\n        }\n        return date;\n    }\n\n    private _convertMinMaxValue(value: string): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        const sections = value.split(/[\\s:]+/);\n\n        date.setHours(parseInt(sections[0], 10));\n        date.setMinutes(parseInt(sections[1], 10));\n        date.setSeconds(0);\n        if (sections[2] && sections[2] === 'PM' && sections[0] !== '12') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (sections[2] && sections[2] && sections[0] === '12') {\n            date.setHours(0);\n        }\n\n        return date;\n    }\n\n    private _isValueValid(value: Date): boolean {\n        if (this.maxValue && value > this._convertMinMaxValue(this.maxValue)) {\n            return false;\n        } else if (this.minValue && value < this._convertMinMaxValue(this.minValue)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     *scrhintoView(tp) {\n     *tp.scrollHourIntoView('2');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #tp format=\"h:mm tt\" (onOpen)=\"scrhintoView(tp)\"></igx-time-picker>\n     *```\n     *@param item to be scrolled in view.\n     */\n    public scrollHourIntoView(item: string): void {\n        const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        if (hourIntoView) {\n            this._hourView = hourIntoView.view;\n            this.selectedHour = hourIntoView.selectedItem;\n        }\n    }\n\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     *scrMintoView(tp) {\n     *tp.scrollMinuteIntoView('3');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #tp format=\"h:mm tt\" (onOpen)=\"scrMintoView(tp)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollMinuteIntoView(item: string): void {\n        const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        if (minuteIntoView) {\n            this._minuteView = minuteIntoView.view;\n            this.selectedMinute = minuteIntoView.selectedItem;\n        }\n    }\n\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     *scrAmPmIntoView(tp) {\n     *tp.scrollAmPmIntoView('PM');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #tp format=\"h:mm tt\" (onOpen)=\"scrAmPmIntoView(tp)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollAmPmIntoView(item: string): void {\n        const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);\n        if (ampmIntoView) {\n            this._ampmView = ampmIntoView.view;\n            this.selectedAmPm = ampmIntoView.selectedItem;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextHour() {\n        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = nextHour.view;\n        this.selectedHour = nextHour.selectedItem;\n    }\n\n    /**\n     * @hidden\n     */\n    public prevHour() {\n        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = prevHour.view;\n        this.selectedHour = prevHour.selectedItem;\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMinute() {\n        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = nextMinute.view;\n        this.selectedMinute = nextMinute.selectedItem;\n    }\n\n    /**\n     * @hidden\n     */\n    public prevMinute() {\n        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = prevMinute.view;\n        this.selectedMinute = prevMinute.selectedItem;\n    }\n\n    /**\n     * @hidden\n     */\n    public nextAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex + 1 < this._ampmItems.length - 3) {\n            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);\n            this.selectedAmPm = this._ampmItems[selectedIndex + 1];\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public prevAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex > 3) {\n            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);\n            this.selectedAmPm = this._ampmItems[selectedIndex - 1];\n        }\n    }\n\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    public okButtonClick(): boolean {\n        if (this._isValueValid(this._getSelectedTime())) {\n            this._alert.close();\n            const oldValue = this.value;\n            this.value = this._getSelectedTime();\n            const args: IgxTimePickerValueChangedEventArgs = {\n                oldValue,\n                newValue: this.value\n            };\n            this.onValueChanged.emit(args);\n            return true;\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: this._getSelectedTime(),\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n            return false;\n        }\n    }\n\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    public cancelButtonClick(): void {\n        this._alert.close();\n        this.selectedHour = this._prevSelectedHour;\n        this.selectedMinute = this._prevSelectedMinute;\n        this.selectedAmPm = this._prevSelectedAmPm;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onKeydownSpace(event) {\n        this.openDialog();\n        event.preventDefault();\n    }\n\n    /**\n     * Returns an array of the hours currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let hInView = this.picker.hoursInView;\n     *}\n     *```\n     */\n    public hoursInView(): string[] {\n        return this._hourView.filter((hour) => hour !== '');\n    }\n\n    /**\n     * Returns an array of the minutes currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.minutesInView;\n     *}\n     *```\n     */\n    public minutesInView(): string[] {\n        return this._minuteView.filter((minute) => minute !== '');\n    }\n\n    /**\n     * Returns an array of the AM/PM currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let ApInView = this.picker.ampmInView;\n     *}\n     *```\n     */\n    public ampmInView(): string[] {\n        return this._ampmView.filter((ampm) => ampm !== '');\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.timePickerTemplateDirective) {\n            return this.timePickerTemplateDirective.template;\n        }\n        return this.defaultTimePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayTime: this.displayTime,\n            openDialog: () => { this.openDialog(); }\n        };\n    }\n}\n\n/**\n * The IgxTimePickerModule provides the {@link IgxTimePickerComponent} inside your application.\n */\n@NgModule({\n    declarations: [\n        IgxTimePickerComponent,\n        IgxHourItemDirective,\n        IgxItemListDirective,\n        IgxMinuteItemDirective,\n        IgxAmPmItemDirective,\n        IgxTimePickerTemplateDirective\n    ],\n    exports: [\n        IgxTimePickerComponent,\n        IgxTimePickerTemplateDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxInputGroupModule,\n        IgxDialogModule,\n        IgxIconModule\n    ],\n    providers: []\n})\nexport class IgxTimePickerModule { }\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast.html)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animate', [\n            state('show', style({\n                opacity: 1\n            })),\n            transition('* => show', animate('.20s ease')),\n            transition('show => *', animate('.40s ease-out'))\n        ])\n    ],\n    selector: 'igx-toast',\n    template: `<div [ngClass]=\"mapPositionToClassName()\" *ngIf=\"this.isVisible\" [@animate]=\"'show'\">\n    {{ message }}\n</div>\n`\n})\nexport class IgxToastComponent implements IToggleView, OnInit, OnDestroy {\n    /**\n     * Returns a list of available CSS classes.\n     * ```typescript\n     * let toastClasses =  this.toast.CSS_CLASSES;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public readonly CSS_CLASSES = {\n        IGX_TOAST_BOTTOM: 'igx-toast--bottom',\n        IGX_TOAST_MIDDLE: 'igx-toast--middle',\n        IGX_TOAST_TOP: 'igx-toast--top'\n    };\n\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-toast-${NEXT_ID++}`;\n\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShowing) = \"onShowing($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShowing = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShown) = \"onShown($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShown = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHiding) = \"onHiding($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHiding = new EventEmitter<IgxToastComponent>();\n\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHidden) = \"onHidden($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHidden = new EventEmitter<IgxToastComponent>();\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public role = 'alert';\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public displayTime = 4000;\n\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible] = \"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public isVisible = false;\n\n    /**\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message] = \"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public message: string;\n\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position] = \"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public position: IgxToastPosition = IgxToastPosition.Bottom;\n\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService) { }\n\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     * ```typescript\n     * this.toast.show();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public show(): void {\n        clearInterval(this.timeoutId);\n        this.onShowing.emit(this);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n\n        this.onShown.emit(this);\n    }\n\n    /**\n     * Hides the toast.\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public hide(): void {\n        this.onHiding.emit(this);\n        this.isVisible = false;\n        this.onHidden.emit(this);\n\n        clearInterval(this.timeoutId);\n    }\n\n    /**\n     * Wraps @show() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public open() {\n        this.show();\n    }\n\n    /**\n     * Wraps @hide() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public close() {\n        this.hide();\n    }\n\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public toggle() {\n        this.isVisible ? this.close() : this.open();\n    }\n    /**\n     * Sets/gets the class name of the toast based on the `position` value.\n     * ```typescript\n     * let className =  this.toast.mapPositionToClassName();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public mapPositionToClassName(): any {\n        if (this.position === IgxToastPosition.Top) {\n            return this.CSS_CLASSES.IGX_TOAST_TOP;\n        }\n\n        if (this.position === IgxToastPosition.Middle) {\n            return this.CSS_CLASSES.IGX_TOAST_MIDDLE;\n        }\n\n        if (this.position === IgxToastPosition.Bottom) {\n            return this.CSS_CLASSES.IGX_TOAST_BOTTOM;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n    }\n}\n\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport enum IgxToastPosition {\n    Bottom,\n    Middle,\n    Top\n}\n/**\n * The IgxToastModule provides the {@link IgxToastComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxToastComponent],\n    exports: [IgxToastComponent],\n    imports: [CommonModule]\n})\nexport class IgxToastModule { }\n"]}