/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Input, NgModule, Output, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { IgxBadgeModule } from '../badge/badge.component';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxIconModule } from '../icon/index';
import { IgxTabItemComponent } from './tab-item.component';
import { IgxTabsGroupComponent } from './tabs-group.component';
import { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';
/** @enum {string} */
const TabsType = {
    FIXED: 'fixed',
    CONTENTFIT: 'contentfit',
};
export { TabsType };
export class IgxTabsComponent {
    /**
     * @param {?} _element
     */
    constructor(_element) {
        this._element = _element;
        /**
         * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.
         * By default the header sizing mode is `contentfit`.
         * ```html
         * <igx-tabs tabsType="fixed">
         *     <igx-tabs-group label="HOME">Home</igx-tabs-group>
         * </igx-tabs>
         * ```
         */
        this.tabsType = 'contentfit';
        /**
         * An \@Input property that sets the value of the `selectedIndex`.
         * Default value is 0.
         * ```html
         * <igx-tabs selectedIndex="1">
         * ```
         */
        this.selectedIndex = 0;
        /**
         * Emitted when a tab item is selected.
         * ```html
         * <igx-tabs (onTabItemSelected)="itemSelected($event)">
         *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
         *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
         * </igx-tabs>
         * ```
         * ```typescript
         * itemSelected(e){
         *      const tabGroup = e.group;
         *      const tabItem = e.tab;
         * }
         * ```
         */
        this.onTabItemSelected = new EventEmitter();
        /**
         * Emitted when a tab item is deselected.
         * ```html
         * <igx-tabs (onTabItemDeselected)="itemDeselected($event)">
         *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
         *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
         * </igx-tabs>
         * ```
         * ```typescript
         * itemDeselected(e){
         *      const tabGroup = e.group;
         *      const tabItem = e.tab;
         * }
         * ```
         */
        this.onTabItemDeselected = new EventEmitter();
        /**
         * @hidden
         */
        this.offset = 0;
    }
    /**
     * @hidden
     * @return {?}
     */
    get class() {
        const /** @type {?} */ defaultStyle = `igx-tabs`;
        const /** @type {?} */ fixedStyle = `igx-tabs--fixed`;
        const /** @type {?} */ iconStyle = `igx-tabs--icons`;
        const /** @type {?} */ iconLabelFound = this.groups.find((group) => group.icon != null && group.label != null);
        let /** @type {?} */ css;
        switch (TabsType[this.tabsType.toUpperCase()]) {
            case TabsType.FIXED: {
                css = fixedStyle;
                break;
            }
            default: {
                css = defaultStyle;
                break;
            }
        }
        // Layout fix for items with icons
        if (iconLabelFound !== undefined) {
            css = `${css} ${iconStyle}`;
        }
        return css;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    scrollLeft(event) {
        this._scroll(false);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    scrollRight(event) {
        this._scroll(true);
    }
    /**
     * @param {?} scrollRight
     * @return {?}
     */
    _scroll(scrollRight) {
        const /** @type {?} */ tabsArray = this.tabs.toArray();
        for (const /** @type {?} */ tab of tabsArray) {
            const /** @type {?} */ element = tab.nativeTabItem.nativeElement;
            if (scrollRight) {
                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {
                    this.scrollElement(element, scrollRight);
                    break;
                }
            }
            else {
                if (element.offsetWidth + element.offsetLeft >= this.offset) {
                    this.scrollElement(element, scrollRight);
                    break;
                }
            }
        }
    }
    /**
     * @hidden
     * @param {?} element
     * @param {?} scrollRight
     * @return {?}
     */
    scrollElement(element, scrollRight) {
        requestAnimationFrame(() => {
            const /** @type {?} */ viewPortWidth = this.viewPort.nativeElement.offsetWidth;
            this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;
            this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;
        });
    }
    /**
     * Gets the selected `IgxTabItemComponent`.
     * ```
     * const selectedItem = this.myTabComponent.selectedTabItem;
     * ```
     * @return {?}
     */
    get selectedTabItem() {
        if (this.tabs && this.selectedIndex !== undefined) {
            return this.tabs.toArray()[this.selectedIndex];
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(() => {
            if (this.selectedIndex <= 0 || this.selectedIndex >= this.groups.length) {
                // if nothing is selected - select the first tabs group
                this._selectGroupByIndex(0);
            }
            else {
                this._selectGroupByIndex(this.selectedIndex);
            }
        });
        this._groupChanges$ = this.groups.changes.subscribe(() => {
            this.resetSelectionOnCollectionChanged();
        });
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        if (this._groupChanges$) {
            this._groupChanges$.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    resetSelectionOnCollectionChanged() {
        setTimeout(() => {
            if (this.groups.toArray()[this.selectedIndex] !== undefined) {
                // persist the selected index and applied it to the new collection
                this._selectGroupByIndex(this.selectedIndex);
            }
            else {
                if (this.selectedIndex >= this.groups.length) {
                    // in case the selected index is no longer valid, select the last group in the new collection
                    this._selectGroupByIndex(this.groups.length - 1);
                }
            }
        }, 0);
    }
    /**
     * @param {?} selectedIndex
     * @return {?}
     */
    _selectGroupByIndex(selectedIndex) {
        const /** @type {?} */ selectableGroups = this.groups.filter((selectableGroup) => !selectableGroup.disabled);
        const /** @type {?} */ group = selectableGroups[selectedIndex];
        if (group) {
            group.select(0);
        }
    }
    /**
     * @hidden
     * @param {?} args
     * @return {?}
     */
    _selectedGroupHandler(args) {
        const /** @type {?} */ prevSelectedIndex = this.selectedIndex;
        if (prevSelectedIndex !== -1 && this.groups.toArray()[prevSelectedIndex] !== undefined) {
            this.onTabItemDeselected.emit({
                tab: this.groups.toArray()[prevSelectedIndex].relatedTab,
                group: this.groups.toArray()[prevSelectedIndex]
            });
        }
        this.selectedIndex = args.group.index;
        this.groups.forEach((p) => {
            if (p.index !== this.selectedIndex) {
                this._deselectGroup(p);
            }
        });
    }
    /**
     * @param {?} group
     * @return {?}
     */
    _deselectGroup(group) {
        // Cannot deselect the selected tab - this will mean that there will be not selected tab left
        if (group.disabled || this.selectedTabItem.index === group.index) {
            return;
        }
        group.isSelected = false;
        group.relatedTab.tabindex = -1;
    }
}
IgxTabsComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-tabs',
                template: `<!-- TODO Remove tab container from here -->
<div #tabsContainer>
    <div class="igx-tabs__header" #headerContainer>
        <button igxRipple class="igx-tabs__header-button" igxButton="icon" (click)="scrollLeft($event)" igxLeftButtonStyle>
            <igx-icon fontSet="material">navigate_before</igx-icon>
        </button>
        <div class="igx-tabs__header-wrapper-fixed" #viewPort>
            <div #itemsContainer class="igx-tabs__header-wrapper-fluid">
                <igx-tab-item igxRipple *ngFor="let group of groups" [id]="'igx-tab-item-' + group.index" [attr.aria-label]="group.label"
                    [attr.aria-disabled]="group.disabled" [attr.aria-selected]="group.isSelected" [attr.aria-controls]="'igx-tab-item-group-'+ group.index"
                    [ngClass]="{
                'igx-tabs__header-menu-item': !group.isSelected && !group.disabled,
                'igx-tabs__header-menu-item--selected': group.isSelected,
                'igx-tabs__header-menu-item--disabled': group.disabled }" [relatedGroup]="group" role="tab">
                </igx-tab-item>
                <div #selectedIndicator *ngIf="groups.length > 0" class="igx-tabs__header-menu-item-indicator"></div>
            </div>
        </div>
        <button igxRipple class="igx-tabs__header-button" igxButton="icon" (click)="scrollRight($event)" igxRightButtonStyle>
            <igx-icon fontSet="material">navigate_next</igx-icon>
        </button>
    </div>
    <div class="igx-tabs__content-fixed">
        <div #contentsContainer class="igx-tabs__content-fluid">
            <ng-content></ng-content>
        </div>
    </div>
</div>`
            },] },
];
/** @nocollapse */
IgxTabsComponent.ctorParameters = () => [
    { type: ElementRef, },
];
IgxTabsComponent.propDecorators = {
    "tabs": [{ type: ViewChildren, args: [forwardRef(() => IgxTabItemComponent),] },],
    "groups": [{ type: ContentChildren, args: [forwardRef(() => IgxTabsGroupComponent),] },],
    "tabsType": [{ type: Input, args: ['tabsType',] },],
    "selectedIndex": [{ type: Input },],
    "onTabItemSelected": [{ type: Output },],
    "onTabItemDeselected": [{ type: Output },],
    "tabsContainer": [{ type: ViewChild, args: ['tabsContainer',] },],
    "headerContainer": [{ type: ViewChild, args: ['headerContainer',] },],
    "itemsContainer": [{ type: ViewChild, args: ['itemsContainer',] },],
    "contentsContainer": [{ type: ViewChild, args: ['contentsContainer',] },],
    "selectedIndicator": [{ type: ViewChild, args: ['selectedIndicator',] },],
    "viewPort": [{ type: ViewChild, args: ['viewPort',] },],
    "class": [{ type: HostBinding, args: ['attr.class',] },],
    "_selectedGroupHandler": [{ type: HostListener, args: ['onTabItemSelected', ['$event'],] },],
};
function IgxTabsComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTabsComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTabsComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxTabsComponent.propDecorators;
    /**
     * Provides an observable collection of all `IgxTabItemComponent`s.
     * ```typescript
     * const tabItems = this.myTabComponent.tabs;
     * ```
     * @type {?}
     */
    IgxTabsComponent.prototype.tabs;
    /**
     * Provides an observable collection of all `IgxTabsGroupComponent`s.
     * ```typescript
     * const groupItems = this.myTabComponent.tabs;
     * ```
     * @type {?}
     */
    IgxTabsComponent.prototype.groups;
    /**
     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.
     * By default the header sizing mode is `contentfit`.
     * ```html
     * <igx-tabs tabsType="fixed">
     *     <igx-tabs-group label="HOME">Home</igx-tabs-group>
     * </igx-tabs>
     * ```
     * @type {?}
     */
    IgxTabsComponent.prototype.tabsType;
    /**
     * An \@Input property that sets the value of the `selectedIndex`.
     * Default value is 0.
     * ```html
     * <igx-tabs selectedIndex="1">
     * ```
     * @type {?}
     */
    IgxTabsComponent.prototype.selectedIndex;
    /**
     * Emitted when a tab item is selected.
     * ```html
     * <igx-tabs (onTabItemSelected)="itemSelected($event)">
     *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
     *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
     * </igx-tabs>
     * ```
     * ```typescript
     * itemSelected(e){
     *      const tabGroup = e.group;
     *      const tabItem = e.tab;
     * }
     * ```
     * @type {?}
     */
    IgxTabsComponent.prototype.onTabItemSelected;
    /**
     * Emitted when a tab item is deselected.
     * ```html
     * <igx-tabs (onTabItemDeselected)="itemDeselected($event)">
     *      <igx-tabs-group label="Tab 1">This is Tab 1 content.</igx-tabs-group>
     *      <igx-tabs-group label="Tab 2">This is Tab 2 content.</igx-tabs-group>
     * </igx-tabs>
     * ```
     * ```typescript
     * itemDeselected(e){
     *      const tabGroup = e.group;
     *      const tabItem = e.tab;
     * }
     * ```
     * @type {?}
     */
    IgxTabsComponent.prototype.onTabItemDeselected;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.tabsContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.headerContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.itemsContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.contentsContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.selectedIndicator;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.viewPort;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.calculatedWidth;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.visibleItemsWidth;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabsComponent.prototype.offset;
    /** @type {?} */
    IgxTabsComponent.prototype._groupChanges$;
    /** @type {?} */
    IgxTabsComponent.prototype._element;
}
/**
 * The IgxTabsModule provides the {\@link IgxTabsComponent}, {\@link IgxTabsGroupComponent},
 * {\@link IgxTabItemComponent}, {\@link IgxTabItemTemplateDirective}, {\@link IgxRightButtonStyleDirective}
 * and {\@link IgxLeftButtonStyleDirective} inside your application.
 */
export class IgxTabsModule {
}
IgxTabsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxTabsComponent,
                    IgxTabsGroupComponent,
                    IgxTabItemComponent,
                    IgxTabItemTemplateDirective,
                    IgxRightButtonStyleDirective,
                    IgxLeftButtonStyleDirective],
                exports: [IgxTabsComponent,
                    IgxTabsGroupComponent,
                    IgxTabItemComponent,
                    IgxTabItemTemplateDirective,
                    IgxRightButtonStyleDirective,
                    IgxLeftButtonStyleDirective],
                imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]
            },] },
];
function IgxTabsModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTabsModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTabsModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,