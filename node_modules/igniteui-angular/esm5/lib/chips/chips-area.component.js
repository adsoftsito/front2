/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ContentChildren, ChangeDetectorRef, EventEmitter, HostBinding, Input, IterableDiffers, Output, QueryList, ElementRef } from '@angular/core';
import { IgxChipComponent } from './chip.component';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs/internal/Subject';
/**
 * @record
 */
export function IBaseChipsAreaEventArgs() { }
function IBaseChipsAreaEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IBaseChipsAreaEventArgs.prototype.originalEvent;
    /** @type {?} */
    IBaseChipsAreaEventArgs.prototype.owner;
}
/**
 * @record
 */
export function IChipsAreaReorderEventArgs() { }
function IChipsAreaReorderEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IChipsAreaReorderEventArgs.prototype.chipsArray;
}
/**
 * @record
 */
export function IChipsAreaSelectEventArgs() { }
function IChipsAreaSelectEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IChipsAreaSelectEventArgs.prototype.newSelection;
}
var IgxChipsAreaComponent = /** @class */ (function () {
    function IgxChipsAreaComponent(cdr, element, _iterableDiffers) {
        this.cdr = cdr;
        this.element = element;
        this._iterableDiffers = _iterableDiffers;
        /**
         * @hidden
         */
        this.class = '';
        /**
         * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.
         * Returns an array of `IgxChipComponent`s.
         * ```html
         * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onReorder)="changedOrder($event)"></igx-chips-area>
         * ```
         * ```typescript
         * public changedOrder(event: IChipsAreaReorderEventArgs){
         *      let chips: IgxChipComponent[] = event.chipsArray;
         * }
         * ```
         */
        this.onReorder = new EventEmitter();
        /**
         * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.
         * Fired after the chips area is initialized if there are initially selected chips as well.
         * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.
         * ```html
         * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onSelection)="selection($event)"></igx-chips-area>
         * ```
         * ```typescript
         * public selection(event: IChipsAreaSelectEventArgs){
         *      let selectedChips: IgxChipComponent[] = event.newSelection;
         * }
         */
        this.onSelection = new EventEmitter();
        /**
         * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.
         * ```html
         * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onMoveStart)="moveStart($event)"></igx-chips-area>
         * ```
         * ```typescript
         * moveStart(event: IBaseChipsAreaEventArgs){
         *      let chipArea = event.owner;
         * }
         * ```
         */
        this.onMoveStart = new EventEmitter();
        /**
         * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.
         * ```html
         * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onMoveEnd)="moveEnd($event)"></igx-chips-area>
         * ```
         * ```typescript
         * moveEnd(event: IBaseChipsAreaEventArgs){
         *      let chipArea = event.owner;
         * }
         * ```
         */
        this.onMoveEnd = new EventEmitter();
        this._differ = null;
        this.selectedChips = [];
        this.destroy$ = new Subject();
        this._differ = this._iterableDiffers.find([]).create(null);
    }
    Object.defineProperty(IgxChipsAreaComponent.prototype, "hostClass", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            var /** @type {?} */ classes = ['igx-chip-area'];
            classes.push(this.class);
            return classes.join(' ');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @return {?}
     */
    IgxChipsAreaComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.
        if (this.chipsList.length) {
            this.selectedChips = this.chipsList.filter(function (item) { return item.selected; });
            if (this.selectedChips.length) {
                this.onSelection.emit({
                    originalEvent: null,
                    newSelection: this.selectedChips,
                    owner: this
                });
            }
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxChipsAreaComponent.prototype.ngDoCheck = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.chipsList) {
            var /** @type {?} */ changes = this._differ.diff(this.chipsList.toArray());
            if (changes) {
                changes.forEachAddedItem(function (addedChip) {
                    addedChip.item.onMoveStart.pipe(takeUntil(_this.destroy$)).subscribe(function (args) {
                        _this.onChipMoveStart(args);
                    });
                    addedChip.item.onMoveEnd.pipe(takeUntil(_this.destroy$)).subscribe(function (args) {
                        _this.onChipMoveEnd(args);
                    });
                    addedChip.item.onDragEnter.pipe(takeUntil(_this.destroy$)).subscribe(function (args) {
                        _this.onChipDragEnter(args);
                    });
                    addedChip.item.onKeyDown.pipe(takeUntil(_this.destroy$)).subscribe(function (args) {
                        _this.onChipKeyDown(args);
                    });
                    if (addedChip.item.selectable) {
                        addedChip.item.onSelection.pipe(takeUntil(_this.destroy$)).subscribe(function (args) {
                            _this.onChipSelectionChange(args);
                        });
                    }
                });
                this.modifiedChipsArray = this.chipsList.toArray();
            }
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxChipsAreaComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxChipsAreaComponent.prototype.onChipKeyDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        var /** @type {?} */ orderChanged = false;
        var /** @type {?} */ chipsArray = this.chipsList.toArray();
        var /** @type {?} */ dragChipIndex = chipsArray.findIndex(function (el) { return el === event.owner; });
        if (event.originalEvent.shiftKey === true) {
            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {
                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);
                if (orderChanged) {
                    setTimeout(function () {
                        _this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();
                    });
                }
            }
            else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {
                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);
            }
        }
        else {
            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {
                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();
            }
            else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&
                dragChipIndex < chipsArray.length - 1) {
                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();
            }
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxChipsAreaComponent.prototype.onChipMoveStart = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onMoveStart.emit({
            originalEvent: event.originalEvent,
            owner: this
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxChipsAreaComponent.prototype.onChipMoveEnd = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onMoveEnd.emit({
            originalEvent: event.originalEvent,
            owner: this
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxChipsAreaComponent.prototype.onChipDragEnter = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ dropChipRect = event.owner.elementRef.nativeElement.getBoundingClientRect();
        var /** @type {?} */ dropChipIndex = this.chipsList.toArray().findIndex(function (el) { return el === event.owner; });
        var /** @type {?} */ dragChipIndex = this.chipsList.toArray().findIndex(function (el) { return el === event.dragChip; });
        if (dragChipIndex < dropChipIndex) {
            // from the left to right
            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);
        }
        else {
            // from the right to left
            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} chipIndex
     * @param {?} targetIndex
     * @param {?} shiftRestLeft
     * @param {?} originalEvent
     * @return {?}
     */
    IgxChipsAreaComponent.prototype.positionChipAtIndex = /**
     * @hidden
     * @param {?} chipIndex
     * @param {?} targetIndex
     * @param {?} shiftRestLeft
     * @param {?} originalEvent
     * @return {?}
     */
    function (chipIndex, targetIndex, shiftRestLeft, originalEvent) {
        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||
            targetIndex < 0 || this.chipsList.length <= targetIndex) {
            return false;
        }
        var /** @type {?} */ chipsArray = this.chipsList.toArray();
        var /** @type {?} */ result = [];
        for (var /** @type {?} */ i = 0; i < chipsArray.length; i++) {
            if (shiftRestLeft) {
                if (chipIndex <= i && i < targetIndex) {
                    result.push(chipsArray[i + 1]);
                }
                else if (i === targetIndex) {
                    result.push(chipsArray[chipIndex]);
                }
                else {
                    result.push(chipsArray[i]);
                }
            }
            else {
                if (targetIndex < i && i <= chipIndex) {
                    result.push(chipsArray[i - 1]);
                }
                else if (i === targetIndex) {
                    result.push(chipsArray[chipIndex]);
                }
                else {
                    result.push(chipsArray[i]);
                }
            }
        }
        this.modifiedChipsArray = result;
        var /** @type {?} */ eventData = {
            chipsArray: this.modifiedChipsArray,
            originalEvent: originalEvent,
            owner: this
        };
        this.onReorder.emit(eventData);
        return true;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxChipsAreaComponent.prototype.onChipSelectionChange = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.selected) {
            this.selectedChips.push(event.owner);
        }
        else if (!event.selected) {
            this.selectedChips = this.selectedChips.filter(function (chip) {
                return chip.id !== event.owner.id;
            });
        }
        this.onSelection.emit({
            originalEvent: event.originalEvent,
            newSelection: this.selectedChips,
            owner: this
        });
    };
    IgxChipsAreaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-chips-area',
                    template: "<ng-content></ng-content>\n",
                },] },
    ];
    /** @nocollapse */
    IgxChipsAreaComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
        { type: ElementRef, },
        { type: IterableDiffers, },
    ]; };
    IgxChipsAreaComponent.propDecorators = {
        "class": [{ type: Input },],
        "hostClass": [{ type: HostBinding, args: ['attr.class',] },],
        "width": [{ type: HostBinding, args: ['style.width.px',] }, { type: Input },],
        "height": [{ type: HostBinding, args: ['style.height.px',] }, { type: Input },],
        "onReorder": [{ type: Output },],
        "onSelection": [{ type: Output },],
        "onMoveStart": [{ type: Output },],
        "onMoveEnd": [{ type: Output },],
        "chipsList": [{ type: ContentChildren, args: [IgxChipComponent,] },],
    };
    return IgxChipsAreaComponent;
}());
export { IgxChipsAreaComponent };
function IgxChipsAreaComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxChipsAreaComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxChipsAreaComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxChipsAreaComponent.propDecorators;
    /**
     * @hidden
     * @type {?}
     */
    IgxChipsAreaComponent.prototype.class;
    /**
     * An \@Input property that sets the width of the `IgxChipsAreaComponent`.
     * ```html
     * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onReorder)="chipsOrderChanged($event)"></igx-chips-area>
     * ```
     * @type {?}
     */
    IgxChipsAreaComponent.prototype.width;
    /**
     * An \@Input property that sets the height of the `IgxChipsAreaComponent`.
     * ```html
     * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onReorder)="chipsOrderChanged($event)"></igx-chips-area>
     * ```
     * @type {?}
     */
    IgxChipsAreaComponent.prototype.height;
    /**
     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.
     * Returns an array of `IgxChipComponent`s.
     * ```html
     * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onReorder)="changedOrder($event)"></igx-chips-area>
     * ```
     * ```typescript
     * public changedOrder(event: IChipsAreaReorderEventArgs){
     *      let chips: IgxChipComponent[] = event.chipsArray;
     * }
     * ```
     * @type {?}
     */
    IgxChipsAreaComponent.prototype.onReorder;
    /**
     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.
     * Fired after the chips area is initialized if there are initially selected chips as well.
     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.
     * ```html
     * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onSelection)="selection($event)"></igx-chips-area>
     * ```
     * ```typescript
     * public selection(event: IChipsAreaSelectEventArgs){
     *      let selectedChips: IgxChipComponent[] = event.newSelection;
     * }
     * @type {?}
     */
    IgxChipsAreaComponent.prototype.onSelection;
    /**
     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.
     * ```html
     * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onMoveStart)="moveStart($event)"></igx-chips-area>
     * ```
     * ```typescript
     * moveStart(event: IBaseChipsAreaEventArgs){
     *      let chipArea = event.owner;
     * }
     * ```
     * @type {?}
     */
    IgxChipsAreaComponent.prototype.onMoveStart;
    /**
     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.
     * ```html
     * <igx-chips-area #chipsArea [width]="'300'" [height]="'10'" (onMoveEnd)="moveEnd($event)"></igx-chips-area>
     * ```
     * ```typescript
     * moveEnd(event: IBaseChipsAreaEventArgs){
     *      let chipArea = event.owner;
     * }
     * ```
     * @type {?}
     */
    IgxChipsAreaComponent.prototype.onMoveEnd;
    /**
     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.
     * ```typescript
     * ngAfterViewInit(){
     *    let chips = this.chipsArea.chipsList;
     * }
     * ```
     * @type {?}
     */
    IgxChipsAreaComponent.prototype.chipsList;
    /** @type {?} */
    IgxChipsAreaComponent.prototype.modifiedChipsArray;
    /** @type {?} */
    IgxChipsAreaComponent.prototype._differ;
    /** @type {?} */
    IgxChipsAreaComponent.prototype.selectedChips;
    /** @type {?} */
    IgxChipsAreaComponent.prototype.destroy$;
    /** @type {?} */
    IgxChipsAreaComponent.prototype.cdr;
    /** @type {?} */
    IgxChipsAreaComponent.prototype.element;
    /** @type {?} */
    IgxChipsAreaComponent.prototype._iterableDiffers;
}

//# sourceMappingURL=data:application/json;base64,