/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Component, ElementRef, EventEmitter, HostBinding, Input, NgModule, Output, Renderer2, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/** @enum {number} */
var SliderType = {
    /**
         * Slider with single thumb.
         */
    SLIDER: 0,
    /**
         *  Range slider with multiple thumbs, that can mark the range.
         */
    RANGE: 1,
};
export { SliderType };
SliderType[SliderType.SLIDER] = "SLIDER";
SliderType[SliderType.RANGE] = "RANGE";
/** @enum {number} */
var SliderHandle = {
    FROM: 0,
    TO: 1,
};
SliderHandle[SliderHandle.FROM] = "FROM";
SliderHandle[SliderHandle.TO] = "TO";
/**
 * @record
 */
export function IRangeSliderValue() { }
function IRangeSliderValue_tsickle_Closure_declarations() {
    /** @type {?} */
    IRangeSliderValue.prototype.lower;
    /** @type {?} */
    IRangeSliderValue.prototype.upper;
}
/**
 * @record
 */
export function ISliderValueChangeEventArgs() { }
function ISliderValueChangeEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    ISliderValueChangeEventArgs.prototype.oldValue;
    /** @type {?} */
    ISliderValueChangeEventArgs.prototype.value;
}
var /** @type {?} */ noop = function () {
};
var Éµ0 = noop;
var /** @type {?} */ NEXT_ID = 0;
/**
 * **Ignite UI for Angular Slider** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)
 *
 * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track
 * can be defined as continuous or stepped, and you can choose between single and range slider types.
 *
 * Example:
 * ```html
 * <igx-slider id="slider"
 *            [minValue]="0" [maxValue]="100"
 *            [isContinuous]=true [(ngModel)]="volume">
 * </igx-slider>
 * ```
 */
var IgxSliderComponent = /** @class */ (function () {
    function IgxSliderComponent(renderer) {
        this.renderer = renderer;
        /**
         * An \@Input property that sets the value of the `id` attribute.
         * If not provided it will be automatically generated.
         * ```html
         * <igx-slider [id]="'igx-slider-32'" [(ngModel)]="task.percentCompleted" [step]="5" [lowerBound]="20">
         * ```
         */
        this.id = "igx-slider-" + NEXT_ID++;
        /**
         * An \@Input property that marks the `IgxSliderComponent` as continuous.
         * By default is considered that the `IgxSliderComponent` is discrete.
         * Discrete `IgxSliderComponent` does not have ticks and does not shows bubble labels for values.
         * ```html
         * <igx-slider #slider [isContinuous]="'true'" [(ngModel)]="task.percentCompleted" [step]="5" [lowerBound]="20">
         * ```
         */
        this.isContinuous = false;
        /**
         * An \@Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.
         * ```typescript
         * sliderType: SliderType = SliderType.RANGE;
         * //...
         * ```
         * ```html
         * <igx-slider #slider2 [type]="sliderType" [(ngModel)]="rangeValue" [minValue]="0" [maxValue]="100">
         * ```
         */
        this.type = SliderType.SLIDER;
        /**
         * An \@Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.
         * ```html
         * <igx-slider #slider [thumbLabelVisibilityDuration]="3000" [(ngModel)]="task.percentCompleted" [step]="5">
         * ```
         */
        this.thumbLabelVisibilityDuration = 750;
        /**
         * An \@Input property that sets the incremental/decremental step of the value when dragging the thumb.
         * The default step is 1, and step should not be less or equal than 0.
         * ```html
         * <igx-slider #slider [(ngModel)]="task.percentCompleted" [step]="5">
         * ```
         */
        this.step = 1;
        /**
         * This event is emitted when user has stopped interacting the thumb and value is changed.
         * ```typescript
         * public change(event){
         *    alert("The value has been changed!");
         * }
         * ```
         * ```html
         * <igx-slider (onValueChange)="change($event)" #slider [(ngModel)]="task.percentCompleted" [step]="5">
         * ```
         */
        this.onValueChange = new EventEmitter();
        /**
         * @hidden
         */
        this.isActiveLabel = false;
        this.activeHandle = SliderHandle.TO;
        this._minValue = 0;
        this.width = 0;
        this.xOffset = 0;
        this.xPointer = 0;
        this.pPointer = 0;
        this.pMin = 0;
        this.pMax = 1;
        this.hasViewInit = false;
        this._maxValue = 100;
        this._onChangeCallback = noop;
        this._onTouchedCallback = noop;
    }
    Object.defineProperty(IgxSliderComponent.prototype, "isRange", {
        get: /**
         * Returns whether the `IgxSliderComponent` type is RANGE.
         * ```typescript
         * \@ViewChild("slider")
         * public slider: IgxSliderComponent;
         * ngAfterViewInit(){
         *    let sliderRange = this.slider.isRange;
         * }
         * ```
         * @return {?}
         */
        function () {
            var /** @type {?} */ isRange = this.type === SliderType.RANGE;
            return isRange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "maxValue", {
        get: /**
         * Returns the maximum value for the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider")
         * public slider: IgxSliderComponent;
         * ngAfterViewInit(){
         *    let sliderMax = this.slider.maxValue;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._maxValue;
        },
        set: /**
         * Sets the maximal value for the `IgxSliderComponent`.
         * The default maximum value is 100.
         * ```html
         * <igx-slider [type]="sliderType" [minValue]="56" [maxValue]="256">
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value <= this._minValue) {
                this._maxValue = this._minValue + 1;
            }
            else {
                this._maxValue = value;
            }
            if (this._trackUpperBound) {
                this._upperBound = this._maxValue;
            }
            this.invalidateValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "minValue", {
        get: /**
         * Returns the minimal value of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider2")
         * public slider: IgxSliderComponent;
         * ngAfterViewInit(){
         *    let sliderMin = this.slider.minValue;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._minValue;
        },
        set: /**
         * Sets the minimal value for the `IgxSliderComponent`.
         * The default minimal value is 0.
         * ```html
         * <igx-slider [type]="sliderType" [minValue]="56" [maxValue]="100">
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value >= this.maxValue) {
                this._minValue = this.maxValue - 1;
            }
            else {
                this._minValue = value;
            }
            if (this._trackLowerBound) {
                this._lowerBound = this._minValue;
            }
            this.invalidateValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "lowerBound", {
        get: /**
         * Returns the lower boundary of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider")
         * public slider: IgxSliderComponent;
         * ngAfterViewInit(){
         *    let sliderLowBound = this.slider.lowerBound;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._lowerBound;
        },
        set: /**
         * Sets the lower boundary of the `IgxSliderComponent`.
         * If not set is the same as min value.
         * ```html
         * <igx-slider [step]="5" [lowerBound]="20">
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._trackLowerBound) {
                this._trackLowerBound = false;
            }
            if (value >= this.upperBound) {
                this._lowerBound = this.minValue;
                return;
            }
            this._lowerBound = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "upperBound", {
        get: /**
         * Returns the upper boundary of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider")
         * public slider: IgxSliderComponent;
         * ngAfterViewInit(){
         *    let sliderUpBound = this.slider.upperBound;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._upperBound;
        },
        set: /**
         * Sets the upper boundary of the `IgxSliderComponent`.
         * If not set is the same as max value.
         * ```html
         * <igx-slider [step]="5" [upperBound]="20">
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._trackUpperBound) {
                this._trackUpperBound = false;
            }
            if (value <= this.lowerBound) {
                this._upperBound = this.maxValue;
                return;
            }
            this._upperBound = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "lowerValue", {
        get: /**
         * Returns the lower value of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider")
         * public slider: IgxSliderComponent;
         * public lowValue(event){
         *    let sliderLowValue = this.slider.lowerValue;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._lowerValue;
        },
        set: /**
         * Sets the lower value of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider2")
         * public slider: IgxSliderComponent;
         * public lowValue(event){
         *    this.slider.lowerValue = 120;
         * }
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value < this.lowerBound || this.upperBound < value) {
                return;
            }
            if (this.isRange && value > this.upperValue) {
                return;
            }
            this._lowerValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "upperValue", {
        get: /**
         * Returns the upper value of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider2")
         * public slider: IgxSliderComponent;
         * public upperValue(event){
         *    let upperValue = this.slider.upperValue;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._upperValue;
        },
        set: /**
         * Sets the upper value of the `IgxSliderComponent`.
         * ```typescript
         * \@ViewChild("slider2")
         * public slider: IgxSliderComponent;
         * public upperValue(event){
         *    this.slider.upperValue = 120;
         * }
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value < this.lowerBound || this.upperBound < value) {
                return;
            }
            if (this.isRange && value < this.lowerValue) {
                return;
            }
            this._upperValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderComponent.prototype, "value", {
        get: /**
         * Returns the slider value. If the slider is of type SLIDER the returned value is number.
         * If the slider type is RANGE the returned value is object containing lower and upper properties for the values.
         * ```typescript
         * \@ViewChild("slider2")
         * public slider: IgxSliderComponent;
         * public sliderValue(event){
         *    let sliderVal = this.slider.value;
         * }
         * ```
         * @return {?}
         */
        function () {
            if (this.isRange) {
                return {
                    lower: this.snapValueToStep(this.lowerValue),
                    upper: this.snapValueToStep(this.upperValue)
                };
            }
            else {
                var /** @type {?} */ val = this.snapValueToStep(this.upperValue);
                return val;
            }
        },
        set: /**
         * Sets the slider value.
         * If the slider is of type SLIDER the argument is number. By default if no value is set the default value is
         * same as lower upper bound.
         * If the slider type is RANGE the the argument is object containing lower and upper properties for the values.
         * By default if no value is set the default value is for lower value it is the same as lower bound and if no
         * value is set for the upper value it is the same as the upper bound.
         * ```typescript
         * rangeValue = {
         *   lower: 30,
         *   upper: 60
         * };
         * ```
         * ```html
         * <igx-slider [type]="sliderType" [(ngModel)]="rangeValue" [minValue]="56" [maxValue]="256">
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!this.isRange) {
                this.upperValue = this.snapValueToStep(/** @type {?} */ (value));
            }
            else {
                this.upperValue =
                    this.snapValueToStep((/** @type {?} */ (value)) == null ? null : (/** @type {?} */ (value)).upper);
                this.lowerValue =
                    this.snapValueToStep((/** @type {?} */ (value)) == null ? null : (/** @type {?} */ (value)).lower);
            }
            this._onChangeCallback(this.value);
            if (this.hasViewInit) {
                this.positionHandlesAndUpdateTrack();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @return {?}
     */
    IgxSliderComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.lowerBound === undefined) {
            this.lowerBound = this.minValue;
            this._trackLowerBound = true;
        }
        if (this.upperBound === undefined) {
            this.upperBound = this.maxValue;
            this._trackUpperBound = true;
        }
        if (this.isRange) {
            if (Number.isNaN((/** @type {?} */ (this.value)).lower)) {
                this.value = {
                    lower: this.lowerBound,
                    upper: (/** @type {?} */ (this.value)).upper
                };
            }
            if (Number.isNaN((/** @type {?} */ (this.value)).upper)) {
                this.value = {
                    lower: (/** @type {?} */ (this.value)).lower,
                    upper: this.upperBound
                };
            }
        }
        else {
            if (Number.isNaN(/** @type {?} */ (this.value))) {
                this.value = this.lowerBound;
            }
        }
        this.pMin = this.valueToFraction(this.lowerBound) || 0;
        this.pMax = this.valueToFraction(this.upperBound) || 1;
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxSliderComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.hasViewInit = true;
        this.positionHandlesAndUpdateTrack();
        this.setTickInterval();
    };
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxSliderComponent.prototype.writeValue = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxSliderComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChangeCallback = fn;
    };
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxSliderComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouchedCallback = fn;
    };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    IgxSliderComponent.prototype.getEditElement = /**
     * @hidden
     * @return {?}
     */
    function () {
        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxSliderComponent.prototype.showThumbsLabels = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        if (this.isContinuous) {
            return;
        }
        if (this.timer !== null) {
            clearInterval(this.timer);
        }
        this.isActiveLabel = true;
    };
    /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    IgxSliderComponent.prototype.onFocus = /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.isRange && $event.target === this.thumbFrom.nativeElement) {
            this.activeHandle = SliderHandle.FROM;
        }
        if ($event.target === this.thumbTo.nativeElement) {
            this.activeHandle = SliderHandle.TO;
        }
        this.toggleThumbLabel();
    };
    /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    IgxSliderComponent.prototype.onPanEnd = /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.hideThumbsLabels();
        this.emitValueChanged(null);
    };
    /**
     *
     * @hidden
     * @return {?}
     */
    IgxSliderComponent.prototype.hideThumbLabelsOnBlur = /**
     *
     * @hidden
     * @return {?}
     */
    function () {
        if (this.timer !== null) {
            clearInterval(this.timer);
        }
        this.isActiveLabel = false;
    };
    /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    IgxSliderComponent.prototype.onKeyDown = /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled) {
            return true;
        }
        var /** @type {?} */ incrementSign;
        if ($event.key.endsWith('Left')) {
            incrementSign = -1;
        }
        else if ($event.key.endsWith('Right')) {
            incrementSign = 1;
        }
        else {
            return;
        }
        var /** @type {?} */ value = this.value;
        if (this.isRange) {
            if (this.activeHandle === SliderHandle.FROM) {
                var /** @type {?} */ newLower = (/** @type {?} */ (this.value)).lower + incrementSign * this.step;
                if (newLower >= (/** @type {?} */ (this.value)).upper) {
                    this.thumbTo.nativeElement.focus();
                    return;
                }
                this.value = {
                    lower: newLower,
                    upper: (/** @type {?} */ (this.value)).upper
                };
            }
            else {
                var /** @type {?} */ newUpper = (/** @type {?} */ (this.value)).upper + incrementSign * this.step;
                if (newUpper <= (/** @type {?} */ (this.value)).lower) {
                    this.thumbFrom.nativeElement.focus();
                    return;
                }
                this.value = {
                    lower: (/** @type {?} */ (this.value)).lower,
                    upper: (/** @type {?} */ (this.value)).upper + incrementSign * this.step
                };
            }
        }
        else {
            this.value = /** @type {?} */ (this.value) + incrementSign * this.step;
        }
        if (this.hasValueChanged(value)) {
            this.emitValueChanged(value);
        }
        this.showThumbsLabels();
    };
    /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    IgxSliderComponent.prototype.onTap = /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var /** @type {?} */ value = this.value;
        this.update($event);
        if (this.hasValueChanged(value)) {
            this.emitValueChanged(value);
        }
    };
    /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    IgxSliderComponent.prototype.update = /**
     *
     * @hidden
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled) {
            return;
        }
        if ($event.type === 'tap') {
            this.toggleThumbLabel();
        }
        // Set width and offset first
        this.setSliderWidth();
        this.setSliderOffset();
        // Then get pointer coordinates
        this.setPointerPosition($event);
        this.setPointerPercent();
        // Find the closest handle if dual slider
        if (this.isRange) {
            this.closestHandle();
        }
        // Update To/From Values
        this.setValues();
        // this.printInfo();
        // Finally do positionHandlesAndUpdateTrack the DOM
        // based on data values
        this.positionHandlesAndUpdateTrack();
        this._onTouchedCallback();
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxSliderComponent.prototype.hideThumbsLabels = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.disabled) {
            return;
        }
        if (this.isContinuous) {
            return;
        }
        this.timer = setTimeout(function () { return _this.isActiveLabel = false; }, this.thumbLabelVisibilityDuration);
    };
    /**
     * @return {?}
     */
    IgxSliderComponent.prototype.invalidateValue = /**
     * @return {?}
     */
    function () {
        if (!this.isRange) {
            if (this.value >= this._lowerBound && this.value <= this._upperBound) {
                this.positionHandlesAndUpdateTrack();
            }
            else if (this.value < this._lowerBound) {
                this.value = this._lowerBound;
            }
            else if (this.value > this._upperBound) {
                this.value = this._upperBound;
            }
        }
        else {
            var /** @type {?} */ value = /** @type {?} */ (this.value);
            if (value.lower >= this._lowerBound && value.lower <= this._upperBound) {
                this.positionHandlesAndUpdateTrack();
            }
            else if (value.lower < this._lowerBound) {
                this.value = {
                    lower: this._lowerBound,
                    upper: value.upper
                };
            }
            else if (value.lower > this._upperBound) {
                this.value = {
                    lower: value.lower,
                    upper: this._upperBound
                };
            }
            if (value.upper >= this._lowerBound && value.upper <= this._upperBound) {
                this.positionHandlesAndUpdateTrack();
            }
            else if (value.upper < this._lowerBound) {
                this.value = {
                    lower: this._lowerBound,
                    upper: value.upper
                };
            }
            else if (value.upper > this._upperBound) {
                this.value = {
                    lower: value.lower,
                    upper: this._upperBound
                };
            }
        }
    };
    /**
     * @param {?} color
     * @param {?} interval
     * @return {?}
     */
    IgxSliderComponent.prototype.generateTickMarks = /**
     * @param {?} color
     * @param {?} interval
     * @return {?}
     */
    function (color, interval) {
        return "repeating-linear-gradient(\n            " + 'to left' + ",\n            " + color + ",\n            " + color + " 1.5px,\n            transparent 1.5px,\n            transparent " + interval + "%\n        ), repeating-linear-gradient(\n            " + 'to right' + ",\n            " + color + ",\n            " + color + " 1.5px,\n            transparent 1.5px,\n            transparent " + interval + "%\n        )";
    };
    /**
     * @return {?}
     */
    IgxSliderComponent.prototype.toggleThumbLabel = /**
     * @return {?}
     */
    function () {
        this.showThumbsLabels();
        this.hideThumbsLabels();
    };
    /**
     * @return {?}
     */
    IgxSliderComponent.prototype.getSliderOffset = /**
     * @return {?}
     */
    function () {
        return this.xOffset;
    };
    /**
     * @param {?} num
     * @return {?}
     */
    IgxSliderComponent.prototype.toFixed = /**
     * @param {?} num
     * @return {?}
     */
    function (num) {
        num = parseFloat(num.toFixed(20));
        return num;
    };
    /**
     * @param {?} handle
     * @param {?} position
     * @return {?}
     */
    IgxSliderComponent.prototype.positionHandle = /**
     * @param {?} handle
     * @param {?} position
     * @return {?}
     */
    function (handle, position) {
        handle.nativeElement.style.left = this.valueToFraction(position) * 100 + "%";
    };
    /**
     * @return {?}
     */
    IgxSliderComponent.prototype.positionHandlesAndUpdateTrack = /**
     * @return {?}
     */
    function () {
        if (!this.isRange) {
            this.positionHandle(this.thumbTo, /** @type {?} */ (this.value));
        }
        else {
            this.positionHandle(this.thumbTo, (/** @type {?} */ (this.value)).upper);
            this.positionHandle(this.thumbFrom, (/** @type {?} */ (this.value)).lower);
        }
        this.updateTrack();
    };
    /**
     * @return {?}
     */
    IgxSliderComponent.prototype.closestHandle = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;
        var /** @type {?} */ toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;
        var /** @type {?} */ match = this.closestTo(this.xPointer, [fromOffset, toOffset]);
        if (match === toOffset) {
            this.thumbTo.nativeElement.focus();
        }
        else if (match === fromOffset) {
            this.thumbFrom.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    IgxSliderComponent.prototype.setTickInterval = /**
     * @return {?}
     */
    function () {
        if (this.isContinuous) {
            return;
        }
        var /** @type {?} */ interval = this.step > 1 ? this.step : null;
        this.renderer.setStyle(this.ticks.nativeElement, 'background', this.generateTickMarks('white', interval));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IgxSliderComponent.prototype.snapValueToStep = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ valueModStep = (value - this.minValue) % this.step;
        var /** @type {?} */ snapValue = value - valueModStep;
        if (Math.abs(valueModStep) * 2 >= this.step) {
            snapValue += (valueModStep > 0) ? this.step : (-this.step);
        }
        return parseFloat(snapValue.toFixed(20));
    };
    /**
     * @param {?} goal
     * @param {?} positions
     * @return {?}
     */
    IgxSliderComponent.prototype.closestTo = /**
     * @param {?} goal
     * @param {?} positions
     * @return {?}
     */
    function (goal, positions) {
        return positions.reduce(function (previous, current) {
            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);
        });
    };
    /**
     * @return {?}
     */
    IgxSliderComponent.prototype.setValues = /**
     * @return {?}
     */
    function () {
        if (this.activeHandle === SliderHandle.TO) {
            if (this.isRange) {
                this.value = {
                    lower: (/** @type {?} */ (this.value)).lower,
                    upper: this.fractionToValue(this.pPointer)
                };
            }
            else {
                this.value = this.fractionToValue(this.pPointer);
            }
        }
        if (this.activeHandle === SliderHandle.FROM) {
            this.value = {
                lower: this.fractionToValue(this.pPointer),
                upper: (/** @type {?} */ (this.value)).upper
            };
        }
    };
    /**
     * @return {?}
     */
    IgxSliderComponent.prototype.setSliderWidth = /**
     * @return {?}
     */
    function () {
        this.width = this.slider.nativeElement.offsetWidth;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    IgxSliderComponent.prototype.setPointerPosition = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.xPointer = e.center.x - this.getSliderOffset();
    };
    /**
     * @return {?}
     */
    IgxSliderComponent.prototype.setSliderOffset = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ rect = this.slider.nativeElement.getBoundingClientRect();
        this.xOffset = rect.left;
    };
    /**
     * @return {?}
     */
    IgxSliderComponent.prototype.setPointerPercent = /**
     * @return {?}
     */
    function () {
        this.pPointer = this.limit(this.toFixed(this.xPointer / this.width));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IgxSliderComponent.prototype.valueToFraction = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.limit((value - this.minValue) / (this.maxValue - this.minValue));
    };
    /**
     * @param {?} fraction
     * @return {?}
     */
    IgxSliderComponent.prototype.fractionToValue = /**
     * @param {?} fraction
     * @return {?}
     */
    function (fraction) {
        var /** @type {?} */ max = this.maxValue;
        var /** @type {?} */ min = this.minValue;
        return (max - min) * fraction + min;
    };
    /**
     * @param {?} fraction
     * @return {?}
     */
    IgxSliderComponent.prototype.fractionToPercent = /**
     * @param {?} fraction
     * @return {?}
     */
    function (fraction) {
        return this.toFixed(fraction * 100);
    };
    /**
     * @param {?} num
     * @return {?}
     */
    IgxSliderComponent.prototype.limit = /**
     * @param {?} num
     * @return {?}
     */
    function (num) {
        return Math.max(this.pMin, Math.min(num, this.pMax));
    };
    /**
     * @return {?}
     */
    IgxSliderComponent.prototype.updateTrack = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ fromPosition = this.valueToFraction(this.lowerValue);
        var /** @type {?} */ toPosition = this.valueToFraction(this.upperValue);
        var /** @type {?} */ positionGap = (this.valueToFraction(this.upperValue) - this.valueToFraction(this.lowerValue));
        if (!this.isRange) {
            this.track.nativeElement.style.transform = "scaleX(" + toPosition + ")";
        }
        if (this.isRange) {
            this.track.nativeElement.style.transform = "scaleX(" + 1 + ")";
            this.track.nativeElement.style.left = fromPosition * 100 + "%";
            this.track.nativeElement.style.width = positionGap * 100 + "%";
        }
    };
    /**
     * @param {?} oldValue
     * @return {?}
     */
    IgxSliderComponent.prototype.hasValueChanged = /**
     * @param {?} oldValue
     * @return {?}
     */
    function (oldValue) {
        var /** @type {?} */ isSliderWithDifferentValue = !this.isRange && oldValue !== this.value;
        var /** @type {?} */ isRangeWithOneDifferentValue = this.isRange &&
            ((/** @type {?} */ (oldValue)).lower !== (/** @type {?} */ (this.value)).lower ||
                (/** @type {?} */ (oldValue)).upper !== (/** @type {?} */ (this.value)).upper);
        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;
    };
    /**
     * @param {?} oldValue
     * @return {?}
     */
    IgxSliderComponent.prototype.emitValueChanged = /**
     * @param {?} oldValue
     * @return {?}
     */
    function (oldValue) {
        this.onValueChange.emit({ oldValue: oldValue, value: this.value });
    };
    IgxSliderComponent.decorators = [
        { type: Component, args: [{
                    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],
                    selector: 'igx-slider',
                    template: "<div class=\"igx-slider\" [class.igx-slider--disabled]=\"disabled\" #slider (panstart)=\"showThumbsLabels()\" (panend)=\"onPanEnd($event)\"\n    (pan)=\"update($event)\" (tap)=\"onTap($event)\">\n    <div class=\"igx-slider__track\">\n        <div #track class=\"igx-slider__track-fill\"></div>\n        <div #ticks class=\"igx-slider__track-ticks\"></div>\n    </div>\n    <div class=\"igx-slider__thumbs\">\n        <div (keydown)=\"onKeyDown($event);\" (keyup)=\"hideThumbsLabels()\" (blur)=\"hideThumbLabelsOnBlur()\" (focus)=\"onFocus($event);\"\n            *ngIf=\"isRange\" class=\"igx-slider__thumb-from\" tabindex=\"1\" [ngClass]=\"{ 'igx-slider__thumb-from--active': isActiveLabel }\"\n            #thumbFrom>\n            <span class=\"label\">{{ lowerValue}}</span>\n            <span class=\"dot\"></span>\n        </div>\n        <div (keydown)=\"onKeyDown($event);\" (keyup)=\"hideThumbsLabels()\" (blur)=\"hideThumbLabelsOnBlur()\" (focus)=\"onFocus($event);\"\n            class=\"igx-slider__thumb-to\" tabindex=\"1\" [ngClass]=\"{ 'igx-slider__thumb-to--active': isActiveLabel }\" #thumbTo>\n            <span *ngIf=\"isRange\" class=\"label\">{{ upperValue}}</span>\n            <span *ngIf=\"!isRange\" class=\"label\">{{ value }}</span>\n            <span class=\"dot\"></span>\n        </div>\n    </div>\n</div>\n"
                },] },
    ];
    /** @nocollapse */
    IgxSliderComponent.ctorParameters = function () { return [
        { type: Renderer2, },
    ]; };
    IgxSliderComponent.propDecorators = {
        "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
        "disabled": [{ type: Input },],
        "isContinuous": [{ type: Input },],
        "type": [{ type: Input },],
        "thumbLabelVisibilityDuration": [{ type: Input },],
        "step": [{ type: Input },],
        "onValueChange": [{ type: Output },],
        "slider": [{ type: ViewChild, args: ['slider',] },],
        "track": [{ type: ViewChild, args: ['track',] },],
        "ticks": [{ type: ViewChild, args: ['ticks',] },],
        "thumbFrom": [{ type: ViewChild, args: ['thumbFrom',] },],
        "thumbTo": [{ type: ViewChild, args: ['thumbTo',] },],
        "maxValue": [{ type: Input },],
        "minValue": [{ type: Input },],
        "lowerBound": [{ type: Input },],
        "upperBound": [{ type: Input },],
        "value": [{ type: Input },],
    };
    return IgxSliderComponent;
}());
export { IgxSliderComponent };
function IgxSliderComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxSliderComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxSliderComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxSliderComponent.propDecorators;
    /**
     * An \@Input property that sets the value of the `id` attribute.
     * If not provided it will be automatically generated.
     * ```html
     * <igx-slider [id]="'igx-slider-32'" [(ngModel)]="task.percentCompleted" [step]="5" [lowerBound]="20">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.id;
    /**
     * An \@Input property that disables or enables UI interaction.
     * ```html
     * <igx-slider #slider [disabled]="'true'" [(ngModel)]="task.percentCompleted" [step]="5" [lowerBound]="20">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.disabled;
    /**
     * An \@Input property that marks the `IgxSliderComponent` as continuous.
     * By default is considered that the `IgxSliderComponent` is discrete.
     * Discrete `IgxSliderComponent` does not have ticks and does not shows bubble labels for values.
     * ```html
     * <igx-slider #slider [isContinuous]="'true'" [(ngModel)]="task.percentCompleted" [step]="5" [lowerBound]="20">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.isContinuous;
    /**
     * An \@Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.
     * ```typescript
     * sliderType: SliderType = SliderType.RANGE;
     * //...
     * ```
     * ```html
     * <igx-slider #slider2 [type]="sliderType" [(ngModel)]="rangeValue" [minValue]="0" [maxValue]="100">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.type;
    /**
     * An \@Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.
     * ```html
     * <igx-slider #slider [thumbLabelVisibilityDuration]="3000" [(ngModel)]="task.percentCompleted" [step]="5">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.thumbLabelVisibilityDuration;
    /**
     * An \@Input property that sets the incremental/decremental step of the value when dragging the thumb.
     * The default step is 1, and step should not be less or equal than 0.
     * ```html
     * <igx-slider #slider [(ngModel)]="task.percentCompleted" [step]="5">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.step;
    /**
     * This event is emitted when user has stopped interacting the thumb and value is changed.
     * ```typescript
     * public change(event){
     *    alert("The value has been changed!");
     * }
     * ```
     * ```html
     * <igx-slider (onValueChange)="change($event)" #slider [(ngModel)]="task.percentCompleted" [step]="5">
     * ```
     * @type {?}
     */
    IgxSliderComponent.prototype.onValueChange;
    /**
     * @hidden
     * @type {?}
     */
    IgxSliderComponent.prototype.isActiveLabel;
    /** @type {?} */
    IgxSliderComponent.prototype.activeHandle;
    /** @type {?} */
    IgxSliderComponent.prototype.slider;
    /** @type {?} */
    IgxSliderComponent.prototype.track;
    /** @type {?} */
    IgxSliderComponent.prototype.ticks;
    /** @type {?} */
    IgxSliderComponent.prototype.thumbFrom;
    /** @type {?} */
    IgxSliderComponent.prototype.thumbTo;
    /** @type {?} */
    IgxSliderComponent.prototype._minValue;
    /** @type {?} */
    IgxSliderComponent.prototype.width;
    /** @type {?} */
    IgxSliderComponent.prototype.xOffset;
    /** @type {?} */
    IgxSliderComponent.prototype.xPointer;
    /** @type {?} */
    IgxSliderComponent.prototype.pPointer;
    /** @type {?} */
    IgxSliderComponent.prototype.pMin;
    /** @type {?} */
    IgxSliderComponent.prototype.pMax;
    /** @type {?} */
    IgxSliderComponent.prototype.hasViewInit;
    /** @type {?} */
    IgxSliderComponent.prototype.timer;
    /** @type {?} */
    IgxSliderComponent.prototype._maxValue;
    /** @type {?} */
    IgxSliderComponent.prototype._lowerBound;
    /** @type {?} */
    IgxSliderComponent.prototype._upperBound;
    /** @type {?} */
    IgxSliderComponent.prototype._lowerValue;
    /** @type {?} */
    IgxSliderComponent.prototype._upperValue;
    /** @type {?} */
    IgxSliderComponent.prototype._trackUpperBound;
    /** @type {?} */
    IgxSliderComponent.prototype._trackLowerBound;
    /** @type {?} */
    IgxSliderComponent.prototype._onChangeCallback;
    /** @type {?} */
    IgxSliderComponent.prototype._onTouchedCallback;
    /** @type {?} */
    IgxSliderComponent.prototype.renderer;
}
/**
 * The IgxSliderModule provides the {\@link IgxSliderComponent} inside your application.
 */
var IgxSliderModule = /** @class */ (function () {
    function IgxSliderModule() {
    }
    IgxSliderModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxSliderComponent],
                    exports: [IgxSliderComponent],
                    imports: [CommonModule]
                },] },
    ];
    return IgxSliderModule;
}());
export { IgxSliderModule };
function IgxSliderModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxSliderModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxSliderModule.ctorParameters;
}
export { Éµ0 };

//# sourceMappingURL=data:application/json;base64,