/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { GridBaseAPIService } from '../api.service';
import { DataUtil } from '../../data-operations/data-util';
import { cloneArray } from '../../core/utils';
export class IgxGridAPIService extends GridBaseAPIService {
    /**
     * @param {?} id
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @param {?} strategy
     * @return {?}
     */
    groupBy(id, fieldName, dir, ignoreCase, strategy) {
        const /** @type {?} */ groupingState = cloneArray(this.get(id).groupingExpressions);
        const /** @type {?} */ sortingState = cloneArray(this.get(id).sortingExpressions);
        strategy = strategy ? strategy : this.getSortStrategyPerColumn(id, fieldName);
        this.prepare_sorting_expression([sortingState, groupingState], { fieldName, dir, ignoreCase, strategy });
        this.get(id).groupingExpressions = groupingState;
        this.arrange_sorting_expressions(id);
    }
    /**
     * @param {?} id
     * @param {?} expressions
     * @return {?}
     */
    groupBy_multiple(id, expressions) {
        const /** @type {?} */ groupingState = cloneArray(this.get(id).groupingExpressions);
        const /** @type {?} */ sortingState = cloneArray(this.get(id).sortingExpressions);
        for (const /** @type {?} */ each of expressions) {
            each.strategy = each.strategy ? each.strategy : this.getSortStrategyPerColumn(id, each.fieldName);
            this.prepare_sorting_expression([sortingState, groupingState], each);
        }
        this.get(id).groupingExpressions = groupingState;
        this.arrange_sorting_expressions(id);
    }
    /**
     * @param {?} id
     * @param {?=} name
     * @return {?}
     */
    clear_groupby(id, name) {
        const /** @type {?} */ groupingState = cloneArray(this.get(id).groupingExpressions);
        const /** @type {?} */ sortingState = cloneArray(this.get(id).sortingExpressions);
        if (name) {
            const /** @type {?} */ names = typeof name === 'string' ? [name] : name;
            const /** @type {?} */ groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);
            const /** @type {?} */ newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);
            this.get(id).groupingExpressions = groupedCols;
            this.get(id).sortingExpressions = newSortingExpr;
            names.forEach((colName) => {
                const /** @type {?} */ grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);
                const /** @type {?} */ grpExpandState = this.get(id).groupingExpansionState;
                /* remove expansion states related to the cleared group
                                and all with deeper hierarchy than the cleared group */
                this.get(id).groupingExpansionState = grpExpandState
                    .filter((val) => {
                    return val.hierarchy && val.hierarchy.length <= grExprIndex;
                });
            });
        }
        else {
            // clear all
            this.get(id).groupingExpressions = [];
            this.get(id).groupingExpansionState = [];
            for (const /** @type {?} */ grExpr of groupingState) {
                const /** @type {?} */ sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);
                if (sortExprIndex > -1) {
                    sortingState.splice(sortExprIndex, 1);
                }
            }
            this.get(id).sortingExpressions = sortingState;
        }
    }
    /**
     * @param {?} id
     * @param {?} groupRow
     * @return {?}
     */
    groupBy_get_expanded_for_group(id, groupRow) {
        const /** @type {?} */ grState = this.get(id).groupingExpansionState;
        const /** @type {?} */ hierarchy = DataUtil.getHierarchy(groupRow);
        return grState.find((state) => DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));
    }
    /**
     * @param {?} id
     * @param {?} groupRow
     * @param {?} rowID
     * @return {?}
     */
    groupBy_is_row_in_group(id, groupRow, rowID) {
        const /** @type {?} */ grid = this.get(id);
        let /** @type {?} */ rowInGroup = false;
        groupRow.records.forEach(row => {
            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {
                rowInGroup = true;
            }
        });
        return rowInGroup;
    }
    /**
     * @param {?} id
     * @param {?} groupRow
     * @return {?}
     */
    groupBy_toggle_group(id, groupRow) {
        const /** @type {?} */ grid = this.get(id);
        const /** @type {?} */ expansionState = grid.groupingExpansionState;
        let /** @type {?} */ toggleRowEditingOverlay;
        let /** @type {?} */ isEditRowInGroup = false;
        if (grid.rowEditable) {
            const /** @type {?} */ rowState = this.get_edit_row_state(id);
            // Toggle only row editing overlays that are inside current expanded/collapsed group.
            isEditRowInGroup = rowState ? this.groupBy_is_row_in_group(id, groupRow, this.get_edit_row_state(id).rowID) : false;
        }
        const /** @type {?} */ state = this.groupBy_get_expanded_for_group(id, groupRow);
        if (state) {
            state.expanded = !state.expanded;
            if (isEditRowInGroup) {
                toggleRowEditingOverlay = state.expanded;
            }
        }
        else {
            expansionState.push({
                expanded: !grid.groupsExpanded,
                hierarchy: DataUtil.getHierarchy(groupRow)
            });
            if (isEditRowInGroup) {
                toggleRowEditingOverlay = false;
            }
        }
        this.get(id).groupingExpansionState = expansionState;
        if (grid.rowEditable) {
            grid.repositionRowEditingOverlay(grid.rowInEditMode);
        }
    }
    /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    remove_grouping_expression(id, fieldName) {
        const /** @type {?} */ groupingExpressions = this.get(id).groupingExpressions;
        const /** @type {?} */ index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);
        if (index !== -1) {
            groupingExpressions.splice(index, 1);
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    arrange_sorting_expressions(id) {
        const /** @type {?} */ groupingState = this.get(id).groupingExpressions;
        this.get(id).sortingExpressions.sort((a, b) => {
            const /** @type {?} */ groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);
            const /** @type {?} */ groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);
            if (groupExprA && groupExprB) {
                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;
            }
            else if (groupExprA) {
                return -1;
            }
            else if (groupExprB) {
                return 1;
            }
            else {
                return 0;
            }
        });
    }
}

//# sourceMappingURL=data:application/json;base64,