/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { first } from 'rxjs/operators';
/** @enum {string} */
var MoveDirection = {
    LEFT: 'left',
    RIGHT: 'right',
};
/**
 * @hidden
 */
var IgxGridNavigationService = /** @class */ (function () {
    function IgxGridNavigationService() {
    }
    Object.defineProperty(IgxGridNavigationService.prototype, "displayContainerWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridNavigationService.prototype, "displayContainerScrollLeft", {
        get: /**
         * @return {?}
         */
        function () {
            return parseInt(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft, 10);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridNavigationService.prototype, "verticalDisplayContainerElement", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} rowIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.horizontalScroll = /**
     * @param {?} rowIndex
     * @return {?}
     */
    function (rowIndex) {
        return this.grid.dataRowList.find(function (row) { return row.index === rowIndex; }).virtDirRow;
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.getColumnUnpinnedIndex = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        var /** @type {?} */ column = this.grid.unpinnedColumns.find(function (col) { return !col.columnGroup && col.visibleIndex === visibleColumnIndex; });
        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter(function (c) { return !c.columnGroup; }).indexOf(column) :
            visibleColumnIndex;
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.isColumnFullyVisible = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        var /** @type {?} */ horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();
        if (!horizontalScroll.clientWidth ||
            this.grid.columnList.filter(function (c) { return !c.columnGroup; }).find(function (column) { return column.visibleIndex === visibleColumnIndex; }).pinned) {
            return true;
        }
        var /** @type {?} */ index = this.getColumnUnpinnedIndex(visibleColumnIndex);
        return this.displayContainerWidth >=
            this.grid.dataRowList.first.virtDirRow.getColumnScrollLeft(index + 1) -
                this.displayContainerScrollLeft;
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.isColumnLeftFullyVisible = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        var /** @type {?} */ horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();
        if (!horizontalScroll.clientWidth ||
            this.grid.columnList.filter(function (c) { return !c.columnGroup; }).find(function (column) { return column.visibleIndex === visibleColumnIndex; }).pinned) {
            return true;
        }
        var /** @type {?} */ index = this.getColumnUnpinnedIndex(visibleColumnIndex);
        return this.displayContainerScrollLeft <=
            this.grid.dataRowList.first.virtDirRow.getColumnScrollLeft(index);
    };
    Object.defineProperty(IgxGridNavigationService.prototype, "gridOrderedColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return tslib_1.__spread(this.grid.pinnedColumns, this.grid.unpinnedColumns).filter(function (c) { return !c.columnGroup; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} rowIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.isRowInEditMode = /**
     * @param {?} rowIndex
     * @return {?}
     */
    function (rowIndex) {
        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.isColumnEditable = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        var /** @type {?} */ column = this.gridOrderedColumns.find(function (c) { return c.visibleIndex === visibleColumnIndex; });
        return column ? column.editable : false;
    };
    /**
     * @param {?} direction
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.findNextEditable = /**
     * @param {?} direction
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (direction, visibleColumnIndex) {
        var /** @type {?} */ gridColumns = this.gridOrderedColumns;
        if (direction === MoveDirection.LEFT) {
            return gridColumns.splice(0, visibleColumnIndex + 1).reverse().findIndex(function (e) { return e.editable; });
        }
        else if (direction === MoveDirection.RIGHT) {
            return gridColumns.splice(visibleColumnIndex, gridColumns.length - 1).findIndex(function (e) { return e.editable; });
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.getCellElementByVisibleIndex = /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowIndex, visibleColumnIndex) {
        if (this.isTreeGrid && visibleColumnIndex === 0) {
            return this.grid.nativeElement.querySelector("igx-tree-grid-cell[data-rowindex=\"" + rowIndex + "\"][data-visibleIndex=\"" + visibleColumnIndex + "\"]");
        }
        return this.grid.nativeElement.querySelector("igx-grid-cell[data-rowindex=\"" + rowIndex + "\"][data-visibleIndex=\"" + visibleColumnIndex + "\"]");
    };
    /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.onKeydownArrowRight = /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (element, rowIndex, visibleColumnIndex) {
        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {
            return;
        }
        if (this.isColumnFullyVisible(visibleColumnIndex + 1)) {
            // if next column is fully visible or is pinned
            if (element.classList.contains('igx-grid__th--pinned-last')) {
                if (this.isColumnLeftFullyVisible(visibleColumnIndex + 1)) {
                    element.nextElementSibling.firstElementChild.focus();
                }
                else {
                    this.grid.nativeElement.focus({ preventScroll: true });
                    this.grid.parentVirtDir.onChunkLoad
                        .pipe(first())
                        .subscribe(function () {
                        element.nextElementSibling.firstElementChild.focus();
                    });
                    this.horizontalScroll(rowIndex).scrollTo(0);
                }
            }
            else {
                element.nextElementSibling.focus();
            }
        }
        else {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1);
        }
    };
    /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.onKeydownArrowLeft = /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (element, rowIndex, visibleColumnIndex) {
        if (visibleColumnIndex === 0) {
            return;
        }
        var /** @type {?} */ index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);
        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === -1) {
            element.parentNode.previousElementSibling.focus();
        }
        else if (!this.isColumnLeftFullyVisible(visibleColumnIndex - 1)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1);
        }
        else {
            element.previousElementSibling.focus();
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.movePreviousEditable = /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowIndex, visibleColumnIndex) {
        var /** @type {?} */ addedIndex = this.isColumnEditable(visibleColumnIndex - 1) ?
            0 :
            this.findNextEditable(MoveDirection.LEFT, visibleColumnIndex - 1);
        if (addedIndex === -1) {
            this.grid.rowEditTabs.last.element.nativeElement.focus();
            return;
        }
        var /** @type {?} */ editableIndex = visibleColumnIndex - 1 - addedIndex;
        if (this.getColumnUnpinnedIndex(editableIndex) === -1 && this.grid.pinnedColumns.length) {
            // if target is NOT pinned and there are pinned columns
            // since addedIndex !== -1, there will always be a target
            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();
        }
        else if (!this.isColumnLeftFullyVisible(editableIndex)) {
            // if not fully visible, perform scroll
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, editableIndex);
        }
        else {
            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // if fully visible, just focus
        }
    };
    /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.moveNextEditable = /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (element, rowIndex, visibleColumnIndex) {
        var /** @type {?} */ addedIndex = 0;
        addedIndex = this.isColumnEditable(visibleColumnIndex + 1) ?
            0 :
            this.findNextEditable(MoveDirection.RIGHT, visibleColumnIndex + 1);
        if (addedIndex === -1 && this.grid.rowEditTabs) {
            // no previous edit column -> go to RE buttons
            this.grid.rowEditTabs.first.element.nativeElement.focus();
            return;
        }
        var /** @type {?} */ editableIndex = visibleColumnIndex + 1 + addedIndex;
        if (this.isColumnFullyVisible(editableIndex)) {
            // If column is fully visible
            if (element.classList.contains('igx-grid__th--pinned-last')) {
                // If this is pinned
                if (this.isColumnLeftFullyVisible(editableIndex)) {
                    // If next column is fully visible LEFT
                    this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // focus
                }
                else {
                    // if NOT fully visible, perform scroll
                    this.grid.nativeElement.focus({ preventScroll: true });
                    this.performHorizontalScrollToCell(rowIndex, editableIndex);
                }
            }
            else {
                // cell is next cell
                this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();
            }
        }
        else {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, editableIndex);
        }
    };
    /**
     * @param {?} rowIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.onKeydownHome = /**
     * @param {?} rowIndex
     * @return {?}
     */
    function (rowIndex) {
        var _this = this;
        var /** @type {?} */ rowElement = this.grid.dataRowList.find(function (row) { return row.index === rowIndex; }).nativeElement;
        var /** @type {?} */ firstCell = this.isTreeGrid ?
            rowElement.querySelector('igx-tree-grid-cell') :
            rowElement.querySelector('igx-grid-cell');
        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {
            firstCell.focus();
        }
        else {
            this.grid.parentVirtDir.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                _this.grid.nativeElement.focus({ preventScroll: true });
                firstCell = _this.isTreeGrid ? rowElement.querySelector('igx-tree-grid-cell') :
                    rowElement.querySelector('igx-grid-cell');
                firstCell.focus();
            });
            this.horizontalScroll(rowIndex).scrollTo(0);
        }
    };
    /**
     * @param {?} rowIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.onKeydownEnd = /**
     * @param {?} rowIndex
     * @return {?}
     */
    function (rowIndex) {
        var _this = this;
        var /** @type {?} */ index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;
        var /** @type {?} */ rowElement = this.grid.dataRowList.find(function (row) { return row.index === rowIndex; }).nativeElement;
        var /** @type {?} */ allCells = rowElement.querySelectorAll('igx-grid-cell');
        var /** @type {?} */ lastCell = allCells[allCells.length - 1];
        if (this.isColumnFullyVisible(index)) {
            lastCell.focus();
        }
        else {
            this.grid.parentVirtDir.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                _this.grid.nativeElement.focus({ preventScroll: true });
                lastCell.focus();
            });
            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));
        }
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateTop = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        var _this = this;
        var /** @type {?} */ verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        var /** @type {?} */ cellSelector = this.isTreeGrid && visibleColumnIndex === 0 ? 'igx-tree-grid-cell' : 'igx-grid-cell';
        if (verticalScroll.scrollTop === 0) {
            var /** @type {?} */ cells = this.grid.nativeElement.querySelectorAll(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
            cells[0].focus();
        }
        else {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(0);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(function () {
                var /** @type {?} */ cells = _this.grid.nativeElement.querySelectorAll(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                if (cells.length > 0) {
                    cells[0].focus();
                }
            });
        }
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateBottom = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        var _this = this;
        var /** @type {?} */ verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        var /** @type {?} */ cellSelector = this.isTreeGrid && visibleColumnIndex === 0 ? 'igx-tree-grid-cell' : 'igx-grid-cell';
        if (verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {
            var /** @type {?} */ cells = this.grid.nativeElement.querySelectorAll(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
            cells[cells.length - 1].focus();
        }
        else {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(function () {
                var /** @type {?} */ cells = _this.grid.nativeElement.querySelectorAll(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                if (cells.length > 0) {
                    cells[cells.length - 1].focus();
                }
            });
        }
    };
    /**
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateUp = /**
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowElement, currentRowIndex, visibleColumnIndex) {
        var _this = this;
        if (currentRowIndex === 0) {
            this.grid.rowList.first.cells.first._clearCellSelection();
            if (this.grid.allowFiltering) {
                var /** @type {?} */ visColLength = this.grid.visibleColumns.length;
                this.grid.headerContainer.scrollTo(visColLength - 1);
                this.grid.filteringService.columnToChipToFocus.set(this.grid.visibleColumns[visColLength - 1].field, true);
            }
            return;
        }
        var /** @type {?} */ containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);
        if (!rowElement.previousElementSibling ||
            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                var /** @type {?} */ tag = rowElement.tagName.toLowerCase();
                if (tag === 'igx-grid-row' || tag === 'igx-tree-grid-row') {
                    rowElement = _this.getRowByIndex(currentRowIndex);
                }
                else {
                    rowElement = _this.grid.nativeElement.querySelector("igx-grid-groupby-row[data-rowindex=\"" + currentRowIndex + "\"]");
                }
                _this.focusPreviousElement(rowElement, visibleColumnIndex);
            });
        }
        else {
            this.focusPreviousElement(rowElement, visibleColumnIndex);
        }
    };
    /**
     * @param {?} currentRowEl
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.focusPreviousElement = /**
     * @param {?} currentRowEl
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (currentRowEl, visibleColumnIndex) {
        if (currentRowEl.previousElementSibling.tagName.toLowerCase() === 'igx-grid-groupby-row') {
            currentRowEl.previousElementSibling.focus();
        }
        else {
            if (this.isColumnFullyVisible(visibleColumnIndex) && this.isColumnLeftFullyVisible(visibleColumnIndex)) {
                var /** @type {?} */ cell = this.isTreeGrid && visibleColumnIndex === 0 ?
                    currentRowEl.previousElementSibling.querySelector("igx-tree-grid-cell[data-visibleIndex=\"" + visibleColumnIndex + "\"]") :
                    currentRowEl.previousElementSibling.querySelector("igx-grid-cell[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                cell.focus();
                return;
            }
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(parseInt(currentRowEl.previousElementSibling.getAttribute('data-rowindex'), 10), visibleColumnIndex);
        }
    };
    /**
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateDown = /**
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowElement, currentRowIndex, visibleColumnIndex) {
        var _this = this;
        if (currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1) {
            return;
        }
        var /** @type {?} */ rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);
        var /** @type {?} */ containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;
        var /** @type {?} */ targetEndTopOffset = rowElement.nextElementSibling ?
            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :
            containerHeight + rowHeight;
        this.grid.nativeElement.focus({ preventScroll: true });
        if (containerHeight && containerHeight < targetEndTopOffset) {
            this.grid.verticalScrollContainer.scrollTo(currentRowIndex + 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                var /** @type {?} */ tag = rowElement.tagName.toLowerCase();
                if (tag === 'igx-grid-row' || tag === 'igx-tree-grid-row') {
                    rowElement = _this.getRowByIndex(currentRowIndex);
                }
                else {
                    rowElement = _this.grid.nativeElement.querySelector("igx-grid-groupby-row[data-rowindex=\"" + currentRowIndex + "\"]");
                }
                _this.focusNextElement(rowElement, visibleColumnIndex);
            });
        }
        else {
            this.focusNextElement(rowElement, visibleColumnIndex);
        }
    };
    /**
     * @param {?} rowElement
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.focusNextElement = /**
     * @param {?} rowElement
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowElement, visibleColumnIndex) {
        if (rowElement.nextElementSibling.tagName.toLowerCase() === 'igx-grid-groupby-row') {
            rowElement.nextElementSibling.focus();
        }
        else {
            if (this.isColumnFullyVisible(visibleColumnIndex) && this.isColumnLeftFullyVisible(visibleColumnIndex)) {
                var /** @type {?} */ cell = this.isTreeGrid && visibleColumnIndex === 0 ?
                    rowElement.nextElementSibling.querySelector("igx-tree-grid-cell[data-visibleIndex=\"" + visibleColumnIndex + "\"]") :
                    rowElement.nextElementSibling.querySelector("igx-grid-cell[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                cell.focus();
                return;
            }
            this.performHorizontalScrollToCell(parseInt(rowElement.nextElementSibling.getAttribute('data-rowindex'), 10), visibleColumnIndex);
        }
    };
    /**
     * @return {?}
     */
    IgxGridNavigationService.prototype.goToFirstCell = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        var /** @type {?} */ horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();
        if (verticalScroll.scrollTop === 0) {
            if (!this.isTreeGrid) {
                this.onKeydownHome(this.grid.dataRowList.first.index);
            }
            else {
                this.onKeydownHome(0);
            }
        }
        else {
            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {
                this.navigateTop(0);
            }
            else {
                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);
                this.grid.parentVirtDir.onChunkLoad
                    .pipe(first())
                    .subscribe(function () {
                    _this.navigateTop(0);
                });
            }
        }
    };
    /**
     * @return {?}
     */
    IgxGridNavigationService.prototype.goToLastCell = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        if (verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {
            var /** @type {?} */ rows = this.getAllRows();
            var /** @type {?} */ rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);
            this.onKeydownEnd(rowIndex);
        }
        else {
            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(function () {
                var /** @type {?} */ rows = _this.getAllRows();
                if (rows.length > 0) {
                    var /** @type {?} */ rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);
                    _this.onKeydownEnd(rowIndex);
                }
            });
        }
    };
    /**
     * @param {?} currentRowEl
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.performTab = /**
     * @param {?} currentRowEl
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (currentRowEl, rowIndex, visibleColumnIndex) {
        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {
            if (this.isRowInEditMode(rowIndex)) {
                this.grid.rowEditTabs.first.element.nativeElement.focus();
                return;
            }
            if (this.grid.rowList.find(function (row) { return row.index === rowIndex + 1; })) {
                this.navigateDown(currentRowEl, rowIndex, 0);
            }
        }
        else {
            var /** @type {?} */ cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex);
            if (cell) {
                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {
                    this.moveNextEditable(cell, rowIndex, visibleColumnIndex);
                    return;
                }
                this.onKeydownArrowRight(cell, rowIndex, visibleColumnIndex);
            }
        }
    };
    /**
     * @param {?} currentRowEl
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.performShiftTabKey = /**
     * @param {?} currentRowEl
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (currentRowEl, rowIndex, visibleColumnIndex) {
        if (visibleColumnIndex === 0) {
            if (this.isRowInEditMode(rowIndex)) {
                this.grid.rowEditTabs.last.element.nativeElement.focus();
                return;
            }
            this.navigateUp(currentRowEl, rowIndex, this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex);
        }
        else {
            var /** @type {?} */ cell = currentRowEl.querySelector("igx-grid-cell[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
            if (cell) {
                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {
                    this.movePreviousEditable(rowIndex, visibleColumnIndex);
                    return;
                }
                this.onKeydownArrowLeft(cell, rowIndex, visibleColumnIndex);
            }
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.performHorizontalScrollToCell = /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowIndex, visibleColumnIndex) {
        var _this = this;
        var /** @type {?} */ unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);
        this.grid.parentVirtDir.onChunkLoad
            .pipe(first())
            .subscribe(function () {
            _this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex).focus();
        });
        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    IgxGridNavigationService.prototype.getRowByIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.isTreeGrid ? this.grid.nativeElement.querySelector("igx-tree-grid-row[data-rowindex=\"" + index + "\"]") :
            this.grid.nativeElement.querySelector("igx-grid-row[data-rowindex=\"" + index + "\"]");
    };
    /**
     * @return {?}
     */
    IgxGridNavigationService.prototype.getAllRows = /**
     * @return {?}
     */
    function () {
        return this.isTreeGrid ? this.grid.nativeElement.querySelectorAll('igx-tree-grid-row') :
            this.grid.nativeElement.querySelectorAll('igx-grid-row');
    };
    Object.defineProperty(IgxGridNavigationService.prototype, "isTreeGrid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';
        },
        enumerable: true,
        configurable: true
    });
    IgxGridNavigationService.decorators = [
        { type: Injectable },
    ];
    return IgxGridNavigationService;
}());
export { IgxGridNavigationService };
function IgxGridNavigationService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridNavigationService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridNavigationService.ctorParameters;
    /** @type {?} */
    IgxGridNavigationService.prototype.grid;
}

//# sourceMappingURL=data:application/json;base64,