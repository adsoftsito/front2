/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, forwardRef, HostListener, Inject } from '@angular/core';
import { IgxGridBaseComponent } from './grid-base.component';
import { first } from 'rxjs/operators';
import { IgxGridNavigationService } from './grid-navigation.service';
/**
 * @hidden
 */
var IgxRowEditTemplateDirective = /** @class */ (function () {
    function IgxRowEditTemplateDirective() {
    }
    IgxRowEditTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRowEdit]'
                },] },
    ];
    return IgxRowEditTemplateDirective;
}());
export { IgxRowEditTemplateDirective };
function IgxRowEditTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxRowEditTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxRowEditTemplateDirective.ctorParameters;
}
/**
 * @hidden
 */
var IgxRowEditTextDirective = /** @class */ (function () {
    function IgxRowEditTextDirective() {
    }
    IgxRowEditTextDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRowEditText]'
                },] },
    ];
    return IgxRowEditTextDirective;
}());
export { IgxRowEditTextDirective };
function IgxRowEditTextDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxRowEditTextDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxRowEditTextDirective.ctorParameters;
}
/**
 * @hidden
 */
var IgxRowEditActionsDirective = /** @class */ (function () {
    function IgxRowEditActionsDirective() {
    }
    IgxRowEditActionsDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRowEditActions]'
                },] },
    ];
    return IgxRowEditActionsDirective;
}());
export { IgxRowEditActionsDirective };
function IgxRowEditActionsDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxRowEditActionsDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxRowEditActionsDirective.ctorParameters;
}
/**
 * @hidden
 */
var IgxRowEditTabStopDirective = /** @class */ (function () {
    function IgxRowEditTabStopDirective(grid, element, navigationService) {
        this.grid = grid;
        this.element = element;
        this.navigationService = navigationService;
    }
    Object.defineProperty(IgxRowEditTabStopDirective.prototype, "allTabs", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.rowEditTabs;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    IgxRowEditTabStopDirective.prototype.handleTab = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        if (this.allTabs.length > 1) {
            if ((this.allTabs.last === this && !event.shiftKey) ||
                (this.allTabs.first === this && event.shiftKey)) {
                this.move(event);
            }
        }
        else {
            this.move(event);
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} cellIndex
     * @return {?}
     */
    IgxRowEditTabStopDirective.prototype.focusNextCell = /**
     * @param {?} rowIndex
     * @param {?} cellIndex
     * @return {?}
     */
    function (rowIndex, cellIndex) {
        var /** @type {?} */ grid = /** @type {?} */ (this.grid);
        grid.parentVirtDir.onChunkLoad.pipe(first()).subscribe(function () {
            grid.rowInEditMode.cells.find(function (c) { return c.visibleColumnIndex === cellIndex; }).element.nativeElement.focus();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxRowEditTabStopDirective.prototype.move = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        var /** @type {?} */ horizontalScroll = this.grid.parentVirtDir.getHorizontalScroll();
        var /** @type {?} */ targetIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;
        var /** @type {?} */ targetCell = this.grid.rowInEditMode.cells.find(function (e) { return e.visibleColumnIndex === targetIndex; });
        if (!targetCell ||
            !this.navigationService.isColumnFullyVisible(targetIndex)
            || !this.navigationService.isColumnLeftFullyVisible(targetIndex)) {
            this.focusNextCell(this.grid.rowInEditMode.index, targetIndex);
            horizontalScroll.scrollLeft =
                this.grid.rowInEditMode.virtDirRow.getColumnScrollLeft(this.navigationService.getColumnUnpinnedIndex(targetIndex));
        }
        else {
            targetCell._updateCellSelectionStatus(true, event);
            targetCell.inEditMode = true;
            targetCell.nativeElement.focus();
        }
    };
    IgxRowEditTabStopDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[igxRowEditTabStop]"
                },] },
    ];
    /** @nocollapse */
    IgxRowEditTabStopDirective.ctorParameters = function () { return [
        { type: IgxGridBaseComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return IgxGridBaseComponent; }),] },] },
        { type: ElementRef, },
        { type: IgxGridNavigationService, decorators: [{ type: Inject, args: [forwardRef(function () { return IgxGridNavigationService; }),] },] },
    ]; };
    IgxRowEditTabStopDirective.propDecorators = {
        "handleTab": [{ type: HostListener, args: ['keydown.Tab', ["$event"],] }, { type: HostListener, args: ['keydown.Shift.Tab', ["$event"],] },],
    };
    return IgxRowEditTabStopDirective;
}());
export { IgxRowEditTabStopDirective };
function IgxRowEditTabStopDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxRowEditTabStopDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxRowEditTabStopDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxRowEditTabStopDirective.propDecorators;
    /** @type {?} */
    IgxRowEditTabStopDirective.prototype.grid;
    /** @type {?} */
    IgxRowEditTabStopDirective.prototype.element;
    /** @type {?} */
    IgxRowEditTabStopDirective.prototype.navigationService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5yb3dFZGl0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZ3JpZHMvZ3JpZC5yb3dFZGl0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7Ozs7OztnQkFHcEUsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxjQUFjO2lCQUMzQjs7c0NBUkQ7O1NBU2EsMkJBQTJCOzs7Ozs7Ozs7Ozs7Ozs7OztnQkFHdkMsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxrQkFBa0I7aUJBQy9COztrQ0FkRDs7U0FlYSx1QkFBdUI7Ozs7Ozs7Ozs7Ozs7Ozs7O2dCQUduQyxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHFCQUFxQjtpQkFDbEM7O3FDQXBCRDs7U0FxQmEsMEJBQTBCOzs7Ozs7Ozs7Ozs7OztJQVVuQyxvQ0FDMkQsTUFDaEQsU0FDb0Q7UUFGSixTQUFJLEdBQUosSUFBSTtRQUNwRCxZQUFPLEdBQVAsT0FBTztRQUM2QyxzQkFBaUIsR0FBakIsaUJBQWlCO0tBQThCOzBCQU5sRywrQ0FBTzs7Ozs7WUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7Ozs7Ozs7OztJQVExQiw4Q0FBUzs7OztjQUFDLEtBQW9CO1FBQ2pDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0s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Qzs7OzhCQUNyRCxZQUFZLFNBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQ3RDLFlBQVksU0FBQyxtQkFBbUIsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7cUNBcENqRDs7U0EyQmEsMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmLCBIb3N0TGlzdGVuZXIsIEluamVjdCwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hHcmlkQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vZ3JpZC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBmaXJzdCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IElneEdyaWROYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4vZ3JpZC1uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuXG4vKiogQGhpZGRlbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Um93RWRpdF0nXG59KVxuZXhwb3J0IGNsYXNzIElneFJvd0VkaXRUZW1wbGF0ZURpcmVjdGl2ZSB7IH1cblxuLyoqIEBoaWRkZW4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFJvd0VkaXRUZXh0XSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Um93RWRpdFRleHREaXJlY3RpdmUgeyB9XG5cbi8qKiBAaGlkZGVuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hSb3dFZGl0QWN0aW9uc10nXG59KVxuZXhwb3J0IGNsYXNzIElneFJvd0VkaXRBY3Rpb25zRGlyZWN0aXZlIHsgfVxuXG4vKiogQGhpZGRlbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6IGBbaWd4Um93RWRpdFRhYlN0b3BdYFxufSlcbmV4cG9ydCBjbGFzcyBJZ3hSb3dFZGl0VGFiU3RvcERpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSBnZXQgYWxsVGFicygpOiBRdWVyeUxpc3Q8SWd4Um93RWRpdFRhYlN0b3BEaXJlY3RpdmU+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZC5yb3dFZGl0VGFicztcbiAgICB9XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBJZ3hHcmlkQmFzZUNvbXBvbmVudCkpIHB1YmxpYyBncmlkOiBJZ3hHcmlkQmFzZUNvbXBvbmVudCxcbiAgICAgICAgcHVibGljIGVsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBJZ3hHcmlkTmF2aWdhdGlvblNlcnZpY2UpKSBwdWJsaWMgbmF2aWdhdGlvblNlcnZpY2U6IElneEdyaWROYXZpZ2F0aW9uU2VydmljZSkge31cbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duLlRhYicsIFtgJGV2ZW50YF0pXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5TaGlmdC5UYWInLCBbYCRldmVudGBdKVxuICAgIHB1YmxpYyBoYW5kbGVUYWIoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmICh0aGlzLmFsbFRhYnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgaWYgKCh0aGlzLmFsbFRhYnMubGFzdCA9PT0gIHRoaXMgJiYgIWV2ZW50LnNoaWZ0S2V5KSB8fFxuICAgICAgICAgICAgICAgICh0aGlzLmFsbFRhYnMuZmlyc3QgPT09ICB0aGlzICYmIGV2ZW50LnNoaWZ0S2V5KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubW92ZShldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdmF0ZSBmb2N1c05leHRDZWxsKHJvd0luZGV4LCBjZWxsSW5kZXgpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMuZ3JpZCBhcyBhbnk7XG4gICAgICAgIGdyaWQucGFyZW50VmlydERpci5vbkNodW5rTG9hZC5waXBlKGZpcnN0KCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICBncmlkLnJvd0luRWRpdE1vZGUuY2VsbHMuZmluZChjID0+IGMudmlzaWJsZUNvbHVtbkluZGV4ID09PSBjZWxsSW5kZXgpLmVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcHJpdmF0ZSBtb3ZlKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWxTY3JvbGwgPSB0aGlzLmdyaWQucGFyZW50VmlydERpci5nZXRIb3Jpem9udGFsU2Nyb2xsKCk7XG4gICAgICAgIGNvbnN0IHRhcmdldEluZGV4ID0gZXZlbnQuc2hpZnRLZXkgPyB0aGlzLmdyaWQubGFzdEVkaXRhYmxlQ29sdW1uSW5kZXggOiB0aGlzLmdyaWQuZmlyc3RFZGl0YWJsZUNvbHVtbkluZGV4O1xuICAgICAgICBjb25zdCB0YXJnZXRDZWxsID0gdGhpcy5ncmlkLnJvd0luRWRpdE1vZGUuY2VsbHMuZmluZChlID0+IGUudmlzaWJsZUNvbHVtbkluZGV4ID09PSB0YXJnZXRJbmRleCk7XG4gICAgICAgIGlmICghdGFyZ2V0Q2VsbCB8fFxuICAgICAgICAgICAgIXRoaXMubmF2aWdhdGlvblNlcnZpY2UuaXNDb2x1bW5GdWxseVZpc2libGUodGFyZ2V0SW5kZXgpXG4gICAgICAgICAgICB8fCAhdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5pc0NvbHVtbkxlZnRGdWxseVZpc2libGUodGFyZ2V0SW5kZXgpKSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzTmV4dENlbGwodGhpcy5ncmlkLnJvd0luRWRpdE1vZGUuaW5kZXgsIHRhcmdldEluZGV4KTtcbiAgICAgICAgICAgIGhvcml6b250YWxTY3JvbGwuc2Nyb2xsTGVmdCA9XG4gICAgICAgICAgICB0aGlzLmdyaWQucm93SW5FZGl0TW9kZS52aXJ0RGlyUm93LmdldENvbHVtblNjcm9sbExlZnQodGhpcy5uYXZpZ2F0aW9uU2VydmljZS5nZXRDb2x1bW5VbnBpbm5lZEluZGV4KHRhcmdldEluZGV4KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRDZWxsLl91cGRhdGVDZWxsU2VsZWN0aW9uU3RhdHVzKHRydWUsIGV2ZW50KTtcbiAgICAgICAgICAgIHRhcmdldENlbGwuaW5FZGl0TW9kZSA9IHRydWU7XG4gICAgICAgICAgICB0YXJnZXRDZWxsLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==