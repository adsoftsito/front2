/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, HostBinding, Inject, forwardRef, ElementRef, Input, ChangeDetectorRef } from '@angular/core';
import { IgxExpansionPanelComponent } from './expansion-panel.component';
var IgxExpansionPanelBodyComponent = /** @class */ (function () {
    function IgxExpansionPanelBodyComponent(panel, element, cdr) {
        this.panel = panel;
        this.element = element;
        this.cdr = cdr;
        this._labelledBy = '';
        this._label = '';
        this.cssClass = "igx-expansion-panel__body";
        this._title = '';
        this.role = 'region';
    }
    Object.defineProperty(IgxExpansionPanelBodyComponent.prototype, "label", {
        get: /**
         * @return {?}
         */
        function () {
            return this._label || this.panel.id + '-region';
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._label = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExpansionPanelBodyComponent.prototype, "labelledBy", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labelledBy;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._labelledBy = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxExpansionPanelBodyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.labelledBy = this.panel.headerId;
        this.label = this.panel.id + '-region';
    };
    IgxExpansionPanelBodyComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'igx-expansion-panel-body',
                    template: "<ng-content></ng-content>"
                },] },
    ];
    /** @nocollapse */
    IgxExpansionPanelBodyComponent.ctorParameters = function () { return [
        { type: IgxExpansionPanelComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return IgxExpansionPanelComponent; }),] },] },
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
    ]; };
    IgxExpansionPanelBodyComponent.propDecorators = {
        "cssClass": [{ type: HostBinding, args: ['class.igx-expansion-panel__body',] },],
        "label": [{ type: Input }, { type: HostBinding, args: ['attr.aria-label',] },],
        "labelledBy": [{ type: Input }, { type: HostBinding, args: ['attr.aria-labelledby',] },],
        "role": [{ type: Input }, { type: HostBinding, args: ['attr.role',] },],
    };
    return IgxExpansionPanelBodyComponent;
}());
export { IgxExpansionPanelBodyComponent };
function IgxExpansionPanelBodyComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxExpansionPanelBodyComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxExpansionPanelBodyComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxExpansionPanelBodyComponent.propDecorators;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype._labelledBy;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype._label;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype.cssClass;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype._title;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype.role;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype.panel;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype.element;
    /** @type {?} */
    IgxExpansionPanelBodyComponent.prototype.cdr;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLWJvZHkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9leHBhbnNpb24tcGFuZWwvZXhwYW5zaW9uLXBhbmVsLWJvZHkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQ25DLFVBQVUsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3BGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztJQVVyRSx3Q0FDTyxPQUEwQyxPQUFtQixFQUM3RDtRQURBLFVBQUssR0FBTCxLQUFLO1FBQXFDLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDN0QsUUFBRyxHQUFILEdBQUc7MkJBSlksRUFBRTtzQkFDUCxFQUFFO3dCQU1ELDJCQUEyQjtzQkFDN0IsRUFBRTtvQkFzQkosUUFBUTtLQXpCckI7MEJBT1UsaURBQUs7Ozs7O1lBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsU0FBUyxDQUFDOzs7Ozs7a0JBRW5DLEdBQVc7WUFDeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7Ozs7OzBCQUtYLHNEQUFVOzs7OztZQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQzs7Ozs7O2tCQUVOLEdBQVc7WUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7Ozs7Ozs7O0lBTzNCLGlEQUFROzs7SUFBUjtRQUNJLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7UUFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUM7S0FDMUM7O2dCQXpDSixTQUFTLFNBQUM7O29CQUVQLFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLFFBQVEsRUFBRSwyQkFBMkI7aUJBQ3hDOzs7O2dCQU5RLDBCQUEwQix1QkFVbEIsTUFBTSxTQUFDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsMEJBQTBCLEVBQTFCLENBQTBCLENBQUM7Z0JBWHBELFVBQVU7Z0JBQVMsaUJBQWlCOzs7NkJBZS9DLFdBQVcsU0FBQyxpQ0FBaUM7MEJBSTdDLEtBQUssWUFDTCxXQUFXLFNBQUMsaUJBQWlCOytCQVE3QixLQUFLLFlBQ0wsV0FBVyxTQUFDLHNCQUFzQjt5QkFRbEMsS0FBSyxZQUNMLFdBQVcsU0FBQyxXQUFXOzt5Q0F2QzVCOztTQVNhLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIEluamVjdCxcbiAgICBmb3J3YXJkUmVmLCBFbGVtZW50UmVmLCBJbnB1dCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4RXhwYW5zaW9uUGFuZWxDb21wb25lbnQgfSBmcm9tICcuL2V4cGFuc2lvbi1wYW5lbC5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdpZ3gtZXhwYW5zaW9uLXBhbmVsLWJvZHknLFxuICAgIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmBcbn0pXG5leHBvcnQgY2xhc3MgSWd4RXhwYW5zaW9uUGFuZWxCb2R5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIF9sYWJlbGxlZEJ5ID0gJyc7XG4gICAgcHJpdmF0ZSBfbGFiZWwgPSAnJztcbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gSWd4RXhwYW5zaW9uUGFuZWxDb21wb25lbnQpKVxuICAgIHB1YmxpYyBwYW5lbDogSWd4RXhwYW5zaW9uUGFuZWxDb21wb25lbnQsIHB1YmxpYyBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgIHB1YmxpYyBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgfVxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWV4cGFuc2lvbi1wYW5lbF9fYm9keScpXG4gICAgcHVibGljIGNzc0NsYXNzID0gYGlneC1leHBhbnNpb24tcGFuZWxfX2JvZHlgO1xuICAgIHB1YmxpYyBfdGl0bGUgPSAnJztcblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtbGFiZWwnKVxuICAgIHB1YmxpYyBnZXQgbGFiZWwoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsIHx8IHRoaXMucGFuZWwuaWQgKyAnLXJlZ2lvbic7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgbGFiZWwodmFsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fbGFiZWwgPSB2YWw7XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1sYWJlbGxlZGJ5JylcbiAgICBwdWJsaWMgZ2V0IGxhYmVsbGVkQnkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsbGVkQnk7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgbGFiZWxsZWRCeSh2YWw6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9sYWJlbGxlZEJ5ID0gdmFsO1xuICAgIH1cblxuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKVxuICAgIHB1YmxpYyByb2xlID0gJ3JlZ2lvbic7XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5sYWJlbGxlZEJ5ID0gdGhpcy5wYW5lbC5oZWFkZXJJZDtcbiAgICAgICAgdGhpcy5sYWJlbCA9IHRoaXMucGFuZWwuaWQgKyAnLXJlZ2lvbic7XG4gICAgfVxufVxuIl19