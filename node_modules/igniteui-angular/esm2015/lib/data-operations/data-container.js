/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { DataUtil } from './data-util';
/** @enum {number} */
const DataAccess = {
    OriginalData: 0,
    TransformedData: 1,
};
export { DataAccess };
DataAccess[DataAccess.OriginalData] = "OriginalData";
DataAccess[DataAccess.TransformedData] = "TransformedData";
/**
 * @hidden
 */
export class DataContainer {
    /**
     * @param {?=} data
     */
    constructor(data = []) {
        this.state = {};
        this.data = data;
        this.transformedData = data;
    }
    /**
     * @param {?=} state
     * @return {?}
     */
    process(state) {
        if (state) {
            this.state = state;
        }
        this.transformedData = this.data;
        // apply data operations
        this.transformedData = DataUtil.process(this.data, this.state);
        return this;
    }
    /**
     * @param {?} record
     * @param {?=} dataAccess
     * @return {?}
     */
    getIndexOfRecord(record, dataAccess = DataAccess.OriginalData) {
        const /** @type {?} */ data = this.accessData(dataAccess);
        return data.indexOf(record);
    }
    /**
     * @param {?} index
     * @param {?=} dataAccess
     * @return {?}
     */
    getRecordByIndex(index, dataAccess = DataAccess.OriginalData) {
        const /** @type {?} */ data = this.accessData(dataAccess);
        return data[index];
    }
    /**
     * @param {?} fieldName
     * @param {?} value
     * @param {?=} dataAccess
     * @return {?}
     */
    getRecordInfoByKeyValue(fieldName, value, dataAccess = DataAccess.OriginalData) {
        const /** @type {?} */ data = this.accessData(dataAccess);
        const /** @type {?} */ len = data.length;
        const /** @type {?} */ res = { index: -1, record: undefined };
        let /** @type {?} */ i;
        for (i = 0; i < len; i++) {
            if (data[i][fieldName] === value) {
                res.index = i;
                res.record = data[i];
                break;
            }
        }
        return res;
    }
    /**
     * @param {?} record
     * @param {?=} at
     * @return {?}
     */
    addRecord(record, at) {
        const /** @type {?} */ data = this.accessData(DataAccess.OriginalData);
        if (at === null || at === undefined) {
            data.push(record);
        }
        else {
            data.splice(at, 0, record);
        }
    }
    /**
     * @param {?} record
     * @return {?}
     */
    deleteRecord(record) {
        const /** @type {?} */ index = this.getIndexOfRecord(record, DataAccess.OriginalData);
        return this.deleteRecordByIndex(index);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    deleteRecordByIndex(index) {
        const /** @type {?} */ data = this.accessData(DataAccess.OriginalData);
        return data.splice(index, 1).length === 1;
    }
    /**
     * @param {?} index
     * @param {?} newProperties
     * @return {?}
     */
    updateRecordByIndex(index, newProperties) {
        const /** @type {?} */ dataAccess = DataAccess.OriginalData;
        const /** @type {?} */ foundRec = this.getRecordByIndex(index, dataAccess);
        if (!foundRec) {
            return undefined;
        }
        return Object.assign(foundRec, newProperties);
    }
    /**
     * @param {?} dataAccess
     * @return {?}
     */
    accessData(dataAccess) {
        let /** @type {?} */ res;
        switch (dataAccess) {
            case DataAccess.OriginalData:
                res = this.data;
                break;
            case DataAccess.TransformedData:
                res = this.transformedData;
                break;
        }
        return res;
    }
}
function DataContainer_tsickle_Closure_declarations() {
    /** @type {?} */
    DataContainer.prototype.data;
    /**
     * processed data
     * @type {?}
     */
    DataContainer.prototype.transformedData;
    /** @type {?} */
    DataContainer.prototype.state;
}

//# sourceMappingURL=data:application/json;base64,