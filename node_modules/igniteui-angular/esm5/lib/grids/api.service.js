/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { cloneArray, isEqual, mergeObjects } from '../core/utils';
import { DataUtil, DataType } from '../data-operations/data-util';
import { SortingDirection } from '../data-operations/sorting-expression.interface';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { TransactionType } from '../services/index';
// unsupported: template constraints.
/**
 * @hidden
 * @template T
 */
var GridBaseAPIService = /** @class */ (function () {
    function GridBaseAPIService() {
        this.change = new Subject();
        this.state = new Map();
        this.editCellState = new Map();
        this.editRowState = new Map();
        this.summaryCacheMap = new Map();
        this.destroyMap = new Map();
    }
    /**
     * @param {?} grid
     * @return {?}
     */
    GridBaseAPIService.prototype.register = /**
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        this.state.set(grid.id, grid);
        this.destroyMap.set(grid.id, new Subject());
    };
    /**
     * @param {?} grid
     * @return {?}
     */
    GridBaseAPIService.prototype.unsubscribe = /**
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        this.state.delete(grid.id);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    GridBaseAPIService.prototype.get = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.state.get(id);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    GridBaseAPIService.prototype.unset = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.state.delete(id);
        this.summaryCacheMap.delete(id);
        this.editCellState.delete(id);
        this.editRowState.delete(id);
        this.destroyMap.delete(id);
    };
    /**
     * @param {?} oldId
     * @param {?} newId
     * @return {?}
     */
    GridBaseAPIService.prototype.reset = /**
     * @param {?} oldId
     * @param {?} newId
     * @return {?}
     */
    function (oldId, newId) {
        var /** @type {?} */ destroy = this.destroyMap.get(oldId);
        var /** @type {?} */ summary = this.summaryCacheMap.get(oldId);
        var /** @type {?} */ editCellState = this.editCellState.get(oldId);
        var /** @type {?} */ editRowState = this.editRowState.get(oldId);
        var /** @type {?} */ grid = this.get(oldId);
        this.unset(oldId);
        if (grid) {
            this.state.set(newId, grid);
        }
        if (destroy) {
            this.destroyMap.set(newId, destroy);
        }
        if (summary) {
            this.summaryCacheMap.set(newId, summary);
        }
        if (editCellState) {
            this.editCellState.set(newId, editCellState);
        }
        if (editRowState) {
            this.editRowState.set(newId, editRowState);
        }
    };
    /**
     * @param {?} id
     * @param {?} name
     * @return {?}
     */
    GridBaseAPIService.prototype.get_column_by_name = /**
     * @param {?} id
     * @param {?} name
     * @return {?}
     */
    function (id, name) {
        return this.get(id).columnList.find(function (col) { return col.field === name; });
    };
    /**
     * @param {?} id
     * @param {?} name
     * @return {?}
     */
    GridBaseAPIService.prototype.set_summary_by_column_name = /**
     * @param {?} id
     * @param {?} name
     * @return {?}
     */
    function (id, name) {
        if (!this.summaryCacheMap.get(id)) {
            this.summaryCacheMap.set(id, new Map());
        }
        var /** @type {?} */ column = this.get_column_by_name(id, name);
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ data = grid.filteredData;
        if (!data) {
            if (grid.transactions.enabled) {
                data = DataUtil.mergeTransactions(cloneArray(grid.data), grid.transactions.getAggregatedChanges(true), grid.primaryKey);
            }
            else {
                data = grid.data;
            }
        }
        if (data) {
            var /** @type {?} */ columnValues = data.map(function (rec) { return rec[column.field]; });
            this.calculateSummaries(id, column, columnValues);
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    GridBaseAPIService.prototype.get_summaries = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.summaryCacheMap.get(id);
    };
    /**
     * @param {?} id
     * @param {?=} name
     * @return {?}
     */
    GridBaseAPIService.prototype.remove_summary = /**
     * @param {?} id
     * @param {?=} name
     * @return {?}
     */
    function (id, name) {
        if (this.summaryCacheMap.has(id)) {
            if (!name) {
                this.summaryCacheMap.delete(id);
            }
            else {
                this.summaryCacheMap.get(id).delete(name);
            }
        }
    };
    /**
     * @param {?} gridId
     * @param {?} cell
     * @return {?}
     */
    GridBaseAPIService.prototype.set_cell_inEditMode = /**
     * @param {?} gridId
     * @param {?} cell
     * @return {?}
     */
    function (gridId, cell) {
        var /** @type {?} */ grid = this.get(gridId);
        var /** @type {?} */ args = {
            rowID: cell.cellID.rowID,
            cellID: cell.cellID,
            oldValue: cell.value,
            cancel: false
        };
        grid.onCellEditEnter.emit(args);
        if (args.cancel) {
            return;
        }
        if (grid.rowEditable) {
            var /** @type {?} */ currentEditRow = this.get_edit_row_state(gridId);
            if (currentEditRow && currentEditRow.rowID !== cell.cellID.rowID) {
                grid.endEdit(true);
                grid.startRowEdit(cell.cellID);
            }
            if (!currentEditRow) {
                grid.startRowEdit(cell.cellID);
            }
        }
        if (!this.get_cell_inEditMode(gridId)) {
            var /** @type {?} */ cellCopy = Object.assign({}, cell);
            cellCopy.row = Object.assign({}, cell.row);
            this.editCellState.set(gridId, { cellID: cell.cellID, cell: cellCopy });
        }
    };
    /**
     * @param {?} gridId
     * @param {?=} cellId
     * @return {?}
     */
    GridBaseAPIService.prototype.escape_editMode = /**
     * @param {?} gridId
     * @param {?=} cellId
     * @return {?}
     */
    function (gridId, cellId) {
        var /** @type {?} */ editableCell = this.get_cell_inEditMode(gridId);
        if (editableCell) {
            if (cellId) {
                if (cellId.rowID === editableCell.cellID.rowID &&
                    cellId.columnID === editableCell.cellID.columnID) {
                    this.editCellState.delete(gridId);
                }
            }
            else {
                var /** @type {?} */ grid = this.get(gridId);
                this.editCellState.delete(gridId);
            }
        }
        this.get(gridId).refreshSearch();
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    GridBaseAPIService.prototype.get_cell_inEditMode = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        var /** @type {?} */ editCellId = this.editCellState.get(gridId);
        if (editCellId) {
            return editCellId;
        }
        else {
            return null;
        }
    };
    /**
     * @param {?} id
     * @param {?} rowID
     * @return {?}
     */
    GridBaseAPIService.prototype.get_row_index_in_data = /**
     * @param {?} id
     * @param {?} rowID
     * @return {?}
     */
    function (id, rowID) {
        var /** @type {?} */ grid = /** @type {?} */ (this.get(id));
        if (!grid) {
            return -1;
        }
        var /** @type {?} */ data = this.get_all_data(id);
        return grid.primaryKey ? data.findIndex(function (record) { return record[grid.primaryKey] === rowID; }) : data.indexOf(rowID);
    };
    /**
     * @param {?} id
     * @param {?} rowSelector
     * @return {?}
     */
    GridBaseAPIService.prototype.get_row_by_key = /**
     * @param {?} id
     * @param {?} rowSelector
     * @return {?}
     */
    function (id, rowSelector) {
        var /** @type {?} */ primaryKey = this.get(id).primaryKey;
        if (primaryKey !== undefined && primaryKey !== null) {
            return this.get(id).dataRowList.find(function (row) { return row.rowData[primaryKey] === rowSelector; });
        }
        else {
            return this.get(id).dataRowList.find(function (row) { return row.rowData === rowSelector; });
        }
    };
    /**
     * @param {?} id
     * @param {?} rowIndex
     * @return {?}
     */
    GridBaseAPIService.prototype.get_row_by_index = /**
     * @param {?} id
     * @param {?} rowIndex
     * @return {?}
     */
    function (id, rowIndex) {
        return this.get(id).rowList.find(function (row) { return row.index === rowIndex; });
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    GridBaseAPIService.prototype.get_edit_row_state = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        var /** @type {?} */ editRow = this.editRowState.get(gridId);
        return editRow ? editRow : null;
    };
    /**
     * @param {?} gridId
     * @param {?} row
     * @return {?}
     */
    GridBaseAPIService.prototype.set_edit_row_state = /**
     * @param {?} gridId
     * @param {?} row
     * @return {?}
     */
    function (gridId, row) {
        if (!row) {
            this.editRowState.delete(gridId);
        }
        else {
            this.editRowState.set(gridId, row);
        }
    };
    /**
     * @param {?} id
     * @param {?} rowSelector
     * @param {?} field
     * @return {?}
     */
    GridBaseAPIService.prototype.get_cell_by_key = /**
     * @param {?} id
     * @param {?} rowSelector
     * @param {?} field
     * @return {?}
     */
    function (id, rowSelector, field) {
        var /** @type {?} */ row = this.get_row_by_key(id, rowSelector);
        if (row && row.cells) {
            return row.cells.find(function (cell) { return cell.column.field === field; });
        }
    };
    /**
     * @param {?} id
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    GridBaseAPIService.prototype.get_cell_by_index = /**
     * @param {?} id
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    function (id, rowIndex, columnIndex) {
        var /** @type {?} */ row = this.get_row_by_index(id, rowIndex);
        if (row && row.cells) {
            return row.cells.find(function (cell) { return cell.columnIndex === columnIndex; });
        }
    };
    /**
     * @param {?} id
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    GridBaseAPIService.prototype.get_cell_by_visible_index = /**
     * @param {?} id
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    function (id, rowIndex, columnIndex) {
        var /** @type {?} */ row = this.get_row_by_index(id, rowIndex);
        if (row && row.cells) {
            return row.cells.find(function (cell) { return cell.visibleColumnIndex === columnIndex; });
        }
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    GridBaseAPIService.prototype.submit_value = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        var /** @type {?} */ editableCell = this.get_cell_inEditMode(gridId);
        if (editableCell) {
            var /** @type {?} */ gridEditState = this.create_grid_edit_args(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID, editableCell.cell.editValue);
            if (!editableCell.cell.column.inlineEditorTemplate && editableCell.cell.column.dataType === 'number') {
                if (!editableCell.cell.editValue) {
                    gridEditState.args.newValue = 0;
                    this.update_cell(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID, 0, gridEditState);
                }
                else {
                    var /** @type {?} */ val = parseFloat(editableCell.cell.editValue);
                    if (!isNaN(val) || isFinite(val)) {
                        gridEditState.args.newValue = val;
                        this.update_cell(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID, val, gridEditState);
                    }
                }
            }
            else {
                this.update_cell(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID, editableCell.cell.editValue, gridEditState);
            }
            if (gridEditState.args.cancel) {
                return;
            }
            this.escape_editMode(gridId, editableCell.cellID);
        }
    };
    /**
     * @param {?} id
     * @param {?} rowID
     * @param {?} columnID
     * @param {?} editValue
     * @return {?}
     */
    GridBaseAPIService.prototype.create_grid_edit_args = /**
     * @param {?} id
     * @param {?} rowID
     * @param {?} columnID
     * @param {?} editValue
     * @return {?}
     */
    function (id, rowID, columnID, editValue) {
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ data = this.get_all_data(id);
        var /** @type {?} */ isRowSelected = grid.selection.is_item_selected(id, rowID);
        var /** @type {?} */ editableCell = this.get_cell_inEditMode(id);
        var /** @type {?} */ column = grid.columnList.toArray()[columnID];
        columnID = columnID !== undefined && columnID !== null ? columnID : null;
        var /** @type {?} */ cellObj;
        if (columnID !== null) {
            if ((editableCell && editableCell.cellID.rowID === rowID && editableCell.cellID.columnID === columnID)) {
                cellObj = editableCell;
            }
            else {
                cellObj = grid.columnList.toArray()[columnID].cells.find(function (cell) { return cell.cellID.rowID === rowID; });
            }
        }
        var /** @type {?} */ rowIndex = this.get_row_index_in_data(id, rowID);
        var /** @type {?} */ oldValue;
        var /** @type {?} */ rowData;
        if (rowIndex !== -1) {
            oldValue = columnID !== null ? data[rowIndex][column.field] : null;
            rowData = data[rowIndex];
        }
        //  if we have transactions and add row was edited look for old value and row data in added rows
        if (rowIndex < 0 && grid.transactions.enabled) {
            var /** @type {?} */ dataWithTransactions = grid.dataWithAddedInTransactionRows;
            rowIndex = grid.primaryKey ?
                dataWithTransactions.map(function (record) { return record[grid.primaryKey]; }).indexOf(rowID) :
                dataWithTransactions.indexOf(rowID);
            if (rowIndex !== -1) {
                //  Check if below change will work on added rows with transactions
                // oldValue = this.get_all_data(id, true)[rowIndex][column.field];
                // rowData = this.get_all_data(id, true)[rowIndex];
                oldValue = columnID !== null ? dataWithTransactions[rowIndex][column.field] : null;
                rowData = dataWithTransactions[rowIndex];
            }
        }
        var /** @type {?} */ args = {
            rowID: rowID,
            oldValue: oldValue,
            newValue: editValue,
            cancel: false
        };
        if (cellObj) {
            Object.assign(args, {
                cellID: cellObj.cellID
            });
        }
        return {
            args: args,
            isRowSelected: isRowSelected,
            rowData: rowData
        };
    };
    /**
     * @param {?} id
     * @param {?} rowID
     * @param {?} columnID
     * @param {?} editValue
     * @param {?=} gridEditState
     * @return {?}
     */
    GridBaseAPIService.prototype.update_cell = /**
     * @param {?} id
     * @param {?} rowID
     * @param {?} columnID
     * @param {?} editValue
     * @param {?=} gridEditState
     * @return {?}
     */
    function (id, rowID, columnID, editValue, gridEditState) {
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ data = this.get_all_data(id);
        var /** @type {?} */ currentGridEditState = gridEditState || this.create_grid_edit_args(id, rowID, columnID, editValue);
        var /** @type {?} */ emittedArgs = currentGridEditState.args;
        var /** @type {?} */ column = grid.columnList.toArray()[columnID];
        var /** @type {?} */ rowIndex = this.get_row_index_in_data(id, rowID);
        if (emittedArgs.oldValue !== undefined && currentGridEditState.rowData !== undefined) {
            grid.onCellEdit.emit(emittedArgs);
            if (emittedArgs.cancel) {
                return;
            }
            //  if we are editing the cell for second or next time, get the old value from transaction
            var /** @type {?} */ oldValueInTransaction = grid.transactions.getAggregatedValue(rowID, true);
            if (oldValueInTransaction) {
                emittedArgs.oldValue = oldValueInTransaction[column.field];
            }
            //  if edit (new) value is same as old value do nothing here
            if (emittedArgs.oldValue !== undefined
                && isEqual(emittedArgs.oldValue, emittedArgs.newValue)) {
                return;
            }
            var /** @type {?} */ transaction = {
                id: rowID, type: TransactionType.UPDATE, newValue: (_a = {}, _a[column.field] = emittedArgs.newValue, _a)
            };
            if (grid.transactions.enabled) {
                grid.transactions.add(transaction, currentGridEditState.rowData);
            }
            else {
                var /** @type {?} */ rowValue = this.get_all_data(id)[rowIndex];
                mergeObjects(rowValue, (_b = {}, _b[column.field] = emittedArgs.newValue, _b));
            }
            if (grid.primaryKey === column.field && currentGridEditState.isRowSelected) {
                grid.selection.deselect_item(id, rowID);
                grid.selection.select_item(id, emittedArgs.newValue);
            }
            if (!grid.rowEditable || !grid.rowInEditMode || grid.rowInEditMode.rowID !== rowID) {
                (/** @type {?} */ (grid))._pipeTrigger++;
            }
        }
        var _a, _b;
    };
    /**
     * @param {?} value
     * @param {?} id
     * @param {?} rowID
     * @param {?=} gridState
     * @return {?}
     */
    GridBaseAPIService.prototype.update_row = /**
     * @param {?} value
     * @param {?} id
     * @param {?} rowID
     * @param {?=} gridState
     * @return {?}
     */
    function (value, id, rowID, gridState) {
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ data = this.get_all_data(id);
        var /** @type {?} */ currentGridState = gridState ? gridState : this.create_grid_edit_args(id, rowID, null, value);
        var /** @type {?} */ emitArgs = currentGridState.args;
        var /** @type {?} */ index = this.get_row_index_in_data(id, rowID);
        var /** @type {?} */ currentRowInEditMode = this.get_edit_row_state(id);
        var /** @type {?} */ oldValue = Object.assign({}, data[index]);
        if (grid.currentRowState && grid.currentRowState[grid.primaryKey] === rowID
            || currentRowInEditMode && currentRowInEditMode.rowID === rowID) {
            oldValue = Object.assign(oldValue, grid.currentRowState);
        }
        else if (grid.transactions.enabled) {
            // If transactions are enabled, old value == last commited value (as it's not applied in data yet)
            var /** @type {?} */ lastCommitedValue = 
            // Last commited value (w/o pending)
            grid.transactions.getState(rowID) ? Object.assign({}, grid.transactions.getState(rowID).value) : null;
            oldValue = lastCommitedValue ? Object.assign(oldValue, lastCommitedValue) : oldValue;
        }
        Object.assign(emitArgs, { oldValue: oldValue, rowID: rowID });
        if (index !== -1) {
            grid.onRowEdit.emit(emitArgs);
            if (emitArgs.cancel) {
                return;
            }
            if (currentRowInEditMode) {
                grid.transactions.endPending(false);
            }
            if (grid.transactions.enabled && emitArgs.newValue !== null) {
                grid.transactions.add({ id: rowID, newValue: emitArgs.newValue, type: TransactionType.UPDATE }, emitArgs.oldValue);
            }
            else if (emitArgs.newValue !== null && emitArgs.newValue !== undefined) {
                Object.assign(data[index], emitArgs.newValue);
            }
            if (currentGridState.isRowSelected) {
                grid.selection.deselect_item(id, rowID);
                var /** @type {?} */ newRowID = (grid.primaryKey) ? emitArgs.newValue[grid.primaryKey] : emitArgs.newValue;
                grid.selection.select_item(id, newRowID);
            }
            (/** @type {?} */ (grid))._pipeTrigger++;
        }
    };
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    GridBaseAPIService.prototype.update_row_in_array = /**
     * @param {?} id
     * @param {?} value
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    function (id, value, rowID, index) {
        var /** @type {?} */ grid = this.get(id);
        grid.data[index] = value;
    };
    /**
     * @param {?} id
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @param {?} strategy
     * @return {?}
     */
    GridBaseAPIService.prototype.sort = /**
     * @param {?} id
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @param {?} strategy
     * @return {?}
     */
    function (id, fieldName, dir, ignoreCase, strategy) {
        if (dir === SortingDirection.None) {
            this.remove_grouping_expression(id, fieldName);
        }
        var /** @type {?} */ sortingState = cloneArray(this.get(id).sortingExpressions);
        strategy = strategy ? strategy : this.getSortStrategyPerColumn(id, fieldName);
        this.prepare_sorting_expression([sortingState], { fieldName: fieldName, dir: dir, ignoreCase: ignoreCase, strategy: strategy });
        this.get(id).sortingExpressions = sortingState;
    };
    /**
     * @param {?} id
     * @param {?} expressions
     * @return {?}
     */
    GridBaseAPIService.prototype.sort_multiple = /**
     * @param {?} id
     * @param {?} expressions
     * @return {?}
     */
    function (id, expressions) {
        var /** @type {?} */ sortingState = cloneArray(this.get(id).sortingExpressions);
        try {
            for (var expressions_1 = tslib_1.__values(expressions), expressions_1_1 = expressions_1.next(); !expressions_1_1.done; expressions_1_1 = expressions_1.next()) {
                var each = expressions_1_1.value;
                if (each.dir === SortingDirection.None) {
                    this.remove_grouping_expression(id, each.fieldName);
                }
                each.strategy = each.strategy ? each.strategy : this.getSortStrategyPerColumn(id, each.fieldName);
                this.prepare_sorting_expression([sortingState], each);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (expressions_1_1 && !expressions_1_1.done && (_a = expressions_1.return)) _a.call(expressions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.get(id).sortingExpressions = sortingState;
        var e_1, _a;
    };
    /**
     * @param {?} id
     * @param {?} fieldName
     * @param {?} term
     * @param {?} conditionOrExpressionsTree
     * @param {?} ignoreCase
     * @return {?}
     */
    GridBaseAPIService.prototype.filter = /**
     * @param {?} id
     * @param {?} fieldName
     * @param {?} term
     * @param {?} conditionOrExpressionsTree
     * @param {?} ignoreCase
     * @return {?}
     */
    function (id, fieldName, term, conditionOrExpressionsTree, ignoreCase) {
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ filteringTree = grid.filteringExpressionsTree;
        grid.endEdit(false);
        if (grid.paging) {
            grid.page = 0;
        }
        var /** @type {?} */ fieldFilterIndex = filteringTree.findIndex(fieldName);
        if (fieldFilterIndex > -1) {
            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);
        }
        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase);
        grid.filteringExpressionsTree = filteringTree;
    };
    /**
     * @param {?} id
     * @param {?} term
     * @param {?} condition
     * @param {?} ignoreCase
     * @return {?}
     */
    GridBaseAPIService.prototype.filter_global = /**
     * @param {?} id
     * @param {?} term
     * @param {?} condition
     * @param {?} ignoreCase
     * @return {?}
     */
    function (id, term, condition, ignoreCase) {
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ filteringTree = grid.filteringExpressionsTree;
        if (grid.paging) {
            grid.page = 0;
        }
        filteringTree.filteringOperands = [];
        this.remove_summary(id);
        if (condition) {
            try {
                for (var _a = tslib_1.__values(grid.columns), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var column = _b.value;
                    this.prepare_filtering_expression(filteringTree, column.field, term, condition, ignoreCase || column.filteringIgnoreCase);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        grid.filteringExpressionsTree = filteringTree;
        var e_2, _c;
    };
    /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    GridBaseAPIService.prototype.clear_filter = /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    function (id, fieldName) {
        if (fieldName) {
            var /** @type {?} */ column = this.get_column_by_name(id, fieldName);
            if (!column) {
                return;
            }
        }
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ filteringState = grid.filteringExpressionsTree;
        var /** @type {?} */ index = filteringState.findIndex(fieldName);
        if (index > -1) {
            filteringState.filteringOperands.splice(index, 1);
            this.remove_summary(id, fieldName);
        }
        else {
            filteringState.filteringOperands = [];
            this.remove_summary(id);
        }
        grid.filteredData = null;
        grid.filteringExpressionsTree = filteringState;
    };
    /**
     * @param {?} id
     * @param {?} column
     * @param {?} data
     * @return {?}
     */
    GridBaseAPIService.prototype.calculateSummaries = /**
     * @param {?} id
     * @param {?} column
     * @param {?} data
     * @return {?}
     */
    function (id, column, data) {
        if (!this.summaryCacheMap.get(id).get(column.field)) {
            this.summaryCacheMap.get(id).set(column.field, column.summaries.operate(data));
        }
    };
    /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    GridBaseAPIService.prototype.clear_sort = /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    function (id, fieldName) {
        var /** @type {?} */ sortingState = this.get(id).sortingExpressions;
        var /** @type {?} */ index = sortingState.findIndex(function (expr) { return expr.fieldName === fieldName; });
        if (index > -1) {
            sortingState.splice(index, 1);
            this.get(id).sortingExpressions = sortingState;
        }
    };
    /**
     * @param {?} filteringState
     * @param {?} fieldName
     * @param {?} searchVal
     * @param {?} conditionOrExpressionsTree
     * @param {?} ignoreCase
     * @return {?}
     */
    GridBaseAPIService.prototype.prepare_filtering_expression = /**
     * @param {?} filteringState
     * @param {?} fieldName
     * @param {?} searchVal
     * @param {?} conditionOrExpressionsTree
     * @param {?} ignoreCase
     * @return {?}
     */
    function (filteringState, fieldName, searchVal, conditionOrExpressionsTree, ignoreCase) {
        var /** @type {?} */ newExpressionsTree;
        var /** @type {?} */ oldExpressionsTreeIndex = filteringState.findIndex(fieldName);
        var /** @type {?} */ expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ? /** @type {?} */ (conditionOrExpressionsTree) : null;
        var /** @type {?} */ condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?
            null : /** @type {?} */ (conditionOrExpressionsTree);
        var /** @type {?} */ newExpression = { fieldName: fieldName, searchVal: searchVal, condition: condition, ignoreCase: ignoreCase };
        if (oldExpressionsTreeIndex === -1) {
            // no expressions tree found for this field
            if (expressionsTree) {
                filteringState.filteringOperands.push(expressionsTree);
            }
            else if (condition) {
                // create expressions tree for this field and add the new expression to it
                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);
                newExpressionsTree.filteringOperands.push(newExpression);
                filteringState.filteringOperands.push(newExpressionsTree);
            }
        }
    };
    /**
     * @param {?} stateCollections
     * @param {?} expression
     * @return {?}
     */
    GridBaseAPIService.prototype.prepare_sorting_expression = /**
     * @param {?} stateCollections
     * @param {?} expression
     * @return {?}
     */
    function (stateCollections, expression) {
        if (expression.dir === SortingDirection.None) {
            stateCollections.forEach(function (state) {
                state.splice(state.findIndex(function (expr) { return expr.fieldName === expression.fieldName; }), 1);
            });
            return;
        }
        /**
         * We need to make sure the states in each collection with same fields point to the same object reference.
         * If the different state collections provided have different sizes we need to get the largest one.
         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.
         */
        var /** @type {?} */ maxCollection = stateCollections[0];
        for (var /** @type {?} */ i = 1; i < stateCollections.length; i++) {
            if (maxCollection.length < stateCollections[i].length) {
                maxCollection = stateCollections[i];
            }
        }
        var /** @type {?} */ maxExpr = maxCollection.find(function (expr) { return expr.fieldName === expression.fieldName; });
        stateCollections.forEach(function (collection) {
            var /** @type {?} */ myExpr = collection.find(function (expr) { return expr.fieldName === expression.fieldName; });
            if (!myExpr && !maxExpr) {
                // Expression with this fieldName is missing from the current and the max collection.
                collection.push(expression);
            }
            else if (!myExpr && maxExpr) {
                // Expression with this fieldName is missing from the current and but the max collection has.
                collection.push(maxExpr);
                Object.assign(maxExpr, expression);
            }
            else {
                // The current collection has the expression so just update it.
                Object.assign(myExpr, expression);
            }
        });
    };
    /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    GridBaseAPIService.prototype.remove_grouping_expression = /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    function (id, fieldName) {
    };
    /**
     * @param {?} column
     * @return {?}
     */
    GridBaseAPIService.prototype.should_apply_number_style = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return column.dataType === DataType.Number;
    };
    /**
     * @param {?} id
     * @param {?=} transactions
     * @return {?}
     */
    GridBaseAPIService.prototype.get_all_data = /**
     * @param {?} id
     * @param {?=} transactions
     * @return {?}
     */
    function (id, transactions) {
        var /** @type {?} */ grid = this.get(id);
        var /** @type {?} */ data = transactions ? grid.dataWithAddedInTransactionRows : grid.data;
        return data ? data : [];
    };
    /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    GridBaseAPIService.prototype.getSortStrategyPerColumn = /**
     * @param {?} id
     * @param {?} fieldName
     * @return {?}
     */
    function (id, fieldName) {
        return this.get_column_by_name(this.get(id).id, fieldName) ?
            this.get_column_by_name(id, fieldName).sortStrategy : undefined;
    };
    GridBaseAPIService.decorators = [
        { type: Injectable },
    ];
    return GridBaseAPIService;
}());
export { GridBaseAPIService };
function GridBaseAPIService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GridBaseAPIService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GridBaseAPIService.ctorParameters;
    /** @type {?} */
    GridBaseAPIService.prototype.change;
    /** @type {?} */
    GridBaseAPIService.prototype.state;
    /** @type {?} */
    GridBaseAPIService.prototype.editCellState;
    /** @type {?} */
    GridBaseAPIService.prototype.editRowState;
    /** @type {?} */
    GridBaseAPIService.prototype.summaryCacheMap;
    /** @type {?} */
    GridBaseAPIService.prototype.destroyMap;
}

//# sourceMappingURL=data:application/json;base64,