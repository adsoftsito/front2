/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, HostListener, Input, NgZone, ViewChild, QueryList, ViewChildren } from '@angular/core';
import { DataType } from '../data-operations/data-util';
import { SortingDirection } from '../data-operations/sorting-expression.interface';
import { RestrictDrag } from '../directives/dragdrop/dragdrop.directive';
import { GridBaseAPIService } from './api.service';
import { IgxColumnComponent } from './column.component';
import { IgxColumnMovingService } from './grid.common';
import { isFirefox } from '../core/utils';
import { IgxFilteringService } from './filtering/grid-filtering.service';
/**
 * @hidden
 */
var IgxGridHeaderComponent = /** @class */ (function () {
    function IgxGridHeaderComponent(gridAPI, cdr, elementRef, zone, cms, filteringService) {
        this.gridAPI = gridAPI;
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.zone = zone;
        this.cms = cms;
        this.filteringService = filteringService;
        this.hostRole = 'columnheader';
        this.tabindex = -1;
        this.resizeCursor = null;
        this.showResizer = false;
        this.dragDirection = RestrictDrag.HORIZONTALLY;
        this.resizeEndTimeout = isFirefox() ? 200 : 0;
        this.sortDirection = SortingDirection.None;
    }
    Object.defineProperty(IgxGridHeaderComponent.prototype, "styleClasses", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ defaultClasses = [
                'igx-grid__th--fw',
                this.column.headerClasses
            ];
            var /** @type {?} */ classList = {
                'igx-grid__th': !this.column.columnGroup,
                'asc': this.ascending,
                'desc': this.descending,
                'igx-grid__th--number': this.column.dataType === DataType.Number,
                'igx-grid__th--sorted': this.sorted,
                'igx-grid__drag-col-header': this.dragged,
                'igx-grid__th--pinned-last': this.isLastPinned,
                'igx-grid__th--filtering': this.filteringService.filteredColumn === this.column
            };
            Object.entries(classList).forEach(function (_a) {
                var _b = tslib_1.__read(_a, 2), klass = _b[0], value = _b[1];
                if (value) {
                    defaultClasses.push(klass);
                }
            });
            return defaultClasses.join(' ');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            // HACK - think of a better solution
            var /** @type {?} */ colWidth = this.column.width;
            var /** @type {?} */ isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;
            if (isPercentageWidth) {
                var /** @type {?} */ firstContentCell = this.column.cells[0];
                if (firstContentCell) {
                    return firstContentCell.nativeElement.getBoundingClientRect().width + 'px';
                }
            }
            else {
                return this.column.width;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.grid.hasColumnGroups) {
                return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "ascending", {
        get: /**
         * @return {?}
         */
        function () {
            return this.sortDirection === SortingDirection.Asc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "descending", {
        get: /**
         * @return {?}
         */
        function () {
            return this.sortDirection === SortingDirection.Desc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "sortingIcon", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.sortDirection !== SortingDirection.None) {
                // arrow_downward and arrow_upward
                // are material icons ligature strings
                return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';
            }
            return 'none';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "sorted", {
        get: /**
         * @return {?}
         */
        function () {
            return this.sortDirection !== SortingDirection.None;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "dragged", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column === this.column.grid.draggedColumn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "zIndex", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.column.pinned) {
                return null;
            }
            return 9999 - this.grid.pinnedColumns.indexOf(this.column);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "headerID", {
        get: /**
         * @return {?}
         */
        function () {
            return this.gridID + "_" + this.column.field;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.column.columnGroup ? this.zone.runTask(function () { return _this.cdr.markForCheck(); }) :
            this.cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.getSortDirection();
        this.cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.column.columnGroup) {
            this.zone.runOutsideAngular(function () {
                _this.resizeArea.nativeElement.addEventListener('mouseover', _this.onResizeAreaMouseOver.bind(_this));
                _this.resizeArea.nativeElement.addEventListener('mousedown', _this.onResizeAreaMouseDown.bind(_this));
                _this.resizeArea.nativeElement.addEventListener('dblclick', _this.onResizeAreaDblClick.bind(_this));
            });
        }
    };
    /**
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.column.columnGroup) {
            this.zone.runOutsideAngular(function () {
                _this.resizeArea.nativeElement.removeEventListener('mouseover', _this.onResizeAreaMouseOver);
                _this.resizeArea.nativeElement.removeEventListener('mousedown', _this.onResizeAreaMouseDown);
                _this.resizeArea.nativeElement.removeEventListener('dblclick', _this.onResizeAreaDblClick);
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!this.column.grid.isColumnResizing) {
            event.stopPropagation();
            if (this.grid.filteringService.isFilterRowVisible) {
                if (this.column.filterable && !this.column.columnGroup &&
                    !this.grid.filteringService.isFilterComplex(this.column.field)) {
                    this.grid.filteringService.filteredColumn = this.column;
                }
            }
            else if (this.column.sortable) {
                var /** @type {?} */ groupingExpr = this.grid.groupingExpressions ?
                    this.grid.groupingExpressions.find(function (expr) { return expr.fieldName === _this.column.field; }) : null;
                var /** @type {?} */ sortDir = groupingExpr ?
                    this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc
                    : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;
                this.sortDirection = sortDir;
                this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,
                    strategy: this.column.sortStrategy });
                this.grid.onSortingDone.emit({
                    dir: this.sortDirection,
                    fieldName: this.column.field,
                    ignoreCase: this.column.sortingIgnoreCase,
                    strategy: this.column.sortStrategy
                });
            }
        }
    };
    Object.defineProperty(IgxGridHeaderComponent.prototype, "restrictResizeMin", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ actualMinWidth = parseFloat(this.column.minWidth);
            var /** @type {?} */ defaultMinWidth = parseFloat(this.column.defaultMinWidth);
            var /** @type {?} */ minWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;
            minWidth = minWidth < parseFloat(this.column.width) ? minWidth : parseFloat(this.column.width);
            return minWidth - this.elementRef.nativeElement.getBoundingClientRect().width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "restrictResizeMax", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ actualWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
            if (this.column.pinned) {
                var /** @type {?} */ pinnedMaxWidth = this._pinnedMaxWidth =
                    this.grid.calcPinnedContainerMaxWidth - this.grid.getPinnedWidth(true) + actualWidth;
                if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {
                    this._pinnedMaxWidth = this.column.maxWidth;
                    return parseFloat(this.column.maxWidth) - actualWidth;
                }
                else {
                    return pinnedMaxWidth - actualWidth;
                }
            }
            else {
                if (this.column.maxWidth) {
                    return parseFloat(this.column.maxWidth) - actualWidth;
                }
                else {
                    return Number.MAX_SAFE_INTEGER;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "grid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.gridAPI.get(this.gridID);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "isPinned", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.pinned;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "isLastPinned", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ pinnedCols = this.grid.pinnedColumns;
            if (pinnedCols.length === 0) {
                return false;
            }
            else {
                return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.getSortDirection = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ expr = this.gridAPI.get(this.gridID).sortingExpressions.find(function (x) { return x.fieldName === _this.column.field; });
        this.sortDirection = expr ? expr.dir : SortingDirection.None;
    };
    /**
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.onResizeAreaMouseOver = /**
     * @return {?}
     */
    function () {
        if (this.column.resizable) {
            this.resizeCursor = 'col-resize';
            this.cdr.detectChanges();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.onResizeAreaMouseDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.button === 0 && this.column.resizable) {
            this.showResizer = true;
            this.column.grid.isColumnResizing = true;
            this.resizerHeight = this.grid.calcResizerHeight;
            this._startResizePos = event.clientX;
        }
        else {
            this.resizeCursor = null;
        }
        this.cdr.detectChanges();
    };
    /**
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.onResizeAreaDblClick = /**
     * @return {?}
     */
    function () {
        if (this.column.resizable) {
            var /** @type {?} */ currentColWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
            var /** @type {?} */ size = this.column.getLargestCellWidth();
            if (this.column.pinned) {
                var /** @type {?} */ newPinnedWidth = this.grid.getPinnedWidth(true) - currentColWidth + parseFloat(size);
                if (newPinnedWidth <= this.grid.calcPinnedContainerMaxWidth) {
                    this.column.width = size;
                }
            }
            else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {
                this.column.width = parseFloat(this.column.maxWidth) + 'px';
            }
            else if (parseFloat(size) < parseFloat(this.column.defaultMinWidth)) {
                this.column.width = this.column.defaultMinWidth + 'px';
            }
            else {
                this.column.width = size;
            }
            this.grid.markForCheck();
            this.grid.reflow();
            this.grid.onColumnResized.emit({ column: this.column, prevWidth: currentColWidth.toString(), newWidth: this.column.width });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.column.grid.isColumnResizing = false;
        this.showResizer = false;
        var /** @type {?} */ diff = event.clientX - this._startResizePos;
        if (this.column.resizable) {
            var /** @type {?} */ currentColWidth = parseFloat(this.column.width);
            var /** @type {?} */ actualMinWidth = parseFloat(this.column.minWidth);
            var /** @type {?} */ defaultMinWidth = parseFloat(this.column.defaultMinWidth);
            var /** @type {?} */ colMinWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;
            var /** @type {?} */ colMaxWidth = this.column.pinned ? parseFloat(this._pinnedMaxWidth) : parseFloat(this.column.maxWidth);
            var /** @type {?} */ actualWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
            currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;
            colMinWidth = colMinWidth < currentColWidth ? colMinWidth : currentColWidth;
            if (currentColWidth + diff < colMinWidth) {
                this.column.width = colMinWidth + 'px';
            }
            else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {
                this.column.width = colMaxWidth + 'px';
            }
            else {
                this.column.width = (currentColWidth + diff) + 'px';
            }
            this.grid.markForCheck();
            this.grid.reflow();
            if (currentColWidth !== parseFloat(this.column.width)) {
                this.grid.onColumnResized.emit({ column: this.column, prevWidth: currentColWidth.toString(), newWidth: this.column.width });
            }
        }
    };
    IgxGridHeaderComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    selector: 'igx-grid-header',
                    template: "<ng-template #defaultColumn>\n    {{ column.header || column.field }}\n</ng-template>\n\n<ng-container *ngIf=\"column.columnGroup\">\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid__th-drop-indicator-left\"></span>\n    <div class=\"igx-grid__thead-title\" [style.width.px]=\"column.width\">{{ column.header }}</div>\n    <div class=\"igx-grid__thead-group\">\n        <ng-container *ngFor=\"let child of column.children\">\n            <div class=\"igx-grid__thead-subgroup\">\n                <igx-grid-header [igxColumnMovingDrag]=\"child\" [attr.droppable]=\"true\" [igxColumnMovingDrop]=\"child\" *ngIf=\"!child.hidden\" [gridID]=\"column.gridID\" [column]=\"child\"\n                    [style.min-width.px]=\"child.width\" [style.flex-basis.px]='child.width' [style.max-width.px]='child.width'></igx-grid-header>\n                <igx-grid-filtering-cell [attr.draggable]=\"false\" *ngIf=\"grid.allowFiltering && !child.children && !child.hidden\" [column]=\"child\"\n                    [style.min-width.px]=\"child.width\" [style.flex-basis.px]='child.width' [style.max-width.px]='child.width'></igx-grid-filtering-cell>\n            </div>\n        </ng-container>\n    </div>\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid__th-drop-indicator-right\"></span>\n</ng-container>\n\n<ng-container *ngIf=\"!column.columnGroup\">\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid__th-drop-indicator-left\">\n    </span>\n    <span class=\"igx-grid__th-title\">\n        <ng-container *ngTemplateOutlet=\"column.headerTemplate ? column.headerTemplate : defaultColumn; context: { $implicit: column }\">\n        </ng-container>\n    </span>\n    <div class=\"igx-grid__th-icons\" *ngIf=\"!column.columnGroup\">\n        <igx-icon class=\"sort-icon\" *ngIf=\"column.sortable\">{{sortingIcon}}</igx-icon>\n        <!-- <igx-grid-filter [column]=\"column\" *ngIf=\"column.filterable\"></igx-grid-filter> -->\n    </div>\n\n    <span *ngIf=\"!column.columnGroup\" [attr.draggable]=\"false\" [style.cursor]=\"resizeCursor\" #resizeArea\n        class=\"igx-grid__th-resize-handle\">\n\n        <div *ngIf=\"showResizer\" igxResizer\n            class=\"igx-grid__th-resize-line\"\n            [style.height.px]=\"resizerHeight\"\n            [restrictHResizeMax]=\"restrictResizeMax\"\n            [restrictHResizeMin]=\"restrictResizeMin\"\n            [resizeEndTimeout]=\"resizeEndTimeout\"\n            (resizeEnd)=\"onResize($event)\">\n        </div>\n\n    </span>\n\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid__th-drop-indicator-right\">\n    </span>\n</ng-container>\n\n"
                },] },
    ];
    /** @nocollapse */
    IgxGridHeaderComponent.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
        { type: ChangeDetectorRef, },
        { type: ElementRef, },
        { type: NgZone, },
        { type: IgxColumnMovingService, },
        { type: IgxFilteringService, },
    ]; };
    IgxGridHeaderComponent.propDecorators = {
        "column": [{ type: Input },],
        "gridID": [{ type: Input },],
        "styleClasses": [{ type: HostBinding, args: ['class',] },],
        "width": [{ type: HostBinding, args: ['style.min-width',] }, { type: HostBinding, args: ['style.max-width',] }, { type: HostBinding, args: ['style.flex-basis',] },],
        "height": [{ type: HostBinding, args: ['style.height.px',] },],
        "zIndex": [{ type: HostBinding, args: ['style.z-index',] },],
        "hostRole": [{ type: HostBinding, args: ['attr.role',] },],
        "tabindex": [{ type: HostBinding, args: ['attr.tabindex',] },],
        "headerID": [{ type: HostBinding, args: ['attr.id',] },],
        "resizeArea": [{ type: ViewChild, args: ['resizeArea',] },],
        "children": [{ type: ViewChildren, args: [IgxGridHeaderComponent, { read: IgxGridHeaderComponent },] },],
        "onClick": [{ type: HostListener, args: ['click', ['$event'],] },],
    };
    return IgxGridHeaderComponent;
}());
export { IgxGridHeaderComponent };
function IgxGridHeaderComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridHeaderComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridHeaderComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxGridHeaderComponent.propDecorators;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.column;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.gridID;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.hostRole;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.tabindex;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.resizeArea;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.children;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.resizeCursor;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.showResizer;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.resizerHeight;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.dragDirection;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.resizeEndTimeout;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.sortDirection;
    /** @type {?} */
    IgxGridHeaderComponent.prototype._startResizePos;
    /** @type {?} */
    IgxGridHeaderComponent.prototype._pinnedMaxWidth;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.gridAPI;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.cdr;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.elementRef;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.zone;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.cms;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.filteringService;
}

//# sourceMappingURL=data:application/json;base64,