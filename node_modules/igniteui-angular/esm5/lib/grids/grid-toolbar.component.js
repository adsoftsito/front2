/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectorRef, Component, HostBinding, Input, Optional, ViewChild } from '@angular/core';
import { CsvFileTypes, IgxCsvExporterOptions, IgxCsvExporterService, IgxExcelExporterOptions, IgxExcelExporterService, AbsoluteScrollStrategy } from '../services/index';
import { GridBaseAPIService } from './api.service';
import { IgxDropDownComponent } from '../drop-down/drop-down.component';
import { IgxColumnHidingComponent } from './column-hiding.component';
import { IgxColumnPinningComponent } from './column-pinning.component';
import { HorizontalAlignment, VerticalAlignment } from '../services/overlay/utilities';
import { ConnectedPositioningStrategy } from '../services/overlay/position';
/**
 * @hidden
 */
var IgxGridToolbarComponent = /** @class */ (function () {
    function IgxGridToolbarComponent(gridAPI, cdr, excelExporter, csvExporter) {
        this.gridAPI = gridAPI;
        this.cdr = cdr;
        this.excelExporter = excelExporter;
        this.csvExporter = csvExporter;
        this._filterColumnsPrompt = 'Filter columns list ...';
        this._positionSettings = {
            horizontalDirection: HorizontalAlignment.Left,
            horizontalStartPoint: HorizontalAlignment.Right,
            verticalDirection: VerticalAlignment.Bottom,
            verticalStartPoint: VerticalAlignment.Bottom
        };
        this._overlaySettings = {
            positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnOutsideClick: true
        };
    }
    Object.defineProperty(IgxGridToolbarComponent.prototype, "filterColumnsPrompt", {
        get: /**
         * Gets the default text shown in the filtering box.
         * ```typescript
         * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;
         * ```
         * @return {?}
         */
        function () {
            return this._filterColumnsPrompt;
        },
        set: /**
         * Sets the default text shown in the filtering box.
         * ```typescript
         * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filterColumnsPrompt = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "defaultDropDownsMaxHeight", {
        get: /**
         * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.
         * ```typescript
         * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;
         * ```
         * @return {?}
         */
        function () {
            var /** @type {?} */ gridHeight = this.grid.calcHeight;
            return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "grid", {
        get: /**
         * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.
         * ```typescript
         * const grid = this.igxGrid1.toolbar.grid;
         * ```
         * @return {?}
         */
        function () {
            return this.gridAPI.get(this.gridID);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "shouldShowExportButton", {
        get: /**
         * Returns whether the `IgxGridComponent` renders an export button.
         * ```typescript
         * cosnt exportButton = this.igxGrid1.toolbar.shouldShowExportButton;
         * ```
         * @return {?}
         */
        function () {
            return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "shouldShowExportExcelButton", {
        get: /**
         * Returns whether the `IgxGridComponent` renders an Excel export button.
         * ```typescript
         * cosnt exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;
         * ```
         * @return {?}
         */
        function () {
            return (this.grid != null && this.grid.exportExcel);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "shouldShowExportCsvButton", {
        get: /**
         * Returns whether the `IgxGridComponent` renders an CSV export button.
         * ```typescript
         * cosnt exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;
         * ```
         * @return {?}
         */
        function () {
            return (this.grid != null && this.grid.exportCsv);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "pinnedColumnsCount", {
        get: /**
         * Returns how many columns are pinned.
         * ```typescript
         * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;
         * ```
         * @return {?}
         */
        function () {
            return this.grid.pinnedColumns.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "displayDensity", {
        get: /**
         * Returns the theme of the `IgxGridToolbarComponent`.
         * The default theme is `comfortable`.
         * Available options are `comfortable`, `cosy`, `compact`.
         * ```typescript
         * let toolbarTheme = this.grid.toolbar.displayDensity;
         * ```
         * @return {?}
         */
        function () {
            return this._displayDensity;
        },
        set: /**
         * Sets the theme of the `IgxGridToolbarComponent`.
         * ```html
         * <igx-grid #grid [data]="localData" [displayDensity]="'compact'" [autoGenerate]="true"></igx-grid>
         * ```
         * @param {?} val
         * @return {?}
         */
        function (val) {
            switch (val) {
                case 'compact':
                    this._displayDensity = "compact" /* compact */;
                    break;
                case 'cosy':
                    this._displayDensity = "cosy" /* cosy */;
                    break;
                case 'comfortable':
                default:
                    this._displayDensity = "comfortable" /* comfortable */;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridToolbarComponent.prototype, "hostClass", {
        get: /**
         * Returns the theme of the `IgxGridToolbarComponent`.
         * ```typescript
         * const toolbarTheme = this.grid.toolbar.hostClass;
         * ```
         * @return {?}
         */
        function () {
            switch (this._displayDensity) {
                case "compact" /* compact */:
                    return 'igx-grid-toolbar--compact';
                case "cosy" /* cosy */:
                    return 'igx-grid-toolbar--cosy';
                case "comfortable" /* comfortable */:
                default:
                    return 'igx-grid-toolbar';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the title of `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();
     * ```
     * @return {?}
     */
    IgxGridToolbarComponent.prototype.getTitle = /**
     * Returns the title of `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();
     * ```
     * @return {?}
     */
    function () {
        return this.grid != null ? this.grid.toolbarTitle : '';
    };
    /**
     * Returns the text of the export button of the `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();
     * ```
     * @return {?}
     */
    IgxGridToolbarComponent.prototype.getExportText = /**
     * Returns the text of the export button of the `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();
     * ```
     * @return {?}
     */
    function () {
        return this.grid != null ? this.grid.exportText : '';
    };
    /**
     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();
     * ```
     * @return {?}
     */
    IgxGridToolbarComponent.prototype.getExportExcelText = /**
     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();
     * ```
     * @return {?}
     */
    function () {
        return this.grid != null ? this.grid.exportExcelText : '';
    };
    /**
     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();
     * ```
     * @return {?}
     */
    IgxGridToolbarComponent.prototype.getExportCsvText = /**
     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.
     * ```typescript
     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();
     * ```
     * @return {?}
     */
    function () {
        return this.grid != null ? this.grid.exportCsvText : '';
    };
    /**
     * Toggles the export button's dropdown menu.
     * ```typescript
     * this.igxGrid1.toolbar.exportClicked();
     * ```
     * @return {?}
     */
    IgxGridToolbarComponent.prototype.exportClicked = /**
     * Toggles the export button's dropdown menu.
     * ```typescript
     * this.igxGrid1.toolbar.exportClicked();
     * ```
     * @return {?}
     */
    function () {
        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;
        this._overlaySettings.outlet = this.grid.outletDirective;
        this.exportDropdown.toggle(this._overlaySettings);
    };
    /**
     * Exports the grid to excel.
     * ```typescript
     * this.igxGrid1.toolbar.exportToExcelClicked();
     * ```
     * @return {?}
     */
    IgxGridToolbarComponent.prototype.exportToExcelClicked = /**
     * Exports the grid to excel.
     * ```typescript
     * this.igxGrid1.toolbar.exportToExcelClicked();
     * ```
     * @return {?}
     */
    function () {
        this.performExport(this.excelExporter, 'excel');
    };
    /**
     * Exports the grid to CSV.
     * ```typescript
     * this.igxGrid1.toolbar.exportToCsvClicked();
     * ```
     * @return {?}
     */
    IgxGridToolbarComponent.prototype.exportToCsvClicked = /**
     * Exports the grid to CSV.
     * ```typescript
     * this.igxGrid1.toolbar.exportToCsvClicked();
     * ```
     * @return {?}
     */
    function () {
        this.performExport(this.csvExporter, 'csv');
    };
    /**
     * @param {?} exp
     * @param {?} exportType
     * @return {?}
     */
    IgxGridToolbarComponent.prototype.performExport = /**
     * @param {?} exp
     * @param {?} exportType
     * @return {?}
     */
    function (exp, exportType) {
        this.exportClicked();
        var /** @type {?} */ fileName = 'ExportedData';
        var /** @type {?} */ options = exportType === 'excel' ?
            new IgxExcelExporterOptions(fileName) :
            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);
        var /** @type {?} */ args = { grid: this.grid, exporter: exp, options: options, cancel: false };
        this.grid.onToolbarExporting.emit(args);
        if (args.cancel) {
            return;
        }
        exp.export(this.grid, options);
    };
    /**
     * Toggles the Column Hiding UI.
     * ```typescript
     * grid1.toolbar.toggleColumnHidingUI();
     * ```
     * @return {?}
     */
    IgxGridToolbarComponent.prototype.toggleColumnHidingUI = /**
     * Toggles the Column Hiding UI.
     * ```typescript
     * grid1.toolbar.toggleColumnHidingUI();
     * ```
     * @return {?}
     */
    function () {
        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;
        this._overlaySettings.outlet = this.grid.outletDirective;
        this.columnHidingDropdown.toggle(this._overlaySettings);
    };
    /**
     * Toggles the Column Pinning UI.
     * ```typescript
     * grid1.toolbar.toggleColumnPinningUI();
     * ```
     * @return {?}
     */
    IgxGridToolbarComponent.prototype.toggleColumnPinningUI = /**
     * Toggles the Column Pinning UI.
     * ```typescript
     * grid1.toolbar.toggleColumnPinningUI();
     * ```
     * @return {?}
     */
    function () {
        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;
        this._overlaySettings.outlet = this.grid.outletDirective;
        this.columnPinningDropdown.toggle(this._overlaySettings);
    };
    IgxGridToolbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-grid-toolbar',
                    template: "<span class=\"igx-grid-toolbar__title\">\n    {{ getTitle() }}\n</span>\n\n<div class=\"igx-grid-toolbar__actions\">\n    <div *ngIf=\"grid.columnHiding\">\n        <button igxButton=\"flat\" #columnHidingButton name=\"btnColumnHiding\" igxButton igxRipple\n            (click)=\"toggleColumnHidingUI()\">\n            <div  class=\"igx-grid-toolbar__button-space\">\n                <igx-icon *ngIf=\"grid.hiddenColumnsCount > 0\">visibility_off</igx-icon>\n                <igx-icon *ngIf=\"grid.hiddenColumnsCount === 0\">visibility</igx-icon>\n                <span>{{ grid.hiddenColumnsCount }}</span>\n                <span>{{ grid.hiddenColumnsText }}</span>\n            </div>\n        </button>\n        <igx-drop-down #columnHidingDropdown>\n            <igx-column-hiding\n                [columns]=\"grid.columnList\"\n                [title]=\"grid.columnHidingTitle\"\n                [filterColumnsPrompt]=\"filterColumnsPrompt\"\n                [columnsAreaMaxHeight]=\"defaultDropDownsMaxHeight\"\n                (onColumnVisibilityChanged)=\"grid.toggleColumnVisibility($event)\">\n            </igx-column-hiding>\n        </igx-drop-down>\n    </div>\n    <div *ngIf=\"grid.columnPinning\">\n        <button igxButton=\"flat\" #columnPinningButton name=\"btnColumnPinning\" igxButton igxRipple\n            (click)=\"toggleColumnPinningUI()\">\n            <div  class=\"igx-grid-toolbar__button-space\">\n                <igx-icon *ngIf=\"pinnedColumnsCount > 0\">lock</igx-icon>\n                <igx-icon *ngIf=\"pinnedColumnsCount === 0\">lock_open</igx-icon>\n                <span>{{ pinnedColumnsCount }}</span>\n                <span>{{ grid.pinnedColumnsText }}</span>\n                <span></span>\n            </div>\n        </button>\n        <igx-drop-down #columnPinningDropdown>\n            <igx-column-pinning\n                [columns]=\"grid.columnList\"\n                [title]=\"grid.columnPinningTitle\"\n                [filterColumnsPrompt]=\"filterColumnsPrompt\"\n                [columnsAreaMaxHeight]=\"defaultDropDownsMaxHeight\"></igx-column-pinning>\n        </igx-drop-down>\n    </div>\n\n\n    <div class=\"igx-grid-toolbar__dropdown\" *ngIf=\"shouldShowExportButton\" id=\"btnExport\">\n        <button igxButton=\"flat\" igxRipple #btnExport\n                (click)=\"exportClicked()\">\n            <span class=\"igx-grid-toolbar__button-space\">\n                <igx-icon fontSet=\"material\">import_export</igx-icon>\n                <span>{{ getExportText() }}</span>\n                <igx-icon fontSet=\"material\">arrow_drop_down</igx-icon>\n            </span>\n        </button>\n\n        <igx-drop-down #exportDropdown>\n            <ul class=\"igx-grid-toolbar__dd-list\">\n                <li class=\"igx-grid-toolbar__dd-list-items\" igxRipple *ngIf=\"shouldShowExportExcelButton\" id=\"btnExportExcel\"\n                (click)=\"exportToExcelClicked()\">{{ getExportExcelText() }}</li>\n                <li class=\"igx-grid-toolbar__dd-list-items\" igxRipple *ngIf=\"shouldShowExportCsvButton\" id=\"btnExportCsv\"\n                (click)=\"exportToCsvClicked()\">{{ getExportCsvText() }}</li>\n            </ul>\n        </igx-drop-down>\n    </div>\n</div>\n"
                },] },
    ];
    /** @nocollapse */
    IgxGridToolbarComponent.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
        { type: ChangeDetectorRef, },
        { type: IgxExcelExporterService, decorators: [{ type: Optional },] },
        { type: IgxCsvExporterService, decorators: [{ type: Optional },] },
    ]; };
    IgxGridToolbarComponent.propDecorators = {
        "gridID": [{ type: HostBinding, args: ['class.igx-grid-toolbar',] }, { type: Input },],
        "filterColumnsPrompt": [{ type: Input },],
        "defaultDropDownsMaxHeight": [{ type: Input },],
        "columnHidingDropdown": [{ type: ViewChild, args: ['columnHidingDropdown', { read: IgxDropDownComponent },] },],
        "columnHidingUI": [{ type: ViewChild, args: [IgxColumnHidingComponent,] },],
        "columnHidingButton": [{ type: ViewChild, args: ['columnHidingButton',] },],
        "exportDropdown": [{ type: ViewChild, args: ['exportDropdown', { read: IgxDropDownComponent },] },],
        "exportButton": [{ type: ViewChild, args: ['btnExport',] },],
        "columnPinningDropdown": [{ type: ViewChild, args: ['columnPinningDropdown', { read: IgxDropDownComponent },] },],
        "columnPinningUI": [{ type: ViewChild, args: [IgxColumnPinningComponent,] },],
        "columnPinningButton": [{ type: ViewChild, args: ['columnPinningButton',] },],
        "displayDensity": [{ type: Input },],
        "hostClass": [{ type: HostBinding, args: ['attr.class',] },],
    };
    return IgxGridToolbarComponent;
}());
export { IgxGridToolbarComponent };
function IgxGridToolbarComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridToolbarComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridToolbarComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxGridToolbarComponent.propDecorators;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridToolbarComponent.prototype.gridID;
    /** @type {?} */
    IgxGridToolbarComponent.prototype._filterColumnsPrompt;
    /**
     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.
     * ```typescript
     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;
     * ```
     * @type {?}
     */
    IgxGridToolbarComponent.prototype.columnHidingDropdown;
    /**
     * Provides a reference to the `IgxColumnHidingComponent`.
     * ```typescript
     * const hidingUI = this.grid.toolbar.columnHidingUI;
     * ```
     * @type {?}
     */
    IgxGridToolbarComponent.prototype.columnHidingUI;
    /**
     * Provides a reference to the Column Hiding button.
     * ```typescript
     * const hidingButton = this.grid.toolbar.columnHidingButton;
     * ```
     * @type {?}
     */
    IgxGridToolbarComponent.prototype.columnHidingButton;
    /**
     * Provides a reference to the `IgxDropDownComponent` of the Export button.
     * ```typescript
     * const exportDropdown = this.grid.toolbar.exportDropdown;
     * ```
     * @type {?}
     */
    IgxGridToolbarComponent.prototype.exportDropdown;
    /**
     * Provides a reference to the Export button.
     * ```typescript
     * const exportBtn = this.grid.toolbar.exportButton;
     * ```
     * @type {?}
     */
    IgxGridToolbarComponent.prototype.exportButton;
    /**
     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.
     * ```typescript
     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;
     * ```
     * @type {?}
     */
    IgxGridToolbarComponent.prototype.columnPinningDropdown;
    /**
     * Provides a reference to the `IgxColumnPinningComponent`.
     * ```typescript
     * const pinningUI = this.grid.toolbar.columnPinningDropdown;
     * ```
     * @type {?}
     */
    IgxGridToolbarComponent.prototype.columnPinningUI;
    /**
     * Provides a reference to the Column Pinning button.
     * ```typescript
     * const pinningButton = this.grid.toolbar.columnPinningButton;
     * ```
     * @type {?}
     */
    IgxGridToolbarComponent.prototype.columnPinningButton;
    /** @type {?} */
    IgxGridToolbarComponent.prototype._displayDensity;
    /** @type {?} */
    IgxGridToolbarComponent.prototype._positionSettings;
    /** @type {?} */
    IgxGridToolbarComponent.prototype._overlaySettings;
    /** @type {?} */
    IgxGridToolbarComponent.prototype.gridAPI;
    /** @type {?} */
    IgxGridToolbarComponent.prototype.cdr;
    /** @type {?} */
    IgxGridToolbarComponent.prototype.excelExporter;
    /** @type {?} */
    IgxGridToolbarComponent.prototype.csvExporter;
}

//# sourceMappingURL=data:application/json;base64,