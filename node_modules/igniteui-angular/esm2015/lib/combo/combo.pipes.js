/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { forwardRef, Inject, Pipe } from '@angular/core';
import { cloneArray } from '../core/utils';
import { DataUtil } from '../data-operations/data-util';
import { IgxComboComponent } from './combo.component';
import { FilteringStrategy } from '../data-operations/filtering-strategy';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
/**
 * @hidden
 */
export class IgxComboFilteringPipe {
    /**
     * @param {?} combo
     */
    constructor(combo) {
        this.combo = combo;
    }
    /**
     * @param {?} collection
     * @param {?} expressions
     * @param {?} logic
     * @return {?}
     */
    transform(collection, expressions, logic) {
        const /** @type {?} */ filteringExpressionsTree = new FilteringExpressionsTree(logic);
        filteringExpressionsTree.filteringOperands = expressions;
        const /** @type {?} */ state = { expressionsTree: filteringExpressionsTree, strategy: new SimpleFilteringStrategy() };
        state.expressionsTree.filteringOperands = this.combo.filteringExpressions;
        if (!state.expressionsTree.filteringOperands.length) {
            return collection;
        }
        const /** @type {?} */ result = DataUtil.filter(cloneArray(collection), state);
        return result;
    }
}
IgxComboFilteringPipe.decorators = [
    { type: Pipe, args: [{
                name: 'comboFiltering'
            },] },
];
/** @nocollapse */
IgxComboFilteringPipe.ctorParameters = () => [
    { type: IgxComboComponent, decorators: [{ type: Inject, args: [forwardRef(() => IgxComboComponent),] },] },
];
function IgxComboFilteringPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxComboFilteringPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxComboFilteringPipe.ctorParameters;
    /** @type {?} */
    IgxComboFilteringPipe.prototype.combo;
}
/**
 * @hidden
 */
export class SimpleFilteringStrategy extends FilteringStrategy {
    /**
     * @param {?} rec
     * @param {?} expr
     * @return {?}
     */
    findMatchByExpression(rec, expr) {
        const /** @type {?} */ cond = expr.condition;
        const /** @type {?} */ val = expr.fieldName === undefined ? rec : rec[expr.fieldName];
        return cond.logic(val, expr.searchVal, expr.ignoreCase);
    }
}
/**
 * @hidden
 */
export class IgxComboSortingPipe {
    /**
     * @param {?} combo
     */
    constructor(combo) {
        this.combo = combo;
    }
    /**
     * @param {?} collection
     * @param {?} expression
     * @return {?}
     */
    transform(collection, expression) {
        const /** @type {?} */ state = { expressions: [] };
        state.expressions = this.combo.sortingExpressions;
        if (!state.expressions.length) {
            return collection;
        }
        const /** @type {?} */ result = DataUtil.sort(cloneArray(collection), state);
        return result;
    }
}
IgxComboSortingPipe.decorators = [
    { type: Pipe, args: [{
                name: 'comboSorting',
                pure: true
            },] },
];
/** @nocollapse */
IgxComboSortingPipe.ctorParameters = () => [
    { type: IgxComboComponent, decorators: [{ type: Inject, args: [forwardRef(() => IgxComboComponent),] },] },
];
function IgxComboSortingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxComboSortingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxComboSortingPipe.ctorParameters;
    /** @type {?} */
    IgxComboSortingPipe.prototype.combo;
}
/**
 * @hidden
 */
export class IgxComboGroupingPipe {
    /**
     * @param {?} combo
     */
    constructor(combo) {
        this.combo = combo;
    }
    /**
     * @param {?} collection
     * @param {?} groupKey
     * @return {?}
     */
    transform(collection, groupKey) {
        this.combo.filteredData = collection;
        if ((!groupKey && groupKey !== 0) || !collection.length) {
            return collection;
        }
        const /** @type {?} */ data = cloneArray(collection);
        let /** @type {?} */ inserts = 0;
        let /** @type {?} */ currentHeader = null;
        for (let /** @type {?} */ i = 0; i < collection.length; i++) {
            let /** @type {?} */ insertFlag = 0;
            if (currentHeader !== collection[i][groupKey]) {
                currentHeader = collection[i][groupKey];
                insertFlag = 1;
            }
            if (insertFlag) {
                data.splice(i + inserts, 0, {
                    [this.combo.valueKey]: currentHeader,
                    [this.combo.groupKey]: currentHeader,
                    isHeader: true
                });
                inserts++;
            }
        }
        return data;
    }
}
IgxComboGroupingPipe.decorators = [
    { type: Pipe, args: [{
                name: 'comboGrouping'
            },] },
];
/** @nocollapse */
IgxComboGroupingPipe.ctorParameters = () => [
    { type: IgxComboComponent, decorators: [{ type: Inject, args: [forwardRef(() => IgxComboComponent),] },] },
];
function IgxComboGroupingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxComboGroupingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxComboGroupingPipe.ctorParameters;
    /** @type {?} */
    IgxComboGroupingPipe.prototype.combo;
}
/**
 * @hidden
 */
export class IgxComboFilterConditionPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return value.split(/(?=[A-Z])/).join(' ');
    }
}
IgxComboFilterConditionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'filterCondition',
                pure: true
            },] },
];
function IgxComboFilterConditionPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxComboFilterConditionPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxComboFilterConditionPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,