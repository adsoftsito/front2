import { OnDestroy } from '@angular/core';
import { GridBaseAPIService } from '../api.service';
import { IgxIconService } from '../../icon/icon.service';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { IgxGridBaseComponent } from '../grid-base.component';
import { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';
/**
 *@hidden
 */
export declare class ExpressionUI {
    expression: IFilteringExpression;
    beforeOperator: FilteringLogic;
    afterOperator: FilteringLogic;
    isSelected: boolean;
}
/**
 *@hidden
 */
export declare class IgxFilteringService implements OnDestroy {
    private gridAPI;
    private iconService;
    private columnsWithComplexFilter;
    private areEventsSubscribed;
    private destroy$;
    private isFiltering;
    private columnToExpressionsMap;
    private filterPipe;
    private titlecasePipe;
    private datePipe;
    gridId: string;
    isFilterRowVisible: boolean;
    filteredColumn: any;
    selectedExpression: IFilteringExpression;
    columnToChipToFocus: Map<string, boolean>;
    columnToMoreIconHidden: Map<string, boolean>;
    columnStartIndex: number;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>, iconService: IgxIconService);
    ngOnDestroy(): void;
    readonly grid: IgxGridBaseComponent;
    /**
     * Subscribe to grid's events.
     */
    subscribeToEvents(): void;
    /**
     * Execute filtering on the grid.
     */
    filter(field: string, expressionsTree: FilteringExpressionsTree): void;
    /**
     * Clear the filter of a given column.
     */
    clearFilter(field: string): void;
    /**
     * Register filtering SVG icons in the icon service.
     */
    registerSVGIcons(): void;
    /**
     * Returns the ExpressionUI array for a given column.
     */
    getExpressions(columnId: string): ExpressionUI[];
    /**
     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.
     */
    refreshExpressions(): void;
    /**
     * Remove an ExpressionUI for a given column.
     */
    removeExpression(columnId: string, indexToRemove: number): void;
    /**
     * Generate filtering tree for a given column from existing ExpressionUIs.
     */
    createSimpleFilteringTree(columnId: string): FilteringExpressionsTree;
    /**
     * Returns whether a complex filter is applied to a given column.
     */
    isFilterComplex(columnId: string): boolean;
    /**
     * Returns the string representation of the FilteringLogic operator.
     */
    getOperatorAsString(operator: FilteringLogic): any;
    /**
     * Genererate the label of a chip from a given filtering expression.
     */
    getChipLabel(expression: IFilteringExpression): any;
    private updateFilteringCell(columnId);
    private isFilteringTreeComplex(expressions);
    private getChildAndOperatorsCount(expressions);
    private generateExpressionsList(expressions, operator, expressionsUIs);
}
