/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { animate, animation, keyframes, style } from '@angular/animations';
const /** @type {?} */ heartbeatBase = [
    style({
        animationTimingFunction: `ease-out`,
        transform: `scale(1)`,
        transformOrigin: `center center`
    }),
    animate(`{{duration}} {{delay}} {{easing}}`, keyframes([
        style({
            animationTimingFunction: `ease-in`,
            offset: 0.1,
            transform: `scale(0.91)`
        }),
        style({
            animationTimingFunction: `ease-out`,
            offset: 0.17,
            transform: `scale(0.98)`
        }),
        style({
            animationTimingFunction: `ease-in`,
            offset: 0.33,
            transform: `scale(0.87)`
        }),
        style({
            animationTimingFunction: `ease-out`,
            offset: 0.45,
            transform: `scale(1)`
        })
    ]))
];
const /** @type {?} */ heartbeatParams = {
    delay: '0s',
    duration: '1.5s',
    easing: 'ease-in-out'
};
const /** @type {?} */ pulsateBase = [
    animate(`{{duration}} {{delay}} {{easing}}`, keyframes([
        style({
            offset: 0,
            transform: `scale({{fromScale}})`
        }),
        style({
            offset: 0.5,
            transform: `scale({{toScale}})`
        }),
        style({
            offset: 1,
            transform: `scale({{fromScale}})`
        })
    ]))
];
const /** @type {?} */ pulsateParams = {
    delay: '0s',
    duration: '.5s',
    easing: 'ease-in-out',
    fromScale: 1,
    toScale: 1.1
};
const /** @type {?} */ blinkBase = [
    animate(`{{duration}} {{delay}} {{easing}}`, keyframes([
        style({
            offset: 0,
            opacity: .8,
            transform: `scale({{fromScale}})`
        }),
        style({
            offset: 0.8,
            opacity: 0,
            transform: `scale({{midScale}})`
        }),
        style({
            offset: 1,
            opacity: 0,
            transform: `scale({{toScale}})`
        })
    ]))
];
const /** @type {?} */ blinkParams = {
    delay: '0s',
    duration: '.8s',
    easing: 'ease-in-out',
    fromScale: .2,
    midScale: 1.2,
    toScale: 2.2
};
const /** @type {?} */ pulsateFwd = animation(pulsateBase, {
    params: Object.assign({}, pulsateParams)
});
const /** @type {?} */ pulsateBck = animation(pulsateBase, {
    params: Object.assign({}, pulsateParams, { toScale: .9 })
});
const /** @type {?} */ heartbeat = animation(heartbeatBase, {
    params: Object.assign({}, heartbeatParams)
});
const /** @type {?} */ blink = animation(blinkBase, {
    params: Object.assign({}, blinkParams)
});
export { heartbeat, pulsateFwd, pulsateBck, blink };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVsc2F0ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvYW5pbWF0aW9ucy9taXNjL3B1bHNhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxPQUFPLEVBQ1AsU0FBUyxFQUdULFNBQVMsRUFDVCxLQUFLLEVBQ1IsTUFBTSxxQkFBcUIsQ0FBQztBQUc3Qix1QkFBTSxhQUFhLEdBQXdCO0lBQ3ZDLEtBQUssQ0FBQztRQUNGLHVCQUF1QixFQUFFLFVBQVU7UUFDbkMsU0FBUyxFQUFFLFVBQVU7UUFDckIsZUFBZSxFQUFFLGVBQWU7S0FDbkMsQ0FBQztJQUNGLE9BQU8sQ0FDSCxtQ0FBbUMsRUFDbkMsU0FBUyxDQUFDO1FBQ04sS0FBSyxDQUFDO1lBQ0YsdUJBQXVCLEVBQUUsU0FBUztZQUNsQyxNQUFNLEVBQUUsR0FBRztZQUNYLFNBQVMsRUFBRSxhQUFhO1NBQzNCLENBQUM7UUFDRixLQUFLLENBQUM7WUFDRix1QkFBdUIsRUFBRSxVQUFVO1lBQ25DLE1BQU0sRUFBRSxJQUFJO1lBQ1osU0FBUyxFQUFFLGFBQWE7U0FDM0IsQ0FBQztRQUNGLEtBQUssQ0FBQztZQUNGLHVCQUF1QixFQUFFLFNBQVM7WUFDbEMsTUFBTSxFQUFFLElBQUk7WUFDWixTQUFTLEVBQUUsYUFBYTtTQUMzQixDQUFDO1FBQ0YsS0FBSyxDQUFDO1lBQ0YsdUJBQXVCLEVBQUUsVUFBVTtZQUNuQyxNQUFNLEVBQUUsSUFBSTtZQUNaLFNBQVMsRUFBRSxVQUFVO1NBQ3hCLENBQUM7S0FDTCxDQUFDLENBQ0w7Q0FDSixDQUFDO0FBRUYsdUJBQU0sZUFBZSxHQUFxQjtJQUN0QyxLQUFLLEVBQUUsSUFBSTtJQUNYLFFBQVEsRUFBRSxNQUFNO0lBQ2hCLE1BQU0sRUFBRSxhQUFhO0NBQ3hCLENBQUM7QUFFRix1QkFBTSxXQUFXLEdBQXdCO0lBQ3JDLE9BQU8sQ0FDSCxtQ0FBbUMsRUFDbkMsU0FBUyxDQUFDO1FBQ04sS0FBSyxDQUFDO1lBQ0YsTUFBTSxFQUFFLENBQUM7WUFDVCxTQUFTLEVBQUUsc0JBQXNCO1NBQ3BDLENBQUM7UUFDRixLQUFLLENBQUM7WUFDRixNQUFNLEVBQUUsR0FBRztZQUNYLFNBQVMsRUFBRSxvQkFBb0I7U0FDbEMsQ0FBQztRQUNGLEtBQUssQ0FBQztZQUNGLE1BQU0sRUFBRSxDQUFDO1lBQ1QsU0FBUyxFQUFFLHNCQUFzQjtTQUNwQyxDQUFDO0tBQ0wsQ0FBQyxDQUNMO0NBQ0osQ0FBQztBQUVGLHVCQUFNLGFBQWEsR0FBcUI7SUFDcEMsS0FBSyxFQUFFLElBQUk7SUFDWCxRQUFRLEVBQUUsS0FBSztJQUNmLE1BQU0sRUFBRSxhQUFhO0lBQ3JCLFNBQVMsRUFBRSxDQUFDO0lBQ1osT0FBTyxFQUFFLEdBQUc7Q0FDZixDQUFDO0FBRUYsdUJBQU0sU0FBUyxHQUF3QjtJQUNuQyxPQUFPLENBQ0gsbUNBQW1DLEVBQ25DLFNBQVMsQ0FBQztRQUNOLEtBQUssQ0FBQztZQUNGLE1BQU0sRUFBRSxDQUFDO1lBQ1QsT0FBTyxFQUFFLEVBQUU7WUFDWCxTQUFTLEVBQUUsc0JBQXNCO1NBQ3BDLENBQUM7UUFDRixLQUFLLENBQUM7WUFDRixNQUFNLEVBQUUsR0FBRztZQUNYLE9BQU8sRUFBRSxDQUFDO1lBQ1YsU0FBUyxFQUFFLHFCQUFxQjtTQUNuQyxDQUFDO1FBQ0YsS0FBSyxDQUFDO1lBQ0YsTUFBTSxFQUFFLENBQUM7WUFDVCxPQUFPLEVBQUUsQ0FBQztZQUNWLFNBQVMsRUFBRSxvQkFBb0I7U0FDbEMsQ0FBQztLQUNMLENBQUMsQ0FDTDtDQUNKLENBQUM7QUFFRix1QkFBTSxXQUFXLEdBQXFCO0lBQ2xDLEtBQUssRUFBRSxJQUFJO0lBQ1gsUUFBUSxFQUFFLEtBQUs7SUFDZixNQUFNLEVBQUUsYUFBYTtJQUNyQixTQUFTLEVBQUUsRUFBRTtJQUNiLFFBQVEsRUFBRSxHQUFHO0lBQ2IsT0FBTyxFQUFFLEdBQUc7Q0FDZixDQUFDO0FBRUYsdUJBQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUU7SUFDdEMsTUFBTSxvQkFDQyxhQUFhLENBQ25CO0NBQ0osQ0FBQyxDQUFDO0FBRUgsdUJBQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUU7SUFDdEMsTUFBTSxvQkFDQyxhQUFhLElBQ2hCLE9BQU8sRUFBRSxFQUFFLEdBQ2Q7Q0FDSixDQUFDLENBQUM7QUFFSCx1QkFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLGFBQWEsRUFBRTtJQUN2QyxNQUFNLG9CQUNDLGVBQWUsQ0FDckI7Q0FDSixDQUFDLENBQUM7QUFFSCx1QkFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLFNBQVMsRUFBRTtJQUMvQixNQUFNLG9CQUNDLFdBQVcsQ0FDakI7Q0FDSixDQUFDLENBQUM7QUFFSCxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLEVBQ1YsS0FBSyxFQUNSLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIGFuaW1hdGUsXG4gICAgYW5pbWF0aW9uLFxuICAgIEFuaW1hdGlvbk1ldGFkYXRhLFxuICAgIEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhLFxuICAgIGtleWZyYW1lcyxcbiAgICBzdHlsZVxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IElBbmltYXRpb25QYXJhbXMgfSBmcm9tICcuLi9tYWluJztcblxuY29uc3QgaGVhcnRiZWF0QmFzZTogQW5pbWF0aW9uTWV0YWRhdGFbXSA9IFtcbiAgICBzdHlsZSh7XG4gICAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiBgZWFzZS1vdXRgLFxuICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgxKWAsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogYGNlbnRlciBjZW50ZXJgXG4gICAgfSksXG4gICAgYW5pbWF0ZShcbiAgICAgICAgYHt7ZHVyYXRpb259fSB7e2RlbGF5fX0ge3tlYXNpbmd9fWAsXG4gICAgICAgIGtleWZyYW1lcyhbXG4gICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb246IGBlYXNlLWluYCxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAuMSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgwLjkxKWBcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiBgZWFzZS1vdXRgLFxuICAgICAgICAgICAgICAgIG9mZnNldDogMC4xNyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgwLjk4KWBcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiBgZWFzZS1pbmAsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwLjMzLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlKDAuODcpYFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb246IGBlYXNlLW91dGAsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwLjQ1LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlKDEpYFxuICAgICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICApXG5dO1xuXG5jb25zdCBoZWFydGJlYXRQYXJhbXM6IElBbmltYXRpb25QYXJhbXMgPSB7XG4gICAgZGVsYXk6ICcwcycsXG4gICAgZHVyYXRpb246ICcxLjVzJyxcbiAgICBlYXNpbmc6ICdlYXNlLWluLW91dCdcbn07XG5cbmNvbnN0IHB1bHNhdGVCYXNlOiBBbmltYXRpb25NZXRhZGF0YVtdID0gW1xuICAgIGFuaW1hdGUoXG4gICAgICAgIGB7e2R1cmF0aW9ufX0ge3tkZWxheX19IHt7ZWFzaW5nfX1gLFxuICAgICAgICBrZXlmcmFtZXMoW1xuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSh7e2Zyb21TY2FsZX19KWBcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgIG9mZnNldDogMC41LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlKHt7dG9TY2FsZX19KWBcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSh7e2Zyb21TY2FsZX19KWBcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgKVxuXTtcblxuY29uc3QgcHVsc2F0ZVBhcmFtczogSUFuaW1hdGlvblBhcmFtcyA9IHtcbiAgICBkZWxheTogJzBzJyxcbiAgICBkdXJhdGlvbjogJy41cycsXG4gICAgZWFzaW5nOiAnZWFzZS1pbi1vdXQnLFxuICAgIGZyb21TY2FsZTogMSxcbiAgICB0b1NjYWxlOiAxLjFcbn07XG5cbmNvbnN0IGJsaW5rQmFzZTogQW5pbWF0aW9uTWV0YWRhdGFbXSA9IFtcbiAgICBhbmltYXRlKFxuICAgICAgICBge3tkdXJhdGlvbn19IHt7ZGVsYXl9fSB7e2Vhc2luZ319YCxcbiAgICAgICAga2V5ZnJhbWVzKFtcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogLjgsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoe3tmcm9tU2NhbGV9fSlgXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAuOCxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlKHt7bWlkU2NhbGV9fSlgXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSh7e3RvU2NhbGV9fSlgXG4gICAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgIClcbl07XG5cbmNvbnN0IGJsaW5rUGFyYW1zOiBJQW5pbWF0aW9uUGFyYW1zID0ge1xuICAgIGRlbGF5OiAnMHMnLFxuICAgIGR1cmF0aW9uOiAnLjhzJyxcbiAgICBlYXNpbmc6ICdlYXNlLWluLW91dCcsXG4gICAgZnJvbVNjYWxlOiAuMixcbiAgICBtaWRTY2FsZTogMS4yLFxuICAgIHRvU2NhbGU6IDIuMlxufTtcblxuY29uc3QgcHVsc2F0ZUZ3ZCA9IGFuaW1hdGlvbihwdWxzYXRlQmFzZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5wdWxzYXRlUGFyYW1zXG4gICAgfVxufSk7XG5cbmNvbnN0IHB1bHNhdGVCY2sgPSBhbmltYXRpb24ocHVsc2F0ZUJhc2UsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4ucHVsc2F0ZVBhcmFtcyxcbiAgICAgICAgdG9TY2FsZTogLjlcbiAgICB9XG59KTtcblxuY29uc3QgaGVhcnRiZWF0ID0gYW5pbWF0aW9uKGhlYXJ0YmVhdEJhc2UsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uaGVhcnRiZWF0UGFyYW1zXG4gICAgfVxufSk7XG5cbmNvbnN0IGJsaW5rID0gYW5pbWF0aW9uKGJsaW5rQmFzZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5ibGlua1BhcmFtc1xuICAgIH1cbn0pO1xuXG5leHBvcnQge1xuICAgIGhlYXJ0YmVhdCxcbiAgICBwdWxzYXRlRndkLFxuICAgIHB1bHNhdGVCY2ssXG4gICAgYmxpbmtcbn07XG4iXX0=