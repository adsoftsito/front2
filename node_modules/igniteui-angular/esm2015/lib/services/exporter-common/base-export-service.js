/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { EventEmitter, Output } from '@angular/core';
import { cloneValue } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { ExportUtilities } from './export-utilities';
/**
 * @record
 */
export function IRowExportingEventArgs() { }
function IRowExportingEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IRowExportingEventArgs.prototype.rowData;
    /** @type {?} */
    IRowExportingEventArgs.prototype.rowIndex;
    /** @type {?} */
    IRowExportingEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function IColumnExportingEventArgs() { }
function IColumnExportingEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IColumnExportingEventArgs.prototype.header;
    /** @type {?} */
    IColumnExportingEventArgs.prototype.columnIndex;
    /** @type {?} */
    IColumnExportingEventArgs.prototype.cancel;
}
/**
 * @abstract
 */
export class IgxBaseExporter {
    constructor() {
        this._indexOfLastPinnedColumn = -1;
        this._sort = null;
        /**
         * This event is emitted when a row is exported.
         * ```typescript
         * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {
         * // put event handler code here
         * });
         * ```
         * \@memberof IgxBaseExporter
         */
        this.onRowExport = new EventEmitter();
        /**
         * This event is emitted when a column is exported.
         * ```typescript
         * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {
         * // put event handler code here
         * });
         * ```
         * \@memberof IgxBaseExporter
         */
        this.onColumnExport = new EventEmitter();
    }
    /**
     * Method for exporting IgxGrid component's data.
     * ```typescript
     * this.exporterService.export(this.igxGridForExport, this.exportOptions);
     * ```
     * \@memberof IgxBaseExporter
     * @param {?} grid
     * @param {?} options
     * @return {?}
     */
    export(grid, options) {
        if (options === undefined || options === null) {
            throw Error('No options provided!');
        }
        const /** @type {?} */ columns = grid.columnList.toArray();
        this._columnList = new Array(columns.length);
        const /** @type {?} */ hiddenColumns = [];
        let /** @type {?} */ lastVisbleColumnIndex = -1;
        columns.forEach((column) => {
            const /** @type {?} */ columnHeader = column.header !== '' ? column.header : column.field;
            const /** @type {?} */ exportColumn = !column.hidden || options.ignoreColumnsVisibility;
            const /** @type {?} */ index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;
            const /** @type {?} */ columnInfo = {
                header: columnHeader,
                field: column.field,
                skip: !exportColumn,
                formatter: column.formatter
            };
            if (index !== -1) {
                this._columnList[index] = columnInfo;
                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);
            }
            else {
                hiddenColumns.push(columnInfo);
            }
            if (column.pinned && exportColumn) {
                this._indexOfLastPinnedColumn = index;
            }
        });
        // Append the hidden columns to the end of the list
        hiddenColumns.forEach((hiddenColumn) => {
            this._columnList[++lastVisbleColumnIndex] = hiddenColumn;
        });
        const /** @type {?} */ data = this.prepareData(grid, options);
        this.exportData(data, options);
    }
    /**
     * Method for exporting any kind of array data.
     * ```typescript
     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);
     * ```
     * \@memberof IgxBaseExporter
     * @param {?} data
     * @param {?} options
     * @return {?}
     */
    exportData(data, options) {
        if (options === undefined || options === null) {
            throw Error('No options provided!');
        }
        if (!this._columnList || this._columnList.length === 0) {
            const /** @type {?} */ keys = ExportUtilities.getKeysFromData(data);
            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false }));
        }
        let /** @type {?} */ skippedPinnedColumnsCount = 0;
        this._columnList.forEach((column, index) => {
            if (!column.skip) {
                const /** @type {?} */ columnExportArgs = {
                    header: column.header,
                    columnIndex: index,
                    cancel: false
                };
                this.onColumnExport.emit(columnExportArgs);
                column.header = columnExportArgs.header;
                column.skip = columnExportArgs.cancel;
                if (column.skip && index <= this._indexOfLastPinnedColumn) {
                    skippedPinnedColumnsCount++;
                }
                if (this._sort && this._sort.fieldName === column.field) {
                    if (column.skip) {
                        this._sort = null;
                    }
                    else {
                        this._sort.fieldName = column.header;
                    }
                }
            }
        });
        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;
        const /** @type {?} */ dataToExport = new Array();
        const /** @type {?} */ isSpecialData = ExportUtilities.isSpecialData(data);
        data.forEach((row, index) => {
            this.exportRow(dataToExport, row, index, isSpecialData);
        });
        this.exportDataImplementation(dataToExport, options);
        this.resetDefaults();
    }
    /**
     * @param {?} data
     * @param {?} rowData
     * @param {?} index
     * @param {?} isSpecialData
     * @return {?}
     */
    exportRow(data, rowData, index, isSpecialData) {
        let /** @type {?} */ row;
        if (!isSpecialData) {
            row = this._columnList.reduce((a, e) => {
                if (!e.skip) {
                    const /** @type {?} */ rawValue = rowData[e.field];
                    a[e.header] = e.formatter ? e.formatter(rawValue) : rawValue;
                }
                return a;
            }, {});
        }
        else {
            row = rowData;
        }
        const /** @type {?} */ rowArgs = {
            rowData: row,
            rowIndex: index,
            cancel: false
        };
        this.onRowExport.emit(rowArgs);
        if (!rowArgs.cancel) {
            data.push(rowArgs.rowData);
        }
    }
    /**
     * @param {?} grid
     * @param {?} options
     * @return {?}
     */
    prepareData(grid, options) {
        let /** @type {?} */ data = grid.data;
        if (grid.filteringExpressionsTree &&
            grid.filteringExpressionsTree.filteringOperands.length > 0 &&
            !options.ignoreFiltering) {
            const /** @type {?} */ filteringState = {
                expressionsTree: grid.filteringExpressionsTree,
                logic: grid.filteringLogic
            };
            data = DataUtil.filter(data, filteringState);
        }
        if (grid.sortingExpressions &&
            grid.sortingExpressions.length > 0 &&
            !options.ignoreSorting) {
            const /** @type {?} */ sortingState = {
                expressions: grid.sortingExpressions
            };
            this._sort = cloneValue(grid.sortingExpressions[0]);
            data = DataUtil.sort(data, sortingState);
        }
        return data;
    }
    /**
     * @return {?}
     */
    resetDefaults() {
        this._columnList = [];
        this._indexOfLastPinnedColumn = -1;
        this._sort = null;
    }
}
IgxBaseExporter.propDecorators = {
    "onRowExport": [{ type: Output },],
    "onColumnExport": [{ type: Output },],
};
function IgxBaseExporter_tsickle_Closure_declarations() {
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxBaseExporter.propDecorators;
    /** @type {?} */
    IgxBaseExporter.prototype._columnList;
    /** @type {?} */
    IgxBaseExporter.prototype._indexOfLastPinnedColumn;
    /** @type {?} */
    IgxBaseExporter.prototype._sort;
    /**
     * This event is emitted when a row is exported.
     * ```typescript
     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {
     * // put event handler code here
     * });
     * ```
     * \@memberof IgxBaseExporter
     * @type {?}
     */
    IgxBaseExporter.prototype.onRowExport;
    /**
     * This event is emitted when a column is exported.
     * ```typescript
     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {
     * // put event handler code here
     * });
     * ```
     * \@memberof IgxBaseExporter
     * @type {?}
     */
    IgxBaseExporter.prototype.onColumnExport;
    /**
     * @abstract
     * @param {?} data
     * @param {?} options
     * @return {?}
     */
    IgxBaseExporter.prototype.exportDataImplementation = function (data, options) { };
}

//# sourceMappingURL=data:application/json;base64,