/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { VerticalAlignment, HorizontalAlignment } from './../utilities';
import { ConnectedPositioningStrategy } from './connected-positioning-strategy';
/** @enum {number} */
const Axis = {
    X: 1,
    Y: 0,
};
Axis[Axis.X] = "X";
Axis[Axis.Y] = "Y";
export class AutoPositionStrategy extends ConnectedPositioningStrategy {
    constructor() {
        super(...arguments);
        this.offsetPadding = 16;
    }
    /**
     * @param {?} document
     * @return {?}
     */
    getViewPort(document) {
        // Material Design implementation
        const /** @type {?} */ clientRect = document.documentElement.getBoundingClientRect();
        const /** @type {?} */ scrollPosition = {
            top: -clientRect.top,
            left: -clientRect.left
        };
        const /** @type {?} */ width = window.innerWidth;
        const /** @type {?} */ height = window.innerHeight;
        return {
            top: scrollPosition.top,
            left: scrollPosition.left,
            bottom: scrollPosition.top + height,
            right: scrollPosition.left + width,
            height,
            width
        };
    }
    /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    position(contentElement, size, document, initialCall) {
        if (!initialCall) {
            super.position(contentElement, size);
            return;
        }
        this._initialSettings = this._initialSettings || Object.assign({}, this._initialSettings, this.settings);
        this.settings = this._initialSettings ? Object.assign({}, this.settings, this._initialSettings) : this.settings;
        const /** @type {?} */ viewPort = this.getViewPort(document);
        super.position(contentElement, size);
        const /** @type {?} */ checkIfMoveHorizontal = (elem) => {
            const /** @type {?} */ leftBound = elem.offsetLeft;
            const /** @type {?} */ rightBound = elem.offsetLeft + elem.lastElementChild.clientWidth;
            switch (this.settings.horizontalDirection) {
                case HorizontalAlignment.Left:
                    if (leftBound < viewPort.left) {
                        this.settings.horizontalDirection = HorizontalAlignment.Right;
                        this.settings.horizontalStartPoint = HorizontalAlignment.Right;
                    }
                    break;
                case HorizontalAlignment.Right:
                    if (rightBound > viewPort.right) {
                        this.settings.horizontalDirection = HorizontalAlignment.Left;
                        this.settings.horizontalStartPoint = HorizontalAlignment.Left;
                    }
                    break;
                default:
                    return;
            }
        };
        const /** @type {?} */ checkIfMoveVertical = (elem) => {
            const /** @type {?} */ topBound = elem.offsetTop;
            const /** @type {?} */ bottomBound = elem.offsetTop + elem.lastElementChild.clientHeight;
            switch (this.settings.verticalDirection) {
                case VerticalAlignment.Top:
                    if (topBound < viewPort.top) {
                        this.settings.verticalDirection = VerticalAlignment.Bottom;
                        this.settings.verticalStartPoint = VerticalAlignment.Bottom;
                    }
                    break;
                case VerticalAlignment.Bottom:
                    if (bottomBound > viewPort.bottom) {
                        this.settings.verticalDirection = VerticalAlignment.Top;
                        this.settings.verticalStartPoint = VerticalAlignment.Top;
                    }
                    break;
                default:
                    return;
            }
        };
        checkIfMoveVertical(contentElement);
        checkIfMoveHorizontal(contentElement);
        super.position(contentElement, size);
    }
}
function AutoPositionStrategy_tsickle_Closure_declarations() {
    /** @type {?} */
    AutoPositionStrategy.prototype.offsetPadding;
    /** @type {?} */
    AutoPositionStrategy.prototype._initialSettings;
}

//# sourceMappingURL=data:application/json;base64,