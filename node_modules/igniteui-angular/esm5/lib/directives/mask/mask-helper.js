/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * @hidden
 */
export var /** @type {?} */ MASK_FLAGS = ['C', '&', 'a', 'A', '?', 'L', '9', '0', '#'];
/**
 * @hidden
 */
export var /** @type {?} */ KEYS = {
    Ctrl: 17,
    Z: 90,
    Y: 89,
    X: 88,
    BACKSPACE: 8,
    DELETE: 46
};
/**
 * @hidden
 */
var /**
 * @hidden
 */
MaskHelper = /** @class */ (function () {
    function MaskHelper() {
    }
    Object.defineProperty(MaskHelper.prototype, "cursor", {
        get: /**
         * @return {?}
         */
        function () {
            return this._cursor;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?} maskOptions
     * @param {?} cursor
     * @return {?}
     */
    MaskHelper.prototype.parseValueByMask = /**
     * @param {?} value
     * @param {?} maskOptions
     * @param {?} cursor
     * @return {?}
     */
    function (value, maskOptions, cursor) {
        var /** @type {?} */ inputValue = value;
        var /** @type {?} */ mask = maskOptions.format;
        var /** @type {?} */ literals = this.getMaskLiterals(mask);
        var /** @type {?} */ literalKeys = Array.from(literals.keys());
        var /** @type {?} */ nonLiteralIndeces = this.getNonLiteralIndeces(mask, literalKeys);
        if (inputValue.length < mask.length) {
            // BACKSPACE, DELETE
            if (inputValue === '' && cursor === -1) {
                this._cursor = 0;
                return this.parseValueByMaskOnInit(value, maskOptions);
            } // workaround for IE 'x' button
            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {
                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);
                this._cursor = cursor + 1;
            }
            else {
                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);
                this._cursor = cursor + 1;
                for (var /** @type {?} */ i = this._cursor; i < 0; i--) {
                    if (literalKeys.indexOf(this._cursor) !== -1) {
                        this._cursor--;
                    }
                    else {
                        break;
                    }
                }
            }
        }
        else {
            var /** @type {?} */ char = inputValue[cursor];
            var /** @type {?} */ isCharValid = this.validateCharOnPostion(char, cursor, mask);
            if (nonLiteralIndeces.indexOf(cursor) !== -1) {
                inputValue = this.replaceCharAt(inputValue, cursor, '');
                if (isCharValid) {
                    inputValue = this.replaceCharAt(inputValue, cursor, char);
                    this._cursor = cursor + 1;
                }
                else {
                    this._cursor = cursor;
                }
            }
            else {
                inputValue = this.replaceCharAt(inputValue, cursor, '');
                this._cursor = ++cursor;
                for (var /** @type {?} */ i = cursor; i < mask.length; i++) {
                    if (literalKeys.indexOf(this._cursor) !== -1) {
                        this._cursor = ++cursor;
                    }
                    else {
                        isCharValid = this.validateCharOnPostion(char, cursor, mask);
                        if (isCharValid) {
                            inputValue = this.replaceCharAt(inputValue, cursor, char);
                            this._cursor = ++cursor;
                            break;
                        }
                        else {
                            break;
                        }
                    }
                }
            }
        }
        return inputValue;
    };
    /**
     * @param {?} inputVal
     * @param {?} maskOptions
     * @return {?}
     */
    MaskHelper.prototype.parseValueByMaskOnInit = /**
     * @param {?} inputVal
     * @param {?} maskOptions
     * @return {?}
     */
    function (inputVal, maskOptions) {
        var _this = this;
        var /** @type {?} */ outputVal = '';
        var /** @type {?} */ value = '';
        var /** @type {?} */ mask = maskOptions.format;
        var /** @type {?} */ literals = this.getMaskLiterals(mask);
        var /** @type {?} */ literalKeys = Array.from(literals.keys());
        var /** @type {?} */ nonLiteralIndeces = this.getNonLiteralIndeces(mask, literalKeys);
        var /** @type {?} */ literalValues = Array.from(literals.values());
        if (inputVal != null) {
            value = inputVal.toString();
        }
        try {
            for (var mask_1 = tslib_1.__values(mask), mask_1_1 = mask_1.next(); !mask_1_1.done; mask_1_1 = mask_1.next()) {
                var maskSym = mask_1_1.value;
                outputVal += maskOptions.promptChar;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (mask_1_1 && !mask_1_1.done && (_a = mask_1.return)) _a.call(mask_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        literals.forEach(function (val, key) {
            outputVal = _this.replaceCharAt(outputVal, key, val);
        });
        if (!value) {
            return outputVal;
        }
        var /** @type {?} */ nonLiteralValues = this.getNonLiteralValues(value, literalValues);
        for (var /** @type {?} */ i = 0; i < nonLiteralValues.length; i++) {
            var /** @type {?} */ char = nonLiteralValues[i];
            var /** @type {?} */ isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);
            if (!isCharValid && char !== maskOptions.promptChar) {
                nonLiteralValues[i] = maskOptions.promptChar;
            }
        }
        if (nonLiteralValues.length > nonLiteralIndeces.length) {
            nonLiteralValues.splice(nonLiteralIndeces.length);
        }
        var /** @type {?} */ pos = 0;
        try {
            for (var nonLiteralValues_1 = tslib_1.__values(nonLiteralValues), nonLiteralValues_1_1 = nonLiteralValues_1.next(); !nonLiteralValues_1_1.done; nonLiteralValues_1_1 = nonLiteralValues_1.next()) {
                var nonLiteralValue = nonLiteralValues_1_1.value;
                var /** @type {?} */ char = nonLiteralValue;
                outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (nonLiteralValues_1_1 && !nonLiteralValues_1_1.done && (_b = nonLiteralValues_1.return)) _b.call(nonLiteralValues_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return outputVal;
        var e_1, _a, e_2, _b;
    };
    /**
     * @param {?} value
     * @param {?} maskOptions
     * @return {?}
     */
    MaskHelper.prototype.restoreValueFromMask = /**
     * @param {?} value
     * @param {?} maskOptions
     * @return {?}
     */
    function (value, maskOptions) {
        var /** @type {?} */ outputVal = '';
        var /** @type {?} */ mask = maskOptions.format;
        var /** @type {?} */ literals = this.getMaskLiterals(mask);
        var /** @type {?} */ literalValues = Array.from(literals.values());
        try {
            for (var value_1 = tslib_1.__values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                var val = value_1_1.value;
                if (literalValues.indexOf(val) === -1) {
                    if (val !== maskOptions.promptChar) {
                        outputVal += val;
                    }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return outputVal;
        var e_3, _a;
    };
    /**
     * @param {?} value
     * @param {?} maskOptions
     * @param {?} cursor
     * @param {?} selection
     * @return {?}
     */
    MaskHelper.prototype.parseValueByMaskUponSelection = /**
     * @param {?} value
     * @param {?} maskOptions
     * @param {?} cursor
     * @param {?} selection
     * @return {?}
     */
    function (value, maskOptions, cursor, selection) {
        var /** @type {?} */ isCharValid;
        var /** @type {?} */ inputValue = value;
        var /** @type {?} */ char = inputValue[cursor];
        var /** @type {?} */ mask = maskOptions.format;
        var /** @type {?} */ literals = this.getMaskLiterals(mask);
        var /** @type {?} */ literalKeys = Array.from(literals.keys());
        var /** @type {?} */ nonLiteralIndeces = this.getNonLiteralIndeces(mask, literalKeys);
        if (!this.data) {
            this._cursor = cursor < 0 ? ++cursor : cursor;
            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {
                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);
                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :
                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);
                selection--;
                if (selection > 0) {
                    for (var /** @type {?} */ i = 0; i < selection; i++) {
                        cursor++;
                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?
                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :
                            this.insertCharAt(inputValue, cursor, mask[cursor]);
                    }
                }
            }
            else {
                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);
                this._cursor++;
                selection--;
                var /** @type {?} */ isMarked = false;
                if (selection > 0) {
                    cursor = this._cursor;
                    for (var /** @type {?} */ i = 0; i < selection; i++) {
                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {
                            isCharValid = this.validateCharOnPostion(char, cursor, mask);
                            if (isCharValid && !isMarked) {
                                inputValue = this.insertCharAt(inputValue, cursor, char);
                                cursor++;
                                this._cursor++;
                                isMarked = true;
                            }
                            else {
                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);
                                cursor++;
                            }
                        }
                        else {
                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);
                            if (cursor === this._cursor) {
                                this._cursor++;
                            }
                            cursor++;
                        }
                    }
                }
            }
        }
        else {
            if (inputValue === '' && cursor === -1) {
                this._cursor = 0;
                return this.parseValueByMaskOnInit(value, maskOptions);
            } // workaround for IE 'x' button
            if (this._cursor < 0) {
                this._cursor++;
                cursor++;
            }
            cursor++;
            this._cursor = cursor;
            for (var /** @type {?} */ i = 0; i < selection; i++) {
                if (nonLiteralIndeces.indexOf(cursor) !== -1) {
                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);
                    cursor++;
                }
                else {
                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);
                    cursor++;
                }
            }
        }
        return inputValue;
    };
    /**
     * @param {?} value
     * @param {?} maskOptions
     * @param {?} cursor
     * @param {?} clipboardData
     * @param {?} selection
     * @return {?}
     */
    MaskHelper.prototype.parseValueByMaskUponCopyPaste = /**
     * @param {?} value
     * @param {?} maskOptions
     * @param {?} cursor
     * @param {?} clipboardData
     * @param {?} selection
     * @return {?}
     */
    function (value, maskOptions, cursor, clipboardData, selection) {
        var /** @type {?} */ inputValue = value;
        var /** @type {?} */ mask = maskOptions.format;
        var /** @type {?} */ literals = this.getMaskLiterals(mask);
        var /** @type {?} */ literalKeys = Array.from(literals.keys());
        var /** @type {?} */ nonLiteralIndeces = this.getNonLiteralIndeces(mask, literalKeys);
        var /** @type {?} */ selectionEnd = cursor + selection;
        this._cursor = cursor;
        try {
            for (var clipboardData_1 = tslib_1.__values(clipboardData), clipboardData_1_1 = clipboardData_1.next(); !clipboardData_1_1.done; clipboardData_1_1 = clipboardData_1.next()) {
                var clipboardSym = clipboardData_1_1.value;
                var /** @type {?} */ char = clipboardSym;
                if (this._cursor > mask.length) {
                    return inputValue;
                }
                if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {
                    var /** @type {?} */ isCharValid = this.validateCharOnPostion(char, this._cursor, mask);
                    if (isCharValid) {
                        inputValue = this.replaceCharAt(inputValue, this._cursor++, char);
                    }
                }
                else {
                    for (var /** @type {?} */ i = cursor; i < mask.length; i++) {
                        if (literalKeys.indexOf(this._cursor) !== -1) {
                            this._cursor++;
                        }
                        else {
                            var /** @type {?} */ isCharValid = this.validateCharOnPostion(char, this._cursor, mask);
                            if (isCharValid) {
                                inputValue = this.replaceCharAt(inputValue, this._cursor++, char);
                            }
                            break;
                        }
                    }
                }
                selection--;
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (clipboardData_1_1 && !clipboardData_1_1.done && (_a = clipboardData_1.return)) _a.call(clipboardData_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (selection > 0) {
            for (var /** @type {?} */ i = this._cursor; i < selectionEnd; i++) {
                if (literalKeys.indexOf(this._cursor) !== -1) {
                    this._cursor++;
                }
                else {
                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);
                }
            }
        }
        return inputValue;
        var e_4, _a;
    };
    /**
     * @param {?} inputChar
     * @param {?} position
     * @param {?} mask
     * @return {?}
     */
    MaskHelper.prototype.validateCharOnPostion = /**
     * @param {?} inputChar
     * @param {?} position
     * @param {?} mask
     * @return {?}
     */
    function (inputChar, position, mask) {
        var /** @type {?} */ regex;
        var /** @type {?} */ isValid;
        var /** @type {?} */ letterOrDigitRegEx = '[\\d\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z]';
        var /** @type {?} */ letterDigitOrSpaceRegEx = '[\\d\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z\\u0020]';
        var /** @type {?} */ letterRegEx = '[\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z]';
        var /** @type {?} */ letteSpaceRegEx = '[\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z\\u0020]';
        var /** @type {?} */ digitRegEx = '[\\d]';
        var /** @type {?} */ digitSpaceRegEx = '[\\d\\u0020]';
        var /** @type {?} */ digitSpecialRegEx = '[\\d-\\+]';
        switch (mask.charAt(position)) {
            case 'C':
                isValid = inputChar !== '';
                break;
            case '&':
                regex = new RegExp('[\\u0020]');
                isValid = !regex.test(inputChar);
                break;
            case 'a':
                regex = new RegExp(letterDigitOrSpaceRegEx);
                isValid = regex.test(inputChar);
                break;
            case 'A':
                regex = new RegExp(letterOrDigitRegEx);
                isValid = regex.test(inputChar);
                break;
            case '?':
                regex = new RegExp(letteSpaceRegEx);
                isValid = regex.test(inputChar);
                break;
            case 'L':
                regex = new RegExp(letterRegEx);
                isValid = regex.test(inputChar);
                break;
            case '0':
                regex = new RegExp(digitRegEx);
                isValid = regex.test(inputChar);
                break;
            case '9':
                regex = new RegExp(digitSpaceRegEx);
                isValid = regex.test(inputChar);
                break;
            case '#':
                regex = new RegExp(digitSpecialRegEx);
                isValid = regex.test(inputChar);
                break;
            default: {
                isValid = null;
            }
        }
        return isValid;
    };
    /**
     * @param {?} strValue
     * @param {?} index
     * @param {?} char
     * @return {?}
     */
    MaskHelper.prototype.replaceCharAt = /**
     * @param {?} strValue
     * @param {?} index
     * @param {?} char
     * @return {?}
     */
    function (strValue, index, char) {
        if (strValue !== undefined) {
            return strValue.substring(0, index) + char + strValue.substring(index + 1);
        }
    };
    /**
     * @param {?} strValue
     * @param {?} index
     * @param {?} char
     * @return {?}
     */
    MaskHelper.prototype.insertCharAt = /**
     * @param {?} strValue
     * @param {?} index
     * @param {?} char
     * @return {?}
     */
    function (strValue, index, char) {
        if (strValue !== undefined) {
            return strValue.substring(0, index) + char + strValue.substring(index);
        }
    };
    /**
     * @param {?} mask
     * @return {?}
     */
    MaskHelper.prototype.getMaskLiterals = /**
     * @param {?} mask
     * @return {?}
     */
    function (mask) {
        var /** @type {?} */ literals = new Map();
        for (var /** @type {?} */ i = 0; i < mask.length; i++) {
            var /** @type {?} */ char = mask.charAt(i);
            if (MASK_FLAGS.indexOf(char) === -1) {
                literals.set(i, char);
            }
        }
        return literals;
    };
    /**
     * @param {?} mask
     * @param {?} literalKeys
     * @return {?}
     */
    MaskHelper.prototype.getNonLiteralIndeces = /**
     * @param {?} mask
     * @param {?} literalKeys
     * @return {?}
     */
    function (mask, literalKeys) {
        var /** @type {?} */ nonLiteralsIndeces = new Array();
        for (var /** @type {?} */ i = 0; i < mask.length; i++) {
            if (literalKeys.indexOf(i) === -1) {
                nonLiteralsIndeces.push(i);
            }
        }
        return nonLiteralsIndeces;
    };
    /**
     * @param {?} value
     * @param {?} literalValues
     * @return {?}
     */
    MaskHelper.prototype.getNonLiteralValues = /**
     * @param {?} value
     * @param {?} literalValues
     * @return {?}
     */
    function (value, literalValues) {
        var /** @type {?} */ nonLiteralValues = new Array();
        try {
            for (var value_2 = tslib_1.__values(value), value_2_1 = value_2.next(); !value_2_1.done; value_2_1 = value_2.next()) {
                var val = value_2_1.value;
                if (literalValues.indexOf(val) === -1) {
                    nonLiteralValues.push(val);
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (value_2_1 && !value_2_1.done && (_a = value_2.return)) _a.call(value_2);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return nonLiteralValues;
        var e_5, _a;
    };
    return MaskHelper;
}());
/**
 * @hidden
 */
export { MaskHelper };
function MaskHelper_tsickle_Closure_declarations() {
    /** @type {?} */
    MaskHelper.prototype._cursor;
    /** @type {?} */
    MaskHelper.prototype.data;
}

//# sourceMappingURL=data:application/json;base64,