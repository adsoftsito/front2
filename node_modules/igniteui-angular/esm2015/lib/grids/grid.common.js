/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';
import { ChangeDetectorRef, Directive, ElementRef, HostListener, Inject, Injectable, Input, NgZone, Output, Pipe, Renderer2, TemplateRef } from '@angular/core';
import { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';
import { map, switchMap, takeUntil, throttle } from 'rxjs/operators';
import { IgxColumnComponent } from './column.component';
import { IgxDragDirective, IgxDropDirective } from '../directives/dragdrop/dragdrop.directive';
import { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';
import { ConnectedPositioningStrategy } from '../services';
import { getPointFromPositionsSettings, VerticalAlignment } from '../services/overlay/utilities';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export class IgxColumnResizerDirective {
    /**
     * @param {?} element
     * @param {?} document
     * @param {?} zone
     */
    constructor(element, document, zone) {
        this.element = element;
        this.document = document;
        this.zone = zone;
        this.restrictHResizeMin = Number.MIN_SAFE_INTEGER;
        this.restrictHResizeMax = Number.MAX_SAFE_INTEGER;
        this.resizeEndTimeout = 0;
        this.resizeEnd = new Subject();
        this.resizeStart = new Subject();
        this.resize = new Subject();
        this._destroy = new Subject();
        this.resizeStart.pipe(map((event) => event.clientX), takeUntil(this._destroy), switchMap((offset) => this.resize.pipe(map((event) => event.clientX - offset), takeUntil(this.resizeEnd), takeUntil(this._destroy)))).subscribe((pos) => {
            const /** @type {?} */ left = this._left + pos;
            this.left = left < this.restrictHResizeMin ? this.restrictHResizeMin + 'px' : left + 'px';
            if (left > this.restrictHResizeMax) {
                this.left = this.restrictHResizeMax + 'px';
            }
            else if (left > this.restrictHResizeMin) {
                this.left = left + 'px';
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.zone.runOutsideAngular(() => {
            fromEvent(this.document.defaultView, 'mousedown').pipe(takeUntil(this._destroy))
                .subscribe((res) => this.onMousedown(res));
            fromEvent(this.document.defaultView, 'mousemove').pipe(throttle(() => interval(0, animationFrameScheduler)), takeUntil(this._destroy)).subscribe((res) => this.onMousemove(res));
            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))
                .subscribe((res) => this.onMouseup(res));
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy.next(true);
        this._destroy.unsubscribe();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set left(val) {
        requestAnimationFrame(() => this.element.nativeElement.style.left = val);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseup(event) {
        setTimeout(() => {
            this.resizeEnd.next(event);
            this.resizeEnd.complete();
        }, this.resizeEndTimeout);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMousedown(event) {
        this.resizeStart.next(event);
        event.preventDefault();
        const /** @type {?} */ elStyle = this.document.defaultView.getComputedStyle(this.element.nativeElement);
        this._left = Number.isNaN(parseInt(elStyle.left, 10)) ? 0 : parseInt(elStyle.left, 10);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMousemove(event) {
        this.resize.next(event);
        event.preventDefault();
    }
}
IgxColumnResizerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxResizer]'
            },] },
];
/** @nocollapse */
IgxColumnResizerDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    { type: NgZone, },
];
IgxColumnResizerDirective.propDecorators = {
    "restrictHResizeMin": [{ type: Input },],
    "restrictHResizeMax": [{ type: Input },],
    "resizeEndTimeout": [{ type: Input },],
    "resizeEnd": [{ type: Output },],
    "resizeStart": [{ type: Output },],
    "resize": [{ type: Output },],
};
function IgxColumnResizerDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnResizerDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnResizerDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxColumnResizerDirective.propDecorators;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.restrictHResizeMin;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.restrictHResizeMax;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resizeEndTimeout;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resizeEnd;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resizeStart;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resize;
    /** @type {?} */
    IgxColumnResizerDirective.prototype._left;
    /** @type {?} */
    IgxColumnResizerDirective.prototype._destroy;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.element;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.document;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.zone;
}
/**
 * @hidden
 */
export class IgxCellTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxCellTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxCell]'
            },] },
];
/** @nocollapse */
IgxCellTemplateDirective.ctorParameters = () => [
    { type: TemplateRef, },
];
function IgxCellTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCellTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCellTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxCellTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
export class IgxCellHeaderTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxCellHeaderTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxHeader]'
            },] },
];
/** @nocollapse */
IgxCellHeaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef, },
];
function IgxCellHeaderTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCellHeaderTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCellHeaderTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxCellHeaderTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
export class IgxCellFooterTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxCellFooterTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxFooter]'
            },] },
];
/** @nocollapse */
IgxCellFooterTemplateDirective.ctorParameters = () => [
    { type: TemplateRef, },
];
function IgxCellFooterTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCellFooterTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCellFooterTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxCellFooterTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
export class IgxCellEditorTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxCellEditorTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxCellEditor]'
            },] },
];
/** @nocollapse */
IgxCellEditorTemplateDirective.ctorParameters = () => [
    { type: TemplateRef, },
];
function IgxCellEditorTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCellEditorTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCellEditorTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxCellEditorTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
export class IgxColumnMovingService {
    /**
     * @return {?}
     */
    get column() {
        return this._column;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set column(val) {
        if (val) {
            this._column = val;
        }
    }
    /**
     * @return {?}
     */
    get icon() {
        return this._icon;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set icon(val) {
        if (val) {
            this._icon = val;
        }
    }
}
IgxColumnMovingService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] },
];
/** @nocollapse */ IgxColumnMovingService.ngInjectableDef = i0.defineInjectable({ factory: function IgxColumnMovingService_Factory() { return new IgxColumnMovingService(); }, token: IgxColumnMovingService, providedIn: "root" });
function IgxColumnMovingService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnMovingService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnMovingService.ctorParameters;
    /** @type {?} */
    IgxColumnMovingService.prototype._icon;
    /** @type {?} */
    IgxColumnMovingService.prototype._column;
    /** @type {?} */
    IgxColumnMovingService.prototype.cancelDrop;
    /** @type {?} */
    IgxColumnMovingService.prototype.selection;
}
/** @enum {number} */
const DropPosition = {
    BeforeDropTarget: 0,
    AfterDropTarget: 1,
    None: 2,
};
export { DropPosition };
DropPosition[DropPosition.BeforeDropTarget] = "BeforeDropTarget";
DropPosition[DropPosition.AfterDropTarget] = "AfterDropTarget";
DropPosition[DropPosition.None] = "None";
/**
 * @hidden
 */
export class IgxColumnMovingDragDirective extends IgxDragDirective {
    /**
     * @param {?} _element
     * @param {?} _zone
     * @param {?} _renderer
     * @param {?} _cdr
     * @param {?} cms
     */
    constructor(_element, _zone, _renderer, _cdr, cms) {
        super(_cdr, _element, _zone, _renderer);
        this.cms = cms;
        this._ghostImageClass = 'igx-grid__drag-ghost-image';
        this._dragGhostImgIconClass = 'igx-grid__drag-ghost-image-icon';
        this._dragGhostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set data(val) {
        this._column = val;
    }
    /**
     * @return {?}
     */
    get column() {
        return this._column;
    }
    /**
     * @return {?}
     */
    get draggable() {
        return this.column && (this.column.movable || this.column.groupable);
    }
    /**
     * @return {?}
     */
    get icon() {
        return this.cms.icon;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEscape(event) {
        this.cms.cancelDrop = true;
        this.onPointerUp(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPointerDown(event) {
        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        this._removeOnDestroy = false;
        this.cms.column = this.column;
        this.ghostImageClass = this._ghostImageClass;
        super.onPointerDown(event);
        this.column.grid.isColumnMoving = true;
        this.column.grid.cdr.detectChanges();
        const /** @type {?} */ currSelection = this.column.grid.selection.first_item(this.column.gridID + '-cell');
        if (currSelection) {
            this.cms.selection = {
                column: this.column.grid.columnList.toArray()[currSelection.columnID],
                rowID: currSelection.rowID
            };
        }
        const /** @type {?} */ args = {
            source: this.column
        };
        this.column.grid.onColumnMovingStart.emit(args);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPointerMove(event) {
        event.preventDefault();
        super.onPointerMove(event);
        if (this._dragStarted && this._dragGhost && !this.column.grid.draggedColumn) {
            this.column.grid.draggedColumn = this.column;
            this.column.grid.cdr.detectChanges();
        }
        if (this.column.grid.isColumnMoving) {
            const /** @type {?} */ args = {
                source: this.column,
                cancel: false
            };
            this.column.grid.onColumnMoving.emit(args);
            if (args.cancel) {
                this.onEscape(event);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPointerUp(event) {
        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.
        this.zone.run(() => {
            super.onPointerUp(event);
            this.column.grid.isColumnMoving = false;
            this.column.grid.draggedColumn = null;
            this.column.grid.cdr.detectChanges();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    createDragGhost(event) {
        super.createDragGhost(event);
        let /** @type {?} */ pageX, /** @type {?} */ pageY;
        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {
            pageX = event.pageX;
            pageY = event.pageY;
        }
        else {
            pageX = event.touches[0].pageX;
            pageY = event.touches[0].pageY;
        }
        this._dragGhost.style.height = null;
        this._dragGhost.style.minWidth = null;
        this._dragGhost.style.flexBasis = null;
        this._dragGhost.style.position = null;
        const /** @type {?} */ icon = document.createElement('i');
        const /** @type {?} */ text = document.createTextNode('block');
        icon.appendChild(text);
        icon.classList.add('material-icons');
        this.cms.icon = icon;
        if (!this.column.columnGroup) {
            this.renderer.addClass(icon, this._dragGhostImgIconClass);
            this._dragGhost.removeChild(this._dragGhost.children[2]);
            this._dragGhost.insertBefore(icon, this._dragGhost.children[1]);
            this.left = this._dragStartX = pageX - ((this._dragGhost.getBoundingClientRect().width / 3) * 2);
            this.top = this._dragStartY = pageY - ((this._dragGhost.getBoundingClientRect().height / 3) * 2);
        }
        else {
            this._dragGhost.removeChild(this._dragGhost.children[2]);
            this._dragGhost.removeChild(this._dragGhost.firstElementChild);
            this._dragGhost.removeChild(this._dragGhost.lastElementChild);
            this._dragGhost.insertBefore(icon, this._dragGhost.firstElementChild);
            this.renderer.addClass(icon, this._dragGhostImgIconGroupClass);
            this._dragGhost.children[1].style.paddingLeft = '0px';
            this.left = this._dragStartX = pageX - ((this._dragGhost.getBoundingClientRect().width / 3) * 2);
            this.top = this._dragStartY = pageY - ((this._dragGhost.getBoundingClientRect().height / 3) * 2);
        }
    }
}
IgxColumnMovingDragDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxColumnMovingDrag]'
            },] },
];
/** @nocollapse */
IgxColumnMovingDragDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: NgZone, },
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
    { type: IgxColumnMovingService, },
];
IgxColumnMovingDragDirective.propDecorators = {
    "data": [{ type: Input, args: ['igxColumnMovingDrag',] },],
    "onEscape": [{ type: HostListener, args: ['document:keydown.escape', ['$event'],] },],
};
function IgxColumnMovingDragDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnMovingDragDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnMovingDragDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxColumnMovingDragDirective.propDecorators;
    /** @type {?} */
    IgxColumnMovingDragDirective.prototype._column;
    /** @type {?} */
    IgxColumnMovingDragDirective.prototype._ghostImageClass;
    /** @type {?} */
    IgxColumnMovingDragDirective.prototype._dragGhostImgIconClass;
    /** @type {?} */
    IgxColumnMovingDragDirective.prototype._dragGhostImgIconGroupClass;
    /** @type {?} */
    IgxColumnMovingDragDirective.prototype.cms;
}
/**
 * @hidden
 */
export class IgxColumnMovingDropDirective extends IgxDropDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} zone
     * @param {?} cms
     */
    constructor(elementRef, renderer, zone, cms) {
        super(elementRef, renderer, zone);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.zone = zone;
        this.cms = cms;
        this._dropIndicator = null;
        this._lastDropIndicator = null;
        this._dragLeave = new Subject();
        this._dropIndicatorClass = 'igx-grid__th-drop-indicator--active';
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set data(val) {
        if (val instanceof IgxColumnComponent) {
            this._column = val;
        }
        if (val instanceof IgxGridForOfDirective) {
            this._hVirtDir = val;
        }
    }
    /**
     * @return {?}
     */
    get column() {
        return this._column;
    }
    /**
     * @return {?}
     */
    get isDropTarget() {
        return this._column && this._column.grid.hasMovableColumns;
    }
    /**
     * @return {?}
     */
    get horizontalScroll() {
        if (this._hVirtDir) {
            return this._hVirtDir;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._dragLeave.next(true);
        this._dragLeave.complete();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragOver(event) {
        if (this.isDropTarget &&
            this.cms.column !== this.column &&
            this.cms.column.level === this.column.level &&
            this.cms.column.parent === this.column.parent) {
            if (this._lastDropIndicator) {
                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);
            }
            const /** @type {?} */ pos = this.elementRef.nativeElement.getBoundingClientRect().left + parseFloat(this.column.width) / 2;
            if (event.detail.pageX < pos) {
                this._dropPos = DropPosition.BeforeDropTarget;
                this._lastDropIndicator = this._dropIndicator = this.elementRef.nativeElement.firstElementChild;
            }
            else {
                this._dropPos = DropPosition.AfterDropTarget;
                this._lastDropIndicator = this._dropIndicator = this.elementRef.nativeElement.lastElementChild;
            }
            if (this.cms.icon.innerText !== 'block') {
                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragEnter(event) {
        const /** @type {?} */ drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        if (this.isDropTarget &&
            this.cms.column !== this.column &&
            this.cms.column.level === this.column.level &&
            this.cms.column.parent === this.column.parent) {
            if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {
                this.cms.icon.innerText = 'swap_horiz';
            }
            if (!this.cms.column.pinned && this.column.pinned) {
                const /** @type {?} */ nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);
                if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {
                    this.cms.icon.innerText = 'lock';
                }
                else {
                    this.cms.icon.innerText = 'block';
                }
            }
        }
        else {
            this.cms.icon.innerText = 'block';
        }
        if (this.horizontalScroll) {
            this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';
            interval(100).pipe(takeUntil(this._dragLeave)).subscribe((val) => {
                event.target.id === 'right' ? this.horizontalScroll.getHorizontalScroll().scrollLeft += 15 :
                    this.horizontalScroll.getHorizontalScroll().scrollLeft -= 15;
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragLeave(event) {
        const /** @type {?} */ drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        this.cms.icon.innerText = 'block';
        if (this._dropIndicator) {
            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);
        }
        if (this.horizontalScroll) {
            this._dragLeave.next(true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragDrop(event) {
        event.preventDefault();
        const /** @type {?} */ drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        if (this.horizontalScroll) {
            this._dragLeave.next(true);
        }
        if (this.isDropTarget) {
            const /** @type {?} */ args = {
                source: this.cms.column,
                target: this.column
            };
            let /** @type {?} */ nextPinnedWidth;
            if (this.column.pinned && !this.cms.column.pinned) {
                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);
            }
            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||
                this.column.level !== this.cms.column.level ||
                this.column.parent !== this.cms.column.parent ||
                this.cms.cancelDrop) {
                this.cms.cancelDrop = false;
                this.column.grid.onColumnMovingEnd.emit(args);
                return;
            }
            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);
            if (this.cms.selection && this.cms.selection.column) {
                const /** @type {?} */ colID = this.column.grid.columnList.toArray().indexOf(this.cms.selection.column);
                this.column.grid.selection.set(this.column.gridID + '-cell', new Set([{
                        rowID: this.cms.selection.rowID,
                        columnID: colID
                    }]));
                const /** @type {?} */ cell = this.column.grid.getCellByKey(this.cms.selection.rowID, this.cms.selection.column.field);
                if (cell) {
                    cell.nativeElement.focus();
                }
                this.cms.selection = null;
            }
            this.column.grid.draggedColumn = null;
            this.column.grid.cdr.detectChanges();
        }
    }
}
IgxColumnMovingDropDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxColumnMovingDrop]'
            },] },
];
/** @nocollapse */
IgxColumnMovingDropDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: NgZone, },
    { type: IgxColumnMovingService, },
];
IgxColumnMovingDropDirective.propDecorators = {
    "data": [{ type: Input, args: ['igxColumnMovingDrop',] },],
};
function IgxColumnMovingDropDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnMovingDropDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnMovingDropDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxColumnMovingDropDirective.propDecorators;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._dropPos;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._dropIndicator;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._lastDropIndicator;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._column;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._hVirtDir;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._dragLeave;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype._dropIndicatorClass;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype.elementRef;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype.renderer;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype.zone;
    /** @type {?} */
    IgxColumnMovingDropDirective.prototype.cms;
}
/**
 * @hidden
 */
export class IgxDatePipeComponent extends DatePipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        if (value && value instanceof Date) {
            return super.transform(value);
        }
        else {
            return value;
        }
    }
}
IgxDatePipeComponent.decorators = [
    { type: Pipe, args: [{
                name: 'igxdate'
            },] },
];
function IgxDatePipeComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDatePipeComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDatePipeComponent.ctorParameters;
}
/**
 * @hidden
 */
export class IgxDecimalPipeComponent extends DecimalPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        if (value && typeof value === 'number') {
            return super.transform(value);
        }
        else {
            return value;
        }
    }
}
IgxDecimalPipeComponent.decorators = [
    { type: Pipe, args: [{
                name: 'igxdecimal'
            },] },
];
function IgxDecimalPipeComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDecimalPipeComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDecimalPipeComponent.ctorParameters;
}
/**
 * @record
 */
export function ContainerPositionSettings() { }
function ContainerPositionSettings_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    ContainerPositionSettings.prototype.container;
}
export class ContainerPositioningStrategy extends ConnectedPositioningStrategy {
    constructor() {
        super(...arguments);
        this.isTop = false;
        this.isTopInitialPosition = null;
    }
    /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    position(contentElement, size, document, initialCall) {
        const /** @type {?} */ container = this.settings.container; // grid.tbody
        const /** @type {?} */ target = /** @type {?} */ (this.settings.target); // current grid.row
        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);
        // Position of the overlay depends on the available space in the grid.
        // If the bottom space is not enough then the the row overlay will show at the top of the row.
        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),
        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).
        this.isTop = this.isTopInitialPosition !== null ?
            this.isTopInitialPosition :
            container.clientHeight <
                target.offsetTop + target.getBoundingClientRect().height + contentElement.getBoundingClientRect().height;
        this.settings.verticalStartPoint = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;
        const /** @type {?} */ startPoint = getPointFromPositionsSettings(this.settings, contentElement.parentElement);
        contentElement.style.top = startPoint.y + (this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom) * size.height + 'px';
        contentElement.style.width = target.clientWidth + 'px';
    }
}
function ContainerPositioningStrategy_tsickle_Closure_declarations() {
    /** @type {?} */
    ContainerPositioningStrategy.prototype.isTop;
    /** @type {?} */
    ContainerPositioningStrategy.prototype.isTopInitialPosition;
    /** @type {?} */
    ContainerPositioningStrategy.prototype.settings;
}

//# sourceMappingURL=data:application/json;base64,