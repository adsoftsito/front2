/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Component, HostBinding, Input, NgModule } from '@angular/core';
import { IgxIconModule } from '../icon/index';
let /** @type {?} */ NEXT_ID = 0;
/** @enum {string} */
const Type = {
    DEFAULT: 'default',
    INFO: 'info',
    SUCCESS: 'success',
    WARNING: 'warning',
    ERROR: 'error',
};
export { Type };
/**
 * **Ignite UI for Angular Badge** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/badge.html)
 *
 * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the
 * application when visual notification is needed. They are usually designed as icons with a predefined
 * style to communicate information, success, warnings, or errors.
 *
 * Example:
 * ```html
 * <igx-avatar icon="person" roundShape="true" size="small">
 *   <igx-badge icon="check" type="success" class="badge-style">
 *   </igx-badge>
 * </igx-avatar>
 * ```
 * The `badge-style` class is used to position the badge:
 * ```css
 * .badge-style {
 *   position: absolute;
 *   bottom: -6px;
 *   right:-50px;
 * }
 * ```
 */
export class IgxBadgeComponent {
    constructor() {
        /**
         * An \@Input property that sets the value of the `id` attribute.
         * ```html
         * <igx-badge id="igx-badge-2" icon="check" type="success" class="badge-style"></igx-badge>
         * ```
         */
        this.id = `igx-badge-${NEXT_ID++}`;
        /**
         * An \@Input property controlling the type of the badge.
         * Allowed values are `default`, `info`, `success`, `warning`, `error`.
         * Providing an invalid value won't display a badge.
         * ```html
         * <igx-badge type="success" icon="check" class="badge-style"></igx-badge>
         * ```
         */
        this.type = 'default';
        /**
         * An \@Input property that sets the value to be displayed inside the badge.
         * If an `icon` property is already set the `icon` will be displayed.
         * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.
         * ```html
         * <igx-badge value="11" type="success" class="badge-style"></igx-badge>
         * ```
         */
        this.value = '';
        /**
         * This allows you to set value to role attribute.
         * ```html
         * \@ViewChild("MyBadge", { read: IgxBadgeComponent })
         * public badge: IgxBadgeComponent;
         * //...
         * badge.label = "badge-status";
         * ```
         */
        this.role = 'status';
        /**
         * This allows you to disable igx-badge class. The default it's applied.
         * ```html
         * \@ViewChild("MyBadge", { read: IgxBadgeComponent })
         * public badge: IgxBadgeComponent;
         * //...
         * badge.cssClass = false;
         * ```
         */
        this.cssClass = 'igx-badge';
        /**
         * This allows you to set value to aria-label attribute.
         * ```html
         * \@ViewChild("MyBadge", { read: IgxBadgeComponent })
         * public badge: IgxBadgeComponent;
         * //...
         * badge.label = "icon-badge";
         * ```
         */
        this.label = 'badge';
    }
    /**
     * @hidden
     * Defines a human-readable, accessor, author-localized description for the `type` and the `icon` or `value` of the element.
     * @return {?}
     */
    get roleDescription() {
        let /** @type {?} */ message;
        // tslint:disable-next-line:prefer-conditional-expression
        if (this.icon) {
            message = this.type + ' type badge with icon type ' + this.icon;
        }
        else if (this.value) {
            message = this.type + ' badge type with value ' + this.value;
        }
        else {
            message = this.type + ' badge type without value';
        }
        return message;
    }
    /**
     * @hidden
     * Method which makes the name of the class more descriptive.
     * This helps the styling of the badges.
     * @return {?}
     */
    setClasses() {
        let /** @type {?} */ classes = {};
        switch (Type[this.type.toUpperCase()]) {
            case Type.DEFAULT:
                classes = {
                    [`${this.cssClass}__circle--default`]: true
                };
                break;
            case Type.INFO:
                classes = {
                    [`${this.cssClass}__circle--info`]: true
                };
                break;
            case Type.SUCCESS:
                classes = {
                    [`${this.cssClass}__circle--success`]: true
                };
                break;
            case Type.WARNING:
                classes = {
                    [`${this.cssClass}__circle--warning`]: true
                };
                break;
            case Type.ERROR:
                classes = {
                    [`${this.cssClass}__circle--error`]: true
                };
                break;
        }
        return classes;
    }
}
IgxBadgeComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-badge',
                template: `<div class="igx-badge__circle" [ngClass]="setClasses()" [attr.aria-roledescription]="roleDescription">
    <span *ngIf="!icon" class="igx-badge__circle-value">{{value}}</span>
    <igx-icon *ngIf="icon" fontSet="material">{{icon}}</igx-icon>
</div>
`
            },] },
];
/** @nocollapse */
IgxBadgeComponent.propDecorators = {
    "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
    "type": [{ type: Input },],
    "value": [{ type: Input },],
    "icon": [{ type: Input },],
    "role": [{ type: HostBinding, args: ['attr.role',] },],
    "cssClass": [{ type: HostBinding, args: ['class.igx-badge',] },],
    "label": [{ type: HostBinding, args: ['attr.aria-label',] },],
};
function IgxBadgeComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxBadgeComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxBadgeComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxBadgeComponent.propDecorators;
    /**
     * An \@Input property that sets the value of the `id` attribute.
     * ```html
     * <igx-badge id="igx-badge-2" icon="check" type="success" class="badge-style"></igx-badge>
     * ```
     * @type {?}
     */
    IgxBadgeComponent.prototype.id;
    /**
     * An \@Input property controlling the type of the badge.
     * Allowed values are `default`, `info`, `success`, `warning`, `error`.
     * Providing an invalid value won't display a badge.
     * ```html
     * <igx-badge type="success" icon="check" class="badge-style"></igx-badge>
     * ```
     * @type {?}
     */
    IgxBadgeComponent.prototype.type;
    /**
     * An \@Input property that sets the value to be displayed inside the badge.
     * If an `icon` property is already set the `icon` will be displayed.
     * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.
     * ```html
     * <igx-badge value="11" type="success" class="badge-style"></igx-badge>
     * ```
     * @type {?}
     */
    IgxBadgeComponent.prototype.value;
    /**
     * Set an icon for the badge from the material icons set.
     * Has priority over the `value` property.
     * If neither a `value` nor an `icon` is set the content of the badge will be empty.
     * Providing an invalid value won't display anything.
     * ```html
     * <igx-badge icon="check" type="success" class="badge-style" value="11"></igx-badge>
     * ```
     * @type {?}
     */
    IgxBadgeComponent.prototype.icon;
    /**
     * This allows you to set value to role attribute.
     * ```html
     * \@ViewChild("MyBadge", { read: IgxBadgeComponent })
     * public badge: IgxBadgeComponent;
     * //...
     * badge.label = "badge-status";
     * ```
     * @type {?}
     */
    IgxBadgeComponent.prototype.role;
    /**
     * This allows you to disable igx-badge class. The default it's applied.
     * ```html
     * \@ViewChild("MyBadge", { read: IgxBadgeComponent })
     * public badge: IgxBadgeComponent;
     * //...
     * badge.cssClass = false;
     * ```
     * @type {?}
     */
    IgxBadgeComponent.prototype.cssClass;
    /**
     * This allows you to set value to aria-label attribute.
     * ```html
     * \@ViewChild("MyBadge", { read: IgxBadgeComponent })
     * public badge: IgxBadgeComponent;
     * //...
     * badge.label = "icon-badge";
     * ```
     * @type {?}
     */
    IgxBadgeComponent.prototype.label;
}
/**
 * The IgxBadgeComponent provides the {\@link IgxBadgeComponent} inside your application.
 */
export class IgxBadgeModule {
}
IgxBadgeModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxBadgeComponent],
                exports: [IgxBadgeComponent],
                imports: [CommonModule, IgxIconModule]
            },] },
];
function IgxBadgeModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxBadgeModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxBadgeModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,