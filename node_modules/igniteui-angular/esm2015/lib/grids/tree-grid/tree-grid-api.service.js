/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { GridBaseAPIService } from '../api.service';
import { DataType } from '../../data-operations/data-util';
import { first } from 'rxjs/operators';
export class IgxTreeGridAPIService extends GridBaseAPIService {
    /**
     * @param {?} id
     * @param {?=} transactions
     * @return {?}
     */
    get_all_data(id, transactions) {
        const /** @type {?} */ grid = this.get(id);
        const /** @type {?} */ data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;
        return data ? data : [];
    }
    /**
     * @param {?} id
     * @param {?} rowID
     * @return {?}
     */
    expand_row(id, rowID) {
        const /** @type {?} */ grid = this.get(id);
        const /** @type {?} */ expandedStates = grid.expansionStates;
        expandedStates.set(rowID, true);
        grid.expansionStates = expandedStates;
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    }
    /**
     * @param {?} id
     * @param {?} rowID
     * @return {?}
     */
    collapse_row(id, rowID) {
        const /** @type {?} */ grid = this.get(id);
        const /** @type {?} */ expandedStates = grid.expansionStates;
        expandedStates.set(rowID, false);
        grid.expansionStates = expandedStates;
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    }
    /**
     * @param {?} id
     * @param {?} rowID
     * @return {?}
     */
    toggle_row_expansion(id, rowID) {
        const /** @type {?} */ grid = this.get(id);
        const /** @type {?} */ expandedStates = grid.expansionStates;
        const /** @type {?} */ treeRecord = grid.records.get(rowID);
        if (treeRecord) {
            const /** @type {?} */ isExpanded = this.get_row_expansion_state(id, rowID, treeRecord.level);
            expandedStates.set(rowID, !isExpanded);
            grid.expansionStates = expandedStates;
        }
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    }
    /**
     * @param {?} id
     * @param {?} row
     * @param {?} expanded
     * @param {?=} event
     * @param {?=} visibleColumnIndex
     * @return {?}
     */
    trigger_row_expansion_toggle(id, row, expanded, event, visibleColumnIndex) {
        const /** @type {?} */ grid = this.get(id);
        if (!row.children || row.children.length <= 0 && row.expanded === expanded) {
            return;
        }
        const /** @type {?} */ args = {
            rowID: row.rowID,
            expanded: expanded,
            event: event,
            cancel: false
        };
        grid.onRowToggle.emit(args);
        if (args.cancel) {
            return;
        }
        visibleColumnIndex = visibleColumnIndex ? visibleColumnIndex : 0;
        const /** @type {?} */ groupRowIndex = super.get_row_by_key(id, row.rowID).index;
        const /** @type {?} */ shouldScroll = !(grid.unpinnedWidth - grid.totalWidth >= 0);
        const /** @type {?} */ isScrolledToBottom = grid.rowList.length > 0 && grid.rowList.last.index ===
            grid.verticalScrollContainer.igxForOf.length - 1;
        const /** @type {?} */ expandedStates = grid.expansionStates;
        expandedStates.set(row.rowID, expanded);
        grid.expansionStates = expandedStates;
        if (isScrolledToBottom) {
            grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(() => {
                grid.nativeElement.querySelector(`[data-rowIndex="${groupRowIndex}"][data-visibleindex="${visibleColumnIndex}"]`).focus();
            });
        }
        if (expanded) {
            grid.verticalScrollContainer.getVerticalScroll().dispatchEvent(new Event('scroll'));
            if (shouldScroll) {
                grid.parentVirtDir.getHorizontalScroll().dispatchEvent(new Event('scroll'));
            }
        }
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    }
    /**
     * @param {?} id
     * @param {?} rowID
     * @param {?} indentationLevel
     * @return {?}
     */
    get_row_expansion_state(id, rowID, indentationLevel) {
        const /** @type {?} */ grid = this.get(id);
        const /** @type {?} */ states = grid.expansionStates;
        const /** @type {?} */ expanded = states.get(rowID);
        if (expanded !== undefined) {
            return expanded;
        }
        else {
            return indentationLevel < grid.expansionDepth;
        }
    }
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    update_row_in_array(id, value, rowID, index) {
        const /** @type {?} */ grid = this.get(id);
        if (grid.primaryKey && grid.foreignKey) {
            super.update_row_in_array(id, value, rowID, index);
        }
        else {
            const /** @type {?} */ record = grid.records.get(rowID);
            const /** @type {?} */ childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;
            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :
                childData.indexOf(rowID);
            childData[index] = value;
        }
    }
    /**
     * @param {?} column
     * @return {?}
     */
    should_apply_number_style(column) {
        return column.dataType === DataType.Number && column.visibleIndex !== 0;
    }
}

//# sourceMappingURL=data:application/json;base64,