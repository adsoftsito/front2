/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, HostListener, Input, NgModule } from '@angular/core';
import { IgxNavigationService } from './nav.service';
/**
 * Directive that can toggle targets through provided NavigationService.
 *
 * Usage:
 * ```
 * <button igxNavToggle="ID"> Toggle </button>
 * ```
 * Where the `ID` matches the ID of compatible `IToggleView` component.
 */
var IgxNavigationToggleDirective = /** @class */ (function () {
    function IgxNavigationToggleDirective(nav) {
        this.state = nav;
    }
    /**
     * @return {?}
     */
    IgxNavigationToggleDirective.prototype.toggleNavigationDrawer = /**
     * @return {?}
     */
    function () {
        this.state.toggle(this.target, true);
    };
    IgxNavigationToggleDirective.decorators = [
        { type: Directive, args: [{ selector: '[igxNavToggle]' },] },
    ];
    /** @nocollapse */
    IgxNavigationToggleDirective.ctorParameters = function () { return [
        { type: IgxNavigationService, },
    ]; };
    IgxNavigationToggleDirective.propDecorators = {
        "target": [{ type: Input, args: ['igxNavToggle',] },],
        "toggleNavigationDrawer": [{ type: HostListener, args: ['click',] },],
    };
    return IgxNavigationToggleDirective;
}());
export { IgxNavigationToggleDirective };
function IgxNavigationToggleDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxNavigationToggleDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxNavigationToggleDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxNavigationToggleDirective.propDecorators;
    /** @type {?} */
    IgxNavigationToggleDirective.prototype.state;
    /** @type {?} */
    IgxNavigationToggleDirective.prototype.target;
}
/**
 * Directive that can close targets through provided NavigationService.
 *
 * Usage:
 * ```
 * <button igxNavClose="ID"> Close </button>
 * ```
 * Where the `ID` matches the ID of compatible `IToggleView` component.
 */
var IgxNavigationCloseDirective = /** @class */ (function () {
    function IgxNavigationCloseDirective(nav) {
        this.state = nav;
    }
    /**
     * @return {?}
     */
    IgxNavigationCloseDirective.prototype.closeNavigationDrawer = /**
     * @return {?}
     */
    function () {
        this.state.close(this.target, true);
    };
    IgxNavigationCloseDirective.decorators = [
        { type: Directive, args: [{ selector: '[igxNavClose]' },] },
    ];
    /** @nocollapse */
    IgxNavigationCloseDirective.ctorParameters = function () { return [
        { type: IgxNavigationService, },
    ]; };
    IgxNavigationCloseDirective.propDecorators = {
        "target": [{ type: Input, args: ['igxNavClose',] },],
        "closeNavigationDrawer": [{ type: HostListener, args: ['click',] },],
    };
    return IgxNavigationCloseDirective;
}());
export { IgxNavigationCloseDirective };
function IgxNavigationCloseDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxNavigationCloseDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxNavigationCloseDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxNavigationCloseDirective.propDecorators;
    /** @type {?} */
    IgxNavigationCloseDirective.prototype.state;
    /** @type {?} */
    IgxNavigationCloseDirective.prototype.target;
}
var IgxNavigationModule = /** @class */ (function () {
    function IgxNavigationModule() {
    }
    IgxNavigationModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],
                    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],
                    providers: [IgxNavigationService]
                },] },
    ];
    return IgxNavigationModule;
}());
export { IgxNavigationModule };
function IgxNavigationModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxNavigationModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxNavigationModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvY29yZS9uYXZpZ2F0aW9uL2RpcmVjdGl2ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7OztJQWlCL0Msc0NBQVksR0FBeUI7UUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7S0FDcEI7Ozs7SUFHTSw2REFBc0I7Ozs7UUFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQzs7O2dCQVo1QyxTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUU7Ozs7Z0JBWGpDLG9CQUFvQjs7OzJCQWV2QixLQUFLLFNBQUMsY0FBYzsyQ0FNcEIsWUFBWSxTQUFDLE9BQU87O3VDQXRCekI7O1NBYWEsNEJBQTRCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQThCckMscUNBQVksR0FBeUI7UUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7S0FDcEI7Ozs7SUFHTSwyREFBcUI7Ozs7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQzs7O2dCQVozQyxTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFOzs7O2dCQXBDaEMsb0JBQW9COzs7MkJBd0N2QixLQUFLLFNBQUMsYUFBYTswQ0FNbkIsWUFBWSxTQUFDLE9BQU87O3NDQS9DekI7O1NBc0NhLDJCQUEyQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0JBZXZDLFFBQVEsU0FBQztvQkFDTixZQUFZLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSw0QkFBNEIsQ0FBQztvQkFDekUsT0FBTyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsNEJBQTRCLENBQUM7b0JBQ3BFLFNBQVMsRUFBRSxDQUFDLG9CQUFvQixDQUFDO2lCQUNwQzs7OEJBekREOztTQTBEYSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0lneE5hdmlnYXRpb25TZXJ2aWNlfSBmcm9tICcuL25hdi5zZXJ2aWNlJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgdGhhdCBjYW4gdG9nZ2xlIHRhcmdldHMgdGhyb3VnaCBwcm92aWRlZCBOYXZpZ2F0aW9uU2VydmljZS5cbiAqXG4gKiBVc2FnZTpcbiAqIGBgYFxuICogPGJ1dHRvbiBpZ3hOYXZUb2dnbGU9XCJJRFwiPiBUb2dnbGUgPC9idXR0b24+XG4gKiBgYGBcbiAqIFdoZXJlIHRoZSBgSURgIG1hdGNoZXMgdGhlIElEIG9mIGNvbXBhdGlibGUgYElUb2dnbGVWaWV3YCBjb21wb25lbnQuXG4gKi9cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tpZ3hOYXZUb2dnbGVdJyB9KVxuZXhwb3J0IGNsYXNzIElneE5hdmlnYXRpb25Ub2dnbGVEaXJlY3RpdmUge1xuICAgIHB1YmxpYyBzdGF0ZTogSWd4TmF2aWdhdGlvblNlcnZpY2U7XG5cbiAgICBASW5wdXQoJ2lneE5hdlRvZ2dsZScpIHByaXZhdGUgdGFyZ2V0O1xuXG4gICAgY29uc3RydWN0b3IobmF2OiBJZ3hOYXZpZ2F0aW9uU2VydmljZSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gbmF2O1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgICBwdWJsaWMgdG9nZ2xlTmF2aWdhdGlvbkRyYXdlcigpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS50b2dnbGUodGhpcy50YXJnZXQsIHRydWUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBEaXJlY3RpdmUgdGhhdCBjYW4gY2xvc2UgdGFyZ2V0cyB0aHJvdWdoIHByb3ZpZGVkIE5hdmlnYXRpb25TZXJ2aWNlLlxuICpcbiAqIFVzYWdlOlxuICogYGBgXG4gKiA8YnV0dG9uIGlneE5hdkNsb3NlPVwiSURcIj4gQ2xvc2UgPC9idXR0b24+XG4gKiBgYGBcbiAqIFdoZXJlIHRoZSBgSURgIG1hdGNoZXMgdGhlIElEIG9mIGNvbXBhdGlibGUgYElUb2dnbGVWaWV3YCBjb21wb25lbnQuXG4gKi9cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tpZ3hOYXZDbG9zZV0nIH0pXG5leHBvcnQgY2xhc3MgSWd4TmF2aWdhdGlvbkNsb3NlRGlyZWN0aXZlIHtcbiAgICBwdWJsaWMgc3RhdGU6IElneE5hdmlnYXRpb25TZXJ2aWNlO1xuXG4gICAgQElucHV0KCdpZ3hOYXZDbG9zZScpIHByaXZhdGUgdGFyZ2V0O1xuXG4gICAgY29uc3RydWN0b3IobmF2OiBJZ3hOYXZpZ2F0aW9uU2VydmljZSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gbmF2O1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgICBwdWJsaWMgY2xvc2VOYXZpZ2F0aW9uRHJhd2VyKCkge1xuICAgICAgICB0aGlzLnN0YXRlLmNsb3NlKHRoaXMudGFyZ2V0LCB0cnVlKTtcbiAgICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbSWd4TmF2aWdhdGlvbkNsb3NlRGlyZWN0aXZlLCBJZ3hOYXZpZ2F0aW9uVG9nZ2xlRGlyZWN0aXZlXSxcbiAgICBleHBvcnRzOiBbSWd4TmF2aWdhdGlvbkNsb3NlRGlyZWN0aXZlLCBJZ3hOYXZpZ2F0aW9uVG9nZ2xlRGlyZWN0aXZlXSxcbiAgICBwcm92aWRlcnM6IFtJZ3hOYXZpZ2F0aW9uU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgSWd4TmF2aWdhdGlvbk1vZHVsZSB7fVxuIl19