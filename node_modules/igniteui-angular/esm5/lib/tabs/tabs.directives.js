/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, forwardRef, Host, HostBinding, Inject, TemplateRef } from '@angular/core';
import { IgxTabsComponent } from './tabs.component';
/** @enum {string} */
var ButtonStyle = {
    VISIBLE: 'visible',
    HIDDEN: 'hidden',
    NOT_DISPLAYED: 'not_displayed',
};
var IgxRightButtonStyleDirective = /** @class */ (function () {
    function IgxRightButtonStyleDirective(tabs) {
        this.tabs = tabs;
    }
    /**
     * @return {?}
     */
    IgxRightButtonStyleDirective.prototype.getRightButtonStyle = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;
        var /** @type {?} */ itemsContainerWidth = this.tabs.itemsContainer.nativeElement.offsetWidth;
        var /** @type {?} */ headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        var /** @type {?} */ offset = this.tabs.offset;
        var /** @type {?} */ total = offset + viewPortWidth;
        if (itemsContainerWidth <= headerContainerWidth && offset === 0) {
            return ButtonStyle.NOT_DISPLAYED;
        }
        if (itemsContainerWidth > total) {
            return ButtonStyle.VISIBLE;
        }
        else {
            return ButtonStyle.HIDDEN;
        }
    };
    Object.defineProperty(IgxRightButtonStyleDirective.prototype, "visibleCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRightButtonStyleDirective.prototype, "hiddenCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxRightButtonStyleDirective.prototype, "notDisplayedCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    IgxRightButtonStyleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRightButtonStyle]'
                },] },
    ];
    /** @nocollapse */
    IgxRightButtonStyleDirective.ctorParameters = function () { return [
        { type: IgxTabsComponent, decorators: [{ type: Host }, { type: Inject, args: [forwardRef(function () { return IgxTabsComponent; }),] },] },
    ]; };
    IgxRightButtonStyleDirective.propDecorators = {
        "visibleCSS": [{ type: HostBinding, args: ['class.igx-tabs__header-button',] },],
        "hiddenCSS": [{ type: HostBinding, args: ['class.igx-tabs__header-button--hidden',] },],
        "notDisplayedCSS": [{ type: HostBinding, args: ['class.igx-tabs__header-button--none',] },],
    };
    return IgxRightButtonStyleDirective;
}());
export { IgxRightButtonStyleDirective };
function IgxRightButtonStyleDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxRightButtonStyleDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxRightButtonStyleDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxRightButtonStyleDirective.propDecorators;
    /** @type {?} */
    IgxRightButtonStyleDirective.prototype.tabs;
}
var IgxLeftButtonStyleDirective = /** @class */ (function () {
    function IgxLeftButtonStyleDirective(tabs) {
        this.tabs = tabs;
    }
    /**
     * @return {?}
     */
    IgxLeftButtonStyleDirective.prototype.getLeftButtonStyle = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ itemsContainerWidth = this.tabs.itemsContainer.nativeElement.offsetWidth;
        var /** @type {?} */ headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;
        var /** @type {?} */ offset = this.tabs.offset;
        if (offset === 0) {
            if (itemsContainerWidth <= headerContainerWidth) {
                return ButtonStyle.NOT_DISPLAYED;
            }
            return ButtonStyle.HIDDEN;
        }
        else {
            return ButtonStyle.VISIBLE;
        }
    };
    Object.defineProperty(IgxLeftButtonStyleDirective.prototype, "visibleCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLeftButtonStyleDirective.prototype, "hiddenCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxLeftButtonStyleDirective.prototype, "notDisplayedCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    IgxLeftButtonStyleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxLeftButtonStyle]'
                },] },
    ];
    /** @nocollapse */
    IgxLeftButtonStyleDirective.ctorParameters = function () { return [
        { type: IgxTabsComponent, decorators: [{ type: Host }, { type: Inject, args: [forwardRef(function () { return IgxTabsComponent; }),] },] },
    ]; };
    IgxLeftButtonStyleDirective.propDecorators = {
        "visibleCSS": [{ type: HostBinding, args: ['class.igx-tabs__header-button',] },],
        "hiddenCSS": [{ type: HostBinding, args: ['class.igx-tabs__header-button--hidden',] },],
        "notDisplayedCSS": [{ type: HostBinding, args: ['class.igx-tabs__header-button--none',] },],
    };
    return IgxLeftButtonStyleDirective;
}());
export { IgxLeftButtonStyleDirective };
function IgxLeftButtonStyleDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxLeftButtonStyleDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxLeftButtonStyleDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxLeftButtonStyleDirective.propDecorators;
    /** @type {?} */
    IgxLeftButtonStyleDirective.prototype.tabs;
}
var IgxTabItemTemplateDirective = /** @class */ (function () {
    function IgxTabItemTemplateDirective(template) {
        this.template = template;
    }
    IgxTabItemTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxTab]'
                },] },
    ];
    /** @nocollapse */
    IgxTabItemTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef, },
    ]; };
    return IgxTabItemTemplateDirective;
}());
export { IgxTabItemTemplateDirective };
function IgxTabItemTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTabItemTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTabItemTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxTabItemTemplateDirective.prototype.template;
}

//# sourceMappingURL=data:application/json;base64,