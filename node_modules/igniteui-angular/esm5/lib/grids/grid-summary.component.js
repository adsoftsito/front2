/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Input } from '@angular/core';
import { GridBaseAPIService } from './api.service';
import { IgxColumnComponent } from './column.component';
/**
 * @hidden
 */
var IgxGridSummaryComponent = /** @class */ (function () {
    function IgxGridSummaryComponent(gridAPI, cdr) {
        this.gridAPI = gridAPI;
        this.cdr = cdr;
        this.itemClass = 'igx-grid-summary__item';
    }
    Object.defineProperty(IgxGridSummaryComponent.prototype, "widthPersistenceClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.width !== null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "isPinned", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.pinned;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "isLastPinned", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ pinnedCols = this.gridAPI.get(this.gridID).pinnedColumns;
            if (pinnedCols.length === 0) {
                return false;
            }
            else {
                return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "emptyClass", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.column.hasSummary;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "compactCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.displayDensity === "compact" /* compact */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "cosyCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.displayDensity === "cosy" /* cosy */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "defaultCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.displayDensity === "comfortable" /* comfortable */;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryComponent.prototype, "dataType", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.dataType;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridSummaryComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.displayDensity = this.gridAPI.get(this.gridID).displayDensity;
        this.summaryItemHeight = this.gridAPI.get(this.gridID).defaultRowHeight;
        this.cdr.detectChanges();
    };
    Object.defineProperty(IgxGridSummaryComponent.prototype, "resolveSummaries", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.fieldName) {
                var /** @type {?} */ field = this.fieldName;
                this.fieldName = null;
                this.gridAPI.set_summary_by_column_name(this.gridID, field);
                if (this.column.field === field) {
                    return this.gridAPI.get_summaries(this.gridID).get(field);
                }
                else {
                    return this.gridAPI.get_summaries(this.gridID).get(this.column.field);
                }
            }
            else {
                this.gridAPI.set_summary_by_column_name(this.gridID, this.column.field);
                return this.gridAPI.get_summaries(this.gridID).get(this.column.field);
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxGridSummaryComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    selector: 'igx-grid-summary',
                    template: "<ng-container *ngIf=\"column.hasSummary\">\n    <ng-container *ngFor=\"let summary of resolveSummaries\">\n        <div class=\"{{itemClass}}\" [style.height.px]=\"summaryItemHeight\">\n            <span class=\"igx-grid-summary__label\" title=\"{{ summary.label }}\">{{ summary.label }}</span>\n            <span class=\"igx-grid-summary__result\" title=\"{{ summary.summaryResult }}\">\n                {{ column.dataType === 'number' ? (summary.summaryResult | igxdecimal) : column.dataType === 'date' ? (summary.summaryResult | igxdate) : (summary.summaryResult) }}\n            </span>\n        </div>\n    </ng-container>\n</ng-container>\n"
                },] },
    ];
    /** @nocollapse */
    IgxGridSummaryComponent.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
        { type: ChangeDetectorRef, },
    ]; };
    IgxGridSummaryComponent.propDecorators = {
        "column": [{ type: Input },],
        "gridID": [{ type: Input },],
        "widthPersistenceClass": [{ type: HostBinding, args: ['class.igx-grid-summary--fw',] },],
        "isPinned": [{ type: HostBinding, args: ['class.igx-grid-summary--pinned',] },],
        "isLastPinned": [{ type: HostBinding, args: ['class.igx-grid-summary--pinned-last',] },],
        "emptyClass": [{ type: HostBinding, args: ['class.igx-grid-summary--empty',] },],
        "width": [{ type: HostBinding, args: ['style.min-width',] }, { type: HostBinding, args: ['style.flex-basis',] },],
        "compactCSS": [{ type: HostBinding, args: ['class.igx-grid-summary--compact',] },],
        "cosyCSS": [{ type: HostBinding, args: ['class.igx-grid-summary--cosy',] },],
        "defaultCSS": [{ type: HostBinding, args: ['class.igx-grid-summary',] },],
    };
    return IgxGridSummaryComponent;
}());
export { IgxGridSummaryComponent };
function IgxGridSummaryComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridSummaryComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridSummaryComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxGridSummaryComponent.propDecorators;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.fieldName;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.column;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.gridID;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.summaryItemHeight;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.itemClass;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.displayDensity;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.gridAPI;
    /** @type {?} */
    IgxGridSummaryComponent.prototype.cdr;
}

//# sourceMappingURL=data:application/json;base64,