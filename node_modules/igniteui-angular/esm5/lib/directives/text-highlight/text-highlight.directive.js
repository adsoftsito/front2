/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, NgModule, Renderer2 } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
/**
 * @record
 */
function ISearchInfo() { }
function ISearchInfo_tsickle_Closure_declarations() {
    /** @type {?} */
    ISearchInfo.prototype.searchedText;
    /** @type {?} */
    ISearchInfo.prototype.content;
    /** @type {?} */
    ISearchInfo.prototype.matchCount;
    /** @type {?} */
    ISearchInfo.prototype.caseSensitive;
    /** @type {?} */
    ISearchInfo.prototype.exactMatch;
}
/**
 * @record
 */
export function IActiveHighlightInfo() { }
function IActiveHighlightInfo_tsickle_Closure_declarations() {
    /** @type {?} */
    IActiveHighlightInfo.prototype.rowIndex;
    /** @type {?} */
    IActiveHighlightInfo.prototype.columnIndex;
    /** @type {?} */
    IActiveHighlightInfo.prototype.page;
    /** @type {?} */
    IActiveHighlightInfo.prototype.index;
}
var IgxTextHighlightDirective = /** @class */ (function () {
    function IgxTextHighlightDirective(element, renderer) {
        var _this = this;
        this.renderer = renderer;
        this._div = null;
        this._observer = null;
        this._nodeWasRemoved = false;
        this._forceEvaluation = false;
        this._activeElementIndex = -1;
        /**
         * Identifies the highlight within a unique group.
         * This allows it to have several different highlight groups,
         * with each of them having their own active highlight.
         *
         * ```html
         * <div
         *   igxTextHighlight
         *   [groupName]="myGroupName">
         * </div>
         * ```
         */
        this.groupName = '';
        this._value = '';
        this.destroy$ = new Subject();
        this.parentElement = this.renderer.parentNode(element.nativeElement);
        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe(function (groupName) {
            if (_this.groupName === groupName) {
                if (_this._activeElementIndex !== -1) {
                    _this.deactivate();
                }
                _this.activateIfNecessary();
            }
        });
    }
    Object.defineProperty(IgxTextHighlightDirective.prototype, "value", {
        get: /**
         * The underlying value of the element that will be highlighted.
         *
         * ```typescript
         * // get
         * const elementValue = this.textHighlight.value;
         * ```
         *
         * ```html
         * <!--set-->
         * <div
         *   igxTextHighlight
         *   [value]="newValue">
         * </div>
         * ```
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === undefined || value === null) {
                this._value = '';
            }
            else {
                this._value = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Activates the highlight at a given index.
     * (if such index exists)
     * @param {?} groupName
     * @param {?} highlight
     * @return {?}
     */
    IgxTextHighlightDirective.setActiveHighlight = /**
     * Activates the highlight at a given index.
     * (if such index exists)
     * @param {?} groupName
     * @param {?} highlight
     * @return {?}
     */
    function (groupName, highlight) {
        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);
        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);
    };
    /**
     * Clears any existing highlight.
     * @param {?} groupName
     * @return {?}
     */
    IgxTextHighlightDirective.clearActiveHighlight = /**
     * Clears any existing highlight.
     * @param {?} groupName
     * @return {?}
     */
    function (groupName) {
        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {
            rowIndex: -1,
            columnIndex: -1,
            page: -1,
            index: -1
        });
        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this._observer !== null) {
            this._observer.disconnect();
        }
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.ngOnChanges = /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["value"] && !changes["value"].firstChange) {
            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);
            this.activateIfNecessary();
        }
        if ((changes["row"] !== undefined && !changes["row"].firstChange) ||
            (changes["column"] !== undefined && !changes["column"].firstChange) ||
            (changes["page"] !== undefined && !changes["page"].firstChange)) {
            if (this._activeElementIndex !== -1) {
                this.deactivate();
            }
            this.activateIfNecessary();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {
            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {
                rowIndex: -1,
                columnIndex: -1,
                page: -1,
                index: -1
            });
        }
        this._lastSearchInfo = {
            searchedText: '',
            content: this.value,
            matchCount: 0,
            caseSensitive: false,
            exactMatch: false
        };
        this._container = this.parentElement.firstElementChild;
    };
    /**
     * Clears the existing highlight and highlights the searched text.
     * Returns how many times the element contains the searched text.
     * @param {?} text
     * @param {?=} caseSensitive
     * @param {?=} exactMatch
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.highlight = /**
     * Clears the existing highlight and highlights the searched text.
     * Returns how many times the element contains the searched text.
     * @param {?} text
     * @param {?=} caseSensitive
     * @param {?=} exactMatch
     * @return {?}
     */
    function (text, caseSensitive, exactMatch) {
        var /** @type {?} */ caseSensitiveResolved = caseSensitive ? true : false;
        var /** @type {?} */ exactMatchResolved = exactMatch ? true : false;
        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {
            this._lastSearchInfo.searchedText = text;
            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;
            this._lastSearchInfo.exactMatch = exactMatchResolved;
            this._lastSearchInfo.content = this.value;
            if (text === '' || text === undefined || text === null) {
                this.clearHighlight();
            }
            else {
                this.clearChildElements(true);
                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);
            }
        }
        else if (this._nodeWasRemoved) {
            this._lastSearchInfo.searchedText = text;
            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;
            this._lastSearchInfo.exactMatch = exactMatchResolved;
        }
        return this._lastSearchInfo.matchCount;
    };
    /**
     * Clears any existing highlight.
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.clearHighlight = /**
     * Clears any existing highlight.
     * @return {?}
     */
    function () {
        this.clearChildElements(false);
        this._lastSearchInfo.searchedText = '';
        this._lastSearchInfo.matchCount = 0;
    };
    /**
     * Activates the highlight if it is on the currently active row, column and page.
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.activateIfNecessary = /**
     * Activates the highlight if it is on the currently active row, column and page.
     * @return {?}
     */
    function () {
        var /** @type {?} */ group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);
        if (group.columnIndex === this.column && group.rowIndex === this.row && group.page === this.page) {
            this.activate(group.index);
        }
    };
    /**
     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.
     * Should be used only when necessary as using many observers may lead to performance degradation.
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.observe = /**
     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.
     * Should be used only when necessary as using many observers may lead to performance degradation.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._observer === null) {
            var /** @type {?} */ callback = function (mutationList) {
                mutationList.forEach(function (mutation) {
                    var /** @type {?} */ removedNodes = new (Array.bind.apply(Array, tslib_1.__spread([void 0], mutation.removedNodes)))();
                    removedNodes.forEach(function (n) {
                        if (n === _this._container) {
                            _this._nodeWasRemoved = true;
                            _this.clearChildElements(false);
                        }
                    });
                    var /** @type {?} */ addedNodes = new (Array.bind.apply(Array, tslib_1.__spread([void 0], mutation.addedNodes)))();
                    addedNodes.forEach(function (n) {
                        if (n === _this.parentElement.firstElementChild && _this._nodeWasRemoved) {
                            _this._container = _this.parentElement.firstElementChild;
                            _this._nodeWasRemoved = false;
                            _this._forceEvaluation = true;
                            _this.highlight(_this._lastSearchInfo.searchedText, _this._lastSearchInfo.caseSensitive, _this._lastSearchInfo.exactMatch);
                            _this._forceEvaluation = false;
                            _this.activateIfNecessary();
                            _this._observer.disconnect();
                            _this._observer = null;
                        }
                    });
                });
            };
            this._observer = new MutationObserver(callback);
            this._observer.observe(this.parentElement, { childList: true });
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.activate = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.deactivate();
        if (this._div !== null) {
            var /** @type {?} */ spans = this._div.querySelectorAll('span');
            this._activeElementIndex = index;
            if (spans.length <= index) {
                return;
            }
            var /** @type {?} */ elementToActivate = spans[index];
            this.renderer.addClass(elementToActivate, this.activeCssClass);
            this.renderer.setAttribute(elementToActivate, 'style', 'background:orange;font-weight:bold;color:black');
        }
    };
    /**
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.deactivate = /**
     * @return {?}
     */
    function () {
        if (this._activeElementIndex === -1) {
            return;
        }
        var /** @type {?} */ spans = this._div.querySelectorAll('span');
        if (spans.length <= this._activeElementIndex) {
            this._activeElementIndex = -1;
            return;
        }
        var /** @type {?} */ elementToDeactivate = spans[this._activeElementIndex];
        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);
        this.renderer.setAttribute(elementToDeactivate, 'style', 'background:yellow;font-weight:bold;color:black');
        this._activeElementIndex = -1;
    };
    /**
     * @param {?} originalContentHidden
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.clearChildElements = /**
     * @param {?} originalContentHidden
     * @return {?}
     */
    function (originalContentHidden) {
        if (this.parentElement.firstElementChild) {
            this.renderer.setProperty(this.parentElement.firstElementChild, 'hidden', originalContentHidden);
        }
        if (this._div !== null) {
            this.renderer.removeChild(this.parentElement, this._div);
            this._div = null;
            this._activeElementIndex = -1;
        }
    };
    /**
     * @param {?} searchText
     * @param {?} caseSensitive
     * @param {?} exactMatch
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.getHighlightedText = /**
     * @param {?} searchText
     * @param {?} caseSensitive
     * @param {?} exactMatch
     * @return {?}
     */
    function (searchText, caseSensitive, exactMatch) {
        this.appendDiv();
        var /** @type {?} */ stringValue = String(this.value);
        var /** @type {?} */ contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;
        var /** @type {?} */ searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;
        var /** @type {?} */ matchCount = 0;
        if (exactMatch) {
            if (contentStringResolved === searchTextResolved) {
                // tslint:disable-next-line:max-line-length
                this.appendSpan("<span class=\"" + this.cssClass + "\" style=\"background:yellow;font-weight:bold;color:black\">" + stringValue + "</span>");
                matchCount++;
            }
            else {
                this.appendText(stringValue);
            }
        }
        else {
            var /** @type {?} */ foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);
            var /** @type {?} */ previousMatchEnd = 0;
            while (foundIndex !== -1) {
                var /** @type {?} */ start = foundIndex;
                var /** @type {?} */ end = foundIndex + searchTextResolved.length;
                this.appendText(stringValue.substring(previousMatchEnd, start));
                // tslint:disable-next-line:max-line-length
                this.appendSpan("<span class=\"" + this.cssClass + "\" style=\"background:yellow;font-weight:bold;color:black\">" + stringValue.substring(start, end) + "</span>");
                previousMatchEnd = end;
                matchCount++;
                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);
            }
            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));
        }
        return matchCount;
    };
    /**
     * @param {?} text
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.appendText = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        var /** @type {?} */ textElement = this.renderer.createText(text);
        this.renderer.appendChild(this._div, textElement);
    };
    /**
     * @param {?} outerHTML
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.appendSpan = /**
     * @param {?} outerHTML
     * @return {?}
     */
    function (outerHTML) {
        var /** @type {?} */ span = this.renderer.createElement('span');
        this.renderer.appendChild(this._div, span);
        this.renderer.setProperty(span, 'outerHTML', outerHTML);
    };
    /**
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.appendDiv = /**
     * @return {?}
     */
    function () {
        this._div = this.renderer.createElement('div');
        this.renderer.addClass(this._div, this.containerClass);
        this.renderer.appendChild(this.parentElement, this._div);
    };
    /**
     * @param {?} text
     * @param {?} caseSensitive
     * @param {?} exactMatch
     * @return {?}
     */
    IgxTextHighlightDirective.prototype.searchNeedsEvaluation = /**
     * @param {?} text
     * @param {?} caseSensitive
     * @param {?} exactMatch
     * @return {?}
     */
    function (text, caseSensitive, exactMatch) {
        var /** @type {?} */ searchedText = this._lastSearchInfo.searchedText;
        return !this._nodeWasRemoved &&
            (searchedText === null ||
                searchedText !== text ||
                this._lastSearchInfo.content !== this.value ||
                this._lastSearchInfo.caseSensitive !== caseSensitive ||
                this._lastSearchInfo.exactMatch !== exactMatch ||
                this._forceEvaluation);
    };
    IgxTextHighlightDirective.onActiveElementChanged = new EventEmitter();
    IgxTextHighlightDirective.highlightGroupsMap = new Map();
    IgxTextHighlightDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxTextHighlight]'
                },] },
    ];
    /** @nocollapse */
    IgxTextHighlightDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    IgxTextHighlightDirective.propDecorators = {
        "cssClass": [{ type: Input, args: ['cssClass',] },],
        "activeCssClass": [{ type: Input, args: ['activeCssClass',] },],
        "containerClass": [{ type: Input, args: ['containerClass',] },],
        "groupName": [{ type: Input, args: ['groupName',] },],
        "value": [{ type: Input, args: ['value',] },],
        "row": [{ type: Input, args: ['row',] },],
        "column": [{ type: Input, args: ['column',] },],
        "page": [{ type: Input, args: ['page',] },],
    };
    return IgxTextHighlightDirective;
}());
export { IgxTextHighlightDirective };
function IgxTextHighlightDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTextHighlightDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTextHighlightDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxTextHighlightDirective.propDecorators;
    /** @type {?} */
    IgxTextHighlightDirective.onActiveElementChanged;
    /** @type {?} */
    IgxTextHighlightDirective.highlightGroupsMap;
    /** @type {?} */
    IgxTextHighlightDirective.prototype._lastSearchInfo;
    /** @type {?} */
    IgxTextHighlightDirective.prototype._div;
    /** @type {?} */
    IgxTextHighlightDirective.prototype._observer;
    /** @type {?} */
    IgxTextHighlightDirective.prototype._nodeWasRemoved;
    /** @type {?} */
    IgxTextHighlightDirective.prototype._forceEvaluation;
    /** @type {?} */
    IgxTextHighlightDirective.prototype._activeElementIndex;
    /**
     * Determines the `CSS` class of the highlight elements.
     * This allows the developer to provide custom `CSS` to customize the highlight.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [cssClass]="myClass">
     * </div>
     * ```
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.cssClass;
    /**
     * Determines the `CSS` class of the active highlight element.
     * This allows the developer to provide custom `CSS` to customize the highlight.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [activeCssClass]="activeHighlightClass">
     * </div>
     * ```
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.activeCssClass;
    /**
     * @hidden
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.containerClass;
    /**
     * Identifies the highlight within a unique group.
     * This allows it to have several different highlight groups,
     * with each of them having their own active highlight.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [groupName]="myGroupName">
     * </div>
     * ```
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.groupName;
    /** @type {?} */
    IgxTextHighlightDirective.prototype._value;
    /**
     * The index of the row on which the directive is currently on.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [row]="0">
     * </div>
     * ```
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.row;
    /**
     * The index of the column on which the directive is currently on.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [column]="0">
     * </div>
     * ```
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.column;
    /**
     * The index of the page on which the directive is currently on.
     * It is used when the component containing the directive supports paging.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [page]="0">
     * </div>
     * ```
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.page;
    /**
     * @hidden
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.parentElement;
    /** @type {?} */
    IgxTextHighlightDirective.prototype._container;
    /** @type {?} */
    IgxTextHighlightDirective.prototype.destroy$;
    /** @type {?} */
    IgxTextHighlightDirective.prototype.renderer;
}
var IgxTextHighlightModule = /** @class */ (function () {
    function IgxTextHighlightModule() {
    }
    IgxTextHighlightModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxTextHighlightDirective],
                    exports: [IgxTextHighlightDirective]
                },] },
    ];
    return IgxTextHighlightModule;
}());
export { IgxTextHighlightModule };
function IgxTextHighlightModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTextHighlightModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTextHighlightModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,