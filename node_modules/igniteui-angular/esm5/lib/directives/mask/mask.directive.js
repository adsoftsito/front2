/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Directive, ElementRef, EventEmitter, HostListener, Input, NgModule, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { KEYS, MaskHelper } from './mask-helper';
var /** @type {?} */ noop = function () { };
var Éµ0 = noop;
var IgxMaskDirective = /** @class */ (function () {
    function IgxMaskDirective(elementRef) {
        this.elementRef = elementRef;
        /**
         * Emits an event each time the value changes.
         * Provides `rawValue: string` and `formattedValue: string` as event arguments.
         * ```html
         * <input (onValueChange) = "onValueChange(rawValue: string, formattedValue: string)">
         * ```
         */
        this.onValueChange = new EventEmitter();
        /**
         * @hidden
         */
        this._maskOptions = {
            format: '',
            promptChar: ''
        };
        /**
         * @hidden
         */
        this._onTouchedCallback = noop;
        /**
         * @hidden
         */
        this._onChangeCallback = noop;
        this.maskHelper = new MaskHelper();
    }
    Object.defineProperty(IgxMaskDirective.prototype, "value", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.nativeElement.value;
        },
        set: /**
         * @hidden
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.nativeElement.value = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMaskDirective.prototype, "nativeElement", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMaskDirective.prototype, "selectionStart", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.nativeElement.selectionStart;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMaskDirective.prototype, "selectionEnd", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.nativeElement.selectionEnd;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @return {?}
     */
    IgxMaskDirective.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.promptChar && this.promptChar.length > 1) {
            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);
        }
        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';
        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';
        this.nativeElement.setAttribute('placeholder', this.mask);
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMaskDirective.prototype.onKeydown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ key = event.keyCode || event.charCode;
        if (key === KEYS.Ctrl) {
            this._ctrlDown = true;
        }
        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {
            event.preventDefault();
        }
        this._key = key;
        this._selection = Math.abs(this.selectionEnd - this.selectionStart);
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMaskDirective.prototype.onKeyup = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ key = event.keyCode || event.charCode;
        if (key === KEYS.Ctrl) {
            this._ctrlDown = false;
        }
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMaskDirective.prototype.onPaste = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._paste = true;
        this._valOnPaste = this.value;
        this._cursorOnPaste = this.getCursorPosition();
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMaskDirective.prototype.onInputChanged = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this._paste) {
            this._paste = false;
            var /** @type {?} */ clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());
            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);
            this.setCursorPosition(this.maskHelper.cursor);
        }
        else {
            var /** @type {?} */ currentCursorPos = this.getCursorPosition();
            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);
            this.value = this._selection && this._selection !== 0 ?
                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :
                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);
            this.setCursorPosition(this.maskHelper.cursor);
        }
        var /** @type {?} */ rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);
        this.dataValue = this.includeLiterals ? this.value : rawVal;
        this._onChangeCallback(this.dataValue);
        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMaskDirective.prototype.onFocus = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxMaskDirective.prototype.getCursorPosition = /**
     * @hidden
     * @return {?}
     */
    function () {
        return this.nativeElement.selectionStart;
    };
    /**
     * @hidden
     * @param {?} start
     * @param {?=} end
     * @return {?}
     */
    IgxMaskDirective.prototype.setCursorPosition = /**
     * @hidden
     * @param {?} start
     * @param {?=} end
     * @return {?}
     */
    function (start, end) {
        if (end === void 0) { end = start; }
        this.nativeElement.setSelectionRange(start, end);
    };
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxMaskDirective.prototype.writeValue = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.promptChar && this.promptChar.length > 1) {
            this._maskOptions.promptChar = this.promptChar.substring(0, 1);
        }
        this.value = this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions);
        this.dataValue = this.includeLiterals ? this.value : value;
        this._onChangeCallback(this.dataValue);
        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });
    };
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxMaskDirective.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._onChangeCallback = fn; };
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxMaskDirective.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._onTouchedCallback = fn; };
    IgxMaskDirective.decorators = [
        { type: Directive, args: [{
                    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],
                    selector: '[igxMask]'
                },] },
    ];
    /** @nocollapse */
    IgxMaskDirective.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    IgxMaskDirective.propDecorators = {
        "mask": [{ type: Input, args: ['igxMask',] },],
        "promptChar": [{ type: Input },],
        "includeLiterals": [{ type: Input },],
        "dataValue": [{ type: Input },],
        "onValueChange": [{ type: Output },],
        "onKeydown": [{ type: HostListener, args: ['keydown', ['$event'],] },],
        "onKeyup": [{ type: HostListener, args: ['keyup', ['$event'],] },],
        "onPaste": [{ type: HostListener, args: ['paste', ['$event'],] },],
        "onInputChanged": [{ type: HostListener, args: ['input', ['$event'],] },],
        "onFocus": [{ type: HostListener, args: ['focus', ['$event'],] },],
    };
    return IgxMaskDirective;
}());
export { IgxMaskDirective };
function IgxMaskDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxMaskDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxMaskDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxMaskDirective.propDecorators;
    /**
     * Sets the input mask.
     * ```html
     * <input [igxMask] = "'00/00/0000'">
     * ```
     * \@memberof IgxMaskDirective
     * @type {?}
     */
    IgxMaskDirective.prototype.mask;
    /**
     * Sets the character representing a fillable spot in the input mask.
     * Default value is "'_'".
     * ```html
     * <input [promptChar] = "'/'">
     * ```
     * \@memberof IgxMaskDirective
     * @type {?}
     */
    IgxMaskDirective.prototype.promptChar;
    /**
     * Specifies if the bound value includes the formatting symbols.
     * ```html
     * <input [includeLiterals] = "true">
     * ```
     * \@memberof IgxMaskDirective
     * @type {?}
     */
    IgxMaskDirective.prototype.includeLiterals;
    /**
     * @hidden
     * @type {?}
     */
    IgxMaskDirective.prototype.dataValue;
    /**
     * Emits an event each time the value changes.
     * Provides `rawValue: string` and `formattedValue: string` as event arguments.
     * ```html
     * <input (onValueChange) = "onValueChange(rawValue: string, formattedValue: string)">
     * ```
     * @type {?}
     */
    IgxMaskDirective.prototype.onValueChange;
    /**
     * @hidden
     * @type {?}
     */
    IgxMaskDirective.prototype._ctrlDown;
    /**
     * @hidden
     * @type {?}
     */
    IgxMaskDirective.prototype._cachedVal;
    /**
     * @hidden
     * @type {?}
     */
    IgxMaskDirective.prototype._paste;
    /**
     * @hidden
     * @type {?}
     */
    IgxMaskDirective.prototype._selection;
    /**
     * @hidden
     * @type {?}
     */
    IgxMaskDirective.prototype._maskOptions;
    /**
     * @hidden
     * @type {?}
     */
    IgxMaskDirective.prototype._key;
    /**
     * @hidden
     * @type {?}
     */
    IgxMaskDirective.prototype._cursorOnPaste;
    /**
     * @hidden
     * @type {?}
     */
    IgxMaskDirective.prototype._valOnPaste;
    /**
     * @hidden
     * @type {?}
     */
    IgxMaskDirective.prototype.maskHelper;
    /**
     * @hidden
     * @type {?}
     */
    IgxMaskDirective.prototype._onTouchedCallback;
    /**
     * @hidden
     * @type {?}
     */
    IgxMaskDirective.prototype._onChangeCallback;
    /** @type {?} */
    IgxMaskDirective.prototype.elementRef;
}
/**
 * The IgxMaskModule provides the {\@link IgxMaskDirective} inside your application.
 * @record
 */
export function IMaskEventArgs() { }
function IMaskEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IMaskEventArgs.prototype.rawValue;
    /** @type {?} */
    IMaskEventArgs.prototype.formattedValue;
}
var IgxMaskModule = /** @class */ (function () {
    function IgxMaskModule() {
    }
    IgxMaskModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxMaskDirective],
                    exports: [IgxMaskDirective],
                    imports: [CommonModule]
                },] },
    ];
    return IgxMaskModule;
}());
export { IgxMaskModule };
function IgxMaskModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxMaskModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxMaskModule.ctorParameters;
}
export { Éµ0 };

//# sourceMappingURL=data:application/json;base64,