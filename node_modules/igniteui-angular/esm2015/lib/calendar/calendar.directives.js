/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Host, HostBinding, HostListener, Input, Output, TemplateRef } from '@angular/core';
import { IgxCalendarComponent } from './calendar.component';
/**
 * @hidden
 */
export class IgxCalendarYearDirective {
    /**
     * @param {?} calendar
     */
    constructor(calendar) {
        this.calendar = calendar;
        this.onYearSelection = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get defaultCSS() {
        return !this.isCurrentYear;
    }
    /**
     * @return {?}
     */
    get currentCSS() {
        return this.isCurrentYear;
    }
    /**
     * @return {?}
     */
    get isCurrentYear() {
        return this.calendar.isCurrentYear(this.value);
    }
    /**
     * @return {?}
     */
    onClick() {
        this.onYearSelection.emit(this.value);
    }
}
IgxCalendarYearDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxCalendarYear]'
            },] },
];
/** @nocollapse */
IgxCalendarYearDirective.ctorParameters = () => [
    { type: IgxCalendarComponent, decorators: [{ type: Host },] },
];
IgxCalendarYearDirective.propDecorators = {
    "value": [{ type: Input, args: ['igxCalendarYear',] },],
    "onYearSelection": [{ type: Output },],
    "defaultCSS": [{ type: HostBinding, args: ['class.igx-calendar__year',] },],
    "currentCSS": [{ type: HostBinding, args: ['class.igx-calendar__year--current',] },],
    "onClick": [{ type: HostListener, args: ['click',] },],
};
function IgxCalendarYearDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCalendarYearDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCalendarYearDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxCalendarYearDirective.propDecorators;
    /** @type {?} */
    IgxCalendarYearDirective.prototype.value;
    /** @type {?} */
    IgxCalendarYearDirective.prototype.onYearSelection;
    /** @type {?} */
    IgxCalendarYearDirective.prototype.calendar;
}
export class IgxCalendarMonthDirective {
    /**
     * @param {?} calendar
     */
    constructor(calendar) {
        this.calendar = calendar;
        this.onMonthSelection = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get defaultCSS() {
        return !this.isCurrentMonth;
    }
    /**
     * @return {?}
     */
    get currentCSS() {
        return this.isCurrentMonth;
    }
    /**
     * @return {?}
     */
    get isCurrentMonth() {
        return this.calendar.isCurrentMonth(this.value);
    }
    /**
     * @return {?}
     */
    onClick() {
        this.onMonthSelection.emit(this.value);
    }
}
IgxCalendarMonthDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxCalendarMonth]'
            },] },
];
/** @nocollapse */
IgxCalendarMonthDirective.ctorParameters = () => [
    { type: IgxCalendarComponent, decorators: [{ type: Host },] },
];
IgxCalendarMonthDirective.propDecorators = {
    "value": [{ type: Input, args: ['igxCalendarMonth',] },],
    "index": [{ type: Input },],
    "onMonthSelection": [{ type: Output },],
    "defaultCSS": [{ type: HostBinding, args: ['class.igx-calendar__month',] },],
    "currentCSS": [{ type: HostBinding, args: ['class.igx-calendar__month--current',] },],
    "onClick": [{ type: HostListener, args: ['click',] },],
};
function IgxCalendarMonthDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCalendarMonthDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCalendarMonthDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxCalendarMonthDirective.propDecorators;
    /** @type {?} */
    IgxCalendarMonthDirective.prototype.value;
    /** @type {?} */
    IgxCalendarMonthDirective.prototype.index;
    /** @type {?} */
    IgxCalendarMonthDirective.prototype.onMonthSelection;
    /** @type {?} */
    IgxCalendarMonthDirective.prototype.calendar;
}
export class IgxCalendarDateDirective {
    /**
     * @param {?} calendar
     * @param {?} elementRef
     */
    constructor(calendar, elementRef) {
        this.calendar = calendar;
        this.elementRef = elementRef;
        this.onDateSelection = new EventEmitter();
        this.tabindex = 0;
        this._selected = false;
    }
    /**
     * @return {?}
     */
    get selected() {
        const /** @type {?} */ date = this.date.date;
        if (!this.calendar.value) {
            return;
        }
        if (this.calendar.selection === 'single') {
            this._selected = (/** @type {?} */ (this.calendar.value)).getTime() === date.getTime();
        }
        else {
            this._selected = (/** @type {?} */ (this.calendar.value))
                .some((each) => each.getTime() === date.getTime());
        }
        return this._selected;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = value;
    }
    /**
     * @return {?}
     */
    get isCurrentMonth() {
        return this.date.isCurrentMonth;
    }
    /**
     * @return {?}
     */
    get isPreviousMonth() {
        return this.date.isPrevMonth;
    }
    /**
     * @return {?}
     */
    get isNextMonth() {
        return this.date.isNextMonth;
    }
    /**
     * @return {?}
     */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get isInactive() {
        return this.date.isNextMonth || this.date.isPrevMonth;
    }
    /**
     * @return {?}
     */
    get isToday() {
        const /** @type {?} */ today = new Date(Date.now());
        const /** @type {?} */ date = this.date.date;
        return (date.getFullYear() === today.getFullYear() &&
            date.getMonth() === today.getMonth() &&
            date.getDate() === today.getDate());
    }
    /**
     * @return {?}
     */
    get isWeekend() {
        const /** @type {?} */ day = this.date.date.getDay();
        return day === 0 || day === 6;
    }
    /**
     * @return {?}
     */
    get isDisabled() {
        return this.calendar.isDateDisabled(this.date.date);
    }
    /**
     * @return {?}
     */
    get isSpecial() {
        return this.calendar.isDateSpecial(this.date.date);
    }
    /**
     * @return {?}
     */
    get defaultCSS() {
        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);
    }
    /**
     * @return {?}
     */
    get isInactiveCSS() {
        return this.isInactive;
    }
    /**
     * @return {?}
     */
    get isTodayCSS() {
        return this.isToday && !this.selected;
    }
    /**
     * @return {?}
     */
    get isSelectedCSS() {
        return this.selected;
    }
    /**
     * @return {?}
     */
    get isWeekendCSS() {
        return this.isWeekend;
    }
    /**
     * @return {?}
     */
    get isDisabledCSS() {
        return this.isDisabled;
    }
    /**
     * @return {?}
     */
    get isSpecialCSS() {
        return this.isSpecial;
    }
    /**
     * @return {?}
     */
    onSelect() {
        this.onDateSelection.emit(this.date);
    }
}
IgxCalendarDateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxCalendarDate]'
            },] },
];
/** @nocollapse */
IgxCalendarDateDirective.ctorParameters = () => [
    { type: IgxCalendarComponent, decorators: [{ type: Host },] },
    { type: ElementRef, },
];
IgxCalendarDateDirective.propDecorators = {
    "date": [{ type: Input, args: ['igxCalendarDate',] },],
    "onDateSelection": [{ type: Output },],
    "tabindex": [{ type: HostBinding, args: ['attr.tabindex',] },],
    "defaultCSS": [{ type: HostBinding, args: ['class.igx-calendar__date',] },],
    "isInactiveCSS": [{ type: HostBinding, args: ['class.igx-calendar__date--inactive',] },],
    "isTodayCSS": [{ type: HostBinding, args: ['class.igx-calendar__date--current',] },],
    "isSelectedCSS": [{ type: HostBinding, args: ['class.igx-calendar__date--selected',] },],
    "isWeekendCSS": [{ type: HostBinding, args: ['class.igx-calendar__date--weekend',] },],
    "isDisabledCSS": [{ type: HostBinding, args: ['class.igx-calendar__date--disabled',] },],
    "isSpecialCSS": [{ type: HostBinding, args: ['class.igx-calendar__date--special',] },],
    "onSelect": [{ type: HostListener, args: ['click',] }, { type: HostListener, args: ['keydown.enter',] },],
};
function IgxCalendarDateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCalendarDateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCalendarDateDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxCalendarDateDirective.propDecorators;
    /** @type {?} */
    IgxCalendarDateDirective.prototype.date;
    /** @type {?} */
    IgxCalendarDateDirective.prototype.onDateSelection;
    /** @type {?} */
    IgxCalendarDateDirective.prototype.tabindex;
    /** @type {?} */
    IgxCalendarDateDirective.prototype._selected;
    /** @type {?} */
    IgxCalendarDateDirective.prototype.calendar;
    /** @type {?} */
    IgxCalendarDateDirective.prototype.elementRef;
}
/**
 * @hidden
 */
export class IgxCalendarHeaderTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxCalendarHeaderTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxCalendarHeader]'
            },] },
];
/** @nocollapse */
IgxCalendarHeaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef, },
];
function IgxCalendarHeaderTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCalendarHeaderTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCalendarHeaderTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxCalendarHeaderTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
export class IgxCalendarSubheaderTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxCalendarSubheaderTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxCalendarSubheader]'
            },] },
];
/** @nocollapse */
IgxCalendarSubheaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef, },
];
function IgxCalendarSubheaderTemplateDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCalendarSubheaderTemplateDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCalendarSubheaderTemplateDirective.ctorParameters;
    /** @type {?} */
    IgxCalendarSubheaderTemplateDirective.prototype.template;
}

//# sourceMappingURL=data:application/json;base64,