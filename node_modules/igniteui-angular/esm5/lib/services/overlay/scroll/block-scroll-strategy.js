/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var BlockScrollStrategy = /** @class */ (function () {
    function BlockScrollStrategy(scrollContainer) {
        var _this = this;
        this._initialized = false;
        this.onScroll = function (ev) {
            ev.preventDefault();
            if (!_this._sourceElement || _this._sourceElement !== ev.srcElement) {
                _this._sourceElement = ev.srcElement;
                _this._initialScrollTop = _this._sourceElement.scrollTop;
                _this._initialScrollLeft = _this._sourceElement.scrollLeft;
            }
            _this._sourceElement.scrollTop = _this._initialScrollTop;
            _this._sourceElement.scrollLeft = _this._initialScrollLeft;
        };
    }
    /**
     * @param {?} document
     * @param {?} overlayService
     * @param {?} id
     * @return {?}
     */
    BlockScrollStrategy.prototype.initialize = /**
     * @param {?} document
     * @param {?} overlayService
     * @param {?} id
     * @return {?}
     */
    function (document, overlayService, id) {
        if (this._initialized) {
            return;
        }
        this._document = document;
        this._initialized = true;
    };
    /**
     * @return {?}
     */
    BlockScrollStrategy.prototype.attach = /**
     * @return {?}
     */
    function () {
        this._document.addEventListener('scroll', this.onScroll, true);
        this._document.addEventListener('wheel', this.onWheel, true);
    };
    /**
     * @return {?}
     */
    BlockScrollStrategy.prototype.detach = /**
     * @return {?}
     */
    function () {
        this._document.removeEventListener('scroll', this.onScroll, true);
        this._document.removeEventListener('wheel', this.onWheel, true);
        this._sourceElement = null;
        this._initialScrollTop = 0;
        this._initialScrollLeft = 0;
        this._initialized = false;
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    BlockScrollStrategy.prototype.onWheel = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        ev.stopImmediatePropagation();
        ev.preventDefault();
    };
    return BlockScrollStrategy;
}());
export { BlockScrollStrategy };
function BlockScrollStrategy_tsickle_Closure_declarations() {
    /** @type {?} */
    BlockScrollStrategy.prototype._initialized;
    /** @type {?} */
    BlockScrollStrategy.prototype._document;
    /** @type {?} */
    BlockScrollStrategy.prototype._initialScrollTop;
    /** @type {?} */
    BlockScrollStrategy.prototype._initialScrollLeft;
    /** @type {?} */
    BlockScrollStrategy.prototype._sourceElement;
    /** @type {?} */
    BlockScrollStrategy.prototype.onScroll;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stc2Nyb2xsLXN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9vdmVybGF5L3Njcm9sbC9ibG9jay1zY3JvbGwtc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUdBLElBQUE7SUFPSSw2QkFBWSxlQUE2QjtRQUF6QyxpQkFBOEM7NEJBTnZCLEtBQUs7d0JBK0JULFVBQUMsRUFBUztZQUN6QixFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDcEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsY0FBYyxJQUFJLEtBQUksQ0FBQyxjQUFjLEtBQUssRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hFLEtBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQztnQkFDcEMsS0FBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDO2dCQUN2RCxLQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUM7YUFDNUQ7WUFFRCxLQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsR0FBRyxLQUFJLENBQUMsaUJBQWlCLENBQUM7WUFDdkQsS0FBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsS0FBSSxDQUFDLGtCQUFrQixDQUFDO1NBQzVEO0tBbkM2Qzs7Ozs7OztJQUU5Qyx3Q0FBVTs7Ozs7O0lBQVYsVUFBVyxRQUFrQixFQUFFLGNBQWlDLEVBQUUsRUFBVTtRQUN4RSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNwQixNQUFNLENBQUM7U0FDVjtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0tBQzVCOzs7O0lBRU0sb0NBQU07Ozs7UUFDVCxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7Ozs7O0lBRzFELG9DQUFNOzs7O1FBQ1QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQzs7Ozs7O0lBZXRCLHFDQUFPOzs7O2NBQUMsRUFBYztRQUMxQixFQUFFLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUM5QixFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7OzhCQWpENUI7SUFtREMsQ0FBQTtBQWhERCwrQkFnREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJU2Nyb2xsU3RyYXRlZ3kgfSBmcm9tICcuL0lTY3JvbGxTdHJhdGVneSc7XG5pbXBvcnQgeyBJZ3hPdmVybGF5U2VydmljZSB9IGZyb20gJy4uL292ZXJsYXknO1xuXG5leHBvcnQgY2xhc3MgQmxvY2tTY3JvbGxTdHJhdGVneSBpbXBsZW1lbnRzIElTY3JvbGxTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBfaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIF9kb2N1bWVudDogRG9jdW1lbnQ7XG4gICAgcHJpdmF0ZSBfaW5pdGlhbFNjcm9sbFRvcDogbnVtYmVyO1xuICAgIHByaXZhdGUgX2luaXRpYWxTY3JvbGxMZWZ0OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfc291cmNlRWxlbWVudDogRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKHNjcm9sbENvbnRhaW5lcj86IEhUTUxFbGVtZW50KSB7IH1cblxuICAgIGluaXRpYWxpemUoZG9jdW1lbnQ6IERvY3VtZW50LCBvdmVybGF5U2VydmljZTogSWd4T3ZlcmxheVNlcnZpY2UsIGlkOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kb2N1bWVudCA9IGRvY3VtZW50O1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcHVibGljIGF0dGFjaCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblNjcm9sbCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuX2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy5vbldoZWVsLCB0cnVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGV0YWNoKCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsLCB0cnVlKTtcbiAgICAgICAgdGhpcy5fZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLm9uV2hlZWwsIHRydWUpO1xuICAgICAgICB0aGlzLl9zb3VyY2VFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5faW5pdGlhbFNjcm9sbFRvcCA9IDA7XG4gICAgICAgIHRoaXMuX2luaXRpYWxTY3JvbGxMZWZ0ID0gMDtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uU2Nyb2xsID0gKGV2OiBFdmVudCkgPT4ge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoIXRoaXMuX3NvdXJjZUVsZW1lbnQgfHwgdGhpcy5fc291cmNlRWxlbWVudCAhPT0gZXYuc3JjRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fc291cmNlRWxlbWVudCA9IGV2LnNyY0VsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsU2Nyb2xsVG9wID0gdGhpcy5fc291cmNlRWxlbWVudC5zY3JvbGxUb3A7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsU2Nyb2xsTGVmdCA9IHRoaXMuX3NvdXJjZUVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NvdXJjZUVsZW1lbnQuc2Nyb2xsVG9wID0gdGhpcy5faW5pdGlhbFNjcm9sbFRvcDtcbiAgICAgICAgdGhpcy5fc291cmNlRWxlbWVudC5zY3JvbGxMZWZ0ID0gdGhpcy5faW5pdGlhbFNjcm9sbExlZnQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbldoZWVsKGV2OiBXaGVlbEV2ZW50KSB7XG4gICAgICAgIGV2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbn1cbiJdfQ==