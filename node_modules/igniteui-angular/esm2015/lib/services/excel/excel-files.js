/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ExcelStrings } from './excel-strings';
/**
 * @hidden
 */
export class RootRelsFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('.rels', ExcelStrings.getRels());
    }
}
/**
 * @hidden
 */
export class AppFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('app.xml', ExcelStrings.getApp());
    }
}
/**
 * @hidden
 */
export class CoreFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('core.xml', ExcelStrings.getCore());
    }
}
/**
 * @hidden
 */
export class WorkbookRelsFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        const /** @type {?} */ hasSharedStrings = worksheetData.isEmpty === false;
        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));
    }
}
/**
 * @hidden
 */
export class ThemeFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('theme1.xml', ExcelStrings.getTheme());
    }
}
/**
 * @hidden
 */
export class WorksheetFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        const /** @type {?} */ sheetData = [];
        const /** @type {?} */ cols = [];
        let /** @type {?} */ dimension;
        const /** @type {?} */ dictionary = worksheetData.dataDictionary;
        let /** @type {?} */ freezePane = '';
        if (worksheetData.isEmpty) {
            sheetData.push('<sheetData/>');
            dimension = 'A1';
        }
        else {
            sheetData.push('<sheetData>');
            const /** @type {?} */ height = worksheetData.options.rowHeight;
            const /** @type {?} */ rowHeight = height ? ' ht="' + height + '" customHeight="1"' : '';
            sheetData.push(`<row r="1"${rowHeight}>`);
            for (let /** @type {?} */ i = 0; i < worksheetData.columnCount; i++) {
                const /** @type {?} */ column = ExcelStrings.getExcelColumn(i) + 1;
                const /** @type {?} */ value = dictionary.saveValue(worksheetData.keys[i], i, true);
                sheetData.push(`<c r="${column}" t="s"><v>${value}</v></c>`);
            }
            sheetData.push('</row>');
            for (let /** @type {?} */ i = 1; i < worksheetData.rowCount; i++) {
                sheetData.push(`<row r="${(i + 1)}"${rowHeight}>`);
                for (let /** @type {?} */ j = 0; j < worksheetData.columnCount; j++) {
                    const /** @type {?} */ cellData = WorksheetFile.getCellData(worksheetData, i, j);
                    sheetData.push(cellData);
                }
                sheetData.push('</row>');
            }
            sheetData.push('</sheetData>');
            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;
            cols.push('<cols>');
            for (let /** @type {?} */ i = 0; i < worksheetData.columnCount; i++) {
                const /** @type {?} */ width = dictionary.columnWidths[i];
                // Use the width provided in the options if it exists
                const /** @type {?} */ widthInTwips = worksheetData.options.columnWidth ?
                    worksheetData.options.columnWidth :
                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);
                cols.push(`<col min="${(i + 1)}" max="${(i + 1)}" width="${widthInTwips}" customWidth="1"/>`);
            }
            cols.push('</cols>');
            if (worksheetData.indexOfLastPinnedColumn !== -1 &&
                !worksheetData.options.ignorePinning &&
                !worksheetData.options.ignoreColumnsOrder) {
                const /** @type {?} */ frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;
                const /** @type {?} */ firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';
                freezePane = `<pane xSplit="${frozenColumnCount}" topLeftCell="${firstCell}" activePane="topRight" state="frozen"/>`;
            }
        }
        const /** @type {?} */ hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;
        folder.file('sheet1.xml', ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable));
    }
    /**
     * @param {?} worksheetData
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    static getCellData(worksheetData, row, column) {
        const /** @type {?} */ dictionary = worksheetData.dataDictionary;
        const /** @type {?} */ columnName = ExcelStrings.getExcelColumn(column) + (row + 1);
        const /** @type {?} */ columnHeader = worksheetData.keys[column];
        const /** @type {?} */ cellValue = worksheetData.isSpecialData ?
            worksheetData.data[row - 1] :
            worksheetData.data[row - 1][columnHeader];
        if (cellValue === undefined || cellValue === null) {
            return `<c r="${columnName}" s="1"/>`;
        }
        else {
            const /** @type {?} */ savedValue = dictionary.saveValue(cellValue, column, false);
            const /** @type {?} */ isSavedAsString = savedValue !== -1;
            const /** @type {?} */ value = isSavedAsString ? savedValue : cellValue;
            const /** @type {?} */ type = isSavedAsString ? ` t="s"` : '';
            const /** @type {?} */ format = isSavedAsString ? '' : ` s="1"`;
            return `<c r="${columnName}"${type}${format}><v>${value}</v></c>`;
        }
    }
}
WorksheetFile.MIN_WIDTH = 8.34;
function WorksheetFile_tsickle_Closure_declarations() {
    /** @type {?} */
    WorksheetFile.MIN_WIDTH;
}
/**
 * @hidden
 */
export class StyleFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));
    }
}
/**
 * @hidden
 */
export class WorkbookFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('workbook.xml', ExcelStrings.getWorkbook());
    }
}
/**
 * @hidden
 */
export class ContentTypesFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));
    }
}
/**
 * @hidden
 */
export class SharedStringsFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        const /** @type {?} */ dict = worksheetData.dataDictionary;
        const /** @type {?} */ sortedValues = dict.getKeys();
        const /** @type {?} */ sharedStrings = new Array(sortedValues.length);
        for (const /** @type {?} */ value of sortedValues) {
            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';
        }
        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(dict.stringsCount, sortedValues.length, sharedStrings.join('')));
    }
}
/**
 * @hidden
 */
export class TablesFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        const /** @type {?} */ columnCount = worksheetData.columnCount;
        const /** @type {?} */ lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;
        const /** @type {?} */ dimension = 'A1:' + lastColumn;
        const /** @type {?} */ values = worksheetData.keys;
        let /** @type {?} */ sortString = '';
        let /** @type {?} */ tableColumns = '<tableColumns count="' + columnCount + '">';
        for (let /** @type {?} */ i = 0; i < columnCount; i++) {
            const /** @type {?} */ value = values[i];
            tableColumns += '<tableColumn id="' + (i + 1) + '" name="' + value + '"/>';
        }
        tableColumns += '</tableColumns>';
        if (worksheetData.sort) {
            const /** @type {?} */ sortingExpression = worksheetData.sort;
            const /** @type {?} */ sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));
            const /** @type {?} */ dir = sortingExpression.dir - 1;
            sortString = `<sortState ref="A2:${lastColumn}"><sortCondition descending="${dir}" ref="${sc}1:${sc}15"/></sortState>`;
        }
        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));
    }
}
/**
 * @hidden
 */
export class WorksheetRelsFile {
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    writeElement(folder, worksheetData) {
        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtZmlsZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2V4Y2VsL2V4Y2VsLWZpbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7QUFTL0MsTUFBTTs7Ozs7O0lBQ0ssWUFBWSxDQUFDLE1BQWEsRUFBRSxhQUE0QjtRQUMzRCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQzs7Q0FFcEQ7Ozs7QUFLRCxNQUFNOzs7Ozs7SUFDSyxZQUFZLENBQUMsTUFBYSxFQUFFLGFBQTRCO1FBQzNELE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDOztDQUVyRDs7OztBQUtELE1BQU07Ozs7OztJQUNLLFlBQVksQ0FBQyxNQUFhLEVBQUUsYUFBNEI7UUFDM0QsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7O0NBRXZEOzs7O0FBS0QsTUFBTTs7Ozs7O0lBQ0ssWUFBWSxDQUFDLE1BQWEsRUFBRSxhQUE0QjtRQUMzRCx1QkFBTSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQztRQUN6RCxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLFlBQVksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDOztDQUV4Rjs7OztBQUtELE1BQU07Ozs7OztJQUNLLFlBQVksQ0FBQyxNQUFhLEVBQUUsYUFBNEI7UUFDM0QsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7O0NBRTFEOzs7O0FBS0QsTUFBTTs7Ozs7O0lBR0ssWUFBWSxD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QyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3BGLHVCQUFNLEdBQUcsR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ3RDLFVBQVUsR0FBRyxzQkFBc0IsVUFBVSxnQ0FBZ0MsR0FBRyxVQUFVLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixDQUFDO1NBQzFIO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7O0NBRWpHOzs7O0FBS0QsTUFBTTs7Ozs7O0lBQ0ssWUFBWSxDQUFDLE1BQWEsRUFBRSxhQUE0QjtRQUMzRCxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7O0NBRXZFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUV4Y2VsRmlsZSB9IGZyb20gJy4vZXhjZWwtaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBFeGNlbFN0cmluZ3MgfSBmcm9tICcuL2V4Y2VsLXN0cmluZ3MnO1xuaW1wb3J0IHsgV29ya3NoZWV0RGF0YSB9IGZyb20gJy4vd29ya3NoZWV0LWRhdGEnO1xuXG5pbXBvcnQgKiBhcyBKU1ppcCBmcm9tICdqc3ppcC9kaXN0L2pzemlwJztcbmltcG9ydCB7IEV4cG9ydFV0aWxpdGllcyB9IGZyb20gJy4uL2V4cG9ydGVyLWNvbW1vbi9leHBvcnQtdXRpbGl0aWVzJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBSb290UmVsc0ZpbGUgaW1wbGVtZW50cyBJRXhjZWxGaWxlIHtcbiAgICBwdWJsaWMgd3JpdGVFbGVtZW50KGZvbGRlcjogSlNaaXAsIHdvcmtzaGVldERhdGE6IFdvcmtzaGVldERhdGEpIHtcbiAgICAgICAgZm9sZGVyLmZpbGUoJy5yZWxzJywgRXhjZWxTdHJpbmdzLmdldFJlbHMoKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIEFwcEZpbGUgaW1wbGVtZW50cyBJRXhjZWxGaWxlIHtcbiAgICBwdWJsaWMgd3JpdGVFbGVtZW50KGZvbGRlcjogSlNaaXAsIHdvcmtzaGVldERhdGE6IFdvcmtzaGVldERhdGEpIHtcbiAgICAgICAgZm9sZGVyLmZpbGUoJ2FwcC54bWwnLCBFeGNlbFN0cmluZ3MuZ2V0QXBwKCkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb3JlRmlsZSBpbXBsZW1lbnRzIElFeGNlbEZpbGUge1xuICAgIHB1YmxpYyB3cml0ZUVsZW1lbnQoZm9sZGVyOiBKU1ppcCwgd29ya3NoZWV0RGF0YTogV29ya3NoZWV0RGF0YSkge1xuICAgICAgICBmb2xkZXIuZmlsZSgnY29yZS54bWwnLCBFeGNlbFN0cmluZ3MuZ2V0Q29yZSgpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgV29ya2Jvb2tSZWxzRmlsZSBpbXBsZW1lbnRzIElFeGNlbEZpbGUge1xuICAgIHB1YmxpYyB3cml0ZUVsZW1lbnQoZm9sZGVyOiBKU1ppcCwgd29ya3NoZWV0RGF0YTogV29ya3NoZWV0RGF0YSkge1xuICAgICAgICBjb25zdCBoYXNTaGFyZWRTdHJpbmdzID0gd29ya3NoZWV0RGF0YS5pc0VtcHR5ID09PSBmYWxzZTtcbiAgICAgICAgZm9sZGVyLmZpbGUoJ3dvcmtib29rLnhtbC5yZWxzJywgRXhjZWxTdHJpbmdzLmdldFdvcmtib29rUmVscyhoYXNTaGFyZWRTdHJpbmdzKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFRoZW1lRmlsZSBpbXBsZW1lbnRzIElFeGNlbEZpbGUge1xuICAgIHB1YmxpYyB3cml0ZUVsZW1lbnQoZm9sZGVyOiBKU1ppcCwgd29ya3NoZWV0RGF0YTogV29ya3NoZWV0RGF0YSkge1xuICAgICAgICBmb2xkZXIuZmlsZSgndGhlbWUxLnhtbCcsIEV4Y2VsU3RyaW5ncy5nZXRUaGVtZSgpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgV29ya3NoZWV0RmlsZSBpbXBsZW1lbnRzIElFeGNlbEZpbGUge1xuICAgIHByaXZhdGUgc3RhdGljIE1JTl9XSURUSCA9IDguMzQ7XG5cbiAgICBwdWJsaWMgd3JpdGVFbGVtZW50KGZvbGRlcjogSlNaaXAsIHdvcmtzaGVldERhdGE6IFdvcmtzaGVldERhdGEpIHtcbiAgICAgICAgY29uc3Qgc2hlZXREYXRhID0gW107XG4gICAgICAgIGNvbnN0IGNvbHMgPSBbXTtcbiAgICAgICAgbGV0IGRpbWVuc2lvbjogc3RyaW5nO1xuICAgICAgICBjb25zdCBkaWN0aW9uYXJ5ID0gd29ya3NoZWV0RGF0YS5kYXRhRGljdGlvbmFyeTtcbiAgICAgICAgbGV0IGZyZWV6ZVBhbmUgPSAnJztcblxuICAgICAgICBpZiAod29ya3NoZWV0RGF0YS5pc0VtcHR5KSB7XG4gICAgICAgICAgICBzaGVldERhdGEucHVzaCgnPHNoZWV0RGF0YS8+Jyk7XG4gICAgICAgICAgICBkaW1lbnNpb24gPSAnQTEnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hlZXREYXRhLnB1c2goJzxzaGVldERhdGE+Jyk7XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSAgd29ya3NoZWV0RGF0YS5vcHRpb25zLnJvd0hlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IHJvd0hlaWdodCA9IGhlaWdodCA/ICcgaHQ9XCInICsgaGVpZ2h0ICsgJ1wiIGN1c3RvbUhlaWdodD1cIjFcIicgOiAnJztcblxuICAgICAgICAgICAgc2hlZXREYXRhLnB1c2goYDxyb3cgcj1cIjFcIiR7cm93SGVpZ2h0fT5gKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd29ya3NoZWV0RGF0YS5jb2x1bW5Db3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sdW1uID0gRXhjZWxTdHJpbmdzLmdldEV4Y2VsQ29sdW1uKGkpICsgMTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGRpY3Rpb25hcnkuc2F2ZVZhbHVlKHdvcmtzaGVldERhdGEua2V5c1tpXSwgaSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgc2hlZXREYXRhLnB1c2goYDxjIHI9XCIke2NvbHVtbn1cIiB0PVwic1wiPjx2PiR7dmFsdWV9PC92PjwvYz5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoZWV0RGF0YS5wdXNoKCc8L3Jvdz4nKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB3b3Jrc2hlZXREYXRhLnJvd0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBzaGVldERhdGEucHVzaChgPHJvdyByPVwiJHsoaSArIDEpfVwiJHtyb3dIZWlnaHR9PmApO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB3b3Jrc2hlZXREYXRhLmNvbHVtbkNvdW50OyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbERhdGEgPSBXb3Jrc2hlZXRGaWxlLmdldENlbGxEYXRhKHdvcmtzaGVldERhdGEsIGksIGopO1xuICAgICAgICAgICAgICAgICAgICBzaGVldERhdGEucHVzaChjZWxsRGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNoZWV0RGF0YS5wdXNoKCc8L3Jvdz4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoZWV0RGF0YS5wdXNoKCc8L3NoZWV0RGF0YT4nKTtcbiAgICAgICAgICAgIGRpbWVuc2lvbiA9ICdBMTonICsgRXhjZWxTdHJpbmdzLmdldEV4Y2VsQ29sdW1uKHdvcmtzaGVldERhdGEuY29sdW1uQ291bnQgLSAxKSArIHdvcmtzaGVldERhdGEucm93Q291bnQ7XG5cbiAgICAgICAgICAgIGNvbHMucHVzaCgnPGNvbHM+Jyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmtzaGVldERhdGEuY29sdW1uQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gZGljdGlvbmFyeS5jb2x1bW5XaWR0aHNbaV07XG4gICAgICAgICAgICAgICAgLy8gVXNlIHRoZSB3aWR0aCBwcm92aWRlZCBpbiB0aGUgb3B0aW9ucyBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgICAgICBjb25zdCB3aWR0aEluVHdpcHMgPSB3b3Jrc2hlZXREYXRhLm9wdGlvbnMuY29sdW1uV2lkdGggP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya3NoZWV0RGF0YS5vcHRpb25zLmNvbHVtbldpZHRoIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KCgod2lkdGggLyA5NikgKiAxNC40KSwgV29ya3NoZWV0RmlsZS5NSU5fV0lEVEgpO1xuXG4gICAgICAgICAgICAgICAgY29scy5wdXNoKGA8Y29sIG1pbj1cIiR7KGkgKyAxKX1cIiBtYXg9XCIkeyhpICsgMSl9XCIgd2lkdGg9XCIke3dpZHRoSW5Ud2lwc31cIiBjdXN0b21XaWR0aD1cIjFcIi8+YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb2xzLnB1c2goJzwvY29scz4nKTtcblxuICAgICAgICAgICAgaWYgKHdvcmtzaGVldERhdGEuaW5kZXhPZkxhc3RQaW5uZWRDb2x1bW4gIT09IC0xICYmXG4gICAgICAgICAgICAgICAgIXdvcmtzaGVldERhdGEub3B0aW9ucy5pZ25vcmVQaW5uaW5nICYmXG4gICAgICAgICAgICAgICAgIXdvcmtzaGVldERhdGEub3B0aW9ucy5pZ25vcmVDb2x1bW5zT3JkZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmcm96ZW5Db2x1bW5Db3VudCA9IHdvcmtzaGVldERhdGEuaW5kZXhPZkxhc3RQaW5uZWRDb2x1bW4gKyAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0Q2VsbCA9IEV4Y2VsU3RyaW5ncy5nZXRFeGNlbENvbHVtbihmcm96ZW5Db2x1bW5Db3VudCkgKyAnMSc7XG4gICAgICAgICAgICAgICAgZnJlZXplUGFuZSA9IGA8cGFuZSB4U3BsaXQ9XCIke2Zyb3plbkNvbHVtbkNvdW50fVwiIHRvcExlZnRDZWxsPVwiJHtmaXJzdENlbGx9XCIgYWN0aXZlUGFuZT1cInRvcFJpZ2h0XCIgc3RhdGU9XCJmcm96ZW5cIi8+YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYXNUYWJsZSA9ICF3b3Jrc2hlZXREYXRhLmlzRW1wdHkgJiYgd29ya3NoZWV0RGF0YS5vcHRpb25zLmV4cG9ydEFzVGFibGU7XG4gICAgICAgIGZvbGRlci5maWxlKCdzaGVldDEueG1sJywgRXhjZWxTdHJpbmdzLmdldFNoZWV0WE1MKGRpbWVuc2lvbiwgZnJlZXplUGFuZSwgY29scy5qb2luKCcnKSwgc2hlZXREYXRhLmpvaW4oJycpLCBoYXNUYWJsZSkpO1xuICAgIH1cblxuICAgIC8qIHRzbGludDpkaXNhYmxlIG1lbWJlci1vcmRlcmluZyAqL1xuICAgIHByaXZhdGUgc3RhdGljIGdldENlbGxEYXRhKHdvcmtzaGVldERhdGE6IFdvcmtzaGVldERhdGEsIHJvdzogbnVtYmVyLCBjb2x1bW46IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGRpY3Rpb25hcnkgPSB3b3Jrc2hlZXREYXRhLmRhdGFEaWN0aW9uYXJ5O1xuICAgICAgICBjb25zdCBjb2x1bW5OYW1lID0gRXhjZWxTdHJpbmdzLmdldEV4Y2VsQ29sdW1uKGNvbHVtbikgKyAocm93ICsgMSk7XG4gICAgICAgIGNvbnN0IGNvbHVtbkhlYWRlciA9IHdvcmtzaGVldERhdGEua2V5c1tjb2x1bW5dO1xuXG4gICAgICAgIGNvbnN0IGNlbGxWYWx1ZSA9IHdvcmtzaGVldERhdGEuaXNTcGVjaWFsRGF0YSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya3NoZWV0RGF0YS5kYXRhW3JvdyAtIDFdIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3Jrc2hlZXREYXRhLmRhdGFbcm93IC0gMV1bY29sdW1uSGVhZGVyXTtcblxuICAgICAgICBpZiAoY2VsbFZhbHVlID09PSB1bmRlZmluZWQgfHwgY2VsbFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYDxjIHI9XCIke2NvbHVtbk5hbWV9XCIgcz1cIjFcIi8+YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHNhdmVkVmFsdWUgPSBkaWN0aW9uYXJ5LnNhdmVWYWx1ZShjZWxsVmFsdWUsIGNvbHVtbiwgZmFsc2UpO1xuICAgICAgICAgICAgY29uc3QgaXNTYXZlZEFzU3RyaW5nID0gc2F2ZWRWYWx1ZSAhPT0gLTE7XG5cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gaXNTYXZlZEFzU3RyaW5nID8gc2F2ZWRWYWx1ZSA6IGNlbGxWYWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBpc1NhdmVkQXNTdHJpbmcgPyBgIHQ9XCJzXCJgIDogJyc7XG4gICAgICAgICAgICBjb25zdCBmb3JtYXQgPSBpc1NhdmVkQXNTdHJpbmcgPyAnJyA6IGAgcz1cIjFcImA7XG5cbiAgICAgICAgICAgIHJldHVybiBgPGMgcj1cIiR7Y29sdW1uTmFtZX1cIiR7dHlwZX0ke2Zvcm1hdH0+PHY+JHt2YWx1ZX08L3Y+PC9jPmA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyogdHNsaW50OmVuYWJsZSBtZW1iZXItb3JkZXJpbmcgKi9cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHlsZUZpbGUgaW1wbGVtZW50cyBJRXhjZWxGaWxlIHtcbiAgICBwdWJsaWMgd3JpdGVFbGVtZW50KGZvbGRlcjogSlNaaXAsIHdvcmtzaGVldERhdGE6IFdvcmtzaGVldERhdGEpIHtcbiAgICAgICAgZm9sZGVyLmZpbGUoJ3N0eWxlcy54bWwnLCBFeGNlbFN0cmluZ3MuZ2V0U3R5bGVzKHdvcmtzaGVldERhdGEuZGF0YURpY3Rpb25hcnkgJiYgd29ya3NoZWV0RGF0YS5kYXRhRGljdGlvbmFyeS5oYXNOb25TdHJpbmdWYWx1ZXMpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgV29ya2Jvb2tGaWxlIGltcGxlbWVudHMgSUV4Y2VsRmlsZSB7XG4gICAgcHVibGljIHdyaXRlRWxlbWVudChmb2xkZXI6IEpTWmlwLCB3b3Jrc2hlZXREYXRhOiBXb3Jrc2hlZXREYXRhKSB7XG4gICAgICAgIGZvbGRlci5maWxlKCd3b3JrYm9vay54bWwnLCBFeGNlbFN0cmluZ3MuZ2V0V29ya2Jvb2soKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRlbnRUeXBlc0ZpbGUgaW1wbGVtZW50cyBJRXhjZWxGaWxlIHtcbiAgICBwdWJsaWMgd3JpdGVFbGVtZW50KGZvbGRlcjogSlNaaXAsIHdvcmtzaGVldERhdGE6IFdvcmtzaGVldERhdGEpIHtcbiAgICAgICAgZm9sZGVyLmZpbGUoJ1tDb250ZW50X1R5cGVzXS54bWwnLCBFeGNlbFN0cmluZ3MuZ2V0Q29udGVudFR5cGVzWE1MKCF3b3Jrc2hlZXREYXRhLmlzRW1wdHksIHdvcmtzaGVldERhdGEub3B0aW9ucy5leHBvcnRBc1RhYmxlKSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFNoYXJlZFN0cmluZ3NGaWxlIGltcGxlbWVudHMgSUV4Y2VsRmlsZSB7XG4gICAgcHVibGljIHdyaXRlRWxlbWVudChmb2xkZXI6IEpTWmlwLCB3b3Jrc2hlZXREYXRhOiBXb3Jrc2hlZXREYXRhKSB7XG4gICAgICAgIGNvbnN0IGRpY3QgPSB3b3Jrc2hlZXREYXRhLmRhdGFEaWN0aW9uYXJ5O1xuICAgICAgICBjb25zdCBzb3J0ZWRWYWx1ZXMgPSBkaWN0LmdldEtleXMoKTtcbiAgICAgICAgY29uc3Qgc2hhcmVkU3RyaW5ncyA9IG5ldyBBcnJheTxzdHJpbmc+KHNvcnRlZFZhbHVlcy5sZW5ndGgpO1xuXG4gICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2Ygc29ydGVkVmFsdWVzKSB7XG4gICAgICAgICAgICBzaGFyZWRTdHJpbmdzW2RpY3QuZ2V0U2FuaXRpemVkVmFsdWUodmFsdWUpXSA9ICc8c2k+PHQ+JyArIHZhbHVlICsgJzwvdD48L3NpPic7XG4gICAgICAgIH1cblxuICAgICAgICBmb2xkZXIuZmlsZSgnc2hhcmVkU3RyaW5ncy54bWwnLCBFeGNlbFN0cmluZ3MuZ2V0U2hhcmVkU3RyaW5nWE1MKFxuICAgICAgICAgICAgICAgICAgICAgICAgZGljdC5zdHJpbmdzQ291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0ZWRWYWx1ZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVkU3RyaW5ncy5qb2luKCcnKSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgVGFibGVzRmlsZSBpbXBsZW1lbnRzIElFeGNlbEZpbGUge1xuICAgIHB1YmxpYyB3cml0ZUVsZW1lbnQoZm9sZGVyOiBKU1ppcCwgd29ya3NoZWV0RGF0YTogV29ya3NoZWV0RGF0YSkge1xuICAgICAgICBjb25zdCBjb2x1bW5Db3VudCA9IHdvcmtzaGVldERhdGEuY29sdW1uQ291bnQ7XG4gICAgICAgIGNvbnN0IGxhc3RDb2x1bW4gPSBFeGNlbFN0cmluZ3MuZ2V0RXhjZWxDb2x1bW4oY29sdW1uQ291bnQgLSAxKSArIHdvcmtzaGVldERhdGEucm93Q291bnQ7XG4gICAgICAgIGNvbnN0IGRpbWVuc2lvbiA9ICdBMTonICsgbGFzdENvbHVtbjtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gd29ya3NoZWV0RGF0YS5rZXlzO1xuICAgICAgICBsZXQgc29ydFN0cmluZyA9ICcnO1xuXG4gICAgICAgIGxldCB0YWJsZUNvbHVtbnMgPSAnPHRhYmxlQ29sdW1ucyBjb3VudD1cIicgKyBjb2x1bW5Db3VudCArICdcIj4nO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHVtbkNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gIHZhbHVlc1tpXTtcbiAgICAgICAgICAgIHRhYmxlQ29sdW1ucyArPSAnPHRhYmxlQ29sdW1uIGlkPVwiJyArIChpICsgMSkgKyAnXCIgbmFtZT1cIicgKyB2YWx1ZSArICdcIi8+JztcbiAgICAgICAgfVxuXG4gICAgICAgIHRhYmxlQ29sdW1ucyArPSAnPC90YWJsZUNvbHVtbnM+JztcblxuICAgICAgICBpZiAod29ya3NoZWV0RGF0YS5zb3J0KSB7XG4gICAgICAgICAgICBjb25zdCBzb3J0aW5nRXhwcmVzc2lvbiA9IHdvcmtzaGVldERhdGEuc29ydDtcbiAgICAgICAgICAgIGNvbnN0IHNjID0gRXhjZWxTdHJpbmdzLmdldEV4Y2VsQ29sdW1uKHZhbHVlcy5pbmRleE9mKHNvcnRpbmdFeHByZXNzaW9uLmZpZWxkTmFtZSkpO1xuICAgICAgICAgICAgY29uc3QgZGlyID0gc29ydGluZ0V4cHJlc3Npb24uZGlyIC0gMTtcbiAgICAgICAgICAgIHNvcnRTdHJpbmcgPSBgPHNvcnRTdGF0ZSByZWY9XCJBMjoke2xhc3RDb2x1bW59XCI+PHNvcnRDb25kaXRpb24gZGVzY2VuZGluZz1cIiR7ZGlyfVwiIHJlZj1cIiR7c2N9MToke3NjfTE1XCIvPjwvc29ydFN0YXRlPmA7XG4gICAgICAgIH1cblxuICAgICAgICBmb2xkZXIuZmlsZSgndGFibGUxLnhtbCcsIEV4Y2VsU3RyaW5ncy5nZXRUYWJsZXNYTUwoZGltZW5zaW9uLCB0YWJsZUNvbHVtbnMsIHNvcnRTdHJpbmcpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgV29ya3NoZWV0UmVsc0ZpbGUgaW1wbGVtZW50cyBJRXhjZWxGaWxlIHtcbiAgICBwdWJsaWMgd3JpdGVFbGVtZW50KGZvbGRlcjogSlNaaXAsIHdvcmtzaGVldERhdGE6IFdvcmtzaGVldERhdGEpIHtcbiAgICAgICAgZm9sZGVyLmZpbGUoJ3NoZWV0MS54bWwucmVscycsIEV4Y2VsU3RyaW5ncy5nZXRXb3Jrc2hlZXRSZWxzKCkpO1xuICAgIH1cbn1cbiJdfQ==