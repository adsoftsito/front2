/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';
import { CommonModule } from '@angular/common';
import { ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Input, NgModule, Output, QueryList, TemplateRef, ViewChild, ViewChildren, Optional, Self } from '@angular/core';
import { IgxComboItemDirective, IgxComboEmptyDirective, IgxComboHeaderItemDirective, IgxComboHeaderDirective, IgxComboFooterDirective, IgxComboAddItemDirective } from './combo.directives';
import { FormsModule, ReactiveFormsModule, NgControl } from '@angular/forms';
import { IgxCheckboxComponent, IgxCheckboxModule } from '../checkbox/checkbox.component';
import { IgxSelectionAPIService } from '../core/selection';
import { cloneArray } from '../core/utils';
import { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';
import { FilteringLogic } from '../data-operations/filtering-expression.interface';
import { SortingDirection } from '../data-operations/sorting-expression.interface';
import { IgxForOfModule } from '../directives/for-of/for_of.directive';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxToggleModule } from '../directives/toggle/toggle.directive';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxDropDownModule } from '../drop-down/drop-down.component';
import { IgxIconModule } from '../icon/index';
import { IgxInputGroupModule } from '../input-group/input-group.component';
import { IgxComboItemComponent } from './combo-item.component';
import { IgxComboDropDownComponent } from './combo-dropdown.component';
import { IgxComboFilterConditionPipe, IgxComboFilteringPipe, IgxComboGroupingPipe, IgxComboSortingPipe } from './combo.pipes';
import { AbsoluteScrollStrategy } from '../services';
import { DeprecateProperty } from '../core/deprecateDecorators';
/**
 * Custom strategy to provide the combo with callback on initial positioning
 */
class ComboConnectedPositionStrategy extends ConnectedPositioningStrategy {
    /**
     * @param {?} callback
     */
    constructor(callback) {
        super();
        this._callback = callback;
    }
    /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    position(contentElement, size, document, initialCall) {
        if (initialCall) {
            this._callback();
        }
        super.position(contentElement, size);
    }
}
function ComboConnectedPositionStrategy_tsickle_Closure_declarations() {
    /** @type {?} */
    ComboConnectedPositionStrategy.prototype._callback;
}
/** @enum {string} */
const DataTypes = {
    EMPTY: 'empty',
    PRIMITIVE: 'primitive',
    COMPLEX: 'complex',
    PRIMARYKEY: 'valueKey',
};
/** @enum {number} */
const IgxComboState = {
    /**
         * Combo with initial state.
         */
    INITIAL: 0,
    /**
         * Combo with valid state.
         */
    VALID: 1,
    /**
         * Combo with invalid state.
         */
    INVALID: 2,
};
export { IgxComboState };
IgxComboState[IgxComboState.INITIAL] = "INITIAL";
IgxComboState[IgxComboState.VALID] = "VALID";
IgxComboState[IgxComboState.INVALID] = "INVALID";
/**
 * @record
 */
export function IComboSelectionChangeEventArgs() { }
function IComboSelectionChangeEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IComboSelectionChangeEventArgs.prototype.oldSelection;
    /** @type {?} */
    IComboSelectionChangeEventArgs.prototype.newSelection;
    /** @type {?|undefined} */
    IComboSelectionChangeEventArgs.prototype.event;
}
/**
 * @record
 */
export function IComboItemAdditionEvent() { }
function IComboItemAdditionEvent_tsickle_Closure_declarations() {
    /** @type {?} */
    IComboItemAdditionEvent.prototype.oldCollection;
    /** @type {?} */
    IComboItemAdditionEvent.prototype.addedItem;
    /** @type {?} */
    IComboItemAdditionEvent.prototype.newCollection;
}
let /** @type {?} */ NEXT_ID = 0;
const /** @type {?} */ noop = () => { };
const Éµ0 = noop;
export class IgxComboComponent {
    /**
     * @param {?} elementRef
     * @param {?} cdr
     * @param {?} selection
     * @param {?} ngControl
     */
    constructor(elementRef, cdr, selection, ngControl) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.selection = selection;
        this.ngControl = ngControl;
        /**
         * @hidden
         */
        this.customValueFlag = true;
        /**
         * @hidden
         */
        this.defaultFallbackGroup = 'Other';
        /**
         * @hidden
         */
        this.stringFilters = IgxStringFilteringOperand;
        /**
         * @hidden
         */
        this.boolenFilters = IgxBooleanFilteringOperand;
        /**
         * @hidden
         */
        this._filteringLogic = FilteringLogic.Or;
        /**
         * @hidden
         */
        this._filteringExpressions = [];
        /**
         * @hidden
         */
        this._sortingExpressions = [];
        /**
         * @hidden
         */
        this._groupKey = '';
        /**
         * @hidden
         */
        this._valueKey = '';
        /**
         * @hidden
         */
        this._displayKey = '';
        this._dataType = '';
        this._data = [];
        this._filteredData = [];
        this._dropdownContainer = null;
        this._searchInput = null;
        this._comboInput = null;
        this._valid = IgxComboState.INITIAL;
        this._width = '100%';
        this._onChangeCallback = noop;
        this.overlaySettings = {
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnOutsideClick: true
        };
        this._value = '';
        this._searchValue = '';
        /**
         * Emitted when item selection is changing, before the selection completes
         *
         * ```html
         * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>
         * ```
         */
        this.onSelectionChange = new EventEmitter();
        /**
         * Emitted before the dropdown is opened
         *
         * ```html
         * <igx-combo onOpening='handleOpening($event)'></igx-combo>
         * ```
         */
        this.onOpening = new EventEmitter();
        /**
         * Emitted after the dropdown is opened
         *
         * ```html
         * <igx-combo (onOpened)='handleOpened()'></igx-combo>
         * ```
         */
        this.onOpened = new EventEmitter();
        /**
         * Emitted before the dropdown is closed
         *
         * ```html
         * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>
         * ```
         */
        this.onClosing = new EventEmitter();
        /**
         * Emitted after the dropdown is closed
         *
         * ```html
         * <igx-combo (onClosed)='handleClosed()'></igx-combo>
         * ```
         */
        this.onClosed = new EventEmitter();
        /**
         * Emitted when an item is being added to the data collection
         *
         * ```html
         * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>
         * ```
         */
        this.onAddition = new EventEmitter();
        /**
         * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)
         *
         * ```html
         * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>
         * ```
         */
        this.onSearchInput = new EventEmitter();
        /**
         * Emitted when new chunk of data is loaded from the virtualization
         *
         * ```html
         * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>
         * ```
         */
        this.onDataPreLoad = new EventEmitter();
        /**
         * Gets/gets combo id.
         *
         * ```typescript
         * // get
         * let id = this.combo.id;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [id]='combo1'></igx-combo>
         * ```
         */
        this.id = `igx-combo-${NEXT_ID++}`;
        /**
         * Controls whether custom values can be added to the collection
         *
         * ```typescript
         * // get
         * let comboAllowsCustomValues = this.combo.allowCustomValues;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [allowCustomValues]='true'></igx-combo>
         * ```
         */
        this.allowCustomValues = false;
        /**
         * Configures the drop down list height
         *
         * ```typescript
         * // get
         * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [itemsMaxHeight]='320'></igx-combo>
         * ```
         */
        this.itemsMaxHeight = 480;
        /**
         * Configures the drop down list item height
         *
         * ```typescript
         * // get
         * let myComboItemHeight = this.combo.itemHeight;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [itemHeight]='32'></igx-combo>
         * ```
         */
        this.itemHeight = 48;
        /**
         * @hidden
         */
        this.filteringLogic = FilteringLogic.Or;
        /**
         * Defines the placeholder value for the combo value field
         *
         * ```typescript
         * // get
         * let myComboPlaceholder = this.combo.placeholder;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>
         * ```
         */
        this.placeholder = '';
        /**
         * Defines the placeholder value for the combo dropdown search field
         *
         * ```typescript
         * // get
         * let myComboSearchPlaceholder = this.combo.searchPlaceholder;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>
         * ```
         */
        this.searchPlaceholder = 'Enter a Search Term';
        /**
         * An \@Input property that enabled/disables filtering in the list. The default is `true`.
         * ```html
         * <igx-combo [filterable]="'false'">
         * ```
         */
        this.filterable = true;
        /**
         * An \@Input property that enabled/disables combo. The default is `false`.
         * ```html
         * <igx-combo [disabled]="'true'">
         * ```
         */
        this.disabled = false;
        /**
         * An \@Input property that sets how the combo will be styled.
         * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.
         * ```html
         * <igx-combo [type]="'line'">
         * ```
         */
        this.type = 'box';
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    get searchInput() {
        return this._searchInput;
    }
    /**
     * @hidden
     * @param {?} content
     * @return {?}
     */
    set searchInput(content) {
        this._searchInput = content;
    }
    /**
     * @hidden
     * @return {?}
     */
    get comboInput() {
        return this._comboInput;
    }
    /**
     * @hidden
     * @param {?} content
     * @return {?}
     */
    set comboInput(content) {
        this._comboInput = content;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set itemTemplate(val) {
        this._itemTemplate = val;
    }
    /**
     * @return {?}
     */
    get itemTemplate() {
        return this._itemTemplate;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set headerTemplate(val) {
        this._headerTemplate = val;
    }
    /**
     * @return {?}
     */
    get headerTemplate() {
        return this._headerTemplate;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set footerTemplate(val) {
        this._footerTemplate = val;
    }
    /**
     * @return {?}
     */
    get footerTemplate() {
        return this._footerTemplate;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set headerItemTemplate(val) {
        this._headerItemTemplate = val;
    }
    /**
     * @return {?}
     */
    get headerItemTemplate() {
        return this._headerItemTemplate;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set addItemTemplate(val) {
        this._addItemTemplate = val;
    }
    /**
     * @return {?}
     */
    get addItemTemplate() {
        return this._addItemTemplate;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set emptyTemplate(val) {
        this._emptyTemplate = val;
    }
    /**
     * @return {?}
     */
    get emptyTemplate() {
        return this._emptyTemplate;
    }
    /**
     * @hidden
     * @param {?} template
     * @return {?}
     */
    set oldEmptyTemplate(template) {
        if (template) {
            this.emptyTemplate = template;
        }
    }
    /**
     * @hidden
     * @param {?} template
     * @return {?}
     */
    set oldHeaderTemplate(template) {
        if (template) {
            this.headerTemplate = template;
        }
    }
    /**
     * @hidden
     * @param {?} template
     * @return {?}
     */
    set oldFooterTemplate(template) {
        if (template) {
            this.footerTemplate = template;
        }
    }
    /**
     * @hidden
     * @param {?} template
     * @return {?}
     */
    set oldItemTemplate(template) {
        if (template) {
            this.itemTemplate = template;
        }
    }
    /**
     * @hidden
     * @param {?} template
     * @return {?}
     */
    set oldAddItemTemplate(template) {
        if (template) {
            this.addItemTemplate = template;
        }
    }
    /**
     * @hidden
     * @param {?} template
     * @return {?}
     */
    set oldHeaderItemTemplate(template) {
        if (template) {
            this.headerItemTemplate = template;
        }
    }
    /**
     * @hidden
     * @param {?} val
     * @return {?}
     */
    set dropdownContainer(val) {
        this._dropdownContainer = val;
    }
    /**
     * @hidden
     * @return {?}
     */
    get dropdownContainer() {
        return this._dropdownContainer;
    }
    /**
     * @hidden
     * @param {?} list
     * @return {?}
     */
    set children(list) {
        this._children = list;
    }
    /**
     * @hidden
     * @return {?}
     */
    get children() {
        return this._children;
    }
    /**
     * Sets the style width of the element
     *
     * ```typescript
     * // get
     * let myComboWidth = this.combo.width;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [width]='250px'></igx-combo>
     * ```
     * @return {?}
     */
    get width() {
        return this._width;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set width(val) {
        this._width = val;
    }
    /**
     * @hidden
     * @return {?}
     */
    get validClass() {
        return this._valid === IgxComboState.VALID;
    }
    /**
     * @hidden
     * @return {?}
     */
    get invalidClass() {
        return this._valid === IgxComboState.INVALID;
    }
    /**
     * Combo data source.
     *
     * ```html
     * <!--set-->
     * <igx-combo [data]='items'></igx-combo>
     * ```
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set data(val) {
        this._data = (val) ? val : [];
    }
    /**
     * Combo value data source propery.
     *
     * ```typescript
     * // get
     * let myComboValueKey = this.combo.valueKey;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [valueKey]='myKey'></igx-combo>
     * ```
     * @return {?}
     */
    get valueKey() {
        return this._valueKey;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set valueKey(val) {
        this._valueKey = val;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set displayKey(val) {
        this._displayKey = val;
    }
    /**
     * Combo text data source propery.
     *
     * ```typescript
     * // get
     * let myComboDisplayKey = this.combo.displayKey;
     *
     * // set
     * this.combo.displayKey = 'val';
     *
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [displayKey]='mydisplayKey'></igx-combo>
     * ```
     * @return {?}
     */
    get displayKey() {
        return this._displayKey ? this._displayKey : this._valueKey;
    }
    /**
     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].
     *
     * ```html
     * <!--set-->
     * <igx-combo [groupKey]='newGroupKey'></igx-combo>
     * ```
     * @param {?} val
     * @return {?}
     */
    set groupKey(val) {
        this.clearSorting(this._groupKey);
        this._groupKey = val;
        this.sort(this._groupKey);
    }
    /**
     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].
     *
     * ```typescript
     * // get
     * let currentGroupKey = this.combo.groupKey;
     * ```
     * @return {?}
     */
    get groupKey() {
        return this._groupKey;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onBlur(event) {
        if (this.dropdown.collapsed) {
            this._valid = IgxComboState.INITIAL;
            if (this.ngControl) {
                if (!this.ngControl.valid) {
                    this._valid = IgxComboState.INVALID;
                }
            }
            else if (this._hasValidators() && !this.elementRef.nativeElement.checkValidity()) {
                this._valid = IgxComboState.INVALID;
            }
        }
    }
    /**
     * @return {?}
     */
    _hasValidators() {
        if (this.elementRef.nativeElement.hasAttribute('required')) {
            return true;
        }
        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);
    }
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    onArrowDown(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        if (this.dropdown.collapsed) {
            this.toggle();
        }
    }
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    onArrowUp(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        if (!this.dropdown.collapsed) {
            this.toggle();
        }
    }
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    onInputClick(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        this.toggle();
    }
    /**
     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`
     *
     * ```typescript
     * // get
     * let state = this.combo.virtualizationState;
     * ```
     * @return {?}
     */
    get virtualizationState() {
        return this.dropdown.verticalScrollContainer.state;
    }
    /**
     * Sets the current state of the virtualized data.
     *
     * ```typescript
     * // set
     * this.combo.virtualizationState(state);
     * ```
     * @param {?} state
     * @return {?}
     */
    set virtualizationState(state) {
        this.dropdown.verticalScrollContainer.state = state;
    }
    /**
     * Gets total count of the virtual data items, when using remote service.
     *
     * ```typescript
     * // get
     * let count = this.combo.totalItemCount;
     * ```
     * @return {?}
     */
    get totalItemCount() {
        return this.dropdown.verticalScrollContainer.totalItemCount;
    }
    /**
     * Sets total count of the virtual data items, when using remote service.
     *
     * ```typescript
     * // set
     * this.combo.totalItemCount(remoteService.count);
     * ```
     * @param {?} count
     * @return {?}
     */
    set totalItemCount(count) {
        this.dropdown.verticalScrollContainer.totalItemCount = count;
        this.cdr.detectChanges();
    }
    /**
     * Gets if control is valid, when used in a form
     *
     * ```typescript
     * // get
     * let valid = this.combo.valid;
     * ```
     * @return {?}
     */
    get valid() {
        return this._valid;
    }
    /**
     * Sets valid state of the combo
     *
     * ```typescript
     * // get
     * this.combo.valid(IgxComboState.INVALID);
     * ```
     * @param {?} value
     * @return {?}
     */
    set valid(value) {
        this._valid = value;
    }
    /**
     * @hidden
     * @return {?}
     */
    get values() {
        return this.valueKey !== undefined ? this.selectedItems().map((e) => e[this.valueKey]) : [];
    }
    /**
     * @hidden
     * @return {?}
     */
    get filteringExpressions() {
        return this.filterable ? this._filteringExpressions : [];
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    set filteringExpressions(value) {
        this._filteringExpressions = cloneArray(value);
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     * @return {?}
     */
    get sortingExpressions() {
        return this._sortingExpressions;
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    set sortingExpressions(value) {
        this._sortingExpressions = cloneArray(value);
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     * @param {?=} field
     * @return {?}
     */
    clearSorting(field) {
        if (field === undefined || field === null) {
            this.sortingExpressions = [];
            return;
        }
        const /** @type {?} */ currentState = cloneArray(this.sortingExpressions);
        const /** @type {?} */ index = currentState.findIndex((expr) => expr.fieldName === field);
        if (index > -1) {
            currentState.splice(index, 1);
            this.sortingExpressions = currentState;
        }
    }
    /**
     * Combo value
     *
     * ```typescript
     * // get
     * let comboValue = this.combo.value;
     * ```
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * Combo value
     *
     * ```html
     * <!--set-->
     * <igx-combo [value]='newValue'></igx-combo>
     * ```
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
    }
    /**
     * @hidden
     * @return {?}
     */
    get searchValue() {
        return this._searchValue;
    }
    /**
     * @hidden
     * @param {?} val
     * @return {?}
     */
    set searchValue(val) {
        this._searchValue = val;
    }
    /**
     * @hidden
     * @return {?}
     */
    get filteredData() {
        return this.filterable ? this._filteredData : this.data;
    }
    /**
     * @hidden
     * @param {?} val
     * @return {?}
     */
    set filteredData(val) {
        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;
        this.checkMatch();
    }
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    handleKeyUp(evt) {
        if (evt.key === 'ArrowDown' || evt.key === 'Down') {
            this.dropdownContainer.nativeElement.focus();
            this.dropdown.onFocus();
            this.dropdown.focusedItem = this.dropdown.items[0];
        }
        else if (evt.key === 'Escape' || evt.key === 'Esc') {
            this.toggle();
        }
    }
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    handleKeyDown(evt) {
        if (evt.key === 'ArrowUp' || evt.key === 'Up') {
            this.onArrowUp(evt);
        }
    }
    /**
     * @return {?}
     */
    checkMatch() {
        this.customValueFlag = this.displayKey || this.displayKey === 0 ?
            !this.filteredData
                .some((e) => (e[this.displayKey]).toString().toLowerCase() === this.searchValue.trim().toLowerCase()) &&
                this.allowCustomValues :
            !this.filteredData
                .some((e) => e.toString().toLowerCase() === this.searchValue.trim().toLowerCase()) && this.allowCustomValues;
    }
    /**
     * @hidden
     * @param {?=} event
     * @return {?}
     */
    handleInputChange(event) {
        if (event !== undefined) {
            this.dropdown.verticalScrollContainer.scrollTo(0);
            this.onSearchInput.emit(event);
        }
        if (this.filterable) {
            this.filter();
        }
        else {
            this.checkMatch();
        }
    }
    /**
     * @hidden
     * @param {?} fieldName
     * @param {?=} dir
     * @param {?=} ignoreCase
     * @return {?}
     */
    sort(fieldName, dir = SortingDirection.Asc, ignoreCase = true) {
        if (!fieldName && fieldName !== 0) {
            return;
        }
        const /** @type {?} */ sortingState = cloneArray(this.sortingExpressions, true);
        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase);
        this.sortingExpressions = sortingState;
    }
    /**
     * @hidden
     * @param {?} val
     * @return {?}
     */
    getValueByValueKey(val) {
        if (!val && val !== 0) {
            return undefined;
        }
        return this.valueKey === 0 || this.valueKey ?
            this.data.filter((e) => e[this.valueKey] === val)[0] :
            this.data.filter((e) => e === val);
    }
    /**
     * @hidden
     * @param {?} state
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @return {?}
     */
    prepare_sorting_expression(state, fieldName, dir, ignoreCase) {
        if (dir === SortingDirection.None) {
            state.splice(state.findIndex((expr) => expr.fieldName === fieldName), 1);
            return;
        }
        const /** @type {?} */ expression = state.find((expr) => expr.fieldName === fieldName);
        if (!expression) {
            state.push({ fieldName, dir, ignoreCase });
        }
        else {
            Object.assign(expression, { fieldName, dir, ignoreCase });
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    get dataType() {
        if (this.valueKey) {
            return DataTypes.COMPLEX;
        }
        return DataTypes.PRIMITIVE;
    }
    /**
     * @hidden
     * @return {?}
     */
    get isRemote() {
        return this.totalItemCount > 0 &&
            this.valueKey &&
            this.dataType === DataTypes.COMPLEX;
    }
    /**
     * @param {?} itemID
     * @return {?}
     */
    _stringifyItemID(itemID) {
        return this.isRemote && typeof itemID === 'object' ? JSON.stringify(itemID) : itemID;
    }
    /**
     * @param {?} itemID
     * @return {?}
     */
    _parseItemID(itemID) {
        return this.isRemote && typeof itemID === 'string' ? JSON.parse(itemID) : itemID;
    }
    /**
     * @param {?} newItem
     * @param {?=} select
     * @return {?}
     */
    changeSelectedItem(newItem, select) {
        if (!newItem && newItem !== 0) {
            return;
        }
        const /** @type {?} */ newSelection = select ?
            this.selection.add_item(this.id, newItem) :
            this.selection.delete_item(this.id, newItem);
        this.triggerSelectionChange(newSelection);
    }
    /**
     * @hidden
     * @param {?} itemID
     * @param {?=} select
     * @return {?}
     */
    setSelectedItem(itemID, select = true) {
        if (itemID === undefined || itemID === null) {
            return;
        }
        const /** @type {?} */ newItem = this.dropdown.items.find((item) => item.itemID === itemID);
        if (newItem) {
            if (newItem.disabled || newItem.isHeader) {
                return;
            }
            if (!newItem.isSelected) {
                this.changeSelectedItem(itemID, true);
            }
            else {
                this.changeSelectedItem(itemID, false);
            }
        }
        else {
            const /** @type {?} */ target = typeof itemID === 'object' ? itemID : this.getValueByValueKey(itemID);
            if (target) {
                this.changeSelectedItem(target, select);
            }
        }
    }
    /**
     * @hidden
     * @param {?} item
     * @return {?}
     */
    isItemSelected(item) {
        return this.selection.is_item_selected(this.id, this._stringifyItemID(item));
    }
    /**
     * @hidden
     * @param {?} newSelectionAsSet
     * @return {?}
     */
    triggerSelectionChange(newSelectionAsSet) {
        const /** @type {?} */ oldSelection = this.dropdown.selectedItem;
        const /** @type {?} */ newSelection = newSelectionAsSet ? Array.from(newSelectionAsSet) : [];
        if (oldSelection !== newSelection) {
            const /** @type {?} */ args = { oldSelection, newSelection };
            this.onSelectionChange.emit(args);
            newSelectionAsSet = this.selection.get_empty();
            for (let /** @type {?} */ i = 0; i < args.newSelection.length; i++) {
                newSelectionAsSet.add(args.newSelection[i]);
            }
            this.selection.set(this.id, newSelectionAsSet);
            this.value = this.dataType !== DataTypes.PRIMITIVE ?
                newSelection.map((id) => this._parseItemID(id)[this.displayKey]).join(', ') :
                newSelection.join(', ');
            // this.isHeaderChecked();
            this._onChangeCallback(newSelection);
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    triggerCheck() {
        this.cdr.detectChanges();
    }
    /**
     * @hidden
     * @return {?}
     */
    isAddButtonVisible() {
        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;
        return this.searchValue !== '' && this.customValueFlag;
    }
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    handleSelectAll(evt) {
        if (evt.checked) {
            this.selectAllItems();
        }
        else {
            this.deselectAllItems();
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    addItemToCollection() {
        if (!this.searchValue) {
            return false;
        }
        const /** @type {?} */ newValue = this.searchValue.trim();
        const /** @type {?} */ addedItem = this.displayKey ? {
            [this.valueKey]: newValue,
            [this.displayKey]: newValue
        } : newValue;
        if (this.groupKey || this.groupKey === 0) {
            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });
        }
        const /** @type {?} */ oldCollection = this.data;
        const /** @type {?} */ newCollection = [...this.data];
        newCollection.push(addedItem);
        const /** @type {?} */ args = {
            oldCollection, addedItem, newCollection
        };
        this.onAddition.emit(args);
        this.data.push(addedItem);
        // If you mutate the array, no pipe is invoked and the display isn't updated;
        // if you replace the array, the pipe executes and the display is updated.
        this.data = cloneArray(this.data);
        this.changeSelectedItem(addedItem, true);
        this.customValueFlag = false;
        if (this.searchInput) {
            this.searchInput.nativeElement.focus();
        }
        this.handleInputChange();
    }
    /**
     * @hidden
     * @param {?} searchVal
     * @param {?} condition
     * @param {?} ignoreCase
     * @param {?=} fieldName
     * @return {?}
     */
    prepare_filtering_expression(searchVal, condition, ignoreCase, fieldName) {
        const /** @type {?} */ newArray = [...this.filteringExpressions];
        const /** @type {?} */ expression = newArray.find((expr) => expr.fieldName === fieldName);
        const /** @type {?} */ newExpression = { fieldName, searchVal, condition, ignoreCase };
        if (!expression) {
            newArray.push(newExpression);
        }
        else {
            Object.assign(expression, newExpression);
        }
        if (this.groupKey) {
            const /** @type {?} */ expression2 = newArray.find((expr) => expr.fieldName === 'isHeader');
            const /** @type {?} */ headerExpression = {
                fieldName: 'isHeader', searchVale: '',
                condition: IgxBooleanFilteringOperand.instance().condition('true'), ignoreCase: true
            };
            if (!expression2) {
                newArray.push(headerExpression);
            }
            else {
                Object.assign(expression2, headerExpression);
            }
        }
        this.filteringExpressions = newArray;
    }
    /**
     * @hidden
     * @return {?}
     */
    onStatusChanged() {
        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&
            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {
            this._valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    filter() {
        this.prepare_filtering_expression(this.searchValue.trim(), IgxStringFilteringOperand.instance().condition('contains'), true, this.dataType === DataTypes.PRIMITIVE ? undefined : this.displayKey);
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        this._positionCallback = () => this.dropdown.updateScrollPosition();
        this.overlaySettings.positionStrategy = new ComboConnectedPositionStrategy(this._positionCallback);
        this.overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;
        if (this.ngControl && this.ngControl.value) {
            this.triggerSelectionChange(this.ngControl.value);
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterViewInit() {
        this.filteredData = [...this.data];
        if (this.ngControl) {
            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        if (this._statusChanges$) {
            this._statusChanges$.unsubscribe();
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    dataLoading(event) {
        this.onDataPreLoad.emit(event);
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        // selectItems can handle Array<any>, no valueKey is needed;
        this.selectItems(value, true);
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { }
    /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     * @return {?}
     */
    get template() {
        this._dataType = this.dataType;
        if (this.itemTemplate) {
            return this.itemTemplate;
        }
        if (this._dataType === DataTypes.COMPLEX) {
            return this.complexTemplate;
        }
        return this.primitiveTemplate;
    }
    /**
     * @hidden
     * @return {?}
     */
    get context() {
        return {
            $implicit: this
        };
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    handleClearItems(event) {
        this.deselectAllItems(true);
        event.stopPropagation();
    }
    /**
     * A method that opens/closes the combo.
     *
     * ```html
     * <button (click)="combo.toggle()>Toggle Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    toggle() {
        this.dropdown.toggle(this.overlaySettings);
    }
    /**
     * A method that opens the combo.
     *
     * ```html
     * <button (click)="combo.open()>Open Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    open() {
        this.dropdown.open(this.overlaySettings);
    }
    /**
     * A method that closes the combo.
     *
     * ```html
     * <button (click)="combo.close()>Close Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    close() {
        this.dropdown.close();
    }
    /**
     * Gets drop down state.
     *
     * ```typescript
     * // get
     * let state = this.combo.collapsed;
     * ```
     * @return {?}
     */
    get collapsed() {
        return this.dropdown.collapsed;
    }
    /**
     * Get current selection state
     * @return {?} Array of selected items
     * ```typescript
     * // get
     * let selectedItems = this.combo.selectedItems();
     * ```
     */
    selectedItems() {
        const /** @type {?} */ items = this.dropdown.selectedItem;
        return this.isRemote ? items.map(item => this._parseItemID(item)) : items;
    }
    /**
     * Select defined items
     * @param {?} newItems new items to be selected
     * @param {?=} clearCurrentSelection if true clear previous selected items
     * ```typescript
     * // get
     * this.combo.selectItems(["New York", "New Jersey"]);
     * ```
     * @return {?}
     */
    selectItems(newItems, clearCurrentSelection) {
        if (newItems) {
            const /** @type {?} */ newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);
            this.triggerSelectionChange(newSelection);
        }
    }
    /**
     * Deselect defined items
     * @param {?} items items to deselected
     * ```typescript
     * // get
     * this.combo.deselectItems(["New York", "New Jersey"]);
     * ```
     * @return {?}
     */
    deselectItems(items) {
        if (items) {
            const /** @type {?} */ newSelection = this.selection.delete_items(this.id, items);
            this.triggerSelectionChange(newSelection);
        }
    }
    /**
     * Select all (filtered) items
     * @param {?=} ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.
     * ```typescript
     * // get
     * this.combo.selectAllItems();
     * ```
     * @return {?}
     */
    selectAllItems(ignoreFilter) {
        const /** @type {?} */ allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData);
        const /** @type {?} */ newSelection = this.selection.add_items(this.id, allVisible);
        this.triggerSelectionChange(newSelection);
    }
    /**
     * Deselect all (filtered) items
     * @param {?=} ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.
     * ```typescript
     * // get
     * this.combo.deselectAllItems();
     * ```
     * @return {?}
     */
    deselectAllItems(ignoreFilter) {
        const /** @type {?} */ newSelection = this.filteredData.length === this.data.length || ignoreFilter ?
            this.selection.get_empty() :
            this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData));
        this.triggerSelectionChange(newSelection);
    }
}
IgxComboComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-combo',
                template: `<ng-template #complex let-display let-data="data" let-key="displayKey">
    {{display[key]}}
</ng-template>
<ng-template #primitive let-display>
    {{display}}
</ng-template>
<ng-template #empty>
    <span>The list is empty</span>
</ng-template>
<ng-template #addItemDefault let-control>
    <button igxButton="flat" igxRipple>Add item</button>
</ng-template>
<ng-template #headerItemBase let-item let-key="valueKey" let-groupKey="groupKey">
    {{ item[key] }}
</ng-template>

<div class="igx-combo" [style.width]="width" role="combobox" [attr.aria-expanded]="!dropdown.collapsed" aria-haspopup="listbox" [attr.aria-owns]="dropdown.id">
    <igx-input-group [type]="type" (click)="onInputClick($event)">
        <input igxInput #comboInput name="comboInput" type="text" [(ngModel)]="value" readonly [placeholder]="placeholder" [disabled]="disabled" (blur)="onBlur($event)"/>
        <igx-suffix *ngIf="value.length" class="clearButton" aria-label="Clear Selection" igxRipple (click)="handleClearItems($event)">
            <igx-icon fontSet="material">clear</igx-icon>
        </igx-suffix>
        <igx-suffix igxButton="icon" class="dropdownToggleButton" igxRipple>
            <igx-icon *ngIf="dropdown.collapsed; else toggleUp" fontSet="material">arrow_drop_down</igx-icon>
            <ng-template #toggleUp>
                <igx-icon fontSet="material">arrow_drop_up</igx-icon>
            </ng-template>
        </igx-suffix>
    </igx-input-group>
    <igx-combo-drop-down #igxComboDropDown class="igx-combo__drop-down" [width]="itemsWidth || '100%'">
        <igx-input-group class="igx-combo__search">
            <input class="igx-combo-input" igxInput #searchInput name="searchInput" type="text" [(ngModel)]="searchValue" (ngModelChange)="handleInputChange($event)"
                (keyup)="handleKeyUp($event)" (keydown)="handleKeyDown($event)" (focus)="dropdown.onBlur($event)" [placeholder]="searchPlaceholder" aria-autocomplete="both"
                [attr.aria-owns]="dropdown.id" [attr.aria-labelledby]="ariaLabelledBy" />
        </igx-input-group>
        <ng-container *ngTemplateOutlet="headerTemplate; context: {$implicit: this}">
        </ng-container>
        <div #dropdownItemContainer class="igx-combo__content" [style.overflow]="'hidden'" [style.maxHeight.px]="itemsMaxHeight"
            [igxDropDownItemNavigation]="dropdown" [tabindex]="dropdown.collapsed ? -1 : 0" role="listbox" [attr.id]="dropdown.id">
            <ng-template igxFor let-item [igxForOf]="data | comboFiltering:filteringExpressions:filteringLogic | comboSorting:sortingExpressions | comboGrouping:groupKey"
                [igxForScrollOrientation]="'vertical'" [igxForContainerSize]="itemsMaxHeight"
                [igxForItemSize]="itemHeight" (onChunkPreload)="dataLoading($event)" #virtualScrollContainer>
                <igx-combo-item [value]="item" isHeader={{item.isHeader}} role="option">
                    <ng-container *ngIf="!item.isHeader">
                        <igx-checkbox [checked]="isItemSelected(item)" disableRipple="true" disabled="true" class="igx-combo__checkbox"></igx-checkbox>
                    </ng-container>
                    <ng-container *ngIf="item.isHeader">
                        <ng-container *ngTemplateOutlet="headerItemTemplate ? headerItemTemplate : headerItemBase; context: {$implicit: item, data: data, valueKey: valueKey, groupKey: groupKey, displayKey: displayKey}"></ng-container>
                    </ng-container>
                    <ng-container *ngIf="!item.isHeader">
                        <ng-container #listItem *ngTemplateOutlet="template; context: {$implicit: item, data: data, valueKey: valueKey, displayKey: displayKey};"></ng-container>
                    </ng-container>
                </igx-combo-item>
            </ng-template>
        </div>
        <div class="igx-combo__add" *ngIf="filteredData.length === 0 || isAddButtonVisible()">
            <div class="igx-combo__empty" *ngIf="filteredData.length === 0">
                <ng-container *ngTemplateOutlet="emptyTemplate ? emptyTemplate : empty; context: {$implicit: this}">
                </ng-container>
            </div>
            <igx-combo-item *ngIf="isAddButtonVisible()" [tabindex]="dropdown.collapsed ? -1 : customValueFlag ? 1 : -1" class="igx-combo__add-item"
                    igxRipple (keypress)="addItemToCollection()" [isHeader]="false" [disabled]="false" [value]="'ADD ITEM'" role="button"
                    aria-label="Add Item">
                <ng-container *ngTemplateOutlet="addItemTemplate ? addItemTemplate : addItemDefault; context: {$implicit: this}">
                </ng-container>
            </igx-combo-item>
        </div>
        <ng-container *ngTemplateOutlet="footerTemplate; context: {$implicit: this}">
        </ng-container>
    </igx-combo-drop-down>
</div>
`
            },] },
];
/** @nocollapse */
IgxComboComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
    { type: IgxSelectionAPIService, },
    { type: NgControl, decorators: [{ type: Self }, { type: Optional },] },
];
IgxComboComponent.propDecorators = {
    "dropdown": [{ type: ViewChild, args: [IgxComboDropDownComponent, { read: IgxComboDropDownComponent },] },],
    "selectAllCheckbox": [{ type: ViewChild, args: ['selectAllCheckbox', { read: IgxCheckboxComponent },] },],
    "searchInput": [{ type: ViewChild, args: ['searchInput',] },],
    "comboInput": [{ type: ViewChild, args: ['comboInput',] },],
    "itemTemplate": [{ type: ContentChild, args: [IgxComboItemDirective, { read: TemplateRef },] },],
    "headerTemplate": [{ type: ContentChild, args: [IgxComboHeaderDirective, { read: TemplateRef },] },],
    "footerTemplate": [{ type: ContentChild, args: [IgxComboFooterDirective, { read: TemplateRef },] },],
    "headerItemTemplate": [{ type: ContentChild, args: [IgxComboHeaderItemDirective, { read: TemplateRef },] },],
    "addItemTemplate": [{ type: ContentChild, args: [IgxComboAddItemDirective, { read: TemplateRef },] },],
    "emptyTemplate": [{ type: ContentChild, args: [IgxComboEmptyDirective, { read: TemplateRef },] },],
    "primitiveTemplate": [{ type: ViewChild, args: ['primitive', { read: TemplateRef },] },],
    "complexTemplate": [{ type: ViewChild, args: ['complex', { read: TemplateRef },] },],
    "oldEmptyTemplate": [{ type: ContentChild, args: ['emptyTemplate', { read: TemplateRef },] },],
    "oldHeaderTemplate": [{ type: ContentChild, args: ['headerTemplate', { read: TemplateRef },] },],
    "oldFooterTemplate": [{ type: ContentChild, args: ['footerTemplate', { read: TemplateRef },] },],
    "oldItemTemplate": [{ type: ContentChild, args: ['itemTemplate', { read: TemplateRef },] },],
    "oldAddItemTemplate": [{ type: ContentChild, args: ['addItemTemplate', { read: TemplateRef },] },],
    "oldHeaderItemTemplate": [{ type: ContentChild, args: ['headerItemTemplate', { read: TemplateRef },] },],
    "dropdownContainer": [{ type: ViewChild, args: ['dropdownItemContainer',] },],
    "children": [{ type: ViewChildren, args: [IgxComboItemComponent, { read: IgxComboItemComponent },] },],
    "onSelectionChange": [{ type: Output },],
    "onOpening": [{ type: Output },],
    "onOpened": [{ type: Output },],
    "onClosing": [{ type: Output },],
    "onClosed": [{ type: Output },],
    "onAddition": [{ type: Output },],
    "onSearchInput": [{ type: Output },],
    "onDataPreLoad": [{ type: Output },],
    "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
    "width": [{ type: HostBinding, args: ['style.width',] }, { type: Input },],
    "validClass": [{ type: HostBinding, args: ['class.igx-input-group--valid',] },],
    "invalidClass": [{ type: HostBinding, args: ['class.igx-input-group--invalid',] },],
    "allowCustomValues": [{ type: Input },],
    "itemsMaxHeight": [{ type: Input },],
    "itemsWidth": [{ type: Input },],
    "itemHeight": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "searchPlaceholder": [{ type: Input },],
    "data": [{ type: Input },],
    "valueKey": [{ type: Input },],
    "displayKey": [{ type: Input },],
    "groupKey": [{ type: Input },],
    "filterable": [{ type: Input },],
    "ariaLabelledBy": [{ type: Input },],
    "disabled": [{ type: Input },],
    "type": [{ type: Input },],
    "onArrowDown": [{ type: HostListener, args: ['keydown.ArrowDown', ['$event'],] }, { type: HostListener, args: ['keydown.Alt.ArrowDown', ['$event'],] },],
};
tslib_1.__decorate([
    DeprecateProperty(`Setting combo item template with '#emptyTemplate' is deprecated.\n` +
        `Use \`igxComboEmpty\` directive instead.`),
    tslib_1.__metadata("design:type", TemplateRef),
    tslib_1.__metadata("design:paramtypes", [TemplateRef])
], IgxComboComponent.prototype, "oldEmptyTemplate", null);
tslib_1.__decorate([
    DeprecateProperty(`Setting combo item template with '#headerTemplate' is deprecated.\n` +
        `Use \`igxComboHeader\` directive instead.`),
    tslib_1.__metadata("design:type", TemplateRef),
    tslib_1.__metadata("design:paramtypes", [TemplateRef])
], IgxComboComponent.prototype, "oldHeaderTemplate", null);
tslib_1.__decorate([
    DeprecateProperty(`Setting combo item template with '#footerTemplate' is deprecated.\n` +
        `Use \`igxComboFooter\` directive instead.`),
    tslib_1.__metadata("design:type", TemplateRef),
    tslib_1.__metadata("design:paramtypes", [TemplateRef])
], IgxComboComponent.prototype, "oldFooterTemplate", null);
tslib_1.__decorate([
    DeprecateProperty(`Setting combo item template with '#itemTemplate' is deprecated.\n` +
        `Use \`igxComboItem\` directive instead.`),
    tslib_1.__metadata("design:type", TemplateRef),
    tslib_1.__metadata("design:paramtypes", [TemplateRef])
], IgxComboComponent.prototype, "oldItemTemplate", null);
tslib_1.__decorate([
    DeprecateProperty(`Setting combo item template with '#addItemTemplate' is deprecated.\n` +
        `Use \`igxComboAddItem\` directive instead.`),
    tslib_1.__metadata("design:type", TemplateRef),
    tslib_1.__metadata("design:paramtypes", [TemplateRef])
], IgxComboComponent.prototype, "oldAddItemTemplate", null);
tslib_1.__decorate([
    DeprecateProperty(`Setting combo item template with '#headerItemTemplate' is deprecated.\n` +
        `Use \`igxComboHeaderItem\` directive instead.`),
    tslib_1.__metadata("design:type", TemplateRef),
    tslib_1.__metadata("design:paramtypes", [TemplateRef])
], IgxComboComponent.prototype, "oldHeaderItemTemplate", null);
function IgxComboComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxComboComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxComboComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxComboComponent.propDecorators;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.customValueFlag;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.defaultFallbackGroup;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.stringFilters;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.boolenFilters;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype._filteringLogic;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype._filteringExpressions;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype._sortingExpressions;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype._groupKey;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype._valueKey;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype._displayKey;
    /** @type {?} */
    IgxComboComponent.prototype._addItemTemplate;
    /** @type {?} */
    IgxComboComponent.prototype._emptyTemplate;
    /** @type {?} */
    IgxComboComponent.prototype._footerTemplate;
    /** @type {?} */
    IgxComboComponent.prototype._headerTemplate;
    /** @type {?} */
    IgxComboComponent.prototype._headerItemTemplate;
    /** @type {?} */
    IgxComboComponent.prototype._itemTemplate;
    /** @type {?} */
    IgxComboComponent.prototype._dataType;
    /** @type {?} */
    IgxComboComponent.prototype._data;
    /** @type {?} */
    IgxComboComponent.prototype._filteredData;
    /** @type {?} */
    IgxComboComponent.prototype._children;
    /** @type {?} */
    IgxComboComponent.prototype._dropdownContainer;
    /** @type {?} */
    IgxComboComponent.prototype._searchInput;
    /** @type {?} */
    IgxComboComponent.prototype._comboInput;
    /** @type {?} */
    IgxComboComponent.prototype._valid;
    /** @type {?} */
    IgxComboComponent.prototype._statusChanges$;
    /** @type {?} */
    IgxComboComponent.prototype._width;
    /** @type {?} */
    IgxComboComponent.prototype._positionCallback;
    /** @type {?} */
    IgxComboComponent.prototype._onChangeCallback;
    /** @type {?} */
    IgxComboComponent.prototype.overlaySettings;
    /** @type {?} */
    IgxComboComponent.prototype._value;
    /** @type {?} */
    IgxComboComponent.prototype._searchValue;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.dropdown;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.selectAllCheckbox;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.primitiveTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.complexTemplate;
    /**
     * Emitted when item selection is changing, before the selection completes
     *
     * ```html
     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onSelectionChange;
    /**
     * Emitted before the dropdown is opened
     *
     * ```html
     * <igx-combo onOpening='handleOpening($event)'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onOpening;
    /**
     * Emitted after the dropdown is opened
     *
     * ```html
     * <igx-combo (onOpened)='handleOpened()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onOpened;
    /**
     * Emitted before the dropdown is closed
     *
     * ```html
     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onClosing;
    /**
     * Emitted after the dropdown is closed
     *
     * ```html
     * <igx-combo (onClosed)='handleClosed()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onClosed;
    /**
     * Emitted when an item is being added to the data collection
     *
     * ```html
     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onAddition;
    /**
     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)
     *
     * ```html
     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onSearchInput;
    /**
     * Emitted when new chunk of data is loaded from the virtualization
     *
     * ```html
     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onDataPreLoad;
    /**
     * Gets/gets combo id.
     *
     * ```typescript
     * // get
     * let id = this.combo.id;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [id]='combo1'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.id;
    /**
     * Controls whether custom values can be added to the collection
     *
     * ```typescript
     * // get
     * let comboAllowsCustomValues = this.combo.allowCustomValues;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [allowCustomValues]='true'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.allowCustomValues;
    /**
     * Configures the drop down list height
     *
     * ```typescript
     * // get
     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [itemsMaxHeight]='320'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.itemsMaxHeight;
    /**
     * Configures the drop down list width
     *
     * ```typescript
     * // get
     * let myComboItemsWidth = this.combo.itemsWidth;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [itemsWidth] = '"180px"'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.itemsWidth;
    /**
     * Configures the drop down list item height
     *
     * ```typescript
     * // get
     * let myComboItemHeight = this.combo.itemHeight;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [itemHeight]='32'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.itemHeight;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.filteringLogic;
    /**
     * Defines the placeholder value for the combo value field
     *
     * ```typescript
     * // get
     * let myComboPlaceholder = this.combo.placeholder;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.placeholder;
    /**
     * Defines the placeholder value for the combo dropdown search field
     *
     * ```typescript
     * // get
     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.searchPlaceholder;
    /**
     * An \@Input property that enabled/disables filtering in the list. The default is `true`.
     * ```html
     * <igx-combo [filterable]="'false'">
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.filterable;
    /**
     * An \@Input property that set aria-labelledby attribute
     * ```html
     * <igx-combo [ariaLabelledBy]="'label1'">
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.ariaLabelledBy;
    /**
     * An \@Input property that enabled/disables combo. The default is `false`.
     * ```html
     * <igx-combo [disabled]="'true'">
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.disabled;
    /**
     * An \@Input property that sets how the combo will be styled.
     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.
     * ```html
     * <igx-combo [type]="'line'">
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.type;
    /** @type {?} */
    IgxComboComponent.prototype.elementRef;
    /** @type {?} */
    IgxComboComponent.prototype.cdr;
    /** @type {?} */
    IgxComboComponent.prototype.selection;
    /** @type {?} */
    IgxComboComponent.prototype.ngControl;
}
/**
 * @hidden
 */
export class IgxComboModule {
}
IgxComboModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboFilterConditionPipe, IgxComboGroupingPipe,
                    IgxComboFilteringPipe, IgxComboSortingPipe, IgxComboDropDownComponent,
                    IgxComboItemDirective,
                    IgxComboEmptyDirective,
                    IgxComboHeaderItemDirective,
                    IgxComboHeaderDirective,
                    IgxComboFooterDirective,
                    IgxComboAddItemDirective],
                exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent,
                    IgxComboItemDirective,
                    IgxComboEmptyDirective,
                    IgxComboHeaderItemDirective,
                    IgxComboHeaderDirective,
                    IgxComboFooterDirective,
                    IgxComboAddItemDirective],
                imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,
                    IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],
                providers: [IgxSelectionAPIService]
            },] },
];
function IgxComboModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxComboModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxComboModule.ctorParameters;
}
export { Éµ0 };

//# sourceMappingURL=data:application/json;base64,