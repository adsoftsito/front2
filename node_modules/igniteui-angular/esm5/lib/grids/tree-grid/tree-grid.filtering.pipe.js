/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { DataUtil } from '../../data-operations/data-util';
import { GridBaseAPIService } from '../api.service';
import { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';
/**
 * @hidden
 */
var /**
 * @hidden
 */
TreeGridFilteringStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(TreeGridFilteringStrategy, _super);
    function TreeGridFilteringStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} data
     * @param {?} expressionsTree
     * @return {?}
     */
    TreeGridFilteringStrategy.prototype.filter = /**
     * @param {?} data
     * @param {?} expressionsTree
     * @return {?}
     */
    function (data, expressionsTree) {
        return this.filterImpl(data, expressionsTree, undefined);
    };
    /**
     * @param {?} data
     * @param {?} expressionsTree
     * @param {?} parent
     * @return {?}
     */
    TreeGridFilteringStrategy.prototype.filterImpl = /**
     * @param {?} data
     * @param {?} expressionsTree
     * @param {?} parent
     * @return {?}
     */
    function (data, expressionsTree, parent) {
        var /** @type {?} */ i;
        var /** @type {?} */ rec;
        var /** @type {?} */ len = data.length;
        var /** @type {?} */ res = [];
        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {
            return data;
        }
        for (i = 0; i < len; i++) {
            rec = DataUtil.cloneTreeGridRecord(data[i]);
            rec.parent = parent;
            if (rec.children) {
                var /** @type {?} */ filteredChildren = this.filterImpl(rec.children, expressionsTree, rec);
                rec.children = filteredChildren.length > 0 ? filteredChildren : null;
            }
            if (this.matchRecord(rec, expressionsTree)) {
                res.push(rec);
            }
            else if (rec.children && rec.children.length > 0) {
                rec.isFilteredOutParent = true;
                res.push(rec);
            }
        }
        return res;
    };
    /**
     * @param {?} rec
     * @param {?} fieldName
     * @return {?}
     */
    TreeGridFilteringStrategy.prototype.getFieldValue = /**
     * @param {?} rec
     * @param {?} fieldName
     * @return {?}
     */
    function (rec, fieldName) {
        var /** @type {?} */ hierarchicalRecord = /** @type {?} */ (rec);
        return hierarchicalRecord.data[fieldName];
    };
    return TreeGridFilteringStrategy;
}(BaseFilteringStrategy));
/**
 * @hidden
 */
export { TreeGridFilteringStrategy };
/**
 * @hidden
 */
var IgxTreeGridFilteringPipe = /** @class */ (function () {
    function IgxTreeGridFilteringPipe(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} hierarchyData
     * @param {?} expressionsTree
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxTreeGridFilteringPipe.prototype.transform = /**
     * @param {?} hierarchyData
     * @param {?} expressionsTree
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (hierarchyData, expressionsTree, id, pipeTrigger) {
        var /** @type {?} */ grid = this.gridAPI.get(id);
        var /** @type {?} */ state = { expressionsTree: expressionsTree };
        this.resetFilteredOutProperty(grid.records);
        if (!state.expressionsTree ||
            !state.expressionsTree.filteringOperands ||
            state.expressionsTree.filteringOperands.length === 0) {
            grid.filteredData = null;
            return hierarchyData;
        }
        DataUtil.mergeDefaultProperties(state, { strategy: new TreeGridFilteringStrategy() });
        var /** @type {?} */ result = this.filter(hierarchyData, state);
        var /** @type {?} */ filteredData = [];
        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);
        grid.filteredData = filteredData;
        return result;
    };
    /**
     * @param {?} map
     * @return {?}
     */
    IgxTreeGridFilteringPipe.prototype.resetFilteredOutProperty = /**
     * @param {?} map
     * @return {?}
     */
    function (map) {
        var /** @type {?} */ keys = Array.from(map.keys());
        for (var /** @type {?} */ i = 0; i < keys.length; i++) {
            map.get(keys[i]).isFilteredOutParent = undefined;
        }
    };
    /**
     * @param {?} grid
     * @param {?} data
     * @param {?} expandedStates
     * @param {?} filteredData
     * @return {?}
     */
    IgxTreeGridFilteringPipe.prototype.expandAllRecursive = /**
     * @param {?} grid
     * @param {?} data
     * @param {?} expandedStates
     * @param {?} filteredData
     * @return {?}
     */
    function (grid, data, expandedStates, filteredData) {
        for (var /** @type {?} */ i = 0; i < data.length; i++) {
            var /** @type {?} */ rec = data[i];
            filteredData.push(rec.data);
            this.updateNonProcessedRecord(grid, rec);
            if (rec.children && rec.children.length > 0) {
                expandedStates.set(rec.rowID, true);
                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);
            }
        }
    };
    /**
     * @param {?} grid
     * @param {?} record
     * @return {?}
     */
    IgxTreeGridFilteringPipe.prototype.updateNonProcessedRecord = /**
     * @param {?} grid
     * @param {?} record
     * @return {?}
     */
    function (grid, record) {
        var /** @type {?} */ rec = grid.records.get(record.rowID);
        rec.isFilteredOutParent = record.isFilteredOutParent;
    };
    /**
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    IgxTreeGridFilteringPipe.prototype.filter = /**
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    function (data, state) {
        return state.strategy.filter(data, state.expressionsTree);
    };
    IgxTreeGridFilteringPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'treeGridFiltering',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    IgxTreeGridFilteringPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
    ]; };
    return IgxTreeGridFilteringPipe;
}());
export { IgxTreeGridFilteringPipe };
function IgxTreeGridFilteringPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridFilteringPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridFilteringPipe.ctorParameters;
    /** @type {?} */
    IgxTreeGridFilteringPipe.prototype.gridAPI;
}

//# sourceMappingURL=data:application/json;base64,