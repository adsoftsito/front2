/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, Renderer2, ViewChild } from '@angular/core';
import { IgxListPanState } from './list.common';
import { HammerGesturesManager } from '../core/touch';
import { IgxListComponent } from './list.component';
var IgxListItemComponent = /** @class */ (function () {
    function IgxListItemComponent(list, elementRef, _renderer) {
        this.list = list;
        this.elementRef = elementRef;
        this._renderer = _renderer;
        /**
         * @hidden
         */
        this._panState = IgxListPanState.NONE;
        /**
         * @hidden
         */
        this.panOffset = 0;
        /**
         * Sets/gets whether the `list item` is hidden.
         * By default the `hidden` value is `false`.
         * ```html
         * <igx-list-item [hidden] = "true">Hidden Item</igx-list-item>
         * ```
         * ```typescript
         * let isHidden =  this.listItem.hidden;
         * ```
         * \@memberof IgxListItemComponent
         */
        this.hidden = false;
        /**
         * Gets the `touch-action` style of the `list item`.
         * ```typescript
         * let touchAction = this.listItem.touchAction;
         * ```
         */
        this.touchAction = 'pan-y';
    }
    Object.defineProperty(IgxListItemComponent.prototype, "role", {
        get: /**
         * Gets the `role` attribute of the `list item`.
         * ```typescript
         * let itemRole =  this.listItem.role;
         * ```
         * \@memberof IgxListItemComponent
         * @return {?}
         */
        function () {
            return this.isHeader ? 'separator' : 'listitem';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "headerStyle", {
        get: /**
         * Indicates whether `list item` should have header style.
         * ```typescript
         * let headerStyle =  this.listItem.headerStyle;
         * ```
         * \@memberof IgxListItemComponent
         * @return {?}
         */
        function () {
            return this.isHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "innerStyle", {
        get: /**
         * Applies the inner style of the `list item` if the item is not counted as header.
         * ```typescript
         * let innerStyle =  this.listItem.innerStyle;
         * ```
         * \@memberof IgxListItemComponent
         * @return {?}
         */
        function () {
            return !this.isHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "display", {
        get: /**
         * Returns string value which describes the display mode of the `list item`.
         * ```typescript
         * let isHidden = this.listItem.display;
         * ```
         * \@memberof IgxListItemComponent
         * @return {?}
         */
        function () {
            return this.hidden ? 'none' : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    IgxListItemComponent.prototype.clicked = /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        this.list.onItemClicked.emit({ item: this, event: evt });
    };
    /**
     * @hidden
     * @param {?} ev
     * @return {?}
     */
    IgxListItemComponent.prototype.panStart = /**
     * @hidden
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (this.isTrue(this.isHeader)) {
            return;
        }
        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {
            return;
        }
    };
    /**
     * @hidden
     * @param {?} ev
     * @return {?}
     */
    IgxListItemComponent.prototype.panMove = /**
     * @hidden
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (this.isTrue(this.isHeader)) {
            return;
        }
        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {
            return;
        }
        var /** @type {?} */ isPanningToLeft = ev.deltaX < 0;
        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {
            this.showLeftPanTemplate();
            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));
        }
        else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {
            this.showRightPanTemplate();
            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));
        }
    };
    /**
     * @hidden
     * @param {?} ev
     * @return {?}
     */
    IgxListItemComponent.prototype.panEnd = /**
     * @hidden
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (this.isTrue(this.isHeader)) {
            return;
        }
        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {
            return;
        }
        // the translation offset of the current list item content
        var /** @type {?} */ relativeOffset = this.panOffset;
        var /** @type {?} */ widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;
        if (relativeOffset === 0) {
            return; // no panning has occured
        }
        var /** @type {?} */ oldPanState = this._panState;
        if (Math.abs(relativeOffset) < widthTriggeringGrip) {
            this.setContentElementLeft(0);
            this._panState = IgxListPanState.NONE;
            this.hideLeftAndRightPanTemplates();
            return;
        }
        var /** @type {?} */ dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;
        var /** @type {?} */ args = { item: this, direction: dir, keepItem: false };
        if (dir === IgxListPanState.LEFT) {
            this.list.onLeftPan.emit(args);
        }
        else {
            this.list.onRightPan.emit(args);
        }
        if (args.keepItem === true) {
            this.setContentElementLeft(0);
            this._panState = IgxListPanState.NONE;
        }
        else {
            if (dir === IgxListPanState.LEFT) {
                this.setContentElementLeft(this.maxLeft);
                this._panState = IgxListPanState.LEFT;
            }
            else {
                this.setContentElementLeft(this.maxRight);
                this._panState = IgxListPanState.RIGHT;
            }
        }
        if (oldPanState !== this._panState) {
            var /** @type {?} */ args2 = { oldState: oldPanState, newState: this._panState, item: this };
            this.list.onPanStateChange.emit(args2);
        }
        this.hideLeftAndRightPanTemplates();
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxListItemComponent.prototype.showLeftPanTemplate = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxListItemComponent.prototype.showRightPanTemplate = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxListItemComponent.prototype.hideLeftAndRightPanTemplates = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');
        }, 500);
    };
    /**
     * @hidden
     * @param {?} leftVisibility
     * @param {?} rightVisibility
     * @return {?}
     */
    IgxListItemComponent.prototype.setLeftAndRightTemplatesVisibility = /**
     * @hidden
     * @param {?} leftVisibility
     * @param {?} rightVisibility
     * @return {?}
     */
    function (leftVisibility, rightVisibility) {
        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {
            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;
        }
        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {
            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;
        }
    };
    Object.defineProperty(IgxListItemComponent.prototype, "panState", {
        get: /**
         * Gets the `panState` of a `list item`.
         * ```typescript
         * let itemPanState =  this.listItem.panState;
         * ```
         * \@memberof IgxListItemComponent
         * @return {?}
         */
        function () {
            return this._panState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "index", {
        get: /**
         * Gets the `index` of a `list item`.
         * ```typescript
         * let itemIndex =  this.listItem.index;
         * ```
         * \@memberof IgxListItemComponent
         * @return {?}
         */
        function () {
            return this.list.children.toArray().indexOf(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "element", {
        get: /**
         * Returns an element reference to the list item.
         * ```typescript
         * let listItemElement =  this.listItem.element.
         * ```
         * \@memberof IgxListItemComponent
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "contentElement", {
        get: /**
         * Returns a reference container which contains the list item's content.
         * ```typescript
         * let listItemContainer =  this.listItem.contentElement.
         * ```
         * \@memberof IgxListItemComponent
         * @return {?}
         */
        function () {
            var /** @type {?} */ candidates = this.element.getElementsByClassName('igx-list__item-content');
            return (candidates && candidates.length > 0) ? candidates[0] : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "context", {
        get: /**
         * Returns the `context` object which represents the `template context` binding into the `list item container`
         * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.
         * ```typescript
         * let listItemComponent = this.listItem.context;
         * ```
         * @return {?}
         */
        function () {
            return {
                $implicit: this
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "width", {
        get: /**
         * Gets the width of a `list item`.
         * ```typescript
         * let itemWidth = this.listItem.width;
         * ```
         * \@memberof IgxListItemComponent
         * @return {?}
         */
        function () {
            if (this.element) {
                return this.element.offsetWidth;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "maxLeft", {
        get: /**
         * Gets the maximum left position of the `list item`.
         * ```typescript
         * let maxLeft = this.listItem.maxLeft;
         * ```
         * \@memberof IgxListItemComponent
         * @return {?}
         */
        function () {
            return -this.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListItemComponent.prototype, "maxRight", {
        get: /**
         * Gets the maximum right position of the `list item`.
         * ```typescript
         * let maxRight = this.listItem.maxRight;
         * ```
         * \@memberof IgxListItemComponent
         * @return {?}
         */
        function () {
            return this.width;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxListItemComponent.prototype.setContentElementLeft = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.panOffset = value;
        this.contentElement.style.transform = 'translateX(' + value + 'px)';
    };
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxListItemComponent.prototype.isTrue = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (typeof (value) === 'boolean') {
            return value;
        }
        else {
            return value === 'true';
        }
    };
    IgxListItemComponent.decorators = [
        { type: Component, args: [{
                    providers: [HammerGesturesManager],
                    selector: 'igx-list-item',
                    template: "   \n<div *ngIf=\"!isHeader && list.listItemLeftPanningTemplate != null\" #leftPanningTmpl class=\"igx-list__item-right\"\n    [style.width.px]=\"this.element.offsetWidth\" [style.height.px]=\"this.element.offsetHeight\">\n    <ng-container *ngTemplateOutlet=\"list.listItemLeftPanningTemplate.template; context: context\">\n    </ng-container>\n</div>\n\n<div *ngIf=\"!isHeader && list.listItemRightPanningTemplate != null\" #rightPanningTmpl class=\"igx-list__item-left\"\n    [style.width.px]=\"this.element.offsetWidth\" [style.height.px]=\"this.element.offsetHeight\">\n    <ng-container *ngTemplateOutlet=\"list.listItemRightPanningTemplate.template; context: context\">\n    </ng-container>\n</div>\n\n<ng-template #itemsContent>\n    <ng-content></ng-content>\n</ng-template>\n    \n<ng-container *ngIf=\"isHeader\">\n    <ng-container *ngTemplateOutlet=\"itemsContent\">\n    </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!isHeader\">\n    <div class=\"igx-list__item-content\">\n        <ng-container *ngTemplateOutlet=\"itemsContent\">\n        </ng-container>\n    </div>\n</ng-container>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    IgxListItemComponent.ctorParameters = function () { return [
        { type: IgxListComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return IgxListComponent; }),] },] },
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    IgxListItemComponent.propDecorators = {
        "leftPanningTemplateElement": [{ type: ViewChild, args: ['leftPanningTmpl',] },],
        "rightPanningTemplateElement": [{ type: ViewChild, args: ['rightPanningTmpl',] },],
        "isHeader": [{ type: Input },],
        "hidden": [{ type: Input },],
        "role": [{ type: HostBinding, args: ['attr.role',] },],
        "ariaLabel": [{ type: HostBinding, args: ['attr.aria-label',] },],
        "touchAction": [{ type: HostBinding, args: ['style.touch-action',] },],
        "headerStyle": [{ type: HostBinding, args: ['class.igx-list__header',] },],
        "innerStyle": [{ type: HostBinding, args: ['class.igx-list__item-base',] },],
        "display": [{ type: HostBinding, args: ['style.display',] },],
        "clicked": [{ type: HostListener, args: ['click', ['$event'],] },],
        "panStart": [{ type: HostListener, args: ['panstart', ['$event'],] },],
        "panMove": [{ type: HostListener, args: ['panmove', ['$event'],] },],
        "panEnd": [{ type: HostListener, args: ['panend', ['$event'],] },],
    };
    return IgxListItemComponent;
}());
export { IgxListItemComponent };
function IgxListItemComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxListItemComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxListItemComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxListItemComponent.propDecorators;
    /**
     * @hidden
     * @type {?}
     */
    IgxListItemComponent.prototype._panState;
    /**
     * @hidden
     * @type {?}
     */
    IgxListItemComponent.prototype.panOffset;
    /**
     * Provides a reference to the template's base element shown when left panning a list item.
     * ```typescript
     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;
     * ```
     * @type {?}
     */
    IgxListItemComponent.prototype.leftPanningTemplateElement;
    /**
     * Provides a reference to the template's base element shown when right panning a list item.
     * ```typescript
     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;
     * ```
     * @type {?}
     */
    IgxListItemComponent.prototype.rightPanningTemplateElement;
    /**
     * Sets/gets whether the `list item` is a header.
     * ```html
     * <igx-list-item [isHeader] = "true">Header</igx-list-item>
     * ```
     * ```typescript
     * let isHeader =  this.listItem.isHeader;
     * ```
     * \@memberof IgxListItemComponent
     * @type {?}
     */
    IgxListItemComponent.prototype.isHeader;
    /**
     * Sets/gets whether the `list item` is hidden.
     * By default the `hidden` value is `false`.
     * ```html
     * <igx-list-item [hidden] = "true">Hidden Item</igx-list-item>
     * ```
     * ```typescript
     * let isHidden =  this.listItem.hidden;
     * ```
     * \@memberof IgxListItemComponent
     * @type {?}
     */
    IgxListItemComponent.prototype.hidden;
    /**
     * Sets/gets the `aria-label` attribute of the `list item`.
     * ```typescript
     * this.listItem.ariaLabel = "Item1";
     * ```
     * ```typescript
     * let itemAriaLabel = this.listItem.ariaLabel;
     * ```
     * \@memberof IgxListItemComponent
     * @type {?}
     */
    IgxListItemComponent.prototype.ariaLabel;
    /**
     * Gets the `touch-action` style of the `list item`.
     * ```typescript
     * let touchAction = this.listItem.touchAction;
     * ```
     * @type {?}
     */
    IgxListItemComponent.prototype.touchAction;
    /** @type {?} */
    IgxListItemComponent.prototype.list;
    /** @type {?} */
    IgxListItemComponent.prototype.elementRef;
    /** @type {?} */
    IgxListItemComponent.prototype._renderer;
}

//# sourceMappingURL=data:application/json;base64,