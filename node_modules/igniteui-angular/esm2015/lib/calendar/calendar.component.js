/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { transition, trigger, useAnimation } from '@angular/animations';
import { Component, ContentChild, EventEmitter, forwardRef, HostBinding, HostListener, Input, Output, QueryList, ViewChildren } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';
import { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../animations/main';
import { Calendar, range } from './calendar';
import { IgxCalendarDateDirective, IgxCalendarHeaderTemplateDirective, IgxCalendarSubheaderTemplateDirective } from './calendar.directives';
import { DateRangeType } from '../core/dates/dateRange';
import { isDate } from 'util';
let /** @type {?} */ NEXT_ID = 0;
/** @enum {number} */
const CalendarView = {
    DEFAULT: 0,
    YEAR: 1,
    DECADE: 2,
};
export { CalendarView };
CalendarView[CalendarView.DEFAULT] = "DEFAULT";
CalendarView[CalendarView.YEAR] = "YEAR";
CalendarView[CalendarView.DECADE] = "DECADE";
/** @enum {string} */
const CalendarSelection = {
    SINGLE: 'single',
    MULTI: 'multi',
    RANGE: 'range',
};
export { CalendarSelection };
export class CalendarHammerConfig extends HammerGestureConfig {
    constructor() {
        super(...arguments);
        this.overrides = {
            pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }
        };
    }
}
function CalendarHammerConfig_tsickle_Closure_declarations() {
    /** @type {?} */
    CalendarHammerConfig.prototype.overrides;
}
/**
 * **Ignite UI for Angular Calendar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/calendar.html)
 *
 * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple
 * or range selection.
 *
 * Example:
 * ```html
 * <igx-calendar selection="range"></igx-calendar>
 * ```
 */
export class IgxCalendarComponent {
    /**
     * @hidden
     */
    constructor() {
        /**
         * Sets/gets the `id` of the calendar.
         * If not set, the `id` will have value `"igx-calendar-0"`.
         * ```html
         * <igx-calendar id = "my-first-calendar"></igx-calendar>
         * ```
         * ```typescript
         * let calendarId =  this.calendar.id;
         * ```
         * \@memberof IgxCalendarComponent
         */
        this.id = `igx-calendar-${NEXT_ID++}`;
        /**
         * Sets/gets whether the calendar header will be in vertical position.
         * Default value is `false`.
         * ```html
         * <igx-calendar [vertical] = "true"></igx-calendar>
         * ```
         * ```typescript
         * let isVertical = this.calendar.vertical;
         * ```
         */
        this.vertical = false;
        /**
         * Emits an event when a selection is made in the calendar.
         * Provides reference the `selectedDates` property in the `IgxCalendarComponent`.
         * ```html
         * <igx-calendar (onSelection) = "onSelection($event)"></igx-calendar>
         * ```
         * \@memberof IgxCalendarComponent
         */
        this.onSelection = new EventEmitter();
        /**
         * The default `tabindex` attribute for the component.
         *
         * @hidden
         */
        this.tabindex = 0;
        /**
         * The default aria role attribute for the component.
         *
         * @hidden
         */
        this.role = 'grid';
        /**
         * The default aria lebelled by attribute for the component.
         *
         * @hidden
         */
        this.ariaLabelledBy = 'calendar';
        /**
         * @hidden
         */
        this._activeView = CalendarView.DEFAULT;
        /**
         * @hidden
         */
        this._selection = CalendarSelection.SINGLE;
        /**
         * @hidden
         */
        this.rangeStarted = false;
        /**
         * @hidden
         */
        this._monthAction = '';
        /**
         * @hidden
         */
        this._locale = 'en';
        /**
         * @hidden
         */
        this._formatOptions = {
            day: 'numeric',
            month: 'short',
            weekday: 'short',
            year: 'numeric'
        };
        /**
         * @hidden
         */
        this._formatViews = {
            day: false,
            month: true,
            year: false
        };
        /**
         * @hidden
         */
        this._disabledDates = null;
        /**
         * @hidden
         */
        this._specialDates = null;
        /**
         * @hidden
         */
        this._onTouchedCallback = () => { };
        /**
         * @hidden
         */
        this._onChangeCallback = () => { };
        this.calendarModel = new Calendar();
    }
    /**
     * Gets the start day of the week.
     * Can return a numeric or an enum representation of the week day.
     * Defaults to `Sunday` / `0`.
     * ```typescript
     * let weekStart =  this.calendar.weekStart;
     * ```
     * \@memberof IgxCalendarComponent
     * @return {?}
     */
    get weekStart() {
        return this.calendarModel.firstWeekDay;
    }
    /**
     * Sets the start day of the week.
     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.
     * ```html
     * <igx-calendar [weekStart] = "1"></igx-calendar>
     * ```
     * \@memberof IgxCalendarComponent
     * @param {?} value
     * @return {?}
     */
    set weekStart(value) {
        this.calendarModel.firstWeekDay = value;
    }
    /**
     * Gets the `locale` of the calendar.
     * Default value is `"en"`.
     * ```typescript
     * let locale =  this.calendar.locale;
     * ```
     * \@memberof IgxCalendarComponent
     * @return {?}
     */
    get locale() {
        return this._locale;
    }
    /**
     * Sets the `locale` of the calendar.
     * Expects a valid BCP 47 language tag.
     * Default value is `"en"`.
     * ```html
     * <igx-calendar [locale] = "de"></igx-calendar>
     * ```
     * \@memberof IgxCalendarComponent
     * @param {?} value
     * @return {?}
     */
    set locale(value) {
        this._locale = value;
        this.initFormatters();
    }
    /**
     *
     * Gets the selection type of the calendar.
     * Default value is `"single"`.
     * Changing the type of selection in the calendar resets the currently
     * selected values if any.
     * ```typescript
     * let selectionType =  this.calendar.selection;
     * ```
     * \@memberof IgxCalendarComponent
     * @return {?}
     */
    get selection() {
        return this._selection;
    }
    /**
     * Sets the selection type of the calendar.
     * ```html
     * <igx-calendar [selection] = "'multi'"></igx-calendar>
     * ```
     * \@memberof IgxCalendarComponent
     * @param {?} value
     * @return {?}
     */
    set selection(value) {
        switch (value) {
            case 'single':
                this.selectedDates = null;
                break;
            case 'multi':
            case 'range':
                this.selectedDates = [];
                break;
            default:
                throw new Error('Invalid selection value');
        }
        this._onChangeCallback(this.selectedDates);
        this.rangeStarted = false;
        this._selection = value;
    }
    /**
     * Gets the date that is presented in the calendar.
     * By default it is the current date.
     * ```typescript
     * let date = this.calendar.viewDate;
     * ```
     * \@memberof IgxCalendarComponent
     * @return {?}
     */
    get viewDate() {
        return this._viewDate;
    }
    /**
     * Sets the date that will be presented in the default view when the calendar renders.
     * ```html
     * <igx-calendar viewDate = "15/06/2018"></igx-calendar>
     * ```
     * \@memberof IgxCalendarComponent
     * @param {?} value
     * @return {?}
     */
    set viewDate(value) {
        this._viewDate = this.getDateOnly(value);
    }
    /**
     * Gets the selected date(s) of the calendar.
     *
     * When the calendar selection is set to `single`, it returns
     * a single `Date` object.
     * Otherwise it is an array of `Date` objects.
     * ```typescript
     * let selectedDates =  this.calendar.value;
     * ```
     * \@memberof IgxCalendarComponent
     * @return {?}
     */
    get value() {
        return this.selectedDates;
    }
    /**
     * Sets the selected date(s) of the calendar.
     *
     * When the calendar selection is set to `single`, it accepts
     * a single `Date` object.
     * Otherwise it is an array of `Date` objects.
     * ```typescript
     *  this.calendar.value =  new Date(`2016-06-12`);
     * ```
     * \@memberof IgxCalendarComponent
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this.selectDate(value);
    }
    /**
     * Gets the date format options of the calendar.
     * ```typescript
     * let dateFormatOptions = this.calendar.formatOptions.
     * ```
     * @return {?}
     */
    get formatOptions() {
        return this._formatOptions;
    }
    /**
     * Sets the date format options of the calendar.
     * ```html
     * <igx-calendar> [formatOptions] = "{ day: '2-digit', month: 'short', weekday: 'long', year: 'numeric' }"</igx-calendar>
     * ```
     * \@memberof IgxCalendarComponent
     * @param {?} formatOptions
     * @return {?}
     */
    set formatOptions(formatOptions) {
        this._formatOptions = Object.assign(this._formatOptions, formatOptions);
        this.initFormatters();
    }
    /**
     * Gets whether the `day`, `month` and `year` should be rendered
     * according to the locale and formatOptions, if any.
     * ```typescript
     * let formatViews = this.calendar.formatViews;
     * ```
     * @return {?}
     */
    get formatViews() {
        return this._formatViews;
    }
    /**
     * Gets whether the `day`, `month` and `year` should be rendered
     * according to the locale and formatOptions, if any.
     * ```html
     * <igx-calendar [formatViews] = "{ day: true, month: false, year: true }"></igx-calendar>
     * ```
     * \@memberof IgxCalendarComponent
     * @param {?} formatViews
     * @return {?}
     */
    set formatViews(formatViews) {
        this._formatViews = Object.assign(this._formatViews, formatViews);
    }
    /**
     * Gets the disabled dates descriptors.
     * ```typescript
     * let disabledDates = this.calendar.disabledDates;
     * ```
     * @return {?}
     */
    get disabledDates() {
        return this._disabledDates;
    }
    /**
     * Sets the disabled dates' descriptors.
     * ```typescript
     * \@ViewChild("MyCalendar")
     * public calendar: IgCalendarComponent;
     * ngOnInit(){
     *    this.calendar.disabledDates = [
     *      new DateRangeDescriptor(DateRangeType.Between, [new Date("2020-1-1"), new Date("2020-1-15")]),
     *      new DateRangeDescriptor(DateRangeType.Weekends)];
     * }
     * ```
     * @param {?} value
     * @return {?}
     */
    set disabledDates(value) {
        this._disabledDates = value;
    }
    /**
     * Gets the special dates descriptors.
     * ```typescript
     * let specialDates = this.calendar.specialDates;
     * ```
     * @return {?}
     */
    get specialDates() {
        return this._specialDates;
    }
    /**
     * Sets the special dates' descriptors.
     * ```typescript
     * \@ViewChild("MyCalendar")
     * public calendar: IgCalendarComponent;
     * ngOnInit(){
     *    this.calendar.specialDates = [
     *      new DateRangeDescriptor(DateRangeType.Between, [new Date("2020-1-1"), new Date("2020-1-15")]),
     *      new DateRangeDescriptor(DateRangeType.Weekends)];
     * }
     * ```
     * @param {?} value
     * @return {?}
     */
    set specialDates(value) {
        this._specialDates = value;
    }
    /**
     * The default css class applied to the component.
     *
     * @hidden
     * @return {?}
     */
    get styleClass() {
        if (this.vertical) {
            return 'igx-calendar--vertical';
        }
        return 'igx-calendar';
    }
    /**
     * Returns an array of date objects which are then used to
     * properly render the month names.
     *
     * Used in the template of the component
     *
     * @hidden
     * @return {?}
     */
    get months() {
        let /** @type {?} */ start = new Date(this._viewDate.getFullYear(), 0, 1);
        const /** @type {?} */ result = [];
        for (let /** @type {?} */ i = 0; i < 12; i++) {
            result.push(start);
            start = this.calendarModel.timedelta(start, 'month', 1);
        }
        return result;
    }
    /**
     * Returns an array of date objects which are then used to properly
     * render the years.
     *
     * Used in the template of the component.
     *
     * @hidden
     * @return {?}
     */
    get decade() {
        const /** @type {?} */ result = [];
        const /** @type {?} */ start = this._viewDate.getFullYear() - 3;
        const /** @type {?} */ end = this._viewDate.getFullYear() + 4;
        for (const /** @type {?} */ year of range(start, end)) {
            result.push(new Date(year, this._viewDate.getMonth(), this._viewDate.getDate()));
        }
        return result;
    }
    /**
     * @return {?}
     */
    get isDefaultView() {
        return this._activeView === CalendarView.DEFAULT;
    }
    /**
     * @return {?}
     */
    get isYearView() {
        return this._activeView === CalendarView.YEAR;
    }
    /**
     * @return {?}
     */
    get isDecadeView() {
        return this._activeView === CalendarView.DECADE;
    }
    /**
     * Gets the current active view of the calendar.
     * ```typescript
     * let activeView =  this.calendar.activeView;
     * ```
     * @return {?}
     */
    get activeView() {
        return this._activeView;
    }
    /**
     * @hidden
     * @return {?}
     */
    get monthAction() {
        return this._monthAction;
    }
    /**
     * Gets the header template.
     * ```typescript
     * let headerTemplate =  this.calendar.headerTeamplate;
     * ```
     * \@memberof IgxCalendarComponent
     * @return {?}
     */
    get headerTemplate() {
        if (this.headerTemplateDirective) {
            return this.headerTemplateDirective.template;
        }
        return null;
    }
    /**
     * Sets the header template.
     * ```html
     * <igx-calendar headerTemplateDirective = "igxCalendarHeader"></igx-calendar>
     * ```
     * \@memberof IgxCalendarComponent
     * @param {?} directive
     * @return {?}
     */
    set headerTemplate(directive) {
        this.headerTemplateDirective = directive;
    }
    /**
     * Gets the subheader template.
     * ```typescript
     * let subheaderTemplate = this.calendar.subheaderTemplate;
     * ```
     * @return {?}
     */
    get subheaderTemplate() {
        if (this.subheaderTemplateDirective) {
            return this.subheaderTemplateDirective.template;
        }
        return null;
    }
    /**
     * Sets the subheader template.
     * ```html
     * <igx-calendar subheaderTemplate = "igxCalendarSubheader"></igx-calendar>
     * ```
     * \@memberof IgxCalendarComponent
     * @param {?} directive
     * @return {?}
     */
    set subheaderTemplate(directive) {
        this.subheaderTemplateDirective = directive;
    }
    /**
     * Gets the context for the template marked with the `igxCalendarHeader` directive.
     * ```typescript
     * let headerContext =  this.calendar.headerContext;
     * ```
     * @return {?}
     */
    get headerContext() {
        const /** @type {?} */ date = this.headerDate;
        return this.generateContext(date);
    }
    /**
     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`
     * or `igxCalendarSubHeaderYear` directive.
     * ```typescript
     * let context =  this.calendar.context;
     * ```
     * @return {?}
     */
    get context() {
        const /** @type {?} */ date = this._viewDate;
        return this.generateContext(date);
    }
    /**
     * @hidden
     * @return {?}
     */
    get headerDate() {
        return this.selectedDates ? this.selectedDates : new Date();
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        const /** @type {?} */ today = new Date();
        this.calendarModel.firstWeekDay = this.weekStart;
        this._viewDate = this._viewDate ? this._viewDate : today;
        this.initFormatters();
    }
    /**
     * Resets the formatters when locale or formatOptions are changed
     *
     * @hidden
     * @return {?}
     */
    initFormatters() {
        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });
        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });
        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });
        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });
        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.selectedDates = value;
    }
    /**
     * Returns the locale representation of the month in the month view if enabled,
     * otherwise returns the default `Date.getMonth()` value.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    formattedMonth(value) {
        if (this._formatViews.month) {
            return this.formatterMonth.format(value);
        }
        return `${value.getMonth()}`;
    }
    /**
     * Returns the locale representation of the date in the default view if enabled,
     * otherwise returns the default `Date.getDate()` value.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    formattedDate(value) {
        if (this._formatViews.day) {
            return this.formatterDay.format(value);
        }
        return `${value.getDate()}`;
    }
    /**
     * Returns the locale representation of the year in the year view if enabled,
     * otherwise returns the default `Date.getFullYear()` value.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    formattedYear(value) {
        if (this._formatViews.year) {
            return this.formatterYear.format(value);
        }
        return `${value.getFullYear()}`;
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    isCurrentMonth(value) {
        return this.viewDate.getMonth() === value.getMonth();
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    isCurrentYear(value) {
        return this.viewDate.getFullYear() === value.getFullYear();
    }
    /**
     * @hidden
     * @return {?}
     */
    previousMonth() {
        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'month', -1);
        this._monthAction = 'prev';
    }
    /**
     * @hidden
     * @return {?}
     */
    nextMonth() {
        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'month', 1);
        this._monthAction = 'next';
    }
    /**
     * @hidden
     * @return {?}
     */
    previousYear() {
        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'year', -1);
    }
    /**
     * @hidden
     * @return {?}
     */
    nextYear() {
        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'year', 1);
    }
    /**
     * @hidden
     * @return {?}
     */
    getFormattedDate() {
        const /** @type {?} */ date = this.headerDate;
        return {
            monthday: this.formatterMonthday.format(date),
            weekday: this.formatterWeekday.format(date),
        };
    }
    /**
     * @hidden
     * @param {?} instance
     * @return {?}
     */
    childClicked(instance) {
        if (instance.isPrevMonth) {
            this.previousMonth();
        }
        if (instance.isNextMonth) {
            this.nextMonth();
        }
        this.selectDateFromClient(instance.date);
        this.onSelection.emit(this.selectedDates);
    }
    /**
     * @param {?} event
     * @param {?} isLast
     * @return {?}
     */
    animationDone(event, isLast) {
        if (isLast) {
            const /** @type {?} */ date = this.dates.find((d) => d.selected);
            if (date) {
                setTimeout(() => date.nativeElement.focus(), parseInt(slideInRight.options.params["duration"], 10));
            }
        }
    }
    /**
     * Selects date(s) (based on the selection type).
     * ```typescript
     * this.calendar.selectDate(new Date(`2018-06-12`));
     * ```
     * @param {?} value
     * @return {?}
     */
    selectDate(value) {
        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {
            throw new Error('Date or array should be set for the selectDate method.');
        }
        switch (this.selection) {
            case 'single':
                this.selectSingle(/** @type {?} */ (value));
                break;
            case 'multi':
                this.selectMultiple(value);
                break;
            case 'range':
                this.selectRange(value);
                break;
        }
    }
    /**
     * Deselects date(s) (based on the selection type).
     * ```typescript
     * this.calendar.deselectDate(new Date(`2018-06-12`));
     * ````
     * @param {?=} value
     * @return {?}
     */
    deselectDate(value) {
        if (this.selectedDates === null || this.selectedDates === []) {
            return;
        }
        if (value === null || value === undefined) {
            this.selectedDates = this.selection === 'single' ? null : [];
            this._onChangeCallback(this.selectedDates);
            return;
        }
        switch (this.selection) {
            case 'single':
                this.deselectSingle(/** @type {?} */ (value));
                break;
            case 'multi':
                this.deselectMultiple(/** @type {?} */ (value));
                break;
            case 'range':
                this.deselectRange(/** @type {?} */ (value));
                break;
        }
    }
    /**
     * Checks whether a date is disabled.
     * ```typescript
     * this.calendar.isDateDisabled(new Date(`2018-06-12`));
     * ```
     * @hidden
     * @param {?} date
     * @return {?}
     */
    isDateDisabled(date) {
        if (this.disabledDates === null) {
            return false;
        }
        return this.isDateInRanges(date, this.disabledDates);
    }
    /**
     * Checks whether a date is special.
     * ```typescript
     * this.calendar.isDateSpecial(new Date(`2018-06-12`));
     * ```
     * @hidden
     * @param {?} date
     * @return {?}
     */
    isDateSpecial(date) {
        if (this.specialDates === null) {
            return false;
        }
        return this.isDateInRanges(date, this.specialDates);
    }
    /**
     * @hidden
     * @return {?}
     */
    generateWeekHeader() {
        const /** @type {?} */ dayNames = [];
        const /** @type {?} */ rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];
        for (const /** @type {?} */ day of rv) {
            dayNames.push(this.formatterWeekday.format(day.date));
        }
        return dayNames;
    }
    /**
     * @hidden
     * @return {?}
     */
    get getCalendarMonth() {
        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    changeYear(event) {
        this._viewDate = new Date(event.getFullYear(), this._viewDate.getMonth());
        this._activeView = CalendarView.DEFAULT;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    changeMonth(event) {
        this._viewDate = new Date(this._viewDate.getFullYear(), event.getMonth());
        this._activeView = CalendarView.DEFAULT;
    }
    /**
     * @hidden
     * @return {?}
     */
    activeViewYear() {
        this._activeView = CalendarView.YEAR;
    }
    /**
     * @hidden
     * @return {?}
     */
    activeViewDecade() {
        this._activeView = CalendarView.DECADE;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onScroll(event) {
        event.preventDefault();
        event.stopPropagation();
        const /** @type {?} */ delta = event.deltaY < 0 ? -1 : 1;
        this.generateYearRange(delta);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onPan(event) {
        const /** @type {?} */ delta = event.deltaY < 0 ? 1 : -1;
        this.generateYearRange(delta);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownPageUp(event) {
        event.preventDefault();
        this.previousMonth();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownPageDown(event) {
        event.preventDefault();
        this.nextMonth();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownShiftPageUp(event) {
        event.preventDefault();
        this.previousYear();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownShiftPageDown(event) {
        event.preventDefault();
        this.nextYear();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownArrowUp(event) {
        event.preventDefault();
        const /** @type {?} */ node = this.dates.find((date) => date.nativeElement === event.target);
        if (!node) {
            return;
        }
        const /** @type {?} */ dates = this.dates.toArray();
        for (let /** @type {?} */ index = dates.indexOf(node); index - 7 > -1; index -= 7) {
            const /** @type {?} */ date = dates[index - 7];
            if (!date.isDisabled) {
                date.nativeElement.focus();
                break;
            }
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownArrowDown(event) {
        event.preventDefault();
        const /** @type {?} */ node = this.dates.find((date) => date.nativeElement === event.target);
        if (!node) {
            return;
        }
        const /** @type {?} */ dates = this.dates.toArray();
        for (let /** @type {?} */ index = dates.indexOf(node); index + 7 < this.dates.length; index += 7) {
            const /** @type {?} */ date = dates[index + 7];
            if (!date.isDisabled) {
                date.nativeElement.focus();
                break;
            }
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownArrowLeft(event) {
        event.preventDefault();
        const /** @type {?} */ node = this.dates.find((date) => date.nativeElement === event.target);
        if (!node) {
            return;
        }
        const /** @type {?} */ dates = this.dates.toArray();
        for (let /** @type {?} */ index = dates.indexOf(node); index > 0; index--) {
            const /** @type {?} */ date = dates[index - 1];
            if (!date.isDisabled) {
                date.nativeElement.focus();
                break;
            }
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownArrowRight(event) {
        event.preventDefault();
        const /** @type {?} */ node = this.dates.find((date) => date.nativeElement === event.target);
        if (!node) {
            return;
        }
        const /** @type {?} */ dates = this.dates.toArray();
        for (let /** @type {?} */ index = dates.indexOf(node); index < this.dates.length - 1; index++) {
            const /** @type {?} */ date = dates[index + 1];
            if (!date.isDisabled) {
                date.nativeElement.focus();
                break;
            }
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownHome(event) {
        event.preventDefault();
        const /** @type {?} */ dates = this.dates.filter(d => d.isCurrentMonth);
        for (let /** @type {?} */ i = 0; i < dates.length; i++) {
            if (!dates[i].isDisabled) {
                dates[i].nativeElement.focus();
                break;
            }
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownEnd(event) {
        event.preventDefault();
        const /** @type {?} */ dates = this.dates.filter(d => d.isCurrentMonth);
        for (let /** @type {?} */ i = dates.length - 1; i >= 0; i--) {
            if (!dates[i].isDisabled) {
                dates[i].nativeElement.focus();
                break;
            }
        }
    }
    /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    dateTracker(index, item) {
        return `${item.date.getMonth()}--${item.date.getDate()}`;
    }
    /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    rowTracker(index, item) {
        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;
    }
    /**
     * Performs a single selection.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    selectSingle(value) {
        this.selectedDates = this.getDateOnly(value);
        this._onChangeCallback(this.selectedDates);
    }
    /**
     * Performs a multiple selection
     * @hidden
     * @param {?} value
     * @return {?}
     */
    selectMultiple(value) {
        if (Array.isArray(value)) {
            this.selectedDates = this.selectedDates.concat(value.map(v => this.getDateOnly(v)));
        }
        else {
            const /** @type {?} */ valueDateOnly = this.getDateOnly(value);
            if (this.selectedDates.every((date) => date.getTime() !== valueDateOnly.getTime())) {
                this.selectedDates.push(valueDateOnly);
            }
            else {
                this.selectedDates = this.selectedDates.filter((date) => date.getTime() !== valueDateOnly.getTime());
            }
        }
        this._onChangeCallback(this.selectedDates);
    }
    /**
     * @hidden
     * @param {?} value
     * @param {?=} excludeDisabledDates
     * @return {?}
     */
    selectRange(value, excludeDisabledDates = false) {
        let /** @type {?} */ start;
        let /** @type {?} */ end;
        if (Array.isArray(value)) {
            this.rangeStarted = false;
            value.sort((a, b) => a.valueOf() - b.valueOf());
            start = this.getDateOnly(value[0]);
            end = this.getDateOnly(value[value.length - 1]);
            this.selectedDates = [start, ...this.generateDateRange(start, end)];
        }
        else {
            if (!this.rangeStarted) {
                this.rangeStarted = true;
                this.selectedDates = [value];
            }
            else {
                this.rangeStarted = false;
                if (this.selectedDates[0].getTime() === value.getTime()) {
                    this.selectedDates = [];
                    this._onChangeCallback(this.selectedDates);
                    return;
                }
                this.selectedDates.push(value);
                this.selectedDates.sort((a, b) => a.valueOf() - b.valueOf());
                start = this.selectedDates.shift();
                end = this.selectedDates.pop();
                this.selectedDates = [start, ...this.generateDateRange(start, end)];
            }
        }
        if (excludeDisabledDates) {
            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));
        }
        this._onChangeCallback(this.selectedDates);
    }
    /**
     * Performs a single deselection.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    deselectSingle(value) {
        if (this.selectedDates !== null &&
            this.getDateOnlyInMs(/** @type {?} */ (value)) === this.getDateOnlyInMs(this.selectedDates)) {
            this.selectedDates = null;
            this._onChangeCallback(this.selectedDates);
        }
    }
    /**
     * Performs a multiple deselection.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    deselectMultiple(value) {
        value = value.filter(v => v !== null);
        const /** @type {?} */ selectedDatesCount = this.selectedDates.length;
        const /** @type {?} */ datesInMsToDeselect = new Set(value.map(v => this.getDateOnlyInMs(v)));
        for (let /** @type {?} */ i = this.selectedDates.length - 1; i >= 0; i--) {
            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {
                this.selectedDates.splice(i, 1);
            }
        }
        if (this.selectedDates.length !== selectedDatesCount) {
            this._onChangeCallback(this.selectedDates);
        }
    }
    /**
     * Performs a range deselection.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    deselectRange(value) {
        value = value.filter(v => v !== null && isDate(v));
        if (value.length < 1) {
            return;
        }
        value.sort((a, b) => a.valueOf() - b.valueOf());
        const /** @type {?} */ valueStart = this.getDateOnlyInMs(value[0]);
        const /** @type {?} */ valueEnd = this.getDateOnlyInMs(value[value.length - 1]);
        this.selectedDates.sort((a, b) => a.valueOf() - b.valueOf());
        const /** @type {?} */ selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);
        const /** @type {?} */ selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);
        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {
            this.selectedDates = [];
            this._onChangeCallback(this.selectedDates);
        }
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    selectDateFromClient(value) {
        switch (this.selection) {
            case 'single':
            case 'multi':
                if (!this.isDateDisabled(value)) {
                    this.selectDate(value);
                }
                break;
            case 'range':
                this.selectRange(value, true);
                break;
        }
    }
    /**
     * @hidden
     * @param {?} date
     * @param {?} ranges
     * @return {?}
     */
    isDateInRanges(date, ranges) {
        date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
        const /** @type {?} */ dateInMs = date.getTime();
        for (const /** @type {?} */ descriptor of ranges) {
            const /** @type {?} */ dRanges = descriptor.dateRange ? descriptor.dateRange.map(r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;
            switch (descriptor.type) {
                case (DateRangeType.After):
                    if (dateInMs > dRanges[0].getTime()) {
                        return true;
                    }
                    break;
                case (DateRangeType.Before):
                    if (dateInMs < dRanges[0].getTime()) {
                        return true;
                    }
                    break;
                case (DateRangeType.Between):
                    const /** @type {?} */ dRange = dRanges.map(d => d.getTime());
                    const /** @type {?} */ min = Math.min(dRange[0], dRange[1]);
                    const /** @type {?} */ max = Math.max(dRange[0], dRange[1]);
                    if (dateInMs >= min && dateInMs <= max) {
                        return true;
                    }
                    break;
                case (DateRangeType.Specific):
                    const /** @type {?} */ datesInMs = dRanges.map(d => d.getTime());
                    for (const /** @type {?} */ specificDateInMs of datesInMs) {
                        if (dateInMs === specificDateInMs) {
                            return true;
                        }
                    }
                    break;
                case (DateRangeType.Weekdays):
                    const /** @type {?} */ day = date.getDay();
                    if (day % 6 !== 0) {
                        return true;
                    }
                    break;
                case (DateRangeType.Weekends):
                    const /** @type {?} */ weekday = date.getDay();
                    if (weekday % 6 === 0) {
                        return true;
                    }
                    break;
                default:
                    return false;
            }
        }
        return false;
    }
    /**
     * Helper method building and returning the context object inside
     * the calendar templates.
     * @hidden
     * @param {?} value
     * @return {?}
     */
    generateContext(value) {
        const /** @type {?} */ formatObject = Object.assign({ monthView: () => this.activeViewYear(), yearView: () => this.activeViewDecade() }, this.calendarModel.formatToParts(value, this.locale, this._formatOptions, ['era', 'year', 'month', 'day', 'weekday']));
        return { $implicit: formatObject };
    }
    /**
     * @hidden
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    generateDateRange(start, end) {
        const /** @type {?} */ result = [];
        start = this.getDateOnly(start);
        end = this.getDateOnly(end);
        while (start.getTime() !== end.getTime()) {
            start = this.calendarModel.timedelta(start, 'day', 1);
            result.push(start);
        }
        return result;
    }
    /**
     * @hidden
     * @param {?} delta
     * @return {?}
     */
    generateYearRange(delta) {
        const /** @type {?} */ currentYear = new Date().getFullYear();
        if ((delta > 0 && this._viewDate.getFullYear() - currentYear >= 95) ||
            (delta < 0 && currentYear - this._viewDate.getFullYear() >= 95)) {
            return;
        }
        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'year', delta);
    }
    /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    getDateOnlyInMs(date) {
        return this.getDateOnly(date).getTime();
    }
    /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    getDateOnly(date) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    }
}
IgxCalendarComponent.decorators = [
    { type: Component, args: [{
                animations: [
                    trigger('animateView', [
                        transition('void => 0', useAnimation(fadeIn)),
                        transition('void => *', useAnimation(scaleInCenter, {
                            params: {
                                duration: '.2s',
                                fromScale: .9
                            }
                        }))
                    ]),
                    trigger('animateChange', [
                        transition('* => prev', useAnimation(slideInLeft, {
                            params: {
                                fromPosition: 'translateX(-30%)'
                            }
                        })),
                        transition('* => next', useAnimation(slideInRight, {
                            params: {
                                fromPosition: 'translateX(30%)'
                            }
                        }))
                    ])
                ],
                providers: [
                    {
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: IgxCalendarComponent
                    },
                    {
                        provide: HAMMER_GESTURE_CONFIG,
                        useClass: CalendarHammerConfig
                    }
                ],
                selector: 'igx-calendar',
                template: `<ng-template let-result #defaultHeader>
    <span class="date-text">{{ getFormattedDate().weekday }},&nbsp;</span>
    <span class="date-text">{{ getFormattedDate().monthday }}</span>
</ng-template>

<ng-template let-result #defaultMonth>
    <span (click)="activeViewYear()" class="date__el">
        {{ formattedMonth(viewDate) }}
    </span>
    <span (click)="activeViewDecade()" class="date__el">
        {{ formattedYear(viewDate) }}
    </span>
</ng-template>

<div *ngIf="selection === 'single'" class="igx-calendar__header">
    <h5 class="igx-calendar__header-year">{{ formattedYear(headerDate) }}</h5>
    <h2 class="igx-calendar__header-date">
        <ng-container *ngTemplateOutlet="headerTemplate ? headerTemplate : defaultHeader; context: headerContext">
        </ng-container>
    </h2>
</div>

<div *ngIf="isDefaultView" class="igx-calendar__body" [@animateView]="activeView" (swiperight)="previousMonth()" (swipeleft)="nextMonth()">
    <div class="igx-calendar__body-picker">
        <div class="prev" (click)="previousMonth()">
            <igx-icon fontSet="material">keyboard_arrow_left</igx-icon>
        </div>
        <div class="date">
            <ng-container *ngTemplateOutlet="subheaderTemplate ? subheaderTemplate : defaultMonth; context: context">
            </ng-container>
        </div>
        <div class="next" (click)="nextMonth()">
            <igx-icon fontSet="material">keyboard_arrow_right</igx-icon>
        </div>
    </div>

    <div class="igx-calendar__body-row">
        <span *ngFor="let dayName of generateWeekHeader()" class="igx-calendar__label">
            {{ dayName | titlecase }}
        </span>
    </div>

    <div *ngFor="let week of getCalendarMonth; last as isLast; index as i; trackBy: rowTracker" class="igx-calendar__body-row" [@animateChange]="monthAction"
        (@animateChange.done)="animationDone($event, isLast)">
        <span [igxCalendarDate]="day" (onDateSelection)="childClicked($event)" *ngFor="let day of week; trackBy: dateTracker">
            {{ formattedDate(day.date) }}
        </span>
    </div>
</div>

<div *ngIf="isYearView" class="igx-calendar__body" [@animateView]="activeView">
    <div class="igx-calendar__body-row--wrap">
        <div (onMonthSelection)="changeMonth($event)" [igxCalendarMonth]="month" [index]="i" *ngFor="let month of months; index as i;">
            {{ formattedMonth(month) | titlecase }}
        </div>
    </div>
</div>

<div *ngIf="isDecadeView" class="igx-calendar__body" [@animateView]="activeView">
    <div class="igx-calendar__body-column" (wheel)="onScroll($event)" (pan)="onPan($event)">
        <span (onYearSelection)="changeYear($event)" [igxCalendarYear]="year" *ngFor="let year of decade">
            {{ formattedYear(year) }}
        </span>
    </div>
</div>
`
            },] },
];
/** @nocollapse */
IgxCalendarComponent.ctorParameters = () => [];
IgxCalendarComponent.propDecorators = {
    "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
    "weekStart": [{ type: Input },],
    "locale": [{ type: Input },],
    "selection": [{ type: Input },],
    "viewDate": [{ type: Input },],
    "value": [{ type: Input },],
    "formatOptions": [{ type: Input },],
    "formatViews": [{ type: Input },],
    "vertical": [{ type: Input },],
    "onSelection": [{ type: Output },],
    "dates": [{ type: ViewChildren, args: [forwardRef(() => IgxCalendarDateDirective), { read: IgxCalendarDateDirective },] },],
    "tabindex": [{ type: HostBinding, args: ['attr.tabindex',] },],
    "role": [{ type: HostBinding, args: ['attr.role',] },],
    "ariaLabelledBy": [{ type: HostBinding, args: ['attr.aria-labelledby',] },],
    "styleClass": [{ type: HostBinding, args: ['class',] },],
    "headerTemplateDirective": [{ type: ContentChild, args: [forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective },] },],
    "subheaderTemplateDirective": [{ type: ContentChild, args: [forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective },] },],
    "onKeydownPageUp": [{ type: HostListener, args: ['keydown.pageup', ['$event'],] },],
    "onKeydownPageDown": [{ type: HostListener, args: ['keydown.pagedown', ['$event'],] },],
    "onKeydownShiftPageUp": [{ type: HostListener, args: ['keydown.shift.pageup', ['$event'],] },],
    "onKeydownShiftPageDown": [{ type: HostListener, args: ['keydown.shift.pagedown', ['$event'],] },],
    "onKeydownArrowUp": [{ type: HostListener, args: ['keydown.arrowup', ['$event'],] },],
    "onKeydownArrowDown": [{ type: HostListener, args: ['keydown.arrowdown', ['$event'],] },],
    "onKeydownArrowLeft": [{ type: HostListener, args: ['keydown.arrowleft', ['$event'],] },],
    "onKeydownArrowRight": [{ type: HostListener, args: ['keydown.arrowright', ['$event'],] },],
    "onKeydownHome": [{ type: HostListener, args: ['keydown.home', ['$event'],] },],
    "onKeydownEnd": [{ type: HostListener, args: ['keydown.end', ['$event'],] },],
};
function IgxCalendarComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxCalendarComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxCalendarComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxCalendarComponent.propDecorators;
    /**
     * Sets/gets the `id` of the calendar.
     * If not set, the `id` will have value `"igx-calendar-0"`.
     * ```html
     * <igx-calendar id = "my-first-calendar"></igx-calendar>
     * ```
     * ```typescript
     * let calendarId =  this.calendar.id;
     * ```
     * \@memberof IgxCalendarComponent
     * @type {?}
     */
    IgxCalendarComponent.prototype.id;
    /**
     * Sets/gets whether the calendar header will be in vertical position.
     * Default value is `false`.
     * ```html
     * <igx-calendar [vertical] = "true"></igx-calendar>
     * ```
     * ```typescript
     * let isVertical = this.calendar.vertical;
     * ```
     * @type {?}
     */
    IgxCalendarComponent.prototype.vertical;
    /**
     * Emits an event when a selection is made in the calendar.
     * Provides reference the `selectedDates` property in the `IgxCalendarComponent`.
     * ```html
     * <igx-calendar (onSelection) = "onSelection($event)"></igx-calendar>
     * ```
     * \@memberof IgxCalendarComponent
     * @type {?}
     */
    IgxCalendarComponent.prototype.onSelection;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.dates;
    /**
     * The default `tabindex` attribute for the component.
     *
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.tabindex;
    /**
     * The default aria role attribute for the component.
     *
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.role;
    /**
     * The default aria lebelled by attribute for the component.
     *
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.ariaLabelledBy;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.headerTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.subheaderTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._viewDate;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.calendarModel;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._activeView;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.selectedDates;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._selection;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.rangeStarted;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._monthAction;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._locale;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._formatOptions;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._formatViews;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._disabledDates;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.formatterMonth;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.formatterDay;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.formatterYear;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.formatterMonthday;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype.formatterWeekday;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._specialDates;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._onTouchedCallback;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarComponent.prototype._onChangeCallback;
}

//# sourceMappingURL=data:application/json;base64,