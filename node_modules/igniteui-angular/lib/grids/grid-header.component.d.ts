import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, NgZone, OnInit, QueryList, OnDestroy } from '@angular/core';
import { SortingDirection } from '../data-operations/sorting-expression.interface';
import { RestrictDrag } from '../directives/dragdrop/dragdrop.directive';
import { GridBaseAPIService } from './api.service';
import { IgxColumnComponent } from './column.component';
import { IgxColumnMovingService } from './grid.common';
import { IgxGridBaseComponent } from './grid-base.component';
import { IgxFilteringService } from './filtering/grid-filtering.service';
/**
 * @hidden
 */
export declare class IgxGridHeaderComponent implements OnInit, DoCheck, AfterViewInit, OnDestroy {
    gridAPI: GridBaseAPIService<IgxGridBaseComponent>;
    cdr: ChangeDetectorRef;
    elementRef: ElementRef;
    zone: NgZone;
    private cms;
    filteringService: IgxFilteringService;
    column: IgxColumnComponent;
    gridID: string;
    readonly styleClasses: string;
    readonly width: string;
    readonly height: number;
    readonly ascending: boolean;
    readonly descending: boolean;
    readonly sortingIcon: string;
    readonly sorted: boolean;
    readonly dragged: boolean;
    readonly zIndex: number;
    hostRole: string;
    tabindex: number;
    readonly headerID: string;
    resizeArea: ElementRef;
    children: QueryList<IgxGridHeaderComponent>;
    resizeCursor: any;
    showResizer: boolean;
    resizerHeight: any;
    dragDirection: RestrictDrag;
    resizeEndTimeout: number;
    protected sortDirection: SortingDirection;
    private _startResizePos;
    private _pinnedMaxWidth;
    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>, cdr: ChangeDetectorRef, elementRef: ElementRef, zone: NgZone, cms: IgxColumnMovingService, filteringService: IgxFilteringService);
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onClick(event: any): void;
    readonly restrictResizeMin: number;
    readonly restrictResizeMax: number;
    readonly grid: any;
    readonly isPinned: boolean;
    readonly isLastPinned: boolean;
    protected getSortDirection(): void;
    private onResizeAreaMouseOver();
    private onResizeAreaMouseDown(event);
    private onResizeAreaDblClick();
    onResize(event: any): void;
}
