/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { animate, animation, keyframes, style } from '@angular/animations';
var /** @type {?} */ heartbeatBase = [
    style({
        animationTimingFunction: "ease-out",
        transform: "scale(1)",
        transformOrigin: "center center"
    }),
    animate("{{duration}} {{delay}} {{easing}}", keyframes([
        style({
            animationTimingFunction: "ease-in",
            offset: 0.1,
            transform: "scale(0.91)"
        }),
        style({
            animationTimingFunction: "ease-out",
            offset: 0.17,
            transform: "scale(0.98)"
        }),
        style({
            animationTimingFunction: "ease-in",
            offset: 0.33,
            transform: "scale(0.87)"
        }),
        style({
            animationTimingFunction: "ease-out",
            offset: 0.45,
            transform: "scale(1)"
        })
    ]))
];
var /** @type {?} */ heartbeatParams = {
    delay: '0s',
    duration: '1.5s',
    easing: 'ease-in-out'
};
var /** @type {?} */ pulsateBase = [
    animate("{{duration}} {{delay}} {{easing}}", keyframes([
        style({
            offset: 0,
            transform: "scale({{fromScale}})"
        }),
        style({
            offset: 0.5,
            transform: "scale({{toScale}})"
        }),
        style({
            offset: 1,
            transform: "scale({{fromScale}})"
        })
    ]))
];
var /** @type {?} */ pulsateParams = {
    delay: '0s',
    duration: '.5s',
    easing: 'ease-in-out',
    fromScale: 1,
    toScale: 1.1
};
var /** @type {?} */ blinkBase = [
    animate("{{duration}} {{delay}} {{easing}}", keyframes([
        style({
            offset: 0,
            opacity: .8,
            transform: "scale({{fromScale}})"
        }),
        style({
            offset: 0.8,
            opacity: 0,
            transform: "scale({{midScale}})"
        }),
        style({
            offset: 1,
            opacity: 0,
            transform: "scale({{toScale}})"
        })
    ]))
];
var /** @type {?} */ blinkParams = {
    delay: '0s',
    duration: '.8s',
    easing: 'ease-in-out',
    fromScale: .2,
    midScale: 1.2,
    toScale: 2.2
};
var /** @type {?} */ pulsateFwd = animation(pulsateBase, {
    params: tslib_1.__assign({}, pulsateParams)
});
var /** @type {?} */ pulsateBck = animation(pulsateBase, {
    params: tslib_1.__assign({}, pulsateParams, { toScale: .9 })
});
var /** @type {?} */ heartbeat = animation(heartbeatBase, {
    params: tslib_1.__assign({}, heartbeatParams)
});
var /** @type {?} */ blink = animation(blinkBase, {
    params: tslib_1.__assign({}, blinkParams)
});
export { heartbeat, pulsateFwd, pulsateBck, blink };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVsc2F0ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvYW5pbWF0aW9ucy9taXNjL3B1bHNhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0gsT0FBTyxFQUNQLFNBQVMsRUFHVCxTQUFTLEVBQ1QsS0FBSyxFQUNSLE1BQU0scUJBQXFCLENBQUM7QUFHN0IscUJBQU0sYUFBYSxHQUF3QjtJQUN2QyxLQUFLLENBQUM7UUFDRix1QkFBdUIsRUFBRSxVQUFVO1FBQ25DLFNBQVMsRUFBRSxVQUFVO1FBQ3JCLGVBQWUsRUFBRSxlQUFlO0tBQ25DLENBQUM7SUFDRixPQUFPLENBQ0gsbUNBQW1DLEVBQ25DLFNBQVMsQ0FBQztRQUNOLEtBQUssQ0FBQztZQUNGLHVCQUF1QixFQUFFLFNBQVM7WUFDbEMsTUFBTSxFQUFFLEdBQUc7WUFDWCxTQUFTLEVBQUUsYUFBYTtTQUMzQixDQUFDO1FBQ0YsS0FBSyxDQUFDO1lBQ0YsdUJBQXVCLEVBQUUsVUFBVTtZQUNuQyxNQUFNLEVBQUUsSUFBSTtZQUNaLFNBQVMsRUFBRSxhQUFhO1NBQzNCLENBQUM7UUFDRixLQUFLLENBQUM7WUFDRix1QkFBdUIsRUFBRSxTQUFTO1lBQ2xDLE1BQU0sRUFBRSxJQUFJO1lBQ1osU0FBUyxFQUFFLGFBQWE7U0FDM0IsQ0FBQztRQUNGLEtBQUssQ0FBQztZQUNGLHVCQUF1QixFQUFFLFVBQVU7WUFDbkMsTUFBTSxFQUFFLElBQUk7WUFDWixTQUFTLEVBQUUsVUFBVTtTQUN4QixDQUFDO0tBQ0wsQ0FBQyxDQUNMO0NBQ0osQ0FBQztBQUVGLHFCQUFNLGVBQWUsR0FBcUI7SUFDdEMsS0FBSyxFQUFFLElBQUk7SUFDWCxRQUFRLEVBQUUsTUFBTTtJQUNoQixNQUFNLEVBQUUsYUFBYTtDQUN4QixDQUFDO0FBRUYscUJBQU0sV0FBVyxHQUF3QjtJQUNyQyxPQUFPLENBQ0gsbUNBQW1DLEVBQ25DLFNBQVMsQ0FBQztRQUNOLEtBQUssQ0FBQztZQUNGLE1BQU0sRUFBRSxDQUFDO1lBQ1QsU0FBUyxFQUFFLHNCQUFzQjtTQUNwQyxDQUFDO1FBQ0YsS0FBSyxDQUFDO1lBQ0YsTUFBTSxFQUFFLEdBQUc7WUFDWCxTQUFTLEVBQUUsb0JBQW9CO1NBQ2xDLENBQUM7UUFDRixLQUFLLENBQUM7WUFDRixNQUFNLEVBQUUsQ0FBQztZQUNULFNBQVMsRUFBRSxzQkFBc0I7U0FDcEMsQ0FBQztLQUNMLENBQUMsQ0FDTDtDQUNKLENBQUM7QUFFRixxQkFBTSxhQUFhLEdBQXFCO0lBQ3BDLEtBQUssRUFBRSxJQUFJO0lBQ1gsUUFBUSxFQUFFLEtBQUs7SUFDZixNQUFNLEVBQUUsYUFBYTtJQUNyQixTQUFTLEVBQUUsQ0FBQztJQUNaLE9BQU8sRUFBRSxHQUFHO0NBQ2YsQ0FBQztBQUVGLHFCQUFNLFNBQVMsR0FBd0I7SUFDbkMsT0FBTyxDQUNILG1DQUFtQyxFQUNuQyxTQUFTLENBQUM7UUFDTixLQUFLLENBQUM7WUFDRixNQUFNLEVBQUUsQ0FBQztZQUNULE9BQU8sRUFBRSxFQUFFO1lBQ1gsU0FBUyxFQUFFLHNCQUFzQjtTQUNwQyxDQUFDO1FBQ0YsS0FBSyxDQUFDO1lBQ0YsTUFBTSxFQUFFLEdBQUc7WUFDWCxPQUFPLEVBQUUsQ0FBQztZQUNWLFNBQVMsRUFBRSxxQkFBcUI7U0FDbkMsQ0FBQztRQUNGLEtBQUssQ0FBQztZQUNGLE1BQU0sRUFBRSxDQUFDO1lBQ1QsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUsb0JBQW9CO1NBQ2xDLENBQUM7S0FDTCxDQUFDLENBQ0w7Q0FDSixDQUFDO0FBRUYscUJBQU0sV0FBVyxHQUFxQjtJQUNsQyxLQUFLLEVBQUUsSUFBSTtJQUNYLFFBQVEsRUFBRSxLQUFLO0lBQ2YsTUFBTSxFQUFFLGFBQWE7SUFDckIsU0FBUyxFQUFFLEVBQUU7SUFDYixRQUFRLEVBQUUsR0FBRztJQUNiLE9BQU8sRUFBRSxHQUFHO0NBQ2YsQ0FBQztBQUVGLHFCQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFO0lBQ3RDLE1BQU0sdUJBQ0MsYUFBYSxDQUNuQjtDQUNKLENBQUMsQ0FBQztBQUVILHFCQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFO0lBQ3RDLE1BQU0sdUJBQ0MsYUFBYSxJQUNoQixPQUFPLEVBQUUsRUFBRSxHQUNkO0NBQ0osQ0FBQyxDQUFDO0FBRUgscUJBQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxhQUFhLEVBQUU7SUFDdkMsTUFBTSx1QkFDQyxlQUFlLENBQ3JCO0NBQ0osQ0FBQyxDQUFDO0FBRUgscUJBQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxTQUFTLEVBQUU7SUFDL0IsTUFBTSx1QkFDQyxXQUFXLENBQ2pCO0NBQ0osQ0FBQyxDQUFDO0FBRUgsT0FBTyxFQUNILFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxFQUNWLEtBQUssRUFDUixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBhbmltYXRlLFxuICAgIGFuaW1hdGlvbixcbiAgICBBbmltYXRpb25NZXRhZGF0YSxcbiAgICBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSxcbiAgICBrZXlmcmFtZXMsXG4gICAgc3R5bGVcbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBJQW5pbWF0aW9uUGFyYW1zIH0gZnJvbSAnLi4vbWFpbic7XG5cbmNvbnN0IGhlYXJ0YmVhdEJhc2U6IEFuaW1hdGlvbk1ldGFkYXRhW10gPSBbXG4gICAgc3R5bGUoe1xuICAgICAgICBhbmltYXRpb25UaW1pbmdGdW5jdGlvbjogYGVhc2Utb3V0YCxcbiAgICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoMSlgLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46IGBjZW50ZXIgY2VudGVyYFxuICAgIH0pLFxuICAgIGFuaW1hdGUoXG4gICAgICAgIGB7e2R1cmF0aW9ufX0ge3tkZWxheX19IHt7ZWFzaW5nfX1gLFxuICAgICAgICBrZXlmcmFtZXMoW1xuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiBgZWFzZS1pbmAsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwLjEsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoMC45MSlgXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25UaW1pbmdGdW5jdGlvbjogYGVhc2Utb3V0YCxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAuMTcsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoMC45OClgXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25UaW1pbmdGdW5jdGlvbjogYGVhc2UtaW5gLFxuICAgICAgICAgICAgICAgIG9mZnNldDogMC4zMyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgwLjg3KWBcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiBgZWFzZS1vdXRgLFxuICAgICAgICAgICAgICAgIG9mZnNldDogMC40NSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgxKWBcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgKVxuXTtcblxuY29uc3QgaGVhcnRiZWF0UGFyYW1zOiBJQW5pbWF0aW9uUGFyYW1zID0ge1xuICAgIGRlbGF5OiAnMHMnLFxuICAgIGR1cmF0aW9uOiAnMS41cycsXG4gICAgZWFzaW5nOiAnZWFzZS1pbi1vdXQnXG59O1xuXG5jb25zdCBwdWxzYXRlQmFzZTogQW5pbWF0aW9uTWV0YWRhdGFbXSA9IFtcbiAgICBhbmltYXRlKFxuICAgICAgICBge3tkdXJhdGlvbn19IHt7ZGVsYXl9fSB7e2Vhc2luZ319YCxcbiAgICAgICAga2V5ZnJhbWVzKFtcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoe3tmcm9tU2NhbGV9fSlgXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAuNSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSh7e3RvU2NhbGV9fSlgXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoe3tmcm9tU2NhbGV9fSlgXG4gICAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgIClcbl07XG5cbmNvbnN0IHB1bHNhdGVQYXJhbXM6IElBbmltYXRpb25QYXJhbXMgPSB7XG4gICAgZGVsYXk6ICcwcycsXG4gICAgZHVyYXRpb246ICcuNXMnLFxuICAgIGVhc2luZzogJ2Vhc2UtaW4tb3V0JyxcbiAgICBmcm9tU2NhbGU6IDEsXG4gICAgdG9TY2FsZTogMS4xXG59O1xuXG5jb25zdCBibGlua0Jhc2U6IEFuaW1hdGlvbk1ldGFkYXRhW10gPSBbXG4gICAgYW5pbWF0ZShcbiAgICAgICAgYHt7ZHVyYXRpb259fSB7e2RlbGF5fX0ge3tlYXNpbmd9fWAsXG4gICAgICAgIGtleWZyYW1lcyhbXG4gICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IC44LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlKHt7ZnJvbVNjYWxlfX0pYFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwLjgsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSh7e21pZFNjYWxlfX0pYFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoe3t0b1NjYWxlfX0pYFxuICAgICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICApXG5dO1xuXG5jb25zdCBibGlua1BhcmFtczogSUFuaW1hdGlvblBhcmFtcyA9IHtcbiAgICBkZWxheTogJzBzJyxcbiAgICBkdXJhdGlvbjogJy44cycsXG4gICAgZWFzaW5nOiAnZWFzZS1pbi1vdXQnLFxuICAgIGZyb21TY2FsZTogLjIsXG4gICAgbWlkU2NhbGU6IDEuMixcbiAgICB0b1NjYWxlOiAyLjJcbn07XG5cbmNvbnN0IHB1bHNhdGVGd2QgPSBhbmltYXRpb24ocHVsc2F0ZUJhc2UsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4ucHVsc2F0ZVBhcmFtc1xuICAgIH1cbn0pO1xuXG5jb25zdCBwdWxzYXRlQmNrID0gYW5pbWF0aW9uKHB1bHNhdGVCYXNlLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLnB1bHNhdGVQYXJhbXMsXG4gICAgICAgIHRvU2NhbGU6IC45XG4gICAgfVxufSk7XG5cbmNvbnN0IGhlYXJ0YmVhdCA9IGFuaW1hdGlvbihoZWFydGJlYXRCYXNlLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmhlYXJ0YmVhdFBhcmFtc1xuICAgIH1cbn0pO1xuXG5jb25zdCBibGluayA9IGFuaW1hdGlvbihibGlua0Jhc2UsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uYmxpbmtQYXJhbXNcbiAgICB9XG59KTtcblxuZXhwb3J0IHtcbiAgICBoZWFydGJlYXQsXG4gICAgcHVsc2F0ZUZ3ZCxcbiAgICBwdWxzYXRlQmNrLFxuICAgIGJsaW5rXG59O1xuIl19