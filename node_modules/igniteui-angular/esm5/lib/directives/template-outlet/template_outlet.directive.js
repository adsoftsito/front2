/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, ChangeDetectorRef, TemplateRef, ViewContainerRef, NgModule, NgZone } from '@angular/core';
import { CommonModule } from '@angular/common';
/**
 * @hidden
 */
var IgxTemplateOutletDirective = /** @class */ (function () {
    function IgxTemplateOutletDirective(_viewContainerRef, _zone, cdr) {
        this._viewContainerRef = _viewContainerRef;
        this._zone = _zone;
        this.cdr = cdr;
        /**
         * The embedded views cache. Collection is key-value paired.
         * Key is the template id, value is the embedded view for the related template.
         */
        this._embeddedViewsMap = new Map();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    IgxTemplateOutletDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var /** @type {?} */ recreateView = this._shouldRecreateView(changes);
        if (recreateView) {
            // view should be re-created due to changes in the template or context.
            // check if we have existing view with the new template stored in the cache.
            var /** @type {?} */ tmplID = this.igxTemplateOutletContext['templateID'];
            var /** @type {?} */ cachedView = tmplID ?
                this._embeddedViewsMap.get(tmplID) :
                null;
            if (!this._viewRef || !cachedView) {
                // if view does not exist yet
                // or if there is no template defined in the template outlet context
                // or if there's no such view in the cache - then re-create view.
                this._recreateView();
            }
            else {
                // if view exists, but template has been changed and there is a view in the cache with the related template
                // then detach old view and insert the stored one with the matching template
                // after that update its context.
                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));
                this._viewRef = cachedView;
                this._viewContainerRef.insert(this._viewRef, 0);
                this._updateExistingContext(this.igxTemplateOutletContext);
            }
        }
        else {
            // view should not be re-created. Check if it exists and if context exists and just update it.
            if (this._viewRef && this.igxTemplateOutletContext) {
                this._updateExistingContext(this.igxTemplateOutletContext);
            }
        }
    };
    /**
     * @return {?}
     */
    IgxTemplateOutletDirective.prototype._recreateView = /**
     * @return {?}
     */
    function () {
        // remove and recreate
        if (this._viewRef) {
            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
        }
        if (this.igxTemplateOutlet) {
            this._viewRef = this._viewContainerRef.createEmbeddedView(this.igxTemplateOutlet, this.igxTemplateOutletContext);
            var /** @type {?} */ tmplId = this.igxTemplateOutletContext['templateID'];
            if (tmplId) {
                // if context contains a template id, check if we have a view for that template already stored in the cache
                // if not create a copy and add it to the cache in detached state.
                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.
                var /** @type {?} */ res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);
                if (!res) {
                    var /** @type {?} */ emptyView = this._viewContainerRef.createEmbeddedView(this.igxTemplateOutlet, {});
                    emptyView = /** @type {?} */ (this._viewContainerRef.detach(this._viewContainerRef.indexOf(emptyView)));
                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], emptyView);
                }
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgxTemplateOutletDirective.prototype._shouldRecreateView = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var /** @type {?} */ ctxChange = changes['igxTemplateOutletContext'];
        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));
    };
    /**
     * @param {?} ctxChange
     * @return {?}
     */
    IgxTemplateOutletDirective.prototype._hasContextShapeChanged = /**
     * @param {?} ctxChange
     * @return {?}
     */
    function (ctxChange) {
        var /** @type {?} */ prevCtxKeys = Object.keys(ctxChange.previousValue || {});
        var /** @type {?} */ currCtxKeys = Object.keys(ctxChange.currentValue || {});
        if (prevCtxKeys.length === currCtxKeys.length) {
            try {
                for (var currCtxKeys_1 = tslib_1.__values(currCtxKeys), currCtxKeys_1_1 = currCtxKeys_1.next(); !currCtxKeys_1_1.done; currCtxKeys_1_1 = currCtxKeys_1.next()) {
                    var propName = currCtxKeys_1_1.value;
                    if (prevCtxKeys.indexOf(propName) === -1) {
                        return true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (currCtxKeys_1_1 && !currCtxKeys_1_1.done && (_a = currCtxKeys_1.return)) _a.call(currCtxKeys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return false;
        }
        else {
            return true;
        }
        var e_1, _a;
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    IgxTemplateOutletDirective.prototype._updateExistingContext = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        try {
            for (var _a = tslib_1.__values(Object.keys(ctx)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var propName = _b.value;
                (/** @type {?} */ (this._viewRef.context))[propName] = (/** @type {?} */ (this.igxTemplateOutletContext))[propName];
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var e_2, _c;
    };
    IgxTemplateOutletDirective.decorators = [
        { type: Directive, args: [{ selector: '[igxTemplateOutlet]' },] },
    ];
    /** @nocollapse */
    IgxTemplateOutletDirective.ctorParameters = function () { return [
        { type: ViewContainerRef, },
        { type: NgZone, },
        { type: ChangeDetectorRef, },
    ]; };
    IgxTemplateOutletDirective.propDecorators = {
        "igxTemplateOutletContext": [{ type: Input },],
        "igxTemplateOutlet": [{ type: Input },],
    };
    return IgxTemplateOutletDirective;
}());
export { IgxTemplateOutletDirective };
function IgxTemplateOutletDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTemplateOutletDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTemplateOutletDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxTemplateOutletDirective.propDecorators;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype._viewRef;
    /**
     * The embedded views cache. Collection is key-value paired.
     * Key is the template id, value is the embedded view for the related template.
     * @type {?}
     */
    IgxTemplateOutletDirective.prototype._embeddedViewsMap;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype.igxTemplateOutletContext;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype.igxTemplateOutlet;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype._viewContainerRef;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype._zone;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype.cdr;
}
/**
 * @hidden
 */
var IgxTemplateOutletModule = /** @class */ (function () {
    function IgxTemplateOutletModule() {
    }
    IgxTemplateOutletModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxTemplateOutletDirective],
                    entryComponents: [],
                    exports: [IgxTemplateOutletDirective],
                    imports: [CommonModule]
                },] },
    ];
    return IgxTemplateOutletModule;
}());
export { IgxTemplateOutletModule };
function IgxTemplateOutletModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTemplateOutletModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTemplateOutletModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,