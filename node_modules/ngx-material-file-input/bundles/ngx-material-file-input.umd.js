(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/material'), require('@angular/cdk/a11y'), require('@angular/cdk/coercion'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('ngx-material-file-input', ['exports', '@angular/core', '@angular/forms', '@angular/material', '@angular/cdk/a11y', '@angular/cdk/coercion', 'rxjs'], factory) :
    (factory((global['ngx-material-file-input'] = {}),global.ng.core,global.ng.forms,global.ng.material,global.ng.cdk.a11y,global.ng.cdk.coercion,global.rxjs));
}(this, (function (exports,core,forms,material,a11y,coercion,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Optional token to provide custom configuration to the module
     */
    var /** @type {?} */ NGX_MAT_FILE_INPUT_CONFIG = new core.InjectionToken('ngx-mat-file-input.config');
    /**
     * Provide additional configuration to dynamically customize the module injection
     */
    var /**
     * Provide additional configuration to dynamically customize the module injection
     */ FileInputConfig = /** @class */ (function () {
        function FileInputConfig() {
        }
        return FileInputConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * The files to be uploaded
     */
    var /**
     * The files to be uploaded
     */ FileInput = /** @class */ (function () {
        function FileInput(_files, delimiter) {
            if (delimiter === void 0) {
                delimiter = ', ';
            }
            this._files = _files;
            this.delimiter = delimiter;
            this._fileNames = (this._files || []).map(function (f) { return f.name; }).join(delimiter);
        }
        Object.defineProperty(FileInput.prototype, "files", {
            get: /**
             * @return {?}
             */ function () {
                return this._files || [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInput.prototype, "fileNames", {
            get: /**
             * @return {?}
             */ function () {
                return this._fileNames;
            },
            enumerable: true,
            configurable: true
        });
        return FileInput;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FileInputComponent = /** @class */ (function () {
        /**
         * @see https://angular.io/api/forms/ControlValueAccessor
         */
        function FileInputComponent(ngControl, fm, _elementRef, _renderer) {
            var _this = this;
            this.ngControl = ngControl;
            this.fm = fm;
            this._elementRef = _elementRef;
            this._renderer = _renderer;
            this.stateChanges = new rxjs.Subject();
            this.focused = false;
            this.controlType = 'file-input';
            this.autofilled = false;
            this._required = false;
            this.accept = null;
            this.id = "ngx-mat-file-input-" + FileInputComponent.nextId++;
            this.describedBy = '';
            this._onChange = function (_) { };
            this._onTouched = function () { };
            if (this.ngControl != null) {
                this.ngControl.valueAccessor = this;
            }
            fm.monitor(_elementRef.nativeElement, true).subscribe(function (origin) {
                _this.focused = !!origin;
                _this.stateChanges.next();
            });
        }
        /**
         * @param {?} ids
         * @return {?}
         */
        FileInputComponent.prototype.setDescribedByIds = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                this.describedBy = ids.join(' ');
            };
        Object.defineProperty(FileInputComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this.empty ? null : new FileInput(this._elementRef.nativeElement.value || []);
            },
            set: /**
             * @param {?} fileInput
             * @return {?}
             */ function (fileInput) {
                if (fileInput) {
                    this.writeValue(fileInput.files);
                    this.stateChanges.next();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInputComponent.prototype, "placeholder", {
            get: /**
             * @return {?}
             */ function () {
                return this._placeholder;
            },
            set: /**
             * @param {?} plh
             * @return {?}
             */ function (plh) {
                this._placeholder = plh;
                this.stateChanges.next();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInputComponent.prototype, "empty", {
            get: /**
             * @return {?}
             */ function () {
                return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInputComponent.prototype, "shouldLabelFloat", {
            get: /**
             * @return {?}
             */ function () {
                return this.focused || !this.empty || this.valuePlaceholder !== undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInputComponent.prototype, "required", {
            get: /**
             * @return {?}
             */ function () {
                return this._required;
            },
            set: /**
             * @param {?} req
             * @return {?}
             */ function (req) {
                this._required = coercion.coerceBooleanProperty(req);
                this.stateChanges.next();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInputComponent.prototype, "isDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return this.disabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInputComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._elementRef.nativeElement.disabled;
            },
            set: /**
             * @param {?} dis
             * @return {?}
             */ function (dis) {
                this.setDisabledState(coercion.coerceBooleanProperty(dis));
                this.stateChanges.next();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInputComponent.prototype, "errorState", {
            get: /**
             * @return {?}
             */ function () {
                return this.ngControl.errors !== null && this.ngControl.touched;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        FileInputComponent.prototype.onContainerClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (( /** @type {?} */(event.target)).tagName.toLowerCase() !== 'input' && !this.disabled) {
                    this._elementRef.nativeElement.querySelector('input').focus();
                    this.focused = true;
                    this.open();
                }
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        FileInputComponent.prototype.writeValue = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        FileInputComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        FileInputComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this._onTouched = fn;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FileInputComponent.prototype.change = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var /** @type {?} */ fileList = event.target.files;
                var /** @type {?} */ fileArray = [];
                if (fileList) {
                    for (var /** @type {?} */ i = 0; i < fileList.length; i++) {
                        fileArray.push(fileList[i]);
                    }
                }
                this.value = new FileInput(fileArray);
                this._onChange(this.value);
            };
        /**
         * @return {?}
         */
        FileInputComponent.prototype.blur = /**
         * @return {?}
         */
            function () {
                this.focused = false;
                this._onTouched();
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        FileInputComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
            };
        /**
         * @return {?}
         */
        FileInputComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.multiple = coercion.coerceBooleanProperty(this.multiple);
            };
        /**
         * @return {?}
         */
        FileInputComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                if (!this.disabled) {
                    this._elementRef.nativeElement.querySelector('input').click();
                }
            };
        Object.defineProperty(FileInputComponent.prototype, "fileNames", {
            get: /**
             * @return {?}
             */ function () {
                return this.value ? this.value.fileNames : this.valuePlaceholder;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FileInputComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.stateChanges.complete();
                this.fm.stopMonitoring(this._elementRef.nativeElement);
            };
        FileInputComponent.nextId = 0;
        FileInputComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'ngx-mat-file-input',
                        template: "<input #input type=\"file\" [attr.multiple]=\"multiple? '' : null\" [attr.accept]=\"accept\">\n<span class=\"filename\">{{ fileNames }}</span>\n",
                        styles: [":host{display:inline-block}:host:not(.file-input-disabled){cursor:pointer}input{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename{display:inline-block}"],
                        providers: [{ provide: material.MatFormFieldControl, useExisting: FileInputComponent }]
                    },] },
        ];
        /** @nocollapse */
        FileInputComponent.ctorParameters = function () {
            return [
                { type: forms.NgControl, decorators: [{ type: core.Optional }, { type: core.Self }] },
                { type: a11y.FocusMonitor },
                { type: core.ElementRef },
                { type: core.Renderer2 }
            ];
        };
        FileInputComponent.propDecorators = {
            autofilled: [{ type: core.Input }],
            valuePlaceholder: [{ type: core.Input }],
            multiple: [{ type: core.Input }],
            accept: [{ type: core.Input }],
            id: [{ type: core.HostBinding }],
            describedBy: [{ type: core.HostBinding, args: ['attr.aria-describedby',] }],
            value: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            shouldLabelFloat: [{ type: core.HostBinding, args: ['class.mat-form-field-should-float',] }],
            required: [{ type: core.Input }],
            isDisabled: [{ type: core.HostBinding, args: ['class.file-input-disabled',] }],
            disabled: [{ type: core.Input }],
            errorState: [{ type: core.Input }],
            change: [{ type: core.HostListener, args: ['change', ['$event'],] }],
            blur: [{ type: core.HostListener, args: ['focusout',] }]
        };
        return FileInputComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ByteFormatPipe = /** @class */ (function () {
        function ByteFormatPipe(config) {
            this.config = config;
            this.unit = config ? config.sizeUnit : 'Byte';
        }
        /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
        ByteFormatPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
            function (value, args) {
                if (parseInt(value, 10) >= 0) {
                    value = this.formatBytes(+value, +args);
                }
                return value;
            };
        /**
         * @param {?} bytes
         * @param {?=} decimals
         * @return {?}
         */
        ByteFormatPipe.prototype.formatBytes = /**
         * @param {?} bytes
         * @param {?=} decimals
         * @return {?}
         */
            function (bytes, decimals) {
                if (bytes === 0) {
                    return '0 ' + this.unit;
                }
                var /** @type {?} */ B = this.unit.charAt(0);
                var /** @type {?} */ k = 1024;
                var /** @type {?} */ dm = decimals || 2;
                var /** @type {?} */ sizes = [this.unit, 'K' + B, 'M' + B, 'G' + B, 'T' + B, 'P' + B, 'E' + B, 'Z' + B, 'Y' + B];
                var /** @type {?} */ i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
            };
        ByteFormatPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'byteFormat'
                    },] },
        ];
        /** @nocollapse */
        ByteFormatPipe.ctorParameters = function () {
            return [
                { type: FileInputConfig, decorators: [{ type: core.Optional }, { type: core.Inject, args: [NGX_MAT_FILE_INPUT_CONFIG,] }] }
            ];
        };
        return ByteFormatPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MaterialFileInputModule = /** @class */ (function () {
        function MaterialFileInputModule() {
        }
        MaterialFileInputModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [FileInputComponent, ByteFormatPipe],
                        providers: [a11y.FocusMonitor],
                        exports: [FileInputComponent, ByteFormatPipe]
                    },] },
        ];
        return MaterialFileInputModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    (function (FileValidator) {
        /**
         * Function to control content of files
         *
         * @param {?} bytes max number of bytes allowed
         *
         * @return {?}
         */
        function maxContentSize(bytes) {
            return function (control) {
                var /** @type {?} */ size = control && control.value ? ( /** @type {?} */(control.value)).files.map(function (f) { return f.size; }).reduce(function (acc, i) { return acc + i; }, 0) : 0;
                var /** @type {?} */ condition = bytes >= size;
                return condition
                    ? null
                    : {
                        maxContentSize: {
                            actualSize: size,
                            maxSize: bytes
                        }
                    };
            };
        }
        FileValidator.maxContentSize = maxContentSize;
    })(exports.FileValidator || (exports.FileValidator = {}));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NGX_MAT_FILE_INPUT_CONFIG = NGX_MAT_FILE_INPUT_CONFIG;
    exports.MaterialFileInputModule = MaterialFileInputModule;
    exports.ByteFormatPipe = ByteFormatPipe;
    exports.FileInput = FileInput;
    exports.ɵb = FileInputComponent;
    exports.ɵa = FileInputConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,