/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { EventEmitter, Injectable } from '@angular/core';
import { isObject, mergeObjects, cloneValue } from '../../core/utils';
// unsupported: template constraints.
// unsupported: template constraints.
/**
 * @template T, S
 */
var IgxBaseTransactionService = /** @class */ (function () {
    function IgxBaseTransactionService() {
        this._isPending = false;
        this._pendingTransactions = [];
        this._pendingStates = new Map();
        this.onStateUpdate = new EventEmitter();
    }
    Object.defineProperty(IgxBaseTransactionService.prototype, "canRedo", {
        get: /**
         * @return {?}
         */
        function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBaseTransactionService.prototype, "canUndo", {
        get: /**
         * @return {?}
         */
        function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxBaseTransactionService.prototype, "enabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isPending;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} transaction
     * @param {?=} recordRef
     * @return {?}
     */
    IgxBaseTransactionService.prototype.add = /**
     * @param {?} transaction
     * @param {?=} recordRef
     * @return {?}
     */
    function (transaction, recordRef) {
        if (this._isPending) {
            this.updateState(this._pendingStates, transaction, recordRef);
            this._pendingTransactions.push(transaction);
        }
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    IgxBaseTransactionService.prototype.getTransactionLog = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) { return []; };
    /**
     * @return {?}
     */
    IgxBaseTransactionService.prototype.undo = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    IgxBaseTransactionService.prototype.redo = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} mergeChanges
     * @return {?}
     */
    IgxBaseTransactionService.prototype.getAggregatedChanges = /**
     * @param {?} mergeChanges
     * @return {?}
     */
    function (mergeChanges) {
        var _this = this;
        var /** @type {?} */ result = [];
        this._pendingStates.forEach(function (state, key) {
            var /** @type {?} */ value = mergeChanges ? _this.getAggregatedValue(key, mergeChanges) : state.value;
            result.push(/** @type {?} */ ({ id: key, newValue: value, type: state.type }));
        });
        return result;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    IgxBaseTransactionService.prototype.getState = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this._pendingStates.get(id);
    };
    /**
     * @param {?} id
     * @param {?} mergeChanges
     * @return {?}
     */
    IgxBaseTransactionService.prototype.getAggregatedValue = /**
     * @param {?} id
     * @param {?} mergeChanges
     * @return {?}
     */
    function (id, mergeChanges) {
        var /** @type {?} */ state = this._pendingStates.get(id);
        if (!state) {
            return null;
        }
        if (mergeChanges) {
            return this.updateValue(state);
        }
        return state.value;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    IgxBaseTransactionService.prototype.commit = /**
     * @param {?} data
     * @return {?}
     */
    function (data) { };
    /**
     * @return {?}
     */
    IgxBaseTransactionService.prototype.clear = /**
     * @return {?}
     */
    function () {
        this._pendingStates.clear();
        this._pendingTransactions = [];
    };
    /**
     * @return {?}
     */
    IgxBaseTransactionService.prototype.startPending = /**
     * @return {?}
     */
    function () {
        this._isPending = true;
    };
    /**
     * @param {?} commit
     * @return {?}
     */
    IgxBaseTransactionService.prototype.endPending = /**
     * @param {?} commit
     * @return {?}
     */
    function (commit) {
        this._isPending = false;
        this._pendingStates.clear();
        this._pendingTransactions = [];
    };
    /**
     * Updates the provided states collection according to passed transaction and recordRef
     * @param states States collection to apply the update to
     * @param transaction Transaction to apply to the current state
     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied
     */
    /**
     * Updates the provided states collection according to passed transaction and recordRef
     * @param {?} states States collection to apply the update to
     * @param {?} transaction Transaction to apply to the current state
     * @param {?=} recordRef Reference to the value of the record in data source, if any, where transaction should be applied
     * @return {?}
     */
    IgxBaseTransactionService.prototype.updateState = /**
     * Updates the provided states collection according to passed transaction and recordRef
     * @param {?} states States collection to apply the update to
     * @param {?} transaction Transaction to apply to the current state
     * @param {?=} recordRef Reference to the value of the record in data source, if any, where transaction should be applied
     * @return {?}
     */
    function (states, transaction, recordRef) {
        var /** @type {?} */ state = states.get(transaction.id);
        if (state) {
            if (isObject(state.value)) {
                mergeObjects(state.value, transaction.newValue);
            }
            else {
                state.value = transaction.newValue;
            }
        }
        else {
            state = /** @type {?} */ ({ value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type });
            states.set(transaction.id, state);
        }
    };
    /**
     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types
     * @param state State to update value for
     * @returns updated value including all the changes in provided state
     */
    /**
     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types
     * @param {?} state State to update value for
     * @return {?} updated value including all the changes in provided state
     */
    IgxBaseTransactionService.prototype.updateValue = /**
     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types
     * @param {?} state State to update value for
     * @return {?} updated value including all the changes in provided state
     */
    function (state) {
        return this.mergeValues(state.recordRef, state.value);
    };
    /**
     * Merges second values in first value and the result in empty object. If values are primitive type
     * returns second value if exists, or first value.
     * @param first Value to merge into
     * @param second Value to merge
     */
    /**
     * Merges second values in first value and the result in empty object. If values are primitive type
     * returns second value if exists, or first value.
     * @template U
     * @param {?} first Value to merge into
     * @param {?} second Value to merge
     * @return {?}
     */
    IgxBaseTransactionService.prototype.mergeValues = /**
     * Merges second values in first value and the result in empty object. If values are primitive type
     * returns second value if exists, or first value.
     * @template U
     * @param {?} first Value to merge into
     * @param {?} second Value to merge
     * @return {?}
     */
    function (first, second) {
        var /** @type {?} */ result;
        if (isObject(first) || isObject(second)) {
            result = mergeObjects(mergeObjects({}, first), second);
        }
        else {
            result = second ? second : first;
        }
        return result;
    };
    IgxBaseTransactionService.decorators = [
        { type: Injectable },
    ];
    return IgxBaseTransactionService;
}());
export { IgxBaseTransactionService };
function IgxBaseTransactionService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxBaseTransactionService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxBaseTransactionService.ctorParameters;
    /** @type {?} */
    IgxBaseTransactionService.prototype._isPending;
    /** @type {?} */
    IgxBaseTransactionService.prototype._pendingTransactions;
    /** @type {?} */
    IgxBaseTransactionService.prototype._pendingStates;
    /** @type {?} */
    IgxBaseTransactionService.prototype.onStateUpdate;
}

//# sourceMappingURL=data:application/json;base64,