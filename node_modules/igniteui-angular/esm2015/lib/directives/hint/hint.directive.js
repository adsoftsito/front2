/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, HostBinding, Input } from '@angular/core';
/** @enum {number} */
const IgxHintPosition = {
    START: 0,
    END: 1,
};
IgxHintPosition[IgxHintPosition.START] = "START";
IgxHintPosition[IgxHintPosition.END] = "END";
export class IgxHintDirective {
    /**
     * @param {?} _element
     */
    constructor(_element) {
        this._element = _element;
        this._position = IgxHintPosition.START;
        /**
         * Sets/gets whether the hint position is at the start.
         * Default value is `false`.
         * ```typescript
         * \@ViewChild('hint', {read: IgxHintDirective})
         * public igxHint: IgxHintDirective;
         * this.igxHint.isPositionStart = true;
         * ```
         * ```typescript
         * let isHintPositionStart = this.igxHint.isPositionStart;
         * ```
         * \@memberof IgxHintDirective
         */
        this.isPositionStart = false;
        /**
         * Sets/gets whether the hint position is at the end.
         * Default value is `false`.
         * ```typescript
         * \@ViewChild('hint', {read: IgxHintDirective})
         * public igxHint: IgxHintDirective;
         * this.igxHint.isPositionEnd = true;
         * ```
         * ```typescript
         * let isHintPositionEnd = this.igxHint.isPositionEnd;
         * ```
         * \@memberof IgxHintDirective
         */
        this.isPositionEnd = false;
    }
    /**
     * Sets the position of the hint.
     * ```html
     * <igx-input-group>
     *  <input igxInput type="text"/>
     *  <igx-hint #hint [position]="'start'">IgxHint displayed at the start</igx-hint>
     * </igx-input-group>
     * ```
     * \@memberof IgxHintDirective
     * @param {?} value
     * @return {?}
     */
    set position(value) {
        const /** @type {?} */ position = (/** @type {?} */ (IgxHintPosition))[value.toUpperCase()];
        if (position !== undefined) {
            this._position = position;
            this._applyPosition(this._position);
        }
    }
    /**
     * Gets the position of the hint.
     * ```typescript
     * \@ViewChild('hint', {read: IgxHintDirective})
     * public igxHint: IgxHintDirective;
     * let hintPosition =  this.igxHint.position;
     * ```
     * \@memberof IgxHintDirective
     * @return {?}
     */
    get position() {
        return this._position.toString();
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        this._applyPosition(this._position);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    _applyPosition(position) {
        this.isPositionStart = this.isPositionEnd = false;
        switch (position) {
            case IgxHintPosition.START:
                this.isPositionStart = true;
                break;
            case IgxHintPosition.END:
                this.isPositionEnd = true;
                break;
            default: break;
        }
    }
}
IgxHintDirective.decorators = [
    { type: Directive, args: [{
                selector: 'igx-hint,[igxHint]'
            },] },
];
/** @nocollapse */
IgxHintDirective.ctorParameters = () => [
    { type: ElementRef, },
];
IgxHintDirective.propDecorators = {
    "isPositionStart": [{ type: HostBinding, args: ['class.igx-input-group__hint-item--start',] },],
    "isPositionEnd": [{ type: HostBinding, args: ['class.igx-input-group__hint-item--end',] },],
    "position": [{ type: Input, args: ['position',] },],
};
function IgxHintDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxHintDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxHintDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxHintDirective.propDecorators;
    /** @type {?} */
    IgxHintDirective.prototype._position;
    /**
     * Sets/gets whether the hint position is at the start.
     * Default value is `false`.
     * ```typescript
     * \@ViewChild('hint', {read: IgxHintDirective})
     * public igxHint: IgxHintDirective;
     * this.igxHint.isPositionStart = true;
     * ```
     * ```typescript
     * let isHintPositionStart = this.igxHint.isPositionStart;
     * ```
     * \@memberof IgxHintDirective
     * @type {?}
     */
    IgxHintDirective.prototype.isPositionStart;
    /**
     * Sets/gets whether the hint position is at the end.
     * Default value is `false`.
     * ```typescript
     * \@ViewChild('hint', {read: IgxHintDirective})
     * public igxHint: IgxHintDirective;
     * this.igxHint.isPositionEnd = true;
     * ```
     * ```typescript
     * let isHintPositionEnd = this.igxHint.isPositionEnd;
     * ```
     * \@memberof IgxHintDirective
     * @type {?}
     */
    IgxHintDirective.prototype.isPositionEnd;
    /** @type {?} */
    IgxHintDirective.prototype._element;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvaGludC9oaW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7QUFVbEYsTUFBTTs7OztJQWlDRixZQUFvQixRQUFvQjtRQUFwQixhQUFRLEdBQVIsUUFBUSxDQUFZO3lCQWhDSCxlQUFlLENBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7K0JBZWpDLEtBQUs7Ozs7Ozs7Ozs7Ozs7OzZCQWVQLEtBQUs7S0FHM0I7Ozs7Ozs7Ozs7Ozs7UUFZRyxRQUFRLENBQUMsS0FBYTtRQUN0Qix1QkFBTSxRQUFRLEdBQW9CLG1CQUFDLGVBQXNCLEVBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNoRixFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztZQUMxQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN2Qzs7Ozs7Ozs7Ozs7O0lBV0wsSUFBSSxRQUFRO1FBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDcEM7Ozs7O0lBSUQsUUFBUTtRQUNKLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ3ZDOzs7OztJQUVPLGNBQWMsQ0FBQyxRQUF5QjtRQUM1QyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ2xELE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDZixLQUFLLGVBQWUsQ0FBQyxLQUFLO2dCQUN0QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztnQkFDNUIsS0FBSyxDQUFDO1lBQ1YsS0FBSyxlQUFlLENBQUMsR0FBRztnQkFDcEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7Z0JBQzFCLEtBQUssQ0FBQztZQUNWLFNBQVMsS0FBSyxDQUFDO1NBQ2xCOzs7O1lBckZSLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2FBQ2pDOzs7O1lBVG1CLFVBQVU7OztnQ0F5QnpCLFdBQVcsU0FBQyx5Q0FBeUM7OEJBZXJELFdBQVcsU0FBQyx1Q0FBdUM7eUJBZW5ELEtBQUssU0FBQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5lbnVtIElneEhpbnRQb3NpdGlvbiB7XG4gICAgU1RBUlQsXG4gICAgRU5EXG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnaWd4LWhpbnQsW2lneEhpbnRdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hIaW50RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIF9wb3NpdGlvbjogSWd4SGludFBvc2l0aW9uID0gSWd4SGludFBvc2l0aW9uLlNUQVJUO1xuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB3aGV0aGVyIHRoZSBoaW50IHBvc2l0aW9uIGlzIGF0IHRoZSBzdGFydC5cbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBWaWV3Q2hpbGQoJ2hpbnQnLCB7cmVhZDogSWd4SGludERpcmVjdGl2ZX0pXG4gICAgICogcHVibGljIGlneEhpbnQ6IElneEhpbnREaXJlY3RpdmU7XG4gICAgICogdGhpcy5pZ3hIaW50LmlzUG9zaXRpb25TdGFydCA9IHRydWU7XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBpc0hpbnRQb3NpdGlvblN0YXJ0ID0gdGhpcy5pZ3hIaW50LmlzUG9zaXRpb25TdGFydDtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4SGludERpcmVjdGl2ZVxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWlucHV0LWdyb3VwX19oaW50LWl0ZW0tLXN0YXJ0JylcbiAgICBwdWJsaWMgaXNQb3NpdGlvblN0YXJ0ID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIHdoZXRoZXIgdGhlIGhpbnQgcG9zaXRpb24gaXMgYXQgdGhlIGVuZC5cbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBWaWV3Q2hpbGQoJ2hpbnQnLCB7cmVhZDogSWd4SGludERpcmVjdGl2ZX0pXG4gICAgICogcHVibGljIGlneEhpbnQ6IElneEhpbnREaXJlY3RpdmU7XG4gICAgICogdGhpcy5pZ3hIaW50LmlzUG9zaXRpb25FbmQgPSB0cnVlO1xuICAgICAqIGBgYFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgaXNIaW50UG9zaXRpb25FbmQgPSB0aGlzLmlneEhpbnQuaXNQb3NpdGlvbkVuZDtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4SGludERpcmVjdGl2ZVxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWlucHV0LWdyb3VwX19oaW50LWl0ZW0tLWVuZCcpXG4gICAgcHVibGljIGlzUG9zaXRpb25FbmQgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIGhpbnQuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtaW5wdXQtZ3JvdXA+XG4gICAgICogIDxpbnB1dCBpZ3hJbnB1dCB0eXBlPVwidGV4dFwiLz5cbiAgICAgKiAgPGlneC1oaW50ICNoaW50IFtwb3NpdGlvbl09XCInc3RhcnQnXCI+SWd4SGludCBkaXNwbGF5ZWQgYXQgdGhlIHN0YXJ0PC9pZ3gtaGludD5cbiAgICAgKiA8L2lneC1pbnB1dC1ncm91cD5cbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4SGludERpcmVjdGl2ZVxuICAgICAqL1xuICAgIEBJbnB1dCgncG9zaXRpb24nKVxuICAgIHNldCBwb3NpdGlvbih2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uOiBJZ3hIaW50UG9zaXRpb24gPSAoSWd4SGludFBvc2l0aW9uIGFzIGFueSlbdmFsdWUudG9VcHBlckNhc2UoKV07XG4gICAgICAgIGlmIChwb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgdGhpcy5fYXBwbHlQb3NpdGlvbih0aGlzLl9wb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIGhpbnQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBWaWV3Q2hpbGQoJ2hpbnQnLCB7cmVhZDogSWd4SGludERpcmVjdGl2ZX0pXG4gICAgICogcHVibGljIGlneEhpbnQ6IElneEhpbnREaXJlY3RpdmU7XG4gICAgICogbGV0IGhpbnRQb3NpdGlvbiA9ICB0aGlzLmlneEhpbnQucG9zaXRpb247XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEhpbnREaXJlY3RpdmVcbiAgICAgKi9cbiAgICBnZXQgcG9zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb3NpdGlvbi50b1N0cmluZygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5fYXBwbHlQb3NpdGlvbih0aGlzLl9wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfYXBwbHlQb3NpdGlvbihwb3NpdGlvbjogSWd4SGludFBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuaXNQb3NpdGlvblN0YXJ0ID0gdGhpcy5pc1Bvc2l0aW9uRW5kID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgSWd4SGludFBvc2l0aW9uLlNUQVJUOlxuICAgICAgICAgICAgICAgIHRoaXMuaXNQb3NpdGlvblN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgSWd4SGludFBvc2l0aW9uLkVORDpcbiAgICAgICAgICAgICAgICB0aGlzLmlzUG9zaXRpb25FbmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDogYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=