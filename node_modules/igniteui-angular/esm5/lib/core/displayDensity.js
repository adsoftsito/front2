/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { InjectionToken, Input } from '@angular/core';
/** @enum {string} */
var DisplayDensity = {
    comfortable: 'comfortable',
    cosy: 'cosy',
    compact: 'compact',
};
export { DisplayDensity };
/**
 * Describes the object used to configure the DisplayDensity in Angular DI.
 * @record
 */
export function IDisplayDensity() { }
function IDisplayDensity_tsickle_Closure_declarations() {
    /** @type {?} */
    IDisplayDensity.prototype.displayDensity;
}
/**
 * Defines the DisplayDensity DI token.
 */
export var /** @type {?} */ DisplayDensityToken = new InjectionToken('DisplayDensity');
/**
 * Base class containing all logic required for implementing DisplayDensity.
 */
var DisplayDensityBase = /** @class */ (function () {
    function DisplayDensityBase(displayDensityOptions) {
        this.displayDensityOptions = displayDensityOptions;
    }
    Object.defineProperty(DisplayDensityBase.prototype, "displayDensity", {
        get: /**
         * Returns the theme of the component.
         * The default theme is `comfortable`.
         * Available options are `comfortable`, `cosy`, `compact`.
         * ```typescript
         * let componentTheme = this.component.displayDensity;
         * ```
         * @return {?}
         */
        function () {
            return this._displayDensity;
        },
        set: /**
         * Sets the theme of the component.
         * @param {?} val
         * @return {?}
         */
        function (val) {
            switch (val) {
                case 'compact':
                    this._displayDensity = "compact" /* compact */;
                    break;
                case 'cosy':
                    this._displayDensity = "cosy" /* cosy */;
                    break;
                case 'comfortable':
                default:
                    this._displayDensity = "comfortable" /* comfortable */;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     *@hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    DisplayDensityBase.prototype.isCosy = /**
     * @hidden
     * @return {?}
     */
    function () {
        return this._displayDensity === "cosy" /* cosy */ ||
            (!this._displayDensity && this.displayDensityOptions && this.displayDensityOptions.displayDensity === "cosy" /* cosy */);
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    DisplayDensityBase.prototype.isComfortable = /**
     * @hidden
     * @return {?}
     */
    function () {
        return this._displayDensity === "comfortable" /* comfortable */ ||
            (!this._displayDensity && (!this.displayDensityOptions ||
                this.displayDensityOptions.displayDensity === "comfortable" /* comfortable */));
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    DisplayDensityBase.prototype.isCompact = /**
     * @hidden
     * @return {?}
     */
    function () {
        return this._displayDensity === "compact" /* compact */ ||
            (!this._displayDensity && this.displayDensityOptions && this.displayDensityOptions.displayDensity === "compact" /* compact */);
    };
    DisplayDensityBase.propDecorators = {
        "displayDensity": [{ type: Input },],
    };
    return DisplayDensityBase;
}());
export { DisplayDensityBase };
function DisplayDensityBase_tsickle_Closure_declarations() {
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    DisplayDensityBase.propDecorators;
    /** @type {?} */
    DisplayDensityBase.prototype._displayDensity;
    /** @type {?} */
    DisplayDensityBase.prototype.displayDensityOptions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGxheURlbnNpdHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2NvcmUvZGlzcGxheURlbnNpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7aUJBTXBDLGFBQWE7VUFDcEIsTUFBTTthQUNILFNBQVM7Ozs7Ozs7Ozs7Ozs7OztBQWF2QixNQUFNLENBQUMscUJBQU0sbUJBQW1CLEdBQUcsSUFBSSxjQUFjLENBQWtCLGdCQUFnQixDQUFDLENBQUM7Ozs7O0lBK0RyRiw0QkFBc0IscUJBQXNDO1FBQXRDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBaUI7S0FBSTswQkE5Q3JELDhDQUFjOzs7Ozs7Ozs7OztZQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQzs7Ozs7OztrQkFNTixHQUE0QjtZQUNsRCxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNWLEtBQUssU0FBUztvQkFDVixJQUFJLENBQUMsZUFBZSwwQkFBeUIsQ0FBQztvQkFDOUMsS0FBSyxDQUFDO2dCQUNWLEtBQUssTUFBTTtvQkFDUCxJQUFJLENBQUMsZUFBZSxvQkFBc0IsQ0FBQztvQkFDM0MsS0FBSyxDQUFDO2dCQUNWLEtBQUssYUFBYSxDQUFDO2dCQUNuQjtvQkFDSSxJQUFJLENBQUMsZUFBZSxrQ0FBNkIsQ0FBQzthQUN6RDs7Ozs7SUFHTDs7T0FFRzs7Ozs7SUFDTyxtQ0FBTTs7OztJQUFoQjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxzQkFBd0I7WUFDL0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLHFCQUFxQixJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLHNCQUF3QixDQUFDLENBQUM7S0FDbEk7SUFFRDs7T0FFRzs7Ozs7SUFDTywwQ0FBYTs7OztJQUF2QjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxvQ0FBK0I7WUFDdEQsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUI7Z0JBQ3JELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLG9DQUErQixDQUFDLENBQUMsQ0FBQztLQUNuRjtJQUVEOztPQUVHOzs7OztJQUNPLHNDQUFTOzs7O0lBQW5CO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLDRCQUEyQjtZQUNsRCxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMscUJBQXFCLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLGNBQWMsNEJBQTJCLENBQUMsQ0FBQztLQUNySTs7bUNBN0NBLEtBQUs7OzZCQXJDVjs7U0EwQmEsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgcG9zaWJsZSB2YWx1ZXMgb2YgdGhlIGNvbXBvbmVudHMnIGRpc3BsYXkgZGVuc2l0eS5cbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gRGlzcGxheURlbnNpdHkge1xuICAgIGNvbWZvcnRhYmxlID0gJ2NvbWZvcnRhYmxlJyxcbiAgICBjb3N5ID0gJ2Nvc3knLFxuICAgIGNvbXBhY3QgPSAnY29tcGFjdCdcbn1cblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG9iamVjdCB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUgRGlzcGxheURlbnNpdHkgaW4gQW5ndWxhciBESS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRGlzcGxheURlbnNpdHkge1xuICAgIGRpc3BsYXlEZW5zaXR5OiBEaXNwbGF5RGVuc2l0eTtcbn1cblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBEaXNwbGF5RGVuc2l0eSBESSB0b2tlbi5cbiAqL1xuZXhwb3J0IGNvbnN0IERpc3BsYXlEZW5zaXR5VG9rZW4gPSBuZXcgSW5qZWN0aW9uVG9rZW48SURpc3BsYXlEZW5zaXR5PignRGlzcGxheURlbnNpdHknKTtcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGNvbnRhaW5pbmcgYWxsIGxvZ2ljIHJlcXVpcmVkIGZvciBpbXBsZW1lbnRpbmcgRGlzcGxheURlbnNpdHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBEaXNwbGF5RGVuc2l0eUJhc2Uge1xuICAgIHByb3RlY3RlZCBfZGlzcGxheURlbnNpdHk6IERpc3BsYXlEZW5zaXR5IHwgc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdGhlbWUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBUaGUgZGVmYXVsdCB0aGVtZSBpcyBgY29tZm9ydGFibGVgLlxuICAgICAqIEF2YWlsYWJsZSBvcHRpb25zIGFyZSBgY29tZm9ydGFibGVgLCBgY29zeWAsIGBjb21wYWN0YC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGNvbXBvbmVudFRoZW1lID0gdGhpcy5jb21wb25lbnQuZGlzcGxheURlbnNpdHk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IGRpc3BsYXlEZW5zaXR5KCk6IERpc3BsYXlEZW5zaXR5IHwgc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BsYXlEZW5zaXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRoZW1lIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgcHVibGljIHNldCBkaXNwbGF5RGVuc2l0eSh2YWw6IERpc3BsYXlEZW5zaXR5IHwgc3RyaW5nKSB7XG4gICAgICAgIHN3aXRjaCAodmFsKSB7XG4gICAgICAgICAgICBjYXNlICdjb21wYWN0JzpcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwbGF5RGVuc2l0eSA9IERpc3BsYXlEZW5zaXR5LmNvbXBhY3Q7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb3N5JzpcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwbGF5RGVuc2l0eSA9IERpc3BsYXlEZW5zaXR5LmNvc3k7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb21mb3J0YWJsZSc6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlEZW5zaXR5ID0gRGlzcGxheURlbnNpdHkuY29tZm9ydGFibGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgaXNDb3N5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheURlbnNpdHkgPT09IERpc3BsYXlEZW5zaXR5LmNvc3kgfHxcbiAgICAgICAgICAgICghdGhpcy5fZGlzcGxheURlbnNpdHkgJiYgdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMgJiYgdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMuZGlzcGxheURlbnNpdHkgPT09IERpc3BsYXlEZW5zaXR5LmNvc3kpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBpc0NvbWZvcnRhYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheURlbnNpdHkgPT09IERpc3BsYXlEZW5zaXR5LmNvbWZvcnRhYmxlIHx8XG4gICAgICAgICAgICAoIXRoaXMuX2Rpc3BsYXlEZW5zaXR5ICYmICghdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMgfHxcbiAgICAgICAgICAgICB0aGlzLmRpc3BsYXlEZW5zaXR5T3B0aW9ucy5kaXNwbGF5RGVuc2l0eSA9PT0gRGlzcGxheURlbnNpdHkuY29tZm9ydGFibGUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKkBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgaXNDb21wYWN0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheURlbnNpdHkgPT09IERpc3BsYXlEZW5zaXR5LmNvbXBhY3QgfHxcbiAgICAgICAgICAgICghdGhpcy5fZGlzcGxheURlbnNpdHkgJiYgdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMgJiYgdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMuZGlzcGxheURlbnNpdHkgPT09IERpc3BsYXlEZW5zaXR5LmNvbXBhY3QpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBkaXNwbGF5RGVuc2l0eU9wdGlvbnM6IElEaXNwbGF5RGVuc2l0eSkge31cbn1cbiJdfQ==