/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var IgxFocusDirective = /** @class */ (function () {
    function IgxFocusDirective(element, comp) {
        this.element = element;
        this.comp = comp;
        this.focusState = true;
    }
    Object.defineProperty(IgxFocusDirective.prototype, "focused", {
        get: /**
         * Returns the state of the igxFocus.
         * ```typescript
         * \@ViewChild('focusContainer', {read: IgxFocusDirective})
         * public igxFocus: IgxFocusDirective;
         * let isFocusOn = this.igxFocus.focused;
         * ```
         * \@memberof IgxFocusDirective
         * @return {?}
         */
        function () {
            return this.focusState;
        },
        /**
         * Sets the state of the igxFocus.
         * ```html
         * <igx-input-group >
         *  <input #focusContainer igxInput [igxFocus]="true"/>
         * </igx-input-group>
         * ```
         * @memberof IgxFocusDirective
         */
        set: /**
         * Sets the state of the igxFocus.
         * ```html
         * <igx-input-group >
         *  <input #focusContainer igxInput [igxFocus]="true"/>
         * </igx-input-group>
         * ```
         * \@memberof IgxFocusDirective
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.focusState = val;
            this.trigger();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxFocusDirective.prototype, "nativeElement", {
        /**
         * Gets the native element of the igxFocus.
         * ```typescript
         * @ViewChild('focusContainer', {read: IgxFocusDirective})
         * public igxFocus: IgxFocusDirective;
         * let igxFocusNativeElement = this.igxFocus.nativeElement;
         * ```
         * @memberof IgxFocusDirective
         */
        get: /**
         * Gets the native element of the igxFocus.
         * ```typescript
         * \@ViewChild('focusContainer', {read: IgxFocusDirective})
         * public igxFocus: IgxFocusDirective;
         * let igxFocusNativeElement = this.igxFocus.nativeElement;
         * ```
         * \@memberof IgxFocusDirective
         * @return {?}
         */
        function () {
            if (this.comp && this.comp[0] && this.comp[0].getEditElement) {
                return (/** @type {?} */ (this.comp[0])).getEditElement();
            }
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Triggers the igxFocus state.
     * ```typescript
     * @ViewChild('focusContainer', {read: IgxFocusDirective})
     * public igxFocus: IgxFocusDirective;
     * this.igxFocus.trigger();
     * ```
     * @memberof IgxFocusDirective
     */
    /**
     * Triggers the igxFocus state.
     * ```typescript
     * \@ViewChild('focusContainer', {read: IgxFocusDirective})
     * public igxFocus: IgxFocusDirective;
     * this.igxFocus.trigger();
     * ```
     * \@memberof IgxFocusDirective
     * @return {?}
     */
    IgxFocusDirective.prototype.trigger = /**
     * Triggers the igxFocus state.
     * ```typescript
     * \@ViewChild('focusContainer', {read: IgxFocusDirective})
     * public igxFocus: IgxFocusDirective;
     * this.igxFocus.trigger();
     * ```
     * \@memberof IgxFocusDirective
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.focusState) {
            requestAnimationFrame(function () { return _this.nativeElement.focus(); });
        }
    };
    IgxFocusDirective.decorators = [
        { type: Directive, args: [{
                    exportAs: 'igxFocus',
                    selector: '[igxFocus]'
                },] },
    ];
    /** @nocollapse */
    IgxFocusDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Array, decorators: [{ type: Inject, args: [NG_VALUE_ACCESSOR,] }, { type: Self }, { type: Optional },] },
    ]; };
    IgxFocusDirective.propDecorators = {
        "focused": [{ type: Input, args: ['igxFocus',] },],
    };
    return IgxFocusDirective;
}());
export { IgxFocusDirective };
function IgxFocusDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxFocusDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxFocusDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxFocusDirective.propDecorators;
    /** @type {?} */
    IgxFocusDirective.prototype.focusState;
    /** @type {?} */
    IgxFocusDirective.prototype.element;
    /** @type {?} */
    IgxFocusDirective.prototype.comp;
}
/**
 * The IgxFocusModule provides the {\@link IgxFocusDirective} inside your application.
 */
var IgxFocusModule = /** @class */ (function () {
    function IgxFocusModule() {
    }
    IgxFocusModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxFocusDirective],
                    exports: [IgxFocusDirective]
                },] },
    ];
    return IgxFocusModule;
}());
export { IgxFocusModule };
function IgxFocusModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxFocusModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxFocusModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2ZvY3VzL2ZvY3VzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7SUFvRC9DLDJCQUFvQixPQUFtQixFQUF5RDtRQUE1RSxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQXlELFNBQUksR0FBSixJQUFJOzBCQTNDL0UsSUFBSTtLQTJDd0Y7MEJBaEM3RyxzQ0FBTzs7Ozs7Ozs7Ozs7O1lBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7O1FBRTNCOzs7Ozs7OztXQVFHOzs7Ozs7Ozs7Ozs7UUFDSCxVQUFZLEdBQVk7WUFDcEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7WUFDdEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2xCOzs7O0lBVUQsc0JBQUksNENBQWE7UUFUakI7Ozs7Ozs7O1dBUUc7Ozs7Ozs7Ozs7O1FBQ0g7WUFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO2dCQUMzRCxNQUFNLENBQUMsbUJBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQW1CLEVBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQzthQUM1RDtZQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztTQUNyQzs7O09BQUE7SUFHRDs7Ozs7Ozs7T0FRRzs7Ozs7Ozs7Ozs7SUFDSCxtQ0FBTzs7Ozs7Ozs7OztJQUFQO1FBQUEsaUJBSUM7UUFIRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNsQixxQkFBcUIsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDO1NBQzNEO0tBQ0o7O2dCQS9ESixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLFFBQVEsRUFBRSxZQUFZO2lCQUN6Qjs7OztnQkFQbUIsVUFBVTs0Q0FxRGdCLE1BQU0sU0FBQyxpQkFBaUIsY0FBRyxJQUFJLFlBQUksUUFBUTs7OzRCQWpDcEYsS0FBSyxTQUFDLFVBQVU7OzRCQXBCckI7O1NBUWEsaUJBQWlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dCQWdFN0IsUUFBUSxTQUFDO29CQUNOLFlBQVksRUFBRSxDQUFDLGlCQUFpQixDQUFDO29CQUNqQyxPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztpQkFDL0I7O3lCQTNFRDs7U0E0RWEsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE5nTW9kdWxlLCBPcHRpb25hbCwgSW5qZWN0LCBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEVkaXRvclByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vY29yZS9lZGl0LXByb3ZpZGVyJztcblxuQERpcmVjdGl2ZSh7XG4gICAgZXhwb3J0QXM6ICdpZ3hGb2N1cycsXG4gICAgc2VsZWN0b3I6ICdbaWd4Rm9jdXNdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hGb2N1c0RpcmVjdGl2ZSB7XG5cbiAgICBwcml2YXRlIGZvY3VzU3RhdGUgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN0YXRlIG9mIHRoZSBpZ3hGb2N1cy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQFZpZXdDaGlsZCgnZm9jdXNDb250YWluZXInLCB7cmVhZDogSWd4Rm9jdXNEaXJlY3RpdmV9KVxuICAgICAqIHB1YmxpYyBpZ3hGb2N1czogSWd4Rm9jdXNEaXJlY3RpdmU7XG4gICAgICogbGV0IGlzRm9jdXNPbiA9IHRoaXMuaWd4Rm9jdXMuZm9jdXNlZDtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4Rm9jdXNEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBASW5wdXQoJ2lneEZvY3VzJylcbiAgICBnZXQgZm9jdXNlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9jdXNTdGF0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhdGUgb2YgdGhlIGlneEZvY3VzLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWlucHV0LWdyb3VwID5cbiAgICAgKiAgPGlucHV0ICNmb2N1c0NvbnRhaW5lciBpZ3hJbnB1dCBbaWd4Rm9jdXNdPVwidHJ1ZVwiLz5cbiAgICAgKiA8L2lneC1pbnB1dC1ncm91cD5cbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4Rm9jdXNEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBzZXQgZm9jdXNlZCh2YWw6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5mb2N1c1N0YXRlID0gdmFsO1xuICAgICAgICB0aGlzLnRyaWdnZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGVsZW1lbnQgb2YgdGhlIGlneEZvY3VzLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBAVmlld0NoaWxkKCdmb2N1c0NvbnRhaW5lcicsIHtyZWFkOiBJZ3hGb2N1c0RpcmVjdGl2ZX0pXG4gICAgICogcHVibGljIGlneEZvY3VzOiBJZ3hGb2N1c0RpcmVjdGl2ZTtcbiAgICAgKiBsZXQgaWd4Rm9jdXNOYXRpdmVFbGVtZW50ID0gdGhpcy5pZ3hGb2N1cy5uYXRpdmVFbGVtZW50O1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hGb2N1c0RpcmVjdGl2ZVxuICAgICAqL1xuICAgIGdldCBuYXRpdmVFbGVtZW50KCkge1xuICAgICAgICBpZiAodGhpcy5jb21wICYmIHRoaXMuY29tcFswXSAmJiB0aGlzLmNvbXBbMF0uZ2V0RWRpdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5jb21wWzBdIGFzIEVkaXRvclByb3ZpZGVyKS5nZXRFZGl0RWxlbWVudCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIEBJbmplY3QoTkdfVkFMVUVfQUNDRVNTT1IpIEBTZWxmKCkgQE9wdGlvbmFsKCkgcHJpdmF0ZSBjb21wPzogYW55W10pIHsgfVxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIHRoZSBpZ3hGb2N1cyBzdGF0ZS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQFZpZXdDaGlsZCgnZm9jdXNDb250YWluZXInLCB7cmVhZDogSWd4Rm9jdXNEaXJlY3RpdmV9KVxuICAgICAqIHB1YmxpYyBpZ3hGb2N1czogSWd4Rm9jdXNEaXJlY3RpdmU7XG4gICAgICogdGhpcy5pZ3hGb2N1cy50cmlnZ2VyKCk7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEZvY3VzRGlyZWN0aXZlXG4gICAgICovXG4gICAgdHJpZ2dlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9jdXNTdGF0ZSkge1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMubmF0aXZlRWxlbWVudC5mb2N1cygpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVGhlIElneEZvY3VzTW9kdWxlIHByb3ZpZGVzIHRoZSB7QGxpbmsgSWd4Rm9jdXNEaXJlY3RpdmV9IGluc2lkZSB5b3VyIGFwcGxpY2F0aW9uLlxuICovXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW0lneEZvY3VzRGlyZWN0aXZlXSxcbiAgICBleHBvcnRzOiBbSWd4Rm9jdXNEaXJlY3RpdmVdXG59KVxuZXhwb3J0IGNsYXNzIElneEZvY3VzTW9kdWxlIHsgfVxuIl19