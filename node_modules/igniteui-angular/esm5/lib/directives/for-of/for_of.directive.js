/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { ChangeDetectorRef, ComponentFactoryResolver, Directive, EventEmitter, Input, IterableDiffers, NgModule, NgZone, Output, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { DisplayContainerComponent } from './display.container';
import { HVirtualHelperComponent } from './horizontal.virtual.helper.component';
import { VirtualHelperComponent } from './virtual.helper.component';
import { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';
/**
 * @template T
 */
var IgxForOfDirective = /** @class */ (function () {
    function IgxForOfDirective(_viewContainer, _template, _differs, resolver, cdr, _zone) {
        this._viewContainer = _viewContainer;
        this._template = _template;
        this._differs = _differs;
        this.resolver = resolver;
        this.cdr = cdr;
        this._zone = _zone;
        /**
         * The current state of the directive. It contains `startIndex` and `chunkSize`.
         * state.startIndex - The index of the item at which the current visible chunk begins.
         * state.chunkSize - The number of items the current visible chunk holds.
         * These options can be used when implementing remote virtualization as they provide the necessary state information.
         * ```typescript
         * const gridState = this.parentVirtDir.state;
         * ```
         */
        this.state = {
            startIndex: 0,
            chunkSize: 0
        };
        /**
         * The total count of the virtual data items, when using remote service.
         * ```typescript
         * this.parentVirtDir.totalItemCount = data.Count;
         * ```
         */
        this.totalItemCount = null;
        /**
         * An event that is emitted after a new chunk has been loaded.
         * ```html
         * <ng-template igxFor [igxForOf]="data" [igxForScrollOrientation]="'horizontal'" (onChunkLoad)="chunkLoad($event)"></ng-template>
         * ```
         * ```typescript
         * chunkLoad(e){
         * alert("chunk loaded!");
         * }
         * ```
         */
        this.onChunkLoad = new EventEmitter();
        /**
         * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.
         * Can be used for implementing remote load on demand for the igxFor data.
         * ```html
         * <ng-template igxFor [igxForOf]="data" [igxForScrollOrientation]="'horizontal'" (onChunkPreload)="chunkPreload($event)"></ng-template>
         * ```
         * ```typescript
         * chunkPreload(e){
         * alert("chunk is loading!");
         * }
         * ```
         */
        this.onChunkPreload = new EventEmitter();
        this._differ = null;
        this.heightCache = [];
        this.extraRowApplied = false;
        /**
         * Height that is being virtualized.
         */
        this._virtHeight = 0;
        /**
         * Ratio for height that's being virtualizaed and the one visible
         * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.
         */
        this._virtHeightRatio = 1;
        /**
         * Internal track for scroll top that is being virtualized
         */
        this._virtScrollTop = 0;
        /**
         * If the next onScroll event is triggered due to internal setting of scrollTop
         */
        this._bScrollInternal = false;
        this._embeddedViews = [];
    }
    Object.defineProperty(IgxForOfDirective.prototype, "_isScrolledToBottom", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.getVerticalScroll()) {
                return true;
            }
            var /** @type {?} */ scrollTop = this.getVerticalScroll().scrollTop;
            var /** @type {?} */ scrollHeight = this.getVerticalScroll().scrollHeight;
            // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.
            // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.
            return Math.round(scrollTop + this.igxForContainerSize) === scrollHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxForOfDirective.prototype, "_isAtBottomIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxForOfDirective.prototype, "isRemote", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.totalItemCount !== null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxForOfDirective.prototype.removeScrollEventListeners = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.igxForScrollOrientation === 'horizontal') {
            this._zone.runOutsideAngular(function () {
                return _this.getHorizontalScroll().removeEventListener('scroll', _this.func);
            });
        }
        else {
            var /** @type {?} */ vertical_1 = this.getVerticalScroll();
            if (vertical_1) {
                this._zone.runOutsideAngular(function () {
                    return vertical_1.removeEventListener('scroll', _this.verticalScrollHandler);
                });
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxForOfDirective.prototype.verticalScrollHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onScroll(event);
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxForOfDirective.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ totalSize = 0;
        var /** @type {?} */ vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;
        var /** @type {?} */ dcFactory = this.resolver.resolveComponentFactory(DisplayContainerComponent);
        this.dc = this._viewContainer.createComponent(dcFactory, 0);
        this.dc.instance.scrollDirection = this.igxForScrollOrientation;
        if (typeof MSGesture === 'function') {
            // On Edge and IE when scrolling on touch the page scroll instead of the grid.
            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';
        }
        if (this.igxForOf && this.igxForOf.length) {
            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);
            totalSize = this.initSizesCache(this.igxForOf);
            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');
            if (this.hScroll) {
                this.state.startIndex = this.getIndexAt(this.hScroll.scrollLeft, this.sizesCache, 0);
            }
            this.state.chunkSize = this._calculateChunkSize();
            for (var /** @type {?} */ i = 0; i < this.state.chunkSize && this.igxForOf[i] !== undefined; i++) {
                var /** @type {?} */ input = this.igxForOf[i];
                var /** @type {?} */ embeddedView = this.dc.instance._vcr.createEmbeddedView(this._template, { $implicit: input, index: this.igxForOf.indexOf(input) });
                this._embeddedViews.push(embeddedView);
            }
        }
        if (this.igxForScrollOrientation === 'vertical') {
            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';
            var /** @type {?} */ factory = this.resolver.resolveComponentFactory(VirtualHelperComponent);
            this.vh = this._viewContainer.createComponent(factory, 1);
            this._maxHeight = this._calcMaxBrowserHeight();
            this.vh.instance.height = this.igxForOf ? this._calcHeight() : 0;
            this._zone.runOutsideAngular(function () {
                _this.verticalScrollHandler = _this.verticalScrollHandler.bind(_this);
                _this.vh.instance.elementRef.nativeElement.addEventListener('scroll', _this.verticalScrollHandler);
                _this.dc.instance.scrollContainer = _this.vh.instance.elementRef.nativeElement;
            });
        }
        if (this.igxForScrollOrientation === 'horizontal') {
            this.func = function (evt) { _this.onHScroll(evt); };
            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');
            if (!this.hScroll) {
                var /** @type {?} */ hvFactory = this.resolver.resolveComponentFactory(HVirtualHelperComponent);
                this.hvh = vc.createComponent(hvFactory);
                this.hvh.instance.width = totalSize;
                this.hScroll = this.hvh.instance.elementRef.nativeElement;
                this._zone.runOutsideAngular(function () {
                    _this.hvh.instance.elementRef.nativeElement.addEventListener('scroll', _this.func);
                    _this.dc.instance.scrollContainer = _this.hScroll;
                });
            }
            else {
                this._zone.runOutsideAngular(function () {
                    _this.hScroll.addEventListener('scroll', _this.func);
                    _this.dc.instance.scrollContainer = _this.hScroll;
                });
            }
            var /** @type {?} */ scrollOffset = this.hScroll.scrollLeft -
                (this.sizesCache && this.sizesCache.length ? this.sizesCache[this.state.startIndex] : 0);
            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';
            this.dc.instance._viewContainer.element.nativeElement.style.height = '100%';
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxForOfDirective.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.removeScrollEventListeners();
    };
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    IgxForOfDirective.prototype.ngOnChanges = /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var /** @type {?} */ forOf = 'igxForOf';
        if (forOf in changes) {
            var /** @type {?} */ value = changes[forOf].currentValue;
            if (!this._differ && value) {
                try {
                    this._differ = this._differs.find(value).create(this.igxForTrackBy);
                }
                catch (/** @type {?} */ e) {
                    throw new Error("Cannot find a differ supporting object \"" + value + "\" of type \"" + getTypeNameForDebugging(value) + "\".\n                     NgFor only supports binding to Iterables such as Arrays.");
                }
            }
        }
        var /** @type {?} */ defaultItemSize = 'igxForItemSize';
        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {
            // handle default item size changed.
            this.initSizesCache(this.igxForOf);
        }
        var /** @type {?} */ containerSize = 'igxForContainerSize';
        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {
            this._recalcOnContainerChange(changes);
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxForOfDirective.prototype.ngDoCheck = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._differ) {
            var /** @type {?} */ changes_1 = this._differ.diff(this.igxForOf);
            if (changes_1) {
                //  re-init cache.
                if (!this.igxForOf) {
                    return;
                }
                this.initSizesCache(this.igxForOf);
                this._zone.run(function () {
                    _this._applyChanges(changes_1);
                    _this.cdr.markForCheck();
                    _this._updateScrollOffset();
                });
            }
        }
    };
    /**
     * Shifts the scroll thumb position.
     * ```typescript
     * this.parentVirtDir.addScrollTop(5);
     * ```
     * @param {?} addTop negative value to scroll up and positive to scroll down;
     * @return {?}
     */
    IgxForOfDirective.prototype.addScrollTop = /**
     * Shifts the scroll thumb position.
     * ```typescript
     * this.parentVirtDir.addScrollTop(5);
     * ```
     * @param {?} addTop negative value to scroll up and positive to scroll down;
     * @return {?}
     */
    function (addTop) {
        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {
            return false;
        }
        var /** @type {?} */ originalVirtScrollTop = this._virtScrollTop;
        var /** @type {?} */ containerSize = parseInt(this.igxForContainerSize, 10);
        var /** @type {?} */ maxVirtScrollTop = this._virtHeight - containerSize;
        this._bScrollInternal = true;
        this._virtScrollTop += addTop;
        this._virtScrollTop = this._virtScrollTop > 0 ?
            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :
            0;
        this.vh.instance.elementRef.nativeElement.scrollTop += addTop / this._virtHeightRatio;
        if (Math.abs(addTop / this._virtHeightRatio) < 1) {
            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px
            var /** @type {?} */ scrollOffset = this.fixedUpdateAllRows(this._virtScrollTop);
            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;
            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';
        }
        var /** @type {?} */ curScrollTop = this.vh.instance.elementRef.nativeElement.scrollTop;
        var /** @type {?} */ maxRealScrollTop = this.vh.instance.elementRef.nativeElement.scrollHeight - containerSize;
        if ((this._virtScrollTop > 0 && curScrollTop === 0) ||
            (this._virtScrollTop < maxVirtScrollTop && curScrollTop === maxRealScrollTop)) {
            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)
            // Recalculate actual scroll position based on the virtual scroll.
            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop / this._virtHeightRatio;
        }
        else if (this._virtScrollTop === 0 && curScrollTop > 0) {
            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll
            this.vh.instance.elementRef.nativeElement.scrollTop = 0;
        }
        else if (this._virtScrollTop === maxVirtScrollTop && curScrollTop < maxRealScrollTop) {
            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll
            this.vh.instance.elementRef.nativeElement.scrollTop = maxRealScrollTop;
        }
        return this._virtScrollTop !== originalVirtScrollTop;
    };
    /**
     * Scrolls to the specified index.
     * ```typescript
     * this.parentVirtDir.scrollTo(5);
     * ```
     * @param {?} index
     * @return {?}
     */
    IgxForOfDirective.prototype.scrollTo = /**
     * Scrolls to the specified index.
     * ```typescript
     * this.parentVirtDir.scrollTo(5);
     * ```
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length)) {
            return;
        }
        var /** @type {?} */ containerSize = parseInt(this.igxForContainerSize, 10);
        var /** @type {?} */ scr = this.igxForScrollOrientation === 'horizontal' ?
            this.hScroll.scrollLeft : this.vh.instance.elementRef.nativeElement.scrollTop;
        var /** @type {?} */ isPrevItem = index < this.state.startIndex || scr > this.sizesCache[index];
        var /** @type {?} */ nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;
        if (nextScroll < 0) {
            return;
        }
        if (this.igxForScrollOrientation === 'horizontal') {
            this.hScroll.scrollLeft = nextScroll;
        }
        else {
            var /** @type {?} */ maxVirtScrollTop = this._virtHeight - containerSize;
            if (nextScroll > maxVirtScrollTop) {
                nextScroll = maxVirtScrollTop;
            }
            this._bScrollInternal = true;
            this._virtScrollTop = nextScroll;
            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop / this._virtHeightRatio;
            this._adjustToIndex = !isPrevItem ? index : null;
        }
    };
    /**
     * Scrolls by one item into the appropriate next direction.
     * For "horizontal" orientation that will be the right column and for "vertical" that is the lower row.
     * ```typescript
     * this.parentVirtDir.scrollNext();
     * ```
     * @return {?}
     */
    IgxForOfDirective.prototype.scrollNext = /**
     * Scrolls by one item into the appropriate next direction.
     * For "horizontal" orientation that will be the right column and for "vertical" that is the lower row.
     * ```typescript
     * this.parentVirtDir.scrollNext();
     * ```
     * @return {?}
     */
    function () {
        var /** @type {?} */ scr = this.igxForScrollOrientation === 'horizontal' ?
            this.hScroll.scrollLeft :
            this.vh.instance.elementRef.nativeElement.scrollTop;
        var /** @type {?} */ endIndex = this.getIndexAt(scr + parseInt(this.igxForContainerSize, 10), this.sizesCache, 0);
        this.scrollTo(endIndex);
    };
    /**
     * Scrolls by one item into the appropriate previous direction.
     * For "horizontal" orientation that will be the left column and for "vertical" that is the upper row.
     * ```typescript
     * this.parentVirtDir.scrollPrev();
     * ```
     * @return {?}
     */
    IgxForOfDirective.prototype.scrollPrev = /**
     * Scrolls by one item into the appropriate previous direction.
     * For "horizontal" orientation that will be the left column and for "vertical" that is the upper row.
     * ```typescript
     * this.parentVirtDir.scrollPrev();
     * ```
     * @return {?}
     */
    function () {
        this.scrollTo(this.state.startIndex - 1);
    };
    /**
     * Scrolls by one page into the appropriate next direction.
     * For "horizontal" orientation that will be one view to the right and for "vertical" that is one view to the bottom.
     * ```typescript
     * this.parentVirtDir.scrollNextPage();
     * ```
     * @return {?}
     */
    IgxForOfDirective.prototype.scrollNextPage = /**
     * Scrolls by one page into the appropriate next direction.
     * For "horizontal" orientation that will be one view to the right and for "vertical" that is one view to the bottom.
     * ```typescript
     * this.parentVirtDir.scrollNextPage();
     * ```
     * @return {?}
     */
    function () {
        if (this.igxForScrollOrientation === 'horizontal') {
            this.hvh.instance.elementRef.nativeElement.scrollLeft += parseInt(this.igxForContainerSize, 10);
        }
        else {
            this.addScrollTop(parseInt(this.igxForContainerSize, 10));
        }
    };
    /**
     * Scrolls by one page into the appropriate previous direction.
     * For "horizontal" orientation that will be one view to the left and for "vertical" that is one view to the top.
     * ```typescript
     * this.parentVirtDir.scrollPrevPage();
     * ```
     * @return {?}
     */
    IgxForOfDirective.prototype.scrollPrevPage = /**
     * Scrolls by one page into the appropriate previous direction.
     * For "horizontal" orientation that will be one view to the left and for "vertical" that is one view to the top.
     * ```typescript
     * this.parentVirtDir.scrollPrevPage();
     * ```
     * @return {?}
     */
    function () {
        if (this.igxForScrollOrientation === 'horizontal') {
            this.hvh.instance.elementRef.nativeElement.scrollLeft -= parseInt(this.igxForContainerSize, 10);
        }
        else {
            var /** @type {?} */ containerSize = (parseInt(this.igxForContainerSize, 10));
            this.addScrollTop(-containerSize);
        }
    };
    /**
     * @hidden
     * @param {?} colIndex
     * @return {?}
     */
    IgxForOfDirective.prototype.getColumnScrollLeft = /**
     * @hidden
     * @param {?} colIndex
     * @return {?}
     */
    function (colIndex) {
        return this.sizesCache[colIndex];
    };
    /**
     * Returns a reference to the vertical scrollbar DOM element.
     * ```typescript
     * this.parentVirtDir.getVerticalScroll();
     * ```
     * @return {?}
     */
    IgxForOfDirective.prototype.getVerticalScroll = /**
     * Returns a reference to the vertical scrollbar DOM element.
     * ```typescript
     * this.parentVirtDir.getVerticalScroll();
     * ```
     * @return {?}
     */
    function () {
        if (this.vh) {
            return this.vh.instance.elementRef.nativeElement;
        }
        return null;
    };
    /**
     * Returns the total number of items that are fully visible.
     * ```typescript
     * this.parentVirtDir.getItemCountInView();
     * ```
     * @return {?}
     */
    IgxForOfDirective.prototype.getItemCountInView = /**
     * Returns the total number of items that are fully visible.
     * ```typescript
     * this.parentVirtDir.getItemCountInView();
     * ```
     * @return {?}
     */
    function () {
        var /** @type {?} */ position = this.igxForScrollOrientation === 'horizontal' ?
            this.hScroll.scrollLeft :
            this.vh.instance.elementRef.nativeElement.scrollTop;
        var /** @type {?} */ startIndex = this.getIndexAt(position, this.sizesCache, 0);
        if (position - this.sizesCache[startIndex] > 0) {
            // fisrt item is not fully in view
            startIndex++;
        }
        var /** @type {?} */ endIndex = this.getIndexAt(position + parseInt(this.igxForContainerSize, 10), this.sizesCache, 0);
        return endIndex - startIndex;
    };
    /**
     * Returns a reference to the horizontal scrollbar DOM element.
     * ```typescript
     * this.parentVirtDir.getHorizontalScroll();
     * ```
     * @return {?}
     */
    IgxForOfDirective.prototype.getHorizontalScroll = /**
     * Returns a reference to the horizontal scrollbar DOM element.
     * ```typescript
     * this.parentVirtDir.getHorizontalScroll();
     * ```
     * @return {?}
     */
    function () {
        return this.getElement(this._viewContainer, 'igx-horizontal-virtual-helper') || this.hScroll;
    };
    /**
     * Returns the size of the element at the specified index.
     * ```typescript
     * this.parentVirtDir.getSizeAt(1);
     * ```
     * @param {?} index
     * @return {?}
     */
    IgxForOfDirective.prototype.getSizeAt = /**
     * Returns the size of the element at the specified index.
     * ```typescript
     * this.parentVirtDir.getSizeAt(1);
     * ```
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.sizesCache[index + 1] - this.sizesCache[index];
    };
    /**
     * @hidden
     * Function that is called when scrolling vertically
     */
    /**
     * @hidden
     * Function that is called when scrolling vertically
     * @param {?} event
     * @return {?}
     */
    IgxForOfDirective.prototype.onScroll = /**
     * @hidden
     * Function that is called when scrolling vertically
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /* in certain situations this may be called when no scrollbar is visible */
        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {
            return;
        }
        var /** @type {?} */ containerSize = parseInt(this.igxForContainerSize, 10);
        var /** @type {?} */ maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;
        var /** @type {?} */ realPercentScrolled = event.target.scrollTop / maxRealScrollTop;
        if (!this._bScrollInternal) {
            var /** @type {?} */ maxVirtScrollTop = this._virtHeight - containerSize;
            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;
        }
        else {
            this._bScrollInternal = false;
        }
        var /** @type {?} */ prevStartIndex = this.state.startIndex;
        var /** @type {?} */ scrollOffset = this.fixedUpdateAllRows(this._virtScrollTop);
        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';
        requestAnimationFrame(function () {
            // check if height/width has changes in views.
            // check if height/width has changes in views.
            _this.recalcUpdateSizes();
        });
        this.dc.changeDetectorRef.detectChanges();
        if (prevStartIndex !== this.state.startIndex) {
            this.onChunkLoad.emit(this.state);
        }
    };
    /**
     * @hidden
     * Function that recaculates and updates cache sizes.
     * @return {?}
     */
    IgxForOfDirective.prototype.recalcUpdateSizes = /**
     * @hidden
     * Function that recaculates and updates cache sizes.
     * @return {?}
     */
    function () {
        var /** @type {?} */ dimension = this.igxForScrollOrientation === 'horizontal' ?
            'width' : 'height';
        var /** @type {?} */ diffs = [];
        var /** @type {?} */ totalDiff = 0;
        for (var /** @type {?} */ i = 0; i < this._embeddedViews.length; i++) {
            var /** @type {?} */ view = this._embeddedViews[i];
            var /** @type {?} */ rNode = view.rootNodes.find(function (node) { return node.nodeType === Node.ELEMENT_NODE; });
            if (rNode) {
                var /** @type {?} */ h = Math.max(rNode.offsetHeight, rNode.clientHeight, parseInt(this.igxForItemSize, 10));
                var /** @type {?} */ index = this.state.startIndex + i;
                if (!this.isRemote && !this.igxForOf[index]) {
                    continue;
                }
                var /** @type {?} */ oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];
                var /** @type {?} */ newVal = dimension === 'height' ? h : rNode.clientWidth;
                if (dimension === 'height') {
                    this.heightCache[index] = newVal;
                }
                else {
                    this.igxForOf[index][dimension] = newVal;
                }
                var /** @type {?} */ currDiff = newVal - oldVal;
                diffs.push(currDiff);
                totalDiff += currDiff;
                this.sizesCache[index + 1] += totalDiff;
            }
        }
        // update cache
        if (Math.abs(totalDiff) > 0) {
            for (var /** @type {?} */ j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {
                this.sizesCache[j] += totalDiff;
            }
            // update scrBar heights/widths
            if (this.igxForScrollOrientation === 'horizontal') {
                var /** @type {?} */ totalWidth = parseInt(this.hScroll.children[0].style.width, 10) + totalDiff;
                this.hScroll.children[0].style.width = totalWidth + 'px';
            }
            var /** @type {?} */ reducer = function (acc, val) { return acc + val; };
            if (this.igxForScrollOrientation === 'vertical') {
                var /** @type {?} */ scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;
                var /** @type {?} */ hSum = this.heightCache.reduce(reducer);
                if (hSum > this._maxHeight) {
                    this._virtHeightRatio = hSum / this._maxHeight;
                }
                this.vh.instance.height = Math.min(this.vh.instance.height + totalDiff, this._maxHeight);
                this._virtHeight = hSum;
                if (!this.vh.instance.destroyed) {
                    this.vh.instance.cdr.detectChanges();
                }
                if (scrToBottom && !this._isAtBottomIndex) {
                    var /** @type {?} */ containerSize = parseInt(this.igxForContainerSize, 10);
                    var /** @type {?} */ scrollOffset = this.fixedUpdateAllRows(this._virtHeight - containerSize);
                    this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';
                    return;
                }
                if (this._adjustToIndex) {
                    // in case scrolled to specific index where after scroll heights are changed
                    // need to adjust the offsets so that item is last in view.
                    var /** @type {?} */ updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;
                    var /** @type {?} */ sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);
                    var /** @type {?} */ currOffset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);
                    this.dc.instance._viewContainer.element.nativeElement.style.top = (currOffset - sumDiffs) + 'px';
                    this._adjustToIndex = null;
                }
            }
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} inScrollTop
     * @return {?}
     */
    IgxForOfDirective.prototype.fixedUpdateAllRows = /**
     * @hidden
     * @param {?} inScrollTop
     * @return {?}
     */
    function (inScrollTop) {
        var /** @type {?} */ embeddedViewCopy = Object.assign([], this._embeddedViews);
        var /** @type {?} */ count = this.isRemote ? this.totalItemCount : this.igxForOf.length;
        var /** @type {?} */ ind = this.getIndexAt(inScrollTop, this.sizesCache, 0);
        // floating point number calculations are flawed so we need to handle rounding errors.
        var /** @type {?} */ currIndex = ind % 1 > 0.999 ? Math.round(ind) : Math.floor(ind);
        var /** @type {?} */ endingIndex = this.state.chunkSize + currIndex;
        if (endingIndex > count) {
            currIndex = count - this.state.chunkSize;
        }
        // We update the startIndex before recalculating the chunkSize.
        var /** @type {?} */ bUpdatedStart = this.state.startIndex !== currIndex;
        this.state.startIndex = currIndex;
        if (bUpdatedStart) {
            this.onChunkPreload.emit(this.state);
        }
        if (this.isRemote) {
            return inScrollTop - this.sizesCache[this.state.startIndex];
        }
        for (var /** @type {?} */ i = this.state.startIndex; i < endingIndex && this.igxForOf[i] !== undefined; i++) {
            var /** @type {?} */ input = this.igxForOf[i];
            var /** @type {?} */ embView = embeddedViewCopy.shift();
            var /** @type {?} */ cntx = (/** @type {?} */ (embView)).context;
            cntx.$implicit = input;
            cntx.index = this.igxForOf.indexOf(input);
        }
        var /** @type {?} */ scrOffset = inScrollTop - this.sizesCache[this.state.startIndex];
        return scrOffset;
    };
    /**
     * @hidden
     * Function that is called when scrolling horizontally
     */
    /**
     * @hidden
     * Function that is called when scrolling horizontally
     * @param {?} event
     * @return {?}
     */
    IgxForOfDirective.prototype.onHScroll = /**
     * @hidden
     * Function that is called when scrolling horizontally
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /* in certain situations this may be called when no scrollbar is visible */
        if (!parseInt(this.hScroll.children[0].style.width, 10)) {
            return;
        }
        var /** @type {?} */ curScrollLeft = event.target.scrollLeft;
        var /** @type {?} */ prevStartIndex = this.state.startIndex;
        // Updating horizontal chunks
        var /** @type {?} */ scrollOffset = this.fixedUpdateAllCols(curScrollLeft);
        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';
        this.dc.changeDetectorRef.detectChanges();
        if (prevStartIndex !== this.state.startIndex) {
            this.onChunkLoad.emit(this.state);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} inScrollLeft
     * @return {?}
     */
    IgxForOfDirective.prototype.fixedUpdateAllCols = /**
     * @hidden
     * @param {?} inScrollLeft
     * @return {?}
     */
    function (inScrollLeft) {
        var /** @type {?} */ startIndex = this.getIndexAt(inScrollLeft, this.sizesCache, 0);
        var /** @type {?} */ bUpdatedStart = this.state.startIndex !== startIndex;
        if (bUpdatedStart) {
            this.onChunkPreload.emit(this.state);
        }
        /*recalculate and apply page size.*/
        if (startIndex + this.state.chunkSize > this.igxForOf.length) {
            this.state.startIndex = this.igxForOf.length - this.state.chunkSize;
        }
        else {
            this.state.startIndex = startIndex;
        }
        var /** @type {?} */ embeddedViewCopy = Object.assign([], this._embeddedViews);
        var /** @type {?} */ endingIndex = this.state.chunkSize + this.state.startIndex;
        for (var /** @type {?} */ i = this.state.startIndex; i < endingIndex && this.igxForOf[i] !== undefined; i++) {
            var /** @type {?} */ input = this.igxForOf[i];
            var /** @type {?} */ embView = embeddedViewCopy.shift();
            var /** @type {?} */ cntx = (/** @type {?} */ (embView)).context;
            cntx.$implicit = input;
            cntx.index = this.igxForOf.indexOf(input);
        }
        var /** @type {?} */ count = this.isRemote ? this.totalItemCount : this.igxForOf.length;
        var /** @type {?} */ scrollWidth = parseInt(this.hScroll.children[0].style.width, 10);
        var /** @type {?} */ scrOffset = inScrollLeft - this.sizesCache[this.state.startIndex];
        return scrOffset;
    };
    Object.defineProperty(IgxForOfDirective.prototype, "igxForTrackBy", {
        get: /**
         * Gets the function used to track changes in the items collection.
         * By default the object references are compared. However this can be optimized if you have unique identifier
         * value that can be used for the comparison instead of the object ref or if you have some other property values
         * in the item object that should be tracked for changes.
         * This option is similar to ngForTrackBy.
         * ```typescript
         * const trackFunc = this.parentVirtDir.igxForTrackBy;
         * ```
         * @return {?}
         */
        function () { return this._trackByFn; },
        /**
         * Sets the function used to track changes in the items collection.
         * This function can be set in scenarios where you want to optimize or
         * customize the tracking of changes for the items in the collection.
         * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.
         * ```typescript
         * this.parentVirtDir.igxForTrackBy = (index, item) => {
         *      return item.id + item.width;
         * };
         * ```
         */
        set: /**
         * Sets the function used to track changes in the items collection.
         * This function can be set in scenarios where you want to optimize or
         * customize the tracking of changes for the items in the collection.
         * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.
         * ```typescript
         * this.parentVirtDir.igxForTrackBy = (index, item) => {
         *      return item.id + item.width;
         * };
         * ```
         * @param {?} fn
         * @return {?}
         */
        function (fn) { this._trackByFn = fn; },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    IgxForOfDirective.prototype._applyChanges = /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var /** @type {?} */ prevChunkSize = this.state.chunkSize;
        this.applyChunkSizeChange();
        this._recalcScrollBarSize();
        if (this.igxForOf && this.igxForOf.length && this.dc) {
            var /** @type {?} */ embeddedViewCopy = Object.assign([], this._embeddedViews);
            var /** @type {?} */ startIndex = this.state.startIndex;
            var /** @type {?} */ endIndex = this.state.chunkSize + this.state.startIndex;
            if (this.isRemote) {
                startIndex = 0;
                endIndex = this.igxForOf.length;
            }
            for (var /** @type {?} */ i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {
                var /** @type {?} */ input = this.igxForOf[i];
                var /** @type {?} */ embView = embeddedViewCopy.shift();
                var /** @type {?} */ cntx = (/** @type {?} */ (embView)).context;
                cntx.$implicit = input;
                cntx.index = this.igxForOf.indexOf(input);
            }
            this.dc.changeDetectorRef.detectChanges();
            if (prevChunkSize !== this.state.chunkSize) {
                this.onChunkLoad.emit(this.state);
            }
            if (this.igxForScrollOrientation === 'vertical') {
                this.recalcUpdateSizes();
            }
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxForOfDirective.prototype._calcMaxBrowserHeight = /**
     * @hidden
     * @return {?}
     */
    function () {
        var /** @type {?} */ div = document.createElement('div');
        var /** @type {?} */ style = div.style;
        style.position = 'absolute';
        style.top = '9999999999999999px';
        document.body.appendChild(div);
        var /** @type {?} */ size = Math.abs(div.getBoundingClientRect()['top']);
        document.body.removeChild(div);
        return size;
    };
    /**
     * @hidden
     * Recalculates the chunkSize based on current startIndex and returns the new size.
     * This should be called after this.state.startIndex is updated, not before.
     */
    /**
     * @hidden
     * Recalculates the chunkSize based on current startIndex and returns the new size.
     * This should be called after this.state.startIndex is updated, not before.
     * @return {?}
     */
    IgxForOfDirective.prototype._calculateChunkSize = /**
     * @hidden
     * Recalculates the chunkSize based on current startIndex and returns the new size.
     * This should be called after this.state.startIndex is updated, not before.
     * @return {?}
     */
    function () {
        var /** @type {?} */ chunkSize = 0;
        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {
            if (!this.sizesCache) {
                this.initSizesCache(this.igxForOf);
            }
            chunkSize = this._calcMaxChunkSize();
            if (this.igxForOf && chunkSize > this.igxForOf.length) {
                chunkSize = this.igxForOf.length;
            }
        }
        else {
            if (this.igxForOf) {
                chunkSize = this.igxForOf.length;
            }
        }
        return chunkSize;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} viewref
     * @param {?} nodeName
     * @return {?}
     */
    IgxForOfDirective.prototype.getElement = /**
     * @hidden
     * @param {?} viewref
     * @param {?} nodeName
     * @return {?}
     */
    function (viewref, nodeName) {
        var /** @type {?} */ elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);
        return elem.length > 0 ? elem[0] : null;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} items
     * @return {?}
     */
    IgxForOfDirective.prototype.initSizesCache = /**
     * @hidden
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var /** @type {?} */ totalSize = 0;
        var /** @type {?} */ size = 0;
        var /** @type {?} */ dimension = this.igxForScrollOrientation === 'horizontal' ?
            'width' : 'height';
        var /** @type {?} */ i = 0;
        this.sizesCache = [];
        this.heightCache = [];
        this.sizesCache.push(0);
        var /** @type {?} */ count = this.isRemote ? this.totalItemCount : items.length;
        for (i; i < count; i++) {
            if (dimension === 'height') {
                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;
                size = parseInt(this.igxForItemSize, 10) || 0;
                this.heightCache.push(size);
            }
            else {
                size = parseInt(items[i][dimension], 10) || 0;
            }
            totalSize += size;
            this.sizesCache.push(totalSize);
        }
        return totalSize;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxForOfDirective.prototype._calcMaxChunkSize = /**
     * @hidden
     * @return {?}
     */
    function () {
        var /** @type {?} */ i = 0;
        var /** @type {?} */ length = 0;
        var /** @type {?} */ maxLength = 0;
        var /** @type {?} */ arr = [];
        var /** @type {?} */ sum = 0;
        var /** @type {?} */ dimension = this.igxForScrollOrientation === 'horizontal' ?
            'width' : 'height';
        var /** @type {?} */ reducer = function (accumulator, currentItem) { return accumulator + parseInt(currentItem[dimension], 10); };
        var /** @type {?} */ availableSize = parseInt(this.igxForContainerSize, 10);
        for (i; i < this.igxForOf.length; i++) {
            var /** @type {?} */ item = this.igxForOf[i];
            if (dimension === 'height') {
                item = { value: this.igxForOf[i], height: this.heightCache[i] };
            }
            var /** @type {?} */ size = dimension === 'height' ?
                this.heightCache[i] :
                parseInt(item[dimension], 10);
            sum = arr.reduce(reducer, size);
            if (sum <= availableSize) {
                arr.push(item);
                length = arr.length;
                if (i === this.igxForOf.length - 1) {
                    // reached end without exceeding
                    // include prev items until size is filled or first item is reached.
                    var /** @type {?} */ prevIndex = this.igxForOf.indexOf(arr[0]) - 1;
                    while (prevIndex >= 0 && sum <= availableSize) {
                        prevIndex = this.igxForOf.indexOf(arr[0]) - 1;
                        var /** @type {?} */ prevItem = this.igxForOf[prevIndex];
                        var /** @type {?} */ prevSize = dimension === 'height' ?
                            this.heightCache[prevIndex] :
                            parseInt(prevItem[dimension], 10);
                        sum = arr.reduce(reducer, prevSize);
                        arr.unshift(prevItem);
                        length = arr.length;
                    }
                }
            }
            else {
                arr.push(item);
                length = dimension === 'width' ? arr.length + 1 : arr.length;
                if (dimension === 'height' && sum - availableSize < parseInt(this.igxForItemSize, 10)) {
                    // add one more for vertical smooth scroll
                    length++;
                }
                arr.splice(0, 1);
            }
            if (length > maxLength) {
                maxLength = length;
            }
        }
        return maxLength;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} left
     * @param {?} set
     * @param {?} index
     * @return {?}
     */
    IgxForOfDirective.prototype.getIndexAt = /**
     * @hidden
     * @param {?} left
     * @param {?} set
     * @param {?} index
     * @return {?}
     */
    function (left, set, index) {
        var /** @type {?} */ start = 0;
        var /** @type {?} */ end = set.length - 1;
        if (left === 0) {
            return 0;
        }
        while (start <= end) {
            var /** @type {?} */ midIdx = Math.floor((start + end) / 2);
            var /** @type {?} */ midLeft = set[midIdx];
            var /** @type {?} */ cmp = left - midLeft;
            if (cmp > 0) {
                start = midIdx + 1;
            }
            else if (cmp < 0) {
                end = midIdx - 1;
            }
            else {
                return midIdx;
            }
        }
        return end;
    };
    /**
     * @return {?}
     */
    IgxForOfDirective.prototype._recalcScrollBarSize = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);
        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);
        if (this.igxForScrollOrientation === 'horizontal') {
            var /** @type {?} */ totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;
            this.hScroll.style.width = this.igxForContainerSize + 'px';
            this.hScroll.children[0].style.width = totalWidth + 'px';
        }
        if (this.igxForScrollOrientation === 'vertical') {
            this.vh.instance.elementRef.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';
            this.vh.instance.height = this._calcHeight();
        }
    };
    /**
     * @return {?}
     */
    IgxForOfDirective.prototype._calcHeight = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ height = this.initSizesCache(this.igxForOf);
        this._virtHeight = height;
        if (height > this._maxHeight) {
            this._virtHeightRatio = height / this._maxHeight;
            height = this._maxHeight;
        }
        return height;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgxForOfDirective.prototype._recalcOnContainerChange = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';
        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';
        var /** @type {?} */ prevChunkSize = this.state.chunkSize;
        this.applyChunkSizeChange();
        this._recalcScrollBarSize();
        if (prevChunkSize !== this.state.chunkSize) {
            this.onChunkLoad.emit(this.state);
        }
        if (this.sizesCache && this.hScroll && this.hScroll.scrollLeft !== 0) {
            // Updating horizontal chunks and offsets based on the new scrollLeft
            var /** @type {?} */ scrollOffset = this.fixedUpdateAllCols(this.hScroll.scrollLeft);
            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';
        }
    };
    /**
     * @hidden
     * Removes an elemenet from the embedded views and updates chunkSize.
     */
    /**
     * @hidden
     * Removes an elemenet from the embedded views and updates chunkSize.
     * @return {?}
     */
    IgxForOfDirective.prototype.removeLastElem = /**
     * @hidden
     * Removes an elemenet from the embedded views and updates chunkSize.
     * @return {?}
     */
    function () {
        var /** @type {?} */ oldElem = this._embeddedViews.pop();
        oldElem.destroy();
        this.state.chunkSize--;
    };
    /**
     * @hidden
     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize
     */
    /**
     * @hidden
     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize
     * @return {?}
     */
    IgxForOfDirective.prototype.addLastElem = /**
     * @hidden
     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ elemIndex = this.state.startIndex + this.state.chunkSize;
        if (!this.isRemote && !this.igxForOf) {
            return;
        }
        if (elemIndex >= this.igxForOf.length) {
            elemIndex = this.igxForOf.length - this.state.chunkSize;
        }
        var /** @type {?} */ input = this.igxForOf[elemIndex];
        var /** @type {?} */ embeddedView = this.dc.instance._vcr.createEmbeddedView(this._template, { $implicit: input, index: elemIndex });
        this._embeddedViews.push(embeddedView);
        this.state.chunkSize++;
        this._zone.run(function () {
            _this.cdr.markForCheck();
        });
    };
    /**
     * Recalculates chunkSize and adds/removes elements if need due to the change.
     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()
     */
    /**
     * Recalculates chunkSize and adds/removes elements if need due to the change.
     * this.state.chunkSize is updated in \@addLastElem() or \@removeLastElem()
     * @return {?}
     */
    IgxForOfDirective.prototype.applyChunkSizeChange = /**
     * Recalculates chunkSize and adds/removes elements if need due to the change.
     * this.state.chunkSize is updated in \@addLastElem() or \@removeLastElem()
     * @return {?}
     */
    function () {
        var /** @type {?} */ chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();
        if (chunkSize > this.state.chunkSize) {
            var /** @type {?} */ diff = chunkSize - this.state.chunkSize;
            for (var /** @type {?} */ i = 0; i < diff; i++) {
                this.addLastElem();
            }
        }
        else if (chunkSize < this.state.chunkSize) {
            var /** @type {?} */ diff = this.state.chunkSize - chunkSize;
            for (var /** @type {?} */ i = 0; i < diff; i++) {
                this.removeLastElem();
            }
        }
    };
    /**
     * @return {?}
     */
    IgxForOfDirective.prototype._updateScrollOffset = /**
     * @return {?}
     */
    function () {
        if (this.igxForScrollOrientation === 'horizontal') {
            this._updateHScrollOffset();
        }
        else {
            this._updateVScrollOffset();
        }
    };
    /**
     * @return {?}
     */
    IgxForOfDirective.prototype._updateVScrollOffset = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ scrollOffset = 0;
        var /** @type {?} */ vScroll = this.vh.instance.elementRef.nativeElement;
        scrollOffset = vScroll && parseInt(vScroll.style.height, 10) ?
            vScroll.scrollTop - this.sizesCache[this.state.startIndex] : 0;
        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';
    };
    /**
     * @return {?}
     */
    IgxForOfDirective.prototype._updateHScrollOffset = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ scrollOffset = 0;
        scrollOffset = this.hScroll && parseInt(this.hScroll.children[0].style.width, 10) ?
            this.hScroll.scrollLeft - this.sizesCache[this.state.startIndex] : 0;
        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';
    };
    IgxForOfDirective.decorators = [
        { type: Directive, args: [{ selector: '[igxFor][igxForOf]' },] },
    ];
    /** @nocollapse */
    IgxForOfDirective.ctorParameters = function () { return [
        { type: ViewContainerRef, },
        { type: TemplateRef, },
        { type: IterableDiffers, },
        { type: ComponentFactoryResolver, },
        { type: ChangeDetectorRef, },
        { type: NgZone, },
    ]; };
    IgxForOfDirective.propDecorators = {
        "igxForOf": [{ type: Input },],
        "igxForScrollOrientation": [{ type: Input },],
        "igxForScrollContainer": [{ type: Input },],
        "igxForContainerSize": [{ type: Input },],
        "igxForItemSize": [{ type: Input },],
        "onChunkLoad": [{ type: Output },],
        "onChunkPreload": [{ type: Output },],
        "displayContiner": [{ type: ViewChild, args: [DisplayContainerComponent,] },],
        "virtualHelper": [{ type: ViewChild, args: [VirtualHelperComponent,] },],
        "igxForTrackBy": [{ type: Input },],
    };
    return IgxForOfDirective;
}());
export { IgxForOfDirective };
function IgxForOfDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxForOfDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxForOfDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxForOfDirective.propDecorators;
    /**
     * An \@Input property that sets the data to be rendered.
     * ```html
     * <ng-template igxFor let-item [igxForOf]="data" [igxForScrollOrientation]="'horizontal'"></ng-template>
     * ```
     * @type {?}
     */
    IgxForOfDirective.prototype.igxForOf;
    /**
     * An \@Input property that specifies the scroll orientation.
     * Scroll orientation can be "vertical" or "horizontal".
     * ```html
     * <ng-template igxFor let-item [igxForOf]="data" [igxForScrollOrientation]="'horizontal'"></ng-template>
     * ```
     * @type {?}
     */
    IgxForOfDirective.prototype.igxForScrollOrientation;
    /**
     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.
     * ```html
     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]="data"
     *       [igxForScrollOrientation]="'vertical'"
     *       [igxForContainerSize]="'500px'"
     *       [igxForItemSize]="'50px'"
     *       let-rowIndex="index">
     *       <div [style.display]="'flex'" [style.height]="'50px'">
     *           <ng-template #childContainer igxFor let-item [igxForOf]="data"
     *               [igxForScrollOrientation]="'horizontal'"
     *               [igxForScrollContainer]="parentVirtDir"
     *               [igxForContainerSize]="'500px'">
     *                   <div [style.min-width]="'50px'">{{rowIndex}} : {{item.text}}</div>
     *           </ng-template>
     *       </div>
     * </ng-template>
     * ```
     * @type {?}
     */
    IgxForOfDirective.prototype.igxForScrollContainer;
    /**
     * An \@Input property that sets the px-affixed size of the container along the axis of scrolling.
     * For "horizontal" orientation this value is the width of the container and for "vertical" is the height.
     * ```html
     * <ng-template igxFor let-item [igxForOf]="data" [igxForContainerSize]="'500px'"
     *      [igxForScrollOrientation]="'horizontal'">
     * </ng-template>
     * ```
     * @type {?}
     */
    IgxForOfDirective.prototype.igxForContainerSize;
    /**
     * An \@Input property that sets the px-affixed size of the item along the axis of scrolling.
     * For "horizontal" orientation this value is the width of the column and for "vertical" is the height or the row.
     * ```html
     * <ng-template igxFor let-item [igxForOf]="data" [igxForScrollOrientation]="'horizontal'" [igxForItemSize]="'50px'"></ng-template>
     * ```
     * @type {?}
     */
    IgxForOfDirective.prototype.igxForItemSize;
    /**
     * @hidden
     * @type {?}
     */
    IgxForOfDirective.prototype.dc;
    /**
     * The current state of the directive. It contains `startIndex` and `chunkSize`.
     * state.startIndex - The index of the item at which the current visible chunk begins.
     * state.chunkSize - The number of items the current visible chunk holds.
     * These options can be used when implementing remote virtualization as they provide the necessary state information.
     * ```typescript
     * const gridState = this.parentVirtDir.state;
     * ```
     * @type {?}
     */
    IgxForOfDirective.prototype.state;
    /**
     * The total count of the virtual data items, when using remote service.
     * ```typescript
     * this.parentVirtDir.totalItemCount = data.Count;
     * ```
     * @type {?}
     */
    IgxForOfDirective.prototype.totalItemCount;
    /**
     * An event that is emitted after a new chunk has been loaded.
     * ```html
     * <ng-template igxFor [igxForOf]="data" [igxForScrollOrientation]="'horizontal'" (onChunkLoad)="chunkLoad($event)"></ng-template>
     * ```
     * ```typescript
     * chunkLoad(e){
     * alert("chunk loaded!");
     * }
     * ```
     * @type {?}
     */
    IgxForOfDirective.prototype.onChunkLoad;
    /**
     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.
     * Can be used for implementing remote load on demand for the igxFor data.
     * ```html
     * <ng-template igxFor [igxForOf]="data" [igxForScrollOrientation]="'horizontal'" (onChunkPreload)="chunkPreload($event)"></ng-template>
     * ```
     * ```typescript
     * chunkPreload(e){
     * alert("chunk is loading!");
     * }
     * ```
     * @type {?}
     */
    IgxForOfDirective.prototype.onChunkPreload;
    /** @type {?} */
    IgxForOfDirective.prototype.hScroll;
    /** @type {?} */
    IgxForOfDirective.prototype.func;
    /** @type {?} */
    IgxForOfDirective.prototype.sizesCache;
    /** @type {?} */
    IgxForOfDirective.prototype.vh;
    /** @type {?} */
    IgxForOfDirective.prototype.hvh;
    /** @type {?} */
    IgxForOfDirective.prototype._differ;
    /** @type {?} */
    IgxForOfDirective.prototype._trackByFn;
    /** @type {?} */
    IgxForOfDirective.prototype.heightCache;
    /** @type {?} */
    IgxForOfDirective.prototype._adjustToIndex;
    /** @type {?} */
    IgxForOfDirective.prototype.extraRowApplied;
    /**
     * Maximum height for an element of the browser.
     * @type {?}
     */
    IgxForOfDirective.prototype._maxHeight;
    /**
     * Height that is being virtualized.
     * @type {?}
     */
    IgxForOfDirective.prototype._virtHeight;
    /**
     * Ratio for height that's being virtualizaed and the one visible
     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.
     * @type {?}
     */
    IgxForOfDirective.prototype._virtHeightRatio;
    /**
     * Internal track for scroll top that is being virtualized
     * @type {?}
     */
    IgxForOfDirective.prototype._virtScrollTop;
    /**
     * If the next onScroll event is triggered due to internal setting of scrollTop
     * @type {?}
     */
    IgxForOfDirective.prototype._bScrollInternal;
    /** @type {?} */
    IgxForOfDirective.prototype.displayContiner;
    /** @type {?} */
    IgxForOfDirective.prototype.virtualHelper;
    /** @type {?} */
    IgxForOfDirective.prototype._embeddedViews;
    /** @type {?} */
    IgxForOfDirective.prototype._viewContainer;
    /** @type {?} */
    IgxForOfDirective.prototype._template;
    /** @type {?} */
    IgxForOfDirective.prototype._differs;
    /** @type {?} */
    IgxForOfDirective.prototype.resolver;
    /** @type {?} */
    IgxForOfDirective.prototype.cdr;
    /** @type {?} */
    IgxForOfDirective.prototype._zone;
}
/**
 * @param {?} type
 * @return {?}
 */
export function getTypeNameForDebugging(type) {
    var /** @type {?} */ name = 'name';
    return type[name] || typeof type;
}
/**
 * @record
 */
export function IForOfState() { }
function IForOfState_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    IForOfState.prototype.startIndex;
    /** @type {?|undefined} */
    IForOfState.prototype.chunkSize;
}
/**
 * @template T
 */
var IgxGridForOfDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IgxGridForOfDirective, _super);
    function IgxGridForOfDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(IgxGridForOfDirective.prototype, "igxGridForOf", {
        get: /**
         * @return {?}
         */
        function () {
            return this.igxForOf;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.igxForOf = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridForOfDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.removeScrollEventListeners();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgxGridForOfDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var /** @type {?} */ forOf = 'igxGridForOf';
        if (forOf in changes) {
            var /** @type {?} */ value = changes[forOf].currentValue;
            if (!this._differ && value) {
                try {
                    this._differ = this._differs.find(value).create(this.igxForTrackBy);
                }
                catch (/** @type {?} */ e) {
                    throw new Error("Cannot find a differ supporting object \"" + value + "\" of type \"" + getTypeNameForDebugging(value) + "\".\n                     NgFor only supports binding to Iterables such as Arrays.");
                }
            }
        }
        var /** @type {?} */ defaultItemSize = 'igxForItemSize';
        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {
            // handle default item size changed.
            this.initSizesCache(this.igxForOf);
        }
        var /** @type {?} */ containerSize = 'igxForContainerSize';
        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {
            this._recalcOnContainerChange(changes);
        }
    };
    /**
     * @return {?}
     */
    IgxGridForOfDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this._differ) {
            var /** @type {?} */ changes = this._differ.diff(this.igxForOf);
            if (changes) {
                //  re-init cache.
                if (!this.igxForOf) {
                    return;
                }
                this.initSizesCache(this.igxForOf);
                this._applyChanges(changes);
                this.cdr.markForCheck();
                this._updateScrollOffset();
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxGridForOfDirective.prototype.onScroll = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {
            return;
        }
        var /** @type {?} */ containerSize = parseInt(this.igxForContainerSize, 10);
        var /** @type {?} */ maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;
        var /** @type {?} */ realPercentScrolled = event.target.scrollTop / maxRealScrollTop;
        if (!this._bScrollInternal) {
            var /** @type {?} */ maxVirtScrollTop = this._virtHeight - containerSize;
            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;
        }
        else {
            this._bScrollInternal = false;
        }
        var /** @type {?} */ scrollOffset = this.fixedUpdateAllRows(this._virtScrollTop);
        scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;
        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';
        requestAnimationFrame(function () {
            _this.recalcUpdateSizes();
        });
    };
    /**
     * @param {?} scrollAmount
     * @return {?}
     */
    IgxGridForOfDirective.prototype.onHScroll = /**
     * @param {?} scrollAmount
     * @return {?}
     */
    function (scrollAmount) {
        /* in certain situations this may be called when no scrollbar is visible */
        if (!this.hScroll || !parseInt(this.hScroll.children[0].style.width, 10)) {
            return;
        }
        // Updating horizontal chunks
        var /** @type {?} */ scrollOffset = this.fixedUpdateAllCols(scrollAmount);
        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';
    };
    /**
     * @return {?}
     */
    IgxGridForOfDirective.prototype.addLastElem = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ elemIndex = this.state.startIndex + this.state.chunkSize;
        if (!this.isRemote && !this.igxForOf) {
            return;
        }
        if (elemIndex >= this.igxForOf.length) {
            elemIndex = this.igxForOf.length - this.state.chunkSize;
        }
        var /** @type {?} */ input = this.igxForOf[elemIndex];
        var /** @type {?} */ embeddedView = this.dc.instance._vcr.createEmbeddedView(this._template, { $implicit: input, index: elemIndex });
        this._embeddedViews.push(embeddedView);
        this.state.chunkSize++;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IgxGridForOfDirective.prototype._applyChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        var /** @type {?} */ prevChunkSize = this.state.chunkSize;
        this.applyChunkSizeChange();
        this._recalcScrollBarSize();
        if (this.igxForOf && this.igxForOf.length && this.dc) {
            var /** @type {?} */ embeddedViewCopy = Object.assign([], this._embeddedViews);
            var /** @type {?} */ startIndex = this.state.startIndex;
            var /** @type {?} */ endIndex = this.state.chunkSize + this.state.startIndex;
            if (this.isRemote) {
                startIndex = 0;
                endIndex = this.igxForOf.length;
            }
            for (var /** @type {?} */ i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {
                var /** @type {?} */ input = this.igxForOf[i];
                var /** @type {?} */ embView = embeddedViewCopy.shift();
                var /** @type {?} */ cntx = (/** @type {?} */ (embView)).context;
                cntx.$implicit = input;
                cntx.index = this.igxForOf.indexOf(input);
            }
            if (prevChunkSize !== this.state.chunkSize) {
                this.onChunkLoad.emit(this.state);
            }
            if (this.igxForScrollOrientation === 'vertical') {
                requestAnimationFrame(function () {
                    _this.recalcUpdateSizes();
                });
            }
        }
    };
    IgxGridForOfDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxGridFor][igxGridForOf]'
                },] },
    ];
    /** @nocollapse */
    IgxGridForOfDirective.propDecorators = {
        "igxGridForOf": [{ type: Input },],
    };
    return IgxGridForOfDirective;
}(IgxForOfDirective));
export { IgxGridForOfDirective };
function IgxGridForOfDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridForOfDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridForOfDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxGridForOfDirective.propDecorators;
}
/**
 * The IgxForOfModule provides the {\@link IgxForOfDirective}, inside your application.
 */
var IgxForOfModule = /** @class */ (function () {
    function IgxForOfModule() {
    }
    IgxForOfModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],
                    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],
                    exports: [IgxForOfDirective, IgxGridForOfDirective],
                    imports: [IgxScrollInertiaModule, CommonModule]
                },] },
    ];
    return IgxForOfModule;
}());
export { IgxForOfModule };
function IgxForOfModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxForOfModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxForOfModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,