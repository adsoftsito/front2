/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { animate, animation, keyframes, style } from '@angular/animations';
import { EaseOut } from '../easings';
var /** @type {?} */ baseRecipe = [
    style({
        backfaceVisibility: 'hidden',
        transformStyle: 'preserve-3d'
    }),
    animate("{{duration}} {{delay}} {{easing}}", keyframes([
        style({
            offset: 0,
            transform: "translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)"
        }),
        style({
            offset: 1,
            transform: "translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)"
        })
    ]))
];
var /** @type {?} */ baseParams = {
    delay: '0s',
    duration: '600ms',
    easing: EaseOut.quad,
    endAngle: 180,
    endDistance: '0px',
    rotateX: 1,
    rotateY: 0,
    rotateZ: 0,
    startAngle: 0,
    startDistance: '0px'
};
var /** @type {?} */ flipTop = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams)
});
var /** @type {?} */ flipBottom = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { endAngle: -180 })
});
var /** @type {?} */ flipLeft = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { rotateX: 0, rotateY: 1 })
});
var /** @type {?} */ flipRight = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { endAngle: -180, rotateX: 0, rotateY: 1 })
});
var /** @type {?} */ flipHorFwd = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { endDistance: '170px' })
});
var /** @type {?} */ flipHorBck = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { endDistance: '-170px' })
});
var /** @type {?} */ flipVerFwd = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { endDistance: '170px', rotateX: 0, rotateY: 1 })
});
var /** @type {?} */ flipVerBck = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { endDistance: '-170px', rotateX: 0, rotateY: 1 })
});
export { flipTop, flipRight, flipBottom, flipLeft, flipHorFwd, flipHorBck, flipVerFwd, flipVerBck };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2FuaW1hdGlvbnMvZmxpcC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDSCxPQUFPLEVBQ1AsU0FBUyxFQUdULFNBQVMsRUFDVCxLQUFLLEVBQ1IsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQVUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRzdDLHFCQUFNLFVBQVUsR0FBd0I7SUFDcEMsS0FBSyxDQUFDO1FBQ0Ysa0JBQWtCLEVBQUUsUUFBUTtRQUM1QixjQUFjLEVBQUUsYUFBYTtLQUNoQyxDQUFDO0lBQ0YsT0FBTyxDQUNILG1DQUFtQyxFQUNuQyxTQUFTLENBQUM7UUFDTixLQUFLLENBQUM7WUFDRixNQUFNLEVBQUUsQ0FBQztZQUNULFNBQVMsRUFBRSxtSEFDd0Q7U0FDdEUsQ0FBQztRQUNGLEtBQUssQ0FBQztZQUNGLE1BQU0sRUFBRSxDQUFDO1lBQ1QsU0FBUyxFQUFFLCtHQUNzRDtTQUNwRSxDQUFDO0tBQ0wsQ0FBQyxDQUNMO0NBQ0osQ0FBQztBQUVGLHFCQUFNLFVBQVUsR0FBcUI7SUFDakMsS0FBSyxFQUFFLElBQUk7SUFDWCxRQUFRLEVBQUUsT0FBTztJQUNqQixNQUFNLEVBQUUsT0FBTyxDQUFDLElBQUk7SUFDcEIsUUFBUSxFQUFFLEdBQUc7SUFDYixXQUFXLEVBQUUsS0FBSztJQUNsQixPQUFPLEVBQUUsQ0FBQztJQUNWLE9BQU8sRUFBRSxDQUFDO0lBQ1YsT0FBTyxFQUFFLENBQUM7SUFDVixVQUFVLEVBQUUsQ0FBQztJQUNiLGFBQWEsRUFBRSxLQUFLO0NBQ3ZCLENBQUM7QUFFRixxQkFBTSxPQUFPLEdBQStCLFNBQVMsQ0FBQyxVQUFVLEVBQUU7SUFDOUQsTUFBTSx1QkFDQyxVQUFVLENBQ2hCO0NBQ0osQ0FBQyxDQUFDO0FBRUgscUJBQU0sVUFBVSxHQUErQixTQUFTLENBQUMsVUFBVSxFQUFFO0lBQ2pFLE1BQU0sdUJBQ0MsVUFBVSxJQUNiLFFBQVEsRUFBRSxDQUFDLEdBQUcsR0FDakI7Q0FDSixDQUFDLENBQUM7QUFFSCxxQkFBTSxRQUFRLEdBQStCLFNBQVMsQ0FBQyxVQUFVLEVBQUU7SUFDL0QsTUFBTSx1QkFDQyxVQUFVLElBQ2IsT0FBTyxFQUFFLENBQUMsRUFDVixPQUFPLEVBQUUsQ0FBQyxHQUNiO0NBQ0osQ0FBQyxDQUFDO0FBRUgscUJBQU0sU0FBUyxHQUErQixTQUFTLENBQUMsVUFBVSxFQUFFO0lBQ2hFLE1BQU0sdUJBQ0MsVUFBVSxJQUNiLFFBQVEsRUFBRSxDQUFDLEdBQUcsRUFDZCxPQUFPLEVBQUUsQ0FBQyxFQUNWLE9BQU8sRUFBRSxDQUFDLEdBQ2I7Q0FDSixDQUFDLENBQUM7QUFFSCxxQkFBTSxVQUFVLEdBQStCLFNBQVMsQ0FBQyxVQUFVLEVBQUU7SUFDakUsTUFBTSx1QkFDQyxVQUFVLElBQ2IsV0FBVyxFQUFFLE9BQU8sR0FDdkI7Q0FDSixDQUFDLENBQUM7QUFFSCxxQkFBTSxVQUFVLEdBQStCLFNBQVMsQ0FBQyxVQUFVLEVBQUU7SUFDakUsTUFBTSx1QkFDQyxVQUFVLElBQ2IsV0FBVyxFQUFFLFFBQVEsR0FDeEI7Q0FDSixDQUFDLENBQUM7QUFFSCxxQkFBTSxVQUFVLEdBQStCLFNBQVMsQ0FBQyxVQUFVLEVBQUU7SUFDakUsTUFBTSx1QkFDQyxVQUFVLElBQ2IsV0FBVyxFQUFFLE9BQU8sRUFDcEIsT0FBTyxFQUFFLENBQUMsRUFDVixPQUFPLEVBQUUsQ0FBQyxHQUNiO0NBQ0osQ0FBQyxDQUFDO0FBRUgscUJBQU0sVUFBVSxHQUErQixTQUFTLENBQUMsVUFBVSxFQUFFO0lBQ2pFLE1BQU0sdUJBQ0MsVUFBVSxJQUNiLFdBQVcsRUFBRSxRQUFRLEVBQ3JCLE9BQU8sRUFBRSxDQUFDLEVBQ1YsT0FBTyxFQUFFLENBQUMsR0FDYjtDQUNKLENBQUMsQ0FBQztBQUVILE9BQU8sRUFDSCxPQUFPLEVBQ1AsU0FBUyxFQUNULFVBQVUsRUFDVixRQUFRLEVBQ1IsVUFBVSxFQUNWLFVBQVUsRUFDVixVQUFVLEVBQ1YsVUFBVSxFQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIGFuaW1hdGUsXG4gICAgYW5pbWF0aW9uLFxuICAgIEFuaW1hdGlvbk1ldGFkYXRhLFxuICAgIEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhLFxuICAgIGtleWZyYW1lcyxcbiAgICBzdHlsZVxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IEVhc2VJbiwgRWFzZU91dCB9IGZyb20gJy4uL2Vhc2luZ3MnO1xuaW1wb3J0IHsgSUFuaW1hdGlvblBhcmFtcyB9IGZyb20gJy4uL21haW4nO1xuXG5jb25zdCBiYXNlUmVjaXBlOiBBbmltYXRpb25NZXRhZGF0YVtdID0gW1xuICAgIHN0eWxlKHtcbiAgICAgICAgYmFja2ZhY2VWaXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAgICAgdHJhbnNmb3JtU3R5bGU6ICdwcmVzZXJ2ZS0zZCdcbiAgICB9KSxcbiAgICBhbmltYXRlKFxuICAgICAgICBge3tkdXJhdGlvbn19IHt7ZGVsYXl9fSB7e2Vhc2luZ319YCxcbiAgICAgICAga2V5ZnJhbWVzKFtcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWih7e3N0YXJ0RGlzdGFuY2V9fSlcbiAgICAgICAgICAgICAgICByb3RhdGUzZCh7e3JvdGF0ZVh9fSwge3tyb3RhdGVZfX0sIHt7cm90YXRlWn19LCB7e3N0YXJ0QW5nbGV9fWRlZylgXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHN0eWxlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWih7e2VuZERpc3RhbmNlfX0pXG4gICAgICAgICAgICAgICAgcm90YXRlM2Qoe3tyb3RhdGVYfX0sIHt7cm90YXRlWX19LCB7e3JvdGF0ZVp9fSwge3tlbmRBbmdsZX19ZGVnKWBcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgKVxuXTtcblxuY29uc3QgYmFzZVBhcmFtczogSUFuaW1hdGlvblBhcmFtcyA9IHtcbiAgICBkZWxheTogJzBzJyxcbiAgICBkdXJhdGlvbjogJzYwMG1zJyxcbiAgICBlYXNpbmc6IEVhc2VPdXQucXVhZCxcbiAgICBlbmRBbmdsZTogMTgwLFxuICAgIGVuZERpc3RhbmNlOiAnMHB4JyxcbiAgICByb3RhdGVYOiAxLFxuICAgIHJvdGF0ZVk6IDAsXG4gICAgcm90YXRlWjogMCxcbiAgICBzdGFydEFuZ2xlOiAwLFxuICAgIHN0YXJ0RGlzdGFuY2U6ICcwcHgnXG59O1xuXG5jb25zdCBmbGlwVG9wOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlUmVjaXBlLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmJhc2VQYXJhbXNcbiAgICB9XG59KTtcblxuY29uc3QgZmxpcEJvdHRvbTogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5iYXNlUGFyYW1zLFxuICAgICAgICBlbmRBbmdsZTogLTE4MFxuICAgIH1cbn0pO1xuXG5jb25zdCBmbGlwTGVmdDogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5iYXNlUGFyYW1zLFxuICAgICAgICByb3RhdGVYOiAwLFxuICAgICAgICByb3RhdGVZOiAxXG4gICAgfVxufSk7XG5cbmNvbnN0IGZsaXBSaWdodDogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5iYXNlUGFyYW1zLFxuICAgICAgICBlbmRBbmdsZTogLTE4MCxcbiAgICAgICAgcm90YXRlWDogMCxcbiAgICAgICAgcm90YXRlWTogMVxuICAgIH1cbn0pO1xuXG5jb25zdCBmbGlwSG9yRndkOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlUmVjaXBlLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmJhc2VQYXJhbXMsXG4gICAgICAgIGVuZERpc3RhbmNlOiAnMTcwcHgnXG4gICAgfVxufSk7XG5cbmNvbnN0IGZsaXBIb3JCY2s6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcbiAgICAgICAgZW5kRGlzdGFuY2U6ICctMTcwcHgnXG4gICAgfVxufSk7XG5cbmNvbnN0IGZsaXBWZXJGd2Q6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcbiAgICAgICAgZW5kRGlzdGFuY2U6ICcxNzBweCcsXG4gICAgICAgIHJvdGF0ZVg6IDAsXG4gICAgICAgIHJvdGF0ZVk6IDFcbiAgICB9XG59KTtcblxuY29uc3QgZmxpcFZlckJjazogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5iYXNlUGFyYW1zLFxuICAgICAgICBlbmREaXN0YW5jZTogJy0xNzBweCcsXG4gICAgICAgIHJvdGF0ZVg6IDAsXG4gICAgICAgIHJvdGF0ZVk6IDFcbiAgICB9XG59KTtcblxuZXhwb3J0IHtcbiAgICBmbGlwVG9wLFxuICAgIGZsaXBSaWdodCxcbiAgICBmbGlwQm90dG9tLFxuICAgIGZsaXBMZWZ0LFxuICAgIGZsaXBIb3JGd2QsXG4gICAgZmxpcEhvckJjayxcbiAgICBmbGlwVmVyRndkLFxuICAgIGZsaXBWZXJCY2tcbn07XG4iXX0=