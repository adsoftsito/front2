/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * Provides base filtering operations
 * Implementations should be Singleton
 *
 * @export
 */
var /**
 * Provides base filtering operations
 * Implementations should be Singleton
 *
 * @export
 */
IgxFilteringOperand = /** @class */ (function () {
    function IgxFilteringOperand() {
        this.operations = [{
                name: 'null',
                isUnary: true,
                iconName: 'is_null',
                logic: function (target) {
                    return target === null;
                }
            }, {
                name: 'notNull',
                isUnary: true,
                iconName: 'is_not_null',
                logic: function (target) {
                    return target !== null;
                }
            }];
    }
    /**
     * @return {?}
     */
    IgxFilteringOperand.prototype.conditionList = /**
     * @return {?}
     */
    function () {
        return this.operations.map(function (element) { return element.name; });
    };
    /**
     * @param {?} name
     * @return {?}
     */
    IgxFilteringOperand.prototype.condition = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.operations.find(function (element) { return element.name === name; });
    };
    /**
     * @param {?} operation
     * @return {?}
     */
    IgxFilteringOperand.prototype.append = /**
     * @param {?} operation
     * @return {?}
     */
    function (operation) {
        this.operations.push(operation);
    };
    return IgxFilteringOperand;
}());
/**
 * Provides base filtering operations
 * Implementations should be Singleton
 *
 * @export
 */
export { IgxFilteringOperand };
function IgxFilteringOperand_tsickle_Closure_declarations() {
    /** @type {?} */
    IgxFilteringOperand.prototype.operations;
}
/**
 * Provides filtering operations for booleans
 *
 * @export
 */
var IgxBooleanFilteringOperand = /** @class */ (function (_super) {
    tslib_1.__extends(IgxBooleanFilteringOperand, _super);
    function IgxBooleanFilteringOperand() {
        var _this = _super.call(this) || this;
        _this.operations = [{
                name: 'all',
                isUnary: true,
                iconName: 'all',
                logic: function (target) {
                    return true;
                }
            }, {
                name: 'true',
                isUnary: true,
                iconName: 'is_true',
                logic: function (target) {
                    return !!(target && target !== null && target !== undefined);
                }
            }, {
                name: 'false',
                isUnary: true,
                iconName: 'is_false',
                logic: function (target) {
                    return !target && target !== null && target !== undefined;
                }
            }, {
                name: 'empty',
                isUnary: true,
                iconName: 'empty',
                logic: function (target) {
                    return target === null || target === undefined;
                }
            }, {
                name: 'notEmpty',
                isUnary: true,
                iconName: 'not_empty',
                logic: function (target) {
                    return target !== null && target !== undefined;
                }
            }].concat(_this.operations);
        return _this;
    }
    /**
     * @return {?}
     */
    IgxBooleanFilteringOperand.instance = /**
     * @return {?}
     */
    function () {
        return this._instance || (this._instance = new this());
    };
    IgxBooleanFilteringOperand._instance = null;
    return IgxBooleanFilteringOperand;
}(IgxFilteringOperand));
export { IgxBooleanFilteringOperand };
function IgxBooleanFilteringOperand_tsickle_Closure_declarations() {
    /** @type {?} */
    IgxBooleanFilteringOperand._instance;
}
/**
 * Provides filtering operations for Dates
 *
 * @export
 */
var IgxDateFilteringOperand = /** @class */ (function (_super) {
    tslib_1.__extends(IgxDateFilteringOperand, _super);
    function IgxDateFilteringOperand() {
        var _this = _super.call(this) || this;
        _this.operations = [{
                name: 'equals',
                isUnary: false,
                iconName: 'equals',
                logic: function (target, searchVal) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var /** @type {?} */ targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');
                    var /** @type {?} */ searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');
                    return targetp.year === searchp.year &&
                        targetp.month === searchp.month &&
                        targetp.day === searchp.day;
                }
            }, {
                name: 'doesNotEqual',
                isUnary: false,
                iconName: 'not_equal',
                logic: function (target, searchVal) {
                    if (!target) {
                        return true;
                    }
                    _this.validateInputData(target);
                    var /** @type {?} */ targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');
                    var /** @type {?} */ searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');
                    return targetp.year !== searchp.year ||
                        targetp.month !== searchp.month ||
                        targetp.day !== searchp.day;
                }
            }, {
                name: 'before',
                isUnary: false,
                iconName: 'is_before',
                logic: function (target, searchVal) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    return target < searchVal;
                }
            }, {
                name: 'after',
                isUnary: false,
                iconName: 'is_after',
                logic: function (target, searchVal) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    return target > searchVal;
                }
            }, {
                name: 'today',
                isUnary: true,
                iconName: 'today',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var /** @type {?} */ d = IgxDateFilteringOperand.getDateParts(target, 'yMd');
                    var /** @type {?} */ now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');
                    return d.year === now.year &&
                        d.month === now.month &&
                        d.day === now.day;
                }
            }, {
                name: 'yesterday',
                isUnary: true,
                iconName: 'yesterday',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var /** @type {?} */ td = IgxDateFilteringOperand.getDateParts(target, 'yMd');
                    var /** @type {?} */ y = (function (d) { return new Date(d.setDate(d.getDate() - 1)); })(new Date());
                    var /** @type {?} */ yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');
                    return td.year === yesterday.year &&
                        td.month === yesterday.month &&
                        td.day === yesterday.day;
                }
            }, {
                name: 'thisMonth',
                isUnary: true,
                iconName: 'this_month',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var /** @type {?} */ d = IgxDateFilteringOperand.getDateParts(target, 'yM');
                    var /** @type {?} */ now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');
                    return d.year === now.year &&
                        d.month === now.month;
                }
            }, {
                name: 'lastMonth',
                isUnary: true,
                iconName: 'last_month',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var /** @type {?} */ d = IgxDateFilteringOperand.getDateParts(target, 'yM');
                    var /** @type {?} */ now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');
                    if (!now.month) {
                        now.month = 11;
                        now.year -= 1;
                    }
                    else {
                        now.month--;
                    }
                    return d.year === now.year &&
                        d.month === now.month;
                }
            }, {
                name: 'nextMonth',
                isUnary: true,
                iconName: 'next_month',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var /** @type {?} */ d = IgxDateFilteringOperand.getDateParts(target, 'yM');
                    var /** @type {?} */ now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');
                    if (now.month === 11) {
                        now.month = 0;
                        now.year += 1;
                    }
                    else {
                        now.month++;
                    }
                    return d.year === now.year &&
                        d.month === now.month;
                }
            }, {
                name: 'thisYear',
                isUnary: true,
                iconName: 'this_year',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var /** @type {?} */ d = IgxDateFilteringOperand.getDateParts(target, 'y');
                    var /** @type {?} */ now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');
                    return d.year === now.year;
                }
            }, {
                name: 'lastYear',
                isUnary: true,
                iconName: 'last_year',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var /** @type {?} */ d = IgxDateFilteringOperand.getDateParts(target, 'y');
                    var /** @type {?} */ now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');
                    return d.year === now.year - 1;
                }
            }, {
                name: 'nextYear',
                isUnary: true,
                iconName: 'next_year',
                logic: function (target) {
                    if (!target) {
                        return false;
                    }
                    _this.validateInputData(target);
                    var /** @type {?} */ d = IgxDateFilteringOperand.getDateParts(target, 'y');
                    var /** @type {?} */ now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');
                    return d.year === now.year + 1;
                }
            }, {
                name: 'empty',
                isUnary: true,
                iconName: 'empty',
                logic: function (target) {
                    return target === null || target === undefined;
                }
            }, {
                name: 'notEmpty',
                isUnary: true,
                iconName: 'not_empty',
                logic: function (target) {
                    return target !== null && target !== undefined;
                }
            }].concat(_this.operations);
        return _this;
    }
    /**
     * @return {?}
     */
    IgxDateFilteringOperand.instance = /**
     * @return {?}
     */
    function () {
        return this._instance || (this._instance = new this());
    };
    /**
     * Splits a Date object into parts
     *
     * \@memberof IgxDateFilteringOperand
     * @param {?} date
     * @param {?=} dateFormat
     * @return {?}
     */
    IgxDateFilteringOperand.getDateParts = /**
     * Splits a Date object into parts
     *
     * \@memberof IgxDateFilteringOperand
     * @param {?} date
     * @param {?=} dateFormat
     * @return {?}
     */
    function (date, dateFormat) {
        var /** @type {?} */ res = {
            day: null,
            hours: null,
            milliseconds: null,
            minutes: null,
            month: null,
            seconds: null,
            year: null
        };
        if (!date || !dateFormat) {
            return res;
        }
        if (dateFormat.indexOf('y') >= 0) {
            res.year = date.getFullYear();
        }
        if (dateFormat.indexOf('M') >= 0) {
            res.month = date.getMonth();
        }
        if (dateFormat.indexOf('d') >= 0) {
            res.day = date.getDate();
        }
        if (dateFormat.indexOf('h') >= 0) {
            res.hours = date.getHours();
        }
        if (dateFormat.indexOf('m') >= 0) {
            res.minutes = date.getMinutes();
        }
        if (dateFormat.indexOf('s') >= 0) {
            res.seconds = date.getSeconds();
        }
        if (dateFormat.indexOf('f') >= 0) {
            res.milliseconds = date.getMilliseconds();
        }
        return res;
    };
    /**
     * @param {?} target
     * @return {?}
     */
    IgxDateFilteringOperand.prototype.validateInputData = /**
     * @param {?} target
     * @return {?}
     */
    function (target) {
        if (!(target instanceof Date)) {
            throw new Error('Could not perform filtering on \'date\' column because the datasource object type is not \'Date\'.');
        }
    };
    IgxDateFilteringOperand._instance = null;
    return IgxDateFilteringOperand;
}(IgxFilteringOperand));
export { IgxDateFilteringOperand };
function IgxDateFilteringOperand_tsickle_Closure_declarations() {
    /** @type {?} */
    IgxDateFilteringOperand._instance;
}
/**
 * Provides filtering operations for numbers
 *
 * @export
 */
var IgxNumberFilteringOperand = /** @class */ (function (_super) {
    tslib_1.__extends(IgxNumberFilteringOperand, _super);
    function IgxNumberFilteringOperand() {
        var _this = _super.call(this) || this;
        _this.operations = [{
                name: 'equals',
                isUnary: false,
                iconName: 'equals',
                logic: function (target, searchVal) {
                    return target === searchVal;
                }
            }, {
                name: 'doesNotEqual',
                isUnary: false,
                iconName: 'not_equal',
                logic: function (target, searchVal) {
                    return target !== searchVal;
                }
            }, {
                name: 'greaterThan',
                isUnary: false,
                iconName: 'greater_than',
                logic: function (target, searchVal) {
                    return target > searchVal;
                }
            }, {
                name: 'lessThan',
                isUnary: false,
                iconName: 'less_than',
                logic: function (target, searchVal) {
                    return target < searchVal;
                }
            }, {
                name: 'greaterThanOrEqualTo',
                isUnary: false,
                iconName: 'greater_than_or_equal',
                logic: function (target, searchVal) {
                    return target >= searchVal;
                }
            }, {
                name: 'lessThanOrEqualTo',
                isUnary: false,
                iconName: 'less_than_or_equal',
                logic: function (target, searchVal) {
                    return target <= searchVal;
                }
            }, {
                name: 'empty',
                isUnary: true,
                iconName: 'empty',
                logic: function (target) {
                    return target === null || target === undefined || isNaN(target);
                }
            }, {
                name: 'notEmpty',
                isUnary: true,
                iconName: 'not_empty',
                logic: function (target) {
                    return target !== null && target !== undefined && !isNaN(target);
                }
            }].concat(_this.operations);
        return _this;
    }
    /**
     * @return {?}
     */
    IgxNumberFilteringOperand.instance = /**
     * @return {?}
     */
    function () {
        return this._instance || (this._instance = new this());
    };
    IgxNumberFilteringOperand._instance = null;
    return IgxNumberFilteringOperand;
}(IgxFilteringOperand));
export { IgxNumberFilteringOperand };
function IgxNumberFilteringOperand_tsickle_Closure_declarations() {
    /** @type {?} */
    IgxNumberFilteringOperand._instance;
}
/**
 * Provides filtering operations for strings
 *
 * @export
 */
var IgxStringFilteringOperand = /** @class */ (function (_super) {
    tslib_1.__extends(IgxStringFilteringOperand, _super);
    function IgxStringFilteringOperand() {
        var _this = _super.call(this) || this;
        _this.operations = [{
                name: 'contains',
                isUnary: false,
                iconName: 'contains',
                logic: function (target, searchVal, ignoreCase) {
                    var /** @type {?} */ search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);
                    target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);
                    return target.indexOf(search) !== -1;
                }
            }, {
                name: 'doesNotContain',
                isUnary: false,
                iconName: 'does_not_contain',
                logic: function (target, searchVal, ignoreCase) {
                    var /** @type {?} */ search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);
                    target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);
                    return target.indexOf(search) === -1;
                }
            }, {
                name: 'startsWith',
                isUnary: false,
                iconName: 'starts_with',
                logic: function (target, searchVal, ignoreCase) {
                    var /** @type {?} */ search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);
                    target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);
                    return target.startsWith(search);
                }
            }, {
                name: 'endsWith',
                isUnary: false,
                iconName: 'ends_with',
                logic: function (target, searchVal, ignoreCase) {
                    var /** @type {?} */ search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);
                    target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);
                    return target.endsWith(search);
                }
            }, {
                name: 'equals',
                isUnary: false,
                iconName: 'equals',
                logic: function (target, searchVal, ignoreCase) {
                    var /** @type {?} */ search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);
                    target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);
                    return target === search;
                }
            }, {
                name: 'doesNotEqual',
                isUnary: false,
                iconName: 'not_equal',
                logic: function (target, searchVal, ignoreCase) {
                    var /** @type {?} */ search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);
                    target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);
                    return target !== search;
                }
            }, {
                name: 'empty',
                isUnary: true,
                iconName: 'empty',
                logic: function (target) {
                    return target === null || target === undefined || target.length === 0;
                }
            }, {
                name: 'notEmpty',
                isUnary: true,
                iconName: 'not_empty',
                logic: function (target) {
                    return target !== null && target !== undefined && target.length > 0;
                }
            }].concat(_this.operations);
        return _this;
    }
    /**
     * @return {?}
     */
    IgxStringFilteringOperand.instance = /**
     * @return {?}
     */
    function () {
        return this._instance || (this._instance = new this());
    };
    /**
     * Applies case sensitivity on strings if provided
     *
     * \@memberof IgxStringFilteringOperand
     * @param {?} a
     * @param {?} ignoreCase
     * @return {?}
     */
    IgxStringFilteringOperand.applyIgnoreCase = /**
     * Applies case sensitivity on strings if provided
     *
     * \@memberof IgxStringFilteringOperand
     * @param {?} a
     * @param {?} ignoreCase
     * @return {?}
     */
    function (a, ignoreCase) {
        a = a || '';
        // bulletproof
        return ignoreCase ? ('' + a).toLowerCase() : a;
    };
    IgxStringFilteringOperand._instance = null;
    return IgxStringFilteringOperand;
}(IgxFilteringOperand));
export { IgxStringFilteringOperand };
function IgxStringFilteringOperand_tsickle_Closure_declarations() {
    /** @type {?} */
    IgxStringFilteringOperand._instance;
}
/**
 * Interface describing filtering operations
 *
 * @export
 * @record
 */
export function IFilteringOperation() { }
function IFilteringOperation_tsickle_Closure_declarations() {
    /** @type {?} */
    IFilteringOperation.prototype.name;
    /** @type {?} */
    IFilteringOperation.prototype.isUnary;
    /** @type {?} */
    IFilteringOperation.prototype.iconName;
    /** @type {?} */
    IFilteringOperation.prototype.logic;
}
/**
 * Interface describing Date object in parts
 *
 * @export
 * @record
 */
export function IDateParts() { }
function IDateParts_tsickle_Closure_declarations() {
    /** @type {?} */
    IDateParts.prototype.year;
    /** @type {?} */
    IDateParts.prototype.month;
    /** @type {?} */
    IDateParts.prototype.day;
    /** @type {?} */
    IDateParts.prototype.hours;
    /** @type {?} */
    IDateParts.prototype.minutes;
    /** @type {?} */
    IDateParts.prototype.seconds;
    /** @type {?} */
    IDateParts.prototype.milliseconds;
}

//# sourceMappingURL=data:application/json;base64,