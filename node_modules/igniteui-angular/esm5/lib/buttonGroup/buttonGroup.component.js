/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { Component, ContentChildren, ChangeDetectorRef, EventEmitter, HostBinding, Input, NgModule, Output, QueryList, Renderer2, ViewChildren } from '@angular/core';
import { Subject } from 'rxjs';
import { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxIconModule } from '../icon/index';
import { takeUntil } from 'rxjs/operators';
/** @enum {number} */
var ButtonGroupAlignment = { horizontal: 0, vertical: 1, };
export { ButtonGroupAlignment };
ButtonGroupAlignment[ButtonGroupAlignment.horizontal] = "horizontal";
ButtonGroupAlignment[ButtonGroupAlignment.vertical] = "vertical";
var /** @type {?} */ NEXT_ID = 0;
/**
 * **Ignite UI for Angular Button Group** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)
 *
 * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports
 * single, multiple and toggle selection.
 *
 * Example:
 * ```html
 * <igx-buttongroup multiSelection="true" [values]="fontOptions">
 * </igx-buttongroup>
 * ```
 * The `fontOptions` value shown above is defined as:
 * ```typescript
 * this.fontOptions = [
 *   { icon: 'format_bold', selected: false },
 *   { icon: 'format_italic', selected: false },
 *   { icon: 'format_underlined', selected: false }];
 * ```
 */
var IgxButtonGroupComponent = /** @class */ (function () {
    function IgxButtonGroupComponent(_cdr, _renderer) {
        this._cdr = _cdr;
        this._renderer = _renderer;
        this._disabled = false;
        this.buttonClickNotifier$ = new Subject();
        this.queryListNotifier$ = new Subject();
        /**
         * An \@Input property that sets the value of the `id` attribute. If not set it will be automatically generated.
         * ```html
         *  <igx-buttongroup [id]="'igx-dialog-56'" [multiSelection]="!multi" [values]="alignOptions">
         * ```
         */
        this.id = "igx-buttongroup-" + NEXT_ID++;
        /**
         * An \@Input property that enables selecting multiple buttons. By default, multi-selection is false.
         * ```html
         * <igx-buttongroup [multiSelection]="false" [alignment]="alignment"></igx-buttongroup>
         * ```
         */
        this.multiSelection = false;
        /**
         * @hidden
         */
        this.selectedIndexes = [];
        /**
         * An \@Ouput property that emits an event when a button is selected.
         * ```typescript
         * \@ViewChild("toast")
         * private toast: IgxToastComponent;
         * public onSelect(buttongroup){
         *    this.toast.show()
         * }
         * //...
         * ```
         * ```html
         * <igx-buttongroup #MyChild [multiSelection]="!multi" (onSelect)="onSelect($event)"></igx-buttongroup>
         * <igx-toast #toast message="You have made a selection!"></igx-toast>
         * ```
         */
        this.onSelect = new EventEmitter();
        /**
         * An \@Ouput property that emits an event when a button is deselected.
         * ```typescript
         * \@ViewChild("toast")
         * private toast: IgxToastComponent;
         * public onUnselect(buttongroup){
         *    this.toast.show()
         * }
         * //...
         * ```
         * ```html
         * igx-buttongroup #MyChild [multiSelection]="multi" (onUnselect)="onUnselect($event)"></igx-buttongroup>
         * <igx-toast #toast message="You have deselected a button!"></igx-toast>
         * ```
         */
        this.onUnselect = new EventEmitter();
    }
    Object.defineProperty(IgxButtonGroupComponent.prototype, "buttons", {
        get: /**
         * A collection containing all buttons inside the button group.
         * @return {?}
         */
        function () {
            return tslib_1.__spread(this.viewButtons.toArray(), this.templateButtons.toArray());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonGroupComponent.prototype, "itemContentCssClass", {
        /**
         * Returns the CSS class of the item content of the `IgxButtonGroup`.
         *```typescript
         *@ViewChild("MyChild")
         *public buttonG: IgxButtonGroupComponent;
         *ngAfterViewInit(){
         *   let buttonSelect = this.buttonG.itemContentCssClass;
         *}
         *```
         */
        get: /**
         * Returns the CSS class of the item content of the `IgxButtonGroup`.
         * ```typescript
         * \@ViewChild("MyChild")
         * public buttonG: IgxButtonGroupComponent;
         * ngAfterViewInit(){
         *   let buttonSelect = this.buttonG.itemContentCssClass;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._itemContentCssClass;
        },
        set: /**
         * Allows you to set a style using the `itemContentCssClass` input.
         * The value should be the CSS class name that will be applied to the button group.
         * ```typescript
         * public style1 = "styleClass";
         * //..
         * ```
         * ```html
         * <igx-buttongroup [itemContentCssClass]="style1" [multiSelection]="!multi" [values]="alignOptions">
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._itemContentCssClass = value || this._itemContentCssClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonGroupComponent.prototype, "disabled", {
        get: /**
         * An \@Input property that allows you to disable the `igx-buttongroup` component. By default it's false.
         * ```html
         * <igx-buttongroup [disabled]="true" [multiSelection]="multi" [values]="fontOptions"></igx-buttongroup>
         * ```
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (this._disabled !== value) {
                this._disabled = value;
                if (this.viewButtons && this.templateButtons) {
                    this.buttons.forEach(function (b) { return b.disabled = _this._disabled; });
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonGroupComponent.prototype, "alignment", {
        /**
         * Returns the alignment of the `igx-buttongroup`.
         *```typescript
         *@ViewChild("MyChild")
         *public buttonG: IgxButtonGroupComponent;
         *ngAfterViewInit(){
         *    let buttonAlignment = this.buttonG.alignment;
         *}
         *```
         */
        get: /**
         * Returns the alignment of the `igx-buttongroup`.
         * ```typescript
         * \@ViewChild("MyChild")
         * public buttonG: IgxButtonGroupComponent;
         * ngAfterViewInit(){
         *    let buttonAlignment = this.buttonG.alignment;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;
        },
        set: /**
         * Allows you to set the button group alignment.
         * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.
         * ```typescript
         * public alignment = ButtonGroupAlignment.vertical;
         * //..
         * ```
         * ```html
         * <igx-buttongroup [multiSelection]="false" [values]="cities" [alignment]="alignment"></igx-buttongroup>
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isVertical = value === ButtonGroupAlignment.vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonGroupComponent.prototype, "isVertical", {
        get: /**
         * Returns true if the `igx-buttongroup` alignment is vertical.
         * Note that in order for the accessor to work correctly the property should be set explicitly.
         * ```html
         * <igx-buttongroup #MyChild [alignment]="alignment" [values]="alignOptions">
         * ```
         * ```typescript
         * //...
         * \@ViewChild("MyChild")
         * private buttonG: IgxButtonGroupComponent;
         * ngAfterViewInit(){
         *    let orientation = this.buttonG.isVertical;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._isVertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxButtonGroupComponent.prototype, "selectedButtons", {
        /**
         * Gets the selected button/buttons.
         *```typescript
         *@ViewChild("MyChild")
         *private buttonG: IgxButtonGroupComponent;
         *ngAfterViewInit(){
         *    let selectedButton = this.buttonG.selectedButtons;
         *}
         *```
         */
        get: /**
         * Gets the selected button/buttons.
         * ```typescript
         * \@ViewChild("MyChild")
         * private buttonG: IgxButtonGroupComponent;
         * ngAfterViewInit(){
         *    let selectedButton = this.buttonG.selectedButtons;
         * }
         * ```
         * @return {?}
         */
        function () {
            var _this = this;
            return this.buttons.filter(function (b, i) {
                return _this.selectedIndexes.indexOf(i) !== -1;
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Selects a button by its index.
     * \@memberOf {\@link IgxButtonGroupComponent}
     * ```typescript
     * \@ViewChild("MyChild")
     * private buttonG: IgxButtonGroupComponent;
     * ngAfterViewInit(){
     *    this.buttonG.selectButton(2);
     *    this.cdr.detectChanges();
     * }
     * ```
     * @param {?} index
     * @return {?}
     */
    IgxButtonGroupComponent.prototype.selectButton = /**
     * Selects a button by its index.
     * \@memberOf {\@link IgxButtonGroupComponent}
     * ```typescript
     * \@ViewChild("MyChild")
     * private buttonG: IgxButtonGroupComponent;
     * ngAfterViewInit(){
     *    this.buttonG.selectButton(2);
     *    this.cdr.detectChanges();
     * }
     * ```
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        if (index >= this.buttons.length || index < 0) {
            return;
        }
        var /** @type {?} */ button = this.buttons[index];
        var /** @type {?} */ buttonElement = button.nativeElement;
        if (buttonElement.classList.contains('igx-button--disabled')) {
            return;
        }
        this.selectedIndexes.push(index);
        button.selected = true;
        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');
        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');
        this.onSelect.emit({ button: button, index: index });
        var /** @type {?} */ indexInViewButtons = this.viewButtons.toArray().indexOf(button);
        if (indexInViewButtons !== -1) {
            this.values[indexInViewButtons].selected = true;
        }
        // deselect other buttons if multiSelection is not enabled
        if (!this.multiSelection && this.selectedIndexes.length > 1) {
            this.buttons.forEach(function (b, i) {
                if (i !== index && _this.selectedIndexes.indexOf(i) !== -1) {
                    _this.deselectButton(i);
                }
            });
        }
    };
    /**
     * Deselects a button by its index.
     * \@memberOf {\@link IgxButtonGroupComponent}
     * ```typescript
     * \@ViewChild("MyChild")
     * private buttonG: IgxButtonGroupComponent;
     * ngAfterViewInit(){
     *    this.buttonG.deselectButton(2);
     *    this.cdr.detectChanges();
     * }
     * ```
     * @param {?} index
     * @return {?}
     */
    IgxButtonGroupComponent.prototype.deselectButton = /**
     * Deselects a button by its index.
     * \@memberOf {\@link IgxButtonGroupComponent}
     * ```typescript
     * \@ViewChild("MyChild")
     * private buttonG: IgxButtonGroupComponent;
     * ngAfterViewInit(){
     *    this.buttonG.deselectButton(2);
     *    this.cdr.detectChanges();
     * }
     * ```
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (index >= this.buttons.length || index < 0) {
            return;
        }
        var /** @type {?} */ button = this.buttons[index];
        var /** @type {?} */ buttonElement = button.nativeElement;
        if (buttonElement.classList.contains('igx-button--disabled')) {
            return;
        }
        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);
        button.selected = false;
        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');
        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');
        this.onUnselect.emit({ button: button, index: index });
        var /** @type {?} */ indexInViewButtons = this.viewButtons.toArray().indexOf(button);
        if (indexInViewButtons !== -1) {
            this.values[indexInViewButtons].selected = false;
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxButtonGroupComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ initButtons = function () {
            // Cancel any existing buttonClick subscriptions
            // Cancel any existing buttonClick subscriptions
            _this.buttonClickNotifier$.next();
            _this.selectedIndexes.splice(0, _this.selectedIndexes.length);
            // initial configuration
            // initial configuration
            _this.buttons.forEach(function (button, index) {
                var /** @type {?} */ buttonElement = button.nativeElement;
                if (_this.disabled) {
                    button.disabled = true;
                }
                if (!button.disabled && button.selected) {
                    _this.selectButton(index);
                }
                button.buttonClick.pipe(takeUntil(_this.buttonClickNotifier$)).subscribe(function (ev) { return _this._clickHandler(ev, index); });
                _this._renderer.addClass(buttonElement, 'igx-button-group__item');
            });
        };
        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(function () { return initButtons(); });
        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(function () { return initButtons(); });
        initButtons();
        this._cdr.detectChanges();
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxButtonGroupComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.buttonClickNotifier$.next();
        this.buttonClickNotifier$.complete();
        this.queryListNotifier$.next();
        this.queryListNotifier$.complete();
    };
    /**
     * @hidden
     * @param {?} event
     * @param {?} i
     * @return {?}
     */
    IgxButtonGroupComponent.prototype._clickHandler = /**
     * @hidden
     * @param {?} event
     * @param {?} i
     * @return {?}
     */
    function (event, i) {
        if (this.selectedIndexes.indexOf(i) !== -1) {
            this.deselectButton(i);
        }
        else {
            this.selectButton(i);
        }
    };
    IgxButtonGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-buttongroup',
                    template: "<div class=\"igx-button-group\" role=\"group\" [class.igx-button-group--vertical]=\"isVertical\">\n    <span *ngFor=\"let button of values; let i = 'index'\" type=\"button\" igxButton=\"flat\" [selected]=\"button.selected\"\n        [attr.data-togglable]=\"button.togglable\" [disabled]=\"disabled || button.disabled\" [igxButtonColor]=\"button.color\"\n        [igxButtonBackground]=\"button.bgcolor\" [igxLabel]=\"button.label\" [igxRipple]=\"button.ripple\">\n        <div class=\"igx-button-group__item-content {{ itemContentCssClass }}\">\n            <igx-icon *ngIf=\"button.icon\" fontSet=\"material\">{{button.icon}}</igx-icon>\n            <span *ngIf=\"button.label\">{{button.label}}</span>\n        </div>\n    </span>\n    <ng-content></ng-content>\n</div>\n"
                },] },
    ];
    /** @nocollapse */
    IgxButtonGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
        { type: Renderer2, },
    ]; };
    IgxButtonGroupComponent.propDecorators = {
        "viewButtons": [{ type: ViewChildren, args: [IgxButtonDirective,] },],
        "templateButtons": [{ type: ContentChildren, args: [IgxButtonDirective,] },],
        "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
        "itemContentCssClass": [{ type: Input },],
        "multiSelection": [{ type: Input },],
        "values": [{ type: Input },],
        "disabled": [{ type: Input },],
        "alignment": [{ type: Input },],
        "onSelect": [{ type: Output },],
        "onUnselect": [{ type: Output },],
    };
    return IgxButtonGroupComponent;
}());
export { IgxButtonGroupComponent };
function IgxButtonGroupComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxButtonGroupComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxButtonGroupComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxButtonGroupComponent.propDecorators;
    /** @type {?} */
    IgxButtonGroupComponent.prototype._disabled;
    /** @type {?} */
    IgxButtonGroupComponent.prototype.buttonClickNotifier$;
    /** @type {?} */
    IgxButtonGroupComponent.prototype.queryListNotifier$;
    /** @type {?} */
    IgxButtonGroupComponent.prototype.viewButtons;
    /** @type {?} */
    IgxButtonGroupComponent.prototype.templateButtons;
    /**
     * An \@Input property that sets the value of the `id` attribute. If not set it will be automatically generated.
     * ```html
     *  <igx-buttongroup [id]="'igx-dialog-56'" [multiSelection]="!multi" [values]="alignOptions">
     * ```
     * @type {?}
     */
    IgxButtonGroupComponent.prototype.id;
    /**
     * An \@Input property that enables selecting multiple buttons. By default, multi-selection is false.
     * ```html
     * <igx-buttongroup [multiSelection]="false" [alignment]="alignment"></igx-buttongroup>
     * ```
     * @type {?}
     */
    IgxButtonGroupComponent.prototype.multiSelection;
    /**
     * An \@Input property that allows setting the buttons in the button group.
     * ```typescript
     *  public ngOnInit() {
     *      this.cities = [
     *        new Button({
     *          label: "Sofia"
     *      }),
     *        new Button({
     *          label: "London"
     *      }),
     *        new Button({
     *          label: "New York",
     *          selected: true
     *      }),
     *        new Button({
     *          label: "Tokyo"
     *      })
     *  ];
     *  }
     *  //..
     * ```
     * ```html
     *  <igx-buttongroup [multiSelection]="false" [values]="cities"></igx-buttongroup>
     * ```
     * @type {?}
     */
    IgxButtonGroupComponent.prototype.values;
    /**
     * @hidden
     * @type {?}
     */
    IgxButtonGroupComponent.prototype.selectedIndexes;
    /**
     * An \@Ouput property that emits an event when a button is selected.
     * ```typescript
     * \@ViewChild("toast")
     * private toast: IgxToastComponent;
     * public onSelect(buttongroup){
     *    this.toast.show()
     * }
     * //...
     * ```
     * ```html
     * <igx-buttongroup #MyChild [multiSelection]="!multi" (onSelect)="onSelect($event)"></igx-buttongroup>
     * <igx-toast #toast message="You have made a selection!"></igx-toast>
     * ```
     * @type {?}
     */
    IgxButtonGroupComponent.prototype.onSelect;
    /**
     * An \@Ouput property that emits an event when a button is deselected.
     * ```typescript
     * \@ViewChild("toast")
     * private toast: IgxToastComponent;
     * public onUnselect(buttongroup){
     *    this.toast.show()
     * }
     * //...
     * ```
     * ```html
     * igx-buttongroup #MyChild [multiSelection]="multi" (onUnselect)="onUnselect($event)"></igx-buttongroup>
     * <igx-toast #toast message="You have deselected a button!"></igx-toast>
     * ```
     * @type {?}
     */
    IgxButtonGroupComponent.prototype.onUnselect;
    /** @type {?} */
    IgxButtonGroupComponent.prototype._isVertical;
    /** @type {?} */
    IgxButtonGroupComponent.prototype._itemContentCssClass;
    /** @type {?} */
    IgxButtonGroupComponent.prototype._cdr;
    /** @type {?} */
    IgxButtonGroupComponent.prototype._renderer;
}
/**
 * @record
 */
export function IButtonGroupEventArgs() { }
function IButtonGroupEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IButtonGroupEventArgs.prototype.button;
    /** @type {?} */
    IButtonGroupEventArgs.prototype.index;
}
/**
 * The IgxButtonGroupModule provides the {\@link IgxButtonGroupComponent} inside your application.
 */
var IgxButtonGroupModule = /** @class */ (function () {
    function IgxButtonGroupModule() {
    }
    IgxButtonGroupModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxButtonGroupComponent],
                    exports: [IgxButtonGroupComponent],
                    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]
                },] },
    ];
    return IgxButtonGroupModule;
}());
export { IgxButtonGroupModule };
function IgxButtonGroupModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxButtonGroupModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxButtonGroupModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,