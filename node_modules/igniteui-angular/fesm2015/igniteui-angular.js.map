{"version":3,"file":"igniteui-angular.js.map","sources":["ng://igniteui-angular/lib/animations/easings.ts","ng://igniteui-angular/lib/animations/fade/index.ts","ng://igniteui-angular/lib/animations/flip/index.ts","ng://igniteui-angular/lib/animations/rotate/index.ts","ng://igniteui-angular/lib/animations/misc/shake.ts","ng://igniteui-angular/lib/animations/misc/pulsate.ts","ng://igniteui-angular/lib/animations/scale/index.ts","ng://igniteui-angular/lib/animations/slide/index.ts","ng://igniteui-angular/lib/animations/swing/index.ts","ng://igniteui-angular/lib/animations/grow/index.ts","ng://igniteui-angular/lib/core/navigation/nav.service.ts","ng://igniteui-angular/lib/core/navigation/directives.ts","ng://igniteui-angular/lib/directives/button/button.directive.ts","ng://igniteui-angular/lib/directives/dragdrop/dragdrop.directive.ts","ng://igniteui-angular/lib/directives/filter/filter.directive.ts","ng://igniteui-angular/lib/directives/focus/focus.directive.ts","ng://igniteui-angular/lib/directives/for-of/display.container.ts","ng://igniteui-angular/lib/directives/for-of/horizontal.virtual.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/virtual.helper.component.ts","ng://igniteui-angular/lib/directives/scroll-inertia/scroll_inertia.directive.ts","ng://igniteui-angular/lib/directives/for-of/for_of.directive.ts","ng://igniteui-angular/lib/directives/layout/layout.directive.ts","ng://igniteui-angular/lib/directives/mask/mask-helper.ts","ng://igniteui-angular/lib/directives/mask/mask.directive.ts","ng://igniteui-angular/lib/core/utils.ts","ng://igniteui-angular/lib/radio/radio.component.ts","ng://igniteui-angular/lib/directives/ripple/ripple.directive.ts","ng://igniteui-angular/lib/directives/radio/radio-group.directive.ts","ng://igniteui-angular/lib/directives/text-highlight/text-highlight.directive.ts","ng://igniteui-angular/lib/directives/text-selection/text-selection.directive.ts","ng://igniteui-angular/lib/services/overlay/utilities.ts","ng://igniteui-angular/lib/services/overlay/position/global-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/NoOpScrollStrategy.ts","ng://igniteui-angular/lib/services/overlay/overlay.ts","ng://igniteui-angular/lib/data-operations/filtering-expressions-tree.ts","ng://igniteui-angular/lib/data-operations/filtering-strategy.ts","ng://igniteui-angular/lib/data-operations/filtering-state.interface.ts","ng://igniteui-angular/lib/data-operations/sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/sorting-state.interface.ts","ng://igniteui-angular/lib/data-operations/data-util.ts","ng://igniteui-angular/lib/services/exporter-common/export-utilities.ts","ng://igniteui-angular/lib/services/exporter-common/base-export-service.ts","ng://igniteui-angular/lib/services/csv/char-separated-value-data.ts","ng://igniteui-angular/lib/services/exporter-common/exporter-options-base.ts","ng://igniteui-angular/lib/services/csv/csv-exporter-options.ts","ng://igniteui-angular/lib/services/csv/csv-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-strings.ts","ng://igniteui-angular/lib/services/excel/excel-files.ts","ng://igniteui-angular/lib/services/excel/excel-folders.ts","ng://igniteui-angular/lib/services/excel/excel-elements-factory.ts","ng://igniteui-angular/lib/services/excel/worksheet-data-dictionary.ts","ng://igniteui-angular/lib/services/excel/worksheet-data.ts","ng://igniteui-angular/lib/services/excel/excel-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-exporter-options.ts","ng://igniteui-angular/lib/services/overlay/position/connected-positioning-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/auto-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/absolute-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/block-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/close-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/IScrollStrategy.ts","ng://igniteui-angular/lib/services/transaction/transaction.ts","ng://igniteui-angular/lib/services/transaction/base-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-hierarchical-transaction.ts","ng://igniteui-angular/lib/directives/toggle/toggle.directive.ts","ng://igniteui-angular/lib/directives/tooltip/tooltip.directive.ts","ng://igniteui-angular/lib/data-operations/filtering-condition.ts","ng://igniteui-angular/lib/data-operations/groupby-record.interface.ts","ng://igniteui-angular/lib/data-operations/stable-sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/data-container.ts","ng://igniteui-angular/lib/icon/icon.service.ts","ng://igniteui-angular/lib/core/deprecateDecorators.ts","ng://igniteui-angular/lib/icon/icon.component.ts","ng://igniteui-angular/lib/icon/index.ts","ng://igniteui-angular/lib/avatar/avatar.component.ts","ng://igniteui-angular/lib/badge/badge.component.ts","ng://igniteui-angular/lib/buttonGroup/buttonGroup.component.ts","ng://igniteui-angular/lib/calendar/calendar.ts","ng://igniteui-angular/lib/calendar/calendar.component.ts","ng://igniteui-angular/lib/calendar/calendar.directives.ts","ng://igniteui-angular/lib/calendar/calendar.module.ts","ng://igniteui-angular/lib/card/card.component.ts","ng://igniteui-angular/lib/carousel/carousel.component.ts","ng://igniteui-angular/lib/checkbox/checkbox.component.ts","ng://igniteui-angular/lib/chips/chip.component.ts","ng://igniteui-angular/lib/chips/chips-area.component.ts","ng://igniteui-angular/lib/directives/prefix/prefix.directive.ts","ng://igniteui-angular/lib/directives/suffix/suffix.directive.ts","ng://igniteui-angular/lib/chips/chips.module.ts","ng://igniteui-angular/lib/combo/combo.directives.ts","ng://igniteui-angular/lib/core/selection.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.component.ts","ng://igniteui-angular/lib/drop-down/drop-down.component.ts","ng://igniteui-angular/lib/directives/hint/hint.directive.ts","ng://igniteui-angular/lib/directives/input/input.directive.ts","ng://igniteui-angular/lib/directives/label/label.directive.ts","ng://igniteui-angular/lib/core/displayDensity.ts","ng://igniteui-angular/lib/input-group/input-group.component.ts","ng://igniteui-angular/lib/combo/combo-dropdown.component.ts","ng://igniteui-angular/lib/combo/combo-item.component.ts","ng://igniteui-angular/lib/combo/combo.pipes.ts","ng://igniteui-angular/lib/combo/combo.component.ts","ng://igniteui-angular/lib/dialog/dialog.directives.ts","ng://igniteui-angular/lib/dialog/dialog.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.component.ts","ng://igniteui-angular/lib/grids/api.service.ts","ng://igniteui-angular/lib/grids/grid-summary.ts","ng://igniteui-angular/lib/grids/row.component.ts","ng://igniteui-angular/lib/grids/grid.common.ts","ng://igniteui-angular/lib/grids/column.component.ts","ng://igniteui-angular/lib/grids/cell.component.ts","ng://igniteui-angular/lib/grids/column-chooser-item-base.ts","ng://igniteui-angular/lib/grids/column-hiding-item.directive.ts","ng://igniteui-angular/lib/grids/column-chooser-base.ts","ng://igniteui-angular/lib/grids/column-hiding.component.ts","ng://igniteui-angular/lib/grids/column-pinning.component.ts","ng://igniteui-angular/lib/grids/grid-toolbar.component.ts","ng://igniteui-angular/lib/grids/filtering/svgIcons.ts","ng://igniteui-angular/lib/grids/grid-common.pipes.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering.service.ts","ng://igniteui-angular/lib/grids/grid-header.component.ts","ng://igniteui-angular/lib/grids/grid-navigation.service.ts","ng://igniteui-angular/lib/grids/grid.rowEdit.directive.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-cell.component.ts","ng://igniteui-angular/lib/grids/grid-base.component.ts","ng://igniteui-angular/lib/directives/template-outlet/template_outlet.directive.ts","ng://igniteui-angular/lib/grids/grid-summary.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-row.component.ts","ng://igniteui-angular/lib/grids/grid-common.module.ts","ng://igniteui-angular/lib/grids/grid/groupby-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid-api.service.ts","ng://igniteui-angular/lib/grids/grid/grid.directives.ts","ng://igniteui-angular/lib/grids/grid/grid.pipes.ts","ng://igniteui-angular/lib/grids/grid/grid.component.ts","ng://igniteui-angular/lib/grids/grid/grid-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid.module.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-row.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.pipes.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-cell.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.filtering.pipe.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.module.ts","ng://igniteui-angular/lib/list/list.common.ts","ng://igniteui-angular/lib/core/touch.ts","ng://igniteui-angular/lib/list/list-item.component.ts","ng://igniteui-angular/lib/list/list.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-body.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.directives.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-header.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.module.ts","ng://igniteui-angular/lib/navbar/navbar.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.directives.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.module.ts","ng://igniteui-angular/lib/progressbar/progressbar.common.ts","ng://igniteui-angular/lib/progressbar/progressbar.component.ts","ng://igniteui-angular/lib/slider/slider.component.ts","ng://igniteui-angular/lib/snackbar/snackbar.component.ts","ng://igniteui-angular/lib/switch/switch.component.ts","ng://igniteui-angular/lib/tabbar/tabbar.component.ts","ng://igniteui-angular/lib/tabs/tabs.directives.ts","ng://igniteui-angular/lib/tabs/tabs-group.component.ts","ng://igniteui-angular/lib/tabs/tab-item.component.ts","ng://igniteui-angular/lib/tabs/tabs.component.ts","ng://igniteui-angular/lib/time-picker/time-picker.directives.ts","ng://igniteui-angular/lib/time-picker/time-picker.component.ts","ng://igniteui-angular/lib/toast/toast.component.ts"],"sourcesContent":["enum EaseIn {\n    quad = `cubic-bezier(0.550, 0.085, 0.680, 0.530)` as any,\n    cubic = `cubic-bezier(0.550, 0.055, 0.675, 0.190)` as any,\n    quart = `cubic-bezier(0.895, 0.030, 0.685, 0.220)` as any,\n    quint = `cubic-bezier(0.755, 0.050, 0.855, 0.060)` as any,\n    sine = `cubic-bezier(0.470, 0.000, 0.745, 0.715)` as any,\n    expo = `cubic-bezier(0.950, 0.050, 0.795, 0.035)` as any,\n    circ = `cubic-bezier(0.600, 0.040, 0.980, 0.335)` as any,\n    back = `cubic-bezier(0.600, -0.280, 0.735, 0.045)` as any\n}\n\nenum EaseOut {\n    quad = `cubic-bezier(0.250, 0.460, 0.450, 0.940)` as any,\n    cubic = `cubic-bezier(0.215, 0.610, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.165, 0.840, 0.440, 1.000)` as any,\n    quint = `cubic-bezier(0.230, 1.000, 0.320, 1.000)` as any,\n    sine = `cubic-bezier(0.390, 0.575, 0.565, 1.000)` as any,\n    expo = `cubic-bezier(0.190, 1.000, 0.220, 1.000)` as any,\n    circ = `cubic-bezier(0.075, 0.820, 0.165, 1.000)` as any,\n    back = `cubic-bezier(0.175, 0.885, 0.320, 1.275)` as any\n}\n\nenum EaseInOut {\n    quad = `cubic-bezier(0.455, 0.030, 0.515, 0.955)` as any,\n    cubic = `cubic-bezier(0.645, 0.045, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.770, 0.000, 0.175, 1.000)` as any,\n    quint = `cubic-bezier(0.860, 0.000, 0.070, 1.000)` as any,\n    sine = `cubic-bezier(0.445, 0.050, 0.550, 0.950)` as any,\n    expo = `cubic-bezier(1.000, 0.000, 0.000, 1.000)` as any,\n    circ = `cubic-bezier(0.785, 0.135, 0.150, 0.860)` as any,\n    back = `cubic-bezier(0.680, -0.550, 0.265, 1.550)` as any\n}\n\nexport { EaseIn, EaseOut, EaseInOut };\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.sine,\n    endOpacity: 1,\n    startOpacity: 0\n};\n\nconst fadeIn: AnimationReferenceMetadata = animation(base, {\n    params: baseParams\n});\n\nconst fadeOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        delay: '0s',\n        duration: '350ms',\n        easing: EaseOut.sine,\n        endOpacity: 0,\n        startOpacity: 1\n    }\n});\n\nexport { fadeIn, fadeOut };\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        backfaceVisibility: 'hidden',\n        transformStyle: 'preserve-3d'\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`\n            }),\n            style({\n                offset: 1,\n                transform: `translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 180,\n    endDistance: '0px',\n    rotateX: 1,\n    rotateY: 0,\n    rotateZ: 0,\n    startAngle: 0,\n    startDistance: '0px'\n};\n\nconst flipTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams\n    }\n});\n\nconst flipBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180\n    }\n});\n\nconst flipLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipHorFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px'\n    }\n});\n\nconst flipHorBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px'\n    }\n});\n\nconst flipVerFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipVerBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nexport {\n    flipTop,\n    flipRight,\n    flipBottom,\n    flipLeft,\n    flipHorFwd,\n    flipHorBck,\n    flipVerFwd,\n    flipVerBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            offset: 0,\n            opacity: `{{endOpacity}}`,\n            transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 0,\n    endOpacity: 1,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 1,\n    startAngle: -360,\n    startOpacity: 0,\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    startOpacity: 1\n};\n\nconst rotateInCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseInParams }\n});\n\nconst rotateOutCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseOutParams }\n});\n\nconst rotateInTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateOutTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateInRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateOutRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateInBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateOutBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateInLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateOutLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateInTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateInBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateInDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nexport {\n    rotateInCenter,\n    rotateInTop,\n    rotateInRight,\n    rotateInLeft,\n    rotateInBottom,\n    rotateInTr,\n    rotateInBr,\n    rotateInBl,\n    rotateInTl,\n    rotateInDiagonal1,\n    rotateInDiagonal2,\n    rotateInHor,\n    rotateInVer,\n    rotateOutCenter,\n    rotateOutTop,\n    rotateOutRight,\n    rotateOutLeft,\n    rotateOutBottom,\n    rotateOutTr,\n    rotateOutBr,\n    rotateOutBl,\n    rotateOutTl,\n    rotateOutDiagonal1,\n    rotateOutDiagonal2,\n    rotateOutHor,\n    rotateOutVer\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseInOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            }),\n            style({\n                offset: 0.1,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.2,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n            }),\n            style({\n                offset: 0.3,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.4,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.5,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.6,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.7,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.8,\n                transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`\n\n            }),\n            style({\n                offset: 0.9,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`\n\n            }),\n            style({\n                offset: 1,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '800ms',\n    easing: EaseInOut.quad,\n    endAngle: 0,\n    endDistance: '8px',\n    startAngle: 0,\n    startDistance: '10px',\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst shakeHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'X'\n    }\n});\n\nconst shakeVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y'\n    }\n});\n\nconst shakeTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'top'\n    }\n});\n\nconst shakeBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'center'\n    }\n});\n\nconst shakeLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'center'\n    }\n});\n\nconst shakeCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 8,\n        endDistance: '0',\n        startAngle: 10,\n        startDistance: '0',\n        xPos: 'center',\n        yPos: 'center'\n    }\n});\n\nconst shakeTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst shakeBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nexport {\n    shakeHor,\n    shakeVer,\n    shakeTop,\n    shakeBottom,\n    shakeRight,\n    shakeLeft,\n    shakeCenter,\n    shakeTr,\n    shakeBr,\n    shakeBl,\n    shakeTl\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { IAnimationParams } from '../main';\n\nconst heartbeatBase: AnimationMetadata[] = [\n    style({\n        animationTimingFunction: `ease-out`,\n        transform: `scale(1)`,\n        transformOrigin: `center center`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.1,\n                transform: `scale(0.91)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.17,\n                transform: `scale(0.98)`\n            }),\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.33,\n                transform: `scale(0.87)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.45,\n                transform: `scale(1)`\n            })\n        ])\n    )\n];\n\nconst heartbeatParams: IAnimationParams = {\n    delay: '0s',\n    duration: '1.5s',\n    easing: 'ease-in-out'\n};\n\nconst pulsateBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.5,\n                transform: `scale({{toScale}})`\n            }),\n            style({\n                offset: 1,\n                transform: `scale({{fromScale}})`\n            })\n        ])\n    )\n];\n\nconst pulsateParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.5s',\n    easing: 'ease-in-out',\n    fromScale: 1,\n    toScale: 1.1\n};\n\nconst blinkBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                opacity: .8,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.8,\n                opacity: 0,\n                transform: `scale({{midScale}})`\n            }),\n            style({\n                offset: 1,\n                opacity: 0,\n                transform: `scale({{toScale}})`\n            })\n        ])\n    )\n];\n\nconst blinkParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.8s',\n    easing: 'ease-in-out',\n    fromScale: .2,\n    midScale: 1.2,\n    toScale: 2.2\n};\n\nconst pulsateFwd = animation(pulsateBase, {\n    params: {\n        ...pulsateParams\n    }\n});\n\nconst pulsateBck = animation(pulsateBase, {\n    params: {\n        ...pulsateParams,\n        toScale: .9\n    }\n});\n\nconst heartbeat = animation(heartbeatBase, {\n    params: {\n        ...heartbeatParams\n    }\n});\n\nconst blink = animation(blinkBase, {\n    params: {\n        ...blinkParams\n    }\n});\n\nexport {\n    heartbeat,\n    pulsateFwd,\n    pulsateBck,\n    blink\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `scale{{direction}}({{fromScale}})`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `scale{{direction}}({{toScale}})`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    direction: '',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromScale: .5,\n    startOpacity: 0,\n    toScale: 1,\n    xPos: '50%',\n    yPos: '50%'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseOut.sine,\n    endOpacity: 0,\n    fromScale: 1,\n    startOpacity: 1,\n    toScale: .5\n};\n\nconst scaleInCenter: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst scaleInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTr = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutCenter: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst scaleOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nexport {\n    scaleInTop,\n    scaleInRight,\n    scaleInBottom,\n    scaleInLeft,\n    scaleInCenter,\n    scaleInTr,\n    scaleInBr,\n    scaleInBl,\n    scaleInTl,\n    scaleInVerTop,\n    scaleInVerBottom,\n    scaleInVerCenter,\n    scaleInHorCenter,\n    scaleInHorLeft,\n    scaleInHorRight,\n    scaleOutTop,\n    scaleOutRight,\n    scaleOutBottom,\n    scaleOutLeft,\n    scaleOutCenter,\n    scaleOutTr,\n    scaleOutBr,\n    scaleOutBl,\n    scaleOutTl,\n    scaleOutVerTop,\n    scaleOutVerBottom,\n    scaleOutVerCenter,\n    scaleOutHorCenter,\n    scaleOutHorLeft,\n    scaleOutHorRight\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `{{fromPosition}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `{{toPosition}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromPosition: 'translateY(-500px)',\n    startOpacity: 0,\n    toPosition: 'translateY(0)'\n};\n\nconst baseOutParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    fromPosition: 'translateY(0)',\n    startOpacity: 1,\n    toPosition: 'translateY(-500px)'\n};\n\nconst slideInTop: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst slideInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(-500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateY(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideOutTop: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst slideOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseIn.quad,\n            endOpacity: 0,\n            fromPosition: 'translateY(0)',\n            startOpacity: 1,\n            toPosition: 'translateY(500px)'\n        }\n    }\n);\n\nconst slideOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(-500px)'\n        }\n    }\n);\n\nexport {\n    slideInTop,\n    slideInRight,\n    slideInBottom,\n    slideInLeft,\n    slideInTr,\n    slideInBr,\n    slideInBl,\n    slideInTl,\n    slideOutTop,\n    slideOutBottom,\n    slideOutRight,\n    slideOutLeft,\n    slideOutTr,\n    slideOutBr,\n    slideOutBl,\n    slideOutTl\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst swingBase: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate{{direction}}({{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `rotate{{direction}}({{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst swingParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '.5s',\n    easing: EaseOut.back,\n    endAngle: 0,\n    endOpacity: 1,\n    startAngle: -100,\n    startOpacity: 0,\n    xPos: 'top',\n    yPos: 'center'\n};\n\nconst swingOutParams: IAnimationParams = {\n    ...swingParams,\n    duration: '.55s',\n    easing: EaseIn.back,\n    endAngle: 70,\n    endOpacity: 0,\n    startAngle: 0,\n    startOpacity: 1\n};\n\nconst swingInTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams\n    }\n});\n\nconst swingInRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        startAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        startAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingInTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: 70\n    }\n});\n\nconst swingInRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: 70,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams\n    }\n});\n\nconst swingOutRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        endAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLefttFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        endAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: -100\n    }\n});\n\nconst swingOutRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: -100,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nexport {\n    swingInTopFwd,\n    swingInRightFwd,\n    swingInLeftFwd,\n    swingInBottomFwd,\n    swingInTopBck,\n    swingInRightBck,\n    swingInBottomBck,\n    swingInLeftBck,\n    swingOutTopFwd,\n    swingOutRightFwd,\n    swingOutBottomFwd,\n    swingOutLefttFwd,\n    swingOutTopBck,\n    swingOutRightBck,\n    swingOutBottomBck,\n    swingOutLeftBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut, EaseIn } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{ startOpacity }}`,\n        height: `{{ startHeight }}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{ endOpacity }}`,\n            height: `{{ endHeight }}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    startOpacity: 0,\n    endOpacity: 1,\n    startHeight: '',\n    endHeight: ''\n};\n\nconst growVerIn: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 0,\n        endOpacity: 1,\n        startHeight: '0px',\n        endHeight: '*'\n    }\n});\n\nconst growVerOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 1,\n        endOpacity: 0,\n        startHeight: '*',\n        endHeight: '0px'\n    }\n});\n\nexport { growVerIn, growVerOut };\n","import { IToggleView } from './IToggleView';\n\n/**\n * Common service to be injected between components where those implementing common\n * ToggleView interface can register and toggle directives can call their methods.\n * TODO: Track currently active? Events?\n */\nexport class IgxNavigationService {\n    private navs: { [id: string]: IToggleView; };\n\n    constructor() {\n        this.navs = {};\n    }\n\n    public add(id: string, navItem: IToggleView) {\n        this.navs[id] = navItem;\n    }\n\n    public remove(id: string) {\n        delete this.navs[id];\n    }\n\n    public get(id: string): IToggleView {\n        if (id) {\n            return this.navs[id];\n        }\n    }\n\n    public toggle(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].toggle(...args);\n        }\n    }\n    public open(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].open(...args);\n        }\n    }\n    public close(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].close(...args);\n        }\n    }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\nimport {IgxNavigationService} from './nav.service';\n\n/**\n * Directive that can toggle targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavToggle=\"ID\"> Toggle </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavToggle]' })\nexport class IgxNavigationToggleDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavToggle') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public toggleNavigationDrawer() {\n        this.state.toggle(this.target, true);\n    }\n}\n\n/**\n * Directive that can close targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavClose=\"ID\"> Close </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavClose]' })\nexport class IgxNavigationCloseDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavClose') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public closeNavigationDrawer() {\n        this.state.close(this.target, true);\n    }\n}\n\n@NgModule({\n    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxNavigationModule {}\n","import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output, NgModule, Renderer2, HostListener } from '@angular/core';\n\n@Directive({\n    selector: '[igxButton]'\n})\nexport class IgxButtonDirective {\n    /**\n     *@hidden\n     */\n    private _type = 'flat';\n    /**\n     *@hidden\n     */\n    private _cssClass = 'igx-button';\n    /**\n     *@hidden\n     */\n    private _color: string;\n    /**\n     *@hidden\n     */\n    private _label: string;\n    /**\n     *@hidden\n     */\n    private _backgroundColor: string;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2) { }\n\n    /**\n     * Returns the underlying DOM element\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Called when the button is clicked\n     */\n    @Output()\n    public buttonClick = new EventEmitter<any>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * ```\n     * ```typescript\n     * let buttonRole =  this.button.role;\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @HostBinding('attr.role') public role = 'button';\n    /**\n     * Sets the type of the button.\n     * ```html\n     * <button  igxButton= \"icon\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButton') set type(value: string) {\n        this._type = value || this._type;\n        this._renderer.addClass(this.nativeElement, `${this._cssClass}--${this._type}`);\n    }\n    /**\n     * Sets the button text color.\n     * ```html\n     * <button igxButton=\"gradient\" igxButtonColor=\"blue\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonColor') set color(value: string) {\n        this._color = value || this.nativeElement.style.color;\n        this._renderer.setStyle(this.nativeElement, 'color', this._color);\n    }\n    /**\n     * Sets the background color of the button.\n     * ```html\n     * <button igxButton=\"raised\" igxButtonBackground=\"red\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonBackground') set background(value: string) {\n        this._backgroundColor = value || this._backgroundColor;\n        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);\n    }\n    /**\n     * Sets the `aria-label` attribute.\n     * ```html\n     * <button igxButton= \"flat\" igxLabel=\"Label\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxLabel') set label(value: string) {\n        this._label = value || this._label;\n        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);\n    }\n    /**\n     * Enables/disables the button.\n     *  ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() set disabled(val) {\n        val = !!val;\n        if (val) {\n            this._renderer.addClass(this.nativeElement, `${this._cssClass}--disabled`);\n        } else {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClass}--disabled`);\n        }\n    }\n\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() public selected = false;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click',  ['$event'])\n    public onClick(ev) {\n        this.buttonClick.emit(ev);\n    }\n}\n/**\n * The IgxButtonModule provides the {@link IgxButtonDirective} inside your application.\n */\n@NgModule({\n    declarations: [IgxButtonDirective],\n    exports: [IgxButtonDirective]\n})\nexport class IgxButtonModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    NgModule,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';\nimport { takeUntil, throttle } from 'rxjs/operators';\n\nexport enum RestrictDrag {\n    VERTICALLY,\n    HORIZONTALLY,\n    NONE\n}\n\nexport class IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n}\n\nexport class IgxDropEnterEventArgs {\n    owner: IgxDropDirective;\n    drag: IgxDragDirective;\n    dragData: any;\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n}\n\nexport class IgxDropLeaveEventArgs {\n    owner: IgxDropDirective;\n    drag: IgxDragDirective;\n    dragData: any;\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n}\n\nexport class IgxDropEventArgs {\n    owner: IgxDropDirective;\n    drag: IgxDragDirective;\n    cancel: boolean;\n}\n\nexport interface IDragBaseEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    owner: IgxDragDirective;\n}\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    cancel: boolean;\n}\n\n@Directive({\n    selector: '[igxDrag]'\n})\nexport class IgxDragDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrag')\n    public data: any;\n\n    /**\n     * An @Input property that indicates when the drag should start\n     * By default the drag starts after the draggable element is moved by 5px\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public dragTolerance = 5;\n\n    /**\n     * Sets a custom class that will be added to the `dragGhost` element.\n     * ```html\n     * <div igxDrag [ghostImageClass]=\"'dragGhost'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public ghostImageClass = '';\n\n    /**\n     * An @Input property that hides the draggable element.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\" [hideBaseOnDrag]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = false;\n\n    /**\n     * An @Input property that enables/disables the draggable element animation\n     * when the element is released.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = false;\n\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragStart = new EventEmitter<IDragStartEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (returnMoveEnd)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public returnMoveEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragClicked)=\"dragClicked()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public dragClicked(){\n     *      alert(\"The elemented has been clicked!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragClicked = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.touchAction')\n    public touch = 'none';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.transitionProperty')\n    public transitionProperty = 'top, left';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.top.px')\n    public top1 = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.left.px')\n    public left1 = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.visibility')\n    public _visibility = 'visible';\n\n    /**\n     * Sets the visibility of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     this.myDrag.visible = false;\n     * }\n     * ```\n     */\n    public set visible(bVisible) {\n        this._visibility = bVisible ? 'visible' : 'hidden';\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the visibility state of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let dragVisibilty = this.myDrag.visible;\n     * }\n     * ```\n     */\n    public get visible() {\n        return this._visibility === 'visible';\n    }\n\n    /**\n     * @hidden\n     */\n    public set left(val: number) {\n        requestAnimationFrame(() => {\n            if (this._dragGhost) {\n                this._dragGhost.style.left = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get left() {\n        return parseInt(this._dragGhost.style.left, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public set top(val: number) {\n        requestAnimationFrame(() => {\n            if (this._dragGhost) {\n                this._dragGhost.style.top = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get top() {\n        return parseInt(this._dragGhost.style.top, 10);\n    }\n\n    /**\n     * Returns if the browser supports pointer events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let pointerEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get pointerEventsEnabled() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    /**\n     * Returns if the browser supports touch events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let touchEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get touchEventsEnabled() {\n        return 'ontouchstart' in window;\n    }\n\n    /**\n     * @hidden\n     */\n    public defaultReturnDuration = '0.5s';\n\n    /**\n     * @hidden\n     */\n    protected _startX = 0;\n    /**\n     * @hidden\n     */\n    protected _startY = 0;\n\n    /**\n     * @hidden\n     */\n    protected _dragGhost;\n    /**\n     * @hidden\n     */\n    protected _dragStarted = false;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetX;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetY;\n    /**\n     * @hidden\n     */\n    protected _dragStartX;\n    /**\n     * @hidden\n     */\n    protected _dragStartY;\n    /**\n     * @hidden\n     */\n    protected _pointerDownId = null;\n\n    /**\n     * @hidden\n     */\n    protected _clicked = false;\n    /**\n     * @hidden\n     */\n    protected _lastDropArea = null;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    protected _removeOnDestroy = true;\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef, public zone: NgZone, public renderer: Renderer2) {\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            if (this.pointerEventsEnabled) {\n                fromEvent(this.element.nativeElement, 'pointerdown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(this.element.nativeElement, 'pointermove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(this.element.nativeElement, 'pointerup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else if (this.touchEventsEnabled) {\n                // We don't have pointer events and touch events. Use then mouse events.\n                fromEvent(this.element.nativeElement, 'touchstart').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'touchmove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'touchend').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else {\n                // We don't have pointer events and touch events. Use then mouse events.\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'mousemove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n\n        if (this._dragGhost && this._removeOnDestroy) {\n            this._dragGhost.parentNode.removeChild(this._dragGhost);\n            this._dragGhost = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    public onPointerDown(event) {\n        this._clicked = true;\n        this._pointerDownId = event.pointerId;\n\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            this._startX = event.pageX;\n            this._startY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            this._startX = event.touches[0].pageX;\n            this._startY = event.touches[0].pageY;\n        }\n\n        // Take margins because getBoundingClientRect() doesn't include margins of the element\n        const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n        const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n\n        this._dragOffsetX = (this._startX - this.element.nativeElement.getBoundingClientRect().left) + marginLeft;\n        this._dragOffsetY = (this._startY - this.element.nativeElement.getBoundingClientRect().top) + marginTop;\n        this._dragStartX = this._startX - this._dragOffsetX;\n        this._dragStartY = this._startY - this._dragOffsetY;\n\n        // Set pointer capture so we detect pointermove even if mouse is out of bounds until dragGhost is created.\n        if (this.pointerEventsEnabled) {\n            this.element.nativeElement.setPointerCapture(this._pointerDownId);\n        } else {\n            this.element.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     * Perfmorm drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    public onPointerMove(event) {\n        if (this._clicked) {\n            const dragStartArgs: IDragStartEventArgs = {\n                originalEvent: event,\n                owner: this,\n                cancel: false\n            };\n            let pageX, pageY;\n            if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n                // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n                pageX = event.pageX;\n                pageY = event.pageY;\n            } else if (this.touchEventsEnabled) {\n                pageX = event.touches[0].pageX;\n                pageY = event.touches[0].pageY;\n\n                // Prevent scrolling on touch while dragging\n                event.preventDefault();\n            }\n\n            const totalMovedX = pageX - this._startX;\n            const totalMovedY = pageY - this._startY;\n            if (!this._dragStarted &&\n                (Math.abs(totalMovedX) > this.dragTolerance || Math.abs(totalMovedY) > this.dragTolerance)) {\n                this.zone.run(() => {\n                    this.dragStart.emit(dragStartArgs);\n                });\n\n                if (!dragStartArgs.cancel) {\n                    this._dragStarted = true;\n                    // We moved enough so dragGhost can be rendered and actual dragging to start.\n                    this.createDragGhost(event);\n                }\n                return;\n            } else if (!this._dragStarted) {\n                return;\n            }\n\n            this.left = this._dragStartX + totalMovedX;\n            this.top = this._dragStartY + totalMovedY;\n\n            this.dispatchDragEvents(pageX, pageY);\n        }\n    }\n\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the dragGhost and dispatchind drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    public onPointerUp(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        const eventArgs = {\n            originalEvent: event,\n            owner: this\n        };\n        this._clicked = false;\n        if (this._dragStarted) {\n            if (this._lastDropArea && this._lastDropArea !== this.element.nativeElement) {\n                if (!this.animateOnRelease) {\n                    this.onTransitionEnd(null);\n                }\n\n                // dragging ended over a drop area. Call this after transition because onDrop might remove the element.\n                this.dispatchDropEvent(event.pageX, event.pageY);\n                // else the drop directive needs to call the dropFinished() method so the animation can perform\n            } else if (this.animateOnRelease &&\n                    (this.left !== Math.floor(this._dragStartX) || this.top !== Math.floor(this._dragStartY))) {\n                // If the start positions are the same as the current the transition will not execute.\n                // return the ghost to start position before removing it. See onTransitionEnd.\n                this._dragGhost.style.transitionDuration = this.defaultReturnDuration;\n                this.left = this._dragStartX;\n                this.top = this._dragStartY;\n            } else {\n                this.onTransitionEnd(null);\n            }\n\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n        } else {\n            this.zone.run(() => {\n                this.dragClicked.emit(eventArgs);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * Create dragGhost element - copy of the base element. Bind all needed events.\n     * @param event Pointer event required when the dragGhost is being initialized.\n     */\n    protected createDragGhost(event) {\n        this._dragGhost = this.element.nativeElement.cloneNode(true);\n        this._dragGhost.style.transitionDuration = '0.0s';\n        this._dragGhost.style.position = 'absolute';\n        this._dragGhost.style.top = this._dragStartY + 'px';\n        this._dragGhost.style.left = this._dragStartX + 'px';\n\n        if (this.ghostImageClass) {\n            this.renderer.addClass(this._dragGhost, this.ghostImageClass);\n        }\n\n        document.body.appendChild(this._dragGhost);\n\n        if (this.pointerEventsEnabled) {\n            // The dragGhost takes control for moving and dragging after it has been shown.\n            this._dragGhost.setPointerCapture(this._pointerDownId);\n            this._dragGhost.addEventListener('pointermove', (args) => {\n                this.onPointerMove(args);\n            });\n            this._dragGhost.addEventListener('pointerup', (args) => {\n                this.onPointerUp(args);\n            });\n        }\n\n        if (this.animateOnRelease) {\n            // Transition animation when the dragGhost is released and it returns to it's original position.\n            this._dragGhost.addEventListener('transitionend', (args) => {\n                this.onTransitionEnd(args);\n            });\n        }\n\n        // Hide the base after the dragGhost is created, because otherwise the dragGhost will be not visible.\n        if (this.hideBaseOnDrag) {\n            this.visible = false;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number) {\n        let topDropArea;\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this\n        };\n\n        const elementsFromPoint = this.getElementsAtPoint(pageX, pageY);\n        for (let i = 0; i < elementsFromPoint.length; i++) {\n            if (elementsFromPoint[i].getAttribute('droppable') === 'true' && elementsFromPoint[i] !== this._dragGhost) {\n                topDropArea = elementsFromPoint[i];\n                break;\n            }\n        }\n\n        if (topDropArea) {\n            this.dispatchEvent(topDropArea, 'igxDragOver', eventArgs);\n        }\n\n        if (topDropArea &&\n            (!this._lastDropArea || (this._lastDropArea && this._lastDropArea !== topDropArea))) {\n            if (this._lastDropArea) {\n                this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            }\n\n            this._lastDropArea = topDropArea;\n            this.dispatchEvent(this._lastDropArea, 'igxDragEnter', eventArgs);\n        } else if (!topDropArea && this._lastDropArea) {\n            this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            this._lastDropArea = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number) {\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this\n        };\n\n        this.dispatchEvent(this._lastDropArea, 'igxDrop', eventArgs);\n        this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n        this._lastDropArea = null;\n    }\n\n    /**\n     * @hidden\n     * Update relative positions\n     */\n    public updateDragRelativePos() {\n        if (!this._dragGhost) {\n            return;\n        }\n\n        // Calculate the new dragGhost position to remain where the mouse is, so it doesn't jump\n        const totalDraggedX = this.left - this._dragStartX;\n        const totalDraggedY = this.top - this._dragStartY;\n        const newPosX = this.element.nativeElement.getBoundingClientRect().left;\n        const newPosY = this.element.nativeElement.getBoundingClientRect().top;\n        const diffStartX = this._dragStartX - newPosX;\n        const diffStartY = this._dragStartY - newPosY;\n        this.top = newPosX + totalDraggedX - diffStartX;\n        this.left = newPosY + totalDraggedY - diffStartY;\n    }\n\n    /**\n     * Informs the `igxDrag` directive that it has been dropped/released.\n     * This should usully be called when `animateOnRelease` is set to `true`.\n     * When canceling or defining custom drop logic this tells the igxDrag to update it's positions and\n     * animate correctly to the new position.\n     * ```typescript\n     * public onDropElem(event) {\n     *     // Function bound to the igxDrop directive event `onDrop`\n     *     // This cancels the default drop logic of the `igxDrop`\n     *     event.cancel = true;\n     *     event.drag.dropFinished();\n     * }\n     * ```\n     */\n    public dropFinished() {\n        if (this.animateOnRelease && this._dragGhost) {\n            this.updateDragRelativePos();\n\n            // Return the dragged element to the start. See onTransitionEnd next.\n            // Take margins becuase getBoundingClientRect() doesn't include margins\n            const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n            const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n            const newPosX = this.element.nativeElement.getBoundingClientRect().left;\n            const newPosY = this.element.nativeElement.getBoundingClientRect().top;\n\n            this._dragGhost.style.transitionDuration = this.defaultReturnDuration;\n            this.left = newPosX - marginLeft;\n            this.top = newPosY - marginTop;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onTransitionEnd(event) {\n        if (this._dragStarted && !this._clicked) {\n            if (this.hideBaseOnDrag) {\n                this.visible = true;\n            }\n\n            this._dragGhost.parentNode.removeChild(this._dragGhost);\n            this._dragGhost = null;\n\n            this.element.nativeElement.style.transitionDuration = '0.0s';\n            this._dragStarted = false;\n            this.zone.run(() => {\n                this.returnMoveEnd.emit({\n                    originalEvent: event,\n                    owner: this\n                });\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number) {\n        // correct the coordinates with the current scroll position, because\n        // document.elementsFromPoint conider position within the current viewport\n        // window.pageXOffset == window.scrollX; // always true\n        // using window.pageXOffset for IE9 compatibility\n        const viewPortX = pageX - window.pageXOffset;\n        const viewPortY = pageY - window.pageYOffset;\n        if (document['msElementsFromPoint']) {\n            // Edge and IE special snowflakes\n            return document['msElementsFromPoint'](viewPortX, viewPortY);\n        } else {\n            // Other browsers like Chrome, Firefox, Opera\n            return document.elementsFromPoint(viewPortX, viewPortY);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target, eventName: string, eventArgs: IgxDragCustomEventDetails) {\n        // This way is IE11 compatible.\n        const dragLeaveEvent = document.createEvent('CustomEvent');\n        dragLeaveEvent.initCustomEvent(eventName, false, false, eventArgs);\n        target.dispatchEvent(dragLeaveEvent);\n        // Othersie can be used `target.dispatchEvent(new CustomEvent(eventName, eventArgs));`\n    }\n}\n\n@Directive({\n    selector: '[igxDrop]'\n})\nexport class IgxDropDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrop')\n    public data: any;\n\n    /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onEnter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable elemente has entered the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onEnter = new EventEmitter<IgxDropEnterEventArgs>();\n\n    /** Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onLeave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable elemente has left the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onLeave = new EventEmitter<IgxDropLeaveEventArgs>();\n\n    /** Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onDrop)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable elemente has been dropped in the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDrop = new EventEmitter<IgxDropEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.droppable')\n    public droppable = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.dragOver')\n    public dragover = false;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {\n    }\n\n    ngOnInit() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'igxDragEnter').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onDragEnter(res as CustomEvent<IgxDragCustomEventDetails>));\n\n            fromEvent(this.element.nativeElement, 'igxDragLeave').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragLeave(res));\n            fromEvent(this.element.nativeElement, 'igxDragOver').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragOver(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragOver(event) { }\n\n    /**\n     * @hidden\n     */\n    public onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>) {\n        this.dragover = true;\n        const eventArgs: IgxDropEnterEventArgs = {\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY\n        };\n        this._zone.run(() => {\n            this.onEnter.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragLeave(event) {\n        this.dragover = false;\n        const eventArgs: IgxDropLeaveEventArgs = {\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY\n        };\n        this._zone.run(() => {\n            this.onLeave.emit();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('igxDrop', ['$event'])\n    public onDragDrop(event) {\n        const args: IgxDropEventArgs = {\n            owner: this,\n            drag: event.detail.owner,\n            cancel: false\n        };\n        this._zone.run(() => {\n            this.onDrop.emit(args);\n        });\n\n        if (!args.cancel) {\n            // To do for generic scenario\n            this._renderer.removeChild(event.detail.owner.element.nativeElement.parentNode, event.detail.owner.element.nativeElement);\n            this._renderer.appendChild(this.element.nativeElement, event.detail.owner.element.nativeElement);\n\n            setTimeout(() => {\n                event.detail.owner.dropFinished();\n            }, 0);\n        }\n    }\n}\n\n\n/**\n * The IgxDragDropModule provides the {@link IgxDragDirective}, {@link IgxDropDirective} inside your application.\n */\n@NgModule({\n    declarations: [IgxDragDirective, IgxDropDirective],\n    exports: [IgxDragDirective, IgxDropDirective]\n})\nexport class IgxDragDropModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\n\n@Directive({\n    selector: '[igxFilter]'\n})\nexport class IgxFilterDirective implements OnChanges {\n    @Output() public filtering = new EventEmitter(false); // synchronous event emitter\n    @Output() public filtered = new EventEmitter();\n\n    @Input('igxFilter') public filterOptions: IgxFilterOptions;\n\n    constructor(private element: ElementRef, renderer: Renderer2) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        // Detect only changes of input value\n        if (changes.filterOptions &&\n            changes.filterOptions.currentValue &&\n            changes.filterOptions.currentValue.inputValue !== undefined &&\n            changes.filterOptions.previousValue &&\n            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {\n            this.filter();\n        }\n    }\n\n    private filter() {\n        if (!this.filterOptions.items) {\n            return;\n        }\n\n        const args = { cancel: false, items: this.filterOptions.items };\n        this.filtering.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        const pipe = new IgxFilterPipe();\n\n        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);\n        this.filtered.emit({ filteredItems: filtered });\n    }\n}\n\n@Pipe({\n    name: 'igxFilter',\n    pure: false\n})\n\nexport class IgxFilterPipe implements PipeTransform {\n    public transform(items: any[],\n                     // options - initial settings of filter functionality\n                     options: IgxFilterOptions) {\n\n        let result = [];\n\n        if (!items || !items.length || !options) {\n            return;\n        }\n\n        if (options.items) {\n            items = options.items;\n        }\n\n        result = items.filter((item: any) => {\n            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);\n\n            if (match) {\n                if (options.metConditionFn) {\n                    options.metConditionFn(item);\n                }\n            } else {\n                if (options.overdueConditionFn) {\n                    options.overdueConditionFn(item);\n                }\n            }\n\n            return match;\n        });\n\n        return result;\n    }\n}\n\nexport class IgxFilterOptions {\n    // Input text value that will be used as a filtering pattern (matching condition is based on it)\n    public inputValue = '';\n\n    // Item property, which value should be used for filtering\n    public key: string;\n\n    // Represent items of the list. It should be used to handle decalaratevely defined widgets\n    public items: any[];\n\n    // Function - get value to be tested from the item\n    // item - single item of the list to be filtered\n    // key - property name of item, which value should be tested\n    // Default behavior - returns \"key\"- named property value of item if key si provided,\n    // otherwise textContent of the item's html element\n    public get_value(item: any, key: string): string {\n        let result = '';\n\n        if (key) {\n            result = item[key].toString();\n        } else if (item.element) {\n            if (item.element.nativeElement) {\n                result = item.element.nativeElement.textContent.trim();\n            // Check if element doesn't return the DOM element directly\n            } else if (item.element.textContent) {\n                result = item.element.textContent.trim();\n            }\n        }\n\n        return result;\n    }\n\n    // Function - formats the original text before matching process\n    // Default behavior - returns text to lower case\n    public formatter(valueToTest: string): string {\n        return valueToTest.toLowerCase();\n    }\n\n    // Function - determines whether the item met the condition\n    // valueToTest - text value that should be tested\n    // inputValue - text value from input that condition is based on\n    // Default behavior - \"contains\"\n    public matchFn(valueToTest: string, inputValue: string): boolean {\n        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;\n    }\n\n    // Function - executed after matching test for every matched item\n    // Default behavior - shows the item\n    public metConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = false;\n        }\n    }\n\n    // Function - executed for every NOT matched item after matching test\n    // Default behavior - hides the item\n    public overdueConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = true;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxFilterDirective, IgxFilterPipe],\n    exports: [IgxFilterDirective, IgxFilterPipe],\n    imports: [CommonModule]\n})\nexport class IgxFilterModule {\n}\n","import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../../core/edit-provider';\n\n@Directive({\n    exportAs: 'igxFocus',\n    selector: '[igxFocus]'\n})\nexport class IgxFocusDirective {\n\n    private focusState = true;\n    /**\n     * Returns the state of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let isFocusOn = this.igxFocus.focused;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    @Input('igxFocus')\n    get focused(): boolean {\n        return this.focusState;\n    }\n    /**\n     * Sets the state of the igxFocus.\n     * ```html\n     * <igx-input-group >\n     *  <input #focusContainer igxInput [igxFocus]=\"true\"/>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    set focused(val: boolean) {\n        this.focusState = val;\n        this.trigger();\n    }\n    /**\n     * Gets the native element of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let igxFocusNativeElement = this.igxFocus.nativeElement;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    get nativeElement() {\n        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {\n            return (this.comp[0] as EditorProvider).getEditElement();\n        }\n        return this.element.nativeElement;\n    }\n\n    constructor(private element: ElementRef, @Inject(NG_VALUE_ACCESSOR) @Self() @Optional() private comp?: any[]) { }\n    /**\n     * Triggers the igxFocus state.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * this.igxFocus.trigger();\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    trigger() {\n        if (this.focusState) {\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n}\n/**\n * The IgxFocusModule provides the {@link IgxFocusDirective} inside your application.\n */\n@NgModule({\n    declarations: [IgxFocusDirective],\n    exports: [IgxFocusDirective]\n})\nexport class IgxFocusModule { }\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'igx-display-container',\n    template: `\n        <ng-template\n            #display_container\n            igxScrollInertia\n            [IgxScrollInertiaScrollContainer]=\"scrollContainer\"\n            [IgxScrollInertiaDirection]=\"scrollDirection\">\n        </ng-template>\n    `\n})\nexport class DisplayContainerComponent {\n    @ViewChild('display_container', { read: ViewContainerRef })\n    public _vcr;\n\n    public scrollDirection: string;\n\n    @HostBinding('class')\n    public cssClass = 'igx-display-container';\n\n    @HostBinding('class.igx-display-container--inactive')\n    public notVirtual = true;\n\n    public scrollContainer;\n\n    constructor(public cdr: ChangeDetectorRef, public _viewContainer: ViewContainerRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-horizontal-virtual-helper',\n    template: '<div #horizontal_container class=\"igx-vhelper__placeholder-content\" [style.width.px]=\"width\"></div>'\n})\nexport class HVirtualHelperComponent {\n    @ViewChild('horizontal_container', { read: ViewContainerRef }) public _vcr;\n    @Input() public width: number;\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--horizontal';\n\n    constructor(public elementRef: ElementRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, OnDestroy } from '@angular/core';\n\n@Component({\n    selector: 'igx-virtual-helper',\n    template: '<div #container class=\"igx-vhelper__placeholder-content\" [style.height.px]=\"height\"></div>'\n})\nexport class VirtualHelperComponent implements OnDestroy {\n    @ViewChild('container', { read: ViewContainerRef }) public _vcr;\n    @Input() public itemsLength: number;\n    public height: number;\n\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--vertical';\n\n    public destroyed;\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n    }\n\n}\n","import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxScrollInertia]' })\nexport class IgxScrollInertiaDirective implements OnInit, OnDestroy {\n\n    constructor(private element: ElementRef, private _zone: NgZone) {\n\n    }\n\n    @Input()\n    public IgxScrollInertiaDirection: string;\n\n    @Input()\n    public IgxScrollInertiaScrollContainer: any;\n\n    @Input()\n    public wheelStep = 50;\n\n    @Input()\n    public inertiaStep = 1.5;\n\n    @Input()\n    public swipeToleranceX = 20;\n\n    @Input()\n    public inertiaDeltaY = 3;\n\n    @Input()\n    public inertiaDeltaX = 2;\n\n    @Input()\n    public inertiaDuration = 0.5;\n\n    private _touchInertiaAnimID;\n    private _startX;\n    private _startY;\n    private _touchStartX;\n    private _touchStartY;\n    private _lastTouchEnd;\n    private _lastTouchX;\n    private _lastTouchY;\n    private _savedSpeedsX = [];\n    private _savedSpeedsY;\n    private _totalMovedX;\n    private _offsetRecorded;\n    private _offsetDirection;\n    private _touchPrevented;\n    private _lastMovedX;\n    private _lastMovedY;\n    private _gestureObject;\n    private setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?\n    'msSetPointerCapture' :\n    'setPointerCapture';\n    private releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?\n    'msReleasePointerCapture' :\n    'releasePointerCapture';\n    private _pointer;\n    private _nextX;\n    private _nextY;\n\n    ngOnInit(): void {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.addEventListener('wheel',\n                    (evt) => { this.onWheel(evt); });\n            targetElem.addEventListener('touchstart',\n                    (evt) => { this.onTouchStart(evt); });\n            targetElem.addEventListener('touchmove',\n                    (evt) => { this.onTouchMove(evt); });\n            targetElem.addEventListener('touchend',\n                    (evt) => { this.onTouchEnd(evt); });\n            targetElem.addEventListener('pointerdown',\n                    (evt) => { this.onPointerDown(evt); });\n            targetElem.addEventListener('pointerup',\n                     (evt) => { this.onPointerUp(evt); });\n            targetElem.addEventListener('MSGestureStart',\n                    (evt) => { this.onMSGestureStart(evt); });\n            targetElem.addEventListener('MSGestureChange',\n                    (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n     /**\n     * @hidden\n     * Function that is called when scrolling with the mouse wheel or using touchpad\n     */\n    protected onWheel(evt) {\n        // if no scrollbar return\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        let scrollDeltaX;\n        let scrollDeltaY;\n        const scrollStep = this.wheelStep;\n        const minWheelStep = 1 / this.wheelStep;\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        if (evt.wheelDeltaX) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaX = -evt.wheelDeltaX / 120;\n\n            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {\n                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;\n            }\n        } else if (evt.deltaX) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);\n        }\n\n        /** Get delta for the Y axis*/\n        if (evt.wheelDeltaY) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaY = -evt.wheelDeltaY / 120;\n\n            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {\n                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;\n            }\n        } else if (evt.deltaY) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);\n        }\n        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {\n            this._scrollToX(\n                this._startX + scrollDeltaX * scrollStep\n            );\n            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;\n            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);\n            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {\n                // Prevent navigating through pages when scrolling on Mac\n                evt.preventDefault();\n            }\n        } else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {\n            this._scrollToY(\n                this._startY + scrollDeltaY * scrollStep\n            );\n            const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;\n            const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -\n                this.IgxScrollInertiaScrollContainer.offsetHeight;\n            if (0 < curScrollTop && curScrollTop < maxScrollTop) {\n                evt.preventDefault();\n            }\n        }\n\n    }\n\n    /**\n     * @hidden\n     * Function that is called the first moment we start interacting with the content on a touch device\n     */\n    protected onTouchStart(event) {\n        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {\n            return false;\n        }\n\n        // stops any current ongoing inertia\n        cancelAnimationFrame(this._touchInertiaAnimID);\n\n        const touch = event.touches[ 0 ];\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        this._touchStartX = touch.pageX;\n        this._touchStartY = touch.pageY;\n\n        this._lastTouchEnd = new Date().getTime();\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n        this._savedSpeedsX = [];\n        this._savedSpeedsY = [];\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n\n        this._touchPrevented = false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to scroll the content based on touch interactions\n     */\n    protected onTouchMove(event) {\n        if (typeof MSGesture === 'function') {\n            this._touchPrevented = false;\n            return false;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n\n        const touch = event.touches[ 0 ];\n        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);\n        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);\n\n        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */\n        /* **********************************************************/\n\n\n        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;\n        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {\n            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;\n            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;\n\n            // Save the last 5 speeds between two touchmoves on X axis\n            if (this._savedSpeedsX.length < 5) {\n                this._savedSpeedsX.push(speedX);\n            } else {\n                this._savedSpeedsX.shift();\n                this._savedSpeedsX.push(speedX);\n            }\n\n            // Save the last 5 speeds between two touchmoves on Y axis\n            if (this._savedSpeedsY.length < 5) {\n                this._savedSpeedsY.push(speedY);\n            } else {\n                this._savedSpeedsY.shift();\n                this._savedSpeedsY.push(speedY);\n            }\n        }\n        this._lastTouchEnd = new Date().getTime();\n        this._lastMovedX = this._lastTouchX - touch.pageX;\n        this._lastMovedY = this._lastTouchY - touch.pageY;\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n\n        this._totalMovedX += this._lastMovedX;\n\n        let scrolledXY; // Object: {x, y}\n        /*\tDo not scroll using touch untill out of the swipeToleranceX bounds */\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            scrolledXY = this._scrollTo(this._startX, destY);\n        } else {\n            /*\tRecord the direction the first time we are out of the swipeToleranceX bounds.\n\t\t\t*\tThat way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n\n            /*\tScroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and\n            don't change it after that ever until touchend and again touchstart */\n            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX,\n                destY);\n        }\n\n        if (scrolledXY.x === 0 && scrolledXY.y === 0) {\n            this._touchPrevented = true;\n        }\n\n        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow\n        if (!this._touchPrevented) {\n            event.preventDefault();\n        }\n    }\n\n    protected onTouchEnd(event) {\n        if (typeof MSGesture === 'function') {\n            return;\n        }\n        let speedX = 0;\n        let speedY = 0;\n\n        // savedSpeedsX and savedSpeedsY have same length\n        for (let i = 0; i < this._savedSpeedsX.length; i++) {\n            speedX += this._savedSpeedsX[ i ];\n            speedY += this._savedSpeedsY[ i ];\n        }\n        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;\n        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;\n\n         // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia\n        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&\n                        (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {\n                    this._inertiaInit(speedX, speedY);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch starting on a touch device on IE/Edge\n     */\n    protected onPointerDown(event) {\n        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||\n            typeof MSGesture !== 'function') {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // setPointerCaptureFName is the name of the function that is supported\n        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);\n\n        // create gestureObject only one time to prevent overlapping during intertia\n        if (!this._gestureObject) {\n            this._gestureObject = new MSGesture();\n            this._gestureObject.target = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n        }\n        this._gestureObject.addPointer(this._pointer);\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch ending on a touch device on IE/Edge\n     */\n    protected onPointerUp(event) {\n        if (!this._pointer) {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        /* releasePointerCaptureFName is the name of the function that is supported */\n        event.target[ this.releasePointerCaptureFName ](this._pointer);\n\n        delete this._pointer;\n    }\n\n    /**\n     * @hidden\n     *  Function that is called when a gesture begins on IE/Edge\n     */\n    protected onMSGestureStart(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n\n        this._touchStartX = event.screenX;\n        this._touchStartY = event.screenY;\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n        return false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge\n     */\n    protected onMSGestureChange(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        const touchPos = event,\n            destX = this._startX + this._touchStartX - touchPos.screenX,\n            destY = this._startY + this._touchStartY - touchPos.screenY;\n        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */\n        this._totalMovedX = this._touchStartX - touchPos.screenX;\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            /* Do not scroll horizontally yet while in the tolerance range */\n            this._scrollToY(destY);\n        } else {\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n            /* Once the tolerance is exceeded it can be scrolled horizontally */\n            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);\n        }\n\n        return false;\n    }\n\n    private calcAxisCoords(target, min, max) {\n        if (target === undefined || target < min) {\n            target = min;\n        } else if (target > max) {\n            target = max;\n        }\n\n        return target;\n    }\n\n    private _scrollTo(destX, destY) {\n        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n         // TODO Trigger scrolling event?\n        const scrolledX = this._scrollToX(destX);\n        const scrolledY = this._scrollToY(destY);\n\n        return { x: scrolledX, y: scrolledY };\n    }\n    private _scrollToX(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;\n    }\n    private _scrollToY(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollTop = dest;\n    }\n\n   protected _inertiaInit(speedX, speedY) {\n    const stepModifer = this.inertiaStep,\n        inertiaDuration = this.inertiaDuration;\n    let x = 0;\n    this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n    this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n    // Sets timeout until executing next movement iteration of the inertia\n    const inertiaStep = () => {\n        if (x > 6) {\n            cancelAnimationFrame(this._touchInertiaAnimID);\n            return;\n        }\n\n        if (Math.abs(speedX) > Math.abs(speedY)) {\n            x += 0.05 / (1 * inertiaDuration);\n        } else {\n            x += 0.05 / (1 * inertiaDuration);\n        }\n\n        if (x <= 1) {\n            // We use constant quation to determine the offset without speed falloff befor x reaches 1\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += 1 * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += 1 * speedY * 15 * stepModifer;\n            }\n        } else {\n            // We use the quation \"y = 2 / (x + 0.55) - 0.3\" to determine the offset\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;\n            }\n        }\n\n        // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse\n        this._scrollTo(this._nextX, this._nextY);\n\n        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n    };\n\n    // Start inertia and continue it recursively\n    this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n   }\n\n    ngOnDestroy() {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.removeEventListener('wheel',\n                (evt) => { this.onWheel(evt); });\n            targetElem.removeEventListener('touchstart',\n                (evt) => { this.onTouchStart(evt); });\n            targetElem.removeEventListener('touchmove',\n                (evt) => { this.onTouchMove(evt); });\n            targetElem.removeEventListener('touchend',\n                (evt) => { this.onTouchEnd(evt); });\n            targetElem.removeEventListener('pointerdown',\n                (evt) => { this.onPointerDown(evt); });\n            targetElem.removeEventListener('pointerup',\n                (evt) => { this.onPointerUp(evt); });\n            targetElem.removeEventListener('MSGestureStart',\n                (evt) => { this.onMSGestureStart(evt); });\n            targetElem.removeEventListener('MSGestureChange',\n                (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxScrollInertiaDirective],\n    exports: [IgxScrollInertiaDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxScrollInertiaModule {\n}\n\n","import { CommonModule, NgForOfContext } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    EventEmitter,\n    Input,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\nimport { DisplayContainerComponent } from './display.container';\nimport { HVirtualHelperComponent } from './horizontal.virtual.helper.component';\nimport { VirtualHelperComponent } from './virtual.helper.component';\nimport { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';\n\n@Directive({ selector: '[igxFor][igxForOf]' })\nexport class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy {\n\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForOf: any[];\n\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollOrientation: string;\n\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollContainer: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForContainerSize: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForItemSize: any;\n\n    /**\n     * @hidden\n     */\n    public dc: ComponentRef<DisplayContainerComponent>;\n\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    public state: IForOfState = {\n        startIndex: 0,\n        chunkSize: 0\n    };\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    public totalItemCount: number = null;\n\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkPreload = new EventEmitter<IForOfState>();\n\n    protected hScroll;\n    protected func;\n    protected sizesCache: number[];\n    protected vh: ComponentRef<VirtualHelperComponent>;\n    protected hvh: ComponentRef<HVirtualHelperComponent>;\n    protected _differ: IterableDiffer<T> | null = null;\n    protected _trackByFn: TrackByFunction<T>;\n    private heightCache = [];\n    private _adjustToIndex;\n\n    private get _isScrolledToBottom() {\n        if (!this.getVerticalScroll()) {\n            return true;\n        }\n        const scrollTop = this.getVerticalScroll().scrollTop;\n        const scrollHeight = this.getVerticalScroll().scrollHeight;\n        // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.\n        // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.\n        return Math.round(scrollTop + this.igxForContainerSize) === scrollHeight;\n    }\n\n    private get _isAtBottomIndex() {\n        return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;\n    }\n    private extraRowApplied = false;\n\n    // Start properties related to virtual height handling due to browser limitation\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n\n    /** Height that is being virtualized. */\n    protected _virtHeight = 0;\n\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio = 1;\n\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop = 0;\n\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal =  false;\n    // End properties related to virtual height handling\n\n    @ViewChild(DisplayContainerComponent)\n    private displayContiner: DisplayContainerComponent;\n\n    @ViewChild(VirtualHelperComponent)\n    private virtualHelper: VirtualHelperComponent;\n\n    protected _embeddedViews: Array<EmbeddedViewRef<any>> = [];\n\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        protected _template: TemplateRef<NgForOfContext<T>>,\n        protected _differs: IterableDiffers,\n        private resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef,\n        protected _zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    protected get isRemote(): boolean {\n        return this.totalItemCount !== null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._zone.runOutsideAngular(() =>\n                this.getHorizontalScroll().removeEventListener('scroll', this.func)\n            );\n        } else {\n            const vertical = this.getVerticalScroll();\n            if (vertical) {\n                this._zone.runOutsideAngular(() =>\n                    vertical.removeEventListener('scroll', this.verticalScrollHandler)\n                );\n            }\n        }\n    }\n\n    public verticalScrollHandler(event) {\n        this.onScroll(event);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        let totalSize = 0;\n        const vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;\n\n        const dcFactory: ComponentFactory<DisplayContainerComponent> = this.resolver.resolveComponentFactory(DisplayContainerComponent);\n        this.dc = this._viewContainer.createComponent(dcFactory, 0);\n        this.dc.instance.scrollDirection = this.igxForScrollOrientation;\n        if (typeof MSGesture === 'function') {\n            // On Edge and IE when scrolling on touch the page scroll instead of the grid.\n            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';\n        }\n        if (this.igxForOf && this.igxForOf.length) {\n            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);\n            totalSize = this.initSizesCache(this.igxForOf);\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            if (this.hScroll) {\n                this.state.startIndex = this.getIndexAt(this.hScroll.scrollLeft, this.sizesCache, 0);\n            }\n            this.state.chunkSize = this._calculateChunkSize();\n            for (let i = 0; i < this.state.chunkSize && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n                    this._template,\n                    { $implicit: input, index: this.igxForOf.indexOf(input) }\n                );\n                this._embeddedViews.push(embeddedView);\n            }\n        }\n\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n            const factory: ComponentFactory<VirtualHelperComponent> = this.resolver.resolveComponentFactory(VirtualHelperComponent);\n            this.vh = this._viewContainer.createComponent(factory, 1);\n            this._maxHeight = this._calcMaxBrowserHeight();\n            this.vh.instance.height = this.igxForOf ? this._calcHeight() : 0;\n            this._zone.runOutsideAngular(() => {\n                this.verticalScrollHandler = this.verticalScrollHandler.bind(this);\n                this.vh.instance.elementRef.nativeElement.addEventListener('scroll', this.verticalScrollHandler);\n                this.dc.instance.scrollContainer = this.vh.instance.elementRef.nativeElement;\n            });\n        }\n\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.func = (evt) => { this.onHScroll(evt); };\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            if (!this.hScroll) {\n                const hvFactory: ComponentFactory<HVirtualHelperComponent> =\n                    this.resolver.resolveComponentFactory(HVirtualHelperComponent);\n                this.hvh = vc.createComponent(hvFactory);\n                this.hvh.instance.width = totalSize;\n                this.hScroll = this.hvh.instance.elementRef.nativeElement;\n                this._zone.runOutsideAngular(() => {\n                    this.hvh.instance.elementRef.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            } else {\n                this._zone.runOutsideAngular(() => {\n                    this.hScroll.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            }\n\n            const scrollOffset = this.hScroll.scrollLeft -\n             (this.sizesCache && this.sizesCache.length ? this.sizesCache[this.state.startIndex] : 0);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n            this.dc.instance._viewContainer.element.nativeElement.style.height = '100%';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.removeScrollEventListeners();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        const forOf = 'igxForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                this.initSizesCache(this.igxForOf);\n                this._zone.run(() => {\n                    this._applyChanges(changes);\n                    this.cdr.markForCheck();\n                    this._updateScrollOffset();\n                });\n            }\n        }\n    }\n\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    public addScrollTop(addTop: number): boolean {\n        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {\n            return false;\n        }\n        const originalVirtScrollTop = this._virtScrollTop;\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n\n        this._bScrollInternal = true;\n        this._virtScrollTop += addTop;\n        this._virtScrollTop = this._virtScrollTop > 0 ?\n            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :\n            0;\n\n        this.vh.instance.elementRef.nativeElement.scrollTop += addTop / this._virtHeightRatio;\n        if (Math.abs(addTop / this._virtHeightRatio) < 1) {\n            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px\n            const scrollOffset = this.fixedUpdateAllRows(this._virtScrollTop);\n            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        }\n\n        const curScrollTop = this.vh.instance.elementRef.nativeElement.scrollTop;\n        const maxRealScrollTop = this.vh.instance.elementRef.nativeElement.scrollHeight - containerSize;\n        if ((this._virtScrollTop > 0 && curScrollTop === 0) ||\n            (this._virtScrollTop < maxVirtScrollTop && curScrollTop === maxRealScrollTop)) {\n            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)\n            // Recalculate actual scroll position based on the virtual scroll.\n            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop / this._virtHeightRatio;\n        } else if (this._virtScrollTop === 0 && curScrollTop > 0) {\n            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll\n            this.vh.instance.elementRef.nativeElement.scrollTop = 0;\n        } else if (this._virtScrollTop === maxVirtScrollTop && curScrollTop < maxRealScrollTop) {\n            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll\n            this.vh.instance.elementRef.nativeElement.scrollTop = maxRealScrollTop;\n        }\n        return this._virtScrollTop !== originalVirtScrollTop;\n    }\n\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     * @param index\n     */\n    public scrollTo(index) {\n        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length)) {\n            return;\n        }\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scr = this.igxForScrollOrientation === 'horizontal' ?\n            this.hScroll.scrollLeft : this.vh.instance.elementRef.nativeElement.scrollTop;\n        const isPrevItem = index < this.state.startIndex || scr >  this.sizesCache[index];\n        let nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;\n        if (nextScroll < 0) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hScroll.scrollLeft = nextScroll;\n        } else {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            if (nextScroll > maxVirtScrollTop) {\n                nextScroll = maxVirtScrollTop;\n            }\n            this._bScrollInternal = true;\n            this._virtScrollTop = nextScroll;\n            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop / this._virtHeightRatio;\n            this._adjustToIndex = !isPrevItem ? index : null;\n        }\n    }\n\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    public scrollNext() {\n        const scr = this.igxForScrollOrientation === 'horizontal' ?\n        this.hScroll.scrollLeft :\n        this.vh.instance.elementRef.nativeElement.scrollTop;\n        const endIndex = this.getIndexAt(\n            scr + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        this.scrollTo(endIndex);\n    }\n\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    public scrollPrev() {\n        this.scrollTo(this.state.startIndex - 1);\n    }\n\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    public scrollNextPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hvh.instance.elementRef.nativeElement.scrollLeft += parseInt(this.igxForContainerSize, 10);\n        } else {\n            this.addScrollTop(parseInt(this.igxForContainerSize, 10));\n        }\n    }\n\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    public scrollPrevPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hvh.instance.elementRef.nativeElement.scrollLeft -= parseInt(this.igxForContainerSize, 10);\n        } else {\n            const containerSize = (parseInt(this.igxForContainerSize, 10));\n            this.addScrollTop(-containerSize);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnScrollLeft(colIndex) {\n        return this.sizesCache[colIndex];\n    }\n\n    /**\n     * Returns a reference to the vertical scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getVerticalScroll();\n     * ```\n     */\n    public getVerticalScroll() {\n        if (this.vh) {\n            return this.vh.instance.elementRef.nativeElement;\n        }\n        return null;\n    }\n\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    public getItemCountInView() {\n            const position = this.igxForScrollOrientation === 'horizontal' ?\n                this.hScroll.scrollLeft :\n                this.vh.instance.elementRef.nativeElement.scrollTop;\n            let startIndex = this.getIndexAt(\n                position,\n                this.sizesCache,\n                0\n            );\n            if (position - this.sizesCache[startIndex] > 0 ) {\n                // fisrt item is not fully in view\n                startIndex++;\n            }\n            const endIndex = this.getIndexAt(\n                position + parseInt(this.igxForContainerSize, 10),\n                this.sizesCache,\n                0\n            );\n            return endIndex - startIndex;\n    }\n\n    /**\n     * Returns a reference to the horizontal scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getHorizontalScroll();\n     * ```\n     */\n    public getHorizontalScroll() {\n        return this.getElement(this._viewContainer, 'igx-horizontal-virtual-helper') || this.hScroll;\n    }\n\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    public getSizeAt(index: number) {\n        return this.sizesCache[index + 1] - this.sizesCache[index];\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop =  this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        const prevStartIndex = this.state.startIndex;\n        const scrollOffset = this.fixedUpdateAllRows(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        requestAnimationFrame(() => {\n            // check if height/width has changes in views.\n            this.recalcUpdateSizes();\n        });\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    public recalcUpdateSizes() {\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n        'width' : 'height';\n        const diffs = [];\n        let totalDiff = 0;\n        for (let i = 0; i < this._embeddedViews.length; i++) {\n            const view = this._embeddedViews[i];\n            const rNode = view.rootNodes.find((node) => node.nodeType === Node.ELEMENT_NODE);\n            if (rNode) {\n                const h = Math.max(rNode.offsetHeight, rNode.clientHeight, parseInt(this.igxForItemSize, 10));\n                const index = this.state.startIndex + i;\n                if (!this.isRemote && !this.igxForOf[index]) {\n                    continue;\n                }\n                const oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];\n                const newVal = dimension === 'height' ?  h : rNode.clientWidth;\n                if (dimension === 'height') {\n                    this.heightCache[index] = newVal;\n                } else {\n                    this.igxForOf[index][dimension] = newVal;\n                }\n                const currDiff = newVal - oldVal;\n                diffs.push(currDiff);\n                totalDiff += currDiff;\n                this.sizesCache[index + 1] += totalDiff;\n            }\n        }\n        // update cache\n        if (Math.abs(totalDiff) > 0) {\n            for (let j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {\n                this.sizesCache[j] += totalDiff;\n            }\n\n            // update scrBar heights/widths\n            if (this.igxForScrollOrientation === 'horizontal') {\n                const totalWidth = parseInt(this.hScroll.children[0].style.width, 10) + totalDiff;\n                this.hScroll.children[0].style.width = totalWidth + 'px';\n            }\n            const reducer = (acc, val) => acc + val;\n            if (this.igxForScrollOrientation === 'vertical') {\n                const scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;\n                const hSum = this.heightCache.reduce(reducer);\n                if (hSum > this._maxHeight) {\n                    this._virtHeightRatio =  hSum / this._maxHeight;\n                }\n                this.vh.instance.height = Math.min(this.vh.instance.height + totalDiff, this._maxHeight);\n                this._virtHeight = hSum;\n                if (!this.vh.instance.destroyed) {\n                    this.vh.instance.cdr.detectChanges();\n                }\n                if (scrToBottom && !this._isAtBottomIndex) {\n                    const containerSize = parseInt(this.igxForContainerSize, 10);\n                    const scrollOffset = this.fixedUpdateAllRows(this._virtHeight - containerSize);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n                    return;\n                }\n                if (this._adjustToIndex) {\n                    // in case scrolled to specific index where after scroll heights are changed\n                    // need to adjust the offsets so that item is last in view.\n                    const updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;\n                    const sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);\n                    const currOffset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = (currOffset - sumDiffs) + 'px';\n                    this._adjustToIndex = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllRows(inScrollTop: number): number {\n        const embeddedViewCopy = Object.assign([], this._embeddedViews);\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n\n        const ind = this.getIndexAt(\n            inScrollTop,\n            this.sizesCache,\n            0\n        );\n        // floating point number calculations are flawed so we need to handle rounding errors.\n        let currIndex = ind % 1 > 0.999 ? Math.round(ind) : Math.floor(ind);\n        const endingIndex = this.state.chunkSize + currIndex;\n        if (endingIndex > count) {\n            currIndex = count - this.state.chunkSize;\n        }\n\n        // We update the startIndex before recalculating the chunkSize.\n        const bUpdatedStart = this.state.startIndex !== currIndex;\n        this.state.startIndex = currIndex;\n\n        if (bUpdatedStart) {\n            this.onChunkPreload.emit(this.state);\n        }\n        if (this.isRemote) {\n            return inScrollTop - this.sizesCache[this.state.startIndex];\n        }\n\n        for (let i = this.state.startIndex; i < endingIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = embeddedViewCopy.shift();\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.igxForOf.indexOf(input);\n        }\n        const scrOffset = inScrollTop - this.sizesCache[this.state.startIndex];\n        return scrOffset;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n        const curScrollLeft = event.target.scrollLeft;\n        const prevStartIndex = this.state.startIndex;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllCols(curScrollLeft);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllCols(inScrollLeft) {\n        const startIndex = this.getIndexAt(\n            inScrollLeft,\n            this.sizesCache,\n            0\n        );\n        const bUpdatedStart = this.state.startIndex !== startIndex;\n        if (bUpdatedStart) {\n            this.onChunkPreload.emit(this.state);\n        }\n        /*recalculate and apply page size.*/\n        if (startIndex + this.state.chunkSize > this.igxForOf.length) {\n            this.state.startIndex = this.igxForOf.length - this.state.chunkSize;\n        } else {\n            this.state.startIndex = startIndex;\n        }\n        const embeddedViewCopy = Object.assign([], this._embeddedViews);\n        const endingIndex = this.state.chunkSize + this.state.startIndex;\n        for (let i = this.state.startIndex; i < endingIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = embeddedViewCopy.shift();\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.igxForOf.indexOf(input);\n        }\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n        const scrollWidth = parseInt(this.hScroll.children[0].style.width, 10);\n        const scrOffset = inScrollLeft - this.sizesCache[this.state.startIndex];\n        return scrOffset;\n    }\n\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    @Input()\n    get igxForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>) { this._trackByFn = fn; }\n\n    /**\n     * @hidden\n     */\n    protected _applyChanges(changes: IterableChanges<T>) {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.igxForOf.indexOf(input);\n            }\n            this.dc.changeDetectorRef.detectChanges();\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                this.recalcUpdateSizes();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.position = 'absolute';\n        style.top = '9999999999999999px';\n        document.body.appendChild(div);\n        const size = Math.abs(div.getBoundingClientRect()['top']);\n        document.body.removeChild(div);\n        return size;\n    }\n\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number {\n        let chunkSize = 0;\n        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {\n            if (!this.sizesCache) {\n               this.initSizesCache(this.igxForOf);\n            }\n            chunkSize = this._calcMaxChunkSize();\n            if (this.igxForOf && chunkSize > this.igxForOf.length) {\n               chunkSize = this.igxForOf.length;\n            }\n        } else {\n            if (this.igxForOf) {\n                chunkSize = this.igxForOf.length;\n            }\n        }\n        return chunkSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElement(viewref, nodeName) {\n        const elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);\n        return elem.length > 0 ? elem[0] : null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number {\n        let totalSize = 0;\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n        'width' : 'height';\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            if (dimension === 'height') {\n                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;\n                size = parseInt(this.igxForItemSize, 10) || 0;\n                this.heightCache.push(size);\n            } else {\n                size = parseInt(items[i][dimension], 10) || 0;\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize() {\n        let i = 0;\n        let length = 0;\n        let maxLength = 0;\n        const arr = [];\n        let sum = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n        'width' : 'height';\n        const reducer = (accumulator, currentItem) => accumulator + parseInt(currentItem[dimension], 10);\n        const availableSize = parseInt(this.igxForContainerSize, 10);\n        for (i; i < this.igxForOf.length; i++) {\n            let item = this.igxForOf[i];\n            if (dimension === 'height') {\n                item = { value: this.igxForOf[i], height: this.heightCache[i] };\n            }\n            const size = dimension === 'height' ?\n            this.heightCache[i] :\n            parseInt(item[dimension], 10);\n            sum = arr.reduce(reducer,  size);\n            if (sum <= availableSize) {\n                 arr.push(item);\n                 length = arr.length;\n                 if (i === this.igxForOf.length - 1) {\n                    // reached end without exceeding\n                    // include prev items until size is filled or first item is reached.\n                    let prevIndex = this.igxForOf.indexOf(arr[0]) - 1;\n                    while (prevIndex >= 0 && sum <= availableSize) {\n                        prevIndex = this.igxForOf.indexOf(arr[0]) - 1;\n                        const prevItem = this.igxForOf[prevIndex];\n                        const prevSize =  dimension === 'height' ?\n                        this.heightCache[prevIndex] :\n                        parseInt(prevItem[dimension], 10);\n                        sum = arr.reduce(reducer,  prevSize);\n                        arr.unshift(prevItem);\n                        length = arr.length;\n                    }\n                 }\n             } else {\n                 arr.push(item);\n                 length = dimension === 'width' ? arr.length + 1 : arr.length;\n                 if (dimension === 'height' && sum - availableSize < parseInt(this.igxForItemSize, 10)) {\n                     // add one more for vertical smooth scroll\n                     length++;\n                 }\n                 arr.splice(0, 1);\n             }\n             if (length > maxLength) {\n                 maxLength = length;\n             }\n        }\n        return maxLength;\n    }\n\n    /**\n     * @hidden\n     */\n     protected getIndexAt(left, set, index) {\n         let start = 0;\n         let end = set.length - 1;\n         if (left === 0) {\n             return 0;\n         }\n         while (start <= end) {\n             const midIdx = Math.floor((start + end) / 2);\n             const midLeft = set[midIdx];\n             const cmp = left - midLeft;\n             if (cmp > 0) {\n                 start = midIdx + 1;\n             } else if (cmp < 0) {\n                 end = midIdx - 1;\n             } else {\n                 return midIdx;\n             }\n         }\n         return end;\n    }\n\n    protected _recalcScrollBarSize() {\n        const count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);\n        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);\n        if (this.igxForScrollOrientation === 'horizontal') {\n            const totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;\n            this.hScroll.style.width = this.igxForContainerSize + 'px';\n            this.hScroll.children[0].style.width = totalWidth + 'px';\n        }\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.vh.instance.elementRef.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';\n            this.vh.instance.height = this._calcHeight();\n        }\n    }\n\n    private _calcHeight(): number {\n        let height = this.initSizesCache(this.igxForOf);\n        this._virtHeight = height;\n        if (height > this._maxHeight) {\n            this._virtHeightRatio = height / this._maxHeight;\n            height = this._maxHeight;\n        }\n        return height;\n    }\n\n    protected _recalcOnContainerChange(changes: SimpleChanges) {\n        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (prevChunkSize !== this.state.chunkSize) {\n            this.onChunkLoad.emit(this.state);\n        }\n        if (this.sizesCache && this.hScroll && this.hScroll.scrollLeft !== 0) {\n            // Updating horizontal chunks and offsets based on the new scrollLeft\n            const scrollOffset = this.fixedUpdateAllCols(this.hScroll.scrollLeft);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem() {\n        const oldElem = this._embeddedViews.pop();\n        oldElem.destroy();\n\n        this.state.chunkSize--;\n    }\n\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            { $implicit: input, index: elemIndex }\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n\n        this._zone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange() {\n        const chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();\n        if (chunkSize > this.state.chunkSize) {\n            const diff = chunkSize - this.state.chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.addLastElem();\n            }\n        } else if (chunkSize < this.state.chunkSize) {\n            const diff = this.state.chunkSize - chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.removeLastElem();\n            }\n        }\n    }\n\n    protected _updateScrollOffset() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._updateHScrollOffset();\n        } else {\n            this._updateVScrollOffset();\n        }\n    }\n    private _updateVScrollOffset() {\n        let scrollOffset = 0;\n        const vScroll = this.vh.instance.elementRef.nativeElement;\n        scrollOffset = vScroll && parseInt(vScroll.style.height, 10) ?\n        vScroll.scrollTop - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n    }\n    private _updateHScrollOffset() {\n        let scrollOffset = 0;\n        scrollOffset = this.hScroll && parseInt(this.hScroll.children[0].style.width, 10) ?\n        this.hScroll.scrollLeft - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n    const name = 'name';\n    return type[name] || typeof type;\n}\n\nexport interface IForOfState {\n    startIndex?: number;\n    chunkSize?: number;\n}\n\n@Directive({\n    selector: '[igxGridFor][igxGridForOf]'\n})\nexport class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n\n    @Input()\n    set igxGridForOf(value) {\n        this.igxForOf = value;\n    }\n\n    get igxGridForOf() {\n        return this.igxForOf;\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.removeScrollEventListeners();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const forOf = 'igxGridForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                this.initSizesCache(this.igxForOf);\n                this._applyChanges(changes);\n                this.cdr.markForCheck();\n                this._updateScrollOffset();\n            }\n        }\n    }\n\n    onScroll(event) {\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n\n        let scrollOffset = this.fixedUpdateAllRows(this._virtScrollTop);\n\n        scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        requestAnimationFrame(() => {\n            this.recalcUpdateSizes();\n        });\n    }\n\n    onHScroll(scrollAmount) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!this.hScroll || !parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllCols(scrollAmount);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            { $implicit: input, index: elemIndex }\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n    }\n\n    protected _applyChanges(changes: IterableChanges<T>) {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.igxForOf.indexOf(input);\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                requestAnimationFrame(() => {\n                    this.recalcUpdateSizes();\n                });\n            }\n        }\n    }\n}\n/**\n * The IgxForOfModule provides the {@link IgxForOfDirective}, inside your application.\n */\n\n@NgModule({\n    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    exports: [IgxForOfDirective, IgxGridForOfDirective],\n    imports: [IgxScrollInertiaModule, CommonModule]\n})\n\nexport class IgxForOfModule {\n}\n","import { Directive, HostBinding, Input, NgModule } from '@angular/core';\n\n@Directive({\n    selector: '[igxLayout]'\n})\nexport class IgxLayoutDirective {\n    /**\n     * Sets the default flow direction of the container's children.\n     *\n     * Defaults to `rows`.\n     *\n     * ```html\n     *  <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     *  </div>\n     * ```\n     */\n    @Input('igxLayoutDir') public dir = 'row';\n\n    /**\n     * Defines the direction flex children are placed in the flex container.\n     *\n     * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutReverse=\"true\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutReverse') public reverse = false;\n\n    /**\n     * By default the immediate children will all try to fit onto one line.\n     *\n     * The default value `nowrap` sets this behavior.\n     *\n     * Other accepted values are `wrap` and `wrap-reverse`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\"\n     *   igxLayoutWrap=\"wrap\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutWrap') public wrap = 'nowrap';\n\n    /**\n     * Defines the alignment along the main axis.\n     *\n     * Defaults to `flex-start` which packs the children toward the start line.\n     *\n     * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutJustify=\"space-between\">\n     *    <div>1</div>\n     *    <div>2</div>\n     *    <div>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutJustify') public justify = 'flex-start';\n\n    /**\n     * Defines the default behavior for how children are laid out along the corss axis of the current line.\n     *\n     * Defaults to `flex-start`.\n     *\n     * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutItemAlign=\"start\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutItemAlign') public itemAlign = 'stretch';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display') public display = 'flex';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-wrap') get flexwrap() { return this.wrap; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.justify-content') get justifycontent() { return this.justify; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.align-items') get align() { return this.itemAlign; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-direction')\n    get direction() {\n        if (this.reverse) {\n            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';\n        }\n        return (this.dir === 'row') ? 'row' : 'column';\n    }\n}\n\n@Directive({\n    selector: '[igxFlex]'\n})\nexport class IgxFlexDirective {\n\n    /**\n     * Applies the `grow` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content1</div>\n     *    <div igxFlex igxFlexGrow=\"1\">Content2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexGrow') public grow = 1;\n\n    /**\n     * Applies the `shrink` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content1</div>\n     *    <div igxFlex igxFlexShrink=\"0\">Content2</div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexShrink') public shrink = 1;\n\n    /**\n     * Applies the directive to an element.\n     *\n     * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.\n     *\n     * ```html\n     * <div igxFlex>Content</div>\n     * ```\n     */\n    @Input('igxFlex') public flex = '';\n\n    /**\n     * Applies the `order` attribute to an element that uses the directive.\n     *\n     * Default value is `0`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexOrder=\"1\">Content1</div>\n     *    <div igxFlex igxFlexOrder=\"0\">Content2</div>\n     *    <div igxFlex igxFlexOrder=\"2\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexOrder') public order = 0;\n\n    /**\n     * Applies the `flex-basis` attribute to an element that uses the directive.\n     *\n     * Default value is `auto`.\n     *\n     * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.\n     *\n     * ```html\n     * <div igxFlex igxFlexBasis=\"fit-content\">Content</div>\n     * ```\n     */\n    @Input('igxFlexBasis') public basis = 'auto';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex')\n    get style() {\n        if (this.flex) {\n            return `${this.flex}`;\n        }\n        return `${this.grow} ${this.shrink} ${this.basis}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.order')\n    get itemorder() {\n        return this.order || 0;\n    }\n}\n\n@NgModule({\n    declarations: [IgxFlexDirective, IgxLayoutDirective],\n    exports: [IgxFlexDirective, IgxLayoutDirective]\n})\nexport class IgxLayoutModule { }\n","/**\n * @hidden\n */\nexport const MASK_FLAGS = [ 'C', '&', 'a', 'A', '?', 'L', '9', '0', '#' ];\n\n/**\n * @hidden\n */\nexport const KEYS = {\n    Ctrl : 17,\n    Z : 90,\n    Y : 89,\n    X : 88,\n    BACKSPACE : 8,\n    DELETE : 46\n  };\n\n\n/**\n * @hidden\n */\nexport class MaskHelper {\n    private _cursor;\n    public get cursor() {\n        return this._cursor;\n    }\n    public data: boolean;\n\n    public parseValueByMask(value, maskOptions, cursor): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (inputValue.length < mask.length) { // BACKSPACE, DELETE\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);\n                this._cursor = cursor + 1;\n            } else {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);\n                this._cursor = cursor + 1;\n                for (let i = this._cursor; i < 0; i--) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor--;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        } else {\n            const char = inputValue[cursor];\n            let isCharValid = this.validateCharOnPostion(char, cursor, mask);\n            if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, cursor, char);\n                    this._cursor = cursor + 1;\n                } else {\n                    this._cursor = cursor;\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                this._cursor = ++cursor;\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor = ++cursor;\n                    } else {\n                        isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, cursor, char);\n                            this._cursor = ++cursor;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskOnInit(inputVal, maskOptions): string {\n        let outputVal = '';\n        let value = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n        const literalValues: string[] = Array.from(literals.values());\n\n        if (inputVal != null) {\n            value = inputVal.toString();\n        }\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        if (!value) {\n            return outputVal;\n        }\n\n        const nonLiteralValues: string[] = this.getNonLiteralValues(value, literalValues);\n\n        for (let i = 0; i < nonLiteralValues.length; i++) {\n            const char = nonLiteralValues[i];\n            const isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);\n\n            if (!isCharValid && char !== maskOptions.promptChar) {\n                nonLiteralValues[i] = maskOptions.promptChar;\n            }\n        }\n\n        if (nonLiteralValues.length > nonLiteralIndeces.length) {\n            nonLiteralValues.splice(nonLiteralIndeces.length);\n        }\n\n        let pos = 0;\n        for (const nonLiteralValue of nonLiteralValues) {\n            const char = nonLiteralValue;\n            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);\n        }\n\n        return outputVal;\n    }\n\n    public restoreValueFromMask(value, maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalValues: string[] = Array.from(literals.values());\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                if (val !== maskOptions.promptChar) {\n                    outputVal += val;\n                }\n            }\n        }\n\n        return outputVal;\n    }\n\n    public parseValueByMaskUponSelection(value, maskOptions, cursor, selection): string {\n        let isCharValid: boolean;\n        let inputValue: string = value;\n        const char: string = inputValue[cursor];\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (!this.data) {\n            this._cursor = cursor < 0 ? ++cursor : cursor;\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                selection--;\n                if (selection > 0) {\n                    for (let i = 0; i < selection; i++) {\n                        cursor++;\n                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?\n                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :\n                            this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    }\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);\n                this._cursor++;\n                selection--;\n                let isMarked = false;\n                if (selection > 0) {\n                    cursor = this._cursor;\n                    for (let i = 0; i < selection; i++) {\n                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                            isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                            if (isCharValid && !isMarked) {\n                                inputValue = this.insertCharAt(inputValue, cursor, char);\n                                cursor++;\n                                this._cursor++;\n                                isMarked = true;\n                            } else {\n                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                                cursor++;\n                            }\n                        } else {\n                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                            if (cursor === this._cursor) {\n                                this._cursor++;\n                            }\n                            cursor++;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (this._cursor < 0) {\n                this._cursor++;\n                cursor++;\n            }\n            cursor++;\n            this._cursor = cursor;\n            for (let i = 0; i < selection; i++) {\n                if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                    cursor++;\n                } else {\n                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    cursor++;\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskUponCopyPaste(value, maskOptions, cursor, clipboardData, selection): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        const selectionEnd = cursor + selection;\n\n        this._cursor = cursor;\n        for (const clipboardSym of clipboardData) {\n            const char = clipboardSym;\n\n            if (this._cursor > mask.length) {\n                return inputValue;\n            }\n\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                }\n            } else {\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor++;\n                    } else {\n                        const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                        }\n                        break;\n                    }\n                }\n            }\n\n            selection--;\n        }\n\n        if (selection > 0) {\n            for (let i = this._cursor; i < selectionEnd; i++) {\n                if (literalKeys.indexOf(this._cursor) !== -1) {\n                    this._cursor++;\n                } else {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    private validateCharOnPostion(inputChar: string, position: number, mask: string): boolean {\n        let regex: RegExp;\n        let isValid: boolean;\n        const letterOrDigitRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterDigitOrSpaceRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const letterRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letteSpaceRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const digitRegEx = '[\\\\d]';\n        const digitSpaceRegEx = '[\\\\d\\\\u0020]';\n        const digitSpecialRegEx = '[\\\\d-\\\\+]';\n\n        switch (mask.charAt(position)) {\n            case 'C':\n                isValid = inputChar !== '';\n                break;\n            case '&':\n                regex = new RegExp('[\\\\u0020]');\n                isValid = !regex.test(inputChar);\n                break;\n            case 'a':\n                regex = new RegExp(letterDigitOrSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'A':\n                regex = new RegExp(letterOrDigitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '?':\n                regex = new RegExp(letteSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'L':\n                regex = new RegExp(letterRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '0':\n                regex = new RegExp(digitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '9':\n                regex = new RegExp(digitSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '#':\n                regex = new RegExp(digitSpecialRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            default: {\n                isValid = null;\n            }\n        }\n\n        return isValid;\n    }\n    private replaceCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index + 1);\n        }\n    }\n    private insertCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index);\n        }\n    }\n    private getMaskLiterals(mask: string): Map<number, string> {\n        const literals = new Map<number, string>();\n\n        for (let i = 0; i < mask.length; i++) {\n            const char = mask.charAt(i);\n            if (MASK_FLAGS.indexOf(char) === -1) {\n                literals.set(i, char);\n            }\n        }\n\n        return literals;\n    }\n    private getNonLiteralIndeces(mask: string, literalKeys: number[]): number[] {\n        const nonLiteralsIndeces: number[] = new Array();\n\n        for (let i = 0; i < mask.length; i++) {\n            if (literalKeys.indexOf(i) === -1) {\n                nonLiteralsIndeces.push(i);\n            }\n        }\n\n        return nonLiteralsIndeces;\n    }\n    private getNonLiteralValues(value: string, literalValues: string[]): string[] {\n        const nonLiteralValues: string[] = new Array();\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                nonLiteralValues.push(val);\n            }\n        }\n\n        return nonLiteralValues;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    NgModule,\n    OnInit,\n    Output\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { KEYS, MaskHelper } from './mask-helper';\n\nconst noop = () => { };\n\n@Directive({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],\n    selector: '[igxMask]'\n})\nexport class IgxMaskDirective implements OnInit, ControlValueAccessor {\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input('igxMask')\n    public mask: string;\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public promptChar: string;\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public includeLiterals: boolean;\n    /**\n     *@hidden\n     */\n    @Input()\n    private dataValue: string;\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<IMaskEventArgs>();\n    /**\n     *@hidden\n     */\n    private get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     *@hidden\n     */\n    private set value(val) {\n        this.nativeElement.value = val;\n    }\n    /**\n     *@hidden\n     */\n    private get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private get selectionStart() {\n        return this.nativeElement.selectionStart;\n    }\n    /**\n     *@hidden\n     */\n    private get selectionEnd() {\n        return this.nativeElement.selectionEnd;\n    }\n    /**\n     *@hidden\n     */\n    private _ctrlDown: boolean;\n    /**\n     *@hidden\n     */\n    private _cachedVal: string;\n    /**\n     *@hidden\n     */\n    private _paste: boolean;\n    /**\n     *@hidden\n     */\n    private _selection: number;\n    /**\n     *@hidden\n     */\n    private _maskOptions = {\n        format: '',\n        promptChar: ''\n    };\n    /**\n     *@hidden\n     */\n    private _key;\n    /**\n     *@hidden\n     */\n    private _cursorOnPaste;\n    /**\n     *@hidden\n     */\n    private _valOnPaste;\n    /**\n     *@hidden\n     */\n    private maskHelper: MaskHelper;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    constructor(private elementRef: ElementRef) {\n        this.maskHelper = new MaskHelper();\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';\n        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';\n        this.nativeElement.setAttribute('placeholder', this.mask);\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = true;\n        }\n\n        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {\n            event.preventDefault();\n        }\n\n        this._key = key;\n        this._selection = Math.abs(this.selectionEnd - this.selectionStart);\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keyup', ['$event'])\n    public onKeyup(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = false;\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('paste', ['$event'])\n    public onPaste(event): void {\n        this._paste = true;\n\n        this._valOnPaste = this.value;\n        this._cursorOnPaste = this.getCursorPosition();\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('input', ['$event'])\n    public onInputChanged(event): void {\n        if (this._paste) {\n            this._paste = false;\n\n            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());\n            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(\n                this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        } else {\n            const currentCursorPos = this.getCursorPosition();\n\n            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);\n\n            this.value = this._selection && this._selection !== 0 ?\n                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :\n                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        }\n\n        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : rawVal;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);\n    }\n    /**\n     *@hidden\n     */\n    private getCursorPosition(): number {\n        return this.nativeElement.selectionStart;\n    }\n    /**\n     *@hidden\n     */\n    private setCursorPosition(start: number, end: number = start): void {\n        this.nativeElement.setSelectionRange(start, end);\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this.value = this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : value;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\n\nexport interface IMaskEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n@NgModule({\n    declarations: [IgxMaskDirective],\n    exports: [IgxMaskDirective],\n    imports: [CommonModule]\n})\nexport class IgxMaskModule { }\n","/**\n *@hidden\n */\nexport function cloneArray(array, deep?: boolean) {\n    const arr = [];\n    if (!array) {\n        return arr;\n    }\n    let i = array.length;\n    while (i--) {\n        arr[i] = deep ? cloneValue(array[i]) : array[i];\n    }\n    return arr;\n}\n\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport function cloneHierarchicalArray(array: any[], childDataKey: any): any[] {\n    const result: any[] = [];\n    if (!array) {\n        return result;\n    }\n\n    for (const item of array) {\n        if (Array.isArray(item[childDataKey])) {\n            const clonedItem = cloneValue(item);\n            clonedItem[childDataKey] = cloneHierarchicalArray(clonedItem[childDataKey], childDataKey);\n            result.push(clonedItem);\n        } else {\n            result.push(item);\n        }\n    }\n    return result;\n}\n\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport function mergeObjects(obj1: {}, obj2: {}): any {\n    if (!isObject(obj1)) {\n        throw new Error(`Cannot merge into ${obj1}. First param must be an object.`);\n    }\n\n    if (!isObject(obj2)) {\n        return obj1;\n    }\n\n    for (const key of Object.keys(obj2)) {\n        obj1[key] = cloneValue(obj2[key]);\n    }\n\n    return obj1;\n}\n\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n *@hidden\n */\nexport function cloneValue(value: any): any {\n    if (isDate(value)) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return [...value];\n    }\n\n    if (value instanceof Map || value instanceof Set) {\n        return value;\n    }\n\n    if (isObject(value)) {\n        const result = {};\n\n        for (const key of Object.keys(value)) {\n            result[key] = cloneValue(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n *@hidden\n */\nexport function isObject(value: any): boolean {\n    return value && value.toString() === '[object Object]';\n}\n\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n *@hidden\n */\nexport function isDate(value: any) {\n    return Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport function isEqual(obj1, obj2): boolean {\n    if (isDate(obj1) && isDate(obj2)) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    return obj1 === obj2;\n}\n\n/**\n *@hidden\n */\nexport const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9\n}\n\n/**\n *@hidden\n */\nexport const enum KEYS {\n    ENTER = 'Enter',\n    SPACE = ' ',\n    SPACE_IE = 'Spacebar',\n    ESCAPE = 'Escape',\n    ESCAPE_IE = 'Esc',\n    LEFT_ARROW = 'ArrowLeft',\n    UP_ARROW = 'ArrowUp',\n    RIGHT_ARROW = 'ArrowRight',\n    DOWN_ARROW = 'ArrowDown',\n    F2 = 'F2',\n    TAB = 'Tab'\n}\n\n/**\n *@hidden\n* Returns the actual size of the node content, using Range\n* ```typescript\n* let range = document.createRange();\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingRange(range, column.cells[0].nativeElement);\n* ```\n */\nexport function valToPxlsUsingRange(range: Range, node: any): number {\n    let overflow = null;\n    if (isIE() || isEdge()) {\n        overflow = node.style.overflow;\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = 'visible';\n    }\n\n    range.selectNodeContents(node);\n    const width = range.getBoundingClientRect().width;\n\n    if (isIE() || isEdge()) {\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = overflow;\n    }\n\n    return width;\n}\n/**\n *@hidden\n* Returns the actual size of the node content, using Canvas\n* ```typescript\n* let ctx = document.createElement('canvas').getContext('2d');\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n* ```\n */\nexport function valToPxlsUsingCanvas(canvas2dCtx: any, node: any): number {\n    const s = this.grid.document.defaultView.getComputedStyle(node);\n\n    // need to set the font to get correct width\n    canvas2dCtx.font = s.fontSize + ' ' + s.fontFamily;\n\n    return canvas2dCtx.measureText(node.textContent).width;\n}\n/**\n *@hidden\n */\nexport function isIE(): boolean {\n    return navigator.appVersion.indexOf('Trident/') > 0;\n}\n/**\n *@hidden\n */\nexport function isEdge(): boolean {\n    const edgeBrowser = /Edge[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return edgeBrowser;\n}\n\n/**\n *@hidden\n */\nexport function isFirefox(): boolean {\n    const firefoxBrowser = /Firefox[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return firefoxBrowser;\n}\n\n/** @hidden */\nexport function isNavigationKey(key: string): boolean {\n    return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n        'home', 'end', 'space', 'spacebar', ' '].indexOf(key) !== -1;\n}\n\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\n","import {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport interface IChangeRadioEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\n\nexport enum RadioLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nlet nextId = 0;\nconst noop = () => { };\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent, multi: true }],\n    selector: 'igx-radio',\n    template: `<input #radio class=\"igx-radio__input\" type=\"radio\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [tabindex]=\"tabindex\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-labelledby]=\"ariaLabelledBy\"\n    [attr.aria-label]=\"ariaLabel\"\n    (click)=\"_onRadioClick($event)\"\n    (change)=\"_onRadioChange($event)\"\n    (focus)=\"onFocus($event)\"\n    (blur)=\"onBlur($event)\" />\n\n<label #nativeLabel class=\"igx-radio__composite\" igxRipple\n    igxRippleTarget=\".igx-radio__ripple\"\n    [igxRippleDisabled]=\"disableRipple\"\n    [igxRippleCentered]=\"true\"\n    [igxRippleDuration]=\"300\"\n    [for]=\"inputId\">\n    <div class=\"igx-radio__ripple\"></div>\n</label>\n\n<span #placeholderLabel role=\"label\"\n    [id]=\"labelId\"\n    [class]=\"labelClass\"\n    (click)=\"_onLabelClick()\">\n    <ng-content></ng-content>\n</span>\n`\n})\n\nexport class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('radio') public nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('nativeLabel') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-radio-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio')\n    public cssClass = 'igx-radio';\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    protected _value: any = null;\n\n    constructor() { }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    public _onRadioChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onRadioClick(event) {\n        event.stopPropagation();\n        this.select();\n\n        if (isIE()) {\n            this.nativeRadio.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick() {\n        this.select();\n    }\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    public select() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = true;\n        this.focused = false;\n        this.change.emit({ value: this.value, radio: this });\n        this._onChangeCallback(this.value);\n    }\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this._value = value;\n        this.checked = (this._value === this.value);\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeRadio.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case RadioLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case RadioLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n","import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';\n\n@Directive({\n    selector: '[igxRipple]'\n})\nexport class IgxRippleDirective {\n    /**\n     * Sets/gets the ripple target.\n     * ```html\n     * <div  #rippleContainer class=\"div-1\" igxRipple [igxRippleTarget] = \"'.div-1'\"></div>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleTarget = this.ripple.rippleTarget;\n     * ```\n     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.\n     * ```html\n     * <div #rippleContainer [igxRippleTarget] = \"'#child\"'>\n     *  <button id=\"child\">Click</button>\n     * </div>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleTarget')\n    public rippleTarget = '';\n    /**\n     * Sets/gets the ripple color.\n     * ```html\n     * <button #rippleContainer [igxRipple] = \"'red'\" ></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleColor = this.ripple.rippleColor;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRipple')\n    public rippleColor: string;\n    /**\n     * Sets/gets the ripple duration(in milliseconds).\n     * Default value is `600`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDuration] = \"800\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleDuration = this.ripple.rippleDuration;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDuration')\n    public rippleDuration = 600;\n    /**\n     * Enables/disables the ripple to be centered.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleCentered] = \"true\"></button>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleCentered') set centered(value: boolean) {\n        this._centered = value || this.centered;\n    }\n    /**\n     * Sets/gets whether the ripple is disabled.\n     * Default value is `false`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDisabled] = \"true\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let isRippleDisabled = this.ripple.rippleDisabled;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDisabled')\n    public rippleDisabled = false;\n\n    protected get nativeElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    private rippleElementClass = 'igx-ripple__inner';\n    private rippleHostClass = 'igx-ripple';\n\n    private animationFrames = [\n        { opacity: 0.5, transform: 'scale(.3)' },\n        { opacity: 0, transform: 'scale(2)' }\n    ];\n\n\n    private _centered = false;\n    private animationQueue = [];\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected renderer: Renderer2,\n        private zone: NgZone) { }\n    /**\n     *@hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event) {\n        this.zone.runOutsideAngular(() => this._ripple(event));\n    }\n\n    private setStyles(rippleElement: HTMLElement, styleParams: any) {\n        this.renderer.addClass(rippleElement, this.rippleElementClass);\n        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);\n        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);\n        if (this.rippleColor) {\n            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);\n        }\n    }\n\n    private _ripple(event) {\n        if (this.rippleDisabled) {\n            return;\n        }\n\n        const target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);\n\n        const rectBounds = target.getBoundingClientRect();\n        const radius = Math.max(rectBounds.width, rectBounds.height);\n        let left = event.clientX - rectBounds.left - radius / 2;\n        let top = event.clientY - rectBounds.top - radius / 2;\n\n        if (this._centered) {\n            left = top = 0;\n        }\n\n        const dimensions = {\n            radius,\n            top,\n            left\n        };\n\n        const rippleElement = this.renderer.createElement('span');\n\n        this.setStyles(rippleElement, dimensions);\n        this.renderer.addClass(target, this.rippleHostClass);\n        this.renderer.appendChild(target, rippleElement);\n\n        const animation = rippleElement.animate(this.animationFrames, { duration: this.rippleDuration, fill: 'forwards' });\n        this.animationQueue.push(animation);\n\n        animation.onfinish = () => {\n            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);\n            target.removeChild(rippleElement);\n            if (this.animationQueue.length < 1) {\n                this.renderer.removeClass(target, this.rippleHostClass);\n            }\n        };\n    }\n}\n/**\n * The IgxRippleModule provides the {@link IgxRippleDirective} inside your application.\n */\n@NgModule({\n    declarations: [IgxRippleDirective],\n    exports: [IgxRippleDirective]\n})\nexport class IgxRippleModule { }\n","import { Directive, NgModule, Input, QueryList, Output, EventEmitter, AfterContentInit, ContentChildren, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\nimport { IgxRippleModule } from '../ripple/ripple.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst noop = () => { };\nlet nextId = 0;\n\n/**\n * **Ignite UI for Angular Radio Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_group.html)\n *\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\n@Directive({\n    selector: 'igx-radio-group, [igxRadioGroup]',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective, multi: true }]\n})\nexport class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @ContentChildren(IgxRadioComponent) public radioButtons: QueryList<IgxRadioComponent>;\n\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let value =  this.radioGroup.value;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this._selectRadioButton();\n        }\n    }\n\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     * ```typescript\n     * let name =  this.radioGroup.name;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get name(): string { return this._name; }\n    set name(newValue: string) {\n        if (this._name !== newValue) {\n            this._name = newValue;\n            this._setRadioButtonNames();\n        }\n    }\n\n    /**\n     * Sets/gets whether the radio group is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radioGroup.required;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(newValue: boolean) {\n        if (this._required !== newValue) {\n            this._required = newValue;\n            this._setRadioButtonsRequired();\n        }\n    }\n\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     * ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(newValue: boolean) {\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disableRadioButtons();\n        }\n    }\n\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radioGroup.labelPosition;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get labelPosition(): RadioLabelPosition | string { return this._labelPosition; }\n    set labelPosition(newValue: RadioLabelPosition | string) {\n        if (this._labelPosition !== newValue) {\n            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;\n            this._setRadioButtonLabelPosition();\n        }\n    }\n\n    /**\n     * Sets/gets the selected child radio button.\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: IgxRadioComponent | null) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n        }\n    }\n\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioGroupDirective\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    private _name = `igx-radio-group-${nextId++}`;\n    /**\n     *@hidden\n     */\n    private _value: any = null;\n    /**\n     *@hidden\n     */\n    private _selected: IgxRadioComponent | null = null;\n    /**\n     *@hidden\n     */\n    private _isInitialized = false;\n    /**\n     *@hidden\n     */\n    private _labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     *@hidden\n     */\n    private _disabled = false;\n    /**\n     *@hidden\n     */\n    private _required = false;\n    /**\n     *@hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    ngAfterContentInit() {\n        // The initial value can possibly be set by NgModel and it is possible that\n        // the OnInit of the NgModel occurs after the OnInit of this class.\n        this._isInitialized = true;\n\n        setTimeout(() => { this._initRadioButtons(); });\n    }\n\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this.value = value;\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.registerOnTouched(fn);\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    private _initRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n                button.labelPosition = this._labelPosition;\n                button.disabled = this._disabled;\n                button.required = this._required;\n\n                if (this._value && button.value === this._value) {\n                    button.checked = true;\n                    this._selected = button;\n                }\n\n                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectedRadioButtonChanged(args: IChangeRadioEventArgs) {\n        if (this._selected !== args.radio) {\n            if (this._selected) {\n                this._selected.checked = false;\n            }\n            this._selected = args.radio;\n        }\n\n        this._value = args.value;\n\n        if (this._isInitialized) {\n            this.change.emit(args);\n            this._onChangeCallback(this.value);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonNames() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectRadioButton() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                if (!this._value) {\n                    // no value - uncheck all radio buttons\n                    if (button.checked) {\n                        button.checked = false;\n                    }\n                } else {\n                    if (this._value === button.value) {\n                        // selected button\n                        if (this._selected !== button) {\n                            this._selected = button;\n                        }\n\n                        if (!button.checked) {\n                            button.select();\n                        }\n                    } else {\n                        // non-selected button\n                        if (button.checked) {\n                            button.checked = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonLabelPosition() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.labelPosition = this._labelPosition;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _disableRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.disabled = this._disabled;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonsRequired() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.required = this._required;\n            });\n        }\n    }\n}\n\n/**\n *The IgxRadioModule provides the {@link IgxRadioGroupDirective} and {@link IgxRadioComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxRadioGroupDirective, IgxRadioComponent],\n    exports: [IgxRadioGroupDirective, IgxRadioComponent],\n    imports: [IgxRippleModule]\n})\nexport class IgxRadioModule { }\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    OnDestroy,\n    Output,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n\nexport interface IActiveHighlightInfo {\n    rowIndex: number;\n    columnIndex: number;\n    page: number;\n    index: number;\n}\n\n@Directive({\n    selector: '[igxTextHighlight]'\n})\nexport class IgxTextHighlightDirective implements AfterViewInit, OnDestroy, OnChanges {\n    private static onActiveElementChanged = new EventEmitter<string>();\n    public static highlightGroupsMap = new Map<string, IActiveHighlightInfo>();\n\n    private _lastSearchInfo: ISearchInfo;\n    private _div = null;\n    private _observer: MutationObserver = null;\n    private _nodeWasRemoved = false;\n    private _forceEvaluation = false;\n    private _activeElementIndex = -1;\n\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    @Input('cssClass')\n    public cssClass: string;\n\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    @Input('activeCssClass')\n    public activeCssClass: string;\n\n    /**\n     * @hidden\n     */\n    @Input('containerClass')\n    public containerClass: string;\n\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    @Input('groupName')\n    public groupName = '';\n\n    private _value = '';\n\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    @Input('value')\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        if (value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * The index of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('row')\n    public row: number;\n\n    /**\n     * The index of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('column')\n    public column: number;\n\n    /**\n     * The index of the page on which the directive is currently on.\n     * It is used when the component containing the directive supports paging.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [page]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('page')\n    public page: number;\n\n    /**\n     * @hidden\n     */\n    public parentElement: any;\n\n    private _container: any;\n\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    public static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public static clearActiveHighlight(groupName) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {\n            rowIndex: -1,\n            columnIndex: -1,\n            page: -1,\n            index: -1\n        });\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    constructor(element: ElementRef, public renderer: Renderer2) {\n        this.parentElement = this.renderer.parentNode(element.nativeElement);\n\n        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {\n            if (this.groupName === groupName) {\n                if (this._activeElementIndex !== -1) {\n                    this.deactivate();\n                }\n                this.activateIfNecessary();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        if (this._observer !== null) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && !changes.value.firstChange) {\n            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n            this.activateIfNecessary();\n        }\n\n        if ((changes.row !== undefined && !changes.row.firstChange) ||\n            (changes.column !== undefined && !changes.column.firstChange) ||\n            (changes.page !== undefined && !changes.page.firstChange)) {\n            if (this._activeElementIndex !== -1) {\n                this.deactivate();\n            }\n\n            this.activateIfNecessary();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {\n            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {\n                rowIndex: -1,\n                columnIndex: -1,\n                page: -1,\n                index: -1\n            });\n        }\n\n        this._lastSearchInfo = {\n            searchedText: '',\n            content: this.value,\n            matchCount: 0,\n            caseSensitive: false,\n            exactMatch: false\n        };\n\n        this._container = this.parentElement.firstElementChild;\n    }\n\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    public highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n\n        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n            this._lastSearchInfo.content = this.value;\n\n            if (text === '' || text === undefined || text === null) {\n                this.clearHighlight();\n            } else {\n                this.clearChildElements(true);\n                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);\n            }\n        } else if (this._nodeWasRemoved) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n        }\n\n        return this._lastSearchInfo.matchCount;\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public clearHighlight(): void {\n        this.clearChildElements(false);\n\n        this._lastSearchInfo.searchedText = '';\n        this._lastSearchInfo.matchCount = 0;\n    }\n\n    /**\n     * Activates the highlight if it is on the currently active row, column and page.\n     */\n    public activateIfNecessary(): void {\n        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);\n        if (group.columnIndex === this.column && group.rowIndex === this.row && group.page === this.page) {\n            this.activate(group.index);\n        }\n    }\n\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    public observe(): void {\n        if (this._observer === null) {\n            const callback = (mutationList) => {\n                mutationList.forEach((mutation) => {\n                    const removedNodes = new Array(... mutation.removedNodes);\n                    removedNodes.forEach((n) => {\n                        if (n === this._container) {\n                            this._nodeWasRemoved = true;\n                            this.clearChildElements(false);\n                        }\n                    });\n\n                    const addedNodes = new Array(... mutation.addedNodes);\n                    addedNodes.forEach((n) => {\n                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {\n                            this._container = this.parentElement.firstElementChild;\n                            this._nodeWasRemoved = false;\n\n                            this._forceEvaluation = true;\n                            this.highlight(this._lastSearchInfo.searchedText,\n                                this._lastSearchInfo.caseSensitive,\n                                this._lastSearchInfo.exactMatch);\n                            this._forceEvaluation = false;\n\n                            this.activateIfNecessary();\n                            this._observer.disconnect();\n                            this._observer = null;\n                        }\n                    });\n                });\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.parentElement, {childList: true});\n        }\n    }\n\n    private activate(index: number) {\n        this.deactivate();\n\n        if (this._div !== null) {\n            const spans = this._div.querySelectorAll('span');\n            this._activeElementIndex = index;\n\n            if (spans.length <= index) {\n                return;\n            }\n\n            const elementToActivate = spans[index];\n            this.renderer.addClass(elementToActivate, this.activeCssClass);\n            this.renderer.setAttribute(elementToActivate, 'style', 'background:orange;font-weight:bold;color:black');\n        }\n    }\n\n    private deactivate() {\n        if (this._activeElementIndex === -1) {\n            return;\n        }\n\n        const spans = this._div.querySelectorAll('span');\n\n        if (spans.length <= this._activeElementIndex) {\n            this._activeElementIndex = -1;\n            return;\n        }\n\n        const elementToDeactivate = spans[this._activeElementIndex];\n        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);\n        this.renderer.setAttribute(elementToDeactivate, 'style', 'background:yellow;font-weight:bold;color:black');\n        this._activeElementIndex = -1;\n    }\n\n    private clearChildElements(originalContentHidden: boolean): void {\n        if (this.parentElement.firstElementChild) {\n            this.renderer.setProperty(this.parentElement.firstElementChild, 'hidden', originalContentHidden);\n        }\n\n        if (this._div !== null) {\n            this.renderer.removeChild(this.parentElement, this._div);\n\n            this._div = null;\n            this._activeElementIndex = -1;\n        }\n    }\n\n    private getHighlightedText(searchText: string, caseSensitive: boolean, exactMatch: boolean) {\n        this.appendDiv();\n\n        const stringValue = String(this.value);\n        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;\n        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;\n\n        let matchCount = 0;\n\n        if (exactMatch) {\n            if (contentStringResolved === searchTextResolved) {\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;font-weight:bold;color:black\">${stringValue}</span>`);\n                matchCount++;\n            } else {\n                this.appendText(stringValue);\n            }\n        } else {\n            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);\n            let previousMatchEnd = 0;\n\n            while (foundIndex !== -1) {\n                const start = foundIndex;\n                const end = foundIndex + searchTextResolved.length;\n\n                this.appendText(stringValue.substring(previousMatchEnd, start));\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;font-weight:bold;color:black\">${stringValue.substring(start, end)}</span>`);\n\n                previousMatchEnd = end;\n                matchCount++;\n\n                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);\n            }\n\n            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));\n        }\n\n        return matchCount;\n    }\n\n    private appendText(text: string) {\n        const textElement = this.renderer.createText(text);\n        this.renderer.appendChild(this._div, textElement);\n    }\n\n    private appendSpan(outerHTML: string) {\n        const span = this.renderer.createElement('span');\n        this.renderer.appendChild(this._div, span);\n        this.renderer.setProperty(span, 'outerHTML', outerHTML);\n    }\n\n    private appendDiv() {\n        this._div = this.renderer.createElement('div');\n        this.renderer.addClass(this._div, this.containerClass);\n        this.renderer.appendChild(this.parentElement, this._div);\n    }\n\n    private searchNeedsEvaluation(text: string, caseSensitive: boolean, exactMatch: boolean): boolean {\n        const searchedText = this._lastSearchInfo.searchedText;\n\n        return !this._nodeWasRemoved &&\n            (searchedText === null ||\n                searchedText !== text ||\n                this._lastSearchInfo.content !== this.value ||\n                this._lastSearchInfo.caseSensitive !== caseSensitive ||\n                this._lastSearchInfo.exactMatch !== exactMatch ||\n                this._forceEvaluation);\n    }\n}\n\n@NgModule({\n    declarations: [IgxTextHighlightDirective],\n    exports: [IgxTextHighlightDirective]\n})\nexport class IgxTextHighlightModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';\n\n@Directive({\n    exportAs: 'igxTextSelection',\n    selector: '[igxTextSelection]'\n})\nexport class IgxTextSelectionDirective {\n\n    private selectionState = true;\n\n    /**\n     * Returns whether the input element is selectable through the directive.\n     *\n     * ```typescript\n     * // get\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public firstName: IgxTextSelectionDirective;\n     *\n     * public getFirstNameSelectionStatus() {\n     *  return this.firstName.selected;\n     * }\n     * ```\n     */\n    @Input('igxTextSelection')\n    get selected(): boolean {\n        return this.selectionState;\n    }\n\n    /**\n     *  Determines whether the input element could be selected through the directive.\n     *\n     *```html\n     * <!--set-->\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   [igxTextSelection]=\"true\">\n     * </input>\n     *\n     * <input\n     *   type=\"text\"\n     *   id=\"lastName\"\n     *   igxTextSelection\n     *   [selected]=\"true\">\n     * </input>\n     * ```\n     */\n    set selected(val: boolean) {\n        this.selectionState = val;\n    }\n\n    /**\n     * Returns the nativeElement of the element where the directive was applied.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n    *    id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public getNativeElement() {\n     *  return this.inputElement.nativeElement;\n     * }\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    onFocus() {\n        this.trigger();\n    }\n\n    constructor(private element: ElementRef) { }\n\n    /**\n     * Triggers the selection of the element if it is marked as selectable.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public triggerElementSelection() {\n     *  this.inputElement.trigger();\n     * }\n     * ```\n     */\n    trigger() {\n        if (this.selected && this.nativeElement.value.length) {\n            requestAnimationFrame(() => this.nativeElement.setSelectionRange(0, this.nativeElement.value.length));\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxTextSelectionDirective],\n    exports: [IgxTextSelectionDirective]\n})\nexport class IgxTextSelectionModule { }\n","import { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { IPositionStrategy } from './position/IPositionStrategy';\n\nimport { IScrollStrategy, NoOpScrollStrategy } from './scroll';\nimport { AnimationMetadata, AnimationReferenceMetadata, AnimationPlayer } from '@angular/animations';\nimport { ComponentRef, ElementRef } from '@angular/core';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\nimport { CancelableEventArgs } from '../../core/utils';\n\nexport enum HorizontalAlignment {\n    Left = -1,\n    Center = -0.5,\n    Right = 0\n}\n\nexport enum VerticalAlignment {\n    Top = -1,\n    Middle = -0.5,\n    Bottom = 0\n}\n\nexport class Point {\n    constructor(public x: number, public y: number) { }\n}\n\nexport interface PositionSettings {\n    target?: Point | HTMLElement;\n    horizontalDirection?: HorizontalAlignment;\n    verticalDirection?: VerticalAlignment;\n    horizontalStartPoint?: HorizontalAlignment;\n    verticalStartPoint?: VerticalAlignment;\n    openAnimation?: AnimationReferenceMetadata;\n    closeAnimation?: AnimationReferenceMetadata;\n}\n\nexport interface OverlaySettings {\n    positionStrategy?: IPositionStrategy;\n    scrollStrategy?: IScrollStrategy;\n    modal?: boolean;\n    closeOnOutsideClick?: boolean;\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n}\n\nexport interface OverlayEventArgs {\n    /** Id of the overlay as returned by the `show()` method */\n    id: string;\n    /** Available when `Type<T>` is provided to the `show()` method and allows access to the created Component instance */\n    componentRef?: ComponentRef<{}>;\n}\n\nexport interface OverlayCancelableEventArgs extends OverlayEventArgs, CancelableEventArgs {\n}\n\nexport interface OverlayAnimationEventArgs {\n    /** Id of the overlay as returned by the `show()` method */\n    id: string;\n    /** Animation player that will play the animation */\n    animationPlayer: AnimationPlayer;\n    /** Type of animation to be played. It should be either 'open' or 'close' */\n    animationType: 'open' | 'close';\n}\n\n/** @hidden */\nexport function getPointFromPositionsSettings(settings: PositionSettings, overlayWrapper: HTMLElement): Point {\n    let result: Point = new Point(0, 0);\n\n    if (settings.target instanceof HTMLElement) {\n        const rect = (<HTMLElement>settings.target).getBoundingClientRect();\n        result.x = rect.right + rect.width * settings.horizontalStartPoint;\n        result.y = rect.bottom + rect.height * settings.verticalStartPoint;\n    } else if (settings.target instanceof Point) {\n        result = settings.target;\n    }\n\n    //  if for some reason overlayWrapper is not at 0,0 position, e.g. overlay is in outlet\n    //  which is in element with transform,perspective or filter set, we should translate the result\n    //  accordingly\n    if (overlayWrapper) {\n        const overlayWrapperPosition = overlayWrapper.getBoundingClientRect();\n        result.x -= overlayWrapperPosition.left;\n        result.y -= overlayWrapperPosition.top;\n    }\n\n    return result;\n}\n\n/** @hidden */\nexport interface OverlayInfo {\n    id?: string;\n    elementRef?: ElementRef;\n    componentRef?: ComponentRef<{}>;\n    settings?: OverlaySettings;\n    initialSize?: { width?: number, height?: number, x?: number, y?: number };\n    hook?: HTMLElement;\n    openAnimationPlayer?: AnimationPlayer;\n    closeAnimationPlayer?: AnimationPlayer;\n    openAnimationInnerPlayer?: any;\n    closeAnimationInnerPlayer?: any;\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, Point, HorizontalAlignment, VerticalAlignment } from './../utilities';\nimport { fadeIn, fadeOut } from '../../../animations/main';\n\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    private _defaultSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Center,\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut\n    };\n\n    public settings: PositionSettings;\n    constructor(settings?: PositionSettings) {\n        this.settings = Object.assign({}, this._defaultSettings, settings);\n    }\n\n    position(contentElement: HTMLElement, size?: { width: number, height: number}, document?: Document, initialCall?: boolean): void {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                contentElement.parentElement.style.justifyContent = 'flex-start';\n                break;\n            case HorizontalAlignment.Center:\n                contentElement.parentElement.style.justifyContent = 'center';\n                break;\n            case HorizontalAlignment.Right:\n                contentElement.parentElement.style.justifyContent = 'flex-end';\n                break;\n            default:\n                break;\n        }\n\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                contentElement.parentElement.style.alignItems = 'flex-start';\n                break;\n            case VerticalAlignment.Middle:\n                contentElement.parentElement.style.alignItems = 'center';\n                break;\n            case VerticalAlignment.Bottom:\n                contentElement.parentElement.style.alignItems = 'flex-end';\n                break;\n            default:\n                break;\n        }\n    }\n}\n\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport class NoOpScrollStrategy implements IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n    initialize(document: Document, overlayService: IgxOverlayService, id: string) {}\n    attach(): void { }\n    detach(): void { }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';\nimport { OverlaySettings, OverlayEventArgs, OverlayInfo, OverlayAnimationEventArgs, OverlayCancelableEventArgs } from './utilities';\n\nimport {\n    ApplicationRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injectable,\n    Injector,\n    Type,\n    OnDestroy\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, AnimationMetadataType, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { fromEvent, Subject } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { IAnimationParams } from '../../animations/main';\n\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\n@Injectable({ providedIn: 'root' })\nexport class IgxOverlayService implements OnDestroy {\n    private _componentId = 0;\n    private _overlayInfos: OverlayInfo[] = [];\n    private _overlayElement: HTMLElement;\n    private _document: Document;\n    private destroy$ = new Subject<boolean>();\n\n    private _defaultSettings: OverlaySettings = {\n        positionStrategy: new GlobalPositionStrategy(),\n        scrollStrategy: new NoOpScrollStrategy(),\n        modal: true,\n        closeOnOutsideClick: true\n    };\n\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    public onOpening = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    public onOpened = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    public onClosing = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    public onClosed = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    public onAnimation = new EventEmitter<OverlayAnimationEventArgs>();\n\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private builder: AnimationBuilder,\n        @Inject(DOCUMENT) private document: any) {\n        this._document = <Document>this.document;\n    }\n\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     */\n    // tslint:disable-next-line:unified-signatures\n    show(component: ElementRef | Type<{}>, settings?: OverlaySettings): string;\n    show(compOrId: string | ElementRef | Type<{}> , settings?: OverlaySettings): string {\n        let info: OverlayInfo;\n        let id: string;\n        if (typeof compOrId === 'string') {\n            id = compOrId;\n            info = this.getOverlayById(compOrId);\n            if (!info) {\n                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);\n                return;\n            }\n        } else {\n            id = (this._componentId++).toString();\n            info = this.getOverlayInfo(compOrId);\n\n            //  if there is no info most probably wrong type component was provided and we just go out\n            if (!info) {\n                return;\n            }\n\n            info.id = id;\n        }\n\n        settings = Object.assign({}, this._defaultSettings, settings);\n        info.settings = settings;\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false };\n        this.onOpening.emit(eventArgs);\n        if (eventArgs.cancel) {\n            if (info.componentRef) {\n                this._appRef.detachView(info.componentRef.hostView);\n                info.componentRef.destroy();\n            }\n            return id;\n        }\n\n        //  if there is no close animation player, or there is one but it is not started yet we are in clear\n        //  opening. Otherwise, if there is close animation player playing animation now we should not setup\n        //  overlay this is already done\n        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n            info.hook = this.placeElementHook(info.elementRef.nativeElement);\n\n            this.moveElementToOverlay(info);\n            this.updateSize(info);\n            this._overlayInfos.push(info);\n\n            settings.positionStrategy.position(info.elementRef.nativeElement.parentElement, info.initialSize, document, true);\n            settings.scrollStrategy.initialize(this._document, this, id);\n            settings.scrollStrategy.attach();\n        }\n\n        this.addOutsideClickListener(info);\n        this.addResizeHandler(info.id);\n\n        if (info.settings.modal) {\n            this.setupModalWrapper(info);\n        }\n\n        if (info.settings.positionStrategy.settings.openAnimation) {\n            this.playOpenAnimation(info);\n        } else {\n            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n        }\n\n        return id;\n    }\n\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            console.warn('igxOverlay.hide was called with wrong id: ' + id);\n            return;\n        }\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false };\n        this.onClosing.emit(eventArgs);\n        if (eventArgs.cancel) {\n            return;\n        }\n\n        info.settings.scrollStrategy.detach();\n        this.removeOutsideClickListener(info);\n        this.removeResizeHandler(info.id);\n\n        const child: HTMLElement = info.elementRef.nativeElement;\n        if (info.settings.modal) {\n            const parent = child.parentNode.parentNode as HTMLElement;\n            this.applyAnimationParams(parent, info.settings.positionStrategy.settings.closeAnimation);\n            parent.classList.remove('igx-overlay__wrapper--modal');\n            parent.classList.add('igx-overlay__wrapper');\n        }\n\n        if (info.settings.positionStrategy.settings.closeAnimation) {\n            this.playCloseAnimation(info);\n        } else {\n            this.onCloseDone(info);\n        }\n    }\n\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll() {\n        // since overlays are removed on animation done, que all hides\n        for (let i = this._overlayInfos.length; i--;) {\n            this.hide(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string) {\n        const overlay = this.getOverlayById(id);\n        if (!overlay) {\n            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);\n            return;\n        }\n\n        overlay.settings.positionStrategy.position(\n            overlay.elementRef.nativeElement.parentElement,\n            overlay.initialSize,\n            this._document);\n    }\n\n    private getOverlayInfo(component: any): OverlayInfo {\n        const info: OverlayInfo = {};\n        if (component instanceof ElementRef) {\n            info.elementRef = <ElementRef>component;\n        } else {\n            let dynamicFactory: ComponentFactory<{}>;\n            try {\n                dynamicFactory = this._factoryResolver.resolveComponentFactory(component);\n            } catch (error) {\n                console.error(error);\n                return null;\n            }\n\n            const dynamicComponent: ComponentRef<{}> = dynamicFactory.create(this._injector);\n            this._appRef.attachView(dynamicComponent.hostView);\n\n            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.\n            const element = dynamicComponent.location.nativeElement.lastElementChild;\n            info.elementRef = <ElementRef>{ nativeElement: element };\n            info.componentRef = dynamicComponent;\n        }\n\n        return info;\n    }\n\n    private placeElementHook(element: HTMLElement): HTMLElement {\n        if (!element.parentElement) {\n            return null;\n        }\n\n        const hook = this._document.createElement('div');\n        element.parentElement.insertBefore(hook, element);\n        return hook;\n    }\n\n    private moveElementToOverlay(info: OverlayInfo) {\n        const wrapperElement = this.getWrapperElement();\n        const contentElement = this.getContentElement(wrapperElement, info.settings);\n        this.getOverlayElement(info).appendChild(wrapperElement);\n        const elementScrollTop = info.elementRef.nativeElement.scrollTop;\n        contentElement.appendChild(info.elementRef.nativeElement);\n\n        if (elementScrollTop) {\n            info.elementRef.nativeElement.scrollTop = elementScrollTop;\n        }\n    }\n\n    private getWrapperElement(): HTMLElement {\n        const wrapper: HTMLElement = this._document.createElement('div');\n        wrapper.classList.add('igx-overlay__wrapper');\n        return wrapper;\n    }\n\n    private getContentElement(wrapperElement: HTMLElement, settings: OverlaySettings): HTMLElement {\n        const content: HTMLElement = this._document.createElement('div');\n        if (settings.modal) {\n            content.classList.add('igx-overlay__content--modal');\n            content.addEventListener('click', (ev: Event) => {\n                ev.stopPropagation();\n            });\n        } else {\n            content.classList.add('igx-overlay__content');\n        }\n\n        content.addEventListener('scroll', (ev: Event) => {\n            ev.stopPropagation();\n        });\n\n        wrapperElement.appendChild(content);\n        return content;\n    }\n\n    private getOverlayElement(info: OverlayInfo): HTMLElement {\n        if (info.settings.outlet) {\n            return info.settings.outlet.nativeElement;\n        }\n        if (!this._overlayElement) {\n            this._overlayElement = this._document.createElement('div');\n            this._overlayElement.classList.add('igx-overlay');\n            this._document.body.appendChild(this._overlayElement);\n        }\n\n        return this._overlayElement;\n    }\n\n    private updateSize(info: OverlayInfo) {\n        if (info.componentRef) {\n            //  if we are positioning component this is first time it gets visible\n            //  and we can finally get its size\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n        }\n\n        // set content div size only if element to show has size\n        if (info.initialSize.width !== 0 && info.initialSize.height !== 0) {\n            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';\n            info.elementRef.nativeElement.parentElement.style.height = info.initialSize.height + 'px';\n        }\n    }\n\n    private setupModalWrapper(info: OverlayInfo) {\n        const wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;\n        fromEvent(wrapperElement, 'keydown').pipe(\n            filter((ev: KeyboardEvent) => ev.key === 'Escape' || ev.key === 'Esc'),\n            takeUntil(this.destroy$)\n        ).subscribe(() => this.hide(info.id));\n        wrapperElement.classList.remove('igx-overlay__wrapper');\n        this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);\n        wrapperElement.classList.add('igx-overlay__wrapper--modal');\n    }\n\n    private onCloseDone(info: OverlayInfo) {\n        const child: HTMLElement = info.elementRef.nativeElement;\n        const outlet = this.getOverlayElement(info);\n        if (!outlet.contains(child)) {\n            console.warn('Component with id:' + info.id + ' is already removed!');\n            return;\n        }\n\n        outlet.removeChild(child.parentNode.parentNode);\n        if (info.componentRef) {\n            this._appRef.detachView(info.componentRef.hostView);\n            info.componentRef.destroy();\n        }\n\n        if (info.hook) {\n            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);\n            info.hook.parentElement.removeChild(info.hook);\n        }\n\n        const index = this._overlayInfos.indexOf(info);\n        this._overlayInfos.splice(index, 1);\n\n        // this._overlayElement.parentElement check just for tests that manually delete the element\n        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {\n            this._overlayElement.parentElement.removeChild(this._overlayElement);\n            this._overlayElement = null;\n        }\n\n        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });\n    }\n\n    private playOpenAnimation(info: OverlayInfo) {\n        if (!info.openAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);\n            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n            info.openAnimationPlayer.init();\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.openAnimationPlayer)._renderer;\n            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n            info.openAnimationPlayer.onDone(() => {\n                this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n                info.openAnimationPlayer.reset();\n                info.openAnimationPlayer = null;\n                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n                    info.closeAnimationPlayer.reset();\n                }\n            });\n        }\n\n        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.closeAnimationInnerPlayer.getPosition();\n            info.closeAnimationPlayer.reset();\n            info.openAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });\n        info.openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(info: OverlayInfo) {\n        if (!info.closeAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);\n            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n            info.closeAnimationPlayer.init();\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.closeAnimationPlayer)._renderer;\n            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n\n            info.closeAnimationPlayer.onDone(() => {\n                info.closeAnimationPlayer.reset();\n                info.closeAnimationPlayer = null;\n                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n                    info.openAnimationPlayer.reset();\n                }\n                this.onCloseDone(info);\n            });\n        }\n\n        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.openAnimationInnerPlayer.getPosition();\n            info.openAnimationPlayer.reset();\n            info.closeAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });\n        info.closeAnimationPlayer.play();\n    }\n\n    //  TODO: check if applyAnimationParams will work with complex animations\n    private applyAnimationParams(wrapperElement: HTMLElement, animationOptions: AnimationReferenceMetadata) {\n        if (!animationOptions) {\n            wrapperElement.style.transitionDuration = '0ms';\n            return;\n        }\n        if (animationOptions.type === AnimationMetadataType.AnimateRef) {\n            animationOptions = (animationOptions as AnimationAnimateRefMetadata).animation;\n        }\n        if (!animationOptions.options || !animationOptions.options.params) {\n            return;\n        }\n        const params = animationOptions.options.params as IAnimationParams;\n        if (params.duration) {\n            wrapperElement.style.transitionDuration = params.duration;\n        }\n        if (params.easing) {\n            wrapperElement.style.transitionTimingFunction = params.easing;\n        }\n    }\n\n    private getOverlayById(id: string): OverlayInfo {\n        const overlay = this._overlayInfos.find(e => e.id === id);\n        return overlay;\n    }\n\n    private documentClicked = (ev: Event) => {\n        for (let i = this._overlayInfos.length; i--;) {\n            const info = this._overlayInfos[i];\n            if (info.settings.modal) {\n                return;\n            }\n            if (info.settings.closeOnOutsideClick) {\n                if (!info.elementRef.nativeElement.contains(ev.target)) {\n                    this.hide(info.id);\n                    // TODO: should we return here too and not closing all no-modal overlays?\n                }\n            }\n        }\n    }\n\n    private addOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.closeOnOutsideClick) {\n            if (info.settings.modal) {\n                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe(() => this.hide(info.id));\n            } else if (\n                //  if all overlays minus closing overlays equals one add the handler\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal).length -\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal &&\n                    x.closeAnimationPlayer &&\n                    x.closeAnimationPlayer.hasStarted()).length === 1) {\n                this._document.addEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private removeOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.modal === false) {\n            let shouldRemoveClickEventListener = true;\n            this._overlayInfos.forEach(o => {\n                if (o.settings.modal === false && o.id !== info.id) {\n                    shouldRemoveClickEventListener = false;\n                }\n            });\n\n            if (shouldRemoveClickEventListener) {\n                this._document.removeEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private addResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.addEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private removeResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.removeEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private repositionAll = (ev: Event) => {\n        for (let i = this._overlayInfos.length; i--;) {\n            this.reposition(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { FilteringLogic, IFilteringExpression } from '../../public_api';\n\nexport declare interface IFilteringExpressionsTree {\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[];\n    operator: FilteringLogic;\n    fieldName?: string;\n\n    find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression;\n    findIndex(fieldName: string): number;\n}\n\nexport class FilteringExpressionsTree implements IFilteringExpressionsTree {\n\n    /**\n     * Sets/gets the filtering operands.\n     * ```typescript\n     * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n     * const expression = [\n     * {\n     *   condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *   fieldName: 'Column Field',\n     *   searchVal: 'Value',\n     *   ignoreCase: false\n     * }];\n     * gridExpressionsTree.filteringOperands.push(expression);\n     * this.grid.filteringExpressionsTree = gridExpressionsTree;\n     * ```\n     * ```typescript\n     * let filteringOperands = gridExpressionsTree.filteringOperands;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[] = [];\n\n    /**\n     * Sets/gets the operator.\n     * ```typescript\n     * gridExpressionsTree.operator = FilteringLogic.And;\n     * ```\n     * ```typescript\n     * let operator = gridExpressionsTree.operator;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    operator: FilteringLogic;\n\n    /**\n     * Sets/gets the field name of the column where the filtering expression is placed.\n     * ```typescript\n     *  gridExpressionTree.fieldName = 'Column Field';\n     * ```\n     * ```typescript\n     * let columnField = expressionTree.fieldName;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    fieldName?: string;\n\n    constructor(operator: FilteringLogic, fieldName?: string) {\n        this.operator = operator;\n        this.fieldName = fieldName;\n    }\n\n    /**\n     * Returns the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpression = gridExpressionTree.find('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression {\n        const index = this.findIndex(fieldName);\n\n        if (index > -1) {\n            return this.filteringOperands[index];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the index of the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public findIndex(fieldName: string): number {\n        let expr;\n        for (let i = 0; i < this.filteringOperands.length; i++) {\n            expr = this.filteringOperands[i];\n            if (expr instanceof FilteringExpressionsTree) {\n                if (this.isFilteringExpressionsTreeForColumn(expr, fieldName)) {\n                    return i;\n                }\n            } else {\n                if ((expr as IFilteringExpression).fieldName === fieldName) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    protected isFilteringExpressionsTreeForColumn(expressionsTree: IFilteringExpressionsTree, fieldName: string): boolean {\n        if (expressionsTree.fieldName === fieldName) {\n            return true;\n        }\n\n        let expr;\n        for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n            expr = expressionsTree.filteringOperands[i];\n            if ((expr instanceof FilteringExpressionsTree)) {\n                return this.isFilteringExpressionsTreeForColumn(expr, fieldName);\n            } else {\n                return (expr as IFilteringExpression).fieldName === fieldName;\n            }\n        }\n\n        return false;\n    }\n}\n","import { DataUtil } from './data-util';\nimport { IFilteringOperation } from './filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { IFilteringState } from './filtering-state.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from './filtering-expressions-tree';\n\nexport interface IFilteringStrategy {\n    filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n}\n\nexport abstract class BaseFilteringStrategy implements IFilteringStrategy  {\n    public abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n\n    protected abstract getFieldValue(rec: object, fieldName: string): any;\n\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = this.getFieldValue(rec, expr.fieldName);\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n\n    public matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (expressions) {\n            if (expressions instanceof FilteringExpressionsTree) {\n                const expressionsTree = expressions as IFilteringExpressionsTree;\n                const operator = expressionsTree.operator as FilteringLogic;\n                let match, matchOperand, operand;\n\n                if (expressionsTree.filteringOperands) {\n                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                        operand = expressionsTree.filteringOperands[i];\n                        matchOperand = this.matchRecord(rec, operand);\n\n                        if (match === undefined) {\n                            match = matchOperand;\n                        } else if (operator === FilteringLogic.And) {\n                            match = match && matchOperand;\n                        } else if (operator === FilteringLogic.Or) {\n                            match = match || matchOperand;\n                        }\n                    }\n                }\n\n                return match === undefined ? true : match;\n            } else {\n                const expression = expressions as IFilteringExpression;\n                return this.findMatchByExpression(rec, expression);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class FilteringStrategy extends BaseFilteringStrategy {\n    public filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree): T[] {\n        let i;\n        let rec;\n        const len = data.length;\n        const res: T[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = data[i];\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        return rec[fieldName];\n    }\n}\n","import { IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\n\nexport const filteringStateDefaults = {\n    strategy: new FilteringStrategy()\n};\n\nexport declare interface IFilteringState {\n    expressionsTree: IFilteringExpressionsTree;\n    strategy?: IFilteringStrategy;\n}\n","import { cloneArray } from '../core/utils';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\n\nexport interface ISortingStrategy {\n    sort: (data: any[], expressions: ISortingExpression[]) => any[];\n    groupBy: (data: any[], expressions: ISortingExpression[]) => IGroupByResult;\n    compareValues: (a: any, b: any) => number;\n}\n\nexport interface IGroupByResult {\n    data: any[];\n    metadata: IGroupByRecord[];\n}\n\nexport class SortingStrategy implements ISortingStrategy {\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return this.sortDataRecursive(data, expressions);\n    }\n    public groupBy(data: any[], expressions: ISortingExpression[]): IGroupByResult {\n        const metadata: IGroupByRecord[] = [];\n        const grouping = this.groupDataRecursive(data, expressions, 0, null, metadata);\n        return {\n            data: grouping,\n            metadata: metadata\n        };\n    }\n    public compareValues(a: any, b: any) {\n        const an = (a === null || a === undefined);\n        const bn = (b === null || b === undefined);\n        if (an) {\n            if (bn) {\n                return 0;\n            }\n            return -1;\n        } else if (bn) {\n            return 1;\n        }\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n    protected compareObjects(obj1: object, obj2: object, key: string, reverse: number, ignoreCase: boolean, strategy: ISortingStrategy) {\n        let a = this.getFieldValue(obj1, key);\n        let b = this.getFieldValue(obj2, key);\n        if (ignoreCase) {\n            a = a && a.toLowerCase ? a.toLowerCase() : a;\n            b = b && b.toLowerCase ? b.toLowerCase() : b;\n        }\n        if (strategy) {\n            return reverse * strategy.compareValues(a, b);\n        } else {\n            return reverse * this.compareValues(a, b);\n        }\n    }\n    protected getFieldValue(obj: any, key: string): any {\n        return obj[key];\n    }\n    protected arraySort<T>(data: T[], compareFn?): T[] {\n        return data.sort(compareFn);\n    }\n    private groupedRecordsByExpression<T>(data: T[], index: number, expression: ISortingExpression): T[] {\n        let i;\n        let groupval;\n        const res = [];\n        const key = expression.fieldName;\n        const len = data.length;\n        res.push(data[index]);\n        groupval = this.getFieldValue(data[index], key);\n        index++;\n        for (i = index; i < len; i++) {\n            if (this.compareValues(this.getFieldValue(data[i], key), groupval) === 0) {\n                res.push(data[i]);\n            } else {\n                break;\n            }\n        }\n        return res;\n    }\n    private sortByFieldExpression<T>(data: T[], expression: ISortingExpression): T[] {\n\n        const key = expression.fieldName;\n        const firstRow = data[0];\n        const firstRowValue = firstRow ? this.getFieldValue(firstRow, key) : undefined;\n        const ignoreCase = expression.ignoreCase ?\n            firstRow && (typeof firstRowValue === 'string' ||\n                firstRowValue === null ||\n                firstRowValue === undefined) :\n            false;\n        const reverse = (expression.dir === SortingDirection.Desc ? -1 : 1);\n        const cmpFunc = (obj1, obj2) => {\n            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, expression.strategy);\n        };\n        return this.arraySort(data, cmpFunc);\n    }\n    private sortDataRecursive<T>(data: T[],\n                                 expressions: ISortingExpression[],\n                                 expressionIndex: number = 0): T[] {\n        let i;\n        let j;\n        let expr;\n        let gbData;\n        let gbDataLen;\n        const exprsLen = expressions.length;\n        const dataLen = data.length;\n        expressionIndex = expressionIndex || 0;\n        if (expressionIndex >= exprsLen || dataLen <= 1) {\n            return data;\n        }\n        expr = expressions[expressionIndex];\n        data = this.sortByFieldExpression(data, expr);\n        if (expressionIndex === exprsLen - 1) {\n            return data;\n        }\n        // in case of multiple sorting\n        for (i = 0; i < dataLen; i++) {\n            gbData = this.groupedRecordsByExpression(data, i, expr);\n            gbDataLen = gbData.length;\n            if (gbDataLen > 1) {\n                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);\n            }\n            for (j = 0; j < gbDataLen; j++) {\n                data[i + j] = gbData[j];\n            }\n            i += gbDataLen - 1;\n        }\n        return data;\n    }\n    private groupDataRecursive<T>(data: T[], expressions: ISortingExpression[], level: number,\n        parent: IGroupByRecord, metadata: IGroupByRecord[]): T[] {\n        let i = 0;\n        let result = [];\n        while (i < data.length) {\n            const group = this.groupedRecordsByExpression(data, i, expressions[level]);\n            const groupRow: IGroupByRecord = {\n                expression: expressions[level],\n                level,\n                records: cloneArray(group),\n                value: group[0][expressions[level].fieldName],\n                groupParent: parent\n            };\n            if (level < expressions.length - 1) {\n                result = result.concat(this.groupDataRecursive(group, expressions, level + 1, groupRow, metadata));\n            } else {\n                for (const groupItem of group) {\n                    metadata.push(groupRow);\n                    result.push(groupItem);\n                }\n            }\n            i += group.length;\n        }\n        return result;\n    }\n}\n\nexport class TreeGridSortingStrategy extends SortingStrategy {\n    protected getFieldValue(obj: any, key: string): any {\n        return obj['data'][key];\n    }\n}\n","import { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport {ISortingStrategy, SortingStrategy} from './sorting-strategy';\n\n// tslint:disable-next-line:variable-name\nexport const SortingStateDefaults = {\n    strategy: new SortingStrategy()\n};\n\nexport interface ISortingState {\n    expressions: ISortingExpression[];\n    strategy?: ISortingStrategy;\n}\n","import { filteringStateDefaults, IFilteringState } from './filtering-state.interface';\nimport { ISortingState, SortingStateDefaults } from './sorting-state.interface';\nimport { IGroupByResult, TreeGridSortingStrategy } from './sorting-strategy';\nimport { IPagingState, PagingError } from './paging-state.interface';\nimport { IDataState } from './data-state.interface';\nimport { IGroupByExpandState, IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { Transaction, TransactionType, HierarchicalTransaction, IgxHierarchicalTransactionService, HierarchicalState } from '../services';\nimport { mergeObjects, cloneValue } from '../core/utils';\nimport { ITreeGridRecord } from '../grids/tree-grid/tree-grid.interfaces';\n\n/**\n * @hidden\n */\nexport enum DataType {\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Date = 'date'\n}\n\n/**\n * @hidden\n */\nexport class DataUtil {\n    public static mergeDefaultProperties(target: object, defaults: object) {\n        if (!defaults) {\n            return target;\n        }\n        if (!target) {\n            target = Object.assign({}, defaults);\n            return target;\n        }\n        Object\n            .keys(defaults)\n            .forEach((key) => {\n                if (target[key] === undefined && defaults[key] !== undefined) {\n                    target[key] = defaults[key];\n                }\n            });\n        return target;\n    }\n    public static sort<T>(data: T[], state: ISortingState): T[] {\n        // set defaults\n        DataUtil.mergeDefaultProperties(state, SortingStateDefaults);\n        // apply default settings for each sorting expression(if not set)\n        return state.strategy.sort(data, state.expressions);\n    }\n\n    public static hierarchicalSort(hierarchicalData: ITreeGridRecord[], state: ISortingState, parent: ITreeGridRecord): ITreeGridRecord[] {\n        state.strategy = new TreeGridSortingStrategy();\n        let res: ITreeGridRecord[] = [];\n\n        hierarchicalData.forEach((hr: ITreeGridRecord) => {\n            const rec: ITreeGridRecord = DataUtil.cloneTreeGridRecord(hr);\n            rec.parent = parent;\n            if (rec.children) {\n                rec.children = DataUtil.hierarchicalSort(rec.children, state, rec);\n            }\n            res.push(rec);\n        });\n\n        res = DataUtil.sort(res, state);\n\n        return res;\n    }\n\n    public static cloneTreeGridRecord(hierarchicalRecord: ITreeGridRecord) {\n        const rec: ITreeGridRecord = {\n            rowID: hierarchicalRecord.rowID,\n            data: hierarchicalRecord.data,\n            children: hierarchicalRecord.children,\n            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,\n            level: hierarchicalRecord.level,\n            expanded: hierarchicalRecord.expanded,\n            path: [...hierarchicalRecord.path]\n        };\n        return rec;\n    }\n\n    public static group<T>(data: T[], state: IGroupingState): IGroupByResult {\n        // set defaults\n        DataUtil.mergeDefaultProperties(state, SortingStateDefaults);\n        // apply default settings for each grouping expression(if not set)\n        return state.strategy.groupBy(data, state.expressions);\n    }\n    public static restoreGroups(groupData: IGroupByResult, state: IGroupingState, groupsRecords: any[] = []): any[] {\n        DataUtil.mergeDefaultProperties(state, SortingStateDefaults);\n        if (state.expressions.length === 0) {\n            return groupData.data;\n        }\n        return this.restoreGroupsRecursive(groupData, 1, state.expressions.length, state.expansion, state.defaultExpanded, groupsRecords);\n    }\n    private static restoreGroupsRecursive(\n        groupData: IGroupByResult, level: number, depth: number,\n        expansion: IGroupByExpandState[], defaultExpanded: boolean, groupsRecords): any[] {\n        let i = 0;\n        let j: number;\n        let result = [];\n        // empty the array without changing reference\n        groupsRecords.splice(0, groupsRecords.length);\n        if (level !== depth) {\n            groupData.data = this.restoreGroupsRecursive(groupData, level + 1, depth, expansion, defaultExpanded, groupsRecords);\n        }\n        while (i < groupData.data.length) {\n            const g = level === depth ? groupData.metadata[i] :\n                groupData.data[i].groupParent;\n            for (j = i + 1; j < groupData.data.length; j++) {\n                const h = level === depth ? groupData.metadata[j] :\n                    groupData.data[j].groupParent;\n                if (h && g !== h && g.level === h.level) {\n                    break;\n                }\n            }\n            const hierarchy = this.getHierarchy(g);\n            const expandState: IGroupByExpandState = expansion.find((state) =>\n                this.isHierarchyMatch(state.hierarchy || [{ fieldName: g.expression.fieldName, value: g.value }], hierarchy));\n            const expanded = expandState ? expandState.expanded : defaultExpanded;\n            result.push(g);\n            groupsRecords.push(g);\n\n            g['groups'] = groupData.data.slice(i, j).filter((e) =>\n                e.records && e.records.length && e.level === g.level + 1);\n            while (groupsRecords.length) {\n                if (groupsRecords[0].level + 1 > level) {\n                    groupsRecords.shift();\n                } else {\n                    break;\n                }\n            }\n            if (expanded) {\n                result = result.concat(groupData.data.slice(i, j));\n            }\n            i = j;\n        }\n        return result;\n    }\n    public static page<T>(data: T[], state: IPagingState): T[] {\n        if (!state) {\n            return data;\n        }\n        const len = data.length;\n        const index = state.index;\n        const res = [];\n        const recordsPerPage = state.recordsPerPage;\n        state.metadata = {\n            countPages: 0,\n            countRecords: data.length,\n            error: PagingError.None\n        };\n        if (index < 0 || isNaN(index)) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\n            return res;\n        }\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\n        if (!len) {\n            return data;\n        }\n        if (index >= state.metadata.countPages) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\n    }\n    public static filter<T>(data: T[], state: IFilteringState): T[] {\n        // set defaults\n        DataUtil.mergeDefaultProperties(state, filteringStateDefaults);\n        if (!state.strategy) {\n            return data;\n        }\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n    public static process<T>(data: T[], state: IDataState): T[] {\n        if (!state) {\n            return data;\n        }\n        if (state.filtering) {\n            data = DataUtil.filter(data, state.filtering);\n        }\n        if (state.sorting) {\n            data = DataUtil.sort(data, state.sorting);\n        }\n        if (state.paging) {\n            data = DataUtil.page(data, state.paging);\n        }\n        return data;\n    }\n\n    public static getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n        const hierarchy: Array<IGroupByKey> = [];\n        if (gRow !== undefined && gRow.expression) {\n            hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            while (gRow.groupParent) {\n                gRow = gRow.groupParent;\n                hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            }\n        }\n        return hierarchy;\n    }\n\n    public static isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n        if (h1.length !== h2.length) {\n            return false;\n        }\n        return h1.every((level, index): boolean => {\n            return level.fieldName === h2[index].fieldName && level.value === h2[index].value;\n        });\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param primaryKey Primary key of the collection, if any\n     */\n    public static mergeTransactions<T>(data: T[], transactions: Transaction[], primaryKey?: any): T[] {\n        data.forEach((item: any, index: number) => {\n            const rowId = primaryKey ? item[primaryKey] : item;\n            const transaction = transactions.find(t => t.id === rowId);\n            if (Array.isArray(item.children)) {\n                this.mergeTransactions(item.children, transactions, primaryKey);\n            }\n            if (transaction && transaction.type === TransactionType.UPDATE) {\n                data[index] = transaction.newValue;\n            }\n        });\n\n        data.push(...transactions\n            .filter(t => t.type === TransactionType.ADD)\n            .map(t => t.newValue));\n        return data;\n    }\n\n    // TODO: optimize addition of added rows. Should not filter transaction in each recursion!!!\n    /** @experimental @hidden */\n    public static mergeHierarchicalTransactions(\n        data: any[],\n        transactions: HierarchicalTransaction[],\n        childDataKey: any,\n        primaryKey?: any,\n        parentKey?: any): any[] {\n\n        for (let index = 0; index < data.length; index++) {\n            const dataItem = data[index];\n            const rowId = primaryKey ? dataItem[primaryKey] : dataItem;\n            const updateTransaction = transactions.filter(t => t.type === TransactionType.UPDATE).find(t => t.id === rowId);\n            const addedTransactions = transactions.filter(t => t.type === TransactionType.ADD).filter(t => t.parentId === rowId);\n            if (updateTransaction || addedTransactions.length > 0) {\n                data[index] = mergeObjects(cloneValue(dataItem), updateTransaction && updateTransaction.newValue);\n            }\n            if (addedTransactions.length > 0) {\n                if (!data[index][childDataKey]) {\n                    data[index][childDataKey] = [];\n                }\n                for (const addedTransaction of addedTransactions) {\n                    data[index][childDataKey].push(addedTransaction.newValue);\n                }\n            }\n            if (data[index][childDataKey]) {\n                data[index][childDataKey] = this.mergeHierarchicalTransactions(\n                    data[index][childDataKey],\n                    transactions,\n                    childDataKey,\n                    primaryKey,\n                    rowId\n                );\n            }\n        }\n        return data;\n    }\n}\n","\n/**\n * @hidden\n */\nexport class ExportUtilities {\n    public static getKeysFromData(data: any[]) {\n        const length = data.length;\n        if (length === 0) {\n            return [];\n        }\n\n        const dataEntry = data[0];\n        const dataEntryMiddle = data[Math.floor(length / 2)];\n        const dataEntryLast = data[length - 1];\n\n        const keys1 = Object.keys(dataEntry);\n        const keys2 = Object.keys(dataEntryMiddle);\n        const keys3 = Object.keys(dataEntryLast);\n\n        const keys = new Set(keys1.concat(keys2).concat(keys3));\n\n        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : [ 'Column 1' ];\n    }\n\n    public static saveBlobToFile(blob: Blob, fileName) {\n        const a = document.createElement('a');\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, fileName);\n        } else {\n            const url = window.URL.createObjectURL(blob);\n            a.download = fileName;\n\n            a.href = url;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    public static stringToArrayBuffer(s: string): ArrayBuffer {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i !== s.length; ++i) {\n            /* tslint:disable no-bitwise */\n            view[i] = s.charCodeAt(i) & 0xFF;\n            /* tslint:enable no-bitwise */\n        }\n        return buf;\n    }\n\n    public static isSpecialData(data: any[]): boolean {\n        const dataEntry = data[0];\n        return (typeof dataEntry === 'string' ||\n                typeof dataEntry === 'number' ||\n                dataEntry instanceof Date);\n    }\n\n    public static hasValue(value: any): boolean {\n        return value !== undefined && value !== null;\n    }\n\n}\n","import {\n    EventEmitter,\n    Output\n} from '@angular/core';\n\nimport { cloneValue } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\n\nimport { ExportUtilities } from './export-utilities';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\n\nexport interface IRowExportingEventArgs {\n    rowData: any;\n    rowIndex: number;\n    cancel: boolean;\n}\n\nexport interface IColumnExportingEventArgs {\n    header: string;\n    columnIndex: number;\n    cancel: boolean;\n}\n\nexport abstract class IgxBaseExporter {\n    private _columnList: any[];\n    protected _indexOfLastPinnedColumn = -1;\n\n    protected _sort = null;\n\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onRowExport = new EventEmitter<IRowExportingEventArgs>();\n\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onColumnExport = new EventEmitter<IColumnExportingEventArgs>();\n\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public export(grid: any, options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        const columns = grid.columnList.toArray();\n        this._columnList = new Array<any>(columns.length);\n\n        const hiddenColumns = [];\n        let lastVisbleColumnIndex = -1;\n\n        columns.forEach((column) => {\n            const columnHeader = column.header !== '' ? column.header : column.field;\n            const exportColumn = !column.hidden || options.ignoreColumnsVisibility;\n            const index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;\n\n            const columnInfo = {\n                header: columnHeader,\n                field: column.field,\n                skip: !exportColumn,\n                formatter: column.formatter\n            };\n\n            if (index !== -1) {\n                this._columnList[index] = columnInfo;\n                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);\n            } else {\n                hiddenColumns.push(columnInfo);\n            }\n\n            if (column.pinned && exportColumn) {\n                this._indexOfLastPinnedColumn = index;\n            }\n        });\n\n        // Append the hidden columns to the end of the list\n        hiddenColumns.forEach((hiddenColumn) => {\n           this._columnList[++lastVisbleColumnIndex] = hiddenColumn;\n        });\n\n        const data = this.prepareData(grid, options);\n        this.exportData(data, options);\n    }\n\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public exportData(data: any[], options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        if (!this._columnList || this._columnList.length === 0) {\n            const keys = ExportUtilities.getKeysFromData(data);\n            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false}));\n        }\n\n        let skippedPinnedColumnsCount = 0;\n        this._columnList.forEach((column, index) => {\n            if (!column.skip) {\n                const columnExportArgs = {\n                    header: column.header,\n                    columnIndex: index,\n                    cancel: false\n                };\n                this.onColumnExport.emit(columnExportArgs);\n\n                column.header = columnExportArgs.header;\n                column.skip = columnExportArgs.cancel;\n\n                if (column.skip && index <= this._indexOfLastPinnedColumn) {\n                    skippedPinnedColumnsCount++;\n                }\n\n                if (this._sort && this._sort.fieldName === column.field) {\n                    if (column.skip) {\n                        this._sort = null;\n                    } else {\n                        this._sort.fieldName = column.header;\n                    }\n                }\n            }\n        });\n\n        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;\n\n        const dataToExport = new Array<any>();\n        const isSpecialData = ExportUtilities.isSpecialData(data);\n\n        data.forEach((row, index) => {\n            this.exportRow(dataToExport, row, index, isSpecialData);\n        });\n\n        this.exportDataImplementation(dataToExport, options);\n        this.resetDefaults();\n    }\n\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n\n    private exportRow(data: any[], rowData: any, index: number, isSpecialData: boolean) {\n        let row;\n\n        if (!isSpecialData) {\n            row = this._columnList.reduce((a, e) => {\n                if (!e.skip) {\n                    const rawValue = rowData[e.field];\n                    a[e.header] = e.formatter ? e.formatter(rawValue) : rawValue;\n                }\n                return a;\n            }, {});\n        } else {\n            row = rowData;\n        }\n\n        const rowArgs = {\n            rowData: row,\n            rowIndex: index,\n            cancel: false\n        };\n        this.onRowExport.emit(rowArgs);\n\n        if (!rowArgs.cancel) {\n            data.push(rowArgs.rowData);\n        }\n    }\n\n    private prepareData(grid: any, options: IgxExporterOptionsBase): any[] {\n        let data = grid.data;\n\n        if (grid.filteringExpressionsTree &&\n            grid.filteringExpressionsTree.filteringOperands.length > 0 &&\n            !options.ignoreFiltering) {\n\n            const filteringState = {\n                expressionsTree: grid.filteringExpressionsTree,\n                logic: grid.filteringLogic\n            };\n\n            data = DataUtil.filter(data, filteringState);\n        }\n\n        if (grid.sortingExpressions &&\n            grid.sortingExpressions.length > 0 &&\n            !options.ignoreSorting) {\n\n            const sortingState = {\n                expressions: grid.sortingExpressions\n            };\n\n            this._sort = cloneValue(grid.sortingExpressions[0]);\n\n            data =  DataUtil.sort(data, sortingState);\n        }\n\n        return data;\n    }\n\n    private resetDefaults() {\n        this._columnList = [];\n        this._indexOfLastPinnedColumn = -1;\n        this._sort = null;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class CharSeparatedValueData {\n    private _headerRecord = '';\n    private _dataRecords = '';\n    private _eor = '\\r\\n';\n    private _delimiter;\n    private _escapeCharacters = ['\\r', '\\n', '\\r\\n'];\n    private _delimiterLength = 1;\n    private _isSpecialData = false;\n\n    constructor(private _data: any[], valueDelimiter: string) {\n        this.setDelimiter(valueDelimiter);\n    }\n\n    public prepareData() {\n        if (!this._data || this._data.length === 0) {\n            return '';\n        }\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            return '';\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);\n\n        return this._headerRecord + this._dataRecords;\n    }\n\n    private processField(value, escapeChars): string {\n        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';\n        if (escapeChars.some((v) => safeValue.includes(v))) {\n            safeValue = `\"${safeValue}\"`;\n        }\n        return safeValue + this._delimiter;\n    }\n\n    private processHeaderRecord(keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n            recordData += this.processField(keyName, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processRecord(record, keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n\n            const value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : '';\n            recordData += this.processField(value, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processDataRecords(currentData, keys, escapeChars) {\n        let dataRecords = '';\n        for (const row of currentData) {\n            dataRecords += this.processRecord(row, keys, escapeChars);\n        }\n\n        return dataRecords;\n    }\n\n    private setDelimiter(value) {\n        this._delimiter = value;\n        this._delimiterLength = value.length;\n    }\n}\n","export abstract class IgxExporterOptionsBase {\n    private _fileName: string;\n\n    /**\n     * Specifies whether hidden columns should be exported.\n     * ```typescript\n     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;\n     * this.exportOptions.ignoreColumnsVisibility = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsVisibility = false;\n\n    /**\n     * Specifies whether filtered out rows should be exported.\n     * ```typescript\n     * let ignoreFiltering = this.exportOptions.ignoreFiltering;\n     * this.exportOptions.ignoreFiltering = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreFiltering = false;\n\n    /**\n     * Specifies if the exporter should ignore the current column order in the IgxGrid.\n     * ```typescript\n     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;\n     * this.exportOptions.ignoreColumnsOrder = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsOrder = false;\n\n    /**\n     * Specifies whether the exported data should be sorted as in the provided IgxGrid.\n     * ```typescript\n     * let ignoreSorting = this.exportOptions.ignoreSorting;\n     * this.exportOptions.ignoreSorting = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreSorting = false;\n\n    constructor(fileName: string, protected _fileExtension: string) {\n        this.setFileName(fileName);\n    }\n\n    private setFileName(fileName: string): void {\n        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');\n    }\n\n    /**\n     * Gets the file name which will be used for the exporting operation.\n     * ```typescript\n     * let fileName = this.exportOptions.fileName;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    get fileName() {\n        return this._fileName;\n    }\n\n    /**\n     * Sets the file name which will be used for the exporting operation.\n     * ```typescript\n     * this.exportOptions.fileName = 'exportedData01';\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    set fileName(value) {\n        this.setFileName(value);\n    }\n\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the CSV exporting process.\n */\nexport class IgxCsvExporterOptions extends IgxExporterOptionsBase {\n\n    private _valueDelimiter;\n    private _fileType;\n\n    constructor(fileName: string, fileType: CsvFileTypes) {\n        super(fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType));\n        this.setFileType(fileType);\n        this.setDelimiter();\n    }\n\n    private static getExtensionFromFileType(fType: CsvFileTypes) {\n        let extension = '';\n        switch (fType) {\n            case CsvFileTypes.CSV:\n                extension = '.csv';\n                break;\n            case CsvFileTypes.TSV:\n                extension = '.tsv';\n                break;\n            case CsvFileTypes.TAB:\n                extension = '.tab';\n                break;\n            default:\n                throw Error('Unsupported CSV file type!');\n        }\n        return extension;\n    }\n\n    /**\n     * Gets the value delimiter which will be used for the exporting operation.\n     * ```typescript\n     * let delimiter = this.exportOptions.valueDelimiter;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get valueDelimiter() {\n        return this._valueDelimiter;\n    }\n\n    /**\n     * Sets a value delimiter which will overwrite the default delimiter of the selected export format.\n     * ```typescript\n     * this.exportOptions.valueDelimiter = '|';\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set valueDelimiter(value) {\n        this.setDelimiter(value);\n    }\n\n    /**\n     * Gets the CSV export format.\n     * ```typescript\n     * let filetype = this.exportOptions.fileType;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get fileType() {\n        return this._fileType;\n    }\n\n    /**\n     * Sets the CSV export format.\n     * ```typescript\n     * this.exportOptions.fileType = CsvFileTypes.TAB;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set fileType(value) {\n        this.setFileType(value);\n    }\n\n    private setFileType(value) {\n        if (value !== undefined && value !== null && value !== this._fileType) {\n            this._fileType = value;\n            const extension = IgxCsvExporterOptions.getExtensionFromFileType(value);\n            if (!this.fileName.endsWith(extension)) {\n                const oldExt = '.' + this.fileName.split('.').pop();\n                const newName = this.fileName.replace(oldExt, extension);\n                this._fileExtension = extension;\n                this.fileName = newName;\n            }\n        }\n    }\n\n    private setDelimiter(value?) {\n        if (value !== undefined && value !== '' && value !== null) {\n            this._valueDelimiter = value;\n        } else {\n            switch (this.fileType) {\n                case CsvFileTypes.CSV:\n                    this._valueDelimiter = ',';\n                    break;\n                case CsvFileTypes.TSV:\n                case CsvFileTypes.TAB:\n                    this._valueDelimiter = '\\t';\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * This enumeration is used to configure the default value separator\n * as well as the default file extension used when performing CSV exporting.\n */\nexport enum CsvFileTypes {\n    /**\n     * Character Separated Values, default separator is \"comma\", default file extension is .csv\n     */\n    CSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tsv\n     */\n    TSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tab\n     */\n    TAB\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { CharSeparatedValueData } from './char-separated-value-data';\nimport { CsvFileTypes, IgxCsvExporterOptions } from './csv-exporter-options';\n\nexport interface ICsvExportEndedEventArgs {\n    csvData: string;\n}\n\n/**\n * **Ignite UI for Angular CSV Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_csv.html)\n *\n * The Ignite UI for Angular CSV Exporter service can export data in a Character Separated Values format from\n * both raw data (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private csvExportService: IgxCsvExporterService) {\n * }\n *\n * const opt: IgxCsvExporterOptions = new IgxCsvExporterOptions(\"FileName\", CsvFileTypes.CSV);\n * this.csvExportService.exportData(this.localData, opt);\n * ```\n */\n@Injectable()\nexport class IgxCsvExporterService extends IgxBaseExporter {\n    private _stringData: string;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: ICsvExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxCsvExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<ICsvExportEndedEventArgs>();\n\n    protected exportDataImplementation(data: any[], options: IgxCsvExporterOptions) {\n        const csvData = new CharSeparatedValueData(data, options.valueDelimiter);\n        this._stringData = csvData.prepareData();\n\n        this.saveFile(options);\n        this.onExportEnded.emit({ csvData: this._stringData });\n    }\n\n    private saveFile(options: IgxCsvExporterOptions) {\n        switch (options.fileType) {\n            case CsvFileTypes.CSV:\n                this.exportFile(this._stringData, options.fileName, 'text/csv;charset=utf-8;');\n                break;\n            case CsvFileTypes.TSV:\n            case CsvFileTypes.TAB:\n                this.exportFile(this._stringData, options.fileName, 'text/tab-separated-values;charset=utf-8;');\n                break;\n        }\n    }\n\n    private exportFile(data: string, fileName: string, fileType: string): void {\n        const blob = new Blob(['\\ufeff', data], { type: fileType });\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","/** @hidden */\nexport class ExcelStrings {\n    /* tslint:disable max-line-length */\n    private static XML_STRING = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n';\n    private static SHARED_STRING_RELATIONSHIP = '<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n\n    public static getRels(): string {\n        return ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>';\n    }\n\n    public static getApp(): string {\n        return ExcelStrings.XML_STRING + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>Sheet1</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>';\n    }\n\n    public static getCore(): string {\n        return ExcelStrings.XML_STRING + '<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator>Dimitar Davidkov</dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>';\n    }\n\n    public static getTheme(): string {\n        return ExcelStrings.XML_STRING + '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯ Light\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿ Light\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>';\n    }\n\n    public static getStyles(hasNonStringValues: boolean): string {\n        const additionalCellXF = '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>';\n        const cellXFCount = hasNonStringValues ? 2 : 1;\n        return ExcelStrings.XML_STRING + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"' + cellXFCount + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' + additionalCellXF + '</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>';\n    }\n\n    public static getWorkbook(): string {\n        return ExcelStrings.XML_STRING + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>';\n    }\n\n    public static getWorksheetRels(): string {\n        return ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>`;\n    }\n\n    public static getWorkbookRels(hasSharedStrings): string {\n        let retVal = ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>';\n\n        if (hasSharedStrings) {\n            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;\n        }\n\n        retVal += '</Relationships>';\n\n        return retVal;\n    }\n\n    public static getSheetXML(dimension: string, freezePane: string, cols: string, sheetData: string, hasTable: boolean): string {\n        const tableParts = hasTable ? '<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>' : '';\n        return ExcelStrings.XML_STRING + '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"' + dimension + '\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">' + freezePane + '</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>' + cols + sheetData + '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>' + tableParts + '</worksheet>';\n    }\n\n    public static getSharedStringXML(count: number, uniqueCount: number, table: string): string {\n        return ExcelStrings.XML_STRING + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + count + '\" uniqueCount=\"' + uniqueCount + '\">' + table + '</sst>';\n    }\n\n    public static getContentTypesXML(hasSharedStrings: boolean, hasTable: boolean): string {\n        let contentTypes = ExcelStrings.XML_STRING +\n        `<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>`;\n\n        contentTypes += hasSharedStrings ?\n        `\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>` : '';\n\n        contentTypes += hasTable ?\n            `<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>` : '';\n        contentTypes += `</Types>`;\n\n        return contentTypes;\n    }\n\n    public static getTablesXML(dimension: string, tableColumns: string, sort: string): string {\n        return `${ExcelStrings.XML_STRING}<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"${dimension}\" totalsRowShown=\"0\">\n    <autoFilter ref=\"${dimension}\"/>${sort}${tableColumns}<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>`;\n    }\n    /* tslint:enable max-line-length */\n\n    public static getExcelColumn(index: number): string {\n        // Returns the excel column name for given 0-based index\n        // For example 27 should return \"AB\"\n        let returnString = '';\n        while (index >= 0) {\n            const char = index % 26;\n            returnString = String.fromCharCode(65 + char) + returnString;\n            index = Math.floor(index / 26) - 1;\n        }\n        return returnString;\n    }\n}\n","import { IExcelFile } from './excel-interfaces';\nimport { ExcelStrings } from './excel-strings';\nimport { WorksheetData } from './worksheet-data';\n\nimport * as JSZip from 'jszip/dist/jszip';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class RootRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('.rels', ExcelStrings.getRels());\n    }\n}\n\n/**\n * @hidden\n */\nexport class AppFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('app.xml', ExcelStrings.getApp());\n    }\n}\n\n/**\n * @hidden\n */\nexport class CoreFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('core.xml', ExcelStrings.getCore());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const hasSharedStrings = worksheetData.isEmpty === false;\n        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ThemeFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('theme1.xml', ExcelStrings.getTheme());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetFile implements IExcelFile {\n    private static MIN_WIDTH = 8.34;\n\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const sheetData = [];\n        const cols = [];\n        let dimension: string;\n        const dictionary = worksheetData.dataDictionary;\n        let freezePane = '';\n\n        if (worksheetData.isEmpty) {\n            sheetData.push('<sheetData/>');\n            dimension = 'A1';\n        } else {\n            sheetData.push('<sheetData>');\n            const height =  worksheetData.options.rowHeight;\n            const rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n            sheetData.push(`<row r=\"1\"${rowHeight}>`);\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData.push(`<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`);\n            }\n            sheetData.push('</row>');\n\n            for (let i = 1; i < worksheetData.rowCount; i++) {\n                sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}>`);\n\n                for (let j = 0; j < worksheetData.columnCount; j++) {\n                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n                    sheetData.push(cellData);\n                }\n                sheetData.push('</row>');\n            }\n            sheetData.push('</sheetData>');\n            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n\n            cols.push('<cols>');\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                const widthInTwips = worksheetData.options.columnWidth ?\n                                    worksheetData.options.columnWidth :\n                                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n\n                cols.push(`<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`);\n            }\n            cols.push('</cols>');\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n        }\n        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n        folder.file('sheet1.xml', ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable));\n    }\n\n    /* tslint:disable member-ordering */\n    private static getCellData(worksheetData: WorksheetData, row: number, column: number): string {\n        const dictionary = worksheetData.dataDictionary;\n        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);\n        const columnHeader = worksheetData.keys[column];\n\n        const cellValue = worksheetData.isSpecialData ?\n                            worksheetData.data[row - 1] :\n                            worksheetData.data[row - 1][columnHeader];\n\n        if (cellValue === undefined || cellValue === null) {\n            return `<c r=\"${columnName}\" s=\"1\"/>`;\n        } else {\n            const savedValue = dictionary.saveValue(cellValue, column, false);\n            const isSavedAsString = savedValue !== -1;\n\n            const value = isSavedAsString ? savedValue : cellValue;\n            const type = isSavedAsString ? ` t=\"s\"` : '';\n            const format = isSavedAsString ? '' : ` s=\"1\"`;\n\n            return `<c r=\"${columnName}\"${type}${format}><v>${value}</v></c>`;\n        }\n    }\n    /* tslint:enable member-ordering */\n}\n\n/**\n * @hidden\n */\nexport class StyleFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('workbook.xml', ExcelStrings.getWorkbook());\n    }\n}\n\n/**\n * @hidden\n */\nexport class ContentTypesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));\n    }\n}\n\n/**\n * @hidden\n */\nexport class SharedStringsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const dict = worksheetData.dataDictionary;\n        const sortedValues = dict.getKeys();\n        const sharedStrings = new Array<string>(sortedValues.length);\n\n        for (const value of sortedValues) {\n            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';\n        }\n\n        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(\n                        dict.stringsCount,\n                        sortedValues.length,\n                        sharedStrings.join(''))\n                    );\n    }\n}\n\n/**\n * @hidden\n */\nexport class TablesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const columnCount = worksheetData.columnCount;\n        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;\n        const dimension = 'A1:' + lastColumn;\n        const values = worksheetData.keys;\n        let sortString = '';\n\n        let tableColumns = '<tableColumns count=\"' + columnCount + '\">';\n        for (let i = 0; i < columnCount; i++) {\n            const value =  values[i];\n            tableColumns += '<tableColumn id=\"' + (i + 1) + '\" name=\"' + value + '\"/>';\n        }\n\n        tableColumns += '</tableColumns>';\n\n        if (worksheetData.sort) {\n            const sortingExpression = worksheetData.sort;\n            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));\n            const dir = sortingExpression.dir - 1;\n            sortString = `<sortState ref=\"A2:${lastColumn}\"><sortCondition descending=\"${dir}\" ref=\"${sc}1:${sc}15\"/></sortState>`;\n        }\n\n        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport { IExcelFolder } from './excel-interfaces';\nimport { WorksheetData } from './worksheet-data';\n\n/** @hidden */\nexport class RootExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ContentTypesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [\n            ExcelFolderTypes.RootRelsExcelFolder,\n            ExcelFolderTypes.DocPropsExcelFolder,\n            ExcelFolderTypes.XLExcelFolder\n        ];\n    }\n}\n\n/** @hidden */\nexport class RootRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.RootRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class DocPropsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'docProps';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [\n            ExcelFileTypes.AppFile,\n            ExcelFileTypes.CoreFile\n        ];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class XLExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'xl';\n    }\n\n    childFiles(data: WorksheetData) {\n        const retVal = [\n            ExcelFileTypes.StyleFile,\n            ExcelFileTypes.WorkbookFile\n        ];\n\n        if (!data.isEmpty) {\n            retVal.push(ExcelFileTypes.SharedStringsFile);\n        }\n\n        return retVal;\n    }\n\n    childFolders(data: WorksheetData) {\n        const retVal = [\n            ExcelFolderTypes.XLRelsExcelFolder,\n            ExcelFolderTypes.ThemeExcelFolder,\n            ExcelFolderTypes.WorksheetsExcelFolder\n        ];\n\n        if (!data.isEmpty && data.options.exportAsTable) {\n            retVal.push(ExcelFolderTypes.TablesExcelFolder);\n        }\n\n        return retVal;\n    }\n}\n\n/** @hidden */\nexport class XLRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorkbookRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class ThemeExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'theme';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ThemeFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'worksheets';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return data.isEmpty || !data.options.exportAsTable ? [] : [ExcelFolderTypes.WorksheetsRelsExcelFolder];\n    }\n}\n\n/** @hidden */\nexport class TablesExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return 'tables';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.TablesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport {\n    AppFile,\n    ContentTypesFile,\n    CoreFile,\n    RootRelsFile,\n    SharedStringsFile,\n    StyleFile,\n    TablesFile,\n    ThemeFile,\n    WorkbookFile,\n    WorkbookRelsFile,\n    WorksheetFile,\n    WorksheetRelsFile\n} from './excel-files';\n\nimport {\n    DocPropsExcelFolder,\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    TablesExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder\n} from './excel-folders';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\n/** @hidden */\nexport class ExcelElementsFactory {\n\n    public static getExcelFolder(type: ExcelFolderTypes): IExcelFolder {\n        switch (type) {\n            case ExcelFolderTypes.RootExcelFolder:\n                return new RootExcelFolder();\n            case ExcelFolderTypes.RootRelsExcelFolder:\n                return new RootRelsExcelFolder();\n            case ExcelFolderTypes.DocPropsExcelFolder:\n                return new DocPropsExcelFolder();\n            case ExcelFolderTypes.XLExcelFolder:\n                return new XLExcelFolder();\n            case ExcelFolderTypes.XLRelsExcelFolder:\n                return new XLRelsExcelFolder();\n            case ExcelFolderTypes.ThemeExcelFolder:\n                return new ThemeExcelFolder();\n            case ExcelFolderTypes.WorksheetsExcelFolder:\n                return  new WorksheetsExcelFolder();\n            case ExcelFolderTypes.WorksheetsRelsExcelFolder:\n                return new WorksheetsRelsExcelFolder();\n            case ExcelFolderTypes.TablesExcelFolder:\n                return new TablesExcelFolder();\n            default:\n                throw new Error('Unknown excel folder type!');\n        }\n    }\n\n    public static getExcelFile(type: ExcelFileTypes): IExcelFile {\n        switch (type) {\n            case ExcelFileTypes.RootRelsFile:\n                return  new RootRelsFile();\n            case ExcelFileTypes.AppFile:\n                return  new AppFile();\n            case ExcelFileTypes.CoreFile:\n                return new CoreFile();\n            case ExcelFileTypes.WorkbookRelsFile:\n                return new WorkbookRelsFile();\n            case ExcelFileTypes.ThemeFile:\n                return new ThemeFile();\n            case ExcelFileTypes.WorksheetFile:\n                return new WorksheetFile();\n            case ExcelFileTypes.StyleFile:\n                return new StyleFile();\n            case ExcelFileTypes.WorkbookFile:\n                return new WorkbookFile();\n            case ExcelFileTypes.ContentTypesFile:\n                return new ContentTypesFile();\n            case ExcelFileTypes.SharedStringsFile:\n                return new SharedStringsFile();\n            case ExcelFileTypes.WorksheetRelsFile:\n                return new WorksheetRelsFile();\n            case ExcelFileTypes.TablesFile:\n                return new TablesFile();\n            default:\n                throw Error('Unknown excel file type!');\n        }\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/** @hidden */\nexport class WorksheetDataDictionary {\n    private static DEFAULT_FONT = '11pt Calibri';\n    private static TEXT_PADDING = 5;\n\n    private _dictionary: any;\n    private _widthsDictionary: any;\n\n    private _sortedKeysByValue: string[];\n    private _sortedKeysByValueAreValid: boolean;\n\n    private _keys: string[];\n    private _keysAreValid: boolean;\n\n    private _counter: number;\n    private _calculateColumnWidth: boolean;\n    private _columnWidths: number[];\n    private _context: any;\n\n    private _columnTypeInfo: boolean[];\n    public hasNonStringValues = false;\n\n    public stringsCount: number;\n\n    constructor(columnCount: number, columnWidth: number) {\n        this._dictionary = {};\n        this._widthsDictionary = {};\n        this._counter = 0;\n        this.dirtyKeyCollections();\n\n        this._calculateColumnWidth = !columnWidth;\n        this._columnWidths = new Array<number>(columnCount);\n        this._columnTypeInfo = new Array<boolean>(columnCount);\n\n        if (!this._calculateColumnWidth) {\n            this._columnWidths.fill(columnWidth);\n        }\n\n        this.stringsCount = 0;\n    }\n\n    public get columnWidths() {\n        return this._columnWidths;\n    }\n\n    public saveValue(value: any, column: number, isHeader: boolean): number {\n        if (this._columnTypeInfo[column] === undefined && isHeader === false) {\n            this._columnTypeInfo[column] = typeof value === 'string' ||\n                                            typeof value === 'boolean' ||\n                                            value instanceof Date;\n        }\n\n        let sanitizedValue = '';\n        const isSavedAsString = this._columnTypeInfo[column] || isHeader;\n\n        if (isSavedAsString) {\n            sanitizedValue = this.sanitizeValue(value);\n\n            if (this._dictionary[sanitizedValue] === undefined) {\n                this._dictionary[sanitizedValue] = this._counter++;\n                this.dirtyKeyCollections();\n            }\n\n            this.stringsCount ++;\n        } else {\n            this.hasNonStringValues = true;\n        }\n\n        if (this._calculateColumnWidth) {\n            const width = this.getTextWidth(value);\n            const maxWidth = Math.max(this._columnWidths[column] || 0, width);\n            this._columnWidths[column] = maxWidth;\n        }\n\n        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;\n    }\n\n    public getValue(value: string): number {\n        return this.getSanitizedValue(this.sanitizeValue(value));\n    }\n\n    public getSanitizedValue(sanitizedValue: string): number {\n        return this._dictionary[sanitizedValue];\n    }\n\n    public getKeys(): string[] {\n        if (!this._keysAreValid) {\n            this._keys = Object.keys(this._dictionary);\n            this._keysAreValid = true;\n        }\n\n        return this._keys;\n    }\n\n    private getTextWidth(value: any): number {\n        if (this._widthsDictionary[value] === undefined) {\n            const context = this.getContext();\n            const metrics = context.measureText(value);\n            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;\n        }\n\n        return this._widthsDictionary[value];\n    }\n\n    private getContext(): any {\n        if (!this._context) {\n            const canvas = document.createElement('canvas');\n            this._context = canvas.getContext('2d');\n            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;\n        }\n\n        return this._context;\n    }\n\n    private sanitizeValue(value: any): string {\n        if (ExportUtilities.hasValue(value) === false) {\n            return '';\n        } else {\n            const stringValue = String(value);\n            return stringValue.replace(/&/g, '&amp;')\n                            .replace(/</g, '&lt;')\n                            .replace(/>/g, '&gt;')\n                            .replace(/\"/g, '&quot;')\n                            .replace(/'/g, '&apos;');\n        }\n    }\n\n    private dirtyKeyCollections(): void {\n        this._keysAreValid = false;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { WorksheetDataDictionary } from './worksheet-data-dictionary';\n\n/** @hidden */\nexport class WorksheetData {\n    private _columnCount: number;\n    private _rowCount: number;\n    private _dataDictionary: WorksheetDataDictionary;\n    private _keys: string[];\n    private _isSpecialData: boolean;\n\n    constructor(private _data: any[], public options: IgxExcelExporterOptions, public indexOfLastPinnedColumn, public sort: any) {\n        this.initializeData();\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    public get columnCount(): number {\n        return this._columnCount;\n    }\n\n    public get rowCount(): number {\n        return this._rowCount;\n    }\n\n    public get isEmpty() {\n        return !this.rowCount || !this._columnCount;\n    }\n\n    public get keys(): string[] {\n        return this._keys;\n    }\n\n    public get isSpecialData(): boolean {\n        return this._isSpecialData;\n    }\n\n    public get dataDictionary() {\n        return this._dataDictionary;\n    }\n\n    private initializeData() {\n        if (!this._data || this._data.length === 0) {\n            return;\n        }\n\n        this._keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (this._keys.length === 0) {\n            return;\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n\n        this._columnCount = this._keys.length;\n        this._rowCount = this._data.length + 1;\n\n        this._dataDictionary = new WorksheetDataDictionary(this._columnCount, this.options.columnWidth);\n    }\n}\n","import * as JSZip from 'jszip/dist/jszip';\n\nimport { CommonModule } from '@angular/common';\nimport { Directive, EventEmitter, Injectable, NgModule, Output } from '@angular/core';\n\nimport { ExcelElementsFactory } from './excel-elements-factory';\nimport { ExcelFolderTypes } from './excel-enums';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { WorksheetData } from './worksheet-data';\n\nexport interface IExcelExportEndedEventArgs {\n    xlsx: JSZip;\n}\n\n/**\n * **Ignite UI for Angular Excel Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)\n *\n * The Ignite UI for Angular Excel Exporter service can export data in MicrosoftÂ® ExcelÂ® format from both raw data\n * (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private excelExportService: IgxExcelExporterService) {\n * }\n *\n * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions(\"FileName\"));\n * ```\n */\n@Injectable()\nexport class IgxExcelExporterService extends IgxBaseExporter {\n\n    private static ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' };\n    private static DATA_URL_PREFIX = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,';\n\n    private _xlsx: JSZip;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxExcelExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<IExcelExportEndedEventArgs>();\n\n    private static populateFolder(folder: IExcelFolder, zip: JSZip, worksheetData: WorksheetData): any {\n        for (const childFolder of folder.childFolders(worksheetData)) {\n            const folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);\n            const zipFolder = zip.folder(folderIntance.folderName);\n            IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);\n        }\n\n        for (const childFile of folder.childFiles(worksheetData)) {\n            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);\n            fileInstance.writeElement(zip, worksheetData);\n        }\n    }\n\n    protected exportDataImplementation(data: any[], options: IgxExcelExporterOptions): void {\n        const worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort);\n        this._xlsx = new JSZip();\n\n        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);\n        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);\n\n        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {\n            this.saveFile(result, options.fileName);\n\n            this.onExportEnded.emit({ xlsx: this._xlsx });\n        });\n    }\n\n    private saveFile(data: string, fileName: string): void {\n        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {\n            type: ''\n        });\n\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the Excel exporting process.\n */\nexport class IgxExcelExporterOptions extends IgxExporterOptionsBase {\n    private _columnWidth: number;\n    private _rowHeight: number;\n\n    /**\n     * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,\n     * this option will always be considered as set to true.\n     * ```typescript\n     * let ignorePinning = this.exportOptions.ignorePinning;\n     * this.exportOptions.ignorePinning = true;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public ignorePinning = false;\n\n    /**\n     * Specifies whether the exported data should be formatted as Excel table. (True by default)\n     * ```typescript\n     * let exportAsTable = this.exportOptions.exportAsTable;\n     * this.exportOptions.exportAsTable = false;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public exportAsTable = true;\n\n    constructor(fileName: string) {\n        super(fileName, '.xlsx');\n    }\n\n    /**\n     * Gets the width of the columns in the exported excel file.\n     * ```typescript\n     * let width = this.exportOptions.columnWidth;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get columnWidth(): number {\n        return this._columnWidth;\n    }\n\n    /**\n     * Sets the width of the columns in the exported excel file. If left unspecified or 0,\n     * the width of the largest string in the column will be used.\n     * ```typescript\n     * this.exportOptions.columnWidth = 55;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set columnWidth(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for column width!');\n        }\n\n        this._columnWidth = value;\n    }\n\n    /**\n     * Gets the height of the rows in the exported excel file.\n     * ```typescript\n     * let height = this.exportOptions.rowHeight;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get rowHeight(): number {\n        return this._rowHeight;\n    }\n\n    /**\n     * Sets the height of the rows in the exported excel file. If left unspecified or 0,\n     * the default height of the excel rows will be used.\n     * ```typescript\n     * this.exportOptions.rowHeight = 25;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set rowHeight(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for row height!');\n        }\n\n        this._rowHeight = value;\n    }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, Point, HorizontalAlignment, VerticalAlignment, getPointFromPositionsSettings } from './../utilities';\nimport { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';\n\nexport class ConnectedPositioningStrategy implements IPositionStrategy {\n  private _defaultSettings: PositionSettings = {\n    // default Point(0, 0) in getPointFromPositionsSettings\n    target: null,\n    horizontalDirection: HorizontalAlignment.Right,\n    verticalDirection: VerticalAlignment.Bottom,\n    horizontalStartPoint: HorizontalAlignment.Left,\n    verticalStartPoint: VerticalAlignment.Bottom,\n    openAnimation: scaleInVerTop,\n    closeAnimation: scaleOutVerTop\n  };\n\n  public settings: PositionSettings;\n  constructor(settings?: PositionSettings) {\n    this.settings = Object.assign({}, this._defaultSettings, settings);\n  }\n\n  // we no longer use the element inside the position() as its dimensions are cached in rect\n  position(contentElement: HTMLElement, size: { width: number, height: number}, document?: Document, initialCall?: boolean): void {\n    const startPoint = getPointFromPositionsSettings(this.settings, contentElement.parentElement);\n\n    contentElement.style.top = startPoint.y + this.settings.verticalDirection * size.height + 'px';\n    contentElement.style.left = startPoint.x + this.settings.horizontalDirection * size.width + 'px';\n  }\n}\n\n","import { PositionSettings, VerticalAlignment, HorizontalAlignment, Point } from './../utilities';\nimport { IPositionStrategy } from './IPositionStrategy';\nimport { ConnectedPositioningStrategy } from './connected-positioning-strategy';\n\nenum Axis {\n    X = 1,\n    Y = 0\n}\nexport class AutoPositionStrategy extends ConnectedPositioningStrategy implements IPositionStrategy {\n    public offsetPadding = 16;\n    private _initialSettings;\n    getViewPort(document) { // Material Design implementation\n        const clientRect = document.documentElement.getBoundingClientRect();\n        const scrollPosition = {\n            top: -clientRect.top,\n            left: -clientRect.left\n        };\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width\n        };\n\n    }\n\n\n    // The position method should return a <div> container that will host the component\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        if (!initialCall) {\n            super.position(contentElement, size);\n            return;\n        }\n        this._initialSettings = this._initialSettings || Object.assign({}, this._initialSettings, this.settings);\n        this.settings = this._initialSettings ? Object.assign({}, this.settings, this._initialSettings) : this.settings;\n        const viewPort = this.getViewPort(document);\n        super.position(contentElement, size);\n        const checkIfMoveHorizontal = (elem: HTMLElement) => {\n            const leftBound = elem.offsetLeft;\n            const rightBound = elem.offsetLeft + elem.lastElementChild.clientWidth;\n            switch (this.settings.horizontalDirection) {\n                case HorizontalAlignment.Left:\n                    if (leftBound < viewPort.left) {\n                        this.settings.horizontalDirection = HorizontalAlignment.Right;\n                        this.settings.horizontalStartPoint = HorizontalAlignment.Right;\n                    }\n                    break;\n                case HorizontalAlignment.Right:\n                    if (rightBound > viewPort.right) {\n                        this.settings.horizontalDirection = HorizontalAlignment.Left;\n                        this.settings.horizontalStartPoint = HorizontalAlignment.Left;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        };\n        const checkIfMoveVertical = (elem: HTMLElement) => {\n            const topBound = elem.offsetTop;\n            const bottomBound = elem.offsetTop + elem.lastElementChild.clientHeight;\n            switch (this.settings.verticalDirection) {\n                case VerticalAlignment.Top:\n                    if (topBound < viewPort.top) {\n                        this.settings.verticalDirection = VerticalAlignment.Bottom;\n                        this.settings.verticalStartPoint = VerticalAlignment.Bottom;\n                    }\n                    break;\n                case VerticalAlignment.Bottom:\n                    if (bottomBound > viewPort.bottom) {\n                        this.settings.verticalDirection = VerticalAlignment.Top;\n                        this.settings.verticalStartPoint = VerticalAlignment.Top;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        };\n        checkIfMoveVertical(contentElement);\n        checkIfMoveHorizontal(contentElement);\n        super.position(contentElement, size);\n    }\n}\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport class AbsoluteScrollStrategy implements IScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        this._scrollContainer = scrollContainer;\n    }\n\n    initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.addEventListener('scroll', this.onScroll, true);\n        }\n    }\n\n    detach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n        }\n\n        this._initialized = false;\n    }\n\n    private onScroll = () => {\n        this._overlayService.reposition(this._id);\n    }\n}\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport class BlockScrollStrategy implements IScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _initialScrollTop: number;\n    private _initialScrollLeft: number;\n    private _sourceElement: Element;\n\n    constructor(scrollContainer?: HTMLElement) { }\n\n    initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n\n        this._document = document;\n        this._initialized = true;\n    }\n\n    public attach(): void {\n        this._document.addEventListener('scroll', this.onScroll, true);\n        this._document.addEventListener('wheel', this.onWheel, true);\n    }\n\n    public detach(): void {\n        this._document.removeEventListener('scroll', this.onScroll, true);\n        this._document.removeEventListener('wheel', this.onWheel, true);\n        this._sourceElement = null;\n        this._initialScrollTop = 0;\n        this._initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        ev.preventDefault();\n        if (!this._sourceElement || this._sourceElement !== ev.srcElement) {\n            this._sourceElement = ev.srcElement;\n            this._initialScrollTop = this._sourceElement.scrollTop;\n            this._initialScrollLeft = this._sourceElement.scrollLeft;\n        }\n\n        this._sourceElement.scrollTop = this._initialScrollTop;\n        this._sourceElement.scrollLeft = this._initialScrollLeft;\n    }\n\n    private onWheel(ev: WheelEvent) {\n        ev.stopImmediatePropagation();\n        ev.preventDefault();\n    }\n}\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport class CloseScrollStrategy implements IScrollStrategy {\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private initialScrollTop: number;\n    private initialScrollLeft: number;\n    private cumulativeScrollTop: number;\n    private cumulativeScrollLeft: number;\n    private _threshold: number;\n    private _initialized = false;\n    private _sourceElement: Element;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        this._scrollContainer = scrollContainer;\n        this._threshold = 10;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n    }\n\n    initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll);\n            this._sourceElement = this._scrollContainer;\n        } else {\n            this._document.addEventListener('scroll', this.onScroll);\n            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                this._sourceElement = document.documentElement as Element;\n            } else if (document.body.scrollHeight > document.body.clientHeight) {\n                this._sourceElement = document.body as Element;\n            }\n        }\n\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = this._sourceElement.scrollTop;\n        this.initialScrollLeft = this._sourceElement.scrollLeft;\n    }\n\n    detach(): void {\n        // TODO: check why event listener removes only on first call and remains on each next!!!\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll);\n        }\n        this._sourceElement = null;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = 0;\n        this.initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop += this._sourceElement.scrollTop;\n        this.cumulativeScrollLeft += this._sourceElement.scrollLeft;\n\n        if (Math.abs(this.cumulativeScrollTop - this.initialScrollTop) > this._threshold ||\n            Math.abs(this.cumulativeScrollLeft - this.initialScrollLeft) > this._threshold) {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n            this._overlayService.hide(this._id);\n        }\n    }\n}\n","import { IgxOverlayService } from '../overlay';\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_scroll.html).\n * Scroll strategies determines how the scrolling will be handled in the provided IgxOverlayService.\n */\nexport class IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n\n    /**\n     * Initializes the strategy. Should be called once\n     * @param document reference to Document object.\n     * @param overlayService IgxOverlay service to use in this strategy\n     * @param id Unique id for this strategy.\n     * ```typescript\n     * settings.scrollStrategy.initialize(document, overlay, id);\n     * ```\n     */\n    initialize(document: Document, overlayService: IgxOverlayService, id: string) { }\n\n    /**\n     * Attaches the strategy\n     * ```typescript\n     * settings.scrollStrategy.attach();\n     * ```\n     */\n    attach(): void { }\n\n    /**\n     * Detaches the strategy\n     * ```typescript\n     * settings.scrollStrategy.detach();\n     * ```\n     */\n    detach(): void { }\n}\n","import { EventEmitter } from '@angular/core';\n\nexport enum TransactionType {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update'\n}\n\nexport interface Transaction {\n    id: any;\n    type: TransactionType;\n    newValue: any;\n}\n\n/** @experimental @hidden */\nexport interface HierarchicalTransaction extends Transaction {\n    parentId: any;\n}\n\nexport interface State {\n    value: any;\n    recordRef: any;\n    type: TransactionType;\n}\n\n/** @experimental @hidden */\nexport interface HierarchicalState extends State {\n    parentId: any;\n}\n\n/** @experimental @hidden */\nexport interface HierarchicalTransactionNode {\n    id: any;\n    parentId?: any;\n    childNodes: HierarchicalTransactionNode[];\n}\n\nexport interface TransactionService<T extends Transaction, S extends State> {\n    /**\n     * Returns whether transaction is enabled for this service\n     */\n    readonly enabled: boolean;\n\n    /**\n     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo.\n     */\n    onStateUpdate?: EventEmitter<void>;\n\n    /**\n     * @returns if there are any transactions in the Undo stack\n     */\n    canUndo: boolean;\n\n    /**\n     * @returns if there are any transactions in the Redo stack\n     */\n    canRedo: boolean;\n\n    /**\n     * Adds provided  transaction with recordRef if any\n     * @param transaction Transaction to be added\n     * @param recordRef Reference to the value of the record in the data source related to the changed item\n     */\n    add(transaction: T, recordRef?: any): void;\n\n    /**\n     * Returns all recorded transactions in chronological order.\n     * @param id Optional record id to get transactions for\n     * @returns All transaction in the service or for the specified record\n     */\n    getTransactionLog(id?: any): Transaction[];\n\n    /**\n     * Remove the last transaction if any\n     */\n    undo(): void;\n\n    /**\n     * Applies the last undone transaction if any\n     */\n    redo(): void;\n\n    /**\n     * Returns aggregated changes from all transactions\n     * @param mergeChanges If set to true will merge each state's value over relate recordRef\n     * and will record resulting value in the related transaction\n     * @returns Collection of aggregated transactions for each changed record\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[];\n\n    /**\n     * Returns the state of the record with provided id\n     * @param id The id of the record\n     * @returns State of the record if any\n     */\n    getState(id: any): S;\n\n    /**\n     * Returns value of the required id including all uncommitted changes\n     * @param id The id of the record to return value for\n     * @param mergeChanges If set to true will merge state's value over relate recordRef\n     * and will return merged value\n     * @returns Value with changes or **null**\n     */\n    getAggregatedValue(id: any, mergeChanges: boolean): any;\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     */\n    commit(data: any[]): void;\n\n    /**\n     * Clears all transactions\n     */\n    clear(): void;\n\n    /**\n     * Starts pending transactions. All transactions passed after call to startPending\n     * will not be added to transaction log\n     */\n    startPending(): void;\n\n    /**\n     * Clears all pending transactions and aggregated pending state. If commit is set to true\n     * commits pending states as single transaction\n     * @param commit Should commit the pending states\n     */\n    endPending(commit: boolean): void;\n}\n","import { TransactionService, Transaction, State } from './transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {\n    protected _isPending = false;\n    protected _pendingTransactions: T[] = [];\n    protected _pendingStates: Map<any, S> = new Map();\n    public get canRedo(): boolean {\n        return false;\n    }\n    public get canUndo(): boolean {\n        return false;\n    }\n    public get enabled(): boolean {\n        return this._isPending;\n    }\n\n    public onStateUpdate = new EventEmitter<void>();\n\n    public add(transaction: T, recordRef?: any): void {\n        if (this._isPending) {\n            this.updateState(this._pendingStates, transaction, recordRef);\n            this._pendingTransactions.push(transaction);\n        }\n    }\n\n    getTransactionLog(id?: any): T[] { return []; }\n\n    undo(): void { }\n\n    redo(): void { }\n\n    getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._pendingStates.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    public getState(id: any): S {\n        return this._pendingStates.get(id);\n    }\n\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._pendingStates.get(id);\n        if (!state) {\n            return null;\n        }\n        if (mergeChanges) {\n            return this.updateValue(state);\n        }\n        return state.value;\n    }\n\n    commit(data: any): void { }\n\n    clear(): void {\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n    public startPending(): void {\n        this._isPending = true;\n    }\n\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        if (state) {\n            if (isObject(state.value)) {\n                mergeObjects(state.value, transaction.newValue);\n            } else {\n                state.value = transaction.newValue;\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n    }\n\n    /**\n     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types\n     * @param state State to update value for\n     * @returns updated value including all the changes in provided state\n     */\n    protected updateValue(state: S) {\n        return this.mergeValues(state.recordRef, state.value);\n    }\n\n    /**\n     * Merges second values in first value and the result in empty object. If values are primitive type\n     * returns second value if exists, or first value.\n     * @param first Value to merge into\n     * @param second Value to merge\n     */\n    protected mergeValues<U>(first: U, second: U): U {\n        let result: U;\n        if (isObject(first) || isObject(second)) {\n            result = mergeObjects(mergeObjects({}, first), second);\n        } else {\n            result = second ? second : first;\n        }\n        return result;\n    }\n}\n","import { Transaction, State, TransactionType } from './transaction';\nimport { IgxBaseTransactionService } from './base-transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {\n    protected _transactions: T[] = [];\n    protected _redoStack: { transaction: T, recordRef: any, useInUndo?: boolean }[] = [];\n    protected _undoStack: { transaction: T, recordRef: any, useInUndo?: boolean }[] = [];\n    protected _states: Map<any, S> = new Map();\n\n    get canUndo(): boolean {\n        return this._undoStack.length > 0;\n    }\n\n    get canRedo(): boolean {\n        return this._redoStack.length > 0;\n    }\n\n    public onStateUpdate = new EventEmitter<void>();\n\n    public add(transaction: T, recordRef?: any): void {\n        const states = this._isPending ? this._pendingStates : this._states;\n        this.verifyAddedTransaction(states, transaction, recordRef);\n        this.addTransaction(transaction, states, recordRef);\n    }\n\n    private addTransaction(transaction: T, states: Map<any, S>, recordRef?: any, useInUndo: boolean = true) {\n        this.updateState(states, transaction, recordRef);\n\n        const transactions = this._isPending ? this._pendingTransactions : this._transactions;\n        transactions.push(transaction);\n\n        if (!this._isPending) {\n            this._undoStack.push({ transaction, recordRef, useInUndo });\n            this._redoStack = [];\n            this.onStateUpdate.emit();\n        }\n    }\n\n    public getTransactionLog(id?: any): T[] {\n        if (id) {\n            return this._transactions.filter(t => t.id === id);\n        }\n        return [...this._transactions];\n    }\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    public getState(id: any): S {\n        return this._states.get(id);\n    }\n\n    public get enabled(): boolean {\n        return true;\n    }\n\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._states.get(id);\n        const pendingState = super.getState(id);\n\n        //  if there is no state and there is no pending state return null\n        if (!state && !pendingState) {\n            return null;\n        }\n\n        const pendingChange = super.getAggregatedValue(id, false);\n        const change = state && state.value;\n        let aggregatedValue = this.mergeValues(change, pendingChange);\n        if (mergeChanges) {\n            const originalValue = state ? state.recordRef : pendingState.recordRef;\n            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);\n        }\n        return aggregatedValue;\n    }\n\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        if (commit) {\n            let i = 0;\n            this._pendingStates.forEach((s: S, k: any) => {\n                this.addTransaction({ id: k, newValue: s.value, type: s.type } as T, this._states, s.recordRef, i === 0);\n                i++;\n            });\n        }\n        super.endPending(commit);\n    }\n\n    public commit(data: any[]): void {\n        this._states.forEach((s: S) => {\n            const index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(s.recordRef));\n            switch (s.type) {\n                case TransactionType.ADD:\n                    data.push(s.value);\n                    break;\n                case TransactionType.DELETE:\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (0 <= index && index < data.length) {\n                        data[index] = this.updateValue(s);\n                    }\n                    break;\n            }\n        });\n        this.clear();\n    }\n\n    public clear(): void {\n        this._transactions = [];\n        this._states.clear();\n        this._redoStack = [];\n        this._undoStack = [];\n        this.onStateUpdate.emit();\n    }\n\n    public undo(): void {\n        if (this._undoStack.length <= 0) {\n            return;\n        }\n\n        let action: { transaction: T, recordRef: any, useInUndo?: boolean };\n        do {\n            action = this._undoStack.pop();\n            this._transactions.pop();\n            this._redoStack.push(action);\n        } while (!action.useInUndo);\n\n        this._states.clear();\n        this._undoStack.map(a => this.updateState(this._states, a.transaction, a.recordRef));\n        this.onStateUpdate.emit();\n    }\n\n    public redo(): void {\n        if (this._redoStack.length > 0) {\n            //  remove first item from redo stack (it should always has useInUndo === true)\n            //  and then all next items until there are items and useInUndo === false.\n            //  If there are no more items, or next item's useInUndo === true leave.\n            let undoItem: { transaction: T, recordRef: any, useInUndo?: boolean };\n            undoItem = this._redoStack.pop();\n            this.updateState(this._states, undoItem.transaction, undoItem.recordRef);\n            this._transactions.push(undoItem.transaction);\n            this._undoStack.push(undoItem);\n\n            while (this._redoStack[this._redoStack.length - 1] && !this._redoStack[this._redoStack.length - 1].useInUndo) {\n                undoItem = this._redoStack.pop();\n                this.updateState(this._states, undoItem.transaction, undoItem.recordRef);\n                this._transactions.push(undoItem.transaction);\n                this._undoStack.push(undoItem);\n            }\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * Verifies if the passed transaction is correct. If not throws an exception.\n     * @param transaction Transaction to be verified\n     */\n    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        const state = states.get(transaction.id);\n        switch (transaction.type) {\n            case TransactionType.ADD:\n                if (state) {\n                    //  cannot add same item twice\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);\n                }\n                break;\n            case TransactionType.DELETE:\n            case TransactionType.UPDATE:\n                if (state && state.type === TransactionType.DELETE) {\n                    //  cannot delete or update deleted items\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);\n                }\n                if (!state && !recordRef && !this._isPending) {\n                    //  cannot initially add transaction or delete item with no recordRef\n                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +\n                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        //  if TransactionType is ADD simply add transaction to states;\n        //  if TransactionType is DELETE:\n        //    - if there is state with this id of type ADD remove it from the states;\n        //    - if there is state with this id of type UPDATE change its type to DELETE;\n        //    - if there is no state with this id add transaction to states;\n        //  if TransactionType is UPDATE:\n        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value\n        //    - if there is state with this id of type UPDATE merge new value into state new value\n        //    - if there is state with this id and state type is DELETE change its type to UPDATE\n        //    - if there is no state with this id add transaction to states;\n        if (state) {\n            switch (transaction.type) {\n                case TransactionType.DELETE:\n                    if (state.type === TransactionType.ADD) {\n                        states.delete(transaction.id);\n                    } else if (state.type === TransactionType.UPDATE) {\n                        state.value = transaction.newValue;\n                        state.type = TransactionType.DELETE;\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (isObject(state.value)) {\n                        if (state.type === TransactionType.ADD) {\n                            state.value = this.mergeValues(state.value, transaction.newValue);\n                        }\n                        if (state.type === TransactionType.UPDATE) {\n                            mergeObjects(state.value, transaction.newValue);\n                        }\n                    } else {\n                        state.value = transaction.newValue;\n                    }\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n\n        //  should not clean pending state. This will happen automatically on endPending call\n        if (!this._isPending) {\n            this.cleanState(transaction.id, states);\n        }\n    }\n\n    /**\n     * Compares the state with recordRef and clears all duplicated values. If any state ends as\n     * empty object removes it from states.\n     * @param state State to clean\n     */\n    protected cleanState(id: any, states: Map<any, S>): void {\n        const state = states.get(id);\n        //  do nothing if\n        //  there is no state, or\n        //  there is no state value (e.g. DELETED transaction), or\n        //  there is no recordRef (e.g. ADDED transaction)\n        if (state && state.value && state.recordRef) {\n            //  if state's value is object compare each key with the ones in recordRef\n            //  if values in any key are the same delete it from state's value\n            //  if state's value is not object, simply compare with recordRef and remove\n            //  the state if they are equal\n            if (isObject(state.recordRef)) {\n                for (const key of Object.keys(state.value)) {\n                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {\n                        delete state.value[key];\n                    }\n                }\n\n                //  if state's value is empty remove the state from the states, only if state is not DELETE type\n                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {\n                    states.delete(id);\n                }\n            } else {\n                if (state.recordRef === state.value) {\n                    states.delete(id);\n                }\n            }\n        }\n    }\n}\n","import { HierarchicalTransaction, HierarchicalState, TransactionType, HierarchicalTransactionNode } from './transaction';\nimport { Injectable } from '@angular/core';\nimport { IgxTransactionService } from '..';\n\n/** @experimental @hidden */\n@Injectable()\nexport class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState>\n    extends IgxTransactionService<T, S> {\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            this.clearArraysFromObject(value);\n            result.push({ id: key, parentId: state.parentId, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        super.updateState(states, transaction, recordRef);\n        const currentState = states.get(transaction.id);\n        if (currentState && transaction.type === TransactionType.ADD) {\n            currentState.parentId = transaction.parentId;\n        }\n    }\n\n    //  TODO: remove this method. Force cloning to strip child arrays when needed instead\n    private clearArraysFromObject(obj: {}) {\n        for (const prop of Object.keys(obj)) {\n            if (Array.isArray(obj[prop])) {\n                delete obj[prop];\n            }\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Inject\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { OverlaySettings, OverlayEventArgs, ConnectedPositioningStrategy, AbsoluteScrollStrategy } from '../../services';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subscription, OperatorFunction, Subject } from 'rxjs';\nimport { OverlayCancelableEventArgs } from '../../services/overlay/utilities';\nimport { CancelableEventArgs } from '../../core/utils';\n\n@Directive({\n    exportAs: 'toggle',\n    selector: '[igxToggle]'\n})\nexport class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    private _overlayId: string;\n    private destroy$ = new Subject<boolean>();\n    private _overlaySubFilter: OperatorFunction<OverlayEventArgs, OverlayEventArgs>[] = [\n        filter(x => x.id === this._overlayId)\n    ];\n    private _overlayOpenedSub: Subscription;\n    private _overlayClosingSub: Subscription;\n    private _overlayClosedSub: Subscription;\n\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableEventArgs>();\n\n    private _collapsed = true;\n    /**\n     * @hidden\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle--hidden')\n    @HostBinding('attr.aria-hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        private elementRef: ElementRef,\n        private cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) private overlayService: IgxOverlayService,\n        @Optional() private navigationService: IgxNavigationService) {\n    }\n\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        this._collapsed = false;\n        this.cdr.detectChanges();\n\n        const openEventArgs: CancelableEventArgs = { cancel: false };\n        this.onOpening.emit(openEventArgs);\n        if (openEventArgs.cancel) {\n            this._collapsed = true;\n            this.cdr.detectChanges();\n            return;\n        }\n\n        if (this._overlayId) {\n            this.overlayService.show(this._overlayId, overlaySettings);\n        } else {\n            this._overlayId = this.overlayService.show(this.elementRef, overlaySettings);\n        }\n\n        this.unsubscribe();\n        this._overlayOpenedSub = this.overlayService.onOpened.pipe(...this._overlaySubFilter, takeUntil(this.destroy$)).subscribe(() => {\n            this.onOpened.emit();\n        });\n        this._overlayClosingSub = this.overlayService\n            .onClosing\n            .pipe(...this._overlaySubFilter, takeUntil(this.destroy$))\n            .subscribe((e: OverlayCancelableEventArgs) => {\n                const eventArgs: CancelableEventArgs = { cancel: false };\n                this.onClosing.emit(eventArgs);\n                e.cancel = eventArgs.cancel;\n\n                //  in case event is not canceled this will close the toggle and we need to unsubscribe.\n                //  Otherwise if for some reason, e.g. close on outside click, close() gets called before\n                //  onClosed was fired we will end with calling onClosing more than once\n                if (!e.cancel) {\n                    this.clearSubscription(this._overlayClosingSub);\n                }\n            });\n        this._overlayClosedSub = this.overlayService.onClosed\n            .pipe(...this._overlaySubFilter, takeUntil(this.destroy$))\n            .subscribe(this.overlayClosed);\n    }\n\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    public close() {\n        this.overlayService.hide(this._overlayId);\n    }\n\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        this.collapsed ? this.open(overlaySettings) : this.close();\n    }\n\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    public reposition() {\n        this.overlayService.reposition(this._overlayId);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navigationService && this.id) {\n            this.navigationService.add(this.id, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navigationService && this.id) {\n            this.navigationService.remove(this.id);\n        }\n        if (!this.collapsed && this._overlayId) {\n            this.overlayService.hide(this._overlayId);\n        }\n        this.unsubscribe();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private overlayClosed = () => {\n        this._collapsed = true;\n        this.cdr.detectChanges();\n        delete this._overlayId;\n        this.onClosed.emit();\n        this.unsubscribe();\n    }\n\n    private unsubscribe() {\n        this.clearSubscription(this._overlayOpenedSub);\n        this.clearSubscription(this._overlayClosingSub);\n        this.clearSubscription(this._overlayClosedSub);\n    }\n\n    private clearSubscription(subscription: Subscription) {\n        if (subscription && !subscription.closed) {\n            subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    exportAs: 'toggle-action',\n    selector: '[igxToggleAction]'\n})\nexport class IgxToggleActionDirective implements OnInit {\n    protected _overlayDefaults: OverlaySettings;\n\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    private _closeOnOutsideClick: boolean;\n    /**\n     * DEPRECATED. Determines whether the toggle should close when you click outside.\n     *\n     * ```typescript\n     * // get\n     * let closesOnOutsideClick = this.toggle.closeOnOutsideClick;\n     * ```\n     */\n    public get closeOnOutsideClick(): boolean {\n        return this._closeOnOutsideClick;\n    }\n    /**\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [closeOnOutsideClick]=\"'true'\"></div>\n     * ```\n     */\n    @Input()\n    public set closeOnOutsideClick(v: boolean) {\n        console.warn(`igxToggleAction 'closeOnOutsideClick' input is deprecated. Use 'overlaySettings' input object instead.`);\n        this._closeOnOutsideClick = v;\n    }\n\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    @Input('igxToggleOutlet')\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input('igxToggleAction')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this.navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    protected _target: IToggleView | string;\n\n    constructor(private element: ElementRef, @Optional() private navigationService: IgxNavigationService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._overlayDefaults = {\n            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            closeOnOutsideClick: true,\n            modal: false\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this.closeOnOutsideClick !== undefined) {\n            this._overlayDefaults.closeOnOutsideClick = this.closeOnOutsideClick;\n        }\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n        if (this.overlaySettings && this.overlaySettings.positionStrategy && !this.overlaySettings.positionStrategy.settings.target) {\n            this.overlaySettings.positionStrategy.settings.target = this.element.nativeElement;\n        }\n        this.target.toggle(Object.assign({}, this._overlayDefaults, this.overlaySettings));\n    }\n}\n\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\n@Directive({\n    exportAs: 'overlay-outlet',\n    selector: '[igxOverlayOutlet]'\n})\nexport class IgxOverlayOutletDirective {\n    constructor(public element: ElementRef) { }\n\n    /** @hidden */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n}\n\n@NgModule({\n    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxToggleModule { }\n","import {\n    Directive, ElementRef, HostListener, Input, NgModule, Renderer2, ChangeDetectorRef, OnInit,\n    Output, EventEmitter, Optional, HostBinding, OnDestroy\n} from '@angular/core';\nimport { useAnimation } from '@angular/animations';\nimport { scaleInCenter } from '../../animations/scale/index';\nimport { fadeOut } from '../../animations/fade/index';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { HorizontalAlignment, AutoPositionStrategy, PositionSettings } from '../../services';\nimport { CommonModule } from '@angular/common';\nimport { IgxNavigationService } from '../../core/navigation';\nimport { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';\n\nexport interface ITooltipShowEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\nexport interface ITooltipHideEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\n\n/**\n * **Ignite UI for Angular Tooltip Target** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.\n * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the\n * target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltipTarget',\n    selector: '[igxTooltipTarget]'\n})\nexport class IgxTooltipTargetDirective extends IgxToggleActionDirective implements OnInit {\n    /**\n     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipShowDelay = this.tooltipTarget.showDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" showDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('showDelay')\n    public showDelay = 500;\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipHideDelay = this.tooltipTarget.hideDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" hideDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('hideDelay')\n    public hideDelay = 500;\n\n    /**\n     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)\n     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,\n     * the developer will still be able to show/hide the tooltip through the API.\n     *\n     * ```typescript\n     * // get\n     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" [tooltipDisabled]=\"true\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('tooltipDisabled')\n    public tooltipDisabled = false;\n\n    /**\n     * @hidden\n     */\n    @Input('igxTooltipTarget')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this._navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    /**\n     * Gets the respective native element of the directive.\n     *\n     * ```typescript\n     * let tooltipTargetElement = this.tooltipTarget.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Indicates if the tooltip that is is associated with this target is currently hidden.\n     *\n     * ```typescript\n     * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;\n     * ```\n     */\n    public get tooltipHidden(): boolean {\n        return !this.target || this.target.collapsed;\n    }\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts showing.\n     * This event is fired before the start of the countdown to showing the tooltip.\n     *\n     * ```typescript\n     * tooltipShowing(args: ITooltipShowEventArgs) {\n     *    alert(\"Tooltip started showing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipShow = new EventEmitter<ITooltipShowEventArgs>();\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts hiding.\n     * This event is fired before the start of the countdown to hiding the tooltip.\n     *\n     * ```typescript\n     * tooltipHiding(args: ITooltipHideEventArgs) {\n     *    alert(\"Tooltip started hiding!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipHide = new EventEmitter<ITooltipHideEventArgs>();\n\n    constructor(private _element: ElementRef,\n        @Optional() private _navigationService: IgxNavigationService) {\n        super(_element, _navigationService);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        const positionSettings: PositionSettings = {\n            target: this.nativeElement,\n            horizontalDirection: HorizontalAlignment.Center,\n            horizontalStartPoint: HorizontalAlignment.Center,\n            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),\n            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })\n        };\n\n        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);\n        this._overlayDefaults.closeOnOutsideClick = false;\n    }\n\n    private checkOutletAndOutsideClick() {\n        if (this.closeOnOutsideClick !== undefined) {\n            this._overlayDefaults.closeOnOutsideClick = this.closeOnOutsideClick;\n        }\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n    }\n\n    private get mergedOverlaySettings() {\n        return Object.assign({}, this._overlayDefaults, this.overlaySettings);\n    }\n\n    // Return true if the execution in onMouseEnter should be terminated after this method\n    private preMouseEnterCheck() {\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n        }\n\n        // If Tooltip is opened or about to be hidden\n        if (!this.target.collapsed || this.target.toBeHidden) {\n            clearTimeout(this.target.timeoutId);\n\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return true;\n            } else {\n                this.target.close();\n                this.target.toBeHidden = false;\n            }\n        }\n\n        return false;\n    }\n\n    // Return true if the execution in onMouseLeave should be terminated after this method\n    private preMouseLeaveCheck(): boolean {\n        clearTimeout(this.target.timeoutId);\n\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n            this.target.toBeHidden = false;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.close();\n        this.target.toBeHidden = false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        return;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseEnterCheck();\n        if (shouldReturn) {\n            return;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseLeaveCheck();\n        if (shouldReturn || this.target.collapsed) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('touchstart', ['$event'])\n    public onTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        event.preventDefault();\n        this.showTooltip();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:touchstart', ['$event'])\n    public onDocumentTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        if (this.nativeElement !== event.target &&\n            !this.nativeElement.contains(event.target)\n        ) {\n            this.hideTooltip();\n        }\n    }\n\n    /**\n     * Shows the tooltip by respecting the 'showDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.showTooltip();\n     * ```\n     */\n    public showTooltip() {\n        clearTimeout(this.target.timeoutId);\n\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            } else {\n                this.target.close();\n                this.target.toBeHidden = false;\n            }\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * Hides the tooltip by respecting the 'hideDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.hideTooltip();\n     * ```\n     */\n    public hideTooltip() {\n        if (this.target.collapsed && this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n        }\n\n        if (this.target.collapsed || this.target.toBeHidden) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n}\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Tooltip** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\n * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\n * respective target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltip',\n    selector: '[igxTooltip]'\n})\nexport class IgxTooltipDirective extends IgxToggleDirective {\n    /**\n     * @hidden\n     */\n    public timeoutId;\n\n    /**\n     * @hidden\n     */\n    public toBeHidden = false;\n\n    /**\n     * @hidden\n     */\n    public toBeShown = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--desktop')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * Gets/sets any tooltip related data.\n     * The 'context' can be used for storing any information that is necessary\n     * to access when working with the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipContext = this.tooltip.context;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.tooltip.context = \"Tooltip's context\";\n     * ```\n     */\n    @Input('context')\n    public context;\n\n    /**\n     * Identifier for the tooltip.\n     * If this is property is not explicitly set, it will be automatically generated.\n     *\n     * ```typescript\n     * let tooltipId = this.tooltip.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tooltip-${NEXT_ID++}`;\n\n    /**\n     * Get the role attribute of the tooltip.\n     *\n     * ```typescript\n     * let tooltipRole = this.tooltip.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'tooltip';\n    }\n}\n\n@NgModule({\n    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    imports: [CommonModule],\n    providers: [IgxOverlayService]\n})\nexport class IgxTooltipModule { }\n\n","/**\n * Provides base filtering operations\n * Implementations should be Singleton\n *\n * @export\n */\nexport class IgxFilteringOperand {\n    public operations: IFilteringOperation[];\n\n    public constructor() {\n        this.operations = [{\n            name: 'null',\n            isUnary: true,\n            iconName: 'is_null',\n            logic: (target: any) => {\n                return target === null;\n            }\n        }, {\n            name: 'notNull',\n            isUnary: true,\n            iconName: 'is_not_null',\n            logic: (target: any) => {\n                return target !== null;\n            }\n        }];\n    }\n\n    public conditionList(): string[] {\n        return this.operations.map((element) => element.name);\n    }\n\n    public condition(name: string): IFilteringOperation {\n        return this.operations.find((element) => element.name === name);\n    }\n\n    public append(operation: IFilteringOperation) {\n        this.operations.push(operation);\n    }\n}\n\n/**\n * Provides filtering operations for booleans\n *\n * @export\n */\nexport class IgxBooleanFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxBooleanFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'all',\n            isUnary: true,\n            iconName: 'all',\n            logic: (target: boolean) => {\n                return true;\n            }\n        }, {\n            name: 'true',\n            isUnary: true,\n            iconName: 'is_true',\n            logic: (target: boolean) => {\n                return !!(target && target !== null && target !== undefined);\n            }\n        }, {\n            name: 'false',\n            isUnary: true,\n            iconName: 'is_false',\n            logic: (target: boolean) => {\n                return !target && target !== null && target !== undefined;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: boolean) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: boolean) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxBooleanFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n}\n\n/**\n * Provides filtering operations for Dates\n *\n * @export\n */\nexport class IgxDateFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxDateFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year === searchp.year &&\n                    targetp.month === searchp.month &&\n                    targetp.day === searchp.day;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return true;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year !== searchp.year ||\n                    targetp.month !== searchp.month ||\n                    targetp.day !== searchp.day;\n            }\n        }, {\n            name: 'before',\n            isUnary: false,\n            iconName: 'is_before',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target < searchVal;\n            }\n        }, {\n            name: 'after',\n            isUnary: false,\n            iconName: 'is_after',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target > searchVal;\n            }\n        }, {\n            name: 'today',\n            isUnary: true,\n            iconName: 'today',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');\n                return d.year === now.year &&\n                    d.month === now.month &&\n                    d.day === now.day;\n            }\n        }, {\n            name: 'yesterday',\n            isUnary: true,\n            iconName: 'yesterday',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const td = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\n                const yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');\n                return td.year === yesterday.year &&\n                    td.month === yesterday.month &&\n                    td.day === yesterday.day;\n            }\n        }, {\n            name: 'thisMonth',\n            isUnary: true,\n            iconName: 'this_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'lastMonth',\n            isUnary: true,\n            iconName: 'last_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (!now.month) {\n                    now.month = 11;\n                    now.year -= 1;\n                } else {\n                    now.month--;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'nextMonth',\n            isUnary: true,\n            iconName: 'next_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (now.month === 11) {\n                    now.month = 0;\n                    now.year += 1;\n                } else {\n                    now.month++;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'thisYear',\n            isUnary: true,\n            iconName: 'this_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year;\n            }\n        }, {\n            name: 'lastYear',\n            isUnary: true,\n            iconName: 'last_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year - 1;\n            }\n        }, {\n            name: 'nextYear',\n            isUnary: true,\n            iconName: 'next_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year + 1;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: Date) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: Date) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxDateFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * Splits a Date object into parts\n     *\n     * @memberof IgxDateFilteringOperand\n     */\n    public static getDateParts(date: Date, dateFormat?: string): IDateParts {\n        const res = {\n            day: null,\n            hours: null,\n            milliseconds: null,\n            minutes: null,\n            month: null,\n            seconds: null,\n            year: null\n        };\n        if (!date || !dateFormat) {\n            return res;\n        }\n        if (dateFormat.indexOf('y') >= 0) {\n            res.year = date.getFullYear();\n        }\n        if (dateFormat.indexOf('M') >= 0) {\n            res.month = date.getMonth();\n        }\n        if (dateFormat.indexOf('d') >= 0) {\n            res.day = date.getDate();\n        }\n        if (dateFormat.indexOf('h') >= 0) {\n            res.hours = date.getHours();\n        }\n        if (dateFormat.indexOf('m') >= 0) {\n            res.minutes = date.getMinutes();\n        }\n        if (dateFormat.indexOf('s') >= 0) {\n            res.seconds = date.getSeconds();\n        }\n        if (dateFormat.indexOf('f') >= 0) {\n            res.milliseconds = date.getMilliseconds();\n        }\n        return res;\n    }\n\n    private validateInputData(target: Date) {\n        if (!(target instanceof Date)) {\n            throw new Error('Could not perform filtering on \\'date\\' column because the datasource object type is not \\'Date\\'.');\n        }\n    }\n}\n\n/**\n * Provides filtering operations for numbers\n *\n * @export\n */\nexport class IgxNumberFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxNumberFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: number, searchVal: number) => {\n                return target === searchVal;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: number, searchVal: number) => {\n                return target !== searchVal;\n            }\n        }, {\n            name: 'greaterThan',\n            isUnary: false,\n            iconName: 'greater_than',\n            logic: (target: number, searchVal: number) => {\n                return target > searchVal;\n            }\n        }, {\n            name: 'lessThan',\n            isUnary: false,\n            iconName: 'less_than',\n            logic: (target: number, searchVal: number) => {\n                return target < searchVal;\n            }\n        }, {\n            name: 'greaterThanOrEqualTo',\n            isUnary: false,\n            iconName: 'greater_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target >= searchVal;\n            }\n        }, {\n            name: 'lessThanOrEqualTo',\n            isUnary: false,\n            iconName: 'less_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target <= searchVal;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: number) => {\n                return target === null || target === undefined || isNaN(target);\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: number) => {\n                return target !== null && target !== undefined && !isNaN(target);\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxNumberFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n}\n\n/**\n * Provides filtering operations for strings\n *\n * @export\n */\nexport class IgxStringFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxStringFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'contains',\n            isUnary: false,\n            iconName: 'contains',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) !== -1;\n            }\n        }, {\n            name: 'doesNotContain',\n            isUnary: false,\n            iconName: 'does_not_contain',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) === -1;\n            }\n        }, {\n            name: 'startsWith',\n            isUnary: false,\n            iconName: 'starts_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.startsWith(search);\n            }\n        }, {\n            name: 'endsWith',\n            isUnary: false,\n            iconName: 'ends_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.endsWith(search);\n            }\n        }, {\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target === search;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target !== search;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: string) => {\n                return target === null || target === undefined || target.length === 0;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: string) => {\n                return target !== null && target !== undefined && target.length > 0;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxStringFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * Applies case sensitivity on strings if provided\n     *\n     * @memberof IgxStringFilteringOperand\n     */\n    public static applyIgnoreCase(a: string, ignoreCase: boolean): string {\n        a = a || '';\n        // bulletproof\n        return ignoreCase ? ('' + a).toLowerCase() : a;\n    }\n}\n\n/**\n * Interface describing filtering operations\n *\n * @export\n */\nexport interface IFilteringOperation {\n    name: string;\n    isUnary: boolean;\n    iconName: string;\n    logic: (value: any, searchVal?: any, ignoreCase?: boolean) => boolean;\n}\n\n/**\n * Interface describing Date object in parts\n *\n * @export\n */\nexport interface IDateParts {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n}\n","import { ISortingExpression } from './sorting-expression.interface';\n\nexport class GroupedRecords extends Array<any> {}\n\nexport interface IGroupByRecord {\n    expression: ISortingExpression;\n    level: number;\n    records: GroupedRecords;\n    value: any;\n    groupParent: IGroupByRecord;\n    groups?: IGroupByRecord[];\n }\n","import { SortingStrategy } from './sorting-strategy';\n\n/**\n * @hidden\n */\nexport class StableSortingStrategy extends SortingStrategy {\n    protected compareObjects(obj1: any, obj2: any): number {\n        const res = super.compareObjects.apply(this, arguments);\n        const replacerFn = (key, val) => {\n            if (val === undefined) {\n                return null;\n            }\n            return val;\n        };\n        if (!res) {\n            return JSON.stringify(obj1, replacerFn)\n                        .localeCompare(JSON.stringify(obj2, replacerFn));\n        }\n        return res;\n    }\n}\n","import { IDataState } from './data-state.interface';\nimport { DataUtil } from './data-util';\nimport { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { IFilteringState } from './filtering-state.interface';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\nimport { IPagingState, PagingError } from './paging-state.interface';\nimport { IRecordInfo } from './record-info.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport { ISortingState } from './sorting-state.interface';\nimport { ISortingStrategy, SortingStrategy } from './sorting-strategy';\n\n/**\n * @hidden\n */\nexport enum DataAccess {\n    OriginalData,\n    TransformedData\n}\n\n/**\n * @hidden\n */\nexport class DataContainer {\n    public data: any[];\n    /**\n     * processed data\n     */\n    public transformedData: any[];\n    public state: IDataState = {\n    };\n    constructor(data: any[] = []) {\n        this.data = data;\n        this.transformedData = data;\n    }\n    public process(state?: IDataState): DataContainer {\n        if (state) {\n            this.state = state;\n        }\n        this.transformedData = this.data;\n        // apply data operations\n        this.transformedData = DataUtil.process(this.data, this.state);\n        return this;\n    }\n    // CRUD operations\n    // access data records\n    public getIndexOfRecord(record: object, dataAccess: DataAccess = DataAccess.OriginalData): number {\n        const data = this.accessData(dataAccess);\n        return data.indexOf(record);\n    }\n    public getRecordByIndex(index: number, dataAccess: DataAccess = DataAccess.OriginalData): object {\n        const data = this.accessData(dataAccess);\n        return data[index];\n    }\n    public getRecordInfoByKeyValue(fieldName: string,\n                                   value: any,\n                                   dataAccess: DataAccess = DataAccess.OriginalData): IRecordInfo {\n        const data = this.accessData(dataAccess);\n        const len = data.length;\n        const res: IRecordInfo = {index: -1, record: undefined};\n        let i;\n        for (i = 0; i < len; i++) {\n            if (data[i][fieldName] === value) {\n                res.index = i;\n                res.record = data[i];\n                break;\n            }\n        }\n        return res;\n    }\n    public addRecord(record: object, at?: number): void {\n        const data = this.accessData(DataAccess.OriginalData);\n        if (at === null || at === undefined) {\n            data.push(record);\n        } else {\n            data.splice(at, 0, record);\n        }\n    }\n    public deleteRecord(record: object): boolean {\n        const index: number = this.getIndexOfRecord(record, DataAccess.OriginalData);\n        return this.deleteRecordByIndex(index);\n    }\n    public deleteRecordByIndex(index: number): boolean {\n        const data = this.accessData(DataAccess.OriginalData);\n        return data.splice(index, 1).length === 1;\n    }\n    public updateRecordByIndex(index: number, newProperties: object): object {\n        const dataAccess: DataAccess = DataAccess.OriginalData;\n        const foundRec = this.getRecordByIndex(index, dataAccess);\n        if (!foundRec) {\n            return undefined;\n        }\n        return Object.assign(foundRec, newProperties);\n    }\n    protected accessData(dataAccess: DataAccess) {\n        let res;\n        switch (dataAccess) {\n            case DataAccess.OriginalData:\n            res = this.data;\n            break;\n            case DataAccess.TransformedData:\n            res = this.transformedData;\n            break;\n        }\n        return res;\n    }\n}\n","import { Injectable, SecurityContext, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * **Ignite UI for Angular Icon Service** -\n *\n * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.\n * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.\n *\n * Example:\n * ```typescript\n * this.iconService.registerFontSetAlias('material', 'material-icons');\n * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n * ```\n */\n\n@Injectable()\nexport class IgxIconService {\n    private _fontSet = 'material-icons';\n    private _fontSetAliases = new Map<string, string>();\n    private _svgContainer: HTMLElement;\n    private _cachedSvgIcons: Set<string> = new Set<string>();\n\n    constructor (private _sanitizer: DomSanitizer, private _httpClient: HttpClient, @Inject(DOCUMENT) private _document: any) { }\n\n    /**\n     *  Returns the default font set.\n     *```typescript\n     *   const defaultFontSet = this.iconService.defaultFontSet;\n     * ```\n     */\n    get defaultFontSet(): string {\n        return this._fontSet;\n    }\n\n    /**\n     *  Sets the default font set.\n     *```typescript\n     *   this.iconService.defaultFontSet = 'svg-flags';\n     * ```\n     */\n    set defaultFontSet(className: string) {\n        this._fontSet = className;\n    }\n\n    /**\n     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.\n     *```typescript\n     *   this.iconService.registerFontSetAlias('material', 'material-icons');\n     * ```\n     */\n    public registerFontSetAlias(alias: string, className: string = alias): this {\n        this._fontSetAliases.set(alias, className);\n        return this;\n    }\n\n    /**\n     *  Returns the custom class, if any, associated to a given fontSet.\n     *```typescript\n     *   const fontSetClass = this.iconService.fontSetClassName('material');\n     * ```\n     */\n    public fontSetClassName(alias: string): string {\n        return this._fontSetAliases.get(alias) || alias;\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is an url.\n     *```typescript\n     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n     * ```\n     */\n    public addSvgIcon(iconName: string, url: string, fontSet: string = '') {\n        if (iconName && url) {\n            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n            if (!safeUrl) {\n                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"${url}\".`);\n            }\n\n            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!sanitizedUrl) {\n                throw new Error(`The URL provided was not trusted as a resource URL: \"${url}\".`);\n            }\n\n            this.fetchSvg(iconName, url, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is its text.\n     *```typescript\n     *   this.iconService.addSvgIcon('simple', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\">\n     *   <path d=\"M74 74h54v54H74\" /></svg>', 'svg-flags');\n     * ```\n     */\n    public addSvgIconFromText(iconName: string, iconText: string, fontSet: string = '') {\n        if (iconName && iconText) {\n            this.cacheSvgIcon(iconName, iconText, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Returns wheather a given SVG image is present in the cache.\n     *```typescript\n     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');\n     * ```\n     */\n    public isSvgIconCached(iconName: string, fontSet: string = ''): boolean {\n        const iconKey = this.getSvgIconKey(iconName, fontSet);\n        return this._cachedSvgIcons.has(iconKey);\n    }\n\n    /**\n     *  Returns the key of a cached SVG image.\n     *```typescript\n     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');\n     * ```\n     */\n    public getSvgIconKey(iconName: string, fontSet: string = '') {\n        return fontSet + '_' + iconName;\n    }\n\n    /**\n     * @hidden\n     */\n    private fetchSvg(iconName: string, url: string, fontSet: string = '') {\n        const request = this._httpClient.get(url, { responseType: 'text' });\n        const subscription = request.subscribe((value: string) => {\n            this.cacheSvgIcon(iconName, value, fontSet);\n        }, (error) => {\n            subscription.unsubscribe();\n            throw new Error(`Could not fetch SVG from url: ${url}; error: ${error.message}`);\n        }, () => {\n            subscription.unsubscribe();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    private cacheSvgIcon(iconName: string, value: string, fontSet: string = '') {\n        if (iconName && value) {\n            this.ensureSvgContainerCreated();\n\n            const div = this._document.createElement('DIV');\n            div.innerHTML = value;\n            const svg = div.querySelector('svg') as SVGElement;\n\n            if (svg) {\n                const iconKey = this.getSvgIconKey(iconName, fontSet);\n\n                svg.setAttribute('id', iconKey);\n                svg.setAttribute('fit', '');\n                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n                if (this._cachedSvgIcons.has(iconKey)) {\n                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);\n                    this._svgContainer.removeChild(oldChild);\n                }\n\n                this._svgContainer.appendChild(svg);\n                this._cachedSvgIcons.add(iconKey);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private ensureSvgContainerCreated() {\n        if (!this._svgContainer) {\n            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');\n            if (!this._svgContainer) {\n                this._svgContainer = this._document.createElement('DIV');\n                this._svgContainer.classList.add('igx-svg-container');\n                this._document.documentElement.appendChild(this._svgContainer);\n            }\n        }\n    }\n}\n","\n/**\n * @hidden\n */\nexport function DeprecateClass(message: string): ClassDecorator {\n    return (constructor: any) => {\n        console.warn(constructor.name + ': ' + message);\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateMethod(message: string): MethodDecorator {\n    return (constructor: any) => {\n        console.warn(constructor.constructor.name + ': ' + message);\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateProperty(message: string): PropertyDecorator {\n    return (constructor: any) => {\n        console.warn(constructor.constructor.name + ': ' + message);\n    };\n}\n","import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { IgxIconService } from './icon.service';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n/**\n * **Ignite UI for Angular Icon** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/icon.html)\n *\n * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons\n * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearence\n * of the icon.\n *\n * Example:\n * ```html\n * <igx-icon color=\"#00ff00\" isActive=\"true\">home</igx-icon>\n * ```\n */\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-icon',\n    template: `<ng-template #noLigature></ng-template>\n\n<ng-template #explicitLigature>\n    <ng-content></ng-content>\n</ng-template>\n\n<!-- TODO: remove this after glyphName property is deprecated. -->\n<ng-template #implicitLigature>\n    {{getIconName}}\n</ng-template>\n\n<ng-template #svgImage>\n    <svg>\n        <use [attr.href]=\"getSvgKey\"></use>\n    </svg>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n`\n})\n\nexport class IgxIconComponent implements OnInit {\n    @ViewChild('noLigature', { read: TemplateRef })\n    private noLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('explicitLigature', { read: TemplateRef })\n    private explicitLigature: TemplateRef<HTMLElement>;\n\n    // TODO: remove this after glyphName property is deprecated.\n    @ViewChild('implicitLigature', { read: TemplateRef })\n    private implicitLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('svgImage', { read: TemplateRef })\n    private svgImage: TemplateRef<HTMLElement>;\n\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.cssClass = \"\";\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('class.igx-icon')\n    public cssClass = 'igx-icon';\n\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.ariaHidden = false;\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('attr.aria-hidden')\n    public ariaHidden = true;\n\n    /**\n    *  An @Input property that sets the value of the `id` attribute.\n    *```html\n    *<igx-icon id=\"igx-icon-1\" fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-icon-${NEXT_ID++}`;\n\n    /**\n    *  An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n    *```html\n    *<igx-icon fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @Input('fontSet')\n    public font: string;\n\n    /**\n    *  An @Input property that allows you to disable the `active` property. By default it's applied.\n    *```html\n    *<igx-icon [isActive]=\"false\" fontSet=\"material\" color=\"blue\">settings</igx-icon>\n    *```\n    */\n    @Input('isActive')\n    public active = true;\n\n    /**\n    *  An @Input property that allows you to change the `iconColor` of the icon.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">settings</igx-icon>\n    *```\n    */\n    @Input('color')\n    public iconColor: string;\n\n    /**\n    *  An @Input property that allows you to set the `iconName` of the icon.\n    *  The `iconName` can be set using the `name` property.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">question_answer</igx-icon>\n    *```\n    */\n    @Input('name')\n    public iconName: string;\n\n    /**\n    *    An @Input property that allows you to change the `glyphName` of the icon.\n    *    The `glyphName` can be set using `iconName`.\n    *    You can provide either ligature `name` or glyph `iconName`, but not both at the same time.\n    *```html\n    *<igx-icon iconName=\"question_answer\" color=\"blue\" [isActive]=\"true\" fontSet=\"material\"></igx-icon>\n    *```\n    */\n    @DeprecateProperty(`'iconName' property is deprecated. To set the icon name for 'material' icons place the name of the icon between ` +\n        `the opening and closing tags. For 'Font Awesome' and SVG icons use 'name' property.`)\n    @Input('iconName')\n    public glyphName: string;\n\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    public el: ElementRef;\n\n    constructor(private _el: ElementRef, private iconService: IgxIconService) {\n        this.el = _el;\n        this.font = this.iconService.defaultFontSet;\n        this.iconService.registerFontSetAlias('material', 'material-icons');\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.updateIconClass();\n    }\n\n    /**\n     *  An accessor that returns the value of the font property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string {\n        return this.font;\n    }\n\n    /**\n     *  An accessor that returns the value of the active property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean {\n        return this.active;\n    }\n\n    /**\n     *  An accessor that returns inactive property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-icon--inactive')\n    get getInactive(): boolean {\n        return !this.active;\n    }\n\n    /**\n     *  An accessor that returns the opposite value of the `iconColor` property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    @HostBinding('style.color')\n    get getIconColor(): string {\n        return this.iconColor;\n    }\n\n    /**\n     *  An accessor that returns the value of the iconName property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string {\n        return this.iconName;\n    }\n\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string {\n        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);\n        }\n\n        return null;\n    }\n\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement> {\n        if (this.iconName) {\n            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n                return this.svgImage;\n            }\n\n            // TODO: remove this after glyphName property is deprecated.\n            const materialFS = 'material-icons';\n            const materialFSAlias = 'material';\n            if (this.font === materialFS || this.font === materialFSAlias ||\n                (!this.font && (this.iconService.defaultFontSet === materialFS || this.iconService.defaultFontSet === materialFSAlias))) {\n                return this.implicitLigature;\n            }\n\n            return this.noLigature;\n        }\n\n        return this.explicitLigature;\n    }\n\n    /**\n     * @hidden\n     */\n    private updateIconClass() {\n        const className = this.iconService.fontSetClassName(this.font);\n        this.el.nativeElement.classList.add(className);\n\n        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            this.el.nativeElement.classList.add(this.iconName);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { IgxIconComponent } from './icon.component';\nimport { IgxIconService } from './icon.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n    declarations: [IgxIconComponent],\n    exports: [IgxIconComponent],\n    imports: [CommonModule, HttpClientModule],\n    providers: [IgxIconService]\n})\nexport class IgxIconModule {\n    public static forRoot() {\n        return {\n            ngModule: IgxIconModule,\n            providers: [IgxIconService]\n        };\n    }\n}\n\nexport * from './icon.component';\nexport * from './icon.service';\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Size {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large'\n}\n/**\n * **Ignite UI for Angular Avatar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)\n *\n * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an\n * image, someone's initials or a material icon from the google material icon set.\n *\n * Example:\n * ```html\n * <igx-avatar initials=\"MS\" roundShape=\"true\" size=\"large\">\n * </igx-avatar>\n * ```\n */\n@Component({\n    selector: 'igx-avatar',\n    template: `<ng-template #imageTemplate>\n    <div #image [style.backgroundImage]=\"getSrcUrl()\" class=\"igx-avatar__image\" [style.backgroundColor]=\"bgColor\" [attr.aria-roledescription]=\"roleDescription\"\n    ></div>\n</ng-template>\n\n<ng-template #initialsTemplate>\n    <div class=\"igx-avatar__initials\" [style.backgroundColor]=\"bgColor\" [style.color]=\"color\" [attr.aria-roledescription]=\"roleDescription\">\n        <span>{{initials.substring(0, 2)}}</span>\n    </div>\n</ng-template>\n\n<ng-template #iconTemplate>\n    <span class=\"igx-avatar__icon\" [style.backgroundColor]=\"bgColor\" [style.color]=\"color\" [attr.aria-roledescription]=\"roleDescription\">\n        <igx-icon>{{icon}}</igx-icon>\n    </span>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n<ng-content></ng-content>\n`\n})\nexport class IgxAvatarComponent implements OnInit, AfterViewInit {\n\n\n    /**\n     * This is a reference to the avatar `image` element in the DOM.\n     *\n     * ```typescript\n     *  let image =  this.avatar.image;\n     * ```\n     * @memberof IgxAvatarComponent\n     */\n    @ViewChild('image')\n    public image: ElementRef;\n\n\n    /**\n     *@hidden\n     */\n    @ViewChild('imageTemplate', { read: TemplateRef })\n    protected imageTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('initialsTemplate', { read: TemplateRef })\n    protected initialsTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    @ViewChild('iconTemplate', { read: TemplateRef })\n    protected iconTemplate: TemplateRef<any>;\n    /**\n     * Returns the `aria-label` of the avatar.\n     *\n     * ```typescript\n     * let ariaLabel = this.avatar.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'avatar';\n    /**\n     * Returns the `role` attribute of the avatar.\n     *\n     * ```typescript\n     * let avatarRole = this.avatar.role;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'img';\n    /**\n     * Returns the class of the avatar.\n     *\n     * ```typescript\n     * let avatarCLass =  this.avatar.cssClass;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar')\n    public cssClass = 'igx-avatar';\n    /**\n     * Returns the type of the avatar.\n     * The avatar can be: `\"initials type avatar\"`, `\"icon type avatar\"` or `\"image type avatar\"`.\n     *\n     * ```typescript\n     * let avatarDescription = this.avatar.roleDescription;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public roleDescription: string;\n\n    /**\n     * @hidden\n     */\n    private _size: string | Size = 'small';\n\n    /**\n     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `\"igx-avatar-0\"`.\n     *\n     * ```html\n     * <igx-avatar id=\"my-first-avatar\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-avatar-${NEXT_ID++}`;\n    /**\n     * Sets a round shape to the avatar if `roundShape` is `\"true\"`.\n     * By default the shape of the avatar is a square.\n     *\n     * ```html\n     * <igx-avatar roundShape = \"true\" ></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar--rounded')\n    @Input()\n    public roundShape = false;\n\n    /**\n     * Sets the avatar's `initials`/`icon` color.\n     *\n     *```html\n     *<igx-avatar color=\"blue\"></igx-avatar>\n     *```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public color: string;\n\n    /**\n     * Sets the background color of the avatar.\n     *\n     * ```html\n     * <igx-avatar bgColor=\"yellow\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public bgColor: string;\n\n    /**\n     * Sets `initials` to the avatar.\n     *\n     * ```html\n     * <igx-avatar initials=\"MN\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public initials: string;\n\n    /**\n     * Sets an `icon` to the avatar. All icons from the material icon set are supported.\n     *\n     * ```html\n     * <igx-avatar icon=\"phone\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets the `image` source of the avatar.\n     *\n     * ```html\n     * <igx-avatar src=\"images/picture.jpg\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public src: string;\n\n    /**\n     * Returns the `size` of the avatar.\n     *\n     * ```typescript\n     *let avatarSize =  this.avatar.size;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public get size(): string | Size {\n        return this._size;\n    }\n\n    /**\n     * Sets the `size`  of the avatar.\n     * By default the `size` is `\"small\"`. It can be set to `\"medium\"` or `\"large\"`.\n     *\n     * ```\n     * <igx-avatar size=\"large\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public set size(value: string | Size) {\n        switch (value) {\n            case 'small':\n            case 'medium':\n            case 'large':\n                this._size = value;\n                break;\n            default:\n                this._size = 'small';\n        }\n    }\n    /**\n     * Returns the template of the avatar.\n     *\n     * ```typescript\n     * let template = this.avatar.template;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get template() {\n        if (this.src) {\n            return this.imageTemplate;\n        }\n\n        if (this.initials) {\n            return this.initialsTemplate;\n        }\n\n        return this.iconTemplate;\n\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.roleDescription = this.getRole();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        this.elementRef.nativeElement.classList.add(`igx-avatar--${this._size}`);\n    }\n    /**\n     * @hidden\n     */\n    private getRole() {\n        if (this.initials) {\n            return 'initials type avatar';\n        } else if (this.src) {\n            return 'image type avatar';\n        } else {\n            return 'icon type avatar';\n        }\n    }\n\n    /**\n     * Returns the url of the `image`.\n     *\n     * ```typescript\n     * let imageSourceUrl = this.avatar.getSrcUrl();\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public getSrcUrl() {\n        return `url(${this.src})`;\n    }\n}\n/**\n * The `IgxAvatarModule` provides the {@link IgxAvatarComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxAvatarComponent],\n    exports: [IgxAvatarComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxAvatarModule { }\n","import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Type {\n    DEFAULT = 'default',\n    INFO = 'info',\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    ERROR = 'error'\n}\n/**\n * **Ignite UI for Angular Badge** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/badge.html)\n *\n * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the\n * application when visual notification is needed. They are usually designed as icons with a predefined\n * style to communicate information, success, warnings, or errors.\n *\n * Example:\n * ```html\n * <igx-avatar icon=\"person\" roundShape=\"true\" size=\"small\">\n *   <igx-badge icon=\"check\" type=\"success\" class=\"badge-style\">\n *   </igx-badge>\n * </igx-avatar>\n * ```\n * The `badge-style` class is used to position the badge:\n * ```css\n * .badge-style {\n *   position: absolute;\n *   bottom: -6px;\n *   right:-50px;\n * }\n * ```\n */\n@Component({\n    selector: 'igx-badge',\n    template: `<div class=\"igx-badge__circle\" [ngClass]=\"setClasses()\" [attr.aria-roledescription]=\"roleDescription\">\n    <span *ngIf=\"!icon\" class=\"igx-badge__circle-value\">{{value}}</span>\n    <igx-icon *ngIf=\"icon\" fontSet=\"material\">{{icon}}</igx-icon>\n</div>\n`\n})\nexport class IgxBadgeComponent {\n\n    /**\n    * An @Input property that sets the value of the `id` attribute.\n    * ```html\n    *<igx-badge id=\"igx-badge-2\" icon=\"check\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-badge-${NEXT_ID++}`;\n\n    /**\n    * An @Input property controlling the type of the badge.\n    * Allowed values are `default`, `info`, `success`, `warning`, `error`.\n    * Providing an invalid value won't display a badge.\n    * ```html\n    *<igx-badge type=\"success\" icon=\"check\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public type: string | Type = 'default';\n\n    /**\n    * An @Input property that sets the value to be displayed inside the badge.\n    * If an `icon` property is already set the `icon` will be displayed.\n    * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.\n    * ```html\n    *<igx-badge value=\"11\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public value = '';\n\n    /**\n     * Set an icon for the badge from the material icons set.\n     * Has priority over the `value` property.\n     * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n     * Providing an invalid value won't display anything.\n     * ```html\n     *<igx-badge icon=\"check\" type=\"success\" class=\"badge-style\" value=\"11\"></igx-badge>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * This allows you to set value to role attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"badge-status\";\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'status';\n\n    /**\n     * This allows you to disable igx-badge class. The default it's applied.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.cssClass = false;\n     * ```\n     */\n    @HostBinding('class.igx-badge')\n    public cssClass = 'igx-badge';\n\n    /**\n     * This allows you to set value to aria-label attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"icon-badge\";\n     * ```\n     */\n    @HostBinding('attr.aria-label')\n    public label = 'badge';\n\n    /**\n     * @hidden\n     * Defines a human-readable, accessor, author-localized description for the `type` and the `icon` or `value` of the element.\n     */\n    get roleDescription() {\n        let message;\n\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (this.icon) {\n            message = this.type + ' type badge with icon type ' + this.icon;\n        } else if (this.value) {\n            message = this.type + ' badge type with value ' + this.value;\n        } else {\n            message = this.type + ' badge type without value';\n        }\n\n        return message;\n    }\n\n    /**\n     * @hidden\n     * Method which makes the name of the class more descriptive.\n     * This helps the styling of the badges.\n     */\n    public setClasses() {\n        let classes = {};\n\n        switch (Type[this.type.toUpperCase()]) {\n            case Type.DEFAULT:\n                classes = {\n                    [`${this.cssClass}__circle--default`]: true\n                };\n                break;\n            case Type.INFO:\n                classes = {\n                    [`${this.cssClass}__circle--info`]: true\n                };\n                break;\n            case Type.SUCCESS:\n                classes = {\n                    [`${this.cssClass}__circle--success`]: true\n                };\n                break;\n            case Type.WARNING:\n                classes = {\n                    [`${this.cssClass}__circle--warning`]: true\n                };\n                break;\n            case Type.ERROR:\n                classes = {\n                    [`${this.cssClass}__circle--error`]: true\n                };\n                break;\n        }\n\n        return classes;\n    }\n\n}\n\n/**\n * The IgxBadgeComponent provides the {@link IgxBadgeComponent} inside your application.\n */\n\n@NgModule({\n    declarations: [IgxBadgeComponent],\n    exports: [IgxBadgeComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxBadgeModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { takeUntil } from 'rxjs/operators';\n\nexport enum ButtonGroupAlignment { horizontal, vertical }\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Button Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)\n *\n * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports\n * single, multiple and toggle selection.\n *\n * Example:\n * ```html\n * <igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">\n * </igx-buttongroup>\n * ```\n * The `fontOptions` value shown above is defined as:\n * ```typescript\n * this.fontOptions = [\n *   { icon: 'format_bold', selected: false },\n *   { icon: 'format_italic', selected: false },\n *   { icon: 'format_underlined', selected: false }];\n * ```\n */\n@Component({\n    selector: 'igx-buttongroup',\n    template: `<div class=\"igx-button-group\" role=\"group\" [class.igx-button-group--vertical]=\"isVertical\">\n    <span *ngFor=\"let button of values; let i = 'index'\" type=\"button\" igxButton=\"flat\" [selected]=\"button.selected\"\n        [attr.data-togglable]=\"button.togglable\" [disabled]=\"disabled || button.disabled\" [igxButtonColor]=\"button.color\"\n        [igxButtonBackground]=\"button.bgcolor\" [igxLabel]=\"button.label\" [igxRipple]=\"button.ripple\">\n        <div class=\"igx-button-group__item-content {{ itemContentCssClass }}\">\n            <igx-icon *ngIf=\"button.icon\" fontSet=\"material\">{{button.icon}}</igx-icon>\n            <span *ngIf=\"button.label\">{{button.label}}</span>\n        </div>\n    </span>\n    <ng-content></ng-content>\n</div>\n`\n})\n\nexport class IgxButtonGroupComponent implements AfterViewInit, OnDestroy {\n    private _disabled = false;\n    protected buttonClickNotifier$ = new Subject<boolean>();\n    protected queryListNotifier$ = new Subject<boolean>();\n\n    @ViewChildren(IgxButtonDirective) private viewButtons: QueryList<IgxButtonDirective>;\n    @ContentChildren(IgxButtonDirective) private templateButtons: QueryList<IgxButtonDirective>;\n\n    /**\n     * A collection containing all buttons inside the button group.\n     */\n    public get buttons(): IgxButtonDirective[] {\n        return [...this.viewButtons.toArray(), ...this.templateButtons.toArray()];\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.\n     * ```html\n     *  <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-buttongroup-${NEXT_ID++}`;\n\n    /**\n     * Allows you to set a style using the `itemContentCssClass` input.\n     * The value should be the CSS class name that will be applied to the button group.\n     *```typescript\n     *public style1 = \"styleClass\";\n     * //..\n     *```\n     * ```html\n     *<igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     *```\n     */\n    @Input() set itemContentCssClass(value: string) {\n        this._itemContentCssClass = value || this._itemContentCssClass;\n    }\n\n    /**\n     * Returns the CSS class of the item content of the `IgxButtonGroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *   let buttonSelect = this.buttonG.itemContentCssClass;\n     *}\n     *```\n     */\n    get itemContentCssClass(): string {\n        return this._itemContentCssClass;\n    }\n\n    /**\n     * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public multiSelection = false;\n    /**\n     * An @Input property that allows setting the buttons in the button group.\n     * ```typescript\n     *  public ngOnInit() {\n     *      this.cities = [\n     *        new Button({\n     *          label: \"Sofia\"\n     *      }),\n     *        new Button({\n     *          label: \"London\"\n     *      }),\n     *        new Button({\n     *          label: \"New York\",\n     *          selected: true\n     *      }),\n     *        new Button({\n     *          label: \"Tokyo\"\n     *      })\n     *  ];\n     *  }\n     *  //..\n     * ```\n     * ```html\n     *  <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public values: any;\n    /**\n     * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.\n     * ```html\n     * <igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n    public set disabled(value: boolean) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this.viewButtons && this.templateButtons) {\n                this.buttons.forEach((b) => b.disabled = this._disabled);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectedIndexes: number[] = [];\n\n    /**\n     * Allows you to set the button group alignment.\n     * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.\n     * ```typescript\n     *public alignment = ButtonGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     *<igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() set alignment(value: ButtonGroupAlignment) {\n        this._isVertical = value === ButtonGroupAlignment.vertical;\n    }\n    /**\n     * Returns the alignment of the `igx-buttongroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let buttonAlignment = this.buttonG.alignment;\n     *}\n     *```\n     */\n    get alignment(): ButtonGroupAlignment {\n        return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;\n    }\n\n    /**\n     * An @Ouput property that emits an event when a button is selected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onSelect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * <igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have made a selection!\"></igx-toast>\n     *```\n     */\n    @Output() public onSelect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * An @Ouput property that emits an event when a button is deselected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onUnselect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * igx-buttongroup #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have deselected a button!\"></igx-toast>\n     *```\n     */\n    @Output() public onUnselect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * Returns true if the `igx-buttongroup` alignment is vertical.\n     * Note that in order for the accessor to work correctly the property should be set explicitly.\n     * ```html\n     * <igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">\n     * ```\n     * ```typescript\n     * //...\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let orientation = this.buttonG.isVertical;\n     *}\n     *```\n     */\n    public get isVertical(): boolean {\n        return this._isVertical;\n    }\n    private _isVertical: boolean;\n    private _itemContentCssClass: string;\n\n    constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2) {\n    }\n\n    /**\n     * Gets the selected button/buttons.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let selectedButton = this.buttonG.selectedButtons;\n     *}\n     *```\n     */\n    get selectedButtons(): IgxButtonDirective[] {\n        return this.buttons.filter((b, i) => {\n            return this.selectedIndexes.indexOf(i) !== -1;\n        });\n\n    }\n\n    /**\n     * Selects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.selectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     *```\n     */\n    public selectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.push(index);\n        button.selected = true;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');\n        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onSelect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = true;\n        }\n\n        // deselect other buttons if multiSelection is not enabled\n        if (!this.multiSelection && this.selectedIndexes.length > 1) {\n            this.buttons.forEach((b, i) => {\n                if (i !== index && this.selectedIndexes.indexOf(i) !== -1) {\n                    this.deselectButton(i);\n                }\n            });\n        }\n    }\n\n    /**\n     * Deselects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     * ```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.deselectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     * ```\n     */\n    public deselectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);\n        button.selected = false;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');\n        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onUnselect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        const initButtons = () => {\n            // Cancel any existing buttonClick subscriptions\n            this.buttonClickNotifier$.next();\n\n            this.selectedIndexes.splice(0, this.selectedIndexes.length);\n\n            // initial configuration\n            this.buttons.forEach((button, index) => {\n                const buttonElement = button.nativeElement;\n\n                if (this.disabled) {\n                    button.disabled = true;\n                }\n\n                if (!button.disabled && button.selected) {\n                    this.selectButton(index);\n                }\n\n                button.buttonClick.pipe(takeUntil(this.buttonClickNotifier$)).subscribe((ev) => this._clickHandler(ev, index));\n                this._renderer.addClass(buttonElement, 'igx-button-group__item');\n            });\n        };\n\n        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        initButtons();\n\n        this._cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.buttonClickNotifier$.next();\n        this.buttonClickNotifier$.complete();\n\n        this.queryListNotifier$.next();\n        this.queryListNotifier$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    public _clickHandler(event, i) {\n        if (this.selectedIndexes.indexOf(i) !== -1) {\n            this.deselectButton(i);\n        } else {\n            this.selectButton(i);\n        }\n    }\n}\n\nexport interface IButtonGroupEventArgs {\n    button: IgxButtonDirective;\n    index: number;\n}\n\n/**\n * The IgxButtonGroupModule provides the {@link IgxButtonGroupComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxButtonGroupComponent],\n    exports: [IgxButtonGroupComponent],\n    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]\n})\n\nexport class IgxButtonGroupModule {\n}\n","\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport function range(start = 0, stop, step = 1) {\n    const res = [];\n    const cur = (stop === undefined) ? 0 : start;\n    const max = (stop === undefined) ? start : stop;\n    for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n        res.push(i);\n    }\n    return res;\n}\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport function isLeap(year: number): boolean {\n    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));\n}\n\nexport function weekDay(year: number, month: number, day: number): number {\n    return new Date(year, month, day).getDay();\n}\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport function monthRange(year: number, month: number): number[] {\n    if ((month < 0) || (month > 11)) {\n        throw new Error('Invalid month specified');\n    }\n    const day = weekDay(year, month, 1);\n    let nDays = MDAYS[month];\n    if ((month === FEBRUARY) && (isLeap(year))) {\n        nDays++;\n    }\n    return [day, nDays];\n}\n\nexport interface ICalendarDate {\n    date: Date;\n    isCurrentMonth: boolean;\n    isPrevMonth: boolean;\n    isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n    value: string;\n    literal?: string;\n    combined: string;\n}\n\nexport enum WEEKDAYS {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6\n}\n\nexport class Calendar {\n\n    private _firstWeekDay: number | WEEKDAYS;\n\n    constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n        this._firstWeekDay = firstWeekDay;\n    }\n\n    public get firstWeekDay(): number {\n        return this._firstWeekDay % 7;\n    }\n\n    public set firstWeekDay(value: number) {\n        this._firstWeekDay = value;\n    }\n\n    /**\n     * Returns an array of weekdays for one week starting\n     * with the currently set `firstWeekDay`\n     *\n     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n     *\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public weekdays(): number[] {\n        const res = [];\n        for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n            res.push(i % 7);\n        }\n        return res;\n    }\n\n    /**\n     * Returns the date values for one month. It will always iterate throught\n     * complete weeks, so it will contain dates outside the specified month.\n     *\n     * @param year\n     * @param month\n     * @param boolean\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdates(year: number, month: number, extraWeek: boolean = false): ICalendarDate[] {\n        let date = new Date(year, month, 1);\n        let days = (date.getDay() - this.firstWeekDay) % 7;\n        if (days < 0) {\n            days = 7 - Math.abs(days);\n        }\n        date = this.timedelta(date, 'day', -days);\n        const res = [];\n        let value: ICalendarDate;\n\n        while (true) {\n\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n            date = this.timedelta(date, 'day', 1);\n\n            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {\n                if (extraWeek && res.length <= 35) {\n                    for (const i of range(0, 7)) {\n                        value = this.generateICalendarDate(date, year, month);\n                        res.push(value);\n                        date = this.timedelta(date, 'day', 1);\n                    }\n                }\n                break;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns a matrix (array of arrays) representing a month's calendar.\n     * Each row represents a full week; week entries are ICalendarDate objects.\n     *\n     * @param year\n     * @param month\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdatescalendar(year: number, month: number, extraWeek: boolean = false): ICalendarDate[][] {\n        const dates = this.monthdates(year, month, extraWeek);\n        const res = [];\n        for (const i of range(0, dates.length, 7)) {\n            res.push(dates.slice(i, i + 7));\n        }\n        return res;\n    }\n\n    public timedelta(date: Date, interval: string, units: number): Date {\n        const ret = new Date(date);\n\n        const checkRollover = () => {\n            if (ret.getDate() !== date.getDate()) {\n                ret.setDate(0);\n            }\n        };\n\n        switch (interval.toLowerCase()) {\n            case 'year':\n                ret.setFullYear(ret.getFullYear() + units);\n                checkRollover();\n                break;\n            case 'quarter':\n                ret.setMonth(ret.getMonth() + 3 * units);\n                checkRollover();\n                break;\n            case 'month':\n                ret.setMonth(ret.getMonth() + units);\n                checkRollover();\n                break;\n            case 'week':\n                ret.setDate(ret.getDate() + 7 * units);\n                break;\n            case 'day':\n                ret.setDate(ret.getDate() + units);\n                break;\n            case 'hour':\n                ret.setTime(ret.getTime() + units * 3600000);\n                break;\n            case 'minute':\n                ret.setTime(ret.getTime() + units * 60000);\n                break;\n            case 'second':\n                ret.setTime(ret.getTime() + units * 1000);\n                break;\n            default:\n                throw new Error('Invalid interval specifier');\n        }\n        return ret;\n    }\n\n    public formatToParts(date: Date, locale: string, options: any, parts: string[]) {\n        const formatter = new Intl.DateTimeFormat(locale, options);\n        const result = {\n            date,\n            full: formatter.format(date)\n        };\n\n        if ((formatter as any).formatToParts) {\n            const formattedParts = (formatter as any).formatToParts(date);\n\n            const toType = (partType: string) => {\n                const index = formattedParts.findIndex(({ type }) => type === partType);\n                const o: IFormattedParts = { value: '', literal: '', combined: ''};\n\n                if (partType === 'era' && index > -1) {\n                    o.value = formattedParts[index].value;\n                    return o;\n                } else if (partType === 'era' && index === -1) {\n                    return o;\n                }\n\n                o.value = formattedParts[index].value;\n                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';\n                o.combined = [o.value, o.literal].join('');\n                return o;\n            };\n\n            for (const each of parts) {\n                result[each] = toType(each);\n            }\n        } else {\n            for (const each of parts) {\n                result[each] = { value: '', literal: '', combined: ''};\n            }\n        }\n        return result;\n    }\n\n    private generateICalendarDate(date: Date, year: number, month: number): ICalendarDate {\n        return {\n            date,\n            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n            isNextMonth: this.isNextMonth(date, year, month),\n            isPrevMonth: this.isPreviousMonth(date, year, month)\n        };\n    }\n\n    private isPreviousMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() < month;\n        }\n        return date.getFullYear() < year;\n    }\n\n    private isNextMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() > month;\n        }\n\n        return date.getFullYear() > year;\n    }\n}\n","import { transition, trigger, useAnimation } from '@angular/animations';\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChildren\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../animations/main';\nimport { Calendar, ICalendarDate, range, WEEKDAYS } from './calendar';\nimport {\n    IgxCalendarDateDirective,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarSubheaderTemplateDirective\n} from './calendar.directives';\nimport { DateRangeDescriptor, DateRangeType } from '../core/dates/dateRange';\nimport { isDate } from 'util';\n\nlet NEXT_ID = 0;\n\nexport enum CalendarView {\n    DEFAULT,\n    YEAR,\n    DECADE\n}\n\nexport enum CalendarSelection {\n    SINGLE = 'single',\n    MULTI = 'multi',\n    RANGE = 'range'\n}\n\nexport class CalendarHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\n/**\n * **Ignite UI for Angular Calendar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/calendar.html)\n *\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * Example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxCalendarComponent\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CalendarHammerConfig\n        }\n    ],\n    selector: 'igx-calendar',\n    template: `<ng-template let-result #defaultHeader>\n    <span class=\"date-text\">{{ getFormattedDate().weekday }},&nbsp;</span>\n    <span class=\"date-text\">{{ getFormattedDate().monthday }}</span>\n</ng-template>\n\n<ng-template let-result #defaultMonth>\n    <span (click)=\"activeViewYear()\" class=\"date__el\">\n        {{ formattedMonth(viewDate) }}\n    </span>\n    <span (click)=\"activeViewDecade()\" class=\"date__el\">\n        {{ formattedYear(viewDate) }}\n    </span>\n</ng-template>\n\n<div *ngIf=\"selection === 'single'\" class=\"igx-calendar__header\">\n    <h5 class=\"igx-calendar__header-year\">{{ formattedYear(headerDate) }}</h5>\n    <h2 class=\"igx-calendar__header-date\">\n        <ng-container *ngTemplateOutlet=\"headerTemplate ? headerTemplate : defaultHeader; context: headerContext\">\n        </ng-container>\n    </h2>\n</div>\n\n<div *ngIf=\"isDefaultView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\" (swiperight)=\"previousMonth()\" (swipeleft)=\"nextMonth()\">\n    <div class=\"igx-calendar__body-picker\">\n        <div class=\"prev\" (click)=\"previousMonth()\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_left</igx-icon>\n        </div>\n        <div class=\"date\">\n            <ng-container *ngTemplateOutlet=\"subheaderTemplate ? subheaderTemplate : defaultMonth; context: context\">\n            </ng-container>\n        </div>\n        <div class=\"next\" (click)=\"nextMonth()\">\n            <igx-icon fontSet=\"material\">keyboard_arrow_right</igx-icon>\n        </div>\n    </div>\n\n    <div class=\"igx-calendar__body-row\">\n        <span *ngFor=\"let dayName of generateWeekHeader()\" class=\"igx-calendar__label\">\n            {{ dayName | titlecase }}\n        </span>\n    </div>\n\n    <div *ngFor=\"let week of getCalendarMonth; last as isLast; index as i; trackBy: rowTracker\" class=\"igx-calendar__body-row\" [@animateChange]=\"monthAction\"\n        (@animateChange.done)=\"animationDone($event, isLast)\">\n        <span [igxCalendarDate]=\"day\" (onDateSelection)=\"childClicked($event)\" *ngFor=\"let day of week; trackBy: dateTracker\">\n            {{ formattedDate(day.date) }}\n        </span>\n    </div>\n</div>\n\n<div *ngIf=\"isYearView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\">\n    <div class=\"igx-calendar__body-row--wrap\">\n        <div (onMonthSelection)=\"changeMonth($event)\" [igxCalendarMonth]=\"month\" [index]=\"i\" *ngFor=\"let month of months; index as i;\">\n            {{ formattedMonth(month) | titlecase }}\n        </div>\n    </div>\n</div>\n\n<div *ngIf=\"isDecadeView\" class=\"igx-calendar__body\" [@animateView]=\"activeView\">\n    <div class=\"igx-calendar__body-column\" (wheel)=\"onScroll($event)\" (pan)=\"onPan($event)\">\n        <span (onYearSelection)=\"changeYear($event)\" [igxCalendarYear]=\"year\" *ngFor=\"let year of decade\">\n            {{ formattedYear(year) }}\n        </span>\n    </div>\n</div>\n`\n})\nexport class IgxCalendarComponent implements OnInit, ControlValueAccessor {\n    /**\n     * Sets/gets the `id` of the calendar.\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     * ```html\n     * <igx-calendar id = \"my-first-calendar\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let calendarId =  this.calendar.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-calendar-${NEXT_ID++}`;\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     * ```typescript\n     * let weekStart =  this.calendar.weekStart;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @Input()\n    public get weekStart(): WEEKDAYS | number {\n        return this.calendarModel.firstWeekDay;\n    }\n    /**\n     * Sets the start day of the week.\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     * ```html\n     * <igx-calendar [weekStart] = \"1\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set weekStart(value: WEEKDAYS | number) {\n        this.calendarModel.firstWeekDay = value;\n    }\n\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.calendar.locale;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the calendar.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-calendar [locale] = \"de\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initFormatters();\n    }\n\n    /**\n     *\n     * Gets the selection type of the calendar.\n     * Default value is `\"single\"`.\n     * Changing the type of selection in the calendar resets the currently\n     * selected values if any.\n     * ```typescript\n     * let selectionType =  this.calendar.selection;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @Input()\n    public get selection(): string {\n        return this._selection;\n    }\n    /**\n     * Sets the selection type of the calendar.\n     * ```html\n     * <igx-calendar [selection] = \"'multi'\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set selection(value: string) {\n        switch (value) {\n            case 'single':\n                this.selectedDates = null;\n                break;\n            case 'multi':\n            case 'range':\n                this.selectedDates = [];\n                break;\n            default:\n                throw new Error('Invalid selection value');\n        }\n        this._onChangeCallback(this.selectedDates);\n        this.rangeStarted = false;\n        this._selection = value;\n    }\n\n    /**\n     * Gets the date that is presented in the calendar.\n     * By default it is the current date.\n     * ```typescript\n     * let date = this.calendar.viewDate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @Input()\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n    /**\n     * Sets the date that will be presented in the default view when the calendar renders.\n     * ```html\n     * <igx-calendar viewDate = \"15/06/2018\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set viewDate(value: Date) {\n        this._viewDate = this.getDateOnly(value);\n    }\n\n    /**\n     * Gets the selected date(s) of the calendar.\n     *\n     * When the calendar selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     * ```typescript\n     * let selectedDates =  this.calendar.value;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @Input()\n    public get value(): Date | Date[] {\n        return this.selectedDates;\n    }\n    /**\n     * Sets the selected date(s) of the calendar.\n     *\n     * When the calendar selection is set to `single`, it accepts\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     * ```typescript\n     *  this.calendar.value =  new Date(`2016-06-12`);\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set value(value: Date | Date[]) {\n        this.selectDate(value);\n    }\n\n    /**\n     * Gets the date format options of the calendar.\n     * ```typescript\n     * let dateFormatOptions = this.calendar.formatOptions.\n     * ```\n     */\n    @Input()\n    public get formatOptions(): object {\n        return this._formatOptions;\n    }\n    /**\n     * Sets the date format options of the calendar.\n     * ```html\n     * <igx-calendar> [formatOptions] = \"{ day: '2-digit', month: 'short', weekday: 'long', year: 'numeric' }\"</igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set formatOptions(formatOptions: object) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n        this.initFormatters();\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     * ```typescript\n     * let formatViews = this.calendar.formatViews;\n     * ```\n     */\n    @Input()\n    public get formatViews(): object {\n        return this._formatViews;\n    }\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     * ```html\n     * <igx-calendar [formatViews] = \"{ day: true, month: false, year: true }\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    public set formatViews(formatViews: object) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let isVertical = this.calendar.vertical;\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.calendar.disabledDates;\n     * ```\n     */\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.disabledDates = [\n     *      new DateRangeDescriptor(DateRangeType.Between, [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]),\n     *      new DateRangeDescriptor(DateRangeType.Weekends)];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.calendar.specialDates;\n     * ```\n     */\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.specialDates = [\n     *      new DateRangeDescriptor(DateRangeType.Between, [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]),\n     *      new DateRangeDescriptor(DateRangeType.Weekends)];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Emits an event when a selection is made in the calendar.\n     * Provides reference the `selectedDates` property in the `IgxCalendarComponent`.\n     * ```html\n     * <igx-calendar (onSelection) = \"onSelection($event)\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date | Date[]>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(forwardRef(() => IgxCalendarDateDirective), { read: IgxCalendarDateDirective })\n    public dates: QueryList<IgxCalendarDateDirective>;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * The default aria role attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'grid';\n\n    /**\n     * The default aria lebelled by attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy = 'calendar';\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClass(): string {\n        if (this.vertical) {\n            return 'igx-calendar--vertical';\n        }\n        return 'igx-calendar';\n    }\n\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[] {\n        let start = new Date(this._viewDate.getFullYear(), 0, 1);\n        const result = [];\n\n        for (let i = 0; i < 12; i++) {\n            result.push(start);\n            start = this.calendarModel.timedelta(start, 'month', 1);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns an array of date objects which are then used to properly\n     * render the years.\n     *\n     * Used in the template of the component.\n     *\n     * @hidden\n     */\n    get decade(): number[] {\n        const result = [];\n        const start = this._viewDate.getFullYear() - 3;\n        const end = this._viewDate.getFullYear() + 4;\n\n        for (const year of range(start, end)) {\n            result.push(new Date(year, this._viewDate.getMonth(), this._viewDate.getDate()));\n        }\n\n        return result;\n    }\n\n    get isDefaultView(): boolean {\n        return this._activeView === CalendarView.DEFAULT;\n    }\n\n    get isYearView(): boolean {\n        return this._activeView === CalendarView.YEAR;\n    }\n\n    get isDecadeView(): boolean {\n        return this._activeView === CalendarView.DECADE;\n    }\n\n    /**\n     * Gets the current active view of the calendar.\n     * ```typescript\n     * let activeView =  this.calendar.activeView;\n     * ```\n     */\n    get activeView(): CalendarView {\n        return this._activeView;\n    }\n\n    /**\n     * @hidden\n     */\n    get monthAction(): string {\n        return this._monthAction;\n    }\n    /**\n     * Gets the header template.\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any {\n        if (this.headerTemplateDirective) {\n            return this.headerTemplateDirective.template;\n        }\n        return null;\n    }\n    /**\n     * Sets the header template.\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any) {\n        this.headerTemplateDirective = directive;\n    }\n    /**\n     * Gets the subheader template.\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any {\n        if (this.subheaderTemplateDirective) {\n            return this.subheaderTemplateDirective.template;\n        }\n        return null;\n    }\n    /**\n     * Sets the subheader template.\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any) {\n        this.subheaderTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext() {\n        const date: Date = this.headerDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context() {\n        const date: Date = this._viewDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerDate(): Date {\n        return this.selectedDates ? this.selectedDates : new Date();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective })\n    private headerTemplateDirective: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:max-line-length\n    @ContentChild(forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective })\n    private subheaderTemplateDirective: IgxCalendarSubheaderTemplateDirective;\n    /**\n     *@hidden\n     */\n    private _viewDate: Date;\n    /**\n     *@hidden\n     */\n    private calendarModel: Calendar;\n    /**\n     *@hidden\n     */\n    private _activeView = CalendarView.DEFAULT;\n    /**\n     *@hidden\n     */\n    private selectedDates;\n    /**\n     *@hidden\n     */\n    private _selection: CalendarSelection | string = CalendarSelection.SINGLE;\n    /**\n     *@hidden\n     */\n    private rangeStarted = false;\n    /**\n     *@hidden\n     */\n    private _monthAction = '';\n    /**\n    *@hidden\n    */\n    private _locale = 'en';\n    /**\n     *@hidden\n     */\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n    /**\n     *@hidden\n     */\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n    /**\n     *@hidden\n     */\n    private _disabledDates: DateRangeDescriptor[] = null;\n    /**\n     *@hidden\n     */\n    private formatterMonth;\n    /**\n     *@hidden\n     */\n    private formatterDay;\n    /**\n     *@hidden\n     */\n    private formatterYear;\n    /**\n     *@hidden\n     */\n    private formatterMonthday;\n    /**\n     *@hidden\n     */\n    private formatterWeekday;\n    /**\n     *@hidden\n     */\n    private _specialDates: DateRangeDescriptor[] = null;\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.calendarModel = new Calendar();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        const today = new Date();\n\n        this.calendarModel.firstWeekDay = this.weekStart;\n        this._viewDate = this._viewDate ? this._viewDate : today;\n        this.initFormatters();\n    }\n\n    /**\n     * Resets the formatters when locale or formatOptions are changed\n     *\n     * @hidden\n     */\n    private initFormatters() {\n        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });\n        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });\n        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });\n        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });\n        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date | Date[]) {\n        this.selectedDates = value;\n    }\n\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this._formatViews.month) {\n            return this.formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * Returns the locale representation of the date in the default view if enabled,\n     * otherwise returns the default `Date.getDate()` value.\n     *\n     * @hidden\n     */\n    public formattedDate(value: Date): string {\n        if (this._formatViews.day) {\n            return this.formatterDay.format(value);\n        }\n        return `${value.getDate()}`;\n    }\n\n    /**\n     * Returns the locale representation of the year in the year view if enabled,\n     * otherwise returns the default `Date.getFullYear()` value.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this._formatViews.year) {\n            return this.formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentMonth(value: Date): boolean {\n        return this.viewDate.getMonth() === value.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentYear(value: Date): boolean {\n        return this.viewDate.getFullYear() === value.getFullYear();\n    }\n\n    /**\n     * @hidden\n     */\n    public previousMonth() {\n        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'month', -1);\n        this._monthAction = 'prev';\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMonth() {\n        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'month', 1);\n        this._monthAction = 'next';\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYear() {\n        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'year', -1);\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYear() {\n        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'year', 1);\n    }\n\n    /**\n     * @hidden\n     */\n    public getFormattedDate(): { weekday: string, monthday: string } {\n\n        const date = this.headerDate;\n\n        return {\n            monthday: this.formatterMonthday.format(date),\n            weekday: this.formatterWeekday.format(date),\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public childClicked(instance: ICalendarDate) {\n        if (instance.isPrevMonth) {\n            this.previousMonth();\n        }\n\n        if (instance.isNextMonth) {\n            this.nextMonth();\n        }\n\n        this.selectDateFromClient(instance.date);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    public animationDone(event, isLast: boolean) {\n        if (isLast) {\n            const date = this.dates.find((d) => d.selected);\n            if (date) {\n                setTimeout(() => date.nativeElement.focus(),\n                    parseInt(slideInRight.options.params.duration, 10));\n            }\n        }\n    }\n\n    /**\n     * Selects date(s) (based on the selection type).\n     *```typescript\n     * this.calendar.selectDate(new Date(`2018-06-12`));\n     *```\n     */\n    public selectDate(value: Date | Date[]) {\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n            throw new Error('Date or array should be set for the selectDate method.');\n        }\n\n        switch (this.selection) {\n            case 'single':\n                this.selectSingle(value as Date);\n                break;\n            case 'multi':\n                this.selectMultiple(value);\n                break;\n            case 'range':\n                this.selectRange(value);\n                break;\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     *```typescript\n     * this.calendar.deselectDate(new Date(`2018-06-12`));\n     *````\n     */\n    public deselectDate(value?: Date | Date[]) {\n        if (this.selectedDates === null || this.selectedDates === []) {\n            return;\n        }\n\n        if (value === null || value === undefined) {\n            this.selectedDates = this.selection === 'single' ? null : [];\n            this._onChangeCallback(this.selectedDates);\n            return;\n        }\n\n        switch (this.selection) {\n            case 'single':\n                this.deselectSingle(value as Date);\n                break;\n            case 'multi':\n                this.deselectMultiple(value as Date[]);\n                break;\n            case 'range':\n                this.deselectRange(value as Date[]);\n                break;\n        }\n    }\n\n    /**\n     * Checks whether a date is disabled.\n     *```typescript\n     * this.calendar.isDateDisabled(new Date(`2018-06-12`));\n     *```\n     * @hidden\n     */\n    public isDateDisabled(date: Date) {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return this.isDateInRanges(date, this.disabledDates);\n    }\n\n    /**\n     * Checks whether a date is special.\n     *```typescript\n     * this.calendar.isDateSpecial(new Date(`2018-06-12`));\n     *```\n     * @hidden\n     */\n    public isDateSpecial(date: Date) {\n        if (this.specialDates === null) {\n            return false;\n        }\n\n        return this.isDateInRanges(date, this.specialDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public generateWeekHeader(): string[] {\n        const dayNames = [];\n        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];\n        for (const day of rv) {\n            dayNames.push(this.formatterWeekday.format(day.date));\n        }\n\n        return dayNames;\n    }\n\n    /**\n     * @hidden\n     */\n    public get getCalendarMonth(): ICalendarDate[][] {\n        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);\n    }\n\n    /**\n     * @hidden\n     */\n    public changeYear(event: Date) {\n        this._viewDate = new Date(event.getFullYear(), this._viewDate.getMonth());\n        this._activeView = CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public changeMonth(event: Date) {\n        this._viewDate = new Date(this._viewDate.getFullYear(), event.getMonth());\n        this._activeView = CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYear(): void {\n        this._activeView = CalendarView.YEAR;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(): void {\n        this._activeView = CalendarView.DECADE;\n    }\n\n    /**\n     * @hidden\n     */\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const delta = event.deltaY < 0 ? -1 : 1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public onPan(event) {\n        const delta = event.deltaY < 0 ? 1 : -1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.previousMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.nextMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pageup', ['$event'])\n    public onKeydownShiftPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.previousYear();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pagedown', ['$event'])\n    public onKeydownShiftPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.nextYear();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index - 7 > -1; index -= 7) {\n            const date = dates[index - 7];\n            if (!date.isDisabled) {\n                date.nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index + 7 < this.dates.length; index += 7) {\n            const date = dates[index + 7];\n            if (!date.isDisabled) {\n                date.nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index > 0; index--) {\n            const date = dates[index - 1];\n            if (!date.isDisabled) {\n                date.nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index < this.dates.length - 1; index++) {\n            const date = dates[index + 1];\n            if (!date.isDisabled) {\n                date.nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = 0; i < dates.length; i++) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = dates.length - 1; i >= 0; i--) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public dateTracker(index, item): string {\n        return `${item.date.getMonth()}--${item.date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public rowTracker(index, item): string {\n        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;\n    }\n\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle(value: Date) {\n        this.selectedDates = this.getDateOnly(value);\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple(value: Date | Date[]) {\n        if (Array.isArray(value)) {\n            this.selectedDates = this.selectedDates.concat(value.map(v => this.getDateOnly(v)));\n        } else {\n            const valueDateOnly = this.getDateOnly(value);\n            if (this.selectedDates.every((date: Date) => date.getTime() !== valueDateOnly.getTime())) {\n                this.selectedDates.push(valueDateOnly);\n            } else {\n                this.selectedDates = this.selectedDates.filter(\n                    (date: Date) => date.getTime() !== valueDateOnly.getTime()\n                );\n            }\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n    /**\n     *@hidden\n     */\n    private selectRange(value: Date | Date[], excludeDisabledDates: boolean = false) {\n        let start: Date;\n        let end: Date;\n\n        if (Array.isArray(value)) {\n            this.rangeStarted = false;\n            value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n            start = this.getDateOnly(value[0]);\n            end = this.getDateOnly(value[value.length - 1]);\n            this.selectedDates = [start, ...this.generateDateRange(start, end)];\n        } else {\n            if (!this.rangeStarted) {\n                this.rangeStarted = true;\n                this.selectedDates = [value];\n            } else {\n                this.rangeStarted = false;\n\n                if (this.selectedDates[0].getTime() === value.getTime()) {\n                    this.selectedDates = [];\n                    this._onChangeCallback(this.selectedDates);\n                    return;\n                }\n\n                this.selectedDates.push(value);\n                this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n                start = this.selectedDates.shift();\n                end = this.selectedDates.pop();\n                this.selectedDates = [start, ...this.generateDateRange(start, end)];\n            }\n        }\n\n        if (excludeDisabledDates) {\n            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle(value: Date) {\n        if (this.selectedDates !== null &&\n            this.getDateOnlyInMs(value as Date) === this.getDateOnlyInMs(this.selectedDates)) {\n            this.selectedDates = null;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple(value: Date[]) {\n        value = value.filter(v => v !== null);\n        const selectedDatesCount = this.selectedDates.length;\n        const datesInMsToDeselect: Set<number> = new Set<number>(\n            value.map(v => this.getDateOnlyInMs(v)));\n\n        for (let i = this.selectedDates.length - 1; i >= 0; i--) {\n            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {\n                this.selectedDates.splice(i, 1);\n            }\n        }\n\n        if (this.selectedDates.length !== selectedDatesCount) {\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange(value: Date[]) {\n        value = value.filter(v => v !== null && isDate(v));\n        if (value.length < 1) {\n            return;\n        }\n\n        value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const valueStart = this.getDateOnlyInMs(value[0]);\n        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);\n\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);\n        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);\n\n        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {\n            this.selectedDates = [];\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private selectDateFromClient(value: Date) {\n        switch (this.selection) {\n            case 'single':\n            case 'multi':\n                if (!this.isDateDisabled(value)) {\n                    this.selectDate(value);\n                }\n\n                break;\n            case 'range':\n                this.selectRange(value, true);\n                break;\n        }\n    }\n    /**\n     *@hidden\n     */\n    private isDateInRanges(date: Date, ranges: DateRangeDescriptor[]): boolean {\n        date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n        const dateInMs = date.getTime();\n\n        for (const descriptor of ranges) {\n            const dRanges = descriptor.dateRange ? descriptor.dateRange.map(\n                r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;\n            switch (descriptor.type) {\n                case (DateRangeType.After):\n                    if (dateInMs > dRanges[0].getTime()) {\n                        return true;\n                    }\n\n                    break;\n                case (DateRangeType.Before):\n                    if (dateInMs < dRanges[0].getTime()) {\n                        return true;\n                    }\n\n                    break;\n                case (DateRangeType.Between):\n                    const dRange = dRanges.map(d => d.getTime());\n                    const min = Math.min(dRange[0], dRange[1]);\n                    const max = Math.max(dRange[0], dRange[1]);\n                    if (dateInMs >= min && dateInMs <= max) {\n                        return true;\n                    }\n\n                    break;\n                case (DateRangeType.Specific):\n                    const datesInMs = dRanges.map(d => d.getTime());\n                    for (const specificDateInMs of datesInMs) {\n                        if (dateInMs === specificDateInMs) {\n                            return true;\n                        }\n                    }\n\n                    break;\n                case (DateRangeType.Weekdays):\n                    const day = date.getDay();\n                    if (day % 6 !== 0) {\n                        return true;\n                    }\n\n                    break;\n                case (DateRangeType.Weekends):\n                    const weekday = date.getDay();\n                    if (weekday % 6 === 0) {\n                        return true;\n                    }\n\n                    break;\n                default:\n                    return false;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     * @hidden\n     */\n    private generateContext(value: Date) {\n        const formatObject = {\n            monthView: () => this.activeViewYear(),\n            yearView: () => this.activeViewDecade(),\n            ...this.calendarModel.formatToParts(value, this.locale, this._formatOptions,\n                ['era', 'year', 'month', 'day', 'weekday'])\n        };\n        return { $implicit: formatObject };\n    }\n    /**\n     *@hidden\n     */\n    private generateDateRange(start: Date, end: Date): Date[] {\n        const result = [];\n        start = this.getDateOnly(start);\n        end = this.getDateOnly(end);\n        while (start.getTime() !== end.getTime()) {\n            start = this.calendarModel.timedelta(start, 'day', 1);\n            result.push(start);\n        }\n\n        return result;\n    }\n    /**\n     *@hidden\n     */\n    private generateYearRange(delta: number) {\n        const currentYear = new Date().getFullYear();\n\n        if ((delta > 0 && this._viewDate.getFullYear() - currentYear >= 95) ||\n            (delta < 0 && currentYear - this._viewDate.getFullYear() >= 95)) {\n            return;\n        }\n        this._viewDate = this.calendarModel.timedelta(this._viewDate, 'year', delta);\n    }\n    /**\n     *@hidden\n     */\n    private getDateOnlyInMs(date: Date) {\n        return this.getDateOnly(date).getTime();\n    }\n    /**\n     *@hidden\n     */\n    private getDateOnly(date: Date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n}\n","/**\n * This file contains all the directives used by the @link IgxCalendarComponent.\n * Except for the directives which are used for templating the calendar itself\n * you should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Host,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    TemplateRef\n} from '@angular/core';\nimport { ICalendarDate } from './calendar';\nimport { IgxCalendarComponent } from './calendar.component';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarYear]'\n})\nexport class IgxCalendarYearDirective {\n\n    @Input('igxCalendarYear')\n    public value: Date;\n\n    @Output()\n    public onYearSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__year')\n    get defaultCSS(): boolean {\n        return !this.isCurrentYear;\n    }\n\n    @HostBinding('class.igx-calendar__year--current')\n    get currentCSS(): boolean {\n        return this.isCurrentYear;\n    }\n\n    get isCurrentYear(): boolean {\n        return this.calendar.isCurrentYear(this.value);\n    }\n\n    constructor(@Host() public calendar: IgxCalendarComponent) {}\n\n    @HostListener('click')\n    public onClick() {\n        this.onYearSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarMonth]'\n})\nexport class IgxCalendarMonthDirective {\n\n    @Input('igxCalendarMonth')\n    public value: Date;\n\n    @Input()\n    public index;\n\n    @Output()\n    public onMonthSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__month')\n    get defaultCSS(): boolean {\n        return !this.isCurrentMonth;\n    }\n\n    @HostBinding('class.igx-calendar__month--current')\n    get currentCSS(): boolean {\n        return this.isCurrentMonth;\n    }\n\n    get isCurrentMonth(): boolean {\n        return this.calendar.isCurrentMonth(this.value);\n    }\n\n    constructor(@Host() public calendar: IgxCalendarComponent) {}\n\n    @HostListener('click')\n    public onClick() {\n        this.onMonthSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarDate]'\n})\nexport class IgxCalendarDateDirective {\n\n    @Input('igxCalendarDate')\n    public date: ICalendarDate;\n\n    get selected(): boolean {\n        const date = this.date.date;\n\n        if (!this.calendar.value) {\n            return;\n        }\n\n        if (this.calendar.selection === 'single') {\n            this._selected = (this.calendar.value as Date).getTime() === date.getTime();\n        } else {\n            this._selected = (this.calendar.value as Date[])\n                .some((each) => each.getTime() === date.getTime());\n        }\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        this._selected = value;\n    }\n\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    get isCurrentMonth(): boolean {\n        return this.date.isCurrentMonth;\n    }\n\n    get isPreviousMonth(): boolean {\n        return this.date.isPrevMonth;\n    }\n\n    get isNextMonth(): boolean {\n        return this.date.isNextMonth;\n    }\n\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    get isInactive(): boolean {\n        return this.date.isNextMonth || this.date.isPrevMonth;\n    }\n\n    get isToday(): boolean {\n        const today = new Date(Date.now());\n        const date = this.date.date;\n        return (date.getFullYear() === today.getFullYear() &&\n            date.getMonth() === today.getMonth() &&\n            date.getDate() === today.getDate()\n        );\n    }\n\n    get isWeekend(): boolean {\n        const day = this.date.date.getDay();\n        return day === 0 || day === 6;\n    }\n\n    get isDisabled(): boolean {\n        return this.calendar.isDateDisabled(this.date.date);\n    }\n\n    get isSpecial(): boolean {\n        return this.calendar.isDateSpecial(this.date.date);\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__date')\n    get defaultCSS(): boolean {\n        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--inactive')\n    get isInactiveCSS(): boolean {\n        return this.isInactive;\n    }\n\n    @HostBinding('class.igx-calendar__date--current')\n    get isTodayCSS(): boolean {\n        return this.isToday && !this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--selected')\n    get isSelectedCSS(): boolean {\n        return this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--weekend')\n    get isWeekendCSS(): boolean {\n        return this.isWeekend;\n    }\n\n    @HostBinding('class.igx-calendar__date--disabled')\n    get isDisabledCSS(): boolean {\n        return this.isDisabled;\n    }\n\n    @HostBinding('class.igx-calendar__date--special')\n    get isSpecialCSS(): boolean {\n        return this.isSpecial;\n    }\n\n    private _selected = false;\n\n    constructor(@Host() public calendar: IgxCalendarComponent, private elementRef: ElementRef) { }\n\n    @HostListener('click')\n    @HostListener('keydown.enter')\n    public onSelect() {\n        this.onDateSelection.emit(this.date);\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarHeader]'\n})\nexport class IgxCalendarHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarSubheader]'\n})\nexport class IgxCalendarSubheaderTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxCalendarComponent } from './calendar.component';\nimport {\n    IgxCalendarDateDirective,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarMonthDirective,\n    IgxCalendarSubheaderTemplateDirective,\n    IgxCalendarYearDirective\n} from './calendar.directives';\n\n@NgModule({\n    declarations: [\n        IgxCalendarComponent,\n        IgxCalendarDateDirective,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    exports: [\n        IgxCalendarComponent,\n        IgxCalendarDateDirective,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    imports: [CommonModule, FormsModule, IgxIconModule]\n})\nexport class IgxCalendarModule { }\n","import { Component, Directive, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * IgxCardHeader is container for the card header\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-header'\n})\nexport class IgxCardHeaderDirective { }\n\n/**\n * IgxCardContent is container for the card content\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-content'\n})\nexport class IgxCardContentDirective { }\n\n/**\n * IgxCardActions is container for the card actions\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-actions'\n})\nexport class IgxCardActionsDirective { }\n\n/**\n * IgxCardFooter is container for the card footer\n */\n@Directive({\n    /*     host: {\n            role: \"footer\"\n        }, */\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-footer'\n})\nexport class IgxCardFooterDirective {\n    @Input() public role = 'footer';\n}\n\n/**\n * **Ignite UI for Angular Card** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/card.html)\n *\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way.  There are\n * four sections in a card that you can use to organize your content.  These are header, footer, content & actions.\n *\n * Example:\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <div>\n *       <h3 class=\"igx-card-header__title--small\">{{title}}</h3>\n *       <h5 class=\"igx-card-header__subtitle\">{{subtitle}}</h5>\n *     </div>\n *   </igx-card-header>\n *   <igx-card-actions>\n *     <div>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *     </div>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\n@Component({\n    selector: 'igx-card',\n    template: `<div class=\"igx-card\" role=\"group\">\n    <ng-content></ng-content>\n</div>`\n})\nexport class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     * @memberof IgxCardComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-card-${NEXT_ID++}`;\n}\n/**\n * The `IgxCardModule` provides the {@link IgxCardComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxCardComponent, IgxCardHeaderDirective,\n        IgxCardContentDirective, IgxCardActionsDirective, IgxCardFooterDirective],\n    exports: [IgxCardComponent, IgxCardHeaderDirective,\n        IgxCardContentDirective, IgxCardActionsDirective, IgxCardFooterDirective],\n    imports: [IgxButtonModule]\n})\nexport class IgxCardModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Direction { NONE, NEXT, PREV }\n\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\n@Component({\n    selector: 'igx-carousel',\n    template: `<div tabindex=\"0\" aria-label=\"carousel\" class=\"igx-carousel\"\n        (mouseenter)=\"stop()\"\n        (mouseleave)=\"play()\"\n        (swipeleft)=\"next()\"\n        (swiperight)=\"prev()\"\n        (tap)=\"isPlaying ? stop() : play()\">\n    <ul class=\"igx-carousel__indicators\" [hidden]=\"slides.length <= 1\">\n        <li *ngFor=\"let slide of slides\" [attr.aria-label]=\"setAriaLabel(slide)\" [attr.aria-selected]=\"slide.active\" [class.active]=\"slide.active === true\"\n            (click)=\"select(slide)\"></li>\n    </ul>\n    <div class=\"igx-carousel__inner\" role=\"list\">\n        <ng-content></ng-content>\n    </div>\n    <div *ngIf=\"navigation\">\n        <a role=\"button\" tabindex=\"0\" class=\"igx-carousel__arrow--prev\" (click)=\"prev()\" [hidden]=\"!slides.length\">\n            <igx-icon fontSet=\"material\">arrow_back</igx-icon>\n        </a>\n        <a role=\"button\" tabindex=\"0\" class=\"igx-carousel__arrow--next\" (click)=\"next()\" [hidden]=\"!slides.length\">\n            <igx-icon fontSet=\"material\">arrow_forward</igx-icon>\n        </a>\n    </div>\n</div>\n`\n})\n\nexport class IgxCarouselComponent implements OnDestroy {\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.role') public role = 'region';\n\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-carousel-${NEXT_ID++}`;\n\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public loop = true;\n\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public pause = true;\n\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @Input()\n    get interval(): number {\n        return this._interval;\n    }\n\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number) {\n        this._interval = +value;\n        this._restartInterval();\n    }\n    /**\n     * Returns the `tabIndex` of the carousel component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return 0;\n    }\n\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public navigation = true;\n\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideChanged = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideAdded = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideRemoved = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPaused = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPlaying = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * The collection of `slides` currently in the carousel.\n     * ```typescript\n     * let slides: IgxSlideComponent[] = this.carousel.slides;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public slides: IgxSlideComponent[] = [];\n    private _interval: number;\n    private _lastInterval: any;\n    private _playing: boolean;\n    private _currentSlide: IgxSlideComponent;\n    private _destroyed: boolean;\n    private _total = 0;\n\n    constructor(private element: ElementRef) { }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this._destroyed = true;\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n        }\n    }\n    /**\n     * @hidden\n     * @memberof IgxCarouselComponent\n     */\n    public setAriaLabel(slide) {\n        return `Item ${slide.index + 1} of ${this.total}`;\n    }\n\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get total(): number {\n        return this._total;\n    }\n\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get current(): number {\n        return !this._currentSlide ? 0 : this._currentSlide.index;\n    }\n\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isPlaying(): boolean {\n        return this._playing;\n    }\n\n    /**\n     * Returns Ð° boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isDestroyed(): boolean {\n        return this._destroyed;\n    }\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get(index: number): IgxSlideComponent {\n        for (const each of this.slides) {\n            if (each.index === index) {\n                return each;\n            }\n        }\n    }\n\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public add(slide: IgxSlideComponent) {\n        slide.index = this.total;\n        this.slides.push(slide);\n        this._total += 1;\n\n        if (this.total === 1 || slide.active) {\n            this.select(slide);\n            if (this.total === 1) {\n                this.play();\n            }\n        } else {\n            slide.active = false;\n        }\n\n        this.onSlideAdded.emit({ carousel: this, slide });\n    }\n\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public remove(slide: IgxSlideComponent) {\n        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel\n            if (slide.index === this.current) {\n                slide.active = false;\n                this.next();\n            }\n\n            this.slides.splice(slide.index, 1);\n            this._total -= 1;\n\n            if (!this.total) {\n                this._currentSlide = null;\n                return;\n            }\n\n            for (let i = 0; i < this.total; i++) {\n                this.slides[i].index = i;\n            }\n\n            this.onSlideRemoved.emit({ carousel: this, slide });\n        }\n    }\n\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public select(slide: IgxSlideComponent, direction: Direction = Direction.NONE) {\n        const newIndex = slide.index;\n        if (direction === Direction.NONE) {\n            direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;\n        }\n\n        if (slide && slide !== this._currentSlide) {\n            this._moveTo(slide, direction);\n        }\n    }\n\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public next() {\n        const index = (this.current + 1) % this.total;\n\n        if (index === 0 && !this.loop) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.NEXT);\n    }\n\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public prev() {\n        const index = this.current - 1 < 0 ?\n            this.total - 1 : this.current - 1;\n\n        if (!this.loop && index === this.total - 1) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.PREV);\n    }\n\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public play() {\n        if (!this._playing) {\n            this._playing = true;\n            this.onCarouselPlaying.emit(this);\n            this._restartInterval();\n        }\n    }\n\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public stop() {\n        if (this.pause) {\n            this._playing = false;\n            this.onCarouselPaused.emit(this);\n            this._resetInterval();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _moveTo(slide: IgxSlideComponent, direction: Direction) {\n        if (this._destroyed) {\n            return;\n        }\n\n        slide.direction = direction;\n        slide.active = true;\n\n        if (this._currentSlide) {\n            this._currentSlide.direction = direction;\n            this._currentSlide.active = false;\n        }\n\n        this._currentSlide = slide;\n\n        this.onSlideChanged.emit({ carousel: this, slide });\n        this._restartInterval();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n    /**\n     *@hidden\n     */\n    private _resetInterval() {\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n            this._lastInterval = null;\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _restartInterval() {\n        this._resetInterval();\n\n        if (!isNaN(this.interval) && this.interval > 0) {\n            this._lastInterval = setInterval(() => {\n                const tick = +this.interval;\n                if (this._playing && this.total && !isNaN(tick) && tick > 0) {\n                    this.next();\n                } else {\n                    this.stop();\n                }\n            }, this.interval);\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowright')\n    public onKeydownArrowRight() {\n        this.next();\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowleft')\n    public onKeydownArrowLeft() {\n        this.prev();\n    }\n}\n\n/**\n * A slide component that usually holds an image and/or a caption text.\n * IgxSlideComponent is usually a child component of an IgxCarouselComponent.\n *\n * ```\n * <igx-slide [input bindings] >\n *    <ng-content></ng-content>\n * </igx-slide>\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'igx-slide',\n    template: `<div\n    role=\"listitem\"\n    [class.active]=\"active\"\n    class=\"igx-slide\"\n    [attr.aria-selected]=\"active\"\n    [attr.aria-live]=\"active ? 'polite' : null\"\n    [attr.tabIndex]=\"active ? 0 : null\"\n>\n    <ng-content></ng-content>\n</div>\n`\n})\n\nexport class IgxSlideComponent implements OnInit, OnDestroy {\n\n    /**\n     * Gets/sets the `index` of the slide inside the carousel.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide index = \"1\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public index: number;\n\n    /**\n     * Gets/sets the target `direction` for the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide direction=\"NEXT\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public direction: Direction;\n    /**\n     * Gets/sets the `active` state of the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [active] =\"false\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.active')\n    @Input() public active: boolean;\n\n    constructor(private carousel: IgxCarouselComponent) { }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        this.carousel.add(this);\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this.carousel.remove(this);\n    }\n}\n\nexport interface ISlideEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n/**\n * The `IgxCarouselModule` provides the {@link IgxCarouselComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxCarouselComponent, IgxSlideComponent],\n    exports: [IgxCarouselComponent, IgxSlideComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxCarouselModule {\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum LabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeCheckboxEventArgs {\n    checked: boolean;\n    checkbox: IgxCheckboxComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Checkbox** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/checkbox.html)\n *\n * The Ignite UI Checkbox is a selection control that allows users to make a binary choice. It behaves similarly\n * to the native browser checkbox.\n *\n * Example:\n * ```html\n * <igx-checkbox checked=\"true\">\n *   simple checkbox\n * </igx-checkbox>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent, multi: true }],\n    selector: 'igx-checkbox',\n    preserveWhitespaces: false,\n    template: `<input #checkbox class=\"igx-checkbox__input\"\n    type=\"checkbox\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [tabindex]=\"tabindex\"\n    [disabled]=\"disabled\"\n    [indeterminate]=\"indeterminate\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-labelledby]=\"ariaLabelledBy\"\n    [attr.aria-label]=\"ariaLabel\"\n    (change)=\"_onCheckboxChange($event)\"\n    (click)=\"_onCheckboxClick($event)\"\n    (focus)=\"onFocus($event)\"\n    (blur)=\"onBlur($event)\" />\n\n<label #label class=\"igx-checkbox__composite\"\n    igxRipple\n    igxRippleTarget=\".igx-checkbox__ripple\"\n    [igxRippleDisabled]=\"disableRipple\"\n    [igxRippleCentered]=\"true\"\n    [igxRippleDuration]=\"300\"\n    [attr.for]=\"inputId\">\n    <svg class=\"igx-checkbox__composite-mark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M4.1,12.7 9,17.6 20.3,6.3\" />\n    </svg>\n    <div class=\"igx-checkbox__ripple\"></div>\n</label>\n\n<span #placeholderLabel role=\"label\"\n    [class]=\"labelClass\"\n    [id]=\"labelId\"\n    (click)=\"_onLabelClick($event)\">\n    <ng-content></ng-content>\n</span>\n`\n})\nexport class IgxCheckboxComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.checkbox.checkboxElement;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox') public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.checkbox.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.checkbox.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n    /**\n     * Sets/gets the `id` of the checkbox component.\n     * If not set, the `id` of the first checkbox component will be `\"igx-checkbox-0\"`.\n     * ```html\n     * <igx-checkbox id=\"my-first-checkbox\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let checkboxId =  this.checkbox.id;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-checkbox-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element.\n     * If not set, the id of the `label` in the first checkbox component will be `\"igx-checkbox-0-label\"`.\n     * ```html\n     * <igx-checkbox labelId = \"Label1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelId =  this.checkbox.labelId;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-checkbox [value] = \"'CheckboxValue'\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let value =  this.checkbox.value;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute.\n     * ```html\n     * <igx-checkbox name = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let name =  this.checkbox.name;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-checkbox [tabindex] = \"1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.checkbox.tabindex;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     *  Sets/gets the position of the `label`.\n     *  If not set, the `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-checkbox labelPosition = \"before\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.checkbox.labelPosition;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelPosition: LabelPosition | string = LabelPosition.AFTER;\n    /**\n     * Enables/Disables the ripple effect.\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-checkbox [disableRipple] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.checkbox.desableRipple;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the checkbox is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-checkbox [required] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRequired =  this.checkbox.required;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-checkbox aria-labelledby = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-checkbox aria-label = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabel = this.checkbox.aruaLabel;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the checkbox state is changed.\n     * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.\n     * @memberof IgxCheckboxComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeCheckboxEventArgs> = new EventEmitter<IChangeCheckboxEventArgs>();\n    /**\n     * Returns the class of the checkbox component.\n     * ```typescript\n     * let class =  this.checkbox.cssClass;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox')\n    public cssClass = 'igx-checkbox';\n    /**\n     * Sets/gets whether the checkbox component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.checkbox.focused =  true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.checkbox.focused;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--focused')\n    public focused = false;\n    /**\n     * Sets/gets the checkbox indeterminate visual state.\n     * Default value is `false`;\n     * ```html\n     * <igx-checkbox [indeterminate] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isIndeterminate = this.checkbox.indeterminate;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--indeterminate')\n    @Input() public indeterminate = false;\n    /**\n     * Sets/gets whether the checkbox is checked.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [checked] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isChecked =  this.checkbox.checked;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets whether the checkbox is disabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disabled] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isDesabled = this.checkbox.disabled;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--disabled')\n    @Input() public disabled = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * If `disabled` is `false`, switches the `checked` state.\n     * ```typescript\n     * this.checkbox.toggle();\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.indeterminate = false;\n        this.focused = false;\n        this.checked = !this.checked;\n\n        this.change.emit({ checked: this.checked, checkbox: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxChange(event) {\n        // We have to stop the original checkbox change event\n        // from bubbling up since we emit our own change event\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxClick(event) {\n        // Since the original checkbox is hidden and the label\n        // is used for styling and to change the checked state of the checkbox,\n        // we need to prevent the checkbox click event from bubbling up\n        // as it gets triggered on label click\n        event.stopPropagation();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        // We use a span element as a placeholder label\n        // in place of the native label, we need to emit\n        // the change event separately here alongside\n        // the click event emitted on click\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case LabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case LabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n}\n\nexport const IGX_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]`,\n    providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]\n})\nexport class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator { }\n/**\n *The IgxCheckboxModule provides the {@link IgxCheckboxComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxCheckboxModule { }\n","import {\n    AfterViewInit,\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    Renderer2,\n    TemplateRef\n} from '@angular/core';\nimport { DisplayDensity } from '../core/displayDensity';\nimport {\n    IgxDragDirective,\n    IDragBaseEventArgs,\n    IDragStartEventArgs,\n    IgxDropEnterEventArgs,\n    IgxDropEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\n\n\nexport interface IBaseChipEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipComponent;\n}\n\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\n\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\n\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\n\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n\nlet CHIP_ID = 0;\n\n@Component({\n    selector: 'igx-chip',\n    template: `<div #chipArea class=\"igx-chip__item\"\n    [attr.tabindex]=\"chipTabindex\"\n    (keydown)=\"onChipKeyDown($event)\"\n    [igxDrag]=\"{chip: this}\"\n    [hideBaseOnDrag]=\"true\"\n    [animateOnRelease]=\"true\"\n    [ghostImageClass]=\"ghostClass\"\n    (dragStart)=\"onChipDragStart($event)\"\n    (dragEnd)=\"onChipDragEnd()\"\n    (returnMoveEnd)=\"onChipMoveEnd($event)\"\n    (dragClicked)=\"onChipDragClicked($event)\"\n    igxDrop\n    (onEnter)=\"onChipDragEnterHandler($event)\"\n    (onDrop)=\"onChipDrop($event)\">\n\n    <div [ngClass]=\"selectClass(selected)\" *ngIf=\"selectable\">\n        <ng-container *ngTemplateOutlet=\"selectIconTemplate\"></ng-container>\n    </div>\n\n    <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n\n    <div class=\"igx-chip__content\">\n        <ng-content></ng-content>\n    </div>\n\n    <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n\n    <div class=\"igx-chip__remove\" *ngIf=\"removable\"\n        tabindex=\"0\"\n        (keydown)=\"onRemoveBtnKeyDown($event)\"\n        (pointerdown)=\"onRemoveMouseDown($event)\"\n        (mousedown)=\"onRemoveMouseDown($event)\"\n        (click)=\"onRemoveClick($event)\"\n        (touchmove)=\"onRemoveTouchMove()\"\n        (touchend)=\"onRemoveTouchEnd($event)\">\n        <ng-container *ngTemplateOutlet=\"removeButtonTemplate\"></ng-container>\n    </div>\n</div>\n\n<ng-template #defaultSelectIcon>\n    <igx-icon>done</igx-icon>\n</ng-template>\n\n<ng-template #defaultRemoveIcon>\n    <igx-icon>cancel</igx-icon>\n</ng-template>\n`\n})\nexport class IgxChipComponent {\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-chip-${CHIP_ID++}`;\n\n    /**\n     * An @Input property that stores data related to the chip.\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public data: any;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public draggable = false;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public removable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public removeIcon: TemplateRef<any>;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public selectable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public selectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     */\n    @Input()\n    public set selected(newValue: boolean) {\n        this.changeSelection(newValue);\n    }\n\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    public get selected() {\n        return this._selected;\n    }\n\n    /**\n     * Returns the `IgxChipComponent` theme.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     *     ngAfterViewInit(){\n     *     let chipTheme = this.chip.displayDensity;\n     * }\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity;\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` theme.\n     * Available options are `compact`, `cosy`, `comfortable`.\n     * The default theme is `comfortable`.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [displayDensity]=\"'compact'\"></igx-chip>\n     * ```\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        switch (val) {\n            case 'compact':\n                this._displayDensity = DisplayDensity.compact;\n                break;\n            case 'cosy':\n                this._displayDensity = DisplayDensity.cosy;\n                break;\n            case 'comfortable':\n            default:\n                this._displayDensity = DisplayDensity.comfortable;\n        }\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public set color(newColor) {\n        this.chipArea.nativeElement.style.backgroundColor = newColor;\n    }\n\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    public get color() {\n        return this.chipArea.nativeElement.style.backgroundColor;\n    }\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     * ```typescript\n     * moveStarted(event: IBaseChipEventArgs){\n     *     let movingChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     * ```typescript\n     * moveEnded(event: IBaseChipEventArgs){\n     *     let movedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     * ```typescript\n     * remove(event: IBaseChipEventArgs){\n     *     let removedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onRemove)=\"remove($event)\">\n     * ```\n     */\n    @Output()\n    public onRemove = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     * ```typescript\n     * chipClick(event: IChipClickEventArgs){\n     *     let clickedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onClick)=\"chipClick($event)\">\n     * ```\n     */\n    @Output()\n    public onClick = new EventEmitter<IChipClickEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     * ```typescript\n     * chipSelect(event: IChipSelectEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onSelection)=\"chipSelect($event)\">\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipSelectEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     * ```typescript\n     * chipKeyDown(event: IChipKeyDownEventArgs){\n     *     let keyDown = event.key;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onKeyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    @Output()\n    public onKeyDown = new EventEmitter<IChipKeyDownEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     * ```typescript\n     * chipEnter(event: IChipEnterDragAreaEventArgs){\n     *     let targetChip = event.targetChip;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    @Output()\n    public onDragEnter = new EventEmitter<IChipEnterDragAreaEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [];\n        switch (this._displayDensity) {\n            case DisplayDensity.cosy:\n                classes.push('igx-chip--cosy');\n                break;\n            case DisplayDensity.compact:\n                classes.push('igx-chip--compact');\n                break;\n            default:\n                classes.push('igx-chip');\n        }\n        classes.push(this.disabled ? 'igx-chip--disabled' : '');\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: ElementRef })\n    public chipArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: IgxDragDirective })\n    public dragDir: IgxDragDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRemoveIcon', { read: TemplateRef })\n    public defaultRemoveIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultSelectIcon', { read: TemplateRef })\n    public defaultSelectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get removeButtonTemplate() {\n        return this.removeIcon || this.defaultRemoveIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get selectIconTemplate() {\n        return this.selectIcon || this.defaultSelectIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get ghostClass(): string {\n        switch (this._displayDensity) {\n            case DisplayDensity.cosy:\n                return 'igx-chip__ghost--cosy';\n            case DisplayDensity.compact:\n                return 'igx-chip__ghost--compact';\n            default:\n                return 'igx-chip__ghost';\n        }\n    }\n\n    public get chipTabindex() {\n        return !this.disabled ? 0 : '';\n    }\n\n    protected _displayDensity = DisplayDensity.comfortable;\n    protected _selected = false;\n    protected _selectedItemClass = 'igx-chip__item--selected';\n    protected _movedWhileRemoving = false;\n\n    constructor(public cdr: ChangeDetectorRef, public elementRef: ElementRef, private renderer: Renderer2) { }\n\n    /**\n     * @hidden\n     */\n    public selectClass(condition: boolean): object {\n        const SELECT_CLASS = 'igx-chip__select';\n\n        return {\n            [SELECT_CLASS]: condition,\n            [`${SELECT_CLASS}--hidden`]: !condition\n        };\n    }\n\n    protected changeSelection(newValue: boolean, srcEvent = null) {\n        const onSelectArgs: IChipSelectEventArgs = {\n            originalEvent: srcEvent,\n            owner: this,\n            selected: false,\n            cancel: false\n        };\n\n        if (newValue && !this._selected) {\n            onSelectArgs.selected = true;\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        } else if (!newValue && this._selected) {\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: KeyboardEvent) {\n        const keyDownArgs: IChipKeyDownEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n\n        this.onKeyDown.emit(keyDownArgs);\n        if (keyDownArgs.cancel) {\n            return;\n        }\n\n        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n        }\n\n        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n\n        if (event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveBtnKeyDown(event: KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onRemoveMouseDown(event: PointerEvent | MouseEvent) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveClick(event: MouseEvent | TouchEvent) {\n        this.onRemove.emit({\n            originalEvent: event,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchMove() {\n        // We don't remove chip if user starting touch interacting on the remove button moves the chip\n        this._movedWhileRemoving = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchEnd(event: TouchEvent) {\n        if (!this._movedWhileRemoving) {\n            this.onRemoveClick(event);\n        }\n        this._movedWhileRemoving = false;\n    }\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrag behaviour\n    public onChipDragStart(event: IDragStartEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n        event.cancel = !this.draggable || this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragEnd() {\n        this.dragDir.dropFinished();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipMoveEnd(event: IDragBaseEventArgs) {\n        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n\n        if (this.selected) {\n            this.chipArea.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragClicked(event: IDragBaseEventArgs) {\n        const clickEventArgs: IChipClickEventArgs = {\n            originalEvent: event.originalEvent,\n            owner: this,\n            cancel: false\n        };\n        this.onClick.emit(clickEventArgs);\n\n        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event.originalEvent);\n        }\n    }\n    // End chip igxDrag behaviour\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrop behaviour\n    public onChipDragEnterHandler(event: IgxDropEnterEventArgs) {\n        if (this.dragDir === event.drag || !event.dragData || !event.dragData.chip) {\n            return;\n        }\n\n        const eventArgs: IChipEnterDragAreaEventArgs = {\n            owner: this,\n            dragChip: event.dragData.chip,\n            originalEvent: event\n        };\n        this.onDragEnter.emit(eventArgs);\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDrop(event: IgxDropEventArgs) {\n        // Cancel the default drop logic\n        event.cancel = true;\n    }\n    // End chip igxDrop behaviour\n}\n","import {\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    DoCheck,\n    AfterViewInit,\n    OnDestroy,\n    ElementRef\n} from '@angular/core';\nimport {\n    IgxChipComponent,\n    IChipSelectEventArgs,\n    IChipKeyDownEventArgs,\n    IChipEnterDragAreaEventArgs,\n    IBaseChipEventArgs\n} from './chip.component';\nimport {\n    IgxDropEnterEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/internal/Subject';\n\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipsAreaComponent;\n}\n\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\n\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n\n@Component({\n    selector: 'igx-chips-area',\n    template: `<ng-content></ng-content>\n`,\n})\nexport class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass() {\n        const classes = ['igx-chip-area'];\n        classes.push(this.class);\n\n        return classes.join(' ');\n    }\n\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.width.px')\n    @Input()\n    public width: number;\n\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.height.px')\n    @Input()\n    public height: number;\n\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public changedOrder(event: IChipsAreaReorderEventArgs){\n     *      let chips: IgxChipComponent[] = event.chipsArray;\n     * }\n     * ```\n     */\n    @Output()\n    public onReorder = new EventEmitter<IChipsAreaReorderEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public selection(event: IChipsAreaSelectEventArgs){\n     *      let selectedChips: IgxChipComponent[] = event.newSelection;\n     * }\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipsAreaSelectEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveStart(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveEnd(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    @ContentChildren(IgxChipComponent)\n    public chipsList: QueryList<IgxChipComponent>;\n\n    private modifiedChipsArray: IgxChipComponent[];\n    private _differ: IterableDiffer<IgxChipComponent> | null = null;\n    private selectedChips: IgxChipComponent[] = [];\n    protected destroy$ = new Subject<boolean>();\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef,\n        private _iterableDiffers: IterableDiffers) {\n        this._differ = this._iterableDiffers.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.\n        if (this.chipsList.length) {\n            this.selectedChips = this.chipsList.filter((item: IgxChipComponent) => item.selected);\n            if (this.selectedChips.length) {\n                this.onSelection.emit({\n                    originalEvent: null,\n                    newSelection: this.selectedChips,\n                    owner: this\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this.chipsList) {\n            const changes = this._differ.diff(this.chipsList.toArray());\n            if (changes) {\n                changes.forEachAddedItem((addedChip) => {\n                    addedChip.item.onMoveStart.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveStart(args);\n                    });\n                    addedChip.item.onMoveEnd.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveEnd(args);\n                    });\n                    addedChip.item.onDragEnter.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipDragEnter(args);\n                    });\n                    addedChip.item.onKeyDown.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipKeyDown(args);\n                    });\n                    if (addedChip.item.selectable) {\n                        addedChip.item.onSelection.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                            this.onChipSelectionChange(args);\n                        });\n                    }\n                });\n                this.modifiedChipsArray = this.chipsList.toArray();\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs) {\n        let orderChanged = false;\n        const chipsArray = this.chipsList.toArray();\n        const dragChipIndex = chipsArray.findIndex((el) => el === event.owner);\n        if (event.originalEvent.shiftKey === true) {\n            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);\n                if (orderChanged) {\n                    setTimeout(() => {\n                        this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();\n                    });\n                }\n            } else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);\n            }\n        } else {\n            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {\n                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();\n            } else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&\n                dragChipIndex < chipsArray.length - 1) {\n                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs) {\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs) {\n        const dropChipRect = event.owner.elementRef.nativeElement.getBoundingClientRect();\n        const dropChipIndex = this.chipsList.toArray().findIndex((el) => el === event.owner);\n        const dragChipIndex = this.chipsList.toArray().findIndex((el) => el === event.dragChip);\n        if (dragChipIndex < dropChipIndex) {\n            // from the left to right\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);\n        } else {\n            // from the right to left\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected positionChipAtIndex(chipIndex, targetIndex, shiftRestLeft, originalEvent) {\n        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||\n            targetIndex < 0 || this.chipsList.length <= targetIndex) {\n            return false;\n        }\n\n        const chipsArray = this.chipsList.toArray();\n        const result: IgxChipComponent[] = [];\n        for (let i = 0; i < chipsArray.length; i++) {\n            if (shiftRestLeft) {\n                if (chipIndex <= i && i < targetIndex) {\n                    result.push(chipsArray[i + 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            } else {\n                if (targetIndex < i && i <= chipIndex) {\n                    result.push(chipsArray[i - 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            }\n        }\n        this.modifiedChipsArray = result;\n\n        const eventData: IChipsAreaReorderEventArgs = {\n            chipsArray: this.modifiedChipsArray,\n            originalEvent: originalEvent,\n            owner: this\n        };\n        this.onReorder.emit(eventData);\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs) {\n        if (event.selected) {\n            this.selectedChips.push(event.owner);\n        } else if (!event.selected) {\n            this.selectedChips = this.selectedChips.filter((chip) => {\n                return chip.id !== event.owner.id;\n            });\n        }\n        this.onSelection.emit({\n            originalEvent: event.originalEvent,\n            newSelection: this.selectedChips,\n            owner: this\n        });\n    }\n}\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-prefix,[igxPrefix]'\n})\nexport class IgxPrefixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxPrefixDirective],\n    exports: [IgxPrefixDirective]\n})\nexport class IgxPrefixModule { }\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-suffix,[igxSuffix]'\n})\nexport class IgxSuffixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSuffixDirective],\n    exports: [IgxSuffixDirective]\n})\nexport class IgxSuffixModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxChipComponent } from './chip.component';\nimport { IgxChipsAreaComponent } from './chips-area.component';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxPrefixModule, IgxPrefixDirective} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule, IgxSuffixDirective } from '../directives/suffix/suffix.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxChipsAreaComponent,\n    IgxChipComponent\n  ],\n  exports: [\n    IgxChipsAreaComponent,\n    IgxChipComponent,\n    IgxPrefixDirective,\n    IgxSuffixDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule,\n    IgxDragDropModule,\n    IgxPrefixModule,\n    IgxSuffixModule\n  ]\n})\nexport class IgxChipsModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeader]'\n})\nexport class IgxComboHeaderDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboFooter]'\n})\nexport class IgxComboFooterDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboItem]'\n})\nexport class IgxComboItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboEmpty]'\n})\nexport class IgxComboEmptyDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeaderItem]'\n})\n\nexport class IgxComboHeaderItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboAddItem]'\n})\nexport class IgxComboAddItemDirective {\n}\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string,  Set<any>> = new Map<string, Set<any>>();\n\n    /**\n     * Get current component selection.\n     * @param componentID ID of the component.\n     */\n    public get(componentID: string): Set<any> {\n        return this.selection.get(componentID);\n    }\n\n    /**\n     * Set new component selection.\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    public set(componentID: string, newSelection: Set<any>) {\n        if (!componentID) {\n            throw Error('Invalid value for component id!');\n        }\n        this.selection.set(componentID, newSelection);\n    }\n\n    /**\n     * Clears selection for component.\n     * @param componentID ID of the component.\n     */\n    public clear(componentID: string) {\n        this.selection.set(componentID, this.get_empty());\n    }\n\n    /**\n     * Get current component selection length.\n     * @param componentID ID of the component.\n     */\n    public size(componentID: string): number {\n        const sel = this.get(componentID);\n        return sel ? sel.size : 0;\n    }\n\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    public add_item(componentID: string, itemID, sel?: Set<any>): Set<any> {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            sel = this.get_empty();\n        }\n        if (!itemID && itemID !== 0) {\n            throw Error('Invalid value for item id!');\n        }\n        sel.add(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    public add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any> {\n        let selection: Set<any>;\n        if (clearSelection) {\n            selection = this.get_empty();\n        }\n        itemIDs.forEach((item) => selection = this.add_item(componentID, item, selection));\n        return selection;\n    }\n\n    /**\n     * Add item to the current component selection.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    public select_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.add_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Add items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    public select_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.add_items(componentID, itemID, clearSelection));\n    }\n\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    public delete_item(componentID: string, itemID, sel?: Set<any>) {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            return;\n        }\n        sel.delete(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    public delete_items(componentID: string, itemIDs: any[]): Set<any> {\n        let selection: Set<any>;\n        itemIDs.forEach((deselectedItem) => selection = this.delete_item(componentID, deselectedItem, selection));\n        return selection;\n    }\n\n    /**\n     * Remove item from the current component selection.\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    public deselect_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.delete_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Remove items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    public deselect_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.delete_items(componentID, itemID));\n    }\n\n    /**\n     * Check if the item is selected in the component selection.\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    public is_item_selected(componentID: string, itemID): boolean {\n        const sel = this.get(componentID);\n        if (!sel) {\n            return false;\n        }\n        return sel.has(itemID);\n    }\n\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    public first_item(componentID: string) {\n        const sel = this.get(componentID);\n        if (sel && sel.size > 0) {\n            return sel.values().next().value;\n       }\n    }\n\n    /**\n     * Returns whether all items are selected.\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    public are_all_selected(componentID: string, dataCount: number): boolean {\n        return this.size(componentID) === dataCount;\n    }\n\n    /**\n     * Returns whether any of the items is selected.\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    public are_none_selected(componentID: string): boolean {\n        return this.size(componentID) === 0;\n    }\n\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    public get_all_ids(data, primaryKey?) {\n        return primaryKey ? data.map((x) => x[primaryKey]) : data;\n    }\n\n    /**\n     * Returns empty selection collection.\n     * @returns empty set.\n    */\n    public get_empty() {\n        return new Set();\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    DoCheck\n} from '@angular/core';\nimport { IgxDropDownComponent, ISelectionEventArgs } from './drop-down.component';\n\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n\nexport class IgxDropDownItemBase {\n\n    /**\n     * @hidden\n     */\n    protected _isFocused = false;\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        return;\n    }\n\n    /**\n     * Gets/sets the value of the item if the item is databound\n     *\n     * ```typescript\n     * // usage in IgxDropDownItemComponent\n     * // get\n     * let mySelectedItemValue = this.dropdown.selectedItem.value;\n     *\n     * // set\n     * let mySelectedItem = this.dropdown.selectedItem;\n     * mySelectedItem.value = { id: 123, name: 'Example Name' }\n     *\n     * // usage in IgxComboItemComponent\n     * // get\n     * let myComboItemValue = this.combo.items[0].value;\n     * ```\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drop-down__item')\n    get itemStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.isSelected; // true\n     * ```\n     */\n    get isSelected() {\n        return this.dropDown.selectedItem === this;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-drop-down__item--selected')\n    get selectedStyle(): boolean {\n        return this.isSelected;\n    }\n\n    /**\n     * Sets/gets if the given item is focused\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemFocused = mySelectedItem.isFocused;\n     * ```\n     */\n    @HostBinding('class.igx-drop-down__item--focused')\n    get isFocused() {\n        return this._isFocused;\n    }\n\n    /**\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" isFocused={{!item.isFocused}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    set isFocused(value: boolean) {\n        if (this.disabled || this.isHeader) {\n            this._isFocused = false;\n            return;\n        }\n\n        if (this.dropDown.allowItemsFocus && value && !this.dropDown.collapsed) {\n            this.elementRef.nativeElement.focus({ preventScroll: true });\n        }\n        this._isFocused = value;\n    }\n\n    /**\n     * Sets/gets if the given item is header\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemHeader = mySelectedItem.isHeader;\n     * ```\n     *\n     * ```html\n     *  <!--set-->\n     *  <igx-dropdown-item *ngFor=\"let item of items\">\n     *      <div *ngIf=\"items.indexOf(item) === 5; then item.isHeader = true\">\n     *          {{item.field}}\n*           </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__header')\n    public isHeader = false;\n\n    /**\n     * Sets/gets if the given item is disabled\n     *\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let myItemIsDisabled = mySelectedItem.disabled;\n     * ```\n     *\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{!item.disabled}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__item--disabled')\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    get setTabIndex() {\n        const shouldSetTabIndex = this.dropDown.allowItemsFocus && !(this.disabled || this.isHeader);\n        if (shouldSetTabIndex) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Gets item index\n     * @hidden\n     */\n    public get index(): number {\n        return this.dropDown.items.indexOf(this);\n    }\n\n    /**\n     * Gets item element height\n     * @hidden\n     */\n    public get elementHeight(): number {\n        return this.elementRef.nativeElement.clientHeight;\n    }\n\n    /**\n     * Get item html element\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef;\n    }\n\n    constructor(\n        public dropDown: any,\n        protected elementRef: ElementRef\n    ) { }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.isFocused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.elementRef.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        this.dropDown.navigateItem(this.index);\n        this.dropDown.selectItem(this, event);\n    }\n\n    /**\n     * @hidden\n     */\n    markItemSelected() {\n        this.dropDown.setSelectedItem(this.index);\n        this.dropDown.close();\n    }\n}\n\n@Component({\n    selector: 'igx-drop-down-item',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxDropDownItemComponent extends IgxDropDownItemBase implements DoCheck {\n    /**\n     * @hidden\n     */\n    protected _isSelected = false;\n\n    constructor(\n        @Inject(forwardRef(() => IgxDropDownComponent)) public dropDown: IgxDropDownComponent,\n        protected elementRef: ElementRef\n    ) {\n        super(dropDown, elementRef);\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.isSelected; // true\n     * ```\n     */\n    get isSelected() {\n        return this._isSelected;\n    }\n    @Input()\n    set isSelected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n\n        this._isSelected = value;\n    }\n\n    ngDoCheck(): void {\n        if (this.isSelected) {\n            const dropDownSelectedItem = this.dropDown.selectedItem;\n            if (!dropDownSelectedItem || this !== dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            }\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgModule,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChild,\n    Self,\n    Optional,\n    HostListener,\n    Directive,\n    Inject\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxToggleDirective, IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownItemComponent, IgxDropDownItemBase } from './drop-down-item.component';\nimport { OverlaySettings } from '../services';\nimport { IToggleView } from '../core/navigation';\nimport { IgxComboDropDownComponent } from '../combo/combo-dropdown.component';\nimport { CancelableEventArgs } from '../core/utils';\n\nlet NEXT_ID = 0;\n\n/**\n * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.\n *\n * @export\n */\nexport interface ISelectionEventArgs extends CancelableEventArgs {\n    oldSelection: IgxDropDownItemBase;\n    newSelection: IgxDropDownItemBase;\n}\n\n/** @hidden */\nexport enum Navigate {\n    Up = -1,\n    Down = 1\n}\n\n\nexport class IgxDropDownBase implements OnInit, IToggleView {\n    private _initiallySelectedItem: IgxDropDownItemComponent = null;\n    protected _focusedItem: any = null;\n    private _width;\n    private _height;\n    private _id = `igx-drop-down-${NEXT_ID++}`;\n\n    @ContentChildren(forwardRef(() => IgxDropDownItemComponent))\n    protected children: QueryList<IgxDropDownItemBase>;\n\n    @ViewChild(IgxToggleDirective)\n    protected toggleDirective: IgxToggleDirective;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<ISelectionEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     *  Gets the width of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentWidth = this.dropdown.width;\n     * ```\n     */\n    @Input()\n    get width() {\n        return this._width;\n    }\n    /**\n     * Sets the width of the drop down\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [width]='160px'></igx-drop-down>\n     * ```\n     */\n    set width(value) {\n        this._width = value;\n        this.toggleDirective.element.style.width = value;\n    }\n\n    /**\n     * Gets the height of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentHeight = this.dropdown.height;\n     * ```\n     */\n    @Input()\n    get height() {\n        return this._height;\n    }\n    /**\n     * Sets the height of the drop down\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [height]='400px'></igx-drop-down>\n     * ```\n     */\n    set height(value) {\n        this._height = value;\n        this.toggleDirective.element.style.height = value;\n    }\n\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public allowItemsFocus = false;\n\n    /**\n     * Gets the drop down's id\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentId = this.dropdown.id;\n     * ```\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n    /**\n     * Sets the drop down's id\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>\n     * ```\n     */\n    set id(value: string) {\n        this.selection.set(value, this.selection.get(this.id));\n        this._id = value;\n        this.toggleDirective.id = value;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.toggleDirective.collapsed;\n    }\n\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    public get selectedItem(): any {\n        const selectedItem = this.selection.first_item(this.id);\n        if (selectedItem) {\n            if (selectedItem.isSelected) {\n                return selectedItem;\n            }\n            this.selection.clear(this.id);\n        }\n        return null;\n    }\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxDropDownItemBase[] {\n        const items: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * Get all header items\n     *\n     * ```typescript\n     * let myDropDownHeaderItems = this.dropdown.headers;\n     * ```\n     */\n    public get headers(): IgxDropDownItemBase[] {\n        const headers: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Get dropdown html element\n     *\n     * ```typescript\n     * let myDropDownElement = this.dropdown.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Get dropdown's html element of it scroll container\n     */\n    protected get scrollContainer() {\n        return this.toggleDirective.element;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService) { }\n\n    /**\n     * Select an item by index\n     * @param index of the item to select\n     */\n    setSelectedItem(index: number) {\n        if (index < 0 || index >= this.items.length) {\n            return;\n        }\n\n        const newSelection = this.items.find((item) => item.index === index);\n        if (newSelection.isHeader) {\n            return;\n        }\n\n        this.changeSelectedItem(newSelection);\n    }\n\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    open(overlaySettings?: OverlaySettings) {\n        this.toggleDirective.open(overlaySettings);\n    }\n\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    close() {\n        this.toggleDirective.close();\n    }\n\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    toggle(overlaySettings?: OverlaySettings) {\n        if (this.toggleDirective.collapsed) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get focusedItem() {\n        return this._focusedItem;\n    }\n\n    /**\n     * @hidden\n     */\n    public set focusedItem(item) {\n        this._focusedItem = item;\n    }\n\n    /**\n     * @hidden\n     */\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this._focusedItem.index;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        this.navigateItem(newIndex, direction);\n    }\n\n    /**\n     * @hidden\n     */\n    navigateFirst() {\n        this.navigate(Navigate.Down, -1);\n    }\n\n    /**\n     * @hidden\n     */\n    navigateLast() {\n        this.navigate(Navigate.Up, this.items.length);\n    }\n\n    /**\n     * @hidden\n     */\n    navigateNext() {\n        this.navigate(Navigate.Down);\n    }\n\n    /**\n     * @hidden\n     */\n    navigatePrev() {\n        this.navigate(Navigate.Up);\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.toggleDirective.id = this.id;\n        this.selection.clear(this.id);\n    }\n\n\n    /**\n     * @hidden\n     */\n    onToggleOpening(e: CancelableEventArgs) {\n        const eventArgs = { cancel: false };\n        this.onOpening.emit(eventArgs);\n        e.cancel = eventArgs.cancel;\n        if (eventArgs.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleOpened() {\n        this._initiallySelectedItem = this.selectedItem;\n        this._focusedItem = this.selectedItem;\n        if (this._focusedItem) {\n            this._focusedItem.isFocused = true;\n        } else if (this.allowItemsFocus) {\n            const firstItemIndex = this.getNearestSiblingFocusableItemIndex(-1, Navigate.Down);\n            if (firstItemIndex !== -1) {\n                this.navigateItem(firstItemIndex);\n            }\n        }\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleClosing(e: CancelableEventArgs) {\n        const eventArgs = { cancel: false };\n        this.onClosing.emit(eventArgs);\n        e.cancel = eventArgs.cancel;\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleClosed() {\n        if (this._focusedItem) {\n            this._focusedItem.isFocused = false;\n        }\n\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollToItem(item: IgxDropDownItemBase) {\n        const itemPosition = this.calculateScrollPosition(item);\n        this.scrollContainer.scrollTop = (itemPosition);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollToHiddenItem(newItem: IgxDropDownItemBase) {\n        const elementRect = newItem.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        if (parentRect.top > elementRect.top) {\n            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);\n        }\n\n        if (parentRect.bottom < elementRect.bottom) {\n            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectItem(item: IgxDropDownItemBase, event?) {\n        if (item === null) {\n            return;\n        }\n        this.changeSelectedItem(item);\n\n        if (event) {\n            this.toggleDirective.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected changeSelectedItem(newSelection?: IgxDropDownItemBase): boolean {\n        const oldSelection = this.selectedItem;\n        if (!newSelection) {\n            newSelection = this._focusedItem;\n        }\n\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n        if (!args.cancel) {\n            this.selection.set(this.id, new Set([newSelection]));\n        }\n\n        return !args.cancel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateScrollPosition(item: IgxDropDownItemBase): number {\n        if (!item) {\n            return 0;\n        }\n\n        const elementRect = item.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        const scrollDelta = parentRect.top - elementRect.top;\n        let scrollPosition = this.scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = this.scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += item.elementHeight / 2;\n\n        return Math.floor(scrollPosition);\n    }\n\n    private getNearestSiblingFocusableItemIndex(startIndex: number, direction: Navigate): number {\n        let index = startIndex;\n        while (this.items[index + direction] && this.items[index + direction].disabled) {\n            index += direction;\n        }\n\n        index += direction;\n        if (index >= 0 && index < this.items.length) {\n            return index;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected navigateItem(newIndex: number, direction?: Navigate) {\n        if (newIndex !== -1) {\n            const oldItem = this._focusedItem;\n            const newItem = this.items[newIndex];\n            if (oldItem) {\n                oldItem.isFocused = false;\n            }\n            this._focusedItem = newItem;\n            this.scrollToHiddenItem(newItem);\n            this._focusedItem.isFocused = true;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxDropDownItemNavigation]'\n})\nexport class IgxDropDownItemNavigationDirective {\n\n    private _target;\n\n    constructor(private element: ElementRef,\n        @Inject(forwardRef(() => IgxDropDownComponent)) @Self() @Optional() public dropdown: IgxDropDownComponent) { }\n\n    /**\n     * @hidden\n     */\n    get target() {\n        return this._target;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input('igxDropDownItemNavigation')\n    set target(target: IgxDropDownBase) {\n        this._target = target ? target : this.dropdown;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        if (event) {\n            const key = event.key.toLowerCase();\n            if (!this.target.collapsed) { // If dropdown is opened\n                const navKeys = ['esc', 'escape', 'enter', 'tab', 'space', 'spacebar', ' ',\n            'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];\n                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            } else { // If dropdown is closed, do nothing\n                return;\n            }\n            switch (key) {\n                case 'esc':\n                case 'escape':\n                    this.onEscapeKeyDown(event);\n                    break;\n                case 'enter':\n                case 'tab':\n                    this.onEnterKeyDown(event);\n                    break;\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                    this.onSpaceKeyDown(event);\n                    break;\n                case 'arrowup':\n                case 'up':\n                    this.onArrowUpKeyDown(event);\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    this.onArrowDownKeyDown(event);\n                    break;\n                case 'home':\n                    this.onHomeKeyDown(event);\n                    break;\n                case 'end':\n                    this.onEndKeyDown(event);\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    onEscapeKeyDown(event) {\n        this.target.close();\n    }\n\n    /**\n     * @hidden\n     */\n    onSpaceKeyDown(event) {\n        // V.S. : IgxDropDownComponent.selectItem needs event to be true in order to close DD as per specification\n        this.target.selectItem(this.target.focusedItem, this.target instanceof IgxDropDownComponent);\n    }\n\n    /**\n     * @hidden\n     */\n    onEnterKeyDown(event) {\n        if (!(this.target instanceof IgxDropDownComponent)) {\n            if (this.target.focusedItem.value === 'ADD ITEM') {\n                const targetC = this.target as IgxComboDropDownComponent;\n                targetC.combo.addItemToCollection();\n            } else {\n                this.target.close();\n            }\n            return;\n        }\n        this.target.selectItem(this.target.focusedItem, event);\n    }\n\n    /**\n     * @hidden\n     */\n    onArrowDownKeyDown(event) {\n        this.target.navigateNext();\n    }\n\n    /**\n     * @hidden\n     */\n    onArrowUpKeyDown(event) {\n        this.target.navigatePrev();\n    }\n\n    /**\n     * @hidden\n     */\n    onEndKeyDown(event) {\n        this.target.navigateLast();\n    }\n\n    /**\n     * @hidden\n     */\n    onHomeKeyDown(event) {\n        this.target.navigateFirst();\n    }\n}\n\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop-down.html)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Component({\n    selector: 'igx-drop-down',\n    template: `<div class=\"igx-drop-down\">\n    <div class=\"igx-drop-down__list\" igxToggle (onOpening)=\"onToggleOpening($event)\" (onOpened)=\"onToggleOpened()\" (onClosing)=\"onToggleClosing($event)\" (onClosed)=\"onToggleClosed()\">\n        <ng-container *ngIf=\"!collapsed\">\n            <ng-content></ng-content>\n        </ng-container>\n    </div>\n</div>`\n})\nexport class IgxDropDownComponent extends IgxDropDownBase {\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService) {\n        super(elementRef, cdr, selection);\n    }\n\n    protected changeSelectedItem(newSelection?: IgxDropDownItemComponent): boolean {\n        const oldSelection = this.selectedItem;\n        const selectionChanged = super.changeSelectedItem(newSelection);\n\n        if (selectionChanged) {\n            if (oldSelection) {\n                oldSelection.isSelected = false;\n            }\n            if (newSelection) {\n                newSelection.isSelected = true;\n            }\n        }\n\n        return selectionChanged;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownItemNavigationDirective],\n    exports: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownItemNavigationDirective],\n    imports: [CommonModule, IgxToggleModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxDropDownModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nenum IgxHintPosition {\n    START,\n    END\n}\n\n@Directive({\n    selector: 'igx-hint,[igxHint]'\n})\nexport class IgxHintDirective implements OnInit {\n    private _position: IgxHintPosition = IgxHintPosition.START;\n    /**\n     * Sets/gets whether the hint position is at the start.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionStart = true;\n     * ```\n     * ```typescript\n     * let isHintPositionStart = this.igxHint.isPositionStart;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--start')\n    public isPositionStart = false;\n    /**\n     * Sets/gets whether the hint position is at the end.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionEnd = true;\n     * ```\n     * ```typescript\n     * let isHintPositionEnd = this.igxHint.isPositionEnd;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--end')\n    public isPositionEnd = false;\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     * Sets the position of the hint.\n     * ```html\n     * <igx-input-group>\n     *  <input igxInput type=\"text\"/>\n     *  <igx-hint #hint [position]=\"'start'\">IgxHint displayed at the start</igx-hint>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @Input('position')\n    set position(value: string) {\n        const position: IgxHintPosition = (IgxHintPosition as any)[value.toUpperCase()];\n        if (position !== undefined) {\n            this._position = position;\n            this._applyPosition(this._position);\n        }\n    }\n    /**\n     * Gets the position of the hint.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * let hintPosition =  this.igxHint.position;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    get position() {\n        return this._position.toString();\n    }\n    /**\n     *@hidden\n     */\n    ngOnInit() {\n        this._applyPosition(this._position);\n    }\n\n    private _applyPosition(position: IgxHintPosition) {\n        this.isPositionStart = this.isPositionEnd = false;\n        switch (position) {\n            case IgxHintPosition.START:\n                this.isPositionStart = true;\n                break;\n            case IgxHintPosition.END:\n                this.isPositionEnd = true;\n                break;\n            default: break;\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { IgxInputGroupComponent } from '../../input-group/input-group.component';\n\nconst nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];\n\nexport enum IgxInputState {\n    INITIAL,\n    VALID,\n    INVALID\n}\n\n@Directive({\n    selector: '[igxInput]'\n})\nexport class IgxInputDirective implements AfterViewInit, OnDestroy {\n    private _valid = IgxInputState.INITIAL;\n    private _statusChanges$: Subscription;\n\n    constructor(\n        @Inject(forwardRef(() => IgxInputGroupComponent))\n        public inputGroup: IgxInputGroupComponent,\n        @Optional() @Self() @Inject(NgModel) protected ngModel: NgModel,\n        @Optional() @Self() @Inject(FormControlName) protected formControl: FormControlName,\n        protected element: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    private get ngControl(): NgControl {\n        return this.ngModel ? this.ngModel : this.formControl;\n    }\n    /**\n     * Sets the `value` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input('value')\n    set value(value: any) {\n        this.nativeElement.value = value;\n    }\n    /**\n     * Gets the `value` propery.\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let inputValue = this.igxInput.value;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     * Sets the `disabled` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set disabled(value: boolean) {\n        this.nativeElement.disabled = value;\n        this.inputGroup.disabled = value;\n    }\n    /**\n     * Gets the `disabled` property\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let isDisabled = this.igxInput.disabled;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get disabled() {\n        return this.nativeElement.hasAttribute('disabled');\n    }\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__input')\n    public isInput = false;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__textarea')\n    public isTextArea = false;\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.inputGroup.isFocused = true;\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.inputGroup.isFocused = false;\n        this._valid = IgxInputState.INITIAL;\n        if (this.ngControl) {\n            if (!this.ngControl.valid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        } else if (this._hasValidators() && !this.nativeElement.checkValidity()) {\n            this._valid = IgxInputState.INVALID;\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('input')\n    public onInput() {\n        if (!this.ngControl && this._hasValidators()) {\n            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;\n        }\n    }\n    /**\n     *@hidden\n     */\n    ngAfterViewInit() {\n        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');\n        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');\n        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');\n\n        // Also check the control's validators for required\n        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {\n            const validation = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = validation && validation.required;\n        }\n\n\n        const elTag = this.nativeElement.tagName.toLowerCase();\n        if (elTag === 'textarea') {\n            this.isTextArea = true;\n        } else {\n            this.isInput = true;\n        }\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this.cdr.detectChanges();\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n    /**\n     * Sets a focus on the igxInput.\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public focus() {\n        this.nativeElement.focus();\n    }\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    protected onStatusChanged() {\n        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {\n            if (this.ngControl.control.touched || this.ngControl.control.dirty) {\n                if (this.inputGroup.isFocused) {\n                    // the user is still typing in the control\n                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n                } else {\n                    // the user had touched the control previosly but now the value is changing due to changes in the form\n                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n                }\n            } else if (this._valid !== IgxInputState.INITIAL) {\n                this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            } else if (this._valid === IgxInputState.INITIAL && this.ngControl.value !== undefined && this.ngControl.invalid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        }\n    }\n    /**\n     * Gets whether the igxInput is required.\n     * ```typescript\n     * let isRequired = this.igxInput.required;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get required() {\n        return this.nativeElement.hasAttribute('required');\n    }\n    /**\n     * Gets whether the igxInput has a placeholder.\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get hasPlaceholder() {\n        return this.nativeElement.hasAttribute('placeholder');\n    }\n    /**\n     * Gets the placeholder element of the igxInput.\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get placeholder() {\n        return this.nativeElement.placeholder;\n    }\n\n    private _hasValidators(): boolean {\n        for (const nativeValidationAttribute of nativeValidationAttributes) {\n            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {\n                return true;\n            }\n        }\n\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n    /**\n     * Gets whether the igxInput is focused.\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get focused() {\n        return this.inputGroup.isFocused;\n    }\n    /**\n     * Gets the state of the igxInput.\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get valid(): IgxInputState {\n        return this._valid;\n    }\n    /**\n     * Sets the state of the igxInput.\n     * ```typescript\n     * this.igxInput.valid = IgxInputState.INVALID;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public set valid(value: IgxInputState) {\n        this._valid = value;\n    }\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxLabel]'\n})\nexport class IgxLabelDirective {\n    @HostBinding('class.igx-input-group__label')\n    public defaultClass = true;\n}\n","import { InjectionToken, Input } from '@angular/core';\n\n/**\n * Defines the posible values of the components' display density.\n */\nexport const enum DisplayDensity {\n    comfortable = 'comfortable',\n    cosy = 'cosy',\n    compact = 'compact'\n}\n\n/**\n * Describes the object used to configure the DisplayDensity in Angular DI.\n */\nexport interface IDisplayDensity {\n    displayDensity: DisplayDensity;\n}\n\n/**\n * Defines the DisplayDensity DI token.\n */\nexport const DisplayDensityToken = new InjectionToken<IDisplayDensity>('DisplayDensity');\n\n/**\n * Base class containing all logic required for implementing DisplayDensity.\n */\nexport class DisplayDensityBase {\n    protected _displayDensity: DisplayDensity | string;\n\n    /**\n     * Returns the theme of the component.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let componentTheme = this.component.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity;\n    }\n\n    /**\n     * Sets the theme of the component.\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        switch (val) {\n            case 'compact':\n                this._displayDensity = DisplayDensity.compact;\n                break;\n            case 'cosy':\n                this._displayDensity = DisplayDensity.cosy;\n                break;\n            case 'comfortable':\n            default:\n                this._displayDensity = DisplayDensity.comfortable;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    protected isCosy(): boolean {\n        return this._displayDensity === DisplayDensity.cosy ||\n            (!this._displayDensity && this.displayDensityOptions && this.displayDensityOptions.displayDensity === DisplayDensity.cosy);\n    }\n\n    /**\n     *@hidden\n     */\n    protected isComfortable(): boolean {\n        return this._displayDensity === DisplayDensity.comfortable ||\n            (!this._displayDensity && (!this.displayDensityOptions ||\n             this.displayDensityOptions.displayDensity === DisplayDensity.comfortable));\n    }\n\n    /**\n     *@hidden\n     */\n    protected isCompact(): boolean {\n        return this._displayDensity === DisplayDensity.compact ||\n            (!this._displayDensity && this.displayDensityOptions && this.displayDensityOptions.displayDensity === DisplayDensity.compact);\n    }\n\n    constructor(protected displayDensityOptions: IDisplayDensity) {}\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    QueryList,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxPrefixDirective, IgxPrefixModule} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixDirective, IgxSuffixModule } from '../directives/suffix/suffix.directive';\nimport { DisplayDensity, IDisplayDensity, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\n\nlet NEXT_ID = 0;\n\nenum IgxInputGroupType {\n    LINE,\n    BOX,\n    BORDER,\n    SEARCH\n}\n\n@Component({\n    selector: 'igx-input-group',\n    template: `<div class=\"igx-input-group__wrapper\" *ngIf=\"isTypeBox; else bundle\">\n    <ng-container *ngTemplateOutlet=\"bundle\"></ng-container>\n</div>\n<div class=\"igx-input-group__hint\" *ngIf=\"hasHints\">\n    <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n</div>\n<ng-template #bundle>\n    <div class=\"igx-input-group__bundle\">\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n        <div class=\"igx-input-group__bundle-main\">\n            <ng-content select=\"[igxLabel]\"></ng-content>\n            <ng-content select=\"[igxInput]\"></ng-content>\n        </div>\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n    </div>\n    <div class=\"igx-input-group__border\" *ngIf=\"hasBorder\"></div>\n</ng-template>\n`\n})\nexport class IgxInputGroupComponent extends DisplayDensityBase {\n    private _type = IgxInputGroupType.LINE;\n    private _filled = false;\n    private _supressInputAutofocus = false;\n\n    /**\n     * An ElementRef property of the `IgxInputGroupComponent`.\n     */\n    public element: ElementRef;\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-input-group [id]=\"'igx-input-group-55'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-input-group-${NEXT_ID++}`;\n\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     *```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *this.inputGroup.defaultClass = false;\n     *```\n     *}\n     */\n    @HostBinding('class.igx-input-group')\n    public defaultClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--placeholder')\n    public hasPlaceholder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--required')\n    public isRequired = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--focused')\n    public isFocused = false;\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--box')\n    public isBox = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--border')\n    public isBorder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--search')\n    public isSearch = false;\n\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('class.igx-input-group--disabled')\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.input.valid === IgxInputState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.input.valid === IgxInputState.INVALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--warning')\n    public hasWarning = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxHintDirective, { read: IgxHintDirective })\n    protected hints: QueryList<IgxHintDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this._supressInputAutofocus) {\n            this.input.focus();\n        }\n    }\n\n    /**\n     * An @Input property that sets how the input will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `line`.\n     * ```html\n     *<igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    @Input('type')\n    set type(value: string) {\n        const type: IgxInputGroupType = (IgxInputGroupType as any)[value.toUpperCase()];\n        if (type !== undefined) {\n            this.isBox = this.isBorder = this.isSearch = false;\n            switch (type) {\n                case IgxInputGroupType.BOX:\n                    this.isBox = true;\n                    break;\n                case IgxInputGroupType.BORDER:\n                    this.isBorder = true;\n                    break;\n                case IgxInputGroupType.SEARCH:\n                    this.isSearch = true;\n                    break;\n                default: break;\n            }\n\n            this._type = type;\n        }\n    }\n\n    /**\n     * Returns whether the input element of the input group will be automatically focused on click.\n     * ```typescript\n     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;\n     * ```\n     */\n    @Input()\n    public get supressInputAutofocus(): boolean {\n        return this._supressInputAutofocus;\n    }\n\n    /**\n     * Sets whether the input element of the input group will be automatically focused on click.\n     * ```html\n     * <igx-input-group [supressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    public set supressInputAutofocus(value: boolean) {\n        this._supressInputAutofocus = value;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--filled')\n    get isFilled() {\n        return this._filled || (this.input && this.input.value);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--cosy')\n    get isDisplayDensityCosy() {\n        return this.isCosy();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--comfortable')\n    get isDisplayDensityComfortable() {\n        return this.isComfortable();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--compact')\n    get isDisplayDensityCompact() {\n        return this.isCompact();\n    }\n\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * Values are `line` - 0, `box` - 1, `border` - 2  and `search` - 3. The default is `line`.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     *}\n     * ```\n     */\n    get type() {\n        return this._type.toString();\n    }\n\n    constructor(private _element: ElementRef, @Optional() @Inject(DisplayDensityToken) private _displayDensityOptions: IDisplayDensity) {\n        super(_displayDensityOptions);\n        this.element = _element;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     *}\n     * ```\n     */\n    get hasHints() {\n        return this.hints.length > 0;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputBroder = this.inputGroup.hasBorder;\n     *}\n     * ```\n     */\n    get hasBorder() {\n        return this._type === IgxInputGroupType.LINE ||\n            this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     *}\n     * ```\n     */\n    public get isTypeLine(): boolean {\n        return  this._type === IgxInputGroupType.LINE;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     *}\n     *```\n     */\n    get isTypeBox() {\n        return this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     *}\n     * ```\n     */\n    get isTypeBorder() {\n        return this._type === IgxInputGroupType.BORDER;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     *}\n     * ```\n     */\n    get isTypeSearch() {\n        return  this._type === IgxInputGroupType.SEARCH;\n    }\n\n    get filled() {\n        return this._filled;\n    }\n\n    set filled(val) {\n        this._filled = val;\n    }\n}\n\n/**\n * The IgxInputGroupModule provides the {@link IgxInputGroupComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxInputGroupComponent, IgxHintDirective, IgxInputDirective, IgxLabelDirective],\n    exports: [IgxInputGroupComponent,  IgxHintDirective, IgxInputDirective, IgxLabelDirective, IgxPrefixDirective, IgxSuffixDirective],\n    imports: [CommonModule, IgxPrefixModule, IgxSuffixModule]\n})\nexport class IgxInputGroupModule { }\n","import {\n    ChangeDetectorRef, Component, ContentChild,\n    ElementRef, forwardRef, Inject, QueryList, EventEmitter, OnDestroy\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxDropDownBase, Navigate } from '../drop-down/drop-down.component';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.component';\nimport { IgxComboComponent } from './combo.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { Subject } from 'rxjs';\nimport { CancelableEventArgs } from '../core/utils';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-drop-down',\n    template: `<div class=\"igx-drop-down\">\n    <div class=\"igx-drop-down__list\" igxToggle (onOpening)=\"onToggleOpening($event)\" (onOpened)=\"onToggleOpened()\" (onClosing)=\"onToggleClosing($event)\" (onClosed)=\"onToggleClosed()\">\n        <ng-container *ngIf=\"!collapsed\">\n            <ng-content></ng-content>\n        </ng-container>\n    </div>\n</div>`\n})\nexport class IgxComboDropDownComponent extends IgxDropDownBase implements OnDestroy {\n    private _children: QueryList<IgxDropDownItemBase>;\n    private _scrollPosition = 0;\n    private destroy$ = new Subject<boolean>();\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Inject(forwardRef(() => IgxComboComponent))\n        public combo: IgxComboComponent) {\n        super(elementRef, cdr, selection);\n    }\n\n    /**\n     * @hidden\n     */\n    protected get scrollContainer() {\n        return this.verticalScrollContainer.dc.location.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isScrolledToLast(): boolean {\n        const scrollTop = this.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const scrollHeight = this.verticalScrollContainer.getVerticalScroll().scrollHeight;\n        return Math.floor(scrollTop + this.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n    }\n\n    protected get lastVisibleIndex(): number {\n        return this.combo.totalItemCount ?\n            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :\n            this.items.length - 1;\n    }\n\n    /**\n     *  Event emitter overrides\n     *\n     * @hidden\n     */\n    public onOpened = this.combo.onOpened;\n\n    /**\n     * @hidden\n     */\n    public onOpening = this.combo.onOpening;\n\n    /**\n     * @hidden\n     */\n    public onClosing = this.combo.onClosing;\n\n    /**\n     * @hidden\n     */\n    public onClosed = this.combo.onClosed;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxForOfDirective), { read: IgxForOfDirective })\n    public verticalScrollContainer: IgxForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    protected get children(): QueryList<IgxDropDownItemBase> {\n        return this.combo.children;\n    }\n\n    protected set children(list: QueryList<IgxDropDownItemBase>) {\n        this._children = list;\n    }\n\n    /**\n     * @hidden\n     */\n    onFocus() {\n        this._focusedItem = this._focusedItem ? this._focusedItem : this.items.length ? this.items[0] : this.children.first;\n        if (this._focusedItem) {\n            this._focusedItem.isFocused = true;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    onBlur(evt?) {\n        if (this._focusedItem) {\n            this._focusedItem.isFocused = false;\n            this._focusedItem = null;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get selectedItem(): any[] {\n        const sel = this.selection.get(this.combo.id);\n        return sel ? Array.from(sel) : [];\n    }\n\n    /**\n     * @hidden\n     */\n    navigatePrev() {\n        if (this._focusedItem.index === 0 && this.verticalScrollContainer.state.startIndex === 0) {\n            this.combo.searchInput.nativeElement.focus();\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    navigateFirst() {\n        const vContainer = this.verticalScrollContainer;\n        if (vContainer.state.startIndex === 0) {\n            this.focusItem(0);\n            return;\n        }\n        vContainer.scrollTo(0);\n        this.subscribeNext(vContainer, () => {\n            this.combo.triggerCheck();\n            this.focusItem(0);\n            this.combo.triggerCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    navigateLast() {\n        const vContainer = this.verticalScrollContainer;\n        const scrollTarget = this.combo.totalItemCount ?\n            this.combo.totalItemCount - 1 :\n            Math.max(this.combo.data.length - 1, vContainer.igxForOf.length - 1);\n        if (vContainer.igxForOf.length <= vContainer.state.startIndex + vContainer.state.chunkSize) {\n            this.focusItem(this.items.length - 1);\n            return;\n        }\n        vContainer.scrollTo(scrollTarget);\n        this.subscribeNext(vContainer, () => {\n            this.combo.triggerCheck();\n            this.focusItem(this.items.length - 1);\n            this.combo.triggerCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    private navigateRemoteItem(direction) {\n        this.verticalScrollContainer.addScrollTop(direction * this.combo.itemHeight);\n        this.subscribeNext(this.verticalScrollContainer, () => {\n            if (direction === Navigate.Up) {\n                this.focusItem(0);\n            } else {\n                this.focusItem(this.focusedItem.index);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    setSelectedItem(itemID: any, select = true) {\n        this.combo.setSelectedItem(itemID, select);\n    }\n\n    /**\n     * @hidden\n     */\n    selectItem(item: IgxComboItemComponent, event?: Event) {\n        if (item.value === 'ADD ITEM') {\n            if (event) {\n                this.combo.addItemToCollection();\n            }\n        } else {\n            this.setSelectedItem(item.itemID);\n            this._focusedItem = item;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    navigateItem(newIndex: number, direction?: number) {\n        // Virtual scrolling holds one hidden loaded element at the bottom of the drop down list.\n        // At the top there isn't such a hidden element.\n        // That's why we hold the first or the one before the last list item as focused, during keyboard navigation.\n        // This means that if we want to focus next element, it's the last hidden element when scrolling down\n        // and when scrolling up it is not loaded at all.\n        // It's more special case when srcolling down and the hidden element is group header,\n        // which is not part of the this.items collection.\n        // In that case the real item is not hidden, but not loaded at all by the virtualization,\n        // and this is the same case as normal scroll up.\n        const vContainer = this.verticalScrollContainer;\n        const extraScroll = this.combo.isAddButtonVisible();\n        if (direction) {\n            if (direction === Navigate.Down && extraScroll) {\n                if (vContainer.igxForOf[vContainer.igxForOf.length - 1] === this.focusedItem.value) {\n                    if (this.focusedItem) {\n                        this.focusedItem.isFocused = false;\n                    }\n                    this.focusedItem = this.children.last;\n                    this.focusedItem.isFocused = true;\n                    return;\n                } else if (vContainer.igxForOf[vContainer.state.chunkSize + vContainer.state.startIndex - 2] ===\n                    this.focusedItem.value) {\n                    this.subscribeNext(vContainer, () => {\n                        if (this.focusedItem.isHeader &&\n                            vContainer.state.startIndex + vContainer.state.chunkSize < vContainer.igxForOf.length) {\n                            vContainer.scrollNext();\n                        }\n                    });\n                    vContainer.scrollNext();\n                    return;\n                }\n            }\n        }\n        if (newIndex === -1) {\n            this.navigateVirtualItem(direction, extraScroll ? 1 : 0);\n        } else if (newIndex === this.lastVisibleIndex && !this.isScrolledToLast) {\n            this.navigateVirtualItem(direction, extraScroll ? 1 : 0);\n        } else if (newIndex === this.lastVisibleIndex && this.isScrolledToLast) {\n            // When initially scrolling to the last item, a pseudo element is present in the children list\n            // We need to check if the element we're on is an actual element or an empty 'igx-combo-item' child\n            if (this.items[newIndex].element && this.items[newIndex].element.nativeElement.clientHeight) {\n                super.navigateItem(newIndex);\n            }\n            return;\n        } else {\n            super.navigateItem(newIndex);\n        }\n    }\n\n    private navigateVirtualItem(direction: Navigate, extraScroll?: number) {\n        const vContainer = this.verticalScrollContainer;\n        // If the data is vitualized, data.length === vContainer.chunkSize, so the below checks are no-longer valid\n        if (vContainer && vContainer.totalItemCount && vContainer.totalItemCount !== 0) {\n            this.navigateRemoteItem(direction);\n            return;\n        }\n        let state = vContainer.state;\n        if (this.isScrolledToLast && direction === Navigate.Down) { // If on the bottom most item, do not subscribe\n            return;\n        }\n        // If on the topmost item, do not subscribe\n        if (this.verticalScrollContainer.getVerticalScroll().scrollTop === 0 && direction === Navigate.Up) {\n            return;\n        }\n        const isScrollUp = direction === Navigate.Up;\n        let newScrollStartIndex = isScrollUp ? state.startIndex - 1 : state.startIndex + 1;\n        if (newScrollStartIndex < 0) {\n            newScrollStartIndex = 0;\n        }\n        let data = vContainer.igxForOf;\n\n        if (data.length === 0) {\n            const newItem = this.children.first;\n            if (!newItem) { return; }\n            newItem.isFocused = true;\n            this._focusedItem = newItem;\n            return;\n        }\n        // Following the big comment above, when the new item is group header, then we need to load 2 elements at once.\n        if (data[newScrollStartIndex].isHeader && direction === Navigate.Up ||\n            data[newScrollStartIndex + state.chunkSize - 2].isHeader && direction === Navigate.Down) {\n            newScrollStartIndex = isScrollUp ? newScrollStartIndex - 1 : newScrollStartIndex + 1;\n            // newScrollStartIndex = mod && direction === Navigate.Down ? newScrollStartIndex + 1 : newScrollStartIndex;\n            if (newScrollStartIndex < 0) { // If the next item loaded is a header and is also the very first item in the list.\n                vContainer.scrollTo(0); // Scrolls to the beginning of the list and switches focus to the searchInput\n                this.subscribeNext(vContainer, () => {\n                    this.combo.searchInput.nativeElement.focus();\n                    if (this.focusedItem) {\n                        this.focusedItem.isFocused = false;\n                    }\n                    this.focusedItem = null;\n                });\n                return;\n            }\n        }\n        // If it is the very last item in the collection, when moving down\n        if (newScrollStartIndex + state.chunkSize === data.length + 1) {\n            vContainer.scrollTo(newScrollStartIndex);\n            return;\n        }\n        vContainer.scrollTo(newScrollStartIndex);\n        this.subscribeNext(vContainer, () => {\n            state = vContainer.state;\n            data = vContainer.igxForOf;\n\n            // Because we are sure that if we scroll up then the top element is not a header, then we focus the first one.\n            // When we scroll down, if the newly loaded element that is hidden is group header,\n            // then we focus the last item from the this.items array.\n            // This is because the this.items doens't contains the group headers, while there are rendered in the combo drop down.\n            // If the newly loaded element that is hidden isn't a header, this means that the first visible item, the one that needs focus,\n            // should be either the one that is before the last item (this.items).\n            const isBottomHiddenHeader = data[state.startIndex + state.chunkSize - 1].isHeader;\n            const index = isScrollUp ? 0 : isBottomHiddenHeader ? this.items.length - 1 - extraScroll : this.items.length - 2 - extraScroll;\n\n            this.focusItem(index);\n        });\n    }\n\n    private subscribeNext(virtualContainer: any, callback: (elem?) => void) {\n        virtualContainer.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe({\n            next: (e: any) => {\n                callback(e);\n            }\n        });\n    }\n\n    private focusItem(visibleIndex: number) {\n        const oldItem = this._focusedItem;\n        if (oldItem) {\n            oldItem.isFocused = false;\n        }\n        const newItem = this.items[visibleIndex];\n        newItem.isFocused = true;\n        this._focusedItem = newItem;\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleOpening(e: CancelableEventArgs) {\n        const eventArgs = { cancel: false };\n        this.onOpening.emit(eventArgs);\n        e.cancel = eventArgs.cancel;\n        if (eventArgs.cancel) {\n            return;\n        }\n        this.combo.handleInputChange();\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleOpened() {\n        this.combo.triggerCheck();\n        this.combo.searchInput.nativeElement.focus();\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleClosed() {\n        this.combo.comboInput.nativeElement.focus();\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    onToggleClosing(e: CancelableEventArgs) {\n        this.combo.searchValue = '';\n        super.onToggleClosing(e);\n        this._scrollPosition = this.verticalScrollContainer.getVerticalScroll().scrollTop;\n    }\n\n    /**\n     * @hidden\n     */\n    updateScrollPosition() {\n        this.verticalScrollContainer.getVerticalScroll().scrollTop = this._scrollPosition;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    forwardRef,\n    HostListener,\n    HostBinding,\n    Inject,\n    Input\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-item',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxComboItemComponent extends IgxDropDownItemBase {\n    private get combo() {\n        return this.dropDown.combo;\n    }\n\n    /**\n     * Gets the height of a list item\n     */\n    @HostBinding('style.height.px')\n    get itemHeight() {\n        return this.combo.itemHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        return this.combo.isRemote ? JSON.stringify(this.value) : this.value;\n    }\n\n    constructor(\n        @Inject(forwardRef(() => IgxComboDropDownComponent)) public dropDown: IgxComboDropDownComponent,\n        protected elementRef: ElementRef,\n        protected selection: IgxSelectionAPIService\n    ) {\n        super(dropDown, elementRef);\n    }\n\n    /**\n     * @hidden\n     */\n    get isSelected() {\n        return this.combo.isItemSelected(this.itemID);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.focusedItem;\n            if (focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        this.dropDown.selectItem(this, event);\n    }\n}\n","import { forwardRef, Inject, Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../core/utils';\nimport { DataUtil } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxComboComponent } from './combo.component';\nimport { IFilteringState } from '../data-operations/filtering-state.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\n\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboFiltering'\n})\nexport class IgxComboFilteringPipe implements PipeTransform {\n\n    constructor(\n        @Inject(forwardRef(() => IgxComboComponent))\n        public combo: IgxComboComponent\n    ) { }\n\n    public transform(collection: any[], expressions: IFilteringExpression[],\n                     logic: FilteringLogic) {\n        const filteringExpressionsTree =  new FilteringExpressionsTree(logic);\n        filteringExpressionsTree.filteringOperands = expressions;\n        const state: IFilteringState = { expressionsTree: filteringExpressionsTree, strategy: new SimpleFilteringStrategy()};\n        state.expressionsTree.filteringOperands = this.combo.filteringExpressions;\n\n        if (!state.expressionsTree.filteringOperands.length) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        return result;\n    }\n}\n\n/** @hidden */\nexport class SimpleFilteringStrategy extends FilteringStrategy {\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = expr.fieldName === undefined ? rec : rec[expr.fieldName];\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboSorting',\n    pure: true\n})\nexport class IgxComboSortingPipe implements PipeTransform {\n    constructor(\n        @Inject(forwardRef(() => IgxComboComponent))\n        public combo: IgxComboComponent\n    ) { }\n\n    public transform(collection: any[], expression: ISortingExpression | ISortingExpression[]) {\n        const state = { expressions: [] };\n        state.expressions = this.combo.sortingExpressions;\n\n        if (!state.expressions.length) {\n            return collection;\n        }\n        const result = DataUtil.sort(cloneArray(collection), state);\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboGrouping'\n})\nexport class IgxComboGroupingPipe implements PipeTransform {\n\n    constructor(\n        @Inject(forwardRef(() => IgxComboComponent))\n        public combo: IgxComboComponent\n    ) { }\n\n    public transform(collection: any[], groupKey: any) {\n        this.combo.filteredData = collection;\n        if ((!groupKey && groupKey !== 0) || !collection.length) {\n            return collection;\n        }\n        const data = cloneArray(collection);\n        let inserts = 0;\n        let currentHeader = null;\n        for (let i = 0; i < collection.length; i++) {\n            let insertFlag = 0;\n            if (currentHeader !== collection[i][groupKey]) {\n                currentHeader = collection[i][groupKey];\n                insertFlag = 1;\n            }\n            if (insertFlag) {\n                data.splice(i + inserts, 0, {\n                    [this.combo.valueKey]: currentHeader,\n                    [this.combo.groupKey]: currentHeader,\n                    isHeader: true\n                });\n                inserts++;\n            }\n        }\n        return data;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\n\nexport class IgxComboFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n","import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';\nimport { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectorRef, Component, ContentChild,\n    ElementRef, EventEmitter,\n    HostBinding, HostListener, Input, NgModule, OnInit, OnDestroy, Output, QueryList,\n    TemplateRef, ViewChild, ViewChildren, Optional, Self, Inject, Directive\n} from '@angular/core';\nimport {\n    IgxComboItemDirective,\n    IgxComboEmptyDirective,\n    IgxComboHeaderItemDirective,\n    IgxComboHeaderDirective,\n    IgxComboFooterDirective,\n    IgxComboAddItemDirective\n} from './combo.directives';\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NgControl } from '@angular/forms';\nimport { IgxCheckboxComponent, IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, CancelableEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic } from '../data-operations/filtering-expression.interface';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxForOfModule, IForOfState } from '../directives/for-of/for_of.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.component';\nimport { IgxDropDownModule } from '../drop-down/drop-down.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { IgxComboFilterConditionPipe, IgxComboFilteringPipe, IgxComboGroupingPipe, IgxComboSortingPipe } from './combo.pipes';\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services';\nimport { Subscription } from 'rxjs';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\n/** Custom strategy to provide the combo with callback on initial positioning */\nclass ComboConnectedPositionStrategy extends ConnectedPositioningStrategy {\n    private _callback: () => void;\n    constructor(callback: () => void) {\n        super();\n        this._callback = callback;\n    }\n\n    position(contentElement, size, document?, initialCall?) {\n        if (initialCall) {\n            this._callback();\n        }\n        super.position(contentElement, size);\n    }\n}\n\n/**\n * @hidden\n */\nenum DataTypes {\n    EMPTY = 'empty',\n    PRIMITIVE = 'primitive',\n    COMPLEX = 'complex',\n    PRIMARYKEY = 'valueKey'\n}\n\nexport enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL,\n    /**\n     * Combo with valid state.\n     */\n    VALID,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID\n}\n\nexport interface IComboSelectionChangeEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    event?: Event;\n}\n\nexport interface IComboItemAdditionEvent {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\n\nlet NEXT_ID = 0;\nconst noop = () => { };\n\n@Component({\n    selector: 'igx-combo',\n    template: `<ng-template #complex let-display let-data=\"data\" let-key=\"displayKey\">\n    {{display[key]}}\n</ng-template>\n<ng-template #primitive let-display>\n    {{display}}\n</ng-template>\n<ng-template #empty>\n    <span>The list is empty</span>\n</ng-template>\n<ng-template #addItemDefault let-control>\n    <button igxButton=\"flat\" igxRipple>Add item</button>\n</ng-template>\n<ng-template #headerItemBase let-item let-key=\"valueKey\" let-groupKey=\"groupKey\">\n    {{ item[key] }}\n</ng-template>\n\n<div class=\"igx-combo\" [style.width]=\"width\" role=\"combobox\" [attr.aria-expanded]=\"!dropdown.collapsed\" aria-haspopup=\"listbox\" [attr.aria-owns]=\"dropdown.id\">\n    <igx-input-group [type]=\"type\" (click)=\"onInputClick($event)\">\n        <input igxInput #comboInput name=\"comboInput\" type=\"text\" [(ngModel)]=\"value\" readonly [placeholder]=\"placeholder\" [disabled]=\"disabled\" (blur)=\"onBlur($event)\"/>\n        <igx-suffix *ngIf=\"value.length\" class=\"clearButton\" aria-label=\"Clear Selection\" igxRipple (click)=\"handleClearItems($event)\">\n            <igx-icon fontSet=\"material\">clear</igx-icon>\n        </igx-suffix>\n        <igx-suffix igxButton=\"icon\" class=\"dropdownToggleButton\" igxRipple>\n            <igx-icon *ngIf=\"dropdown.collapsed; else toggleUp\" fontSet=\"material\">arrow_drop_down</igx-icon>\n            <ng-template #toggleUp>\n                <igx-icon fontSet=\"material\">arrow_drop_up</igx-icon>\n            </ng-template>\n        </igx-suffix>\n    </igx-input-group>\n    <igx-combo-drop-down #igxComboDropDown class=\"igx-combo__drop-down\" [width]=\"itemsWidth || '100%'\">\n        <igx-input-group class=\"igx-combo__search\">\n            <input class=\"igx-combo-input\" igxInput #searchInput name=\"searchInput\" type=\"text\" [(ngModel)]=\"searchValue\" (ngModelChange)=\"handleInputChange($event)\"\n                (keyup)=\"handleKeyUp($event)\" (keydown)=\"handleKeyDown($event)\" (focus)=\"dropdown.onBlur($event)\" [placeholder]=\"searchPlaceholder\" aria-autocomplete=\"both\"\n                [attr.aria-owns]=\"dropdown.id\" [attr.aria-labelledby]=\"ariaLabelledBy\" />\n        </igx-input-group>\n        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: this}\">\n        </ng-container>\n        <div #dropdownItemContainer class=\"igx-combo__content\" [style.overflow]=\"'hidden'\" [style.maxHeight.px]=\"itemsMaxHeight\"\n            [igxDropDownItemNavigation]=\"dropdown\" [tabindex]=\"dropdown.collapsed ? -1 : 0\" role=\"listbox\" [attr.id]=\"dropdown.id\">\n            <ng-template igxFor let-item [igxForOf]=\"data | comboFiltering:filteringExpressions:filteringLogic | comboSorting:sortingExpressions | comboGrouping:groupKey\"\n                [igxForScrollOrientation]=\"'vertical'\" [igxForContainerSize]=\"itemsMaxHeight\"\n                [igxForItemSize]=\"itemHeight\" (onChunkPreload)=\"dataLoading($event)\" #virtualScrollContainer>\n                <igx-combo-item [value]=\"item\" isHeader={{item.isHeader}} role=\"option\">\n                    <ng-container *ngIf=\"!item.isHeader\">\n                        <igx-checkbox [checked]=\"isItemSelected(item)\" disableRipple=\"true\" disabled=\"true\" class=\"igx-combo__checkbox\"></igx-checkbox>\n                    </ng-container>\n                    <ng-container *ngIf=\"item.isHeader\">\n                        <ng-container *ngTemplateOutlet=\"headerItemTemplate ? headerItemTemplate : headerItemBase; context: {$implicit: item, data: data, valueKey: valueKey, groupKey: groupKey, displayKey: displayKey}\"></ng-container>\n                    </ng-container>\n                    <ng-container *ngIf=\"!item.isHeader\">\n                        <ng-container #listItem *ngTemplateOutlet=\"template; context: {$implicit: item, data: data, valueKey: valueKey, displayKey: displayKey};\"></ng-container>\n                    </ng-container>\n                </igx-combo-item>\n            </ng-template>\n        </div>\n        <div class=\"igx-combo__add\" *ngIf=\"filteredData.length === 0 || isAddButtonVisible()\">\n            <div class=\"igx-combo__empty\" *ngIf=\"filteredData.length === 0\">\n                <ng-container *ngTemplateOutlet=\"emptyTemplate ? emptyTemplate : empty; context: {$implicit: this}\">\n                </ng-container>\n            </div>\n            <igx-combo-item *ngIf=\"isAddButtonVisible()\" [tabindex]=\"dropdown.collapsed ? -1 : customValueFlag ? 1 : -1\" class=\"igx-combo__add-item\"\n                    igxRipple (keypress)=\"addItemToCollection()\" [isHeader]=\"false\" [disabled]=\"false\" [value]=\"'ADD ITEM'\" role=\"button\"\n                    aria-label=\"Add Item\">\n                <ng-container *ngTemplateOutlet=\"addItemTemplate ? addItemTemplate : addItemDefault; context: {$implicit: this}\">\n                </ng-container>\n            </igx-combo-item>\n        </div>\n        <ng-container *ngTemplateOutlet=\"footerTemplate; context: {$implicit: this}\">\n        </ng-container>\n    </igx-combo-drop-down>\n</div>\n`\n})\nexport class IgxComboComponent implements AfterViewInit, ControlValueAccessor, OnInit, OnDestroy {\n    /**\n     * @hidden\n     */\n    public customValueFlag = true;\n    /**\n     * @hidden\n     */\n    public defaultFallbackGroup = 'Other';\n    /**\n     * @hidden\n     */\n    protected stringFilters = IgxStringFilteringOperand;\n    /**\n     * @hidden\n     */\n    protected boolenFilters = IgxBooleanFilteringOperand;\n    /**\n     * @hidden\n     */\n    protected _filteringLogic = FilteringLogic.Or;\n    /**\n     * @hidden\n     */\n    protected _filteringExpressions = [];\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions = [];\n    /**\n     * @hidden\n     */\n    protected _groupKey: string | number = '';\n    /**\n     * @hidden\n     */\n    protected _valueKey: string | number = '';\n    /**\n     * @hidden\n     */\n    protected _displayKey: string | number = '';\n    private _addItemTemplate: TemplateRef<any>;\n    private _emptyTemplate: TemplateRef<any>;\n    private _footerTemplate: TemplateRef<any>;\n    private _headerTemplate: TemplateRef<any>;\n    private _headerItemTemplate: TemplateRef<any>;\n    private _itemTemplate: TemplateRef<any>;\n    private _dataType = '';\n    private _data = [];\n    private _filteredData = [];\n    private _children: QueryList<IgxDropDownItemBase>;\n    private _dropdownContainer: ElementRef = null;\n    private _searchInput: ElementRef<HTMLInputElement> = null;\n    private _comboInput: ElementRef<HTMLInputElement> = null;\n    private _valid = IgxComboState.INITIAL;\n    private _statusChanges$: Subscription;\n    private _width = '100%';\n    private _positionCallback: () => void;\n    private _onChangeCallback: (_: any) => void = noop;\n    private overlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true\n    };\n\n    private _value = '';\n    private _searchValue = '';\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Self() @Optional() public ngControl: NgControl) {\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxComboDropDownComponent, { read: IgxComboDropDownComponent })\n    public dropdown: IgxComboDropDownComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectAllCheckbox', { read: IgxCheckboxComponent })\n    public selectAllCheckbox: IgxCheckboxComponent;\n\n    /**\n     * @hidden\n     */\n    get searchInput() {\n        return this._searchInput;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('searchInput')\n    set searchInput(content: ElementRef<HTMLInputElement>) {\n        this._searchInput = content;\n    }\n\n    /**\n     * @hidden\n     */\n    get comboInput() {\n        return this._comboInput;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('comboInput')\n    set comboInput(content: ElementRef<HTMLInputElement>) {\n        this._comboInput = content;\n    }\n\n    @ContentChild(IgxComboItemDirective, { read: TemplateRef })\n    public set itemTemplate(val: TemplateRef<any>) {\n        this._itemTemplate = val;\n    }\n\n    public get itemTemplate(): TemplateRef<any> {\n        return this._itemTemplate;\n    }\n\n    @ContentChild(IgxComboHeaderDirective, { read: TemplateRef })\n    public set headerTemplate(val: TemplateRef<any>) {\n        this._headerTemplate = val;\n    }\n\n    public get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n\n    @ContentChild(IgxComboFooterDirective, { read: TemplateRef })\n    public set footerTemplate(val: TemplateRef<any>) {\n        this._footerTemplate = val;\n    }\n\n    public get footerTemplate(): TemplateRef<any> {\n        return this._footerTemplate;\n    }\n\n    @ContentChild(IgxComboHeaderItemDirective, { read: TemplateRef })\n    public set headerItemTemplate(val: TemplateRef<any>) {\n        this._headerItemTemplate = val;\n    }\n\n    public get headerItemTemplate(): TemplateRef<any> {\n        return this._headerItemTemplate;\n    }\n\n\n    @ContentChild(IgxComboAddItemDirective, { read: TemplateRef })\n    public set addItemTemplate(val: TemplateRef<any>) {\n        this._addItemTemplate = val;\n    }\n\n    public get addItemTemplate(): TemplateRef<any> {\n        return this._addItemTemplate;\n    }\n\n    @ContentChild(IgxComboEmptyDirective, { read: TemplateRef })\n    public set emptyTemplate(val: TemplateRef<any>) {\n        this._emptyTemplate = val;\n    }\n\n    public get emptyTemplate(): TemplateRef<any> {\n        return this._emptyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    @ViewChild('primitive', { read: TemplateRef })\n    protected primitiveTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('complex', { read: TemplateRef })\n    protected complexTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @DeprecateProperty(`Setting combo item template with '#emptyTemplate' is deprecated.\\n` +\n        `Use \\`igxComboEmpty\\` directive instead.`)\n    @ContentChild('emptyTemplate', { read: TemplateRef })\n    private set oldEmptyTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.emptyTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateProperty(`Setting combo item template with '#headerTemplate' is deprecated.\\n` +\n        `Use \\`igxComboHeader\\` directive instead.`)\n    @ContentChild('headerTemplate', { read: TemplateRef })\n    private set oldHeaderTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.headerTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateProperty(`Setting combo item template with '#footerTemplate' is deprecated.\\n` +\n        `Use \\`igxComboFooter\\` directive instead.`)\n    @ContentChild('footerTemplate', { read: TemplateRef })\n    private set oldFooterTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.footerTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateProperty(`Setting combo item template with '#itemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboItem\\` directive instead.`)\n    @ContentChild('itemTemplate', { read: TemplateRef })\n    private set oldItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.itemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateProperty(`Setting combo item template with '#addItemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboAddItem\\` directive instead.`)\n    @ContentChild('addItemTemplate', { read: TemplateRef })\n    private set oldAddItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.addItemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @DeprecateProperty(`Setting combo item template with '#headerItemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboHeaderItem\\` directive instead.`)\n    @ContentChild('headerItemTemplate', { read: TemplateRef })\n    private set oldHeaderItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.headerItemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('dropdownItemContainer')\n    protected set dropdownContainer(val: ElementRef) {\n        this._dropdownContainer = val;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get dropdownContainer(): ElementRef {\n        return this._dropdownContainer;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxComboItemComponent, { read: IgxComboItemComponent })\n    public set children(list: QueryList<IgxDropDownItemBase>) {\n        this._children = list;\n    }\n\n    /**\n     * @hidden\n     */\n    public get children(): QueryList<IgxDropDownItemBase> {\n        return this._children;\n    }\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSelectionChange = new EventEmitter<IComboSelectionChangeEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onAddition = new EventEmitter<IComboItemAdditionEvent>();\n\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSearchInput = new EventEmitter();\n\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<any>();\n\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-combo-${NEXT_ID++}`;\n\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    @HostBinding('style.width')\n    @Input()\n    public get width() {\n        return this._width;\n    }\n\n    public set width(val) {\n        this._width = val;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this._valid === IgxComboState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this._valid === IgxComboState.INVALID;\n    }\n\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    @Input()\n    public allowCustomValues = false;\n\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n    */\n    @Input()\n    public itemsMaxHeight = 480;\n\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemsWidth: string;\n\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemHeight = 48;\n\n    /**\n     * @hidden\n     */\n    public filteringLogic = FilteringLogic.Or;\n\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public placeholder = '';\n\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public searchPlaceholder = 'Enter a Search Term';\n\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    @Input()\n    get data() {\n        return this._data;\n    }\n    set data(val: any[]) {\n        this._data = (val) ? val : [];\n    }\n\n    /**\n     * Combo value data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    get valueKey() {\n        return this._valueKey;\n    }\n    set valueKey(val: string | number) {\n        this._valueKey = val;\n    }\n\n    @Input()\n    set displayKey(val: string | number) {\n        this._displayKey = val;\n    }\n\n    /**\n     * Combo text data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='mydisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey() {\n        return this._displayKey ? this._displayKey : this._valueKey;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public set groupKey(val: string | number) {\n        this.clearSorting(this._groupKey);\n        this._groupKey = val;\n        this.sort(this._groupKey);\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    public get groupKey(): string | number {\n        return this._groupKey;\n    }\n\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     *<igx-combo [filterable]=\"'false'\">\n     * ```\n     */\n    @Input()\n    public filterable = true;\n\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     *<igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    @Input()\n    public ariaLabelledBy: string;\n\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     *<igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     *<igx-combo [type]=\"'line'\">\n     * ```\n     */\n    @Input()\n    public type = 'box';\n\n    /**\n     * @hidden\n     */\n    public onBlur(event) {\n        if (this.dropdown.collapsed) {\n            this._valid = IgxComboState.INITIAL;\n            if (this.ngControl) {\n                if (!this.ngControl.valid) {\n                    this._valid = IgxComboState.INVALID;\n                }\n            } else if (this._hasValidators() && !this.elementRef.nativeElement.checkValidity()) {\n                this._valid = IgxComboState.INVALID;\n            }\n        }\n    }\n\n    private _hasValidators(): boolean {\n        if (this.elementRef.nativeElement.hasAttribute('required')) {\n            return true;\n        }\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    onArrowDown(evt) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        if (this.dropdown.collapsed) {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    // @HostListener('keydown.ArrowUp', ['$event'])\n    // @HostListener('keydown.Alt.ArrowUp', ['$event'])\n    onArrowUp(evt) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        if (!this.dropdown.collapsed) {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    onInputClick(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n        this.toggle();\n    }\n\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n    */\n    get virtualizationState(): IForOfState {\n        return this.dropdown.verticalScrollContainer.state;\n    }\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state) {\n        this.dropdown.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n    */\n    get totalItemCount() {\n        return this.dropdown.verticalScrollContainer.totalItemCount;\n    }\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count) {\n        this.dropdown.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Gets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n    */\n    public get valid(): IgxComboState {\n        return this._valid;\n    }\n\n    /**\n     * Sets valid state of the combo\n     *\n     * ```typescript\n     * // get\n     * this.combo.valid(IgxComboState.INVALID);\n     * ```\n     */\n    public set valid(value: IgxComboState) {\n        this._valid = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public get values(): any[] {\n        return this.valueKey !== undefined ? this.selectedItems().map((e) => e[this.valueKey]) : [];\n    }\n\n    /**\n     * @hidden\n     */\n    public get filteringExpressions() {\n        return this.filterable ? this._filteringExpressions : [];\n    }\n\n    /**\n     * @hidden\n     */\n    public set filteringExpressions(value) {\n        this._filteringExpressions = cloneArray(value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public get sortingExpressions() {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * @hidden\n     */\n    public set sortingExpressions(value) {\n        this._sortingExpressions = cloneArray(value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected clearSorting(field?: string | number) {\n        if (field === undefined || field === null) {\n            this.sortingExpressions = [];\n            return;\n        }\n        const currentState = cloneArray(this.sortingExpressions);\n        const index = currentState.findIndex((expr) => expr.fieldName === field);\n        if (index > -1) {\n            currentState.splice(index, 1);\n            this.sortingExpressions = currentState;\n        }\n    }\n\n    /**\n     * Combo value\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string {\n        return this._value;\n    }\n    /**\n     * Combo value\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [value]='newValue'></igx-combo>\n     * ```\n     */\n    set value(val) {\n        this._value = val;\n    }\n\n    /**\n     * @hidden\n     */\n    get searchValue() {\n        return this._searchValue;\n    }\n\n    /**\n     * @hidden\n     */\n    set searchValue(val: string) {\n        this._searchValue = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get filteredData(): any[] {\n        return this.filterable ? this._filteredData : this.data;\n    }\n\n    /**\n     * @hidden\n     */\n    public set filteredData(val: any[]) {\n        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden\n     */\n    public handleKeyUp(evt) {\n        if (evt.key === 'ArrowDown' || evt.key === 'Down') {\n            this.dropdownContainer.nativeElement.focus();\n            this.dropdown.onFocus();\n            this.dropdown.focusedItem = this.dropdown.items[0];\n        } else if (evt.key === 'Escape' || evt.key === 'Esc') {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public handleKeyDown(evt) {\n        if (evt.key === 'ArrowUp' || evt.key === 'Up') {\n            this.onArrowUp(evt);\n        }\n    }\n\n    private checkMatch() {\n        this.customValueFlag = this.displayKey || this.displayKey === 0 ?\n            !this.filteredData\n                .some((e) => (e[this.displayKey]).toString().toLowerCase() === this.searchValue.trim().toLowerCase()) &&\n            this.allowCustomValues :\n            !this.filteredData\n                .some((e) => e.toString().toLowerCase() === this.searchValue.trim().toLowerCase()) && this.allowCustomValues;\n    }\n\n    /**\n     * @hidden\n     */\n    public handleInputChange(event?) {\n        if (event !== undefined) {\n            this.dropdown.verticalScrollContainer.scrollTo(0);\n            this.onSearchInput.emit(event);\n        }\n        if (this.filterable) {\n            this.filter();\n        } else {\n            this.checkMatch();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public sort(fieldName: string | number, dir: SortingDirection = SortingDirection.Asc, ignoreCase: boolean = true): void {\n        if (!fieldName && fieldName !== 0) {\n            return;\n        }\n        const sortingState = cloneArray(this.sortingExpressions, true);\n\n        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase);\n        this.sortingExpressions = sortingState;\n    }\n\n    /**\n     * @hidden\n     */\n    public getValueByValueKey(val: any): any {\n        if (!val && val !== 0) {\n            return undefined;\n        }\n        return this.valueKey === 0 || this.valueKey ?\n            this.data.filter((e) => e[this.valueKey] === val)[0] :\n            this.data.filter((e) => e === val);\n    }\n\n    /**\n     * @hidden\n     */\n    protected prepare_sorting_expression(state, fieldName, dir, ignoreCase) {\n\n        if (dir === SortingDirection.None) {\n            state.splice(state.findIndex((expr) => expr.fieldName === fieldName), 1);\n            return;\n        }\n\n        const expression = state.find((expr) => expr.fieldName === fieldName);\n\n        if (!expression) {\n            state.push({ fieldName, dir, ignoreCase });\n        } else {\n            Object.assign(expression, { fieldName, dir, ignoreCase });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get dataType(): string {\n        if (this.valueKey) {\n            return DataTypes.COMPLEX;\n        }\n        return DataTypes.PRIMITIVE;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isRemote() {\n        return this.totalItemCount > 0 &&\n            this.valueKey &&\n            this.dataType === DataTypes.COMPLEX;\n    }\n\n    private _stringifyItemID(itemID) {\n        return this.isRemote && typeof itemID === 'object' ? JSON.stringify(itemID) : itemID;\n    }\n\n    private _parseItemID(itemID) {\n        return this.isRemote && typeof itemID === 'string' ? JSON.parse(itemID) : itemID;\n    }\n\n    private changeSelectedItem(newItem: any, select?: boolean) {\n        if (!newItem && newItem !== 0) {\n            return;\n        }\n        const newSelection = select ?\n            this.selection.add_item(this.id, newItem) :\n            this.selection.delete_item(this.id, newItem);\n        this.triggerSelectionChange(newSelection);\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedItem(itemID: any, select = true) {\n        if (itemID === undefined || itemID === null) {\n            return;\n        }\n        const newItem = this.dropdown.items.find((item) => item.itemID === itemID);\n        if (newItem) {\n            if (newItem.disabled || newItem.isHeader) {\n                return;\n            }\n            if (!newItem.isSelected) {\n                this.changeSelectedItem(itemID, true);\n            } else {\n                this.changeSelectedItem(itemID, false);\n            }\n        } else {\n            const target = typeof itemID === 'object' ? itemID : this.getValueByValueKey(itemID);\n            if (target) {\n                this.changeSelectedItem(target, select);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isItemSelected(item) {\n        return this.selection.is_item_selected(this.id, this._stringifyItemID(item));\n    }\n\n    /**\n     * @hidden\n     */\n    protected triggerSelectionChange(newSelectionAsSet: Set<any>) {\n        const oldSelection = this.dropdown.selectedItem;\n        const newSelection = newSelectionAsSet ? Array.from(newSelectionAsSet) : [];\n        if (oldSelection !== newSelection) {\n            const args: IComboSelectionChangeEventArgs = { oldSelection, newSelection };\n            this.onSelectionChange.emit(args);\n            newSelectionAsSet = this.selection.get_empty();\n            for (let i = 0; i < args.newSelection.length; i++) {\n                newSelectionAsSet.add(args.newSelection[i]);\n            }\n            this.selection.set(this.id, newSelectionAsSet);\n            this.value = this.dataType !== DataTypes.PRIMITIVE ?\n                newSelection.map((id) => this._parseItemID(id)[this.displayKey]).join(', ') :\n                newSelection.join(', ');\n            // this.isHeaderChecked();\n            this._onChangeCallback(newSelection);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public triggerCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public isAddButtonVisible(): boolean {\n        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;\n        return this.searchValue !== '' && this.customValueFlag;\n    }\n\n    /**\n     * @hidden\n     */\n    public handleSelectAll(evt) {\n        if (evt.checked) {\n            this.selectAllItems();\n        } else {\n            this.deselectAllItems();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public addItemToCollection() {\n        if (!this.searchValue) {\n            return false;\n        }\n        const newValue = this.searchValue.trim();\n        const addedItem = this.displayKey ? {\n            [this.valueKey]: newValue,\n            [this.displayKey]: newValue\n        } : newValue;\n        if (this.groupKey || this.groupKey === 0) {\n            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });\n        }\n        const oldCollection = this.data;\n        const newCollection = [...this.data];\n        newCollection.push(addedItem);\n        const args: IComboItemAdditionEvent = {\n            oldCollection, addedItem, newCollection\n        };\n        this.onAddition.emit(args);\n        this.data.push(addedItem);\n        // If you mutate the array, no pipe is invoked and the display isn't updated;\n        // if you replace the array, the pipe executes and the display is updated.\n        this.data = cloneArray(this.data);\n        this.changeSelectedItem(addedItem, true);\n        this.customValueFlag = false;\n        if (this.searchInput) {\n            this.searchInput.nativeElement.focus();\n        }\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden\n     */\n    protected prepare_filtering_expression(searchVal, condition, ignoreCase, fieldName?) {\n        const newArray = [...this.filteringExpressions];\n        const expression = newArray.find((expr) => expr.fieldName === fieldName);\n        const newExpression = { fieldName, searchVal, condition, ignoreCase };\n        if (!expression) {\n            newArray.push(newExpression);\n        } else {\n            Object.assign(expression, newExpression);\n        }\n        if (this.groupKey) {\n            const expression2 = newArray.find((expr) => expr.fieldName === 'isHeader');\n            const headerExpression = {\n                fieldName: 'isHeader', searchVale: '',\n                condition: IgxBooleanFilteringOperand.instance().condition('true'), ignoreCase: true\n            };\n            if (!expression2) {\n                newArray.push(headerExpression);\n            } else {\n                Object.assign(expression2, headerExpression);\n            }\n        }\n        this.filteringExpressions = newArray;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onStatusChanged() {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            this._valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public filter() {\n        this.prepare_filtering_expression(this.searchValue.trim(), IgxStringFilteringOperand.instance().condition('contains'),\n            true, this.dataType === DataTypes.PRIMITIVE ? undefined : this.displayKey);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._positionCallback = () => this.dropdown.updateScrollPosition();\n        this.overlaySettings.positionStrategy = new ComboConnectedPositionStrategy(this._positionCallback);\n        this.overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;\n\n        if (this.ngControl && this.ngControl.value) {\n            this.triggerSelectionChange(this.ngControl.value);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.filteredData = [...this.data];\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: any): void {\n        // selectItems can handle Array<any>, no valueKey is needed;\n        this.selectItems(value, true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void { }\n\n    /**\n     * @hidden\n     */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public get template(): TemplateRef<any> {\n        this._dataType = this.dataType;\n        if (this.itemTemplate) {\n            return this.itemTemplate;\n        }\n        if (this._dataType === DataTypes.COMPLEX) {\n            return this.complexTemplate;\n        }\n        return this.primitiveTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public handleClearItems(event) {\n        this.deselectAllItems(true);\n        event.stopPropagation();\n    }\n\n    /**\n     * A method that opens/closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.toggle()>Toggle Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public toggle() {\n        this.dropdown.toggle(this.overlaySettings);\n    }\n\n    /**\n     * A method that opens the combo.\n     *\n     *```html\n     *<button (click)=\"combo.open()>Open Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public open() {\n        this.dropdown.open(this.overlaySettings);\n    }\n\n    /**\n     * A method that closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.close()>Close Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public close() {\n        this.dropdown.close();\n    }\n\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.collapsed;\n     * ```\n    */\n    public get collapsed() {\n        return this.dropdown.collapsed;\n    }\n\n    /**\n     * Get current selection state\n     * @returns Array of selected items\n     * ```typescript\n     * // get\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    public selectedItems() {\n        const items = this.dropdown.selectedItem;\n        return this.isRemote ? items.map(item => this._parseItemID(item)) : items;\n    }\n\n    /**\n     * Select defined items\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * // get\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public selectItems(newItems: Array<any>, clearCurrentSelection?: boolean) {\n        if (newItems) {\n            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);\n            this.triggerSelectionChange(newSelection);\n        }\n    }\n\n    /**\n     * Deselect defined items\n     * @param items items to deselected\n     * ```typescript\n     * // get\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public deselectItems(items: Array<any>) {\n        if (items) {\n            const newSelection = this.selection.delete_items(this.id, items);\n            this.triggerSelectionChange(newSelection);\n        }\n    }\n\n    /**\n     * Select all (filtered) items\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * // get\n     * this.combo.selectAllItems();\n     * ```\n     */\n    public selectAllItems(ignoreFilter?: boolean) {\n        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData);\n        const newSelection = this.selection.add_items(this.id, allVisible);\n        this.triggerSelectionChange(newSelection);\n    }\n\n    /**\n     * Deselect all (filtered) items\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * // get\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    public deselectAllItems(ignoreFilter?: boolean) {\n        const newSelection = this.filteredData.length === this.data.length || ignoreFilter ?\n            this.selection.get_empty() :\n            this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData));\n        this.triggerSelectionChange(newSelection);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboFilterConditionPipe, IgxComboGroupingPipe,\n        IgxComboFilteringPipe, IgxComboSortingPipe, IgxComboDropDownComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective],\n    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxComboModule { }\n","import { DOCUMENT } from '@angular/common';\nimport { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-title,[igxDialogTitle]'\n})\nexport class IgxDialogTitleDirective {\n\n    @HostBinding('class.igx-dialog__window-title')\n    public defaultStyle = true;\n }\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-actions,[igxDialogActions]'\n})\nexport class IgxDialogActionsDirective {\n\n    @HostBinding('class.igx-dialog__window-actions')\n    public defaultClass = true;\n }\n","import { useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxDialogActionsDirective, IgxDialogTitleDirective } from './dialog.directives';\nimport { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, GlobalPositionStrategy, NoOpScrollStrategy, PositionSettings } from '../services';\nimport { slideInBottom, slideOutTop } from '../animations/slide/index';\n\nlet DIALOG_ID = 0;\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-dialog',\n    template: `<div tabindex=\"0\" #dialog class=\"igx-dialog\" igxToggle (click)=\"onDialogSelected($event)\">\n    <div #dialogWindow class=\"igx-dialog__window\"  [attr.role]=\"role\" [attr.aria-labelledby]=\"titleId\">\n\n        <div *ngIf=\"title\" [attr.id]=\"titleId\" class=\"igx-dialog__window-title\">\n            {{ title }}\n        </div>\n        <ng-content *ngIf=\"!title\" select=\"igx-dialog-title,[igxDialogTitle]\"></ng-content>\n\n        <div class=\"igx-dialog__window-content\" *ngIf=\"message\">{{ message }}</div>\n        <ng-content *ngIf=\"!message\"></ng-content>\n\n        <div *ngIf=\"leftButtonLabel || rightButtonLabel\" class=\"igx-dialog__window-actions\">\n            <button *ngIf=\"leftButtonLabel\" type=\"button\" igxButton=\"{{ leftButtonType }}\" igxButtonColor=\"{{ leftButtonColor }}\" igxButtonBackground=\"{{ leftButtonBackgroundColor }}\"\n                igxRipple=\"{{ leftButtonRipple }}\" (click)=\"onInternalLeftButtonSelect($event)\">\n                {{ leftButtonLabel }}\n            </button>\n            <button *ngIf=\"rightButtonLabel\" type=\"button\" igxButton=\"{{ rightButtonType }}\" igxButtonColor=\"{{ rightButtonColor }}\" igxButtonBackground=\"{{ rightButtonBackgroundColor }}\"\n                igxRipple=\"{{ rightButtonRipple }}\" (click)=\"onInternalRightButtonSelect($event)\">\n                {{ rightButtonLabel }}\n            </button>\n        </div>\n        <ng-content *ngIf=\"!leftButtonLabel && !rightButtonLabel\" select=\"igx-dialog-actions,[igxDialogActions]\"></ng-content>\n\n    </div>\n</div>\n`\n})\nexport class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private static NEXT_ID = 1;\n    private static readonly DIALOG_CLASS = 'igx-dialog';\n\n    @ViewChild(IgxToggleDirective)\n    public toggleRef: IgxToggleDirective;\n\n    /**\n    * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n    *```html\n    *<igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\" leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-dialog-${DIALOG_ID++}`;\n\n    @Input()\n    get isModal() {\n        return this._isModal;\n    }\n\n    set isModal(val: boolean) {\n        this._overlayDefaultSettings.modal = val;\n        this._isModal = val;\n    }\n\n    /**\n    * An @Input property controlling the `title` of the dialog.\n    *```html\n    *<igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @Input()\n    public title = '';\n\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     *```html\n     *<igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public message = '';\n\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     *```html\n     *<igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonLabel = '';\n\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonType = 'flat';\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonColor = '';\n\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonRipple = '';\n\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     *```html\n     *<igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonLabel = '';\n\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonType = 'flat';\n\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonColor = '';\n\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the right button `ripple`.\n     *```html\n     *<igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonRipple = '';\n\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     *```html\n     *<igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     *rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     *</igx-dialog>\n     *```\n     */\n    @Input()\n    get closeOnOutsideSelect() {\n        return this._closeOnOutsideSelect;\n    }\n\n    set closeOnOutsideSelect(val: boolean) {\n        this._overlayDefaultSettings.closeOnOutsideClick = val;\n        this._closeOnOutsideSelect = val;\n    }\n\n    /**\n     * An event that is emitted when the dialog is opened.\n     *```html\n     *<igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the dialog is closed.\n     *```html\n     *<igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the left button is clicked.\n     *```html\n     *<igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onLeftButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     *<igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     *#dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     *rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onRightButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    private _animaitonSettings: PositionSettings = {\n        openAnimation: useAnimation(slideInBottom, {params: {fromPosition: 'translateY(100%)'}}),\n        closeAnimation: useAnimation(slideOutTop, {params: {toPosition: 'translateY(-100%)'}})\n    };\n\n    private _overlayDefaultSettings: OverlaySettings;\n    private _closeOnOutsideSelect = false;\n    private _isModal = true;\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    private _titleId: string;\n\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogState = this.dialog.state;\n     *}\n     *```\n     */\n    get state(): string {\n        return this.isOpen ? 'open' : 'close';\n    }\n\n    /**\n     * Returns whether the dialog is visible to the end user.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogOpen = this.dialog.isOpen;\n     *}\n     * ```\n     */\n    @Input()\n    get isOpen() {\n        return !this.toggleRef.collapsed;\n    }\n\n    @HostBinding('class.igx-dialog--hidden')\n    get isCollapsed() {\n        return this.toggleRef.collapsed;\n    }\n\n    /**\n     *Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogRole = this.dialog.role;\n     *}\n     * ```\n     */\n    @Input()\n    get role() {\n        if (this.leftButtonLabel !== '' && this.rightButtonLabel !== '') {\n            return 'dialog';\n        } else if (\n            this.leftButtonLabel !== '' ||\n            this.rightButtonLabel !== ''\n        ) {\n            return 'alertdialog';\n        } else {\n            return 'alert';\n        }\n    }\n\n    /**\n     *Returns the value of the title id.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogTitle = this.dialog.titleId;\n     *}\n     * ```\n     */\n    @Input()\n    get titleId() {\n        return this._titleId;\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService\n    ) {\n        this._titleId = IgxDialogComponent.NEXT_ID++ + '_title';\n\n        this._overlayDefaultSettings = {\n            positionStrategy: new GlobalPositionStrategy(this._animaitonSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: this.isModal,\n            closeOnOutsideClick: this.closeOnOutsideSelect\n        };\n    }\n\n    ngAfterContentInit() {\n        this.toggleRef.onClosing.pipe(takeUntil(this.destroy$)).subscribe(() => this.emitCloseFromDialog());\n    }\n\n    private emitCloseFromDialog() {\n        this.onClose.emit({ dialog: this, event: null });\n    }\n\n    /**\n     * A method that opens the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public open(overlaySettings: OverlaySettings = this._overlayDefaultSettings) {\n        if (this.isOpen) {\n            return;\n        }\n\n        this.toggleRef.open(overlaySettings);\n        this.onOpen.emit({ dialog: this, event: null });\n    }\n\n    /**\n     *A method that that closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public close() {\n        if (!this.isOpen) {\n            return;\n        }\n        // `onClose` will emit from `toggleRef.onClosing` subscription\n        this.toggleRef.close();\n    }\n\n\n    /**\n     * A method that opens/closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDialogSelected(event) {\n        event.stopPropagation();\n        if (\n            this.isOpen &&\n            this.closeOnOutsideSelect &&\n            event.target.classList.contains(IgxDialogComponent.DIALOG_CLASS)\n        ) {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalLeftButtonSelect(event) {\n        this.onLeftButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalRightButtonSelect(event) {\n        this.onRightButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n\n    }\n\n}\n\nexport interface IDialogEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\n\n/**\n * The IgxDialogComponent provides {@link IgxDialogComponent} inside your application.\n */\n\n@NgModule({\n    declarations: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    exports: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    imports: [CommonModule, IgxToggleModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxDialogModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ContentChild,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    HostListener,\n    ElementRef,\n    TemplateRef,\n    Directive\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    IgxCalendarComponent,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarModule,\n    IgxCalendarSubheaderTemplateDirective,\n    WEEKDAYS\n} from '../calendar/index';\nimport { IgxDialogComponent, IgxDialogModule } from '../dialog/dialog.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputDirective } from '../input-group/index';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings } from '../services';\nimport { DeprecateClass } from '../core/deprecateDecorators';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\n\n@Directive({\n    selector: '[igxDatePickerTemplate]'\n})\nexport class IgxDatePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Date Picker** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)\n *\n * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.\n *\n * Example:\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\n@Component({\n    providers:\n        [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxDatePickerComponent, multi: true }],\n    // tslint:disable-next-line:component-selector\n    selector: 'igx-datePicker, igx-date-picker',\n    styles: [':host {display: block;}'],\n    template: `<div [ngClass]=\"{'igx-date-picker': !vertical, 'igx-date-picker--vertical': vertical}\">\n    <ng-template #defaultDatePickerTemplate>\n        <igx-input-group (click)=\"openDialog()\">\n            <igx-prefix>\n                <igx-icon>today</igx-icon>\n            </igx-prefix>\n            <label *ngIf=\"labelVisibility\" igxLabel>{{label}}</label>\n            <input class=\"igx-date-picker__input-date\" igxInput [value]=\"displayData\" [disabled]=\"disabled\" readonly />\n        </igx-input-group>\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\n    <igx-dialog class=\"igx-date-picker__dialog-popup\" closeOnOutsideSelect=\"true\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"alert.close()\"\n        [rightButtonLabel]=\"todayButtonLabel\" (onRightButtonSelect)=\"triggerTodaySelection()\">\n        <ng-container #container></ng-container>\n    </igx-dialog>\n</div>\n`\n})\n@DeprecateClass('\\'igx-datePicker\\' selector is deprecated. Use \\'igx-date-picker\\' selector instead.')\nexport class IgxDatePickerComponent implements ControlValueAccessor, EditorProvider, OnInit, OnDestroy {\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-date-picker-${NEXT_ID++}`;\n\n    /**\n     *An @Input property that applies custom formatter on the selected or passed date.\n     *```typescript\n     *public date: Date = new Date();\n     *private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     *private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *public formatter = (date: Date) => { return `You selected\n     *                     ${this.dayFormatter.format(date)},\n     *                     ${date.getDate()} ${this.monthFormatter.format(date)},\n     *                     ${date.getFullYear()}`;\n     *}\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public formatter: (val: Date) => string;\n\n    /**\n     *An @Input property that disables the `IgxDatePickerComponent`.\n     *```html\n     *<igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     *An @Input property that sets the selected date.\n     *```typescript\n     *public date: Date = new Date();\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public value: Date;\n\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label.\n     * The default label is 'Date'.\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public label = 'Date';\n\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label visibility.\n     * By default the visibility is set to true.\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    @Input()\n    public labelVisibility = true;\n\n    /**\n     *An @Input property that sets locales. Default locale is en.\n     *```html\n     *<igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input() public locale: string = Constants.DEFAULT_LOCALE_DATE;\n\n    /**\n     *An @Input property that sets on which day the week starts.\n     *```html\n     *<igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input() public weekStart: WEEKDAYS | number = WEEKDAYS.SUNDAY;\n\n    /**\n     *Returns the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatOptions = this.datePicker.formatOptions;\n     *}\n     *```\n     */\n    @Input()\n    public get formatOptions(): IFormatOptions {\n        return this._formatOptions;\n    }\n    /**\n     *Sets the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Options;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Options = {\n     *        day: \"numeric\",\n     *        month: \"long\",\n     *        weekday: \"long\",\n     *        year: \"numeric\"\n     *    }\n     *this.datePicker.formatOptions = this.Options;\n     *}\n     *```\n     */\n    public set formatOptions(formatOptions: IFormatOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n    }\n\n    /**\n     *Returns the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatViews = this.datePicker.formatViews;\n     *}\n     *```\n     */\n    @Input()\n    public get formatViews(): IFormatViews {\n        return this._formatViews;\n    }\n\n    /**\n     *Sets the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Views;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Views = {day:false, month: false, year:false};\n     *    this.datePicker.formatViews = this.Views;\n     *}\n     *```\n     */\n    public set formatViews(formatViews: IFormatViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * ```\n     */\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.disabledDates = [\n     *      new DateRangeDescriptor(DateRangeType.Between, [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]),\n     *      new DateRangeDescriptor(DateRangeType.Weekends)];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * ```\n     */\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.specialDates = [\n     *      new DateRangeDescriptor(DateRangeType.Between, [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]),\n     *      new DateRangeDescriptor(DateRangeType.Weekends)];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     *An @Input proeprty that sets the orientation of the `IgxDatePickerComponent` header.\n     *```html\n     *<igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     *An @Input property that renders today button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public todayButtonLabel: string;\n\n    /**\n     *An @Input property that renders cancel button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public cancelButtonLabel: string;\n\n    /**\n     *An event that is emitted when the `IgxDatePickerComponent` is opened.\n     *```typescript\n     *public open(event){\n     *    alert(\"The date-picker has been opened!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onOpen)=\"open($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     *\"An event that is emitted when the `IgxDatePickerComponent` is closed.\n     *```typescript\n     *public close(event){\n     *    alert(\"The date-picker has been closed!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onClose)=\"close($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IgxDatePickerComponent>();\n    /**\n     *An @Output property that is fired when selection is made in the calendar.\n     *```typescript\n     *public selection(event){\n     *    alert(\"A date has been selected!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onSelection)=\"selection($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /*\n     * @hidden\n     */\n    @ViewChild('defaultDatePickerTemplate', { read: TemplateRef })\n    protected defaultDatePickerTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective })\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n\n    /**\n     *Returns the formatted date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *public selection(event){\n     *    let selectedDate = this.datePicker.displayData;\n     *    alert(selectedDate);\n     *}\n     *```\n     *```html\n     *<igx-date-picker #MyDatePicker (onSelection)=\"selection()\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    public get displayData() {\n        if (this.value) {\n            return this._customFormatChecker(this.formatter, this.value);\n        }\n\n        return '';\n    }\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective })\n\n    public headerTemplate: IgxCalendarHeaderTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective })\n    public subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('container', { read: ViewContainerRef })\n    public container: ViewContainerRef;\n\n    /**\n     *@hidden\n     */\n    @ViewChild(IgxDialogComponent)\n    public alert: IgxDialogComponent;\n\n    /**\n     *@hidden\n     */\n    public calendarRef: ComponentRef<IgxCalendarComponent>;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     *@hidden\n     */\n    public get calendar() {\n        return this.calendarRef.instance;\n    }\n\n    protected destroy$ = new Subject<boolean>();\n\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n\n    private _disabledDates: DateRangeDescriptor[] = null;\n\n    private _specialDates: DateRangeDescriptor[] = null;\n\n    @ViewChild(IgxInputDirective) protected input: IgxInputDirective;\n\n    constructor(private resolver: ComponentFactoryResolver) { }\n\n    /**\n     *Method that sets the selected date.\n     *```typescript\n     *public date = new Date();\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.writeValue(this.date);\n     *}\n     *```\n     *@param value The date you want to select.\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public writeValue(value: Date) {\n        this.value = value;\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this.input.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        this.alert.onOpen.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._focusTheDialog());\n        this.alert.toggleRef.onClosed.pipe(takeUntil(this.destroy$)).subscribe((ev) => this.handleDialogCloseAction());\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     *Selects today's date from calendar and change the input field value, @calendar.viewDate and @calendar.value.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.triggerTodaySelection();\n     *}\n     *```\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public triggerTodaySelection() {\n        const today = new Date(Date.now());\n        this.handleSelection(today);\n    }\n\n    /**\n     * Change the calendar selection and calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.selectDate(this.date);\n     *}\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public selectDate(date: Date) {\n        this.value = date;\n        this.onSelection.emit(date);\n        this._onChangeCallback(date);\n    }\n\n    /**\n     * Deselects the calendar date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.deselectDate();\n     *}\n     * ```\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public deselectDate() {\n        this.value = null;\n        this._onChangeCallback(null);\n    }\n\n    /**\n     * Open the dialog and update the calendar.\n     *\n     * @hidden\n     */\n    public openDialog(): void {\n        this.createCalendarRef();\n        if (this.outlet) {\n            const overlaySettings: OverlaySettings = {\n                outlet: this.outlet\n            };\n            this.alert.open(overlaySettings);\n        } else {\n            this.alert.open();\n        }\n        this._onTouchedCallback();\n        this.onOpen.emit(this);\n    }\n\n    private createCalendarRef(): void {\n        const factory = this.resolver.resolveComponentFactory(IgxCalendarComponent);\n\n        this.calendarRef = this.container.createComponent(factory);\n\n        this.calendarRef.changeDetectorRef.detach();\n        this.updateCalendarInstance();\n        this.calendarRef.location.nativeElement.classList.add('igx-date-picker__date--opened');\n        this.calendarRef.changeDetectorRef.reattach();\n    }\n\n    /**\n     * Closes the dialog, after was clearing all calendar items from dom.\n     *\n     * @hidden\n     */\n    public handleDialogCloseAction() {\n        this.onClose.emit(this);\n        this.calendarRef.destroy();\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden\n     */\n    public handleSelection(date: Date) {\n        if (this.value !== null && this.value !== undefined) {\n            date.setHours(this.value.getHours());\n            date.setMinutes(this.value.getMinutes());\n            date.setSeconds(this.value.getSeconds());\n            date.setMilliseconds(this.value.getMilliseconds());\n        }\n\n        this.value = date;\n        this.calendar.viewDate = date;\n        this._onChangeCallback(date);\n        this.alert.close();\n        this.onSelection.emit(date);\n    }\n\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onSpaceClick(event) {\n        this.openDialog();\n        event.preventDefault();\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.datePickerTemplateDirective) {\n            return this.datePickerTemplateDirective.template;\n        }\n        return this.defaultDatePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayData: this.displayData,\n            openDialog: () => { this.openDialog(); }\n        };\n    }\n\n    private updateCalendarInstance() {\n        this.calendar.formatOptions = this._formatOptions;\n        this.calendar.formatViews = this._formatViews;\n        this.calendar.locale = this.locale;\n        this.calendar.vertical = this.vertical;\n        this.calendar.disabledDates = this.disabledDates;\n        this.calendar.specialDates = this.specialDates;\n\n        if (this.headerTemplate) {\n            this.calendar.headerTemplate = this.headerTemplate;\n        }\n\n        if (this.subheaderTemplate) {\n            this.calendar.subheaderTemplate = this.subheaderTemplate;\n        }\n\n        if (this.value) {\n            this.calendar.value = this.value;\n            this.calendar.viewDate = this.value;\n        }\n        this.calendar.weekStart = this.weekStart;\n        this.calendar.onSelection.pipe(takeUntil(this.destroy$)).subscribe((ev: Date) => this.handleSelection(ev));\n    }\n\n    // Focus the dialog element, after its appearence into DOM.\n    private _focusTheDialog() {\n        requestAnimationFrame(() => this.alert.toggleRef.element.focus());\n    }\n\n    private _setLocaleToDate(value: Date, locale: string = Constants.DEFAULT_LOCALE_DATE): string {\n        return value.toLocaleDateString(locale);\n    }\n\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker(formatter: (_: Date) => string, date: Date) {\n        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date, this.locale);\n    }\n\n    private _onTouchedCallback: () => void = () => { };\n\n    private _onChangeCallback: (_: Date) => void = () => { };\n}\n\nclass Constants {\n    public static readonly DEFAULT_LOCALE_DATE = 'en';\n}\n\n/**\n * The IgxDatePickerModule provides the {@link IgxDatePickerComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxDatePickerComponent, IgxDatePickerTemplateDirective],\n    entryComponents: [IgxCalendarComponent],\n    exports: [IgxDatePickerComponent, IgxDatePickerTemplateDirective],\n    imports: [CommonModule, IgxIconModule, IgxInputGroupModule, IgxDialogModule, IgxCalendarModule]\n})\nexport class IgxDatePickerModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { cloneArray, isEqual, mergeObjects } from '../core/utils';\nimport { DataUtil, DataType } from '../data-operations/data-util';\nimport { IFilteringExpression, FilteringLogic } from '../data-operations/filtering-expression.interface';\nimport { IGroupByExpandState } from '../data-operations/groupby-expand-state.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { IGridEditEventArgs, IgxGridBaseComponent } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { Transaction, TransactionType } from '../services/index';\nimport { ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { SortingStateDefaults } from '../data-operations/sorting-state.interface';\n/**\n *@hidden\n */\n@Injectable()\nexport class GridBaseAPIService <T extends IgxGridBaseComponent> {\n\n    public change: Subject<any> = new Subject<any>();\n    protected state: Map<string, T> = new Map<string, T>();\n    protected editCellState: Map<string, any> = new Map<string, any>();\n    protected editRowState: Map<string, { rowID: any, rowIndex: number }> = new Map();\n    protected summaryCacheMap: Map<string, Map<string, any[]>> = new Map<string, Map<string, any[]>>();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    public register(grid: T) {\n        this.state.set(grid.id, grid);\n        this.destroyMap.set(grid.id, new Subject<boolean>());\n    }\n\n    public unsubscribe(grid: T) {\n        this.state.delete(grid.id);\n    }\n\n    public get(id: string): T {\n        return this.state.get(id);\n    }\n\n    public unset(id: string) {\n        this.state.delete(id);\n        this.summaryCacheMap.delete(id);\n        this.editCellState.delete(id);\n        this.editRowState.delete(id);\n        this.destroyMap.delete(id);\n    }\n\n    public reset(oldId: string, newId: string) {\n        const destroy = this.destroyMap.get(oldId);\n        const summary = this.summaryCacheMap.get(oldId);\n        const editCellState = this.editCellState.get(oldId);\n        const editRowState = this.editRowState.get(oldId);\n        const grid = this.get(oldId);\n\n        this.unset(oldId);\n\n        if (grid) {\n            this.state.set(newId, grid);\n        }\n\n        if (destroy) {\n            this.destroyMap.set(newId, destroy);\n        }\n\n        if (summary) {\n            this.summaryCacheMap.set(newId, summary);\n        }\n\n        if (editCellState) {\n            this.editCellState.set(newId, editCellState);\n        }\n\n        if (editRowState) {\n            this.editRowState.set(newId, editRowState);\n    }\n    }\n\n    public get_column_by_name(id: string, name: string): IgxColumnComponent {\n        return this.get(id).columnList.find((col) => col.field === name);\n    }\n\n    public set_summary_by_column_name(id: string, name: string) {\n        if (!this.summaryCacheMap.get(id)) {\n            this.summaryCacheMap.set(id, new Map<string, any[]>());\n        }\n        const column = this.get_column_by_name(id, name);\n        const grid = this.get(id);\n        let data = grid.filteredData;\n        if (!data) {\n            if (grid.transactions.enabled) {\n                data = DataUtil.mergeTransactions(\n                    cloneArray(grid.data),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey\n                );\n            } else {\n                data = grid.data;\n            }\n        }\n        if (data) {\n            const columnValues = data.map((rec) => rec[column.field]);\n            this.calculateSummaries(id, column, columnValues);\n        }\n    }\n\n    public get_summaries(id: string) {\n        return this.summaryCacheMap.get(id);\n    }\n\n    public remove_summary(id: string, name?: string) {\n        if (this.summaryCacheMap.has(id)) {\n            if (!name) {\n                this.summaryCacheMap.delete(id);\n            } else {\n                this.summaryCacheMap.get(id).delete(name);\n            }\n        }\n    }\n\n    public set_cell_inEditMode(gridId: string, cell: IgxGridCellComponent) {\n        const grid = this.get(gridId);\n        const args: IGridEditEventArgs = {\n            rowID: cell.cellID.rowID,\n            cellID: cell.cellID,\n            oldValue: cell.value,\n            cancel: false\n        };\n        grid.onCellEditEnter.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        if (grid.rowEditable) {\n            const currentEditRow = this.get_edit_row_state(gridId);\n            if (currentEditRow && currentEditRow.rowID !== cell.cellID.rowID) {\n                grid.endEdit(true);\n                grid.startRowEdit(cell.cellID);\n            }\n            if (!currentEditRow) {\n                grid.startRowEdit(cell.cellID);\n            }\n        }\n\n        if (!this.get_cell_inEditMode(gridId)) {\n            const cellCopy = Object.assign({}, cell);\n            cellCopy.row = Object.assign({}, cell.row);\n        this.editCellState.set(gridId, { cellID: cell.cellID, cell: cellCopy });\n        }\n    }\n\n    public escape_editMode(gridId, cellId?) {\n        const editableCell = this.get_cell_inEditMode(gridId);\n        if (editableCell) {\n            if (cellId) {\n                if (cellId.rowID === editableCell.cellID.rowID &&\n                    cellId.columnID === editableCell.cellID.columnID) {\n                    this.editCellState.delete(gridId);\n                }\n            } else {\n                const grid = this.get(gridId);\n                this.editCellState.delete(gridId);\n            }\n        }\n\n        this.get(gridId).refreshSearch();\n    }\n\n\n    public get_cell_inEditMode(gridId): {\n        cellID: {\n            rowID: any,\n            columnID: number,\n            rowIndex: number\n        },\n        cell: any\n    } {\n        const editCellId = this.editCellState.get(gridId);\n        if (editCellId) {\n            return editCellId;\n        } else {\n            return null;\n        }\n    }\n\n    public get_row_index_in_data(id: string, rowID: any): number {\n        const grid = this.get(id) as IgxGridBaseComponent;\n        if (!grid) {\n            return -1;\n        }\n        const data = this.get_all_data(id);\n        return grid.primaryKey ? data.findIndex(record => record[grid.primaryKey] === rowID) : data.indexOf(rowID);\n    }\n\n    public get_row_by_key(id: string, rowSelector: any): IgxRowComponent<IgxGridBaseComponent> {\n        const primaryKey = this.get(id).primaryKey;\n        if (primaryKey !== undefined && primaryKey !== null) {\n            return this.get(id).dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);\n        } else {\n            return this.get(id).dataRowList.find((row) => row.rowData === rowSelector);\n        }\n    }\n\n    public get_row_by_index(id: string, rowIndex: number): IgxRowComponent<IgxGridBaseComponent> {\n        return this.get(id).rowList.find((row) => row.index === rowIndex);\n    }\n\n    public get_edit_row_state(gridId): {\n        rowID: any,\n        rowIndex: number\n    } {\n        const editRow = this.editRowState.get(gridId);\n        return editRow ? editRow : null;\n\n    }\n\n    public set_edit_row_state(gridId, row: { rowID: any, rowIndex: number }) {\n        if (!row) {\n            this.editRowState.delete(gridId);\n        } else {\n            this.editRowState.set(gridId, row);\n        }\n    }\n\n\n    public get_cell_by_key(id: string, rowSelector: any, field: string): IgxGridCellComponent {\n        const row = this.get_row_by_key(id, rowSelector);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.column.field === field);\n        }\n    }\n\n    public get_cell_by_index(id: string, rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(id, rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.columnIndex === columnIndex);\n        }\n    }\n\n    public get_cell_by_visible_index(id: string, rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(id, rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);\n        }\n    }\n\n    public submit_value(gridId) {\n        const editableCell = this.get_cell_inEditMode(gridId);\n        if (editableCell) {\n            const gridEditState = this.create_grid_edit_args(gridId, editableCell.cellID.rowID,\n                editableCell.cellID.columnID, editableCell.cell.editValue);\n            if (!editableCell.cell.column.inlineEditorTemplate && editableCell.cell.column.dataType === 'number') {\n                if (!editableCell.cell.editValue) {\n                    gridEditState.args.newValue = 0;\n                    this.update_cell(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID, 0, gridEditState);\n                } else {\n                    const val = parseFloat(editableCell.cell.editValue);\n                    if (!isNaN(val) || isFinite(val)) {\n                        gridEditState.args.newValue = val;\n                        this.update_cell(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID, val, gridEditState);\n                    }\n                }\n            } else {\n                this.update_cell(gridId, editableCell.cellID.rowID, editableCell.cellID.columnID,\n                    editableCell.cell.editValue, gridEditState);\n            }\n            if (gridEditState.args.cancel) {\n                return;\n            }\n            this.escape_editMode(gridId, editableCell.cellID);\n        }\n    }\n\n    public create_grid_edit_args(id: string, rowID, columnID, editValue): {\n        args: IGridEditEventArgs,\n        isRowSelected: boolean,\n        rowData: any\n    } {\n        const grid = this.get(id);\n        const data = this.get_all_data(id);\n        const isRowSelected = grid.selection.is_item_selected(id, rowID);\n        const editableCell = this.get_cell_inEditMode(id);\n        const column = grid.columnList.toArray()[columnID];\n        columnID = columnID !== undefined && columnID !== null ? columnID : null;\n        let cellObj;\n        if (columnID !== null) {\n            if ((editableCell && editableCell.cellID.rowID === rowID && editableCell.cellID.columnID === columnID)) {\n                cellObj = editableCell;\n            } else {\n                cellObj = grid.columnList.toArray()[columnID].cells.find((cell) => cell.cellID.rowID === rowID);\n            }\n        }\n        let rowIndex = this.get_row_index_in_data(id, rowID);\n        let oldValue: any;\n        let rowData: any;\n        if (rowIndex !== -1) {\n            oldValue = columnID !== null ? data[rowIndex][column.field] : null;\n            rowData = data[rowIndex];\n        }\n\n        //  if we have transactions and add row was edited look for old value and row data in added rows\n        if (rowIndex < 0 && grid.transactions.enabled) {\n            const dataWithTransactions = grid.dataWithAddedInTransactionRows;\n            rowIndex = grid.primaryKey ?\n            dataWithTransactions.map((record) => record[grid.primaryKey]).indexOf(rowID) :\n            dataWithTransactions.indexOf(rowID);\n            if (rowIndex !== -1) {\n                //  Check if below change will work on added rows with transactions\n                // oldValue = this.get_all_data(id, true)[rowIndex][column.field];\n                // rowData = this.get_all_data(id, true)[rowIndex];\n                oldValue = columnID !== null ? dataWithTransactions[rowIndex][column.field] : null;\n                rowData = dataWithTransactions[rowIndex];\n            }\n        }\n        const args = {\n            rowID,\n                oldValue: oldValue,\n                newValue: editValue,\n                cancel: false\n        };\n        if (cellObj) {\n            Object.assign(args, {\n                cellID: cellObj.cellID\n            });\n        }\n        return {\n            args,\n            isRowSelected,\n            rowData\n        };\n    }\n\n    //  TODO: refactor update_cell. Maybe separate logic in two methods - one with transaction\n    //  and one without transaction\n    public update_cell(id: string, rowID, columnID, editValue, gridEditState?: {\n        args: IGridEditEventArgs,\n        isRowSelected: boolean,\n        rowData: any\n    }): void {\n        const grid = this.get(id);\n        const data = this.get_all_data(id);\n        const currentGridEditState = gridEditState || this.create_grid_edit_args(id, rowID, columnID, editValue);\n        const emittedArgs = currentGridEditState.args;\n        const column = grid.columnList.toArray()[columnID];\n        const rowIndex = this.get_row_index_in_data(id, rowID);\n\n        if (emittedArgs.oldValue !== undefined && currentGridEditState.rowData !== undefined) {\n            grid.onCellEdit.emit(emittedArgs);\n            if (emittedArgs.cancel) {\n                return;\n            }\n            //  if we are editing the cell for second or next time, get the old value from transaction\n            const oldValueInTransaction = grid.transactions.getAggregatedValue(rowID, true);\n            if (oldValueInTransaction) {\n                emittedArgs.oldValue = oldValueInTransaction[column.field];\n            }\n\n            //  if edit (new) value is same as old value do nothing here\n            if (emittedArgs.oldValue !== undefined\n                && isEqual(emittedArgs.oldValue, emittedArgs.newValue)) { return; }\n            const transaction: Transaction = {\n                id: rowID, type: TransactionType.UPDATE, newValue: { [column.field]: emittedArgs.newValue }\n            };\n            if (grid.transactions.enabled) {\n                grid.transactions.add(transaction, currentGridEditState.rowData);\n            } else {\n                const rowValue = this.get_all_data(id)[rowIndex];\n                mergeObjects(rowValue, {[column.field]: emittedArgs.newValue });\n            }\n            if (grid.primaryKey === column.field && currentGridEditState.isRowSelected) {\n                grid.selection.deselect_item(id, rowID);\n                grid.selection.select_item(id, emittedArgs.newValue);\n            }\n            if (!grid.rowEditable || !grid.rowInEditMode || grid.rowInEditMode.rowID !== rowID) {\n                (grid as any)._pipeTrigger++;\n            }\n        }\n    }\n\n    public update_row(value: any, id: string, rowID: any, gridState?: {\n        args: IGridEditEventArgs,\n        isRowSelected: boolean,\n        rowData: any\n    }): void {\n        const grid = this.get(id);\n        const data = this.get_all_data(id);\n        const currentGridState = gridState ? gridState : this.create_grid_edit_args(id, rowID, null, value);\n        const emitArgs = currentGridState.args;\n        const index = this.get_row_index_in_data(id, rowID);\n        const currentRowInEditMode = this.get_edit_row_state(id);\n        let oldValue = Object.assign({}, data[index]);\n        if (grid.currentRowState && grid.currentRowState[grid.primaryKey] === rowID\n            || currentRowInEditMode && currentRowInEditMode.rowID === rowID) {\n            oldValue = Object.assign(oldValue, grid.currentRowState);\n        } else if (grid.transactions.enabled) {\n            // If transactions are enabled, old value == last commited value (as it's not applied in data yet)\n            const lastCommitedValue = // Last commited value (w/o pending)\n                grid.transactions.getState(rowID) ? Object.assign({}, grid.transactions.getState(rowID).value) : null;\n            oldValue = lastCommitedValue ? Object.assign(oldValue, lastCommitedValue) : oldValue;\n        }\n        Object.assign(emitArgs, { oldValue, rowID});\n        if (index !== -1) {\n            grid.onRowEdit.emit(emitArgs);\n            if (emitArgs.cancel) {\n                return;\n            }\n            if (currentRowInEditMode) {\n                grid.transactions.endPending(false);\n            }\n            if (grid.transactions.enabled && emitArgs.newValue !== null) {\n                grid.transactions.add({id: rowID, newValue: emitArgs.newValue, type: TransactionType.UPDATE}, emitArgs.oldValue);\n            } else if (emitArgs.newValue !== null && emitArgs.newValue !== undefined) {\n                Object.assign(data[index], emitArgs.newValue);\n            }\n            if (currentGridState.isRowSelected) {\n                grid.selection.deselect_item(id, rowID);\n                const newRowID = (grid.primaryKey) ? emitArgs.newValue[grid.primaryKey] : emitArgs.newValue;\n                grid.selection.select_item(id, newRowID);\n            }\n            (grid as any)._pipeTrigger++;\n        }\n    }\n\n    protected update_row_in_array(id: string, value: any, rowID: any, index: number) {\n        const grid = this.get(id);\n        grid.data[index] = value;\n    }\n\n    public sort(id: string, fieldName: string, dir: SortingDirection, ignoreCase: boolean, strategy: ISortingStrategy): void {\n        if (dir === SortingDirection.None) {\n            this.remove_grouping_expression(id, fieldName);\n        }\n        const sortingState = cloneArray(this.get(id).sortingExpressions);\n        strategy = strategy ? strategy : this.getSortStrategyPerColumn(id, fieldName);\n        this.prepare_sorting_expression([sortingState], { fieldName, dir, ignoreCase, strategy });\n        this.get(id).sortingExpressions = sortingState;\n    }\n\n    public sort_multiple(id: string, expressions: ISortingExpression[]): void {\n        const sortingState = cloneArray(this.get(id).sortingExpressions);\n\n        for (const each of expressions) {\n            if (each.dir === SortingDirection.None) {\n                this.remove_grouping_expression(id, each.fieldName);\n            }\n            each.strategy = each.strategy ? each.strategy : this.getSortStrategyPerColumn(id, each.fieldName);\n            this.prepare_sorting_expression([sortingState], each);\n        }\n\n        this.get(id).sortingExpressions = sortingState;\n    }\n\n    public filter(id: string, fieldName: string, term, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase: boolean) {\n        const grid = this.get(id);\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        const fieldFilterIndex = filteringTree.findIndex(fieldName);\n        if (fieldFilterIndex > -1) {\n            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);\n        }\n\n        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase);\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public filter_global(id, term, condition, ignoreCase) {\n        const grid = this.get(id);\n        const filteringTree = grid.filteringExpressionsTree;\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        filteringTree.filteringOperands = [];\n        this.remove_summary(id);\n\n        if (condition) {\n            for (const column of grid.columns) {\n                this.prepare_filtering_expression(filteringTree, column.field, term,\n                    condition, ignoreCase || column.filteringIgnoreCase);\n            }\n        }\n\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public clear_filter(id, fieldName) {\n        if (fieldName) {\n            const column = this.get_column_by_name(id, fieldName);\n            if (!column) {\n                return;\n            }\n        }\n\n        const grid = this.get(id);\n        const filteringState = grid.filteringExpressionsTree;\n        const index = filteringState.findIndex(fieldName);\n\n        if (index > -1) {\n            filteringState.filteringOperands.splice(index, 1);\n            this.remove_summary(id, fieldName);\n        } else {\n            filteringState.filteringOperands = [];\n            this.remove_summary(id);\n        }\n\n        grid.filteredData = null;\n        grid.filteringExpressionsTree = filteringState;\n    }\n\n    protected calculateSummaries(id: string, column, data) {\n        if (!this.summaryCacheMap.get(id).get(column.field)) {\n            this.summaryCacheMap.get(id).set(column.field,\n                column.summaries.operate(data));\n        }\n    }\n\n    public clear_sort(id, fieldName) {\n        const sortingState = this.get(id).sortingExpressions;\n        const index = sortingState.findIndex((expr) => expr.fieldName === fieldName);\n        if (index > -1) {\n            sortingState.splice(index, 1);\n            this.get(id).sortingExpressions = sortingState;\n        }\n    }\n\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal,\n        conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean) {\n\n        let newExpressionsTree;\n        const oldExpressionsTreeIndex = filteringState.findIndex(fieldName);\n        const expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            conditionOrExpressionsTree as IFilteringExpressionsTree : null;\n        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            null : conditionOrExpressionsTree as IFilteringOperation;\n        const newExpression: IFilteringExpression = { fieldName, searchVal, condition, ignoreCase };\n\n        if (oldExpressionsTreeIndex === -1) {\n            // no expressions tree found for this field\n            if (expressionsTree) {\n                filteringState.filteringOperands.push(expressionsTree);\n            } else if (condition) {\n                // create expressions tree for this field and add the new expression to it\n                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);\n                newExpressionsTree.filteringOperands.push(newExpression);\n                filteringState.filteringOperands.push(newExpressionsTree);\n            }\n        }\n    }\n\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression) {\n        if (expression.dir === SortingDirection.None) {\n            stateCollections.forEach(state => {\n                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);\n            });\n            return;\n        }\n\n        /**\n         * We need to make sure the states in each collection with same fields point to the same object reference.\n         * If the different state collections provided have different sizes we need to get the largest one.\n         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.\n         */\n        let maxCollection = stateCollections[0];\n        for (let i = 1; i < stateCollections.length; i++) {\n            if (maxCollection.length < stateCollections[i].length) {\n                maxCollection = stateCollections[i];\n            }\n        }\n        const maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);\n\n        stateCollections.forEach(collection => {\n            const myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);\n            if (!myExpr && !maxExpr) {\n                // Expression with this fieldName is missing from the current and the max collection.\n                collection.push(expression);\n            } else if (!myExpr && maxExpr) {\n                // Expression with this fieldName is missing from the current and but the max collection has.\n                collection.push(maxExpr);\n                Object.assign(maxExpr, expression);\n            } else {\n                // The current collection has the expression so just update it.\n                Object.assign(myExpr, expression);\n            }\n        });\n    }\n\n    protected remove_grouping_expression(id, fieldName) {\n        }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number;\n    }\n\n    public get_all_data(id: string, transactions?: boolean): any[] {\n        const grid = this.get(id);\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.data;\n        return data ? data : [];\n    }\n\n    protected getSortStrategyPerColumn(id: string, fieldName: string) {\n        return this.get_column_by_name(this.get(id).id, fieldName) ?\n            this.get_column_by_name(id, fieldName).sortStrategy : undefined;\n    }\n}\n","import { DataUtil } from '../data-operations/data-util';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nexport interface ISummaryExpression {\n    fieldName: string;\n    customSummary?: any;\n}\nexport interface IgxSummaryResult {\n    key: string;\n    label: string;\n    summaryResult: any;\n}\n\nexport class IgxSummaryOperand {\n    /**\n     * Counts all the records in the data source.\n     * If filtering is applied, counts only the filtered records.\n     * ```typescript\n     * IgxSummaryOperand.count(dataSource);\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public static count(data: any[]): any {\n        return data.length;\n    }\n    /**\n     * Executes the static `count` method and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomSummary extends IgxSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"test\",\n     *       label: \"Test\",\n     *       summaryResult: IgxSummaryOperand.count(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomSummary;\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        return [{\n            key: 'count',\n            label: 'Count',\n            summaryResult: IgxSummaryOperand.count(data)\n        }];\n    }\n}\n\n// @dynamic\nexport class IgxNumberSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the minimum numeric value in the provided data records.\n     * If filtering is applied, returns the minimum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.min(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static min(data: any[]): any {\n        return data.length ? data.reduce((a, b) => Math.min(a, b)) : [];\n    }\n    /**\n     * Returns the maximum numeric value in the provided data records.\n     * If filtering is applied, returns the maximum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.max(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static max(data: any[]): any {\n        return data.length ? data.reduce((a, b) => Math.max(a, b)) : [];\n    }\n    /**\n     * Returns the sum of the numeric values in the provided data records.\n     * If filtering is applied, returns the sum of the numeric values in the data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.sum(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static sum(data: any[]): any {\n        return data.length ? data.reduce((a, b) => +a + +b) : [];\n    }\n    /**\n     * Returns the average numeric value in the data provided data records.\n     * If filtering is applied, returns the average numeric value in the filtered data records.\n     * ```typescript\n     * IgxSummaryOperand.average(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static average(data: any[]): any {\n        return data.length ? this.sum(data) / this.count(data) : [];\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomNumberSummary extends IgxNumberSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"avg\",\n     *       label: \"Avg\",\n     *       summaryResult: IgxNumberSummaryOperand.average(data)\n     *     });\n     *     result.push({\n     *       key: \"max\",\n     *       label: \"Max\",\n     *       summaryResult: IgxNumberSummaryOperand.max(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomNumberSummary;\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'min',\n            label: 'Min',\n            summaryResult: IgxNumberSummaryOperand.min(data)\n        });\n        result.push({\n            key: 'max',\n            label: 'Max',\n            summaryResult: IgxNumberSummaryOperand.max(data)\n        });\n        result.push({\n            key: 'sum',\n            label: 'Sum',\n            summaryResult: IgxNumberSummaryOperand.sum(data)\n        });\n        result.push({\n            key: 'average',\n            label: 'Avg',\n            summaryResult: IgxNumberSummaryOperand.average(data)\n        });\n        return result;\n    }\n}\n\n// @dynamic\nexport class IgxDateSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the latest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.latest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static latest(data: any[]) {\n        return data.sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())[0];\n    }\n    /**\n     * Returns the earliest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.earliest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static earliest(data: any[]) {\n        return data.sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())[data.length - 1];\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomDateSummary extends IgxDateSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"latest\",\n     *       label: \"Latest Date\",\n     *       summaryResult: IgxDateSummaryOperand.latest(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomDateSummary;\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'earliest',\n            label: 'Earliest',\n            summaryResult: IgxDateSummaryOperand.earliest(data)\n        });\n        result.push({\n            key: 'latest',\n            label: 'Latest',\n            summaryResult: IgxDateSummaryOperand.latest(data)\n        });\n        return result;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    Input,\n    QueryList,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { TransactionType, State } from '../services';\nimport { IgxGridBaseComponent } from './grid-base.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-row',\n    template: `<ng-container *ngIf=\"grid.groupingExpressions.length > 0\">\n    <div class=\"igx-grid__row-indentation igx-grid__row-indentation--level-{{grid.groupingExpressions.length}}\"></div>\n</ng-container>\n<ng-container *ngIf=\"rowSelectable\">\n    <div class=\"igx-grid__cbx-selection\">\n        <igx-checkbox [checked]=\"isSelected\" (change)=\"onCheckboxClick($event)\" disableRipple=\"true\" [aria-label]=\"rowCheckboxAriaLabel\"></igx-checkbox>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"pinnedColumns.length > 0\">\n    <igx-grid-cell *ngFor=\"let col of notGroups(pinnedColumns)\" [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\"></igx-grid-cell>\n</ng-container>\n<ng-template igxGridFor let-col [igxGridForOf]=\"notGroups(unpinnedColumns)\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]='grid.unpinnedWidth' [igxForTrackBy]='grid.trackColumnChanges' #igxDirRef>\n    <igx-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\"></igx-grid-cell>\n</ng-template>\n`\n})\nexport class IgxRowComponent<T extends IgxGridBaseComponent> implements DoCheck {\n\n    private _rowData: any;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public get rowData(): any {\n        if (this.inEditMode) {\n            return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));\n        }\n        return this._rowData;\n    }\n\n    public set rowData(v: any) {\n        this._rowData = v;\n    }\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent })\n    public checkboxElement: IgxCheckboxComponent;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxGridCellComponent), { read: IgxGridCellComponent })\n    public cells: QueryList<IgxGridCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveClasses();\n    }\n\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[] {\n        return this.grid.visibleColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowSelectable() {\n        return this.grid.rowSelectable;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-selected')\n    public isSelected: boolean;\n\n    /** @hidden */\n    public get dirty(): boolean {\n        const row: State = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;\n        }\n\n        return false;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.isRowDeleted();\n    }\n\n    public get inEditMode(): boolean {\n        if (this.grid.rowEditable) {\n            const editRowState = this.gridAPI.get_edit_row_state(this.gridID);\n            return (editRowState && editRowState.rowID === this.rowID) || false;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T {\n        return this.gridAPI.get(this.gridID);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowID() {\n        // A row in the grid is identified either by:\n        // primaryKey data value,\n        // or if the primaryKey is omitted, then the whole rowData is used instead.\n        const primaryKey = this.grid.primaryKey;\n        return primaryKey ? this._rowData[primaryKey] : this._rowData;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public focused = false;\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__tr';\n\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n\n    constructor(public gridAPI: GridBaseAPIService<T>,\n        private selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n\n    /**\n     * @hidden\n     */\n    public onCheckboxClick(event) {\n        const newSelection = (event.checked) ?\n            this.selection.add_item(this.gridID, this.rowID) :\n            this.selection.delete_item(this.gridID, this.rowID);\n        this.grid.triggerRowSelectionChange(newSelection, this, event);\n    }\n\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    public update(value: any) {\n        const editableCell = this.gridAPI.get_cell_inEditMode(this.gridID);\n        if (editableCell && editableCell.cellID.rowID === this.rowID) {\n            this.grid.endEdit(false);\n        }\n        this.gridAPI.update_row(value, this.gridID, this.rowID);\n        this.cdr.markForCheck();\n        this.grid.refreshSearch();\n    }\n\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    public delete() {\n        this.grid.deleteRowById(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel() {\n        return this.grid.primaryKey ?\n            this.isSelected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :\n            this.isSelected ? 'Deselect row' : 'Select row';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isSelected = this.rowSelectable ?\n            this.grid.allRowsSelected ? true : this.selection.is_item_selected(this.gridID, this.rowID) :\n            this.selection.is_item_selected(this.gridID, this.rowID);\n        this.cdr.markForCheck();\n        if (this.checkboxElement) {\n            this.checkboxElement.checked = this.isSelected;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    notGroups(arr) {\n        return arr.filter(c => !c.columnGroup);\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;\n        const selectedClass = this.isSelected ? 'igx-grid__tr--selected' : '';\n        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';\n        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';\n        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';\n        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass} ${deletedClass}`.trim();\n    }\n\n    protected isRowDeleted(): boolean {\n        const state: State = this.grid.transactions.getState(this.rowID);\n        if (state) {\n            return state.type === TransactionType.DELETE;\n        }\n\n        return false;\n    }\n}\n","import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Injectable,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    TemplateRef\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Observable, Subject } from 'rxjs';\nimport { map, switchMap, takeUntil, throttle } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxDragDirective, IgxDropDirective } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { ConnectedPositioningStrategy } from '../services';\nimport { getPointFromPositionsSettings, VerticalAlignment, PositionSettings } from '../services/overlay/utilities';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizer]'\n})\nexport class IgxColumnResizerDirective implements OnInit, OnDestroy {\n\n    @Input()\n    public restrictHResizeMin: number = Number.MIN_SAFE_INTEGER;\n\n    @Input()\n    public restrictHResizeMax: number = Number.MAX_SAFE_INTEGER;\n\n    @Input()\n    public resizeEndTimeout = 0;\n\n    @Output()\n    public resizeEnd = new Subject<any>();\n\n    @Output()\n    public resizeStart = new Subject<any>();\n\n    @Output()\n    public resize = new Subject<any>();\n\n    private _left;\n    private _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, @Inject(DOCUMENT) public document, public zone: NgZone) {\n\n        this.resizeStart.pipe(\n            map((event) => event.clientX),\n            takeUntil(this._destroy),\n            switchMap((offset) => this.resize.pipe(\n                map((event) => event.clientX - offset),\n                takeUntil(this.resizeEnd),\n                takeUntil(this._destroy)\n            ))\n        ).subscribe((pos) => {\n            const left = this._left + pos;\n\n            this.left = left < this.restrictHResizeMin ? this.restrictHResizeMin + 'px' : left + 'px';\n\n            if (left > this.restrictHResizeMax) {\n                this.left = this.restrictHResizeMax + 'px';\n            } else if (left > this.restrictHResizeMin) {\n                this.left = left + 'px';\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.document.defaultView, 'mousedown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMousedown(res));\n\n            fromEvent(this.document.defaultView, 'mousemove').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy)\n            ).subscribe((res) => this.onMousemove(res));\n\n            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMouseup(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.unsubscribe();\n    }\n\n    public set left(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.left = val);\n    }\n\n    onMouseup(event) {\n        setTimeout(() => {\n            this.resizeEnd.next(event);\n            this.resizeEnd.complete();\n        }, this.resizeEndTimeout);\n    }\n\n    onMousedown(event) {\n        this.resizeStart.next(event);\n        event.preventDefault();\n\n        const elStyle = this.document.defaultView.getComputedStyle(this.element.nativeElement);\n        this._left = Number.isNaN(parseInt(elStyle.left, 10)) ? 0 : parseInt(elStyle.left, 10);\n    }\n\n    onMousemove(event) {\n        this.resize.next(event);\n        event.preventDefault();\n    }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCell]'\n})\nexport class IgxCellTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeader]'\n})\nexport class IgxCellHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxFooter]'\n})\nexport class IgxCellFooterTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCellEditor]'\n})\nexport class IgxCellEditorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxColumnMovingService {\n    private _icon: any;\n    private _column: IgxColumnComponent;\n\n    public cancelDrop: boolean;\n    public selection: {\n        column: IgxColumnComponent,\n        rowID: any\n    };\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n    set column(val: IgxColumnComponent) {\n        if (val) {\n            this._column = val;\n        }\n    }\n\n    get icon(): any {\n        return this._icon;\n    }\n    set icon(val: any) {\n        if (val) {\n            this._icon = val;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport enum DropPosition {\n    BeforeDropTarget,\n    AfterDropTarget,\n    None\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrag]'\n})\nexport class IgxColumnMovingDragDirective extends IgxDragDirective {\n\n    @Input('igxColumnMovingDrag')\n    set data(val: IgxColumnComponent) {\n        this._column = val;\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get draggable(): boolean {\n        return this.column && (this.column.movable || this.column.groupable);\n    }\n\n    public get icon(): HTMLElement {\n        return this.cms.icon;\n    }\n\n    private _column: IgxColumnComponent;\n    private _ghostImageClass = 'igx-grid__drag-ghost-image';\n    private _dragGhostImgIconClass = 'igx-grid__drag-ghost-image-icon';\n    private _dragGhostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';\n\n    @HostListener('document:keydown.escape', ['$event'])\n    public onEscape(event) {\n        this.cms.cancelDrop = true;\n        this.onPointerUp(event);\n    }\n\n    constructor(\n        _element: ElementRef,\n        _zone: NgZone,\n        _renderer: Renderer2,\n        _cdr: ChangeDetectorRef,\n        private cms: IgxColumnMovingService,\n    ) {\n        super(_cdr, _element, _zone, _renderer);\n    }\n\n    public onPointerDown(event) {\n\n        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._removeOnDestroy = false;\n        this.cms.column = this.column;\n        this.ghostImageClass = this._ghostImageClass;\n\n        super.onPointerDown(event);\n\n        this.column.grid.isColumnMoving = true;\n        this.column.grid.cdr.detectChanges();\n\n        const currSelection = this.column.grid.selection.first_item(this.column.gridID + '-cell');\n        if (currSelection) {\n            this.cms.selection = {\n                column: this.column.grid.columnList.toArray()[currSelection.columnID],\n                rowID: currSelection.rowID\n            };\n        }\n\n        const args = {\n            source: this.column\n        };\n        this.column.grid.onColumnMovingStart.emit(args);\n    }\n\n    public onPointerMove(event) {\n        event.preventDefault();\n        super.onPointerMove(event);\n\n        if (this._dragStarted && this._dragGhost && !this.column.grid.draggedColumn) {\n            this.column.grid.draggedColumn = this.column;\n            this.column.grid.cdr.detectChanges();\n        }\n\n        if (this.column.grid.isColumnMoving) {\n            const args = {\n                source: this.column,\n                cancel: false\n            };\n            this.column.grid.onColumnMoving.emit(args);\n\n            if (args.cancel) {\n                this.onEscape(event);\n            }\n        }\n    }\n\n    public onPointerUp(event) {\n        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.\n        this.zone.run(() => {\n            super.onPointerUp(event);\n\n            this.column.grid.isColumnMoving = false;\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        });\n    }\n\n    protected createDragGhost(event) {\n        super.createDragGhost(event);\n\n        let pageX, pageY;\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            pageX = event.pageX;\n            pageY = event.pageY;\n        } else {\n            pageX = event.touches[0].pageX;\n            pageY = event.touches[0].pageY;\n        }\n\n        this._dragGhost.style.height = null;\n        this._dragGhost.style.minWidth = null;\n        this._dragGhost.style.flexBasis = null;\n        this._dragGhost.style.position = null;\n\n        const icon = document.createElement('i');\n        const text = document.createTextNode('block');\n        icon.appendChild(text);\n\n        icon.classList.add('material-icons');\n        this.cms.icon = icon;\n\n        if (!this.column.columnGroup) {\n            this.renderer.addClass(icon, this._dragGhostImgIconClass);\n\n            this._dragGhost.removeChild(this._dragGhost.children[2]);\n            this._dragGhost.insertBefore(icon, this._dragGhost.children[1]);\n\n            this.left = this._dragStartX = pageX - ((this._dragGhost.getBoundingClientRect().width / 3) * 2);\n            this.top = this._dragStartY = pageY - ((this._dragGhost.getBoundingClientRect().height / 3) * 2);\n        } else {\n            this._dragGhost.removeChild(this._dragGhost.children[2]);\n            this._dragGhost.removeChild(this._dragGhost.firstElementChild);\n            this._dragGhost.removeChild(this._dragGhost.lastElementChild);\n            this._dragGhost.insertBefore(icon, this._dragGhost.firstElementChild);\n\n            this.renderer.addClass(icon, this._dragGhostImgIconGroupClass);\n            this._dragGhost.children[1].style.paddingLeft = '0px';\n\n            this.left = this._dragStartX = pageX - ((this._dragGhost.getBoundingClientRect().width / 3) * 2);\n            this.top = this._dragStartY = pageY - ((this._dragGhost.getBoundingClientRect().height / 3) * 2);\n        }\n    }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrop]'\n})\nexport class IgxColumnMovingDropDirective extends IgxDropDirective implements OnDestroy {\n    @Input('igxColumnMovingDrop')\n    set data(val: any) {\n        if (val instanceof IgxColumnComponent) {\n            this._column = val;\n        }\n\n        if (val instanceof IgxGridForOfDirective) {\n            this._hVirtDir = val;\n        }\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get isDropTarget(): boolean {\n        return this._column && this._column.grid.hasMovableColumns;\n    }\n\n    get horizontalScroll(): any {\n        if (this._hVirtDir) {\n            return this._hVirtDir;\n        }\n    }\n\n    private _dropPos: DropPosition;\n    private _dropIndicator: any = null;\n    private _lastDropIndicator: any = null;\n    private _column: IgxColumnComponent;\n    private _hVirtDir: IgxGridForOfDirective<any>;\n    private _dragLeave = new Subject<boolean>();\n    private _dropIndicatorClass = 'igx-grid__th-drop-indicator--active';\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone, private cms: IgxColumnMovingService) {\n        super(elementRef, renderer, zone);\n    }\n\n    public ngOnDestroy() {\n        this._dragLeave.next(true);\n        this._dragLeave.complete();\n    }\n\n    public onDragOver(event) {\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n            if (this._lastDropIndicator) {\n                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n\n            const pos = this.elementRef.nativeElement.getBoundingClientRect().left + parseFloat(this.column.width) / 2;\n\n            if (event.detail.pageX < pos) {\n                this._dropPos = DropPosition.BeforeDropTarget;\n                this._lastDropIndicator = this._dropIndicator = this.elementRef.nativeElement.firstElementChild;\n            } else {\n                this._dropPos = DropPosition.AfterDropTarget;\n                this._lastDropIndicator = this._dropIndicator = this.elementRef.nativeElement.lastElementChild;\n            }\n\n            if (this.cms.icon.innerText !== 'block') {\n                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n        }\n    }\n\n    public onDragEnter(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n                if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {\n                    this.cms.icon.innerText = 'swap_horiz';\n                }\n\n                if (!this.cms.column.pinned && this.column.pinned) {\n                    const nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n\n                    if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                        this.cms.icon.innerText = 'lock';\n                    } else {\n                        this.cms.icon.innerText = 'block';\n                    }\n                }\n            } else {\n                this.cms.icon.innerText = 'block';\n            }\n\n            if (this.horizontalScroll) {\n                this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';\n\n                interval(100).pipe(takeUntil(this._dragLeave)).subscribe((val) => {\n                    event.target.id === 'right' ? this.horizontalScroll.getHorizontalScroll().scrollLeft += 15 :\n                        this.horizontalScroll.getHorizontalScroll().scrollLeft -= 15;\n                });\n            }\n    }\n\n    public onDragLeave(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        this.cms.icon.innerText = 'block';\n\n        if (this._dropIndicator) {\n            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n    }\n\n    public onDragDrop(event) {\n        event.preventDefault();\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n\n        if (this.isDropTarget) {\n            const args = {\n                source: this.cms.column,\n                target: this.column\n            };\n\n            let nextPinnedWidth;\n            if (this.column.pinned && !this.cms.column.pinned) {\n                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n            }\n\n            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||\n                this.column.level !== this.cms.column.level ||\n                this.column.parent !== this.cms.column.parent ||\n                this.cms.cancelDrop) {\n                    this.cms.cancelDrop = false;\n                    this.column.grid.onColumnMovingEnd.emit(args);\n                    return;\n            }\n\n            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);\n\n            if (this.cms.selection && this.cms.selection.column) {\n                const colID = this.column.grid.columnList.toArray().indexOf(this.cms.selection.column);\n\n                this.column.grid.selection.set(this.column.gridID + '-cell', new Set([{\n                    rowID: this.cms.selection.rowID,\n                    columnID: colID\n                }]));\n\n                const cell = this.column.grid.getCellByKey(this.cms.selection.rowID, this.cms.selection.column.field);\n\n                if (cell) {\n                    cell.nativeElement.focus();\n                }\n\n                this.cms.selection = null;\n            }\n\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        }\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdate'\n})\nexport class IgxDatePipeComponent extends DatePipe implements PipeTransform {\n    transform(value: any): string {\n        if (value && value instanceof Date) {\n            return super.transform(value);\n        } else {\n            return value;\n        }\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdecimal'\n})\nexport class IgxDecimalPipeComponent extends DecimalPipe implements PipeTransform {\n    transform(value: any): string {\n        if (value && typeof value === 'number') {\n            return super.transform(value);\n        } else {\n            return value;\n        }\n    }\n}\n\nexport interface ContainerPositionSettings extends PositionSettings {\n    container?: HTMLElement;\n}\n\nexport class ContainerPositioningStrategy extends ConnectedPositioningStrategy {\n    isTop = false;\n    isTopInitialPosition = null;\n    public settings: ContainerPositionSettings;\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        const container = this.settings.container; // grid.tbody\n        const target = <HTMLElement>this.settings.target; // current grid.row\n        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);\n\n        // Position of the overlay depends on the available space in the grid.\n        // If the bottom space is not enough then the the row overlay will show at the top of the row.\n        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),\n        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).\n        this.isTop = this.isTopInitialPosition !== null ?\n            this.isTopInitialPosition :\n            container.clientHeight <\n            target.offsetTop + target.getBoundingClientRect().height + contentElement.getBoundingClientRect().height;\n        this.settings.verticalStartPoint = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;\n        const startPoint = getPointFromPositionsSettings(this.settings, contentElement.parentElement);\n        contentElement.style.top = startPoint.y + (this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom) * size.height + 'px';\n        contentElement.style.width = target.clientWidth + 'px';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Input,\n    QueryList,\n    TemplateRef,\n    forwardRef,\n    AfterViewInit\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxDateSummaryOperand, IgxNumberSummaryOperand, IgxSummaryOperand, IgxSummaryResult } from './grid-summary';\nimport { IgxRowComponent } from './row.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective\n} from './grid.common';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { valToPxlsUsingRange } from '../core/utils';\nimport {\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand,\n    IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { SortingStrategy } from '../data-operations/sorting-strategy';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\n/**\n * **Ignite UI for Angular Column** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html#columns-configuration)\n *\n * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,\n * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside\n * the column using `ng-template` which will be used for all cells within the column.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-column',\n    template: ``\n})\nexport class IgxColumnComponent implements AfterContentInit {\n    /**\n     * Sets/gets the `field` value.\n     * ```typescript\n     * let columnField = this.column.field;\n     * ```\n     * ```html\n     * <igx-column [field] = \"'ID'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public field: string;\n    /**\n     * Sets/gets the `header` value.\n     * ```typescript\n     * let columnHeader = this.column.header;\n     * ```\n     * ```html\n     * <igx-column [header] = \"'ID'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public header = '';\n    /**\n     * Sets/gets whether the column is sortable.\n     * Default value is `false`.\n     * ```typescript\n     * let isSortable = this.column.sortable;\n     * ```\n     * ```html\n     * <igx-column [sortable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortable = false;\n    /**\n     * Sets/gets whether the column is groupable.\n     * Default value is `false`.\n     * ```typescript\n     * let isGroupable = this.column.groupable;\n     * ```\n     * ```html\n     * <igx-column [groupable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public groupable = false;\n    /**\n     * Sets/gets whether the column is editable.\n     * Default value is `false`.\n     * ```typescript\n     * let isEditable = this.column.editable;\n     * ```\n     * ```html\n     * <igx-column [editable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public editable = null;\n    /**\n     * Sets/gets whether the column is filterable.\n     * Default value is `true`.\n     * ```typescript\n     * let isFilterable = this.column.filterable;\n     * ```\n     * ```html\n     * <igx-column [filterable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public filterable = true;\n    /**\n     * Sets/gets whether the column is resizable.\n     * Default value is `false`.\n     * ```typescript\n     * let isResizable = this.column.resizable;\n     * ```\n     * ```html\n     * <igx-column [resizable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public resizable = false;\n    /**\n     * Enables/disables summary for the column.\n     * Default value is `false`.\n     * ```typescript\n     * let hasSummary = this.column.hasSummary;\n     * ```\n     * ```html\n     * <igx-column [hasSummary] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public hasSummary = false;\n    /**\n     * Gets whether the column is hidden.\n     * ```typescript\n     * let isHidden = this.column.hidden;\n     * ```\n     *@memberof IgxColumnComponent\n     */\n    @Input()\n    get hidden(): boolean {\n        return this._hidden;\n    }\n    /**\n     * Sets the column hidden property.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hidden(value: boolean) {\n        if (this._hidden !== value) {\n            this._hidden = value;\n            if (this.grid) {\n                this.grid.endEdit(true);\n            }\n            const cellInEditMode = this.gridAPI.get_cell_inEditMode(this.gridID);\n            if (cellInEditMode) {\n                if (cellInEditMode.cell.column.field === this.field) {\n                    this.gridAPI.escape_editMode(this.gridID, cellInEditMode.cellID);\n                }\n            }\n            this.check();\n            if (this.grid) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.grid.id);\n                if (!activeInfo) {\n                    return;\n                }\n                const oldIndex = activeInfo.columnIndex;\n\n                if (this.grid.lastSearchInfo.searchText) {\n                    if (this.index <= oldIndex) {\n                        const newIndex = this.hidden ? oldIndex - 1 : oldIndex + 1;\n                        IgxColumnComponent.updateHighlights(oldIndex, newIndex, this.grid);\n                    } else if (oldIndex === -1 && !this.hidden) {\n                        this.grid.refreshSearch();\n                    }\n                }\n                if (this.hasSummary) {\n                    this.grid.summariesHeight = 0;\n                }\n\n                this.grid.reflow();\n                this.grid.filteringService.refreshExpressions();\n            }\n        }\n    }\n    /**\n     * Gets whether the hiding is disabled.\n     * ```typescript\n     * let isHidingDisabled =  this.column.disableHiding;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get disableHiding(): boolean {\n        return this._disableHiding;\n    }\n    /**\n     * Enables/disables hiding for the column.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set disableHiding(value: boolean) {\n        if (this._disableHiding !== value) {\n            this._disableHiding = value;\n            this.check();\n        }\n    }\n    /**\n     * Sets/gets whether the column is movable.\n     * Default value is `false`.\n     * ```typescript\n     * let isMovable = this.column.movable;\n     * ```\n     * ```html\n     * <igx-column [movable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public movable = false;\n    /**\n     * Gets the `width` of the column.\n     * ```typescript\n     * let columnWidth = this.column.width;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get width(): string {\n        return this.widthSetByUser ? this._width : this.defaultWidth;\n    }\n    /**\n     * Sets the `width` of the column.\n     * ```html\n     * <igx-column [width] = \"'25%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set width(value: string) {\n        if (value) {\n            this.widthSetByUser = true;\n            this._width = value;\n        }\n    }\n    /**\n     * Sets/gets the maximum `width` of the column.\n     * ```typescript\n     * let columnMaxWidth = this.column.width;\n     * ```\n     * ```html\n     * <igx-column [maxWidth] = \"'75%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public maxWidth: string;\n    /**\n     * Sets/gets the minimum `width` of the column.\n     * Default value is `88`;\n     * ```typescript\n     * let columnMinWidth = this.column.minWidth;\n     * ```\n     * ```html\n     * <igx-column [minWidth] = \"'15%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public minWidth = this.defaultMinWidth;\n    /**\n     * Sets/gets the class selector of the column header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerClasses;\n     * ```\n     * ```html\n     * <igx-column [headerClasses] = \"'column-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public headerClasses = '';\n    /**\n     * Sets a conditional class selector of the column cells.\n     * Accepts an object literal, containing key-value pairs,\n     * where the key is the name of the CSS class, while the\n     * value is either a callback function that returns a boolean,\n     * or boolean, like so:\n     * ```typescript\n     * callback = (rowData, columnKey) => { return rowData[columnKey] > 6; }\n     * cellClasses = { 'className' : this.callback };\n     * ```\n     * ```html\n     * <igx-column [cellClasses] = \"cellClasses\"></igx-column>\n     * <igx-column [cellClasses] = \"{'class1' : true }\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public cellClasses: any;\n    /**\n     * Gets the column index.\n     * ```typescript\n     * let columnIndex = this.column.index;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get index(): number {\n        return this.grid.columns.indexOf(this);\n    }\n    /**\n     * Sets/gets formatter for the column.\n     * ```typescript\n     * let columnFormatter = this.column.formatter;\n     * ```\n     * ```typescript\n     * this.column.formatter = (val: Date) => {\n     * return new Intl.DateTimeFormat(\"en-US\").format(val);\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public formatter: (value: any) => any;\n    /**\n     * Sets/gets whether the column filtering should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let filteringIgnoreCase = this.column.filteringIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [filteringIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public filteringIgnoreCase = true;\n    /**\n     * Sets/gets whether the column sorting should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let sortingIgnoreCase = this.column.sortingIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [sortingIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortingIgnoreCase = true;\n    /**\n     * Sets/gets the data type of the column values.\n     * Default value is `string`.\n     * ```typescript\n     * let columnDataType = this.column.dataType;\n     * ```\n     * ```html\n     * <igx-column [dataType] = \"'number'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public dataType: DataType = DataType.String;\n    /**\n     * Gets whether the column is `pinned`.\n     * ```typescript\n     * let isPinned = this.column.pinned;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get pinned(): boolean {\n        return this._pinned;\n    }\n    /**\n     * Sets whether the column is pinned.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set pinned(value: boolean) {\n        if (this._pinned !== value) {\n            if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {\n                value ? this.pin() : this.unpin();\n                return;\n            }\n            /* No grid/width available at initialization. `initPinning` in the grid\n               will re-init the group (if present)\n            */\n            this._pinned = value;\n        }\n    }\n    /**\n     * Gets/Sets the `id` of the `igx-grid`.\n     * ```typescript\n     * let columnGridId = this.column.gridID;\n     * ```\n     * ```typescript\n     * this.column.gridID = 'grid-1';\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public gridID: string;\n    /**\n     * Gets the column `summaries`.\n     * ```typescript\n     * let columnSummaries = this.column.summaries;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column `summaries`.\n     * ```typescript\n     * this.column.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set summaries(classRef: any) {\n        this._summaries = new classRef();\n    }\n    /**\n     * Sets/gets whether the column is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.column.searchable';\n     * ```\n     * ```html\n     *  <igx-column [searchable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column `filters`.\n     * ```typescript\n     * let columnFilters = this.column.filters'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column `filters`.\n     * ```typescript\n     * this.column.filters = IgxBooleanFilteringOperand.\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set filters(classRef: any) {\n        this._filters = classRef;\n    }\n    /**\n     * Gets the column `sortStrategy`.\n     * ```typescript\n     * let sortStrategy = this.column.sortStrategy'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get sortStrategy(): any {\n        return this._sortStrategy;\n    }\n    /**\n     * Sets the column `sortStrategy`.\n     * ```typescript\n     * this.column.sortStrategy = new CustomSortingStrategy().\n     *\n     * class CustomSortingStrategy extends SortingStrategy {\n     * ...\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set sortStrategy(classRef: any) {\n        this._sortStrategy = classRef;\n    }\n\n\n    /**\n     * Gets the default minimum `width` of the column.\n     * ```typescript\n     * let defaultMinWidth =  this.column.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get defaultMinWidth(): string {\n        return this._defaultMinWidth;\n    }\n    /**\n     * Returns reference to the `igx-grid`.\n     * ```typescript\n     * let gridComponent = this.column.grid;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get grid(): IgxGridBaseComponent {\n        return this.gridAPI.get(this.gridID);\n    }\n    /**\n     * Returns a reference to the `bodyTemplate`.\n     * ```typescript\n     * let bodyTemplate = this.column.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * Sets the body template.\n     * ```html\n     * <ng-template #bodyTemplate igxCell let-val>\n     *    <div style = \"background-color: yellowgreen\" (click) = \"changeColor(val)\">\n     *       <span> {{val}} </span>\n     *    </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'bodyTemplate'\", {read: TemplateRef })\n     * public bodyTemplate: TemplateRef<any>;\n     * this.column.bodyTemplate = this.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set bodyTemplate(template: TemplateRef<any>) {\n        this._bodyTemplate = template;\n        this.grid.markForCheck();\n    }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.column.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * Sets the header template.\n     * ```html\n     * <ng-template #headerTemplate>\n     *   <div style = \"background-color:black\" (click) = \"changeColor(val)\">\n     *       <span style=\"color:red\" >{{column.field}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'headerTemplate'\", {read: TemplateRef })\n     * public headerTemplate: TemplateRef<any>;\n     * this.column.headerTemplate = this.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) {\n        this._headerTemplate = template;\n        this.grid.markForCheck();\n    }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.column.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * Sets the inline editor template.\n     * ```html\n     * <ng-template #inlineEditorTemplate igxCellEditor let-cell=\"cell\">\n     *     <input type=\"string\" [(ngModel)]=\"cell.value\"/>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'inlineEditorTemplate'\", {read: TemplateRef })\n     * public inlineEditorTemplate: TemplateRef<any>;\n     * this.column.inlineEditorTemplate = this.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) {\n        this._inlineEditorTemplate = template;\n        this.grid.markForCheck();\n    }\n    /**\n     * Gets the cells of the column.\n     * ```typescript\n     * let columnCells =  this.column.cells;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return this.grid.rowList.filter((row) => row instanceof IgxRowComponent)\n            .map((row) => {\n                if (row.cells) {\n                    return row.cells.filter((cell) => cell.columnIndex === this.index);\n                }\n            }).reduce((a, b) => a.concat(b), []);\n    }\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => !c.columnGroup);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => !c.columnGroup);\n        let col = this;\n        let vIndex = -1;\n\n        if (this.columnGroup) {\n            col = this.allChildren.filter(c => !c.columnGroup)[0] as any;\n        }\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(col);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(col);\n        }\n        return vIndex;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnGroup() {\n        return false;\n    }\n    /**\n     * Returns the children columns collection.\n     * Returns an empty array if the column does not contain children columns.\n     * ```typescript\n     * let childrenColumns =  this.column.allChildren;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return [];\n    }\n    /**\n     * Returns the level of the column in a column group.\n     * Returns `0` if the column doesn't have a `parent`.\n     * ```typescript\n     * let columnLevel =  this.column.level;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get level() {\n        let ptr = this.parent;\n        let lvl = 0;\n\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parent;\n        }\n        return lvl;\n    }\n\n    /**\n     * hidden\n     */\n    public defaultWidth: string;\n\n    /**\n     * hidden\n     */\n    public widthSetByUser: boolean;\n\n    /**\n     * Returns the filteringExpressionsTree of the column.\n     * ```typescript\n     * let tree =  this.column.filteringExpressionsTree;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filteringExpressionsTree(): FilteringExpressionsTree {\n        return this.grid.filteringExpressionsTree.find(this.field) as FilteringExpressionsTree;\n    }\n    /**\n     * Sets/gets the parent column.\n     * ```typescript\n     * let parentColumn = this.column.parent;\n     * ```\n     * ```typescript\n     * this.column.parent = higherLevelColumn;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    parent = null;\n    /**\n     * Sets/gets the children columns.\n     * ```typescript\n     * let columnChildren = this.column.children;\n     * ```\n     * ```typescript\n     * this.column.children = childrenColumns;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    children;\n    /**\n     *@hidden\n     */\n    protected _unpinnedIndex;\n    /**\n     *@hidden\n     */\n    protected _pinned = false;\n    /**\n     *@hidden\n     */\n    protected _bodyTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _headerTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _inlineEditorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _summaries = null;\n    /**\n     *@hidden\n     */\n    protected _filters = null;\n    /**\n     *@hidden\n     */\n    protected _sortStrategy = new SortingStrategy();\n    /**\n     *@hidden\n     */\n    protected _hidden = false;\n    /**\n     *@hidden\n     */\n    protected _index: number;\n    /**\n     *@hidden\n     */\n    protected _disableHiding = false;\n    /**\n     *@hidden\n     */\n    protected _width: string;\n    /**\n     *@hidden\n     */\n    protected _defaultMinWidth = '64';\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellTemplateDirective, { read: IgxCellTemplateDirective })\n    protected cellTemplate: IgxCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective })\n    protected headTemplate: IgxCellHeaderTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective })\n    protected editorTemplate: IgxCellEditorTemplateDirective;\n\n    public static updateHighlights(oldIndex: number, newIndex: number, grid: IgxGridBaseComponent) {\n        const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(grid.id);\n\n        if (activeInfo && activeInfo.columnIndex === oldIndex) {\n            IgxTextHighlightDirective.setActiveHighlight(grid.id, {\n                columnIndex: newIndex,\n                rowIndex: activeInfo.rowIndex,\n                index: activeInfo.index,\n                page: activeInfo.page,\n            });\n\n            grid.refreshSearch(true);\n        }\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent>, public cdr: ChangeDetectorRef) { }\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.cellTemplate) {\n            this._bodyTemplate = this.cellTemplate.template;\n        }\n        if (this.headTemplate) {\n            this._headerTemplate = this.headTemplate.template;\n        }\n        if (this.editorTemplate) {\n            this._inlineEditorTemplate = this.editorTemplate.template;\n        }\n        if (!this.summaries) {\n            switch (this.dataType) {\n                case DataType.String:\n                case DataType.Boolean:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n                case DataType.Number:\n                    this.summaries = IgxNumberSummaryOperand;\n                    break;\n                case DataType.Date:\n                    this.summaries = IgxDateSummaryOperand;\n                    break;\n                default:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n            }\n        }\n        if (!this.filters) {\n            switch (this.dataType) {\n                case DataType.Boolean:\n                    this.filters = IgxBooleanFilteringOperand;\n                    break;\n                case DataType.Number:\n                    this.filters = IgxNumberFilteringOperand;\n                    break;\n                case DataType.Date:\n                    this.filters = IgxDateFilteringOperand;\n                    break;\n                case DataType.String:\n                default:\n                    this.filters = IgxStringFilteringOperand;\n                    break;\n            }\n        }\n    }\n    /**\n     * Updates the highlights when a column index is changed.\n     * ```typescript\n     * this.column.updateHighlights(1, 3);\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public updateHighlights(oldIndex: number, newIndex: number) {\n        const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.grid.id);\n\n        if (activeInfo && activeInfo.columnIndex === oldIndex) {\n            IgxTextHighlightDirective.setActiveHighlight(this.grid.id, {\n                columnIndex: newIndex,\n                rowIndex: activeInfo.rowIndex,\n                index: activeInfo.index,\n                page: activeInfo.page,\n            });\n\n            this.grid.refreshSearch(true);\n        }\n    }\n    /**\n     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.\n     * ```typescript\n     * this.column.pin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public pin(index?) {\n        // TODO: Probably should the return type of the old functions\n        // should be moved as a event parameter.\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (this._pinned) {\n            return false;\n        }\n\n        if (this.parent && !this.parent.pinned) {\n            return this.topLevelParent.pin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {\n            return false;\n        }\n\n        const width = parseInt(this.width, 10);\n        const oldIndex = this.visibleIndex;\n\n        if (!this.parent && (grid.getUnpinnedWidth(true) - width < grid.unpinnedAreaMinWidth)) {\n            return false;\n        }\n\n        this._pinned = true;\n        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);\n        index = index !== undefined ? index : grid._pinnedColumns.length;\n        const targetColumn = grid._pinnedColumns[index];\n        const args = { column: this, insertAtIndex: index };\n        grid.onColumnPinning.emit(args);\n\n        if (grid._pinnedColumns.indexOf(this) === -1) {\n            grid._pinnedColumns.splice(args.insertAtIndex, 0, this);\n\n            if (grid._unpinnedColumns.indexOf(this) !== -1) {\n                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1);\n            }\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.pin());\n            grid.reinitPinStates();\n        }\n\n        grid.cdr.detectChanges();\n        this.grid.filteringService.refreshExpressions();\n        const newIndex = this.visibleIndex;\n        IgxColumnComponent.updateHighlights(oldIndex, newIndex, grid);\n        return true;\n    }\n    /**\n     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.\n     * ```typescript\n     * this.column.unpin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public unpin(index?) {\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (!this._pinned) {\n            return false;\n        }\n\n        if (this.parent && this.parent.pinned) {\n            return this.topLevelParent.unpin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {\n            return false;\n        }\n\n        const oldIndex = this.visibleIndex;\n        index = (index !== undefined ? index :\n            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);\n        this._pinned = false;\n\n        const targetColumn = grid._unpinnedColumns[index];\n        grid._unpinnedColumns.splice(index, 0, this);\n        if (grid._pinnedColumns.indexOf(this) !== -1) {\n            grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.unpin());\n        }\n\n        grid.reinitPinStates();\n\n        grid.cdr.detectChanges();\n        this.grid.filteringService.refreshExpressions();\n        const newIndex = this.visibleIndex;\n        IgxColumnComponent.updateHighlights(oldIndex, newIndex, grid);\n        return true;\n    }\n    /**\n     * Returns a reference to the top level parent column.\n     * ```typescript\n     * let topLevelParent =  this.column.topLevelParent;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get topLevelParent() {\n        let parent = this.parent;\n        while (parent && parent.parent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n    /**\n     *@hidden\n     */\n    protected check() {\n        if (this.grid) {\n            this.grid.markForCheck();\n        }\n    }\n\n    /**\n     * Returns a reference to the header of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let headerCell = column.headerCell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerCell(): IgxGridHeaderComponent {\n        if (this.grid.headerList.length > 0) {\n            return flatten(this.grid.headerList.toArray()).find((h) => h.column === this);\n        }\n    }\n\n    /**\n     * Autosize the column to the longest currently visible cell value, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * column.autosize();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public autosize() {\n        if (!this.columnGroup) {\n\n            this.width = this.getLargestCellWidth();\n\n            this.grid.markForCheck();\n            this.grid.reflow();\n        }\n    }\n\n    /**\n     * @hidden\n     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let size = column.getLargestCellWidth();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public getLargestCellWidth(): string {\n        const range = this.grid.document.createRange();\n        const largest = new Map<number, number>();\n\n        if (this.cells.length > 0) {\n            let cellsContentWidths = [];\n            if (this.cells[0].nativeElement.children.length > 0) {\n                this.cells.forEach((cell) => cellsContentWidths.push(cell.calculateSizeToFit(range)));\n            } else {\n                cellsContentWidths = this.cells.map((cell) => valToPxlsUsingRange(range, cell.nativeElement));\n            }\n\n            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));\n            const cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);\n            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +\n                parseFloat(cellStyle.borderRightWidth);\n\n            largest.set(Math.max(...cellsContentWidths), cellPadding);\n        }\n\n        if (this.headerCell) {\n            let headerCell;\n            const titleIndex = this.grid.hasMovableColumns ? 1 : 0;\n            if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[titleIndex].children.length > 0) {\n                headerCell =  Math.max(...Array.from(this.headerCell.elementRef.nativeElement.children[titleIndex].children)\n                    .map((child) => valToPxlsUsingRange(range, child)));\n            } else {\n                headerCell = valToPxlsUsingRange(range, this.headerCell.elementRef.nativeElement.children[titleIndex]);\n            }\n\n            if (this.sortable || (this.grid.allowFiltering && this.filterable)) {\n                headerCell += this.headerCell.elementRef.nativeElement.children[titleIndex + 1].getBoundingClientRect().width;\n            }\n\n            const headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);\n            const headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +\n                parseFloat(headerStyle.borderRightWidth);\n            largest.set(headerCell, headerPadding);\n\n        }\n\n        const largestCell = Math.max(...Array.from(largest.keys()));\n        const width = Math.ceil(largestCell + largest.get(largestCell));\n\n        if (Number.isNaN(width)) {\n            return this.width;\n        } else {\n            return width + 'px';\n        }\n    }\n\n}\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnGroupComponent) }],\n    selector: 'igx-column-group',\n    template: ``\n})\nexport class IgxColumnGroupComponent extends IgxColumnComponent implements AfterContentInit {\n\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })\n    children = new QueryList<IgxColumnComponent>();\n    /**\n     * Gets the column group `summaries`.\n     * ```typescript\n     * let columnGroupSummaries = this.columnGroup.summaries;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column group `summaries`.\n     * ```typescript\n     * this.columnGroup.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set summaries(classRef: any) { }\n    /**\n     * Sets/gets whether the column group is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.columnGroup.searchable;\n     * ```\n     * ```html\n     *  <igx-column-group [searchable] = \"false\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column group `filters`.\n     * ```typescript\n     * let columnGroupFilters = this.columnGroup.filters;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column group `filters`.\n     * ```typescript\n     * this.columnGroup.filters = IgxStringFilteringOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set filters(classRef: any) { }\n    /**\n     * Gets the default minimum `width` of the column group.\n     * ```typescript\n     * let defaultMinWidth = this.columnGroup.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get defaultMinWidth(): string {\n        return this._defaultMinWidth;\n    }\n    /**\n     * Returns a reference to the body template.\n     * ```typescript\n     * let bodyTemplate = this.columnGroup.bodyTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set bodyTemplate(template: TemplateRef<any>) { }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.columnGroup.headerTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * @hidden\n     * @memberof IgxColumnGroupComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) { }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) { }\n    /**\n     * Gets the column group cells.\n     * ```typescript\n     * let columnCells = this.columnGroup.cells;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return [];\n    }\n    /**\n     * Gets whether the column group is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this.allChildren.every(c => c.hidden);\n    }\n    /**\n     * Sets the column group hidden property.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n    }\n    /**\n     *@hidden\n     */\n    ngAfterContentInit() {\n        /*\n            @ContentChildren with descendants still returns the `parent`\n            component in the query list.\n        */\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parent = this;\n        });\n    }\n    /**\n     * Returns the children columns collection.\n     * ```typescript\n     * let columns =  this.columnGroup.allChildren;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return flatten(this.children.toArray());\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let isColumnGroup =  this.columnGroup.columnGroup\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get columnGroup() {\n        return true;\n    }\n    /**\n     * Gets the width of the column group.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        let isChildrenWidthInPercent = false;\n        const width = `${this.children.reduce((acc, val) => {\n            if (val.hidden) {\n                return acc;\n            }\n\n            if (val.width && val.width.indexOf('%') !== -1) {\n                isChildrenWidthInPercent = true;\n            }\n\n            return acc + parseInt(val.width, 10);\n        }, 0)}`;\n        return isChildrenWidthInPercent ? width + '%' : width;\n    }\n\n    set width(val) { }\n}\n\n\n\nfunction flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            result = result.concat(flatten(el.children.toArray()));\n        }\n    });\n    return result;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { isNavigationKey, valToPxlsUsingRange } from '../core/utils';\nimport { State } from '../services/index';\nimport { IgxGridBaseComponent, IGridEditEventArgs } from './grid-base.component';\nimport { first } from 'rxjs/operators';\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.Default,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-cell',\n    template: `<ng-template #defaultCell igxTextHighlight [cssClass]=\"highlightClass\" [activeCssClass]=\"activeHighlightClass\" [groupName]=\"gridID\"\n        [value]=\"formatter ? formatter(value) : value\" [row]=\"rowIndex\" [column]=\"this.column.visibleIndex\" [page]=\"this.grid.page\" [containerClass]=\"'igx-grid__td-text'\">\n    <ng-container *ngIf=\"column.dataType === 'boolean' || column.dataType === 'string' || formatter; else default\" >\n        <div class=\"igx-grid__td-text\">{{ formatter ? formatter(value) : value }}</div>\n    </ng-container>\n    <ng-template #default>\n        <div class=\"igx-grid__td-text\">{{ column.dataType === 'number' ? (value | igxdecimal) : (value | igxdate) }}</div>\n    </ng-template>\n</ng-template>\n<ng-template #inlineEditor  let-cell=\"cell\">\n    <ng-container *ngIf=\"column.dataType === 'string'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input igxInput [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'number'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input igxInput [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\" type=\"number\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'boolean'\">\n        <igx-checkbox [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [checked]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\" [disableRipple]=\"true\"></igx-checkbox>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'date'\">\n        <igx-datePicker [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\" [labelVisibility]=\"false\"></igx-datePicker>\n    </ng-container>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template; context: context\">\n</ng-container>\n`\n})\nexport class IgxGridCellComponent implements OnInit, AfterViewInit {\n\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public row: any;\n\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public cellTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightClass = 'igx-highlight';\n\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public activeHighlightClass = 'igx-highlight__active';\n\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get formatter(): (value: any) => any {\n        return this.column.formatter;\n    }\n\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any {\n        return {\n            $implicit: this.value,\n            cell: this\n        };\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.inEditMode) {\n            const inlineEditorTemplate = this.column.inlineEditorTemplate;\n            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;\n        }\n        if (this.cellTemplate) {\n            return this.cellTemplate;\n        }\n        return this.defaultCellTemplate;\n    }\n\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any {\n        return this.row.gridID;\n    }\n\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any {\n        return this.gridAPI.get(this.gridID);\n    }\n\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-rowIndex')\n    get rowIndex(): number {\n        return this.row.index;\n    }\n\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number {\n        return this.column.index;\n    }\n\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-visibleIndex')\n    get visibleColumnIndex(): number {\n        return this.column.visibleIndex;\n    }\n\n    /**\n     * Gets the `index` of the unpinned column in which the cell is stored.\n     * ```typescript\n     * let unpinnedColumnIndex = this.cell.ununpinnedColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get unpinnedColumnIndex(): number {\n        return this.grid.unpinnedColumns.filter(c => !c.columnGroup).indexOf(this.column);\n    }\n\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get cellID() {\n        const primaryKey = this.grid.primaryKey;\n        const rowID = primaryKey ? this.row.rowData[primaryKey] : this.row.rowData;\n        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };\n    }\n\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Gets whether the cell is in edit mode.\n     * ```typescript\n     * let isCellInEditMode = this.cell.inEditMode;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get inEditMode(): boolean {\n        const editableCell = this.gridAPI.get_cell_inEditMode(this.gridID);\n        if (editableCell) {\n            return this.cellID.rowID === editableCell.cellID.rowID &&\n                this.cellID.columnID === editableCell.cellID.columnID;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Enables/disables the edit mode of the cell\n     * ```typescript\n     * this.cell.inEditMode = true;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    set inEditMode(value: boolean) {\n        if (this.row.deleted) {\n            return;\n        }\n        if (this.column.editable && value) {\n            this.editValue = this.value;\n            this.gridAPI.set_cell_inEditMode(this.gridID, this);\n            if (this.highlight && this.grid.lastSearchInfo.searchText) {\n                this.highlight.observe();\n            }\n        } else {\n            this.gridAPI.escape_editMode(this.gridID, this.cellID);\n        }\n        this.cdr.detectChanges();\n        this.grid.cdr.markForCheck();\n    }\n\n    /**\n     * Sets/get the `tabindex` property of the cell.\n     * Default value is `0`.\n     * ```typescript\n     * this.cell.tabindex = 1;\n     * ```\n     * ```typescript\n     * let cellTabIndex = this.cell.tabindex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'gridcell';\n\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-readonly')\n    get readonly(): boolean {\n        return !this.column.editable;\n    }\n\n    /**\n * @hidden\n */\n    @HostBinding('style.min-height.px')\n    get minHeight() {\n        return this.grid ? this.grid.rowHeight : 32;\n    }\n\n    /**\n     * Returns a string containing the grid `id` and the column `field` concatenated by \"_\".\n     * ```typescript\n     * let describedBy = this.cell.describedBy;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedby(): string {\n        return `${this.row.gridID}_${this.column.field}`;\n    }\n\n    /**\n     * Gets the style classes of the cell.\n     * ```typescript\n     * let cellStyleClasses = this.cell.styleClasses.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveStyleClasses();\n    }\n\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        const hasVerticalScroll = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const colWidth = this.column.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (colWidth && !isPercentageWidth) {\n            let cellWidth = this.isLastUnpinned && hasVerticalScroll ?\n                parseInt(colWidth, 10) - 18 + '' : colWidth;\n\n            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {\n                cellWidth += 'px';\n            }\n\n            return cellWidth;\n        } else {\n            return colWidth;\n        }\n    }\n\n    /**\n     * Gets whether the cell is stored in a pinned column.\n     * ```typescript\n     * let isPinned = this.cell.isPinned;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get isPinned() {\n        return this.column.pinned;\n    }\n\n    /**\n     * Gets whether the cell is stored in the last column in the pinned area.\n     * ```typescript\n     * let isLastPinned = this.cell.isLastPinned;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get isLastPinned() {\n        const pinnedCols = this.grid.pinnedColumns;\n        return pinnedCols[pinnedCols.length - 1] === this.column;\n    }\n\n    /**\n     * Gets whether the cell is stored in the last column in the unpinned area.\n     * ```typescript\n     * let isLastUnpinned = this.cell.isLastUnpinned;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get isLastUnpinned() {\n        const unpinnedColumns = this.grid.unpinnedColumns;\n        return unpinnedColumns[unpinnedColumns.length - 1] === this.column;\n    }\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get selected() {\n        return this.isSelected = this.isCellSelected();\n    }\n\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-selected')\n    set selected(val: boolean) {\n        this.isSelected = val;\n    }\n\n    get dirty() {\n        if (this.grid.rowEditable) {\n            const rowCurrentState = this.grid.transactions.getAggregatedValue(this.row.rowID, false);\n            if (rowCurrentState) {\n                return rowCurrentState && rowCurrentState[this.column.field];\n            }\n        } else {\n            const rowTransaction: State = this.grid.transactions.getState(this.row.rowID);\n            return rowTransaction && rowTransaction.value && rowTransaction.value[this.column.field];\n        }\n\n        return false;\n    }\n    @ViewChild('defaultCell', { read: TemplateRef })\n    protected defaultCellTemplate: TemplateRef<any>;\n\n    @ViewChild('inlineEditor', { read: TemplateRef })\n    protected inlineEditorTemplate: TemplateRef<any>;\n\n    @ViewChild(IgxTextHighlightDirective, { read: IgxTextHighlightDirective })\n    private highlight: IgxTextHighlightDirective;\n\n    /**\n     * @hidden\n     */\n    public editValue;\n    public focused = false;\n    protected isSelected = false;\n    private cellSelectionID: string;\n    private prevCellSelectionID: string;\n    private previousCellEditMode = false;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        public selection: IgxSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private element: ElementRef) { }\n\n    public _updateCellSelectionStatus(fireFocus = true, event) {\n        if (this.selected) {\n            return;\n        }\n        this._clearCellSelection();\n        this._saveCellSelection();\n        const hasFilteredResults = this.grid.filteredData ? this.grid.filteredData.length > 0 : true;\n        if (hasFilteredResults) {\n            if (this.column.editable && this.previousCellEditMode && hasFilteredResults) {\n                this.inEditMode = true;\n            }\n            if (!this.inEditMode && this.gridAPI.get_edit_row_state(this.gridID)) {\n                // If there is a row being edited & this cell did not enter edit mode (!editable, row.deleted)\n                this.grid.endEdit(true);\n            }\n            this.selected = true;\n            if (fireFocus) {\n                this.nativeElement.focus();\n            }\n            this.grid.onSelection.emit({ cell: this, event });\n        }\n    }\n\n    private _clearCellSelection() {\n        const cell = this._getLastSelectedCell();\n        if (cell) {\n            cell.selected = false;\n            cell.focused = false;\n        }\n        const editCell = this.gridAPI.get_cell_inEditMode(this.gridID);\n        if (editCell) {\n            if (editCell.cell.column.field === this.grid.primaryKey) {\n                if (editCell.cellID.rowIndex === this.cellID.rowIndex && editCell.cellID.columnID === this.cellID.columnID) {\n                    this.previousCellEditMode = false;\n                } else {\n                    this.previousCellEditMode = true;\n                    this.gridAPI.submit_value(this.gridID);\n                }\n            } else {\n                this.previousCellEditMode = true;\n                this.gridAPI.submit_value(this.gridID);\n            }\n        } else {\n            this.previousCellEditMode = false;\n        }\n        this._saveCellSelection(this.selection.get_empty());\n    }\n\n    private _saveCellSelection(newSelection?: Set<any>) {\n        const sel = this.selection.get(this.cellSelectionID);\n        if (sel && sel.size > 0) {\n            this.selection.set(this.prevCellSelectionID, sel);\n        }\n        if (!newSelection) {\n            newSelection = this.selection.add_item(this.cellSelectionID, this.cellID);\n        }\n        this.selection.set(this.cellSelectionID, newSelection);\n    }\n\n    private _getLastSelectedCell() {\n        const cellID = this.selection.first_item(this.cellSelectionID);\n        if (cellID) {\n            return this.gridAPI.get_cell_by_index(this.gridID, cellID.rowIndex, cellID.columnID);\n        }\n    }\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public isCellSelected() {\n        const selectedCellID = this.selection.first_item(this.cellSelectionID);\n        if (selectedCellID) {\n            return this.cellID.rowID === selectedCellID.rowID &&\n                this.cellID.columnID === selectedCellID.columnID;\n        }\n        return false;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        this.cellSelectionID = `${this.gridID}-cell`;\n        this.prevCellSelectionID = `${this.gridID}-prev-cell`;\n    }\n\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public update(val: any) {\n        const rowSelector = this.cellID.rowID;\n        const editableCell = this.gridAPI.get_cell_inEditMode(this.gridID);\n        const gridEditState = this.gridAPI.create_grid_edit_args(this.gridID, rowSelector, this.cellID.columnID, val);\n        this.gridAPI.update_cell(this.gridID, rowSelector, this.cellID.columnID, val, gridEditState);\n        if (editableCell && editableCell.cellID.rowID === this.cellID.rowID\n            && editableCell.cellID.columnID === this.cellID.columnID) {\n            if (gridEditState.args.cancel) {\n                return;\n            }\n            this.gridAPI.escape_editMode(this.gridID, editableCell.cellID);\n        }\n        this.cdr.markForCheck();\n        this.grid.refreshSearch();\n    }\n\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        if (this.highlight && this.grid.lastSearchInfo.searchText) {\n            this.highlight.highlight(this.grid.lastSearchInfo.searchText,\n                this.grid.lastSearchInfo.caseSensitive,\n                this.grid.lastSearchInfo.exactMatch);\n            this.highlight.activateIfNecessary();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('dblclick', ['$event'])\n    public onDoubleClick(event) {\n        if (this.column.editable) {\n            this.inEditMode = true;\n        }\n\n        this.grid.onDoubleClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        this.grid.onCellClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('contextmenu', ['$event'])\n    public onContextMenu(event) {\n        this.grid.onContextMenu.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.focused = true;\n        this.row.focused = true;\n        if (!this.selected) {\n            this._updateCellSelectionStatus(false, event);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.focused = false;\n        this.row.focused = false;\n    }\n\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (!this.isKeySupportedInCell(key)) {\n            return;\n        }\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n\n        if (key === 'tab') {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        if (this.gridAPI.get_cell_inEditMode(this.gridID)) {\n            event.stopPropagation();\n        }\n\n        if (this.inEditMode && isNavigationKey(key)) {\n            return;\n        }\n\n        if (isNavigationKey(key)) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        if (event.altKey) {\n            if (this.row.nativeElement.tagName.toLowerCase() === 'igx-tree-grid-row' && this.isToggleKey(key)) {\n                const collapse = (this.row as any).expanded && (key === 'left' || key === 'arrowleft');\n                const expand = !(this.row as any).expanded && (key === 'right' || key === 'arrowright');\n                if (collapse) {\n                    (this.gridAPI as any).trigger_row_expansion_toggle(\n                        this.gridID, this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n                } else if (expand) {\n                    (this.gridAPI as any).trigger_row_expansion_toggle(\n                        this.gridID, this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n                }\n            return;\n            }\n        }\n\n        const args = {cell: this, groupRow: null, event: event, cancel: false };\n        this.grid.onFocusChange.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        switch (key) {\n            case 'tab':\n                if (shift) {\n                    this.grid.navigation.performShiftTabKey(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.performTab(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n                break;\n            case 'home':\n            case 'arrowleft':\n            case 'left':\n                if (ctrl && key === 'home') {\n                    this.grid.navigation.goToFirstCell();\n                    return;\n                }\n                if (ctrl || key === 'home') {\n                    this.grid.navigation.onKeydownHome(this.rowIndex);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.rowIndex, this.visibleColumnIndex);\n                break;\n            case 'end':\n            case 'arrowright':\n            case 'right':\n                if (ctrl && key === 'end') {\n                    this.grid.navigation.goToLastCell();\n                    return;\n                }\n                if (ctrl || key === 'end') {\n                    this.grid.navigation.onKeydownEnd(this.rowIndex);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.rowIndex, this.visibleColumnIndex);\n                break;\n            case 'arrowup':\n            case 'up':\n                if (ctrl) {\n                    this.grid.navigation.navigateTop(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateUp(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n                break;\n            case 'arrowdown':\n            case 'down':\n                if (ctrl) {\n                    this.grid.navigation.navigateBottom(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateDown(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n                break;\n            case 'enter':\n            case 'f2':\n                this.onKeydownEnterEditMode(event);\n                break;\n            case 'escape':\n            case 'esc':\n                this.onKeydownExitEditMode(event);\n                break;\n            case ' ':\n            case 'spacebar':\n            case 'space':\n                if (this.row.rowSelectable) {\n                    this.row.checkboxElement.toggle();\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    public onKeydownEnterEditMode(event) {\n        if (this.column.editable) {\n            if (this.inEditMode) {\n                this.grid.endEdit(true);\n                this.nativeElement.focus();\n            } else {\n                this.inEditMode = true;\n            }\n        }\n    }\n\n    public onKeydownExitEditMode(event) {\n        if (this.column.editable) {\n            const editableCell = this;\n            const args: IGridEditEventArgs = {\n                cellID: editableCell.cellID,\n                rowID: editableCell.cellID.rowID,\n                oldValue: editableCell.value,\n                newValue: editableCell.editValue,\n                cancel: false\n            };\n            this.grid.onCellEditCancel.emit(args);\n            if (args.cancel) {\n                return;\n            }\n            this.grid.endEdit(false);\n            this.inEditMode = false;\n            this.nativeElement.focus();\n        }\n    }\n\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;\n    }\n\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public clearHighlight() {\n        if (this.highlight && this.column.searchable) {\n            this.highlight.clearHighlight();\n        }\n    }\n    private isKeySupportedInCell(key) {\n        return isNavigationKey(key) || key === 'tab' || key === 'enter' || key === 'f2' || key === 'escape' || key === 'esc';\n\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveStyleClasses(): string {\n        const defaultClasses = ['igx-grid__td igx-grid__td--fw'];\n\n        if (this.column.cellClasses) {\n            Object.entries(this.column.cellClasses).forEach(([name, cb]) => {\n                const value = typeof cb === 'function' ? (cb as any)(this.row.rowData, this.column.field) : cb;\n                if (value) {\n                    defaultClasses.push(name);\n                }\n            }, this);\n        }\n\n        const classList = {\n            'igx_grid__cell--edit': this.inEditMode,\n            'igx-grid__td--number': this.gridAPI.should_apply_number_style(this.column),\n            'igx-grid__td--editing': this.inEditMode,\n            'igx-grid__th--pinned': this.column.pinned,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__td--selected': this.selected,\n            'igx-grid__td--edited': this.dirty\n        };\n\n        Object.entries(classList).forEach(([klass, value]) => {\n            if (value) {\n                defaultClasses.push(klass);\n            }\n        });\n        return defaultClasses.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        return Math.max(...Array.from(this.nativeElement.children)\n                   .map((child) => valToPxlsUsingRange(range, child)));\n    }\n\n    private isToggleKey(key) {\n        return ['left', 'right', 'arrowleft', 'arrowright'].indexOf(key.toLowerCase()) !== -1;\n    }\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nexport interface IValueChangedEventArgs {\n    oldValue: any;\n    newValue: any;\n}\n\n/**\n *@hidden\n */\nexport abstract class ItemPropertyValueChanged {\n    private _object: any;\n    private _propName: string;\n\n    get object() {\n        return this._object;\n    }\n\n    set object(value) {\n        if (value) {\n            this._object = value;\n        }\n    }\n\n    @Input()\n    get value() {\n        return (this.object) ? this.object[this._propName] : null;\n    }\n\n    set value(value) {\n        this.onValueChanged(value);\n    }\n\n    @Output()\n    public valueChanged = new EventEmitter<IValueChangedEventArgs>();\n\n    constructor(propName: string) {\n        this._propName = propName;\n    }\n\n    protected onValueChanged(value) {\n        const currentValue = this.value;\n        if (value !== currentValue) {\n            this.object[this._propName] = value;\n            this.valueChanged.emit({ oldValue: currentValue, newValue: value });\n        }\n    }\n}\n\n/** @hidden */\nexport class ColumnChooserItemBase extends ItemPropertyValueChanged {\n    @Input()\n    get column() {\n        return this.object;\n    }\n\n    set column(value) {\n        if (value) {\n            this.object = value;\n        }\n    }\n\n    @Input()\n    public indentation = 30;\n\n    @Input()\n    public container: any;\n\n    constructor(public prop: string) {\n        super(prop);\n    }\n\n    get name() {\n        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';\n    }\n\n    get level() {\n        return this.column.level;\n    }\n\n    get calcIndent() {\n        return this.indentation * this.level;\n    }\n}\n","\nimport { Directive } from '@angular/core';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport interface IColumnVisibilityChangedEventArgs {\n    column: any;\n    newValue: boolean;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxColumnHidingItem]'\n})\nexport class IgxColumnHidingItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('hidden');\n    }\n\n    get disabled() {\n        return this.column.disableHiding;\n    }\n}\n","import { ChangeDetectorRef, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { DataUtil } from '../data-operations/data-util';\nimport { IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport enum ColumnDisplayOrder {\n    Alphabetical = 'Alphabetical',\n    DisplayOrder = 'DisplayOrder'\n}\n\n/** @hidden */\nexport abstract class ColumnChooserBase implements OnDestroy {\n    /**\n     * Gets the grid columns that are going to be manipulated.\n     * ```typescript\n     * let gridColumns = this.columnHidingUI.columns;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n\n    @Input()\n    get columns() {\n        return this._gridColumns;\n    }\n    /**\n     * Sets the the grid columns that are going to be manipulated.\n     * ```html\n     * <igx-column-hiding [columns]=\"grid.columns\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columns(value) {\n        if (value) {\n            this._gridColumns = value;\n            this.createColumnItems();\n            if (this.filterCriteria) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Sets/gets the title of the column chooser.\n     * ```typescript\n     * let title =  this.columnHidingUI.title;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get title() {\n        return this._title;\n    }\n    /**\n     * ```html\n     * <igx-column-hiding [title]=\"'IgxColumnHidingComponent Title'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set title(value) {\n        this._title = (value) ? value : '';\n    }\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * ```typescript\n     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is going to be displayed in the filter input.\n     * ```html\n     * <igx-column-hiding [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterColumnsPrompt(value) {\n        this._filterColumnsPrompt = (value) ? value : '';\n    }\n    /**\n     * Gets the items of the selected columns.\n     * ```typescript\n     * let columnItems =  this.columnHidingUI.columnItems;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnItems() {\n        return this._currentColumns;\n    }\n    /**\n     * Gets the value which filters the columns list.\n     * ```typescript\n     * let filterCriteria =  this.columnHidingUI.filterCriteria;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterCriteria() {\n        return this._filterCriteria;\n    }\n\n    /**\n     * Sets the value which filters the columns list.\n     * ```html\n     *  <igx-column-hiding [filterCriteria]=\"'ID'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterCriteria(value) {\n        if (!value || value.length === 0) {\n            this.clearFiltering();\n            this._filterCriteria = '';\n            this.cdr.detectChanges();\n            return;\n        } else if (this._filterCriteria && this._filterCriteria.length > value.length) {\n            this.clearFiltering();\n        }\n\n        this._filterCriteria = value;\n        this.filter();\n        this.cdr.detectChanges();\n    }\n    /**\n     * Gets the display order of the columns.\n     * ```typescript\n     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * ```typescript\n     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value !== undefined) {\n            this.orderColumns(value);\n            if (this._filterCriteria.length > 0) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Access to the columnHidingUI:\n     * ```typescript\n     * @ViewChild('column-hiding-component')\n     *  public columnHidingUI: IgxColumnHidingComponent;\n     * ```\n     * Sets/gets the max height of the column area.\n     * ```typescript\n     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [columnsAreaMaxHeight]=\"200px\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-hiding';\n    /**\n     *@hidden\n     */\n    private _currentColumns = [];\n    /**\n     *@hidden\n     */\n    private _gridColumns = [];\n    /**\n     *@hidden\n     */\n    private _rawColumns = [];\n    /**\n     *@hidden\n     */\n    private _columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     *@hidden\n     */\n    private _filterCriteria = '';\n    /**\n     *@hidden\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     *@hidden\n     */\n    private _title = '';\n\n    constructor(public cdr: ChangeDetectorRef) {\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        for (const item of this._currentColumns) {\n            item.valueChanged.unsubscribe();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private createColumnItems() {\n        if (this._gridColumns.length > 0) {\n            this._rawColumns = [];\n            this._gridColumns.forEach((column) => {\n                const item = this.createColumnItem(this, column);\n                if (item) {\n                    this._rawColumns.push(item);\n                }\n            });\n            this._currentColumns = this._rawColumns.slice(0);\n            this.orderColumns(this._columnDisplayOrder);\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected abstract createColumnItem(container: any, column: any);\n    /**\n     *@hidden\n     */\n    private orderColumns(value) {\n        this._columnDisplayOrder = value;\n        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||\n            value === ColumnDisplayOrder.Alphabetical) {\n            this._currentColumns = this._rawColumns.slice(0).sort((current, next) => {\n                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());\n            });\n        } else {\n            this._currentColumns = this._rawColumns;\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected filter() {\n        const filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));\n\n        const strategy = new CustomFilteringStrategy();\n        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);\n    }\n    /**\n     *@hidden\n     */\n    protected createFilteringExpression(fieldName: string): IFilteringExpression {\n        return {\n            condition: IgxStringFilteringOperand.instance().condition('contains'),\n            fieldName: fieldName,\n            ignoreCase: true,\n            searchVal: this._filterCriteria\n        };\n    }\n    /**\n     *@hidden\n     */\n    protected clearFiltering() {\n        this.createColumnItems();\n    }\n}\n\nclass CustomFilteringStrategy extends FilteringStrategy {\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[] {\n        const res: ColumnChooserItemBase[] = [];\n        data.forEach((item: ColumnChooserItemBase) => {\n            if (this.matchRecord(item, expressionsTree.filteringOperands[0] as IFilteringExpression)) {\n                res.push(item);\n            } else if (item.column.columnGroup) {\n                if (item.column.allChildren.findIndex((child) =>\n                    this.matchRecord(child, expressionsTree.filteringOperands[1] as IFilteringExpression) ||\n                    this.matchRecord(child, expressionsTree.filteringOperands[2] as IFilteringExpression)) > -1) {\n                    res.push(item);\n                }\n            }\n        });\n\n        return res;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    NgModule,\n    Output,\n    OnDestroy\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-hiding',\n    template: `<div class=\"igx-column-hiding__header\">\n    <h4 class=\"igx-column-hiding__header-title\" *ngIf=\"title\">{{ title }}</h4>\n\n    <igx-input-group class=\"igx-column-hiding__header-input\">\n        <input igxInput\n            type=\"text\"\n            [(ngModel)]=\"filterCriteria\"\n            [placeholder]=\"filterColumnsPrompt\"\n            autocomplete=\"off\" />\n    </igx-input-group>\n</div>\n\n<div class=\"igx-column-hiding__columns\"\n    [style.max-height]=\"columnsAreaMaxHeight\">\n    <igx-checkbox igxColumnHidingItem\n        *ngFor=\"let columnItem of columnItems\"\n        class=\"igx-column-hiding__columns-item\"\n        (onColumnVisibilityChanged)=\"onVisibilityChanged($event)\"\n        (change)=\"columnItem.value = !columnItem.value\"\n        [checked]=\"columnItem.value\"\n        [disabled]=\"columnItem.disabled\"\n        [style.margin-left.px]=\"columnItem.calcIndent\">\n        {{ columnItem.name }}\n    </igx-checkbox>\n</div>\n\n<div class=\"igx-column-hiding__buttons\">\n    <button igxButton igxRipple (click)=\"showAllColumns()\" [disabled]=\"disableShowAll\">{{ showAllText }}</button>\n    <button igxButton igxRipple (click)=\"hideAllColumns()\" [disabled]=\"disableHideAll\">{{ hideAllText }}</button>\n</div>\n`\n})\nexport class IgxColumnHidingComponent extends ColumnChooserBase implements OnDestroy {\n    /**\n     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.\n     * ```html\n     * <igx-column-hiding #columnHidingUI\n     *     [columns]=\"grid.columns\" [title]=\"'Column Hiding'\">\n     * </igx-column-hiding>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'columnHidingUI'\")\n     * public columnHiding: IgxColumnHidingComponent;\n     * let isHideAlldisabled =  this.columnHiding.disableHideAll;\n     * ```\n     *@memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableHideAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount === this.columns.length) {\n            return true;\n        } else if (this.hidableColumns.length < 1 ||\n            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.\n     * ```typescript\n     * let isShowAlldisabled =  this.columnHiding.disableShowAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableShowAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {\n            return true;\n        } else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Sets/gets the text of the button that shows all columns if they are hidden.\n     * ```typescript\n     * let showAllButtonText =  this.columnHiding.showAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [showAllText] = \"'Show Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public showAllText = 'Show All';\n    /**\n     * Sets/gets the text of the button that hides all columns if they are shown.\n     * ```typescript\n     * let hideAllButtonText =  this.columnHiding.hideAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [hideAllText] = \"'Hide Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public hideAllText = 'Hide All';\n    /**\n     * An event that is emitted after the columns visibility is changed.\n     * Provides references to the `column` and the `newValue` properties as event arguments.\n     * ```html\n     *  <igx-column-hiding (onColumnVisibilityChanged) = \"onColumnVisibilityChanged($event)\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n    /**\n     * Gets the count of the hidden columns.\n     * ```typescript\n     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public get hiddenColumnsCount() {\n        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    private get hidableColumns() {\n        return this.columnItems.filter((col) => !col.disabled);\n    }\n\n    private destroy$ = new Subject<boolean>();\n    /**\n     *@hidden\n     */\n    protected createColumnItem(container: any, column: any) {\n        const item = new IgxColumnHidingItemDirective();\n        item.container = container;\n        item.column = column;\n        if (!item.column.columnGroup) {\n            item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                this.onVisibilityChanged({ column: item.column, newValue: args.newValue });\n            });\n        }\n        return item;\n    }\n    /**\n     * Shows all columns in the grid.\n     * ```typescript\n     * this.columnHiding.showAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public showAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = false;\n        }\n    }\n    /**\n     * Hides all columns in the grid.\n     * ```typescript\n     * this.columnHiding.hideAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public hideAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = true;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onVisibilityChanged(args: IColumnVisibilityChangedEventArgs) {\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n/**\n *The `IgxColumnHidingModule` provides the {@link IgxColumnHidingComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxColumnHidingComponent, IgxColumnHidingItemDirective],\n    exports: [IgxColumnHidingComponent],\n    imports: [\n        IgxButtonModule,\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule,\n    ]\n})\nexport class IgxColumnHidingModule {\n}\n","\nimport { CommonModule } from '@angular/common';\nimport { Directive, Component, EventEmitter, Output, NgModule, ChangeDetectorRef } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\n\n@Directive({\n    selector: '[igxColumnPinningItem]'\n})\nexport class IgxColumnPinningItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('pinned');\n    }\n\n    /**\n     * Returns whether a column could be pinned.\n     * It's not possible to pin a column if there is not enough space for the unpinned area.\n     * ```typescript\n     * const columnItem: IgxColumnPinningItemDirective;\n     * this.columnItem.pinnable;\n     * ```\n     */\n    get pinnable() {\n        if (this.column.grid.getUnpinnedWidth(true) - this.column.width < this.column.grid.unpinnedAreaMinWidth) {\n            return false;\n        }\n        return true;\n    }\n}\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-pinning',\n    template: `\n<div class=\"igx-column-hiding__header\">\n    <h4 class=\"igx-column-hiding__header-title\" *ngIf=\"title\">{{ title }}</h4>\n\n    <igx-input-group class=\"igx-column-hiding__header-input\">\n        <input igxInput\n            type=\"text\"\n            [(ngModel)]=\"filterCriteria\"\n            [placeholder]=\"filterColumnsPrompt\"\n            autocomplete=\"off\" />\n    </igx-input-group>\n</div>\n\n<div class=\"igx-column-hiding__columns\"\n    [style.max-height]=\"columnsAreaMaxHeight\">\n    <igx-checkbox igxColumnPinningItem\n        *ngFor=\"let columnItem of columnItems\"\n        class=\"igx-column-hiding__columns-item\"\n        (change)=\"checkboxValueChange($event, columnItem)\"\n        [checked]=\"columnItem.value\">\n        {{ columnItem.name }}\n    </igx-checkbox>\n</div>\n`\n})\nexport class IgxColumnPinningComponent extends ColumnChooserBase {\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    createColumnItem(container: any, column: any) {\n        if (column.level !== 0) {\n            return null;\n        }\n        const item = new IgxColumnPinningItemDirective();\n        item.container = container;\n        item.column = column;\n        return item;\n    }\n\n    /**\n     * @hidden\n     */\n    public checkboxValueChange(event, columnItem: IgxColumnPinningItemDirective) {\n        if (event.checked && !columnItem.pinnable) {\n            event.checkbox.checked = false;\n            return false;\n        }\n        columnItem.value = !columnItem.value;\n    }\n}\n\n/**\n * The IgxColumnPinningModule provides the {@link IgxColumnPinningComponent}, {@link IgxColumnPinningItemDirective} inside your application.\n */\n@NgModule({\n    declarations: [IgxColumnPinningComponent, IgxColumnPinningItemDirective],\n    exports: [IgxColumnPinningComponent],\n    imports: [\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule\n    ]\n})\nexport class IgxColumnPinningModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    Input,\n    Optional,\n    ViewChild\n} from '@angular/core';\n\nimport { DisplayDensity } from '../core/displayDensity';\nimport {\n    CsvFileTypes,\n    IgxBaseExporter,\n    IgxCsvExporterOptions,\n    IgxCsvExporterService,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    AbsoluteScrollStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { IgxColumnHidingComponent } from './column-hiding.component';\nimport { IgxColumnPinningComponent } from './column-pinning.component';\nimport { OverlaySettings, PositionSettings, HorizontalAlignment, VerticalAlignment } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position';\n\n/** @hidden */\n@Component({\n    selector: 'igx-grid-toolbar',\n    template: `<span class=\"igx-grid-toolbar__title\">\n    {{ getTitle() }}\n</span>\n\n<div class=\"igx-grid-toolbar__actions\">\n    <div *ngIf=\"grid.columnHiding\">\n        <button igxButton=\"flat\" #columnHidingButton name=\"btnColumnHiding\" igxButton igxRipple\n            (click)=\"toggleColumnHidingUI()\">\n            <div  class=\"igx-grid-toolbar__button-space\">\n                <igx-icon *ngIf=\"grid.hiddenColumnsCount > 0\">visibility_off</igx-icon>\n                <igx-icon *ngIf=\"grid.hiddenColumnsCount === 0\">visibility</igx-icon>\n                <span>{{ grid.hiddenColumnsCount }}</span>\n                <span>{{ grid.hiddenColumnsText }}</span>\n            </div>\n        </button>\n        <igx-drop-down #columnHidingDropdown>\n            <igx-column-hiding\n                [columns]=\"grid.columnList\"\n                [title]=\"grid.columnHidingTitle\"\n                [filterColumnsPrompt]=\"filterColumnsPrompt\"\n                [columnsAreaMaxHeight]=\"defaultDropDownsMaxHeight\"\n                (onColumnVisibilityChanged)=\"grid.toggleColumnVisibility($event)\">\n            </igx-column-hiding>\n        </igx-drop-down>\n    </div>\n    <div *ngIf=\"grid.columnPinning\">\n        <button igxButton=\"flat\" #columnPinningButton name=\"btnColumnPinning\" igxButton igxRipple\n            (click)=\"toggleColumnPinningUI()\">\n            <div  class=\"igx-grid-toolbar__button-space\">\n                <igx-icon *ngIf=\"pinnedColumnsCount > 0\">lock</igx-icon>\n                <igx-icon *ngIf=\"pinnedColumnsCount === 0\">lock_open</igx-icon>\n                <span>{{ pinnedColumnsCount }}</span>\n                <span>{{ grid.pinnedColumnsText }}</span>\n                <span></span>\n            </div>\n        </button>\n        <igx-drop-down #columnPinningDropdown>\n            <igx-column-pinning\n                [columns]=\"grid.columnList\"\n                [title]=\"grid.columnPinningTitle\"\n                [filterColumnsPrompt]=\"filterColumnsPrompt\"\n                [columnsAreaMaxHeight]=\"defaultDropDownsMaxHeight\"></igx-column-pinning>\n        </igx-drop-down>\n    </div>\n\n\n    <div class=\"igx-grid-toolbar__dropdown\" *ngIf=\"shouldShowExportButton\" id=\"btnExport\">\n        <button igxButton=\"flat\" igxRipple #btnExport\n                (click)=\"exportClicked()\">\n            <span class=\"igx-grid-toolbar__button-space\">\n                <igx-icon fontSet=\"material\">import_export</igx-icon>\n                <span>{{ getExportText() }}</span>\n                <igx-icon fontSet=\"material\">arrow_drop_down</igx-icon>\n            </span>\n        </button>\n\n        <igx-drop-down #exportDropdown>\n            <ul class=\"igx-grid-toolbar__dd-list\">\n                <li class=\"igx-grid-toolbar__dd-list-items\" igxRipple *ngIf=\"shouldShowExportExcelButton\" id=\"btnExportExcel\"\n                (click)=\"exportToExcelClicked()\">{{ getExportExcelText() }}</li>\n                <li class=\"igx-grid-toolbar__dd-list-items\" igxRipple *ngIf=\"shouldShowExportCsvButton\" id=\"btnExportCsv\"\n                (click)=\"exportToCsvClicked()\">{{ getExportCsvText() }}</li>\n            </ul>\n        </igx-drop-down>\n    </div>\n</div>\n`\n})\nexport class IgxGridToolbarComponent {\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid-toolbar')\n    @Input()\n    public gridID: string;\n\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value;\n    }\n\n    private _filterColumnsPrompt = 'Filter columns list ...';\n\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    @Input()\n    get defaultDropDownsMaxHeight() {\n        const gridHeight = this.grid.calcHeight;\n        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';\n    }\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    @ViewChild('columnHidingDropdown', { read: IgxDropDownComponent })\n    public columnHidingDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnHidingComponent`.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    @ViewChild(IgxColumnHidingComponent)\n    public columnHidingUI: IgxColumnHidingComponent;\n\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    @ViewChild('columnHidingButton')\n    public columnHidingButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    @ViewChild('exportDropdown', { read: IgxDropDownComponent })\n    public exportDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    @ViewChild('btnExport')\n    public exportButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild('columnPinningDropdown', { read: IgxDropDownComponent })\n    public columnPinningDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnPinningComponent`.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild(IgxColumnPinningComponent)\n    public columnPinningUI: IgxColumnPinningComponent;\n\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    @ViewChild('columnPinningButton')\n    public columnPinningButton;\n\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.get(this.gridID);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * cosnt exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    public get shouldShowExportButton(): boolean {\n        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * cosnt exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    public get shouldShowExportExcelButton(): boolean {\n        return (this.grid != null && this.grid.exportExcel);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * cosnt exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    public get shouldShowExportCsvButton(): boolean {\n        return (this.grid != null && this.grid.exportCsv);\n    }\n\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    public get pinnedColumnsCount() {\n        return this.grid.pinnedColumns.length;\n    }\n\n    private _displayDensity: DisplayDensity | string;\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let toolbarTheme = this.grid.toolbar.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity;\n    }\n\n    /**\n     * Sets the theme of the `IgxGridToolbarComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [displayDensity]=\"'compact'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        switch (val) {\n            case 'compact':\n                this._displayDensity = DisplayDensity.compact;\n                break;\n            case 'cosy':\n                this._displayDensity = DisplayDensity.cosy;\n                break;\n            case 'comfortable':\n            default:\n                this._displayDensity = DisplayDensity.comfortable;\n        }\n    }\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        switch (this._displayDensity) {\n            case DisplayDensity.compact:\n                return 'igx-grid-toolbar--compact';\n            case DisplayDensity.cosy:\n                return 'igx-grid-toolbar--cosy';\n            case DisplayDensity.comfortable:\n            default:\n                return 'igx-grid-toolbar';\n        }\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        public cdr: ChangeDetectorRef,\n        @Optional() public excelExporter: IgxExcelExporterService,\n        @Optional() public csvExporter: IgxCsvExporterService) {\n    }\n\n    private _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _overlaySettings: OverlaySettings = {\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true\n    };\n\n\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getTitle(): string {\n        return this.grid != null ? this.grid.toolbarTitle : '';\n    }\n\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getExportText(): string {\n        return this.grid != null ? this.grid.exportText : '';\n    }\n\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    public getExportExcelText(): string {\n        return this.grid != null ? this.grid.exportExcelText : '';\n    }\n\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    public getExportCsvText(): string {\n        return this.grid != null ? this.grid.exportCsvText : '';\n    }\n\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    public exportClicked() {\n        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.exportDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    public exportToExcelClicked() {\n        this.performExport(this.excelExporter, 'excel');\n    }\n\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    public exportToCsvClicked() {\n        this.performExport(this.csvExporter, 'csv');\n    }\n\n    private performExport(exp: IgxBaseExporter, exportType: string) {\n        this.exportClicked();\n\n        const fileName = 'ExportedData';\n        const options = exportType === 'excel' ?\n            new IgxExcelExporterOptions(fileName) :\n            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);\n\n        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };\n\n        this.grid.onToolbarExporting.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        exp.export(this.grid, options);\n    }\n\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    public toggleColumnHidingUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnHidingDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    public toggleColumnPinningUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnPinningDropdown.toggle(this._overlaySettings);\n    }\n}\n","/* tslint:disable */\nexport default [\n    {\n        name: 'add_filter',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n<path d=\"M19 15v-3h-2v3h-3v2h3v3h2v-3h3v-2h-3zM5 10h10v2H5zM2 5h16v2H2zM8 15h4v2H8z\"/>\n</svg>`},\n    {\n        name: 'contains',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 3v18h18V3zm16 16H5V5h14z\"/>\n        <path d=\"M12 11.3a4.39 4.39 0 0 0-2.54.63 2.07 2.07 0 0 0-.9 1.78 2.29 2.29 0 0 0 .66 1.74 2.63 2.63 0 0 0 1.89.63 2.39 2.39 0 0 0 1.32-.37 3.05 3.05 0 0 0 1-.93 3.72 3.72 0 0 0 .08.57c0 .19.1.38.16.58h1.79a4.51 4.51 0 0 1-.21-.88 5.57 5.57 0 0 1-.07-.93v-3.5a2.44 2.44 0 0 0-.84-2 3.34 3.34 0 0 0-2.22-.7 3.54 3.54 0 0 0-2.3.72A1.93 1.93 0 0 0 9 10.29h1.71a.93.93 0 0 1 .29-.71 1.5 1.5 0 0 1 1-.29 1.45 1.45 0 0 1 1 .35 1.3 1.3 0 0 1 .37 1v.69zm1.4 1.08v1.17a1.61 1.61 0 0 1-.71.77 2.27 2.27 0 0 1-1.21.34 1.18 1.18 0 0 1-.84-.27.92.92 0 0 1-.3-.72 1.16 1.16 0 0 1 .44-.9 1.76 1.76 0 0 1 1.22-.39z\"/>\n      </svg>`\n    },\n    {\n        name: 'does_not_contain',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21,19.74V3H4.26L2.89,1.63,1.63,2.92,3,4.29V21H19.73l1.37,1.37,1.27-1.26ZM5,19V6.28l5.28,5.27a3.19,3.19,0,0,0-.81.38,2.07,2.07,0,0,0-.9,1.78,2.29,2.29,0,0,0,.66,1.74,2.63,2.63,0,0,0,1.89.63,2.39,2.39,0,0,0,1.32-.37,3.05,3.05,0,0,0,1-.93,3.72,3.72,0,0,0,.08.57c0,.19.1.38.16.58h1L17.73,19Zm5.79-6.23a1.31,1.31,0,0,1,.45-.25l1.37,1.36.28.29a1.57,1.57,0,0,1-.19.15,2.27,2.27,0,0,1-1.21.34,1.18,1.18,0,0,1-.84-.27.92.92,0,0,1-.3-.72A1.16,1.16,0,0,1,10.79,12.77Zm2.6-1.47h-.83L10.94,9.68l.08-.1a1.5,1.5,0,0,1,1-.29,1.45,1.45,0,0,1,1,.35,1.3,1.3,0,0,1,.37,1ZM19,17.74l-3.85-3.85V10.62a2.44,2.44,0,0,0-.84-2,3.34,3.34,0,0,0-2.22-.7,3.64,3.64,0,0,0-2.24.67L6.26,5H19Z\"/>\n    </svg>`\n    },\n    {\n        name: 'all',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M2 14h8v2H2zM2 6h12v2H2zM16 17l-3-3-1.5 1.5L16 20l7-7-1.5-1.5L16 17zM2 10h12v2H2z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 17h2v2H5zM13 17h2v2h-2zM5 13h2v2H5zM17 17h2v2h-2zM13 5h2v2h-2zM9 17h2v2H9zM17 9h2v2h-2zM17 13h2v2h-2zM17 5h2v2h-2zM5 9h2v2H5zM5 5h2v2H5zM9 5h2v2H9z\"/>\n      </svg>`\n    },\n    {\n        name: 'end_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M13.14 6.76L17.49 12l-4.35 5.24 1.54 1.28L20.09 12l-5.41-6.52-1.54 1.28z\"/>\n        <path d=\"M11.91 11h2v2h-2zM7.91 11h2v2h-2zM3.91 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'ends_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 14.5h2v2H3zM11 14.5h2v2h-2zM7 14.5h2v2H7zM20.8 14.8v-3A2.1 2.1 0 0 0 20 10a3 3 0 0 0-2-.6 3 3 0 0 0-2 .6 1.7 1.7 0 0 0-.7 1.5h1.5a.8.8 0 0 1 .3-.7 1.3 1.3 0 0 1 .9-.3 1.3 1.3 0 0 1 .9.4 1.1 1.1 0 0 1 .3.8v.6H18a3.8 3.8 0 0 0-2.2.6 1.8 1.8 0 0 0-.8 1.5 2 2 0 0 0 .6 1.6 2.3 2.3 0 0 0 1.6.6 2.1 2.1 0 0 0 1.2-.4 2.8 2.8 0 0 0 .8-.8 4.3 4.3 0 0 0 .1.5l.1.5H21a4.1 4.1 0 0 1-.2-.7 5.4 5.4 0 0 1 0-1zm-1.6-.5a1.5 1.5 0 0 1-.6.7 2 2 0 0 1-1 .2 1.1 1.1 0 0 1-.8-.2.8.8 0 0 1-.2-.6 1 1 0 0 1 .3-.8 1.5 1.5 0 0 1 1.1-.3h1.2z\"/>\n      </svg>`\n    },\n    {\n        name: 'equals',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 13.5h14v2H5zM5 8.5h14v2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 9.47L6 3v2.11L15.09 10 6 14.9v2.11l12-6.47V9.47z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 7.11L15.09 12 6 16.89V19l12-6.46v-1.08L6 5v2.11z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'is_after',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 7h4v10h-4v2h6V5h-6v2zM11 3h2v18h-2zM7 5h2v2H7zM3 5h2v2H3zM3 17h2v2H3zM3 13h2v2H3zM3 9h2v2H3zM7 17h2v2H7z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_before',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 19h6v-2H5V7h4V5H3v14zM11 3h2v18h-2zM15 5h2v2h-2zM19 5h2v2h-2zM19 13h2v2h-2zM15 17h2v2h-2zM19 17h2v2h-2zM19 9h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_false',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm4.31 9.79l-1.52 1.52L8 13.52l-2.79 2.79-1.52-1.52L6.48 12 3.69 9.21l1.52-1.52L8 10.48l2.79-2.79 1.52 1.52L9.52 12zM18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7z\"/>\n        <path d=\"M17.52 13.85l2.91-2.92-.78-.78-2.13 2.12-1.17-1.15-.38.37-.41.41.42.42L17 13.34l.52.51z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_not_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M16.58 6.07l.79-1.36-1.74-1-.78 1.35a7.5 7.5 0 0 0-7.43 12.87l-.79 1.36 1.74 1 .78-1.35a7.5 7.5 0 0 0 7.43-12.87zM6.5 12A5.5 5.5 0 0 1 12 6.5a5.65 5.65 0 0 1 1.84.32l-5.41 9.36A5.49 5.49 0 0 1 6.5 12zm5.5 5.5a5.65 5.65 0 0 1-1.84-.32l5.41-9.36A5.5 5.5 0 0 1 12 17.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 4.5a7.5 7.5 0 1 0 7.5 7.5A7.5 7.5 0 0 0 12 4.5zm0 13a5.5 5.5 0 1 1 5.5-5.5 5.5 5.5 0 0 1-5.5 5.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_true',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.44 14.22zM16.56 14.22zM16.56 14.22L18 12.79l1.44 1.43.78-.78L18.79 12l1.43-1.44-.78-.78L18 11.21l-1.44-1.43-.78.78L17.21 12l-1.43 1.44.78.78z\"/>\n        <path d=\"M18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7zM8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm-.93 10.18l-3.38-3.37 1.13-1.12 2.25 2.25 4.11-4.12 1.13 1.12z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.5 14a4.48 4.48 0 1 0 4.5 4.5 4.47 4.47 0 0 0-4.5-4.5zm3.5 5.5h-4v2l-3-3 3-3v2h4zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 10v11H7v2h14a2 2 0 0 0 2-2V10z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.87 9l-2.99 3 2.99 3v-2.25h5.26v-1.5H8.87V9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 14.9L8.91 10 18 5.11V3L6 9.47v1.07l12 6.47V14.9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 12.54L18 19v-2.11L8.91 12 18 7.11V5L6 11.46v1.08z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2 6.74v-2h-4v-2h4v-2l3 3zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M11.13 11.25H5.88v1.5h5.25V15l3-3-3-3v2.25z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 9h2v2H5zM9 17h2v2H9zM13 17h2v2h-2zM17 9h2v2h-2zM17 5h2v2h-2zM5 17h2v2H5zM13 5h2v2h-2zM5 13h2v2H5zM19 15v-2h-2v.47L18.53 15H19zM11 7V5H9v.46L10.54 7H11zM2.76 1.76L1.5 3.06 20.97 22.5l1.26-1.26-8.89-8.89L2.76 1.76z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.37 4.71l-1.74-1-2.76 4.79H5v2h6.71l-1.73 3H5v2h3.82l-2.19 3.79 1.74 1 2.76-4.79H19v-2h-6.71l1.73-3H19v-2h-3.82l2.19-3.79z\"/>\n      </svg>`\n    },\n    {\n        name: 'start_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M18.1 11h2v2h-2zM10.1 11h2v2h-2z\"/>\n        <path d=\"M10.9 6.8L9.3 5.5 4 12l5.4 6.5 1.6-1.3L6.5 12 11 6.8zM14.1 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'starts_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M4.97 13.23h3.06L6.5 9.12l-1.53 4.11z\"/>\n        <path d=\"M5.89 7.5L2 16.5h1.72l.73-1.8h4.1l.73 1.8H11l-3.89-9zM5 13.23l1.5-4.11L8 13.23zM12 14.5h2v2h-2zM20 14.5h2v2h-2zM16 14.5h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 9h2v2H6zM6 13h2v2H6zM11 13h2v2h-2zM6 17h2v2H6zM11 17h2v2h-2zM11 9h2v2h-2zM16 9h2v2h-2zM21 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2.94 5.41l-1.75-1.76.69-.71 1.05 1L20 16.83l.71.71z\"/>\n        <path d=\"M5 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.85 13.15l-1.77-1.77-.88.89 2.65 2.65 4.95-4.96-.88-.88-4.07 4.07z\"/>\n      </svg>`\n    },\n    {\n        name: 'today',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n        <path d=\"M16.53 12.06L15.47 11l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 18l5.94-5.94z\"/>\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 15h5v5h-5zM6 13h5v5H6zM13 6h5v5h-5zM6 6h5v5H6z\"/>\n        <path d=\"M20 2H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h9v-2H4V4h16v9h2V4a2 2 0 0 0-2-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'yesterday',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M10.68 15.38h6.13v-1.75h-6.13V11l-3.49 3.5 3.49 3.5v-2.62z\"/>\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n      </svg>`\n    }\n];\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { DataUtil } from '../data-operations/data-util';\nimport { cloneArray } from '../core/utils';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\nexport class IgxGridFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridTransaction',\n    pure: true\n})\nexport class IgxGridTransactionPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent>) { }\n\n    transform(collection: any[], id: string, pipeTrigger: number) {\n        const grid: IgxGridBaseComponent = this.gridAPI.get(id);\n\n        if (collection && grid.transactions.enabled) {\n            const result = DataUtil.mergeTransactions(\n                cloneArray(collection),\n                grid.transactions.getAggregatedChanges(true),\n                grid.primaryKey);\n            return result;\n        }\n        return collection;\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseComponent, IColumnResizeEventArgs } from '../grid-base.component';\nimport icons from './svgIcons';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IgxGridFilterConditionPipe } from '../grid-common.pipes';\nimport { TitleCasePipe, DatePipe } from '@angular/common';\n\nconst FILTERING_ICONS_FONT_SET = 'filtering-icons';\n\n/**\n *@hidden\n */\nexport class ExpressionUI {\n    public expression: IFilteringExpression;\n    public beforeOperator: FilteringLogic;\n    public afterOperator: FilteringLogic;\n    public isSelected = false;\n}\n\n/**\n *@hidden\n */\n@Injectable()\nexport class IgxFilteringService implements OnDestroy {\n\n    private columnsWithComplexFilter = new Set<string>();\n    private areEventsSubscribed = false;\n    private destroy$ = new Subject<boolean>();\n    private isFiltering = false;\n    private columnToExpressionsMap = new Map<string, ExpressionUI[]>();\n    private filterPipe = new IgxGridFilterConditionPipe();\n    private titlecasePipe = new TitleCasePipe();\n    private datePipe = new DatePipe(window.navigator.language);\n\n    public gridId: string;\n    public isFilterRowVisible = false;\n    public filteredColumn = null;\n    public selectedExpression: IFilteringExpression = null;\n    public columnToChipToFocus = new Map<string, boolean>();\n    public columnToMoreIconHidden = new Map<string, boolean>();\n    public columnStartIndex = -1;\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent>, private iconService: IgxIconService) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.get(this.gridId);\n    }\n\n    /**\n     * Subscribe to grid's events.\n     */\n    public subscribeToEvents() {\n        if (!this.areEventsSubscribed) {\n            this.areEventsSubscribed = true;\n\n            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnResizeEventArgs) => {\n                this.updateFilteringCell(eventArgs.column.field);\n            });\n\n            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IForOfState) => {\n                if (eventArgs.startIndex !== this.columnStartIndex) {\n                    this.columnStartIndex = eventArgs.startIndex;\n                    this.grid.filterCellList.forEach((filterCell) => {\n                        filterCell.updateFilterCellArea();\n                        if (filterCell.getChipToFocus()) {\n                            this.columnToChipToFocus.set(filterCell.column.field, false);\n                            filterCell.focusChip();\n                        }\n                    });\n                }\n            });\n\n            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe((event) => {\n                this.grid.filterCellList.forEach((filterCell) => {\n                    filterCell.updateFilterCellArea();\n                });\n            });\n        }\n    }\n\n    /**\n     * Execute filtering on the grid.\n     */\n    public filter(field: string, expressionsTree: FilteringExpressionsTree): void {\n        this.isFiltering = true;\n\n        this.grid.filter(field, null, expressionsTree);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(expressionsTree));\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Clear the filter of a given column.\n     */\n    public clearFilter(field: string): void {\n        this.isFiltering = true;\n\n        this.grid.clearFilter(field);\n\n        const expr = this.grid.filteringExpressionsTree.find(field);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(expr as FilteringExpressionsTree));\n\n        const expressions = this.getExpressions(field);\n        expressions.length = 0;\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    public registerSVGIcons(): void {\n        for (const icon of icons) {\n            if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {\n                this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);\n            }\n        }\n    }\n\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    public getExpressions(columnId: string): ExpressionUI[] {\n        if (!this.columnToExpressionsMap.has(columnId)) {\n            const column = this.grid.columns.find((col) => col.field === columnId);\n            const expressionUIs = new Array<ExpressionUI>();\n\n            this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);\n            this.columnToExpressionsMap.set(columnId, expressionUIs);\n\n            return expressionUIs;\n        }\n\n        return this.columnToExpressionsMap.get(columnId);\n    }\n\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    public refreshExpressions() {\n        if (!this.isFiltering) {\n            this.columnsWithComplexFilter.clear();\n\n            this.columnToExpressionsMap.forEach((value: ExpressionUI[], key: string) => {\n                const column = this.grid.columns.find((col) => col.field === key);\n                value.length = 0;\n\n                this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);\n\n                const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n                if (isComplex) {\n                    this.columnsWithComplexFilter.add(key);\n                }\n\n                this.updateFilteringCell(key);\n            });\n        }\n    }\n\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    public removeExpression(columnId: string, indexToRemove: number) {\n        const expressionsList = this.getExpressions(columnId);\n\n        if (indexToRemove === 0 && expressionsList.length > 1) {\n            expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === expressionsList.length - 1) {\n            expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;\n            expressionsList[0].beforeOperator = null;\n            expressionsList[expressionsList.length - 1].afterOperator = null;\n        }\n\n        expressionsList.splice(indexToRemove, 1);\n    }\n\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    public createSimpleFilteringTree(columnId: string): FilteringExpressionsTree {\n        const expressionsList = this.getExpressions(columnId);\n        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);\n        let currAndBranch: FilteringExpressionsTree;\n        let currExpressionUI: ExpressionUI;\n\n        for (let i = 0; i < expressionsList.length; i++) {\n            currExpressionUI = expressionsList[i];\n\n            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||\n                 currExpressionUI.beforeOperator === FilteringLogic.Or) &&\n                currExpressionUI.afterOperator === FilteringLogic.And) {\n\n                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                expressionsTree.filteringOperands.push(currAndBranch);\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n\n            } else if (currExpressionUI.beforeOperator === FilteringLogic.And) {\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n            } else {\n                expressionsTree.filteringOperands.push(currExpressionUI.expression);\n                currAndBranch = null;\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    public isFilterComplex(columnId: string) {\n        if (this.columnsWithComplexFilter.has(columnId)) {\n            return true;\n        }\n\n        const column = this.grid.columns.find((col) => col.field === columnId);\n        const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n        if (isComplex) {\n            this.columnsWithComplexFilter.add(columnId);\n        }\n\n        return isComplex;\n    }\n\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    public getOperatorAsString(operator: FilteringLogic): any {\n        return FilteringLogic[operator];\n    }\n\n    /**\n     * Genererate the label of a chip from a given filtering expression.\n     */\n    public getChipLabel(expression: IFilteringExpression): any {\n        if (expression.condition.isUnary) {\n            return this.titlecasePipe.transform(this.filterPipe.transform(expression.condition.name));\n        } else if (expression.searchVal instanceof Date) {\n            return this.datePipe.transform(expression.searchVal);\n        } else {\n            return expression.searchVal;\n        }\n    }\n\n    private updateFilteringCell(columnId: string) {\n        const filterCell = this.grid.filterCellList.find(cell => cell.column.field === columnId);\n        if (filterCell) {\n            filterCell.updateFilterCellArea();\n        }\n    }\n\n    private isFilteringTreeComplex(expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (!expressions) {\n            return false;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            if (expressionsTree.operator === FilteringLogic.Or) {\n                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);\n\n                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.\n                return andOperatorsCount > 1;\n            }\n\n            let isComplex = false;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);\n            }\n\n            return isComplex;\n        }\n\n        return false;\n    }\n\n    private getChildAndOperatorsCount(expressions: IFilteringExpressionsTree): number {\n        let count = 0;\n        let operand;\n        for (let i = 0; i < expressions.filteringOperands.length; i++) {\n            operand = expressions[i];\n            if (operand instanceof FilteringExpressionsTree) {\n                if (operand.operator === FilteringLogic.And) {\n                    count++;\n                }\n\n                count = count + this.getChildAndOperatorsCount(operand);\n            }\n        }\n\n        return count;\n    }\n\n    private generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression,\n                                    operator: FilteringLogic,\n                                    expressionsUIs: ExpressionUI[]): void {\n        if (!expressions) {\n            return;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                this.generateExpressionsList(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);\n            }\n        } else {\n            const exprUI = new ExpressionUI();\n            exprUI.expression = expressions as IFilteringExpression;\n            if (expressionsUIs.length !== 0) {\n                exprUI.beforeOperator = operator;\n            }\n\n            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];\n            if (prevExprUI) {\n                prevExprUI.afterOperator = operator;\n            }\n\n            expressionsUIs.push(exprUI);\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgZone,\n    OnInit,\n    ViewChild,\n    QueryList,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { RestrictDrag } from '../directives/dragdrop/dragdrop.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from './column.component';\nimport { IgxColumnMovingService } from './grid.common';\nimport { isFirefox } from '../core/utils';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header',\n    template: `<ng-template #defaultColumn>\n    {{ column.header || column.field }}\n</ng-template>\n\n<ng-container *ngIf=\"column.columnGroup\">\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid__th-drop-indicator-left\"></span>\n    <div class=\"igx-grid__thead-title\" [style.width.px]=\"column.width\">{{ column.header }}</div>\n    <div class=\"igx-grid__thead-group\">\n        <ng-container *ngFor=\"let child of column.children\">\n            <div class=\"igx-grid__thead-subgroup\">\n                <igx-grid-header [igxColumnMovingDrag]=\"child\" [attr.droppable]=\"true\" [igxColumnMovingDrop]=\"child\" *ngIf=\"!child.hidden\" [gridID]=\"column.gridID\" [column]=\"child\"\n                    [style.min-width.px]=\"child.width\" [style.flex-basis.px]='child.width' [style.max-width.px]='child.width'></igx-grid-header>\n                <igx-grid-filtering-cell [attr.draggable]=\"false\" *ngIf=\"grid.allowFiltering && !child.children && !child.hidden\" [column]=\"child\"\n                    [style.min-width.px]=\"child.width\" [style.flex-basis.px]='child.width' [style.max-width.px]='child.width'></igx-grid-filtering-cell>\n            </div>\n        </ng-container>\n    </div>\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid__th-drop-indicator-right\"></span>\n</ng-container>\n\n<ng-container *ngIf=\"!column.columnGroup\">\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid__th-drop-indicator-left\">\n    </span>\n    <span class=\"igx-grid__th-title\">\n        <ng-container *ngTemplateOutlet=\"column.headerTemplate ? column.headerTemplate : defaultColumn; context: { $implicit: column }\">\n        </ng-container>\n    </span>\n    <div class=\"igx-grid__th-icons\" *ngIf=\"!column.columnGroup\">\n        <igx-icon class=\"sort-icon\" *ngIf=\"column.sortable\">{{sortingIcon}}</igx-icon>\n        <!-- <igx-grid-filter [column]=\"column\" *ngIf=\"column.filterable\"></igx-grid-filter> -->\n    </div>\n\n    <span *ngIf=\"!column.columnGroup\" [attr.draggable]=\"false\" [style.cursor]=\"resizeCursor\" #resizeArea\n        class=\"igx-grid__th-resize-handle\">\n\n        <div *ngIf=\"showResizer\" igxResizer\n            class=\"igx-grid__th-resize-line\"\n            [style.height.px]=\"resizerHeight\"\n            [restrictHResizeMax]=\"restrictResizeMax\"\n            [restrictHResizeMin]=\"restrictResizeMin\"\n            [resizeEndTimeout]=\"resizeEndTimeout\"\n            (resizeEnd)=\"onResize($event)\">\n        </div>\n\n    </span>\n\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid__th-drop-indicator-right\">\n    </span>\n</ng-container>\n\n`\n})\nexport class IgxGridHeaderComponent implements OnInit, DoCheck, AfterViewInit, OnDestroy {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__th--fw',\n            this.column.headerClasses\n        ];\n\n        const classList = {\n            'igx-grid__th': !this.column.columnGroup,\n            'asc': this.ascending,\n            'desc': this.descending,\n            'igx-grid__th--number': this.column.dataType === DataType.Number,\n            'igx-grid__th--sorted': this.sorted,\n            'igx-grid__drag-col-header': this.dragged,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__th--filtering': this.filteringService.filteredColumn === this.column\n        };\n\n        Object.entries(classList).forEach(([klass, value]) => {\n            if (value) {\n                defaultClasses.push(klass);\n            }\n        });\n        return defaultClasses.join(' ');\n    }\n\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        // HACK - think of a better solution\n        const colWidth = this.column.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (isPercentageWidth) {\n            const firstContentCell = this.column.cells[0];\n            if (firstContentCell) {\n                return firstContentCell.nativeElement.getBoundingClientRect().width + 'px';\n            }\n        } else {\n            return this.column.width;\n        }\n    }\n\n    @HostBinding('style.height.px')\n    get height() {\n        if (this.grid.hasColumnGroups) {\n            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight;\n        }\n        return null;\n    }\n\n    get ascending() {\n        return this.sortDirection === SortingDirection.Asc;\n    }\n\n    get descending() {\n        return this.sortDirection === SortingDirection.Desc;\n    }\n\n    get sortingIcon(): string {\n        if (this.sortDirection !== SortingDirection.None) {\n            // arrow_downward and arrow_upward\n            // are material icons ligature strings\n            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';\n        }\n        return 'none';\n    }\n\n    get sorted() {\n        return this.sortDirection !== SortingDirection.None;\n    }\n\n    get dragged() {\n        return this.column === this.column.grid.draggedColumn;\n    }\n\n    @HostBinding('style.z-index')\n    get zIndex() {\n        if (!this.column.pinned) {\n            return null;\n        }\n        return 9999 - this.grid.pinnedColumns.indexOf(this.column);\n    }\n\n    @HostBinding('attr.role')\n    public hostRole = 'columnheader';\n\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    @HostBinding('attr.id')\n    get headerID() {\n        return `${this.gridID}_${this.column.field}`;\n    }\n\n    @ViewChild('resizeArea')\n    public resizeArea: ElementRef;\n\n    @ViewChildren(IgxGridHeaderComponent, { read: IgxGridHeaderComponent })\n    public children: QueryList<IgxGridHeaderComponent>;\n\n    public resizeCursor = null;\n    public showResizer = false;\n    public resizerHeight;\n    public dragDirection: RestrictDrag = RestrictDrag.HORIZONTALLY;\n    public resizeEndTimeout = isFirefox() ? 200 : 0;\n\n    protected sortDirection = SortingDirection.None;\n\n    private _startResizePos;\n    private _pinnedMaxWidth;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        public zone: NgZone,\n        private cms: IgxColumnMovingService,\n        public filteringService: IgxFilteringService\n    ) { }\n\n    public ngOnInit() {\n        this.column.columnGroup ? this.zone.runTask(() => this.cdr.markForCheck()) :\n            this.cdr.markForCheck();\n    }\n\n    public ngDoCheck() {\n        this.getSortDirection();\n        this.cdr.markForCheck();\n    }\n\n    ngAfterViewInit() {\n        if (!this.column.columnGroup) {\n            this.zone.runOutsideAngular(() => {\n                this.resizeArea.nativeElement.addEventListener('mouseover', this.onResizeAreaMouseOver.bind(this));\n                this.resizeArea.nativeElement.addEventListener('mousedown', this.onResizeAreaMouseDown.bind(this));\n                this.resizeArea.nativeElement.addEventListener('dblclick', this.onResizeAreaDblClick.bind(this));\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        if (!this.column.columnGroup) {\n            this.zone.runOutsideAngular(() => {\n                this.resizeArea.nativeElement.removeEventListener('mouseover', this.onResizeAreaMouseOver);\n                this.resizeArea.nativeElement.removeEventListener('mousedown', this.onResizeAreaMouseDown);\n                this.resizeArea.nativeElement.removeEventListener('dblclick', this.onResizeAreaDblClick);\n            });\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this.column.grid.isColumnResizing) {\n            event.stopPropagation();\n            if (this.grid.filteringService.isFilterRowVisible) {\n                if (this.column.filterable && !this.column.columnGroup &&\n                    !this.grid.filteringService.isFilterComplex(this.column.field)) {\n                    this.grid.filteringService.filteredColumn = this.column;\n                }\n            } else if (this.column.sortable) {\n                const groupingExpr = this.grid.groupingExpressions ?\n                    this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;\n                const sortDir = groupingExpr ?\n                    this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc\n                    : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;\n                this.sortDirection = sortDir;\n                this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,\n                    strategy: this.column.sortStrategy });\n                this.grid.onSortingDone.emit({\n                    dir: this.sortDirection,\n                    fieldName: this.column.field,\n                    ignoreCase: this.column.sortingIgnoreCase,\n                    strategy: this.column.sortStrategy\n                });\n            }\n        }\n    }\n\n    get restrictResizeMin(): number {\n        const actualMinWidth = parseFloat(this.column.minWidth);\n        const defaultMinWidth = parseFloat(this.column.defaultMinWidth);\n\n        let minWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;\n        minWidth = minWidth < parseFloat(this.column.width) ? minWidth : parseFloat(this.column.width);\n\n        return minWidth - this.elementRef.nativeElement.getBoundingClientRect().width;\n    }\n\n    get restrictResizeMax(): number {\n        const actualWidth = this.elementRef.nativeElement.getBoundingClientRect().width;\n\n        if (this.column.pinned) {\n            const pinnedMaxWidth = this._pinnedMaxWidth =\n                this.grid.calcPinnedContainerMaxWidth - this.grid.getPinnedWidth(true) + actualWidth;\n\n            if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {\n                this._pinnedMaxWidth = this.column.maxWidth;\n\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return pinnedMaxWidth - actualWidth;\n            }\n        } else {\n            if (this.column.maxWidth) {\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n\n    get grid(): any {\n        return this.gridAPI.get(this.gridID);\n    }\n\n    get isPinned() {\n        return this.column.pinned;\n    }\n\n    get isLastPinned() {\n        const pinnedCols = this.grid.pinnedColumns;\n        if (pinnedCols.length === 0) {\n            return false;\n        } else {\n            return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;\n        }\n    }\n\n    protected getSortDirection() {\n        const expr = this.gridAPI.get(this.gridID).sortingExpressions.find((x) => x.fieldName === this.column.field);\n        this.sortDirection = expr ? expr.dir : SortingDirection.None;\n    }\n\n    private onResizeAreaMouseOver() {\n        if (this.column.resizable) {\n            this.resizeCursor = 'col-resize';\n            this.cdr.detectChanges();\n        }\n    }\n\n    private onResizeAreaMouseDown(event) {\n        if (event.button === 0 && this.column.resizable) {\n            this.showResizer = true;\n            this.column.grid.isColumnResizing = true;\n            this.resizerHeight = this.grid.calcResizerHeight;\n            this._startResizePos = event.clientX;\n        } else {\n            this.resizeCursor = null;\n        }\n        this.cdr.detectChanges();\n    }\n\n    private onResizeAreaDblClick() {\n        if (this.column.resizable) {\n            const currentColWidth = this.elementRef.nativeElement.getBoundingClientRect().width;\n\n            const size = this.column.getLargestCellWidth();\n\n            if (this.column.pinned) {\n                const newPinnedWidth = this.grid.getPinnedWidth(true) - currentColWidth + parseFloat(size);\n\n                if (newPinnedWidth <= this.grid.calcPinnedContainerMaxWidth) {\n                    this.column.width = size;\n                }\n            } else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {\n                this.column.width = parseFloat(this.column.maxWidth) + 'px';\n            } else if (parseFloat(size) < parseFloat(this.column.defaultMinWidth)) {\n                this.column.width = this.column.defaultMinWidth + 'px';\n            } else {\n                this.column.width = size;\n            }\n\n            this.grid.markForCheck();\n            this.grid.reflow();\n            this.grid.onColumnResized.emit({ column: this.column, prevWidth: currentColWidth.toString(), newWidth: this.column.width });\n        }\n    }\n\n    public onResize(event) {\n        this.column.grid.isColumnResizing = false;\n\n        this.showResizer = false;\n        const diff = event.clientX - this._startResizePos;\n\n        if (this.column.resizable) {\n            let currentColWidth = parseFloat(this.column.width);\n\n            const actualMinWidth = parseFloat(this.column.minWidth);\n            const defaultMinWidth = parseFloat(this.column.defaultMinWidth);\n\n            let colMinWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;\n            const colMaxWidth = this.column.pinned ? parseFloat(this._pinnedMaxWidth) : parseFloat(this.column.maxWidth);\n\n            const actualWidth = this.elementRef.nativeElement.getBoundingClientRect().width;\n\n            currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n            colMinWidth = colMinWidth < currentColWidth ? colMinWidth : currentColWidth;\n\n            if (currentColWidth + diff < colMinWidth) {\n                this.column.width = colMinWidth + 'px';\n            } else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {\n                this.column.width = colMaxWidth + 'px';\n            } else {\n                this.column.width = (currentColWidth + diff) + 'px';\n            }\n\n            this.grid.markForCheck();\n            this.grid.reflow();\n\n            if (currentColWidth !== parseFloat(this.column.width)) {\n                this.grid.onColumnResized.emit({ column: this.column, prevWidth: currentColWidth.toString(), newWidth: this.column.width });\n            }\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\n\nenum MoveDirection {\n    LEFT = 'left',\n    RIGHT = 'right'\n}\n\n/** @hidden */\n@Injectable()\nexport class IgxGridNavigationService {\n    public grid: IgxGridBaseComponent;\n\n    get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    get displayContainerScrollLeft() {\n        return parseInt(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft, 10);\n    }\n\n    get verticalDisplayContainerElement() {\n        return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public horizontalScroll(rowIndex) {\n        return this.grid.dataRowList.find((row) => row.index === rowIndex).virtDirRow;\n    }\n\n    public getColumnUnpinnedIndex(visibleColumnIndex: number) {\n        const column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    public isColumnFullyVisible(visibleColumnIndex: number) {\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth ||\n            this.grid.columnList.filter(c => !c.columnGroup).find((column) => column.visibleIndex === visibleColumnIndex).pinned) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        return this.displayContainerWidth >=\n            this.grid.dataRowList.first.virtDirRow.getColumnScrollLeft(index + 1) -\n            this.displayContainerScrollLeft;\n    }\n\n    public isColumnLeftFullyVisible(visibleColumnIndex) {\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth ||\n            this.grid.columnList.filter(c => !c.columnGroup).find((column) => column.visibleIndex === visibleColumnIndex).pinned) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        return this.displayContainerScrollLeft <=\n            this.grid.dataRowList.first.virtDirRow.getColumnScrollLeft(index);\n    }\n\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup);\n    }\n\n    public isRowInEditMode(rowIndex): boolean {\n        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);\n    }\n\n    public isColumnEditable(visibleColumnIndex: number): boolean {\n        const column = this.gridOrderedColumns.find(c => c.visibleIndex === visibleColumnIndex);\n        return column ? column.editable : false;\n    }\n\n    public findNextEditable(direction: string, visibleColumnIndex: number) {\n        const gridColumns = this.gridOrderedColumns;\n        if (direction === MoveDirection.LEFT) {\n            return gridColumns.splice(0, visibleColumnIndex + 1).reverse().findIndex(e => e.editable);\n        } else if (direction === MoveDirection.RIGHT) {\n            return gridColumns.splice(visibleColumnIndex, gridColumns.length - 1).findIndex(e => e.editable);\n        }\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex) {\n        if (this.isTreeGrid && visibleColumnIndex === 0) {\n            return this.grid.nativeElement.querySelector(\n                `igx-tree-grid-cell[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        }\n        return this.grid.nativeElement.querySelector(\n            `igx-grid-cell[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public onKeydownArrowRight(element, rowIndex, visibleColumnIndex) {\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n        if (this.isColumnFullyVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned\n            if (element.classList.contains('igx-grid__th--pinned-last')) {\n                if (this.isColumnLeftFullyVisible(visibleColumnIndex + 1)) {\n                    element.nextElementSibling.firstElementChild.focus();\n                } else {\n                    this.grid.nativeElement.focus({preventScroll: true});\n                    this.grid.parentVirtDir.onChunkLoad\n                        .pipe(first())\n                        .subscribe(() => {\n                            element.nextElementSibling.firstElementChild.focus();\n                        });\n                        this.horizontalScroll(rowIndex).scrollTo(0);\n                }\n            } else {\n                element.nextElementSibling.focus();\n            }\n        } else {\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1);\n        }\n    }\n\n    public onKeydownArrowLeft(element, rowIndex, visibleColumnIndex) {\n        if (visibleColumnIndex === 0) {\n            return;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);\n        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === - 1) {\n            element.parentNode.previousElementSibling.focus();\n        } else if (!this.isColumnLeftFullyVisible(visibleColumnIndex - 1)) {\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1);\n        } else {\n            element.previousElementSibling.focus();\n        }\n\n    }\n\n    public movePreviousEditable(rowIndex, visibleColumnIndex) {\n        const addedIndex = this.isColumnEditable(visibleColumnIndex - 1) ?\n            0 :\n            this.findNextEditable(MoveDirection.LEFT, visibleColumnIndex - 1);\n        if (addedIndex === -1) {\n            this.grid.rowEditTabs.last.element.nativeElement.focus();\n            return;\n        }\n        const editableIndex = visibleColumnIndex - 1 - addedIndex;\n        if (this.getColumnUnpinnedIndex(editableIndex) === -1 && this.grid.pinnedColumns.length) {\n            // if target is NOT pinned and there are pinned columns\n            // since addedIndex !== -1, there will always be a target\n            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();\n        } else if (!this.isColumnLeftFullyVisible(editableIndex)) {  // if not fully visible, perform scroll\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.performHorizontalScrollToCell(rowIndex, editableIndex);\n        } else {\n            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // if fully visible, just focus\n        }\n    }\n\n    public moveNextEditable(element, rowIndex, visibleColumnIndex) {\n        let addedIndex = 0;\n        addedIndex = this.isColumnEditable(visibleColumnIndex + 1) ?\n                0 :\n        this.findNextEditable(MoveDirection.RIGHT, visibleColumnIndex + 1);\n        if (addedIndex === -1 && this.grid.rowEditTabs) { // no previous edit column -> go to RE buttons\n            this.grid.rowEditTabs.first.element.nativeElement.focus();\n            return;\n        }\n        const editableIndex = visibleColumnIndex + 1 + addedIndex;\n        if (this.isColumnFullyVisible(editableIndex)) { // If column is fully visible\n            if (element.classList.contains('igx-grid__th--pinned-last')) { // If this is pinned\n                if (this.isColumnLeftFullyVisible(editableIndex)) { // If next column is fully visible LEFT\n                    this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // focus\n                } else { // if NOT fully visible, perform scroll\n                    this.grid.nativeElement.focus({preventScroll: true});\n                    this.performHorizontalScrollToCell(rowIndex, editableIndex);\n                }\n            } else { // cell is next cell\n                this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();\n            }\n        } else {\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.performHorizontalScrollToCell(rowIndex, editableIndex);\n        }\n    }\n    public onKeydownHome(rowIndex) {\n        const rowElement = this.grid.dataRowList.find((row) => row.index === rowIndex).nativeElement;\n        let firstCell = this.isTreeGrid ?\n        rowElement.querySelector('igx-tree-grid-cell') :\n        rowElement.querySelector('igx-grid-cell');\n        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {\n            firstCell.focus();\n        } else {\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    this.grid.nativeElement.focus({preventScroll: true});\n                    firstCell = this.isTreeGrid ? rowElement.querySelector('igx-tree-grid-cell') :\n                    rowElement.querySelector('igx-grid-cell');\n                    firstCell.focus();\n                });\n            this.horizontalScroll(rowIndex).scrollTo(0);\n        }\n    }\n\n    public onKeydownEnd(rowIndex) {\n        const index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;\n        const rowElement = this.grid.dataRowList.find((row) => row.index === rowIndex).nativeElement;\n        const allCells = rowElement.querySelectorAll('igx-grid-cell');\n        const lastCell = allCells[allCells.length - 1];\n        if (this.isColumnFullyVisible(index)) {\n            lastCell.focus();\n        } else {\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    this.grid.nativeElement.focus({preventScroll: true});\n                    lastCell.focus();\n                });\n            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.isTreeGrid && visibleColumnIndex === 0 ? 'igx-tree-grid-cell' : 'igx-grid-cell';\n        if (verticalScroll.scrollTop === 0) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[0].focus();\n        } else {\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.grid.verticalScrollContainer.scrollTo(0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[0].focus(); }\n                });\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.isTreeGrid && visibleColumnIndex === 0 ? 'igx-tree-grid-cell' : 'igx-grid-cell';\n        if (verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[cells.length - 1].focus();\n        } else {\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                });\n        }\n    }\n\n    public navigateUp(rowElement, currentRowIndex, visibleColumnIndex) {\n        if (currentRowIndex === 0) {\n            this.grid.rowList.first.cells.first._clearCellSelection();\n\n            if (this.grid.allowFiltering) {\n                const visColLength = this.grid.visibleColumns.length;\n                this.grid.headerContainer.scrollTo(visColLength - 1);\n                this.grid.filteringService.columnToChipToFocus.set(this.grid.visibleColumns[visColLength - 1].field, true);\n            }\n\n            return;\n        }\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        if (!rowElement.previousElementSibling ||\n            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    if (tag === 'igx-grid-row' || tag === 'igx-tree-grid-row') {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                    } else {\n                        rowElement = this.grid.nativeElement.querySelector(\n                            `igx-grid-groupby-row[data-rowindex=\"${currentRowIndex}\"]`);\n                    }\n                    this.focusPreviousElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusPreviousElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    private focusPreviousElement(currentRowEl, visibleColumnIndex) {\n        if (currentRowEl.previousElementSibling.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n            currentRowEl.previousElementSibling.focus();\n        } else {\n            if (this.isColumnFullyVisible(visibleColumnIndex) && this.isColumnLeftFullyVisible(visibleColumnIndex)) {\n                const cell = this.isTreeGrid && visibleColumnIndex === 0 ?\n                currentRowEl.previousElementSibling.querySelector(`igx-tree-grid-cell[data-visibleIndex=\"${visibleColumnIndex}\"]`) :\n                currentRowEl.previousElementSibling.querySelector(`igx-grid-cell[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cell.focus();\n                return;\n            }\n            this.grid.nativeElement.focus({preventScroll: true});\n            this.performHorizontalScrollToCell(parseInt(\n                currentRowEl.previousElementSibling.getAttribute('data-rowindex'), 10), visibleColumnIndex);\n            }\n        }\n\n    public navigateDown(rowElement, currentRowIndex, visibleColumnIndex) {\n        if (currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1) {\n            return;\n        }\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = rowElement.nextElementSibling ?\n        rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :\n        containerHeight + rowHeight;\n        this.grid.nativeElement.focus({preventScroll: true});\n        if (containerHeight && containerHeight < targetEndTopOffset) {\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex + 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    if (tag === 'igx-grid-row' || tag === 'igx-tree-grid-row') {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                    } else {\n                        rowElement = this.grid.nativeElement.querySelector(\n                            `igx-grid-groupby-row[data-rowindex=\"${currentRowIndex}\"]`);\n                    }\n                    this.focusNextElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusNextElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    private focusNextElement(rowElement, visibleColumnIndex) {\n        if (rowElement.nextElementSibling.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n            rowElement.nextElementSibling.focus();\n        } else {\n            if (this.isColumnFullyVisible(visibleColumnIndex) && this.isColumnLeftFullyVisible(visibleColumnIndex)) {\n                const cell = this.isTreeGrid && visibleColumnIndex === 0 ?\n                rowElement.nextElementSibling.querySelector(`igx-tree-grid-cell[data-visibleIndex=\"${visibleColumnIndex}\"]`) :\n                rowElement.nextElementSibling.querySelector(`igx-grid-cell[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cell.focus();\n                return;\n            }\n            this.performHorizontalScrollToCell(parseInt(\n                rowElement.nextElementSibling.getAttribute('data-rowindex'), 10), visibleColumnIndex);\n            }\n        }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (verticalScroll.scrollTop === 0) {\n            if (!this.isTreeGrid) {\n                this.onKeydownHome(this.grid.dataRowList.first.index);\n            } else {\n                this.onKeydownHome(0);\n            }\n        } else {\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        }\n    }\n\n    public goToLastCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        if (verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rows = this.getAllRows();\n            const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n            this.onKeydownEnd(rowIndex);\n        } else {\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rows = this.getAllRows();\n                if (rows.length > 0) {\n                    const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n                    this.onKeydownEnd(rowIndex);\n                }\n                });\n        }\n    }\n\n    public performTab(currentRowEl, rowIndex, visibleColumnIndex) {\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            if (this.isRowInEditMode(rowIndex)) {\n                this.grid.rowEditTabs.first.element.nativeElement.focus();\n                return;\n            }\n            if (this.grid.rowList.find(row => row.index === rowIndex + 1)) {\n                this.navigateDown(currentRowEl, rowIndex, 0);\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex);\n            if (cell) {\n                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {\n                    this.moveNextEditable(cell, rowIndex, visibleColumnIndex);\n                    return;\n                }\n                this.onKeydownArrowRight(cell, rowIndex, visibleColumnIndex);\n            }\n        }\n    }\n\n    public performShiftTabKey(currentRowEl, rowIndex, visibleColumnIndex) {\n        if (visibleColumnIndex === 0) {\n                if (this.isRowInEditMode(rowIndex)) {\n                    this.grid.rowEditTabs.last.element.nativeElement.focus();\n                    return;\n                }\n                this.navigateUp(currentRowEl, rowIndex,\n                    this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex);\n        } else {\n            const cell = currentRowEl.querySelector(`igx-grid-cell[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            if (cell) {\n                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {\n                    this.movePreviousEditable( rowIndex, visibleColumnIndex);\n                    return;\n                }\n                this.onKeydownArrowLeft(cell, rowIndex, visibleColumnIndex);\n            }\n        }\n    }\n\n    private performHorizontalScrollToCell(rowIndex, visibleColumnIndex) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex).focus();\n            });\n        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n    }\n    private getRowByIndex(index) {\n        return this.isTreeGrid ? this.grid.nativeElement.querySelector(\n            `igx-tree-grid-row[data-rowindex=\"${index}\"]`) :\n            this.grid.nativeElement.querySelector(\n                `igx-grid-row[data-rowindex=\"${index}\"]`);\n    }\n\n    private getAllRows() {\n        return this.isTreeGrid ? this.grid.nativeElement.querySelectorAll('igx-tree-grid-row') :\n        this.grid.nativeElement.querySelectorAll('igx-grid-row');\n    }\n\n    private get isTreeGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';\n    }\n}\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, QueryList } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxGridNavigationService } from './grid-navigation.service';\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEdit]'\n})\nexport class IgxRowEditTemplateDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditText]'\n})\nexport class IgxRowEditTextDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditActions]'\n})\nexport class IgxRowEditActionsDirective { }\n\n/** @hidden */\n@Directive({\n    selector: `[igxRowEditTabStop]`\n})\nexport class IgxRowEditTabStopDirective {\n    private get allTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.grid.rowEditTabs;\n    }\n    constructor(\n        @Inject(forwardRef(() => IgxGridBaseComponent)) public grid: IgxGridBaseComponent,\n        public element: ElementRef,\n        @Inject(forwardRef(() => IgxGridNavigationService)) public navigationService: IgxGridNavigationService) {}\n    @HostListener('keydown.Tab', [`$event`])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    public handleTab(event: KeyboardEvent): void {\n        event.stopPropagation();\n        if (this.allTabs.length > 1) {\n            if ((this.allTabs.last ===  this && !event.shiftKey) ||\n                (this.allTabs.first ===  this && event.shiftKey)\n            ) {\n                this.move(event);\n            }\n        } else {\n            this.move(event);\n        }\n    }\n    private focusNextCell(rowIndex, cellIndex) {\n        const grid = this.grid as any;\n        grid.parentVirtDir.onChunkLoad.pipe(first()).subscribe(() => {\n            grid.rowInEditMode.cells.find(c => c.visibleColumnIndex === cellIndex).element.nativeElement.focus();\n        });\n    }\n    private move(event: KeyboardEvent) {\n        event.preventDefault();\n        const horizontalScroll = this.grid.parentVirtDir.getHorizontalScroll();\n        const targetIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;\n        const targetCell = this.grid.rowInEditMode.cells.find(e => e.visibleColumnIndex === targetIndex);\n        if (!targetCell ||\n            !this.navigationService.isColumnFullyVisible(targetIndex)\n            || !this.navigationService.isColumnLeftFullyVisible(targetIndex)) {\n            this.focusNextCell(this.grid.rowInEditMode.index, targetIndex);\n            horizontalScroll.scrollLeft =\n            this.grid.rowInEditMode.virtDirRow.getColumnScrollLeft(this.navigationService.getColumnUnpinnedIndex(targetIndex));\n        } else {\n            targetCell._updateCellSelectionStatus(true, event);\n            targetCell.inEditMode = true;\n            targetCell.nativeElement.focus();\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    HostBinding,\n    AfterViewInit,\n    ElementRef,\n    HostListener,\n    OnInit\n} from '@angular/core';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { IgxFilteringService, ExpressionUI } from './grid-filtering.service';\nimport { KEYS, cloneArray } from '../../core/utils';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\n\n/**\n * @hidden\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-cell',\n    template: `<ng-template #emptyFilter>\n        <igx-chips-area [attr.draggable]=\"false\" class=\"igx-filtering-chips\">\n            <igx-chip #ghostChip [attr.draggable]=\"false\" (click)=\"onChipClicked()\" (keydown)=\"onChipKeyDown($event)\" [displayDensity]=\"'cosy'\">\n                <igx-icon [attr.draggable]=\"false\" igxPrefix>filter_list</igx-icon>\n                <span [attr.draggable]=\"false\">Filter</span>\n            </igx-chip>\n        </igx-chips-area>\n</ng-template>\n\n<ng-template #defaultFilter>\n    <igx-chips-area #chipsArea class=\"igx-filtering-chips\">\n        <ng-container *ngFor=\"let item of visibleExpressionsList; let last = last;\" >\n            <igx-chip\n                [removable]=\"true\"\n                [displayDensity]=\"'cosy'\"\n                (click)=\"onChipClicked(item.expression)\"\n                (keydown)=\"onChipKeyDown($event, item.expression)\"\n                (onRemove)=\"onChipRemoved($event, item)\">\n                <igx-icon igxPrefix\n                    fontSet=\"filtering-icons\"\n                    [name]=\"item.expression.condition.iconName\">\n                </igx-icon>\n                <span #label>\n                    {{filteringService.getChipLabel(item.expression)}}\n                </span>\n            </igx-chip>\n            <span class=\"igx-filtering-chips__connector\" *ngIf=\"!last\">{{filteringService.getOperatorAsString(item.afterOperator)}}</span>\n        </ng-container>\n        <div #moreIcon [ngClass]=\"filteringIndicatorClass()\" (click)=\"onChipClicked()\" tabindex=\"0\">\n            <igx-icon>filter_list</igx-icon>\n            <igx-badge [value]=\"moreFiltersCount\"></igx-badge>\n        </div>\n    </igx-chips-area>\n</ng-template>\n\n<ng-template #complexFilter>\n    <igx-chip #complexChip [removable]=\"true\" [displayDensity]=\"'cosy'\" (onRemove)=\"clearFiltering()\">\n        <igx-icon igxPrefix>filter_list</igx-icon>\n        <span>Complex Filter</span>\n    </igx-chip>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template; context: { $implicit: this }\"></ng-container>\n`\n})\nexport class IgxGridFilteringCellComponent implements AfterViewInit, OnInit {\n\n    private rootExpressionsTree: FilteringExpressionsTree;\n    private expressionsList: ExpressionUI[];\n    private baseClass = 'igx-grid__filtering-cell-indicator';\n    private currentTemplate = null;\n\n    public visibleExpressionsList: ExpressionUI[];\n    public moreFiltersCount = 0;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('emptyFilter', { read: TemplateRef })\n    protected emptyFilter: TemplateRef<any>;\n\n    @ViewChild('defaultFilter', { read: TemplateRef })\n    protected defaultFilter: TemplateRef<any>;\n\n    @ViewChild('complexFilter', { read: TemplateRef })\n    protected complexFilter: TemplateRef<any>;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChild('moreIcon', { read: ElementRef })\n    protected moreIcon: ElementRef;\n\n    @ViewChild('ghostChip', { read: IgxChipComponent })\n    protected ghostChip: IgxChipComponent;\n\n    @ViewChild('complexChip', { read: IgxChipComponent })\n    protected complexChip: IgxChipComponent;\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        // HACK - think of a better solution\n        const colWidth = this.column.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (isPercentageWidth) {\n            const firstContentCell = this.column.cells[0];\n            if (firstContentCell) {\n                return firstContentCell.nativeElement.getBoundingClientRect().width + 'px';\n            }\n        } else {\n            return this.column.width;\n        }\n    }\n\n    @HostBinding('class.igx-grid__filtering-cell')\n    public cssClass = 'igx-grid__filtering-cell';\n\n    @HostBinding('class.igx-grid__th--pinned-last')\n    get isLastPinned() {\n        const pinnedCols = this.filteringService.grid.pinnedColumns;\n        if (pinnedCols.length === 0) {\n            return false;\n        } else {\n            return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef, public filteringService: IgxFilteringService, public navService: IgxGridNavigationService) {\n        this.filteringService.subscribeToEvents();\n    }\n\n    ngOnInit(): void {\n        this.filteringService.columnToChipToFocus.set(this.column.field, false);\n        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n    }\n\n    ngAfterViewInit(): void {\n        this.updateFilterCellArea();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeyDown(eventArgs) {\n        if (eventArgs.shiftKey) {\n            if (this.column.visibleIndex > 0 && !this.navService.isColumnLeftFullyVisible(this.column.visibleIndex - 1)) {\n                eventArgs.preventDefault();\n                this.filteringService.grid.headerContainer.scrollTo(this.column.visibleIndex - 1);\n            } else if (this.column.visibleIndex === 0) {\n                eventArgs.preventDefault();\n            }\n        } else {\n            if (this.column.visibleIndex === this.filteringService.grid.columnList.length - 1) {\n                if (this.currentTemplate === this.defaultFilter) {\n                    if (this.isMoreIconVisible() === false) {\n                        if (this.moreIcon.nativeElement === document.activeElement) {\n                            this.navService.goToFirstCell();\n                        }\n                    } else if (this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__item`) ===\n                               document.activeElement) {\n                        this.navService.goToFirstCell();\n                    }\n                } else {\n                    this.navService.goToFirstCell();\n                }\n            } else if (!this.navService.isColumnFullyVisible(this.column.visibleIndex + 1)) {\n                eventArgs.preventDefault();\n                this.filteringService.grid.headerContainer.scrollTo(this.column.visibleIndex + 1);\n            }\n        }\n\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * Returns the chip to be focused.\n     */\n    public getChipToFocus() {\n        return this.filteringService.columnToChipToFocus.get(this.column.field);\n    }\n\n    /**\n     * Updates the filtering cell area.\n     */\n    public updateFilterCellArea() {\n        this.expressionsList = this.filteringService.getExpressions(this.column.field);\n        this.updateVisibleFilters();\n    }\n\n    get template(): TemplateRef<any> {\n        if (!this.column.filterable) {\n            this.currentTemplate = null;\n            return null;\n        }\n\n        const expressionTree = this.column.filteringExpressionsTree;\n        if (!expressionTree || expressionTree.filteringOperands.length === 0) {\n            this.currentTemplate = this.emptyFilter;\n            return this.emptyFilter;\n        }\n\n        if (this.filteringService.isFilterComplex(this.column.field)) {\n            this.currentTemplate = this.complexFilter;\n            return this.complexFilter;\n        }\n\n        this.currentTemplate = this.defaultFilter;\n        return this.defaultFilter;\n    }\n\n    /**\n     * Chip clicked event handler.\n     */\n    public onChipClicked(expression?: IFilteringExpression) {\n        if (expression) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = (item.expression === expression);\n            });\n        } else if (this.expressionsList.length > 0) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = false;\n            });\n            this.expressionsList[0].isSelected = true;\n        }\n\n        this.filteringService.filteredColumn = this.column;\n        this.filteringService.isFilterRowVisible = true;\n        this.filteringService.selectedExpression = expression;\n    }\n\n    /**\n     * Chip removed event handler.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove);\n    }\n\n    /**\n     * Clears the filtering.\n     */\n    public clearFiltering(): void {\n        this.filteringService.clearFilter(this.column.field);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Chip keydown event handler.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, expression?: IFilteringExpression) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.onChipClicked(expression);\n        }\n    }\n\n    /**\n     * Returns the filtering indicator class.\n     */\n    public filteringIndicatorClass() {\n        return {\n            [this.baseClass]: !this.isMoreIconVisible(),\n            [`${this.baseClass}--hidden`]: this.isMoreIconVisible()\n        };\n    }\n\n    /**\n     * Focus a chip depending on the current visible template.\n     */\n    public focusChip() {\n        if (this.currentTemplate === this.defaultFilter) {\n            if (this.isMoreIconVisible() === false) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n            }\n        } else if (this.currentTemplate === this.emptyFilter) {\n            this.ghostChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else if (this.currentTemplate === this.complexFilter) {\n            this.complexChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        }\n    }\n\n    private removeExpression(indexToRemove: number) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.updateVisibleFilters();\n        this.filter();\n    }\n\n    private filter(): void {\n        this.rootExpressionsTree = this.filteringService.createSimpleFilteringTree(this.column.field);\n\n        this.filteringService.filter(this.column.field, this.rootExpressionsTree);\n    }\n\n    private isMoreIconVisible(): boolean {\n        return this.filteringService.columnToMoreIconHidden.get(this.column.field);\n    }\n\n    private updateVisibleFilters() {\n        this.visibleExpressionsList = cloneArray(this.expressionsList);\n\n        // TODO: revise the usage of this.cdr.detectChanges() here\n        this.cdr.detectChanges();\n\n        if (this.moreIcon) {\n            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n        }\n        if (this.chipsArea && this.expressionsList.length > 1) {\n            const areaWidth = this.chipsArea.element.nativeElement.offsetWidth;\n            let viewWidth = 0;\n            const chipsAreaElements = this.chipsArea.element.nativeElement.children;\n            let visibleChipsCount = 0;\n            const moreIconWidth = this.moreIcon.nativeElement.offsetWidth -\n            parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);\n\n            for (let index = 0; index < chipsAreaElements.length - 1; index++) {\n                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {\n                    viewWidth += chipsAreaElements[index].offsetWidth;\n                    if (index % 2 === 0) {\n                        visibleChipsCount++;\n                    } else {\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);\n                    }\n                } else {\n                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    } else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    }\n                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;\n                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);\n                    this.visibleExpressionsList.splice(visibleChipsCount);\n                    break;\n                }\n            }\n            this.cdr.detectChanges();\n        }\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ContentChildren,\n    ContentChild,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    IterableChangeRecord,\n    IterableDiffers,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    AfterViewChecked,\n    ViewContainerRef,\n    InjectionToken\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil, first } from 'rxjs/operators';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, isNavigationKey, mergeObjects, CancelableEventArgs } from '../core/utils';\nimport { DataType, DataUtil } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IGroupByExpandState } from '../data-operations/groupby-expand-state.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IForOfState, IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { IgxBaseExporter, IgxExporterOptionsBase, AbsoluteScrollStrategy, HorizontalAlignment, VerticalAlignment } from '../services/index';\nimport { IgxCheckboxComponent } from './../checkbox/checkbox.component';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './column-hiding-item.directive';\nimport { IgxColumnComponent } from './column.component';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../chips/chips-area.component';\nimport { ISummaryExpression } from './grid-summary';\nimport { DropPosition, ContainerPositioningStrategy } from './grid.common';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionType, TransactionService, State } from '../services/index';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditTabStopDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditActionsDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { DisplayDensity } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\n\nconst MINIMUM_COLUMN_WIDTH = 136;\n\nexport const IgxGridTransaction = new InjectionToken<string>('IgxGridTransaction');\n\nexport interface IGridCellEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n}\n\nexport interface IGridEditEventArgs extends CancelableEventArgs {\n    rowID: any;\n    cellID?: {\n        rowID: any,\n        columnID: any,\n        rowIndex: number\n    };\n    oldValue: any;\n    newValue?: any;\n    event?: Event;\n}\n\nexport interface IPinColumnEventArgs {\n    column: IgxColumnComponent;\n    insertAtIndex: number;\n}\n\nexport interface IPageEventArgs {\n    previous: number;\n    current: number;\n}\n\nexport interface IRowDataEventArgs {\n    data: any;\n}\n\nexport interface IColumnResizeEventArgs {\n    column: IgxColumnComponent;\n    prevWidth: string;\n    newWidth: string;\n}\n\nexport interface IRowSelectionEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    row?: IgxRowComponent<IgxGridBaseComponent>;\n    event?: Event;\n}\n\nexport interface ISearchInfo {\n    searchText: string;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n    activeMatchIndex: number;\n    matchInfoCache: any[];\n}\n\nexport interface IGridToolbarExportEventArgs {\n    grid: IgxGridBaseComponent;\n    exporter: IgxBaseExporter;\n    options: IgxExporterOptionsBase;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingStartEventArgs {\n    source: IgxColumnComponent;\n}\n\nexport interface IColumnMovingEventArgs {\n    source: IgxColumnComponent;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingEndEventArgs {\n    source: IgxColumnComponent;\n    target: IgxColumnComponent;\n}\n\nexport interface IFocusChangeEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n    cancel: boolean;\n}\n\nexport abstract class IgxGridBaseComponent implements OnInit, OnDestroy, AfterContentInit, AfterViewInit {\n\n    /**\n     * An @Input property that lets you fill the `IgxGridComponent` with an array of data.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public data: any[];\n\n    /**\n     * An @Input property that autogenerates the `IgxGridComponent` columns.\n     * The default value is false.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public autoGenerate = false;\n\n    public abstract id: string;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is empty.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyGridTemplate: TemplateRef<any>;\n\n    @Input()\n    public get filteringLogic() {\n        return this._filteringExpressionsTree.operator;\n    }\n\n    /**\n     * Sets the filtering logic of the `IgxGridComponent`.\n     * The default is AND.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set filteringLogic(value: FilteringLogic) {\n        this._filteringExpressionsTree.operator = value;\n    }\n\n    /**\n     * Returns the filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let filteringExpressionsTree = this.grid.filteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get filteringExpressionsTree() {\n        return this._filteringExpressionsTree;\n    }\n\n    /**\n     * Sets the filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And, \"ID\");\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     }\n     * ];\n     * this.grid.filteringExpressionsTree = (logic);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            const val = (value as FilteringExpressionsTree);\n            for (let index = 0; index < val.filteringOperands.length; index++) {\n                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {\n                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);\n                    newExpressionsTree.filteringOperands.push(val.filteringOperands[index] as IFilteringExpression);\n                    val.filteringOperands[index] = newExpressionsTree;\n                }\n            }\n\n            // clone the filtering expression tree in order to trigger the filtering pipe\n            const filteringExpressionTreeClone = new FilteringExpressionsTree(value.operator, value.fieldName);\n            filteringExpressionTreeClone.filteringOperands = value.filteringOperands;\n            this._filteringExpressionsTree = filteringExpressionTreeClone;\n\n            this.filteringService.refreshExpressions();\n            this.clearSummaryCache();\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n\n        this.restoreHighlight();\n    }\n\n    /**\n     * @hidden\n     */\n    protected collapsedHighlightedItem: any = null;\n\n    /**\n     * Returns whether the paging feature is enabled/disabled.\n     * The default state is disabled (false).\n     * ```\n     * const paging = this.grid.paging;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get paging(): boolean {\n        return this._paging;\n    }\n\n    /**\n     * Enables/Disables the paging feature.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set paging(value: boolean) {\n        this._paging = value;\n        this._pipeTrigger++;\n\n        if (this._ngAfterViewInitPaassed) {\n            this.cdr.detectChanges();\n            this.calculateGridHeight();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * Returns the current page index.\n     * ```html\n     * let gridPage = this.grid.page;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get page(): number {\n        return this._page;\n    }\n\n    /**\n     * Sets the current page index.\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [page]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     */\n    set page(val: number) {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.onPagingDone.emit({ previous: this._page, current: val });\n        this._page = val;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns the number of visible items per page of the `IgxGridComponent`.\n     * The default is 15.\n     * ```html\n     * let itemsPerPage = this.grid.perPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    /**\n     * Sets the number of visible items per page of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [perPage]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set perPage(val: number) {\n        if (val < 0) {\n            return;\n        }\n\n        this._perPage = val;\n        this.page = 0;\n        this.endEdit(true);\n        this.restoreHighlight();\n    }\n\n    /**\n     * You can provide a custom `ng-template` for the pagination UI of the grid.\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public paginationTemplate: TemplateRef<any>;\n\n    /**\n     * Return the display density currently applied to the grid.\n     * The default value is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let gridTheme = this.grid.displayDensity;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity;\n    }\n\n    /**\n     * Sets the display density currently applied to the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [displayDensity]=\"'compact'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        switch (val) {\n            case 'compact':\n                this._displayDensity = DisplayDensity.compact;\n                break;\n            case 'cosy':\n                this._displayDensity = DisplayDensity.cosy;\n                break;\n            case 'comfortable':\n            default:\n                this._displayDensity = DisplayDensity.comfortable;\n        }\n\n        this.onDensityChanged.emit();\n    }\n\n    /**\n     * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * By default it is disabled (false).\n     * ```typescript\n     * let gridColHiding = this.grid.columnHiding;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get columnHiding() {\n        return this._columnHiding;\n    }\n\n    /**\n     * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnHiding(value) {\n        if (this._columnHiding !== value) {\n            this._columnHiding = value;\n            if (this.gridAPI.get(this.id)) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPaassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets whether the `IgxGridRowComponent` selection is enabled.\n     * By default it is set to false.\n     * ```typescript\n     * let rowSelectable = this.grid.rowSelectable;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get rowSelectable(): boolean {\n        return this._rowSelection;\n    }\n\n    /**\n     * Sets whether rows can be selected.\n     * ```html\n     * <igx-grid #grid [showToolbar]=\"true\" [rowSelectable]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowSelectable(val: boolean) {\n        this._rowSelection = val;\n        if (this.gridAPI.get(this.id)) {\n\n            // should selection persist?\n            this.allRowsSelected = false;\n            this.deselectAllRows();\n            this.markForCheck();\n        }\n    }\n\n    /**\n * Sets whether the `IgxGridRowComponent` is editable.\n * By default it is set to false.\n * ```typescript\n * let rowEditable = this.grid.rowEditable;\n * ```\n * @memberof IgxGridBaseComponent\n */\n    @Input()\n    get rowEditable(): boolean {\n        return this._rowEditable;\n    }\n    /**\n    * Sets whether rows can be edited.\n    * ```html\n    * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [columnHiding]=\"true\"></igx-grid>\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    set rowEditable(val: boolean) {\n        this._rowEditable = val;\n        this.refreshGridState();\n    }\n\n    /**\n     * Returns the height of the `IgxGridComponent`.\n     * ```typescript\n     * let gridHeight = this.grid.height;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @HostBinding('style.height')\n    @Input()\n    public get height() {\n        return this._height;\n    }\n\n    /**\n     * Sets the height of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set height(value: string) {\n        if (this._height !== value) {\n            this._height = value;\n            requestAnimationFrame(() => {\n                this.calculateGridHeight();\n                this.cdr.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * Returns the width of the `IgxGridComponent`.\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @HostBinding('style.width')\n    @Input()\n    public get width() {\n        return this._width;\n    }\n\n    /**\n     * Sets the width of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [width]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set width(value: string) {\n        if (this._width !== value) {\n            this._width = value;\n            requestAnimationFrame(() => {\n                // Calling reflow(), because the width calculation\n                // might make the horizontal scrollbar appear/disappear.\n                // This will change the height, which should be recalculated.\n                this.reflow();\n            });\n        }\n    }\n\n    /**\n     * Returns the width of the header of the `IgxGridComponent`.\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerWidth() {\n        return parseInt(this._width, 10) - 17;\n    }\n\n    /**\n     * An @Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public evenRowCSS = 'igx-grid__tr--even';\n\n    /**\n     * An @Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public oddRowCSS = 'igx-grid__tr--odd';\n\n    /**\n     * Returns the row height.\n     * ```typescript\n     * const rowHeight = this.grid.rowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get rowHeight() {\n        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;\n    }\n\n    /**\n     * Sets the row height.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set rowHeight(value) {\n        this._rowHeight = parseInt(value, 10);\n    }\n\n    /**\n     * An @Input property that sets the default width of the `IgxGridComponent`'s columns.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get columnWidth(): string {\n        return this._columnWidth;\n    }\n    public set columnWidth(value: string) {\n        this._columnWidth = value;\n        this._columnWidthSetByUser = true;\n    }\n\n    /**\n     * An @Input property that sets the primary key of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"6\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public primaryKey;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyGridMessage = 'Grid has no data.';\n\n    /**\n     * An @Input property that sets the message displayed when there are no records and the grid is filtered.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyFilteredGridMessage = 'No records found.';\n\n    /**\n     * An @Input property that sets the title to be displayed in the built-in column hiding UI.\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnHidingTitle = '';\n\n    /**\n     * Returns if the built-in column pinning UI should be shown in the toolbar.\n     * ```typescript\n     *  let colPinning = this.grid.columnPinning;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get columnPinning() {\n        return this._columnPinning;\n    }\n\n    /**\n     * Sets if the built-in column pinning UI should be shown in the toolbar.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnPinning(value) {\n        if (this._columnPinning !== value) {\n            this._columnPinning = value;\n            if (this.gridAPI.get(this.id)) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPaassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the UI of the column pinning.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnPinningTitle = '';\n\n    /**\n     * Returns if the filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowFiltering;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get allowFiltering() {\n        return this._allowFiltering;\n    }\n\n    /**\n     * Sets if the filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set allowFiltering(value) {\n        if (this._allowFiltering !== value) {\n            this._allowFiltering = value;\n            this.filteringService.registerSVGIcons();\n            if (this.gridAPI.get(this.id)) {\n                this.markForCheck();\n            }\n        }\n    }\n\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClick(e){\n     *     alert(\"The cell has been clicked!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellSelect(e){\n     *     alert(\"The cell has been selected!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onRowClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClickChange(e){\n     *     alert(\"The selected row has been changed!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowSelectionChange = new EventEmitter<IRowSelectionEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnPinning = new EventEmitter<IPinColumnEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent`\n     * editing has been performed in the grid and the values have **not** been submitted.\n     * On `IgxGridCellComponent` editing, both `IgxGridCellComponent` and `IgxGridRowComponent`\n     * objects in the event arguments are defined for the corresponding\n     * `IgxGridCellComponent` that is being edited and the `IgxGridRowComponent` the `IgxGridCellComponent` belongs to.\n     * ```typescript\n     * editCancel(event: IgxColumnComponent){\n     *    const column: IgxColumnComponent = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` enters edit mode.\n     * On `IgxGridCellComponent` editing, both `IgxGridCellComponent` and `IgxGridRowComponent`\n     * objects in the event arguments are defined for the corresponding\n     * `IgxGridCellComponent` that is being edited and the `IgxGridRowComponent` the `IgxGridCellComponent` belongs to.\n     * ```typescript\n     * editStart(event: IgxColumnComponent){\n     *    const column: IgxColumnComponent = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.\n     * On `IgxGridCellComponent` editing, both `IgxGridCellComponent` and `IgxGridRowComponent`\n     * objects in the event arguments are defined for the corresponding\n     * `IgxGridCellComponent` that is being edited and the `IgxGridRowComponent` the `IgxGridCellComponent` belongs to.\n     * ```typescript\n     * editDone(event: IgxColumnComponent){\n     *    const column: IgxColumnComponent = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" a row enters edit mode.\n     *\n     * Emits the current row and it's state.\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editStart(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const editedRow = emitted.row;\n     *          const cancelValue = emitted.newValue;\n     *          const oldValue = emitted.oldValue;\n     *      }\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onRowEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing data operations (filtering, sorting, etc.) while editing a row, hitting the `Commit`\n     * button inside of the rowEditingOverlay or hitting the `Enter` key while editing a cell.\n     *\n     * Emits the current row and it's state.\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editDone(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const editedRow = emitted.row;\n     *          const newValue = emitted.newValue;\n     *          const oldValue = emitted.oldValue;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     *\n     * Emits the current row and it's state.\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const editedRow = emitted.row;\n     *          const cancelValue = emitted.newValue;\n     *          const oldValue = emitted.oldValue;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when a grid column is initialized. Returns the column object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"</igx-grid>\n     * ```\n     * ```typescript\n     * initColumns(event: IgxColumnComponent) {\n     * const column: IgxColumnComponent = event;\n     *       column.filterable = true;\n     *       column.sortable = true;\n     *       column.editable = true;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnInit = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * Emitted when sorting is performed through the UI. Returns the sorting expression.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * sortingDone(event: SortingDirection){\n     *     const sortingDirection = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSortingDone = new EventEmitter<ISortingExpression>();\n\n    /**\n     * Emitted when filtering is performed through the UI.\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * ```typescript\n     * filteringDone(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     *}\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onFilteringDone = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.\n     * ```typescript\n     * pagingDone(event: IPageEventArgs){\n     *     const paging = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onPagingDone = new EventEmitter<IPageEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * ```typescript\n     * rowAdded(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowAdded = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.\n     * Returns an `IRowDataEventArgs` object.\n     * ```typescript\n     * rowDeleted(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowDeleted = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is resized.\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * ```typescript\n     * resizing(event: IColumnResizeEventArgs){\n     *     const grouping = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnResized = new EventEmitter<IColumnResizeEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * contextMenu(event: IGridCellEventArgs){\n     *     const resizing = event;\n     *     console.log(resizing);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onContextMenu = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * dblClick(event: IGridCellEventArgs){\n     *     const dblClick = event;\n     *     console.log(dblClick);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDoubleClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }\n     * ```typescript\n     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){\n     *    const visiblity = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.\n     * ```typescript\n     * movingStart(event: IColumnMovingStartEventArgs){\n     *     const movingStarts = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingStart = new EventEmitter<IColumnMovingStartEventArgs>();\n\n    /**\n     * Emitted throughout the `IgxColumnComponent` moving operation.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * moving(event: IColumnMovingEventArgs){\n     *     const moving = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMoving = new EventEmitter<IColumnMovingEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving ends.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * movingEnds(event: IColumnMovingEndEventArgs){\n     *     const movingEnds = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingEnd = new EventEmitter<IColumnMovingEndEventArgs>();\n\n    @Output()\n    public onFocusChange = new EventEmitter<IFocusChangeEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    protected onDensityChanged = new EventEmitter<any>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })\n    public columnList: QueryList<IgxColumnComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxGridHeaderComponent, { read: IgxGridHeaderComponent })\n    public headerList: QueryList<IgxGridHeaderComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxGridFilteringCellComponent, { read: IgxGridFilteringCellComponent })\n    public filterCellList: QueryList<IgxGridFilteringCellComponent>;\n\n    @ViewChildren('row')\n    private _rowList: QueryList<IgxGridRowComponent>;\n\n    /**\n     * A list of `IgxGridRowComponent`.\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get rowList() {\n        const res = new QueryList<any>();\n        if (!this._rowList) {\n            return res;\n        }\n        const rList = this._rowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    @ViewChildren(IgxRowComponent, { read: IgxRowComponent })\n    private _dataRowList: QueryList<any>;\n\n    /**\n     * A list of `IgxGridRowComponent`, currently rendered.\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get dataRowList() {\n        const res = new QueryList<any>();\n        if (!this._dataRowList) {\n            return res;\n        }\n        const rList = this._dataRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * A template reference for the template when the filtered `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('emptyFilteredGrid', { read: TemplateRef })\n    public emptyFilteredGridTemplate: TemplateRef<any>;\n\n    /**\n     * A template reference for the template when the `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('defaultEmptyGrid', { read: TemplateRef })\n    public emptyGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scrollContainer', { read: IgxGridForOfDirective })\n    public parentVirtDir: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective })\n    public verticalScrollContainer: IgxGridForOfDirective<any>;\n\n    @ViewChild('summaryContainer', { read: IgxGridForOfDirective })\n    protected summaryContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scr', { read: ElementRef })\n    public scr: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('paginator', { read: ElementRef })\n    public paginator: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { read: IgxGridForOfDirective })\n    public headerContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckboxContainer')\n    public headerCheckboxContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerGroupContainer')\n    public headerGroupContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckbox', { read: IgxCheckboxComponent })\n    public headerCheckbox: IgxCheckboxComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('theadRow')\n    public theadRow: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tbody')\n    public tbody: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tfoot')\n    public tfoot: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('summaries')\n    public summaries: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective })\n    public outletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective })\n    private rowEditingOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRowEditTemplate', { read: TemplateRef })\n    private defaultRowEditTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef })\n    public rowEditCustom: TemplateRef<any>;\n\n    /** @hidden */\n    public get rowEditContainer(): TemplateRef<any> {\n        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;\n    }\n    /** @hidden */\n    @ContentChild(IgxRowEditTextDirective, { read: TemplateRef })\n    public rowEditText: TemplateRef<any>;\n    /** @hidden */\n    @ContentChild(IgxRowEditActionsDirective, { read: TemplateRef })\n    public rowEditActions: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get rowInEditMode(): IgxRowComponent<IgxGridBaseComponent> {\n        const editRowState = this.gridAPI.get_edit_row_state(this.id);\n        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.rowID) : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get firstEditableColumnIndex(): number {\n        const index = [...this.pinnedColumns, ...this.unpinnedColumns].filter(e => !e.columnGroup).findIndex(e => e.editable);\n        return index !== -1 ? index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get lastEditableColumnIndex(): number {\n        const orderedColumns = [...this.pinnedColumns, ...this.unpinnedColumns].filter(e => !e.columnGroup);\n        const index = orderedColumns.reverse().findIndex(e => e.editable);\n        return index !== -1 ? orderedColumns.length - 1 - index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    public get rowEditTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective)\n    public rowEditingOverlay: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        switch (this._displayDensity) {\n            case DisplayDensity.cosy:\n                return 'igx-grid--cosy';\n            case DisplayDensity.compact:\n                return 'igx-grid--compact';\n            default:\n                return 'igx-grid';\n        }\n    }\n\n    get bannerClass(): string {\n        let bannerClass = '';\n        switch (this._displayDensity) {\n            case DisplayDensity.cosy:\n                bannerClass = 'igx-banner--cosy';\n                break;\n            case DisplayDensity.compact:\n                bannerClass = 'igx-banner--compact';\n                break;\n            default:\n                bannerClass = 'igx-banner';\n        }\n        bannerClass += this.rowEditPositioningStrategy.isTop ? ' igx-banner__border-top' : ' igx-banner__border-bottom';\n        return bannerClass;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public hostRole = 'grid';\n\n    /**\n     * @hidden\n     */\n    get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * Returns the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * const sortingState = this.grid.sortingExpressions;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get sortingExpressions() {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * Sets the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.sortingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Desc,\n     *     ignoreCase: true\n     * }];\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set sortingExpressions(value) {\n        this._sortingExpressions = cloneArray(value);\n        this.cdr.markForCheck();\n\n        this.restoreHighlight();\n    }\n\n    /**\n     * Returns the state of the grid virtualization, including the start index and how many records are rendered.\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get virtualizationState() {\n        return this.verticalScrollContainer.state;\n    }\n\n    /**\n     * @hidden\n     */\n    set virtualizationState(state) {\n        this.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * Returns the total number of records in the data source.\n     * Works only with remote grid virtualization.\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    /**\n     * Sets the total number of records in the data source.\n     * This property is required for virtualization to function when the grid is bound remotely.\n     * ```typescript\n     * this.grid1.totalItemCount = 55;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Returns the number of hidden `IgxColumnComponent`.\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount() {\n        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const hiddenColText = this.grid.hiddenColumnsText;\n     * ``\n     */\n    @Input()\n    get hiddenColumnsText() {\n        return this._hiddenColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set hiddenColumnsText(value) {\n        this._hiddenColumnsText = value;\n\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const pinnedText = this.grid.pinnedColumnsText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get pinnedColumnsText() {\n        return this._pinnedColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set pinnedColumnsText(value) {\n        this._pinnedColumnsText = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden\n    */\n    public columnsWithNoSetWidths = null;\n\n    /* Toolbar related definitions */\n    private _showToolbar = false;\n    private _exportExcel = false;\n    private _exportCsv = false;\n    private _toolbarTitle: string = null;\n    private _exportText: string = null;\n    private _exportExcelText: string = null;\n    private _exportCsvText: string = null;\n    private _rowEditable = false;\n    private _currentRowState: any;\n    /**\n     * @hidden\n    */\n    public get currentRowState(): any {\n        return this._currentRowState;\n    }\n\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('toolbar', { read: IgxGridToolbarComponent })\n    public toolbar: IgxGridToolbarComponent = null;\n\n    @ViewChild('toolbar', { read: ElementRef })\n    private toolbarHtml: ElementRef = null;\n\n    public get shouldShowToolbar(): boolean {\n        return this.showToolbar &&\n            (this.columnHiding ||\n                this.columnPinning ||\n                this.exportExcel ||\n                this.exportCsv ||\n                (this.toolbarTitle && this.toolbarTitle !== null && this.toolbarTitle !== ''));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.\n     * ```typescript\n     * const toolbarGrid = this.grid.showToolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get showToolbar(): boolean {\n        return this._showToolbar;\n    }\n\n    /**\n     * Shows or hides the `IgxGridComponent`'s toolbar.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set showToolbar(newValue: boolean) {\n        if (this._showToolbar !== newValue) {\n            this._showToolbar = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the toolbar's title.\n     * ```typescript\n     * const toolbarTitle  = this.grid.toolbarTitle;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get toolbarTitle(): string {\n        return this._toolbarTitle;\n    }\n\n    /**\n     * Sets the toolbar's title.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set toolbarTitle(newValue: string) {\n        if (this._toolbarTitle !== newValue) {\n            this._toolbarTitle = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to MS Excel is enabled or disabled.\n     * ```typescript\n     * cosnt excelExporter = this.grid.exportExcel;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get exportExcel(): boolean {\n        return this.getExportExcel();\n    }\n\n    /**\n     * Enable or disable the option for exporting to MS Excel.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcel(newValue: boolean) {\n        if (this._exportExcel !== newValue) {\n            this._exportExcel = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to CSV is enabled or disabled.\n     * ```typescript\n     * const exportCsv = this.grid.exportCsv;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get exportCsv(): boolean {\n        return this.getExportCsv();\n    }\n\n    /**\n     * Enable or disable the option for exporting to CSV.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsv(newValue: boolean) {\n        if (this._exportCsv !== newValue) {\n            this._exportCsv = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the main export button.\n     * ```typescript\n     * const exportText = this.grid.exportText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get exportText(): string {\n        return this._exportText;\n    }\n\n    /**\n     * Sets the textual content for the main export button.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportText(newValue: string) {\n        if (this._exportText !== newValue) {\n            this._exportText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the MS Excel export button.\n     * ```typescript\n     * const excelText = this.grid.exportExcelText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get exportExcelText(): string {\n        return this._exportExcelText;\n    }\n\n    /**\n     * Sets the textual content for the MS Excel export button.\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcelText(newValue: string) {\n        if (this._exportExcelText !== newValue) {\n            this._exportExcelText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the CSV export button.\n     * ```typescript\n     * const csvText = this.grid.exportCsvText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public get exportCsvText(): string {\n        return this._exportCsvText;\n    }\n\n    /**\n     * Sets the textual content for the CSV export button.\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsvText(newValue: string) {\n        if (this._exportCsvText !== newValue) {\n            this._exportCsvText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPaassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public rowEditMessage;\n\n    /**\n     * Emitted when an export process is initiated by the user.\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onToolbarExporting = new EventEmitter<IGridToolbarExportEventArgs>();\n\n    /* End of toolbar related definitions */\n\n    /**\n     * @hidden\n     */\n    public pagingState;\n    /**\n     * @hidden\n     */\n    public calcWidth: number;\n    /**\n     * @hidden\n     */\n    public calcRowCheckboxWidth: number;\n    /**\n     * @hidden\n     */\n    public calcHeight: number;\n    /**\n     * @hidden\n     */\n    public tfootHeight: number;\n    /**\n     * @hidden\n     */\n    public chipsGoupingExpressions = [];\n    /**\n     * @hidden\n     */\n    public summariesHeight: number;\n\n    /**\n     * @hidden\n     */\n    public draggedColumn: IgxColumnComponent;\n    /**\n     * @hidden\n     */\n    public isColumnResizing: boolean;\n    /**\n     * @hidden\n     */\n    public isColumnMoving: boolean;\n\n    /**\n     * @hidden\n     */\n    public eventBus = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public allRowsSelected = false;\n\n    /**\n     * @hidden\n     */\n    public lastSearchInfo: ISearchInfo = {\n        searchText: '',\n        caseSensitive: false,\n        exactMatch: false,\n        activeMatchIndex: 0,\n        matchInfoCache: []\n    };\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    protected _perPage = 15;\n    /**\n     * @hidden\n     */\n    protected _page = 0;\n    /**\n     * @hidden\n     */\n    protected _paging = false;\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression> = [];\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth = null;\n    /**\n     * @hidden\n     */\n    protected _columnHiding = false;\n    /**\n     * @hidden\n     */\n    protected _columnPinning = false;\n    protected _allowFiltering = false;\n    private _filteredData = null;\n    private resizeHandler;\n    private columnListDiffer;\n    private _hiddenColumnsText = '';\n    private _pinnedColumnsText = '';\n    private _height = '100%';\n    private _width = '100%';\n    private _rowHeight;\n    private _displayDensity = DisplayDensity.comfortable;\n    private _ngAfterViewInitPaassed = false;\n    private _horizontalForOfs;\n\n    private _columnWidth: string;\n    private _columnWidthSetByUser = false;\n\n    private _defaultTargetRecordNumber = 10;\n\n    private rowEditPositioningStrategy = new ContainerPositioningStrategy({\n        horizontalDirection: HorizontalAlignment.Left,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalStartPoint: VerticalAlignment.Bottom,\n        closeAnimation: null\n    });\n\n    private rowEditSettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        outlet: this.rowEditingOutletDirective,\n        positionStrategy: this.rowEditPositioningStrategy\n    };\n\n    private verticalScrollHandler(event) {\n        this.verticalScrollContainer.onScroll(event);\n        this.zone.run(() => {\n            this.cdr.detectChanges();\n            this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);\n            if (this.rowEditable) {\n                this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);\n            }\n        });\n    }\n\n    private horizontalScrollHandler(event) {\n        const scrollLeft = event.target.scrollLeft;\n\n        this.headerContainer.onHScroll(scrollLeft);\n        this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));\n        if (this.summaryContainer) {\n            this.summaryContainer.onHScroll(scrollLeft);\n        }\n        this.zone.run(() => {\n            this.cdr.detectChanges();\n            this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);\n        });\n    }\n\n    private keydownHandler(event) {\n        const key = event.key.toLowerCase();\n        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {\n            event.preventDefault();\n            if (key === 'pagedown') {\n                this.verticalScrollContainer.scrollNextPage();\n                this.nativeElement.focus();\n            } else if (key === 'pageup') {\n                this.verticalScrollContainer.scrollPrevPage();\n                this.nativeElement.focus();\n            }\n        }\n    }\n\n    constructor(\n        private gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        public selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: TransactionService<Transaction, State>,\n        private elementRef: ElementRef,\n        private zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        public cdr: ChangeDetectorRef,\n        private resolver: ComponentFactoryResolver,\n        protected differs: IterableDiffers,\n        private viewRef: ViewContainerRef,\n        private navigation: IgxGridNavigationService,\n        public filteringService: IgxFilteringService) {\n        this.resizeHandler = () => {\n            this.calculateGridSizes();\n            this.zone.run(() => this.markForCheck());\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.gridAPI.register(this);\n        this.navigation.grid = this;\n        this.filteringService.gridId = this.id;\n        this.columnListDiffer = this.differs.find([]).create(null);\n        this.calcWidth = this._width && this._width.indexOf('%') === -1 ? parseInt(this._width, 10) : 0;\n        this.calcHeight = 0;\n        this.calcRowCheckboxWidth = 0;\n\n        this.onRowAdded.pipe(takeUntil(this.destroy$)).subscribe(() => this.refreshGridState());\n        this.onRowDeleted.pipe(takeUntil(this.destroy$)).subscribe(() => this.refreshGridState());\n        this.onFilteringDone.pipe(takeUntil(this.destroy$)).subscribe(() => this.refreshGridState());\n        this.onCellEdit.pipe(takeUntil(this.destroy$)).subscribe((editCell) => this.clearSummaryCache(editCell));\n        this.onRowEdit.pipe(takeUntil(this.destroy$)).subscribe(() => this.clearSummaryCache());\n        this.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.endEdit(true);\n        });\n        this.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe(() => this.endEdit(true));\n        this.onPagingDone.pipe(takeUntil(this.destroy$)).subscribe(() => this.endEdit(true));\n        this.onSortingDone.pipe(takeUntil(this.destroy$)).subscribe(() => this.endEdit(true));\n        this.transactions.onStateUpdate.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.clearSummaryCache();\n            this._pipeTrigger++;\n            this.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.autoGenerate) {\n            this.autogenerateColumns();\n        }\n\n        this.initColumns(this.columnList, (col: IgxColumnComponent) => this.onColumnInit.emit(col));\n\n        this.columnListDiffer.diff(this.columnList);\n        this.clearSummaryCache();\n        this.summariesHeight = this.calcMaxSummaryHeight();\n        this._derivePossibleHeight();\n        this.markForCheck();\n\n        this.columnList.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxColumnComponent>) => {\n                const diff = this.columnListDiffer.diff(change);\n                if (diff) {\n\n                    this.initColumns(this.columnList);\n\n                    diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                        this.clearSummaryCache();\n                        this.calculateGridSizes();\n                        this.onColumnInit.emit(record.item);\n                    });\n\n                    diff.forEachRemovedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                        // Recalculate Summaries\n                        this.clearSummaryCache();\n                        this.calculateGridSizes();\n\n                        // Clear Filtering\n                        this.gridAPI.clear_filter(this.id, record.item.field);\n\n                        // Clear Sorting\n                        this.gridAPI.clear_sort(this.id, record.item.field);\n                    });\n                }\n                this.markForCheck();\n            });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.addEventListener('resize', this.resizeHandler);\n            this.nativeElement.addEventListener('keydown', this.keydownHandler.bind(this));\n        });\n        this.calculateGridWidth();\n        this.initPinning();\n        this.calculateGridSizes();\n        this.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            requestAnimationFrame(() => {\n                this.summariesHeight = 0;\n                this.reflow();\n                this.verticalScrollContainer.recalcUpdateSizes();\n            });\n        });\n        this._ngAfterViewInitPaassed = true;\n\n        // In some rare cases we get the AfterViewInit before the grid is added to the DOM\n        // and as a result we get 0 width and can't size ourselves properly.\n        // In order to prevent that add a mutation observer that watches if we have been added.\n        if (!this.calcWidth && this._width !== undefined) {\n            const config = { childList: true, subtree: true };\n            let observer: MutationObserver = null;\n            const callback = (mutationsList) => {\n                mutationsList.forEach((mutation) => {\n                    if (mutation.type === 'childList') {\n                        const addedNodes = new Array(...mutation.addedNodes);\n                        addedNodes.forEach((node) => {\n                            const added = this.checkIfGridIsAdded(node);\n                            if (added) {\n                                this.calculateGridWidth();\n                                observer.disconnect();\n                            }\n                        });\n                    }\n                });\n            };\n\n            observer = new MutationObserver(callback);\n            observer.observe(this.document.body, config);\n        }\n\n        this._dataRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(list =>\n            this._horizontalForOfs = list.toArray()\n                .filter(item => item.element.nativeElement.parentElement !== null)\n                .map(row => row.virtDirRow)\n        );\n\n        this.zone.runOutsideAngular(() =>\n            this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this.verticalScrollHandler.bind(this))\n        );\n\n        this.zone.runOutsideAngular(() =>\n            this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', this.horizontalScrollHandler.bind(this))\n        );\n        this._horizontalForOfs = this._dataRowList.map(row => row.virtDirRow);\n        const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n        vertScrDC.addEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.removeEventListener('resize', this.resizeHandler);\n            this.nativeElement.removeEventListener('keydown', this.keydownHandler);\n            this.verticalScrollContainer.getVerticalScroll().removeEventListener('scroll', this.verticalScrollHandler);\n            this.parentVirtDir.getHorizontalScroll().removeEventListener('scroll', this.horizontalScrollHandler);\n            const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n            vertScrDC.removeEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n        });\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.gridAPI.unset(this.id);\n    }\n\n    /**\n     * @hidden\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * Toggles the specified column's visibility.\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs) {\n        const col = this.getColumnByName(args.column.field);\n        col.hidden = args.newValue;\n        this.onColumnVisibilityChanged.emit(args);\n\n        this.markForCheck();\n    }\n\n    /**\n     * Returns the native element of the `IgxGridComponent`.\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get calcResizerHeight(): number {\n        if (this.hasSummarizedColumns) {\n            return this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight +\n                this.tfoot.nativeElement.clientHeight;\n        }\n        return this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;\n    }\n\n    /**\n     * Returns the `IgxGridComponent`'s rows height.\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultRowHeight(): number {\n        switch (this._displayDensity) {\n            case DisplayDensity.compact:\n                return 32;\n            case DisplayDensity.cosy:\n                return 40;\n            case DisplayDensity.comfortable:\n            default:\n                return 50;\n        }\n    }\n\n    /**\n     * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get calcPinnedContainerMaxWidth(): number {\n        return (this.calcWidth * 80) / 100;\n    }\n\n    /**\n     * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedAreaMinWidth(): number {\n        return (this.calcWidth * 20) / 100;\n    }\n\n    /**\n     * Returns the current width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedWidth() {\n        return this.getPinnedWidth();\n    }\n\n    /**\n     * Returns the current width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedWidth() {\n        return this.getUnpinnedWidth();\n    }\n\n    /**\n     * @hidden\n     */\n    get summariesMargin() {\n        return this.rowSelectable ? this.calcRowCheckboxWidth : 0;\n    }\n\n    /**\n     * Returns an array of `IgxColumnComponent`s.\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get columns(): IgxColumnComponent[] {\n        return this._columns;\n    }\n\n    /**\n     * Returns an array of the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this._pinnedColumns.filter((col) => !col.hidden);\n    }\n\n    /**\n     * Returns an array of unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this._unpinnedColumns.filter((col) => !col.hidden); // .sort((col1, col2) => col1.index - col2.index);\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public getColumnByName(name: string): IgxColumnComponent {\n        return this.columnList.find((col) => col.field === name);\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by index.\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByIndex(index: number): IgxRowComponent<IgxGridBaseComponent> {\n        return this.gridAPI.get_row_by_index(this.id, index);\n    }\n\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByKey(keyValue: any): IgxRowComponent<IgxGridBaseComponent> {\n        return this.gridAPI.get_row_by_key(this.id, keyValue);\n    }\n\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get visibleColumns(): IgxColumnComponent[] {\n        return this.columnList.filter((col) => !col.hidden);\n    }\n\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent {\n        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);\n        if (columnId !== -1) {\n            return this.gridAPI.get_cell_by_index(this.id, rowIndex, columnId);\n        }\n    }\n\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * Requires that the primaryKey property is set.\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_key(this.id, rowSelector, columnField);\n    }\n\n    /**\n     * Returns the total number of pages.\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalPages(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countPages;\n        }\n        return -1;\n    }\n\n    /**\n     * Returns the total number of records.\n     * Only functions when paging is enabled.\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalRecords(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countRecords;\n        }\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalWidth(): number {\n        // Take only top level columns\n        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);\n        let totalWidth = 0;\n        let i = 0;\n        for (i; i < cols.length; i++) {\n            totalWidth += parseInt(cols[i].width, 10) || 0;\n        }\n        return totalWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const list = this.columnList.toArray();\n        const fromIndex = list.indexOf(from);\n        let toIndex = list.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n            if (toIndex < 0) {\n                toIndex = 0;\n            }\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        let activeColumn = null;\n        let activeColumnIndex = -1;\n\n        if (this.lastSearchInfo.searchText) {\n            const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n            activeColumnIndex = activeInfo.columnIndex;\n\n            if (activeColumnIndex !== -1) {\n                activeColumn = list[activeColumnIndex];\n            }\n        }\n\n        list.splice(toIndex, 0, ...list.splice(fromIndex, 1));\n        const newList = this._resetColumnList(list);\n        this.columnList.reset(newList);\n        this.columnList.notifyOnChanges();\n        this._columns = this.columnList.toArray();\n\n        if (activeColumn !== null && activeColumn !== undefined) {\n            const newIndex = newList.indexOf(activeColumn);\n            IgxColumnComponent.updateHighlights(activeColumnIndex, newIndex, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?) {\n        if (!list) {\n            list = this.columnList.toArray();\n        }\n        let newList = [];\n        list.filter(c => c.level === 0).forEach(p => {\n            newList.push(p);\n            if (p.columnGroup) {\n                newList = newList.concat(p.allChildren);\n            }\n        });\n        return newList;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _reorderPinnedColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition) {\n        const pinned = this._pinnedColumns;\n        let dropIndex = pinned.indexOf(to);\n\n        if (position === DropPosition.BeforeDropTarget) {\n            dropIndex--;\n        }\n\n        if (position === DropPosition.AfterDropTarget) {\n            dropIndex++;\n        }\n\n        pinned.splice(dropIndex, 0, ...pinned.splice(pinned.indexOf(from), 1));\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const buffer = parent.children.toArray();\n        const fromIndex = buffer.indexOf(from);\n        let toIndex = buffer.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        buffer.splice(toIndex, 0, ...buffer.splice(fromIndex, 1));\n        parent.children.reset(buffer);\n    }\n    /**\n     * Moves a column to the specified drop target.\n     * ```typescript\n     * grid.moveColumn(compName, persDetails);\n     * ```\n\t  * @memberof IgxGridBaseComponent\n\t  */\n    public moveColumn(column: IgxColumnComponent, dropTarget: IgxColumnComponent, pos: DropPosition = DropPosition.None) {\n\n        let position = pos;\n        const fromIndex = column.visibleIndex;\n        const toIndex = dropTarget.visibleIndex;\n\n        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {\n            position = DropPosition.BeforeDropTarget;\n        } else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {\n            position = DropPosition.AfterDropTarget;\n        } else {\n            position = DropPosition.None;\n        }\n\n\n        if ((column.level !== dropTarget.level) ||\n            (column.topLevelParent !== dropTarget.topLevelParent)) {\n            return;\n        }\n\n        this.gridAPI.submit_value(this.id);\n        if (column.level) {\n            this._moveChildColumns(column.parent, column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && column.pinned) {\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && !column.pinned) {\n            column.pin();\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (!dropTarget.pinned && column.pinned) {\n            column.unpin();\n\n            const list = this.columnList.toArray();\n            const fi = list.indexOf(column);\n            const ti = list.indexOf(dropTarget);\n\n            if (pos === DropPosition.BeforeDropTarget && fi < ti) {\n                position = DropPosition.BeforeDropTarget;\n            } else if (pos === DropPosition.AfterDropTarget && fi > ti) {\n                position = DropPosition.AfterDropTarget;\n            } else {\n                position = DropPosition.None;\n            }\n        }\n\n        this._moveColumns(column, dropTarget, position);\n        this.cdr.detectChanges();\n\n        const args = {\n            source: column,\n            target: dropTarget\n        };\n\n        this.onColumnMovingEnd.emit(args);\n    }\n\n    /**\n     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n\n    /**\n     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxGridBaseComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.page = val;\n    }\n\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public markForCheck() {\n        if (this.rowList) {\n            this.rowList.forEach((row) => row.cdr.markForCheck());\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     * @memberof IgxGridBaseComponent\n     */\n    public addRow(data: any, parentID?: any): void {\n        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions\n        // If there is a row in edit - > commit and close\n        if (this.transactions.enabled) {\n            const transactionId = this.primaryKey ? data[this.primaryKey] : data;\n            const transaction: Transaction = { id: transactionId, type: TransactionType.ADD, newValue: data };\n            this.transactions.add(transaction);\n        } else {\n            this.data.push(data);\n        }\n\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.cdr.markForCheck();\n\n        this.refreshSearch();\n    }\n\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     * @memberof IgxGridBaseComponent\n     */\n    public deleteRow(rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            this.deleteRowById(rowSelector);\n        }\n    }\n\n    /**\n     * @hidden\n     * @param\n     */\n    public deleteRowById(rowId: any) {\n        let index: number;\n        const data = this.gridAPI.get_all_data(this.id);\n        if (this.primaryKey) {\n            index = data.map((record) => record[this.primaryKey]).indexOf(rowId);\n        } else {\n            index = data.indexOf(rowId);\n        }\n        const state: State = this.transactions.getState(rowId);\n        const hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;\n\n        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode\n        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above\n        //  Otherwise just exit - there is nothing to delete\n        if (index !== -1 || hasRowInNonDeletedState) {\n            const editableCell = this.gridAPI.get_cell_inEditMode(this.id);\n            if (editableCell && editableCell.cellID.rowID === rowId) {\n                this.gridAPI.escape_editMode(this.id, editableCell.cellID);\n            }\n        } else {\n            return;\n        }\n\n        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!\n        this.onRowDeleted.emit({ data: data[index] });\n\n        //  first deselect row then delete it\n        if (this.rowSelectable && this.selection.is_item_selected(this.id, rowId)) {\n            this.deselectRows([rowId]);\n        } else {\n            this.checkHeaderCheckboxStatus();\n        }\n\n        this.deleteRowFromData(rowId, index);\n        this._pipeTrigger++;\n        this.cdr.markForCheck();\n\n        this.refreshSearch();\n        if (data.length % this.perPage === 0 && this.isLastPage && this.page !== 0) {\n            this.page--;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        if (index !== -1) {\n            if (this.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                this.transactions.add(transaction, this.data[index]);\n            } else {\n                this.data.splice(index, 1);\n            }\n        } else {\n            const state: State = this.transactions.getState(rowID);\n            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     * @memberof IgxGridBaseComponent\n     */\n    public updateCell(value: any, rowSelector: any, column: string): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            const columnEdit = this.columnList.toArray().filter((col) => col.field === column);\n            if (columnEdit.length > 0) {\n                const columnId = this.columnList.toArray().indexOf(columnEdit[0]);\n                const editableCell = this.gridAPI.get_cell_inEditMode(this.id);\n                const gridEditState = this.gridAPI.create_grid_edit_args(this.id, rowSelector, columnId, value);\n                this.gridAPI.update_cell(this.id, rowSelector, columnId, value, gridEditState);\n                if (editableCell && editableCell.cellID.rowID === rowSelector &&\n                    editableCell.cellID.columnID === columnId) {\n                    if (gridEditState.args.cancel) {\n                        return;\n                    }\n                    this.gridAPI.escape_editMode(this.id, editableCell.cellID);\n                }\n                this.cdr.markForCheck();\n                this.refreshSearch();\n            }\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent`, which is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     * @memberof IgxGridBaseComponent\n     */\n    public updateRow(value: any, rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            const editableCell = this.gridAPI.get_cell_inEditMode(this.id);\n            if (editableCell && editableCell.cellID.rowID === rowSelector) {\n                this.gridAPI.escape_editMode(this.id, editableCell.cellID);\n            }\n            this.gridAPI.update_row(value, this.id, rowSelector);\n            this.cdr.markForCheck();\n            this.refreshSearch();\n        }\n    }\n\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public sort(expression: ISortingExpression | Array<ISortingExpression>): void;\n    public sort(...rest): void {\n        this.endEdit(false);\n        if (rest.length === 1 && rest[0] instanceof Array) {\n            this._sortMultiple(rest[0]);\n        } else {\n            this._sort(rest[0]);\n        }\n    }\n\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        const col = this.gridAPI.get_column_by_name(this.id, name);\n        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);\n\n        if (conditionOrExpressionTree) {\n            this.gridAPI.filter(this.id, name, value, conditionOrExpressionTree, filteringIgnoreCase);\n        } else {\n            const expressionsTreeForColumn = this._filteringExpressionsTree.find(name);\n            if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {\n                this.gridAPI.filter(this.id, name, value, expressionsTreeForColumn, filteringIgnoreCase);\n            } else {\n                const expressionForColumn = expressionsTreeForColumn as IFilteringExpression;\n                this.gridAPI.filter(this.id, name, value, expressionForColumn.condition, filteringIgnoreCase);\n            }\n        }\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filterGlobal(value: any, condition?, ignoreCase?) {\n        this.gridAPI.filter_global(this.id, value, condition, ignoreCase);\n    }\n\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     * @memberof IgxGridBaseComponent\n     */\n    public enableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._multipleSummaries(rest[0], true);\n        } else {\n            this._summaries(rest[0], true, rest[1]);\n        }\n        this.summariesHeight = 0;\n        this.markForCheck();\n        this.calculateGridHeight();\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Disable summaries for the specified column.\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     *\n     * Disable summaries for the listed columns.\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public disableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._disableMultipleSummaries(rest[0]);\n        } else {\n            this._summaries(rest[0], false);\n        }\n        this.summariesHeight = 0;\n        this.markForCheck();\n        this.calculateGridHeight();\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearFilter(name?: string) {\n        if (name) {\n            const column = this.gridAPI.get_column_by_name(this.id, name);\n            if (!column) {\n                return;\n            }\n        }\n\n        this.gridAPI.clear_filter(this.id, name);\n    }\n\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearSort(name?: string) {\n        if (!name) {\n            this.sortingExpressions = [];\n            return;\n        }\n        if (!this.gridAPI.get_column_by_name(this.id, name)) {\n            return;\n        }\n        this.gridAPI.clear_sort(this.id, name);\n    }\n\n    /**\n     * @hidden\n     */\n    public clearSummaryCache(editCell?) {\n        if (editCell && editCell.cell) {\n            this.gridAPI.remove_summary(this.id, editCell.cell.column.filed);\n        } else {\n            this.gridAPI.remove_summary(this.id);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshGridState(editCell?) {\n        this.endEdit(true);\n        this.clearSummaryCache(editCell);\n    }\n\n    // TODO: We have return values here. Move them to event args ??\n\n    /**\n     * Pins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public pinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.pin(index);\n    }\n\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public unpinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.unpin(index);\n    }\n\n\n    /**\n     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public reflow() {\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Recalculates grid summary area.\n     * Should be run for example when enabling or disabling summaries for a column.\n     * ```typescript\n     * this.grid.recalculateSummaries();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public recalculateSummaries() {\n        this.summariesHeight = 0;\n        requestAnimationFrame(() => this.calculateGridSizes());\n    }\n\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, 1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ````\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, -1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Reapplies the existing search.\n     * Returns how many times the grid contains the last search.\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     * @memberof IgxGridBaseComponent\n     */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        if (this.lastSearchInfo.searchText) {\n            this.rebuildMatchCache();\n\n            if (updateActiveInfo) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                    if (match.column === activeInfo.columnIndex &&\n                        match.row === activeInfo.rowIndex &&\n                        match.index === activeInfo.index &&\n                        match.page === activeInfo.page) {\n                        this.lastSearchInfo.activeMatchIndex = i;\n                    }\n                });\n            }\n\n            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Removes all the highlights in the cell.\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public clearSearch() {\n        this.lastSearchInfo = {\n            searchText: '',\n            caseSensitive: false,\n            exactMatch: false,\n            activeMatchIndex: 0,\n            matchInfoCache: []\n        };\n\n        this.rowList.forEach((row) => {\n            if (row.cells) {\n                row.cells.forEach((c) => {\n                    c.clearHighlight();\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSortableColumns(): boolean {\n        return this.columnList.some((col) => col.sortable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasEditableColumns(): boolean {\n        return this.columnList.some((col) => col.editable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasFilterableColumns(): boolean {\n        return this.columnList.some((col) => col.filterable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSummarizedColumns(): boolean {\n        const summarizedColumns = this.columnList.filter(col => col.hasSummary);\n        return summarizedColumns.length > 0 && summarizedColumns.some(col => !col.hidden);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasMovableColumns(): boolean {\n        return this.columnList && this.columnList.some((col) => col.movable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasColumnGroups(): boolean {\n        return this.columnList.some(col => col.columnGroup);\n    }\n\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[] {\n        if (this.dataRowList) {\n            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))\n                .reduce((a, b) => a.concat(b), []);\n        }\n        return [];\n    }\n\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight() {\n        if (this.data && this.data.length) {\n            return this.dataLength * this.rowHeight;\n        }\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _derivePossibleHeight() {\n        if ((this._height && this._height.indexOf('%') === -1) || !this._height) {\n            return;\n        }\n        if (!this.nativeElement.parentNode.clientHeight) {\n            const viewPortHeight = document.documentElement.clientHeight;\n            this._height = this.rowBasedHeight <= viewPortHeight ? null : viewPortHeight.toString();\n        } else {\n            const parentHeight = this.nativeElement.parentNode.getBoundingClientRect().height;\n            this._height = this.rowBasedHeight <= parentHeight ? null : this._height;\n        }\n        this.calculateGridHeight();\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    protected _derivePossibleWidth() {\n        if (!this._columnWidthSetByUser) {\n            this._columnWidth = this.getPossibleColumnWidth();\n            this.initColumns(this.columnList, null);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private get defaultTargetBodyHeight(): number {\n        const allItems = this.totalItemCount || this.dataLength;\n        return this.rowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridHeight() {\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n\n        // TODO: Calculate based on grid density\n        if (this.maxLevelHeaderDepth) {\n            this.theadRow.nativeElement.style.height = `${(this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +\n                (this.allowFiltering ? this._rowHeight : 0) + 1}px`;\n        }\n\n        if (!this._height) {\n            this.calcHeight = null;\n            if (this.hasSummarizedColumns && !this.summariesHeight) {\n                this.summariesHeight = this.summaries ?\n                    this.calcMaxSummaryHeight() : 0;\n            }\n            return;\n        }\n\n        let toolbarHeight = 0;\n        if (this.showToolbar && this.toolbarHtml != null) {\n            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?\n                this.toolbarHtml.nativeElement.offsetHeight : 0;\n        }\n\n        let pagingHeight = 0;\n        if (this.paging && this.paginator) {\n            pagingHeight = this.paginator.nativeElement.firstElementChild ?\n                this.paginator.nativeElement.offsetHeight : 0;\n        }\n\n        if (!this.summariesHeight) {\n            this.summariesHeight = this.summaries ?\n                this.calcMaxSummaryHeight() : 0;\n        }\n\n        const groupAreaHeight = this.getGroupAreaHeight();\n\n        if (this._height && this._height.indexOf('%') !== -1) {\n            /*height in %*/\n            this.calcHeight = this._calculateGridBodyHeight(\n                parseInt(computed.getPropertyValue('height'), 10), toolbarHeight, pagingHeight, groupAreaHeight);\n        } else {\n            this.calcHeight = this._calculateGridBodyHeight(\n                parseInt(this._height, 10), toolbarHeight, pagingHeight, groupAreaHeight);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight(gridHeight: number,\n        toolbarHeight: number, pagingHeight: number, groupAreaHeight: number) {\n        const footerBordersAndScrollbars = this.tfoot.nativeElement.offsetHeight -\n            this.tfoot.nativeElement.clientHeight;\n        if (isNaN(gridHeight)) {\n            return this.defaultTargetBodyHeight;\n        }\n\n        return Math.abs(gridHeight - toolbarHeight -\n            this.theadRow.nativeElement.offsetHeight -\n            this.summariesHeight - pagingHeight - groupAreaHeight -\n            footerBordersAndScrollbars -\n            this.scr.nativeElement.clientHeight);\n    }\n\n    /**\n     * @hidden\n     */\n    protected getPossibleColumnWidth() {\n        let computedWidth = parseInt(\n            this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n\n        if (this.rowSelectable) {\n            computedWidth -= this.headerCheckboxContainer.nativeElement.clientWidth;\n        }\n\n        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);\n\n        const columnsWithSetWidths = visibleChildColumns.filter(c => c.widthSetByUser);\n        const columnsToSize = visibleChildColumns.length - columnsWithSetWidths.length;\n\n        const sumExistingWidths = columnsWithSetWidths\n            .reduce((prev, curr) => prev + parseInt(curr.width, 10), 0);\n\n        const columnWidth = !Number.isFinite(sumExistingWidths) ?\n            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :\n            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH);\n\n        return columnWidth.toString();\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridWidth() {\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n\n        if (this._width && this._width.indexOf('%') !== -1) {\n            /* width in %*/\n            const width = parseInt(computed.getPropertyValue('width'), 10);\n            if (Number.isFinite(width) && width !== this.calcWidth) {\n                this.calcWidth = width;\n\n                this.cdr.markForCheck();\n            }\n        } else {\n            this.calcWidth = parseInt(this._width, 10);\n        }\n\n        this._derivePossibleWidth();\n    }\n\n    /**\n     * @hidden\n     */\n    protected calcMaxSummaryHeight() {\n        let maxSummaryLength = 0;\n        this.columnList.filter((col) => col.hasSummary && !col.hidden).forEach((column) => {\n            this.gridAPI.set_summary_by_column_name(this.id, column.field);\n            const getCurrentSummaryColumn = this.gridAPI.get_summaries(this.id).get(column.field);\n            if (getCurrentSummaryColumn) {\n                if (maxSummaryLength < getCurrentSummaryColumn.length) {\n                    maxSummaryLength = getCurrentSummaryColumn.length;\n                }\n            }\n        });\n        return maxSummaryLength * this.defaultRowHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes() {\n        this.calculateGridWidth();\n        this.cdr.detectChanges();\n        this.calculateGridHeight();\n        if (this.rowSelectable) {\n            this.calcRowCheckboxWidth = this.headerCheckboxContainer.nativeElement.clientWidth;\n        }\n        if (this.rowEditable) {\n            this.repositionRowEditingOverlay(this.rowInEditMode);\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;\n        let sum = 0;\n        for (const col of fc) {\n            if (col.level === 0) {\n                sum += parseInt(col.width, 10);\n            }\n        }\n        if (this.rowSelectable) {\n            sum += this.calcRowCheckboxWidth;\n        }\n\n        return sum;\n    }\n\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    protected getUnpinnedWidth(takeHidden = false) {\n        const width = this._width && this._width.indexOf('%') !== -1 ?\n            this.calcWidth :\n            parseInt(this._width, 10);\n        return width - this.getPinnedWidth(takeHidden);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _sort(expression: ISortingExpression) {\n        this.gridAPI.sort(this.id, expression.fieldName, expression.dir, expression.ignoreCase, expression.strategy);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _sortMultiple(expressions: ISortingExpression[]) {\n        this.gridAPI.sort_multiple(this.id, expressions);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any) {\n        const column = this.gridAPI.get_column_by_name(this.id, fieldName);\n        column.hasSummary = hasSummary;\n        if (summaryOperand) {\n            column.summaries = summaryOperand;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean) {\n        expressions.forEach((element) => {\n            this._summaries(element.fieldName, hasSummary, element.customSummary);\n        });\n    }\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions: string[]) {\n        expressions.forEach((column) => { this._summaries(column, false); });\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec) {\n        if (typeof rec === 'number') {\n            return DataType.Number;\n        } else if (typeof rec === 'boolean') {\n            return DataType.Boolean;\n        } else if (typeof rec === 'object' && rec instanceof Date) {\n            return DataType.Date;\n        }\n        return DataType.String;\n    }\n\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns() {\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const fields = Object.keys(this.data[0]);\n        const columns = [];\n\n        fields.forEach((field) => {\n            const ref = this.viewRef.createComponent(factory, null, this.viewRef.injector);\n            ref.instance.field = field;\n            ref.instance.dataType = this.resolveDataTypes(this.data[0][field]);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n\n        this.columnList.reset(columns);\n    }\n\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr) {\n        return arr.filter(c => c.level === 0);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        // XXX: Deprecate index\n        this._columns = this.columnList.toArray();\n        collection.forEach((column: IgxColumnComponent) => {\n            column.gridID = this.id;\n            column.defaultWidth = this.columnWidth;\n            this.setColumnEditState(column);\n\n            if (cb) {\n                cb(column);\n            }\n        });\n\n        this.reinitPinStates();\n    }\n\n    private setColumnEditState(column: IgxColumnComponent) {\n        // When rowEditable is true, then all columns, with defined field, excluding priamaryKey, are set to editable by default.\n        if (this.rowEditable && column.editable === null &&\n            column.field && column.field !== this.primaryKey) {\n            column.editable = this.rowEditable;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected reinitPinStates() {\n        if (this.hasColumnGroups) {\n            this._pinnedColumns = this.columnList.filter((c) => c.pinned);\n        }\n        this._unpinnedColumns = this.columnList.filter((c) => !c.pinned);\n    }\n\n    /**\n     * @hidden\n     */\n    public onHeaderCheckboxClick(event) {\n        this.allRowsSelected = event.checked;\n        const newSelection =\n            event.checked ?\n                this.filteredData ?\n                    this.selection.add_items(this.id, this.selection.get_all_ids(this._filteredData, this.primaryKey)) :\n                    this.selection.get_all_ids(this.dataWithAddedInTransactionRows, this.primaryKey) :\n                this.filteredData ?\n                    this.selection.delete_items(this.id, this.selection.get_all_ids(this._filteredData, this.primaryKey)) :\n                    this.selection.get_empty();\n        this.triggerRowSelectionChange(newSelection, null, event, event.checked);\n        this.checkHeaderCheckboxStatus(event.checked);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerCheckboxAriaLabel() {\n        return this._filteringExpressionsTree.filteringOperands.length > 0 ?\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all filtered' : 'Select all filtered' :\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all' : 'Select all';\n    }\n\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.data && this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public checkHeaderCheckboxStatus(headerStatus?: boolean) {\n        if (headerStatus === undefined) {\n            const dataLength = this.filteredData ? this.filteredData.length : this.dataLength;\n            this.allRowsSelected = this.selection.are_all_selected(this.id, dataLength);\n            if (this.headerCheckbox) {\n                this.headerCheckbox.indeterminate = !this.allRowsSelected && !this.selection.are_none_selected(this.id);\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.checked =\n                        this.allRowsSelected;\n                }\n            }\n            this.cdr.markForCheck();\n        } else if (this.headerCheckbox) {\n            this.headerCheckbox.checked = headerStatus !== undefined ? headerStatus : false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public filteredItemsStatus(componentID: string, filteredData: any[], primaryKey?) {\n        const currSelection = this.selection.get(componentID);\n        let atLeastOneSelected = false;\n        let notAllSelected = false;\n        if (currSelection) {\n            for (const key of Object.keys(filteredData)) {\n                const dataItem = primaryKey ? filteredData[key][primaryKey] : filteredData[key];\n                if (currSelection.has(dataItem)) {\n                    atLeastOneSelected = true;\n                    if (notAllSelected) {\n                        return 'indeterminate';\n                    }\n                } else {\n                    notAllSelected = true;\n                    if (atLeastOneSelected) {\n                        return 'indeterminate';\n                    }\n                }\n            }\n        }\n        return atLeastOneSelected ? 'allSelected' : 'noneSelected';\n    }\n\n    /**\n     * @hidden\n     */\n    public updateHeaderCheckboxStatusOnFilter(data) {\n        if (!data) {\n            this.checkHeaderCheckboxStatus();\n            return;\n        }\n        switch (this.filteredItemsStatus(this.id, data, this.primaryKey)) {\n            case 'allSelected': {\n                if (!this.allRowsSelected) {\n                    this.allRowsSelected = true;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            case 'noneSelected': {\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            default: {\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = true;\n                }\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                break;\n            }\n        }\n    }\n\n    /**\n     * Get current selection state.\n     * Returns an array with selected rows' IDs (primaryKey or rowData)\n     * ```typescript\n     * const selectedRows = this.grid.selectedRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectedRows(): any[] {\n        let selection: Set<any>;\n        selection = this.selection.get(this.id);\n        return selection ? Array.from(selection) : [];\n    }\n\n    /**\n     * Select specified rows by ID.\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     * @memberof IgxGridBaseComponent\n     */\n    public selectRows(rowIDs: any[], clearCurrentSelection?: boolean) {\n        let newSelection: Set<any>;\n        newSelection = this.selection.add_items(this.id, rowIDs, clearCurrentSelection);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Deselect specified rows by ID.\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     * @memberof IgxGridBaseComponent\n     */\n    public deselectRows(rowIDs: any[]) {\n        let newSelection: Set<any>;\n        newSelection = this.selection.delete_items(this.id, rowIDs);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Selects all rows\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * ```typescript\n     * this.grid.selectAllRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_all_ids(this.dataWithAddedInTransactionRows, this.primaryKey));\n    }\n\n    /**\n     * Deselects all rows\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     */\n    public deselectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_empty());\n    }\n\n    /**\n     * @hidden\n     */\n    public triggerRowSelectionChange(newSelectionAsSet: Set<any>, row?: IgxRowComponent<IgxGridBaseComponent>,\n        event?: Event, headerStatus?: boolean) {\n        const oldSelectionAsSet = this.selection.get(this.id);\n        const oldSelection = oldSelectionAsSet ? Array.from(oldSelectionAsSet) : [];\n        const newSelection = newSelectionAsSet ? Array.from(newSelectionAsSet) : [];\n        const args: IRowSelectionEventArgs = { oldSelection, newSelection, row, event };\n        this.onRowSelectionChange.emit(args);\n        newSelectionAsSet = this.selection.get_empty();\n        for (let i = 0; i < args.newSelection.length; i++) {\n            newSelectionAsSet.add(args.newSelection[i]);\n        }\n        this.selection.set(this.id, newSelectionAsSet);\n        this.checkHeaderCheckboxStatus(headerStatus);\n    }\n\n    /**\n     * @hidden\n     */\n    // @HostListener('scroll', ['$event'])\n    public scrollHandler(event) {\n        this.parentVirtDir.getHorizontalScroll().scrollLeft += event.target.scrollLeft;\n        this.verticalScrollContainer.getVerticalScroll().scrollTop += event.target.scrollTop;\n        event.target.scrollLeft = 0;\n        event.target.scrollTop = 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public wheelHandler() {\n        // tslint:disable-next-line:no-bitwise\n        if (document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS) {\n            (document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public trackColumnChanges(index, col) {\n        return col.field + col.width;\n    }\n\n    private find(text: string, increment: number, caseSensitive?: boolean, exactMatch?: boolean, scroll?: boolean) {\n        if (!this.rowList) {\n            return 0;\n        }\n\n        const editModeCell = this.gridAPI.get_cell_inEditMode(this.id);\n        if (editModeCell) {\n            this.endEdit(false);\n        }\n\n        if (this.collapsedHighlightedItem) {\n            this.collapsedHighlightedItem = null;\n        }\n\n        if (!text) {\n            this.clearSearch();\n            return 0;\n        }\n\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n        let rebuildCache = false;\n\n        if (this.lastSearchInfo.searchText !== text ||\n            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||\n            this.lastSearchInfo.exactMatch !== exactMatchResolved) {\n            this.lastSearchInfo = {\n                searchText: text,\n                activeMatchIndex: 0,\n                caseSensitive: caseSensitiveResolved,\n                exactMatch: exactMatchResolved,\n                matchInfoCache: []\n            };\n\n            rebuildCache = true;\n        } else {\n            this.lastSearchInfo.activeMatchIndex += increment;\n        }\n\n        if (rebuildCache) {\n            this.rowList.forEach((row) => {\n                if (row.cells) {\n                    row.cells.forEach((c) => {\n                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);\n                    });\n                }\n            });\n\n            this.rebuildMatchCache();\n        }\n\n        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {\n            this.lastSearchInfo.activeMatchIndex = 0;\n        } else if (this.lastSearchInfo.activeMatchIndex < 0) {\n            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;\n        }\n\n        if (this.lastSearchInfo.matchInfoCache.length) {\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n\n            IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                columnIndex: matchInfo.column,\n                rowIndex: matchInfo.row,\n                index: matchInfo.index,\n                page: matchInfo.page\n            });\n\n            if (scroll !== false) {\n                this.scrollTo(matchInfo.row, matchInfo.column, matchInfo.page, matchInfo.groupByRecord);\n            }\n        } else {\n            IgxTextHighlightDirective.clearActiveHighlight(this.id);\n        }\n\n        return this.lastSearchInfo.matchInfoCache.length;\n    }\n\n    /**\n     * Returns an array containing the filtered data.\n     * ```typescript\n     * const filteredData = this.grid1.filteredSortedData;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filteredSortedData(): any[] {\n        return this.resolveFilteredSortedData();\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveFilteredSortedData(): any[] {\n        let data: any[] = this.filteredData ? this.filteredData : this.data;\n        if (!this.filteredData && this.transactions.enabled) {\n            data = DataUtil.mergeTransactions(\n                cloneArray(data),\n                this.transactions.getAggregatedChanges(true),\n                this.primaryKey\n            );\n        }\n\n        return data;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initPinning() {\n        let currentPinnedWidth = 0;\n        const pinnedColumns = [];\n        const unpinnedColumns = [];\n        const newUnpinnedCols = [];\n\n        // When a column is a group or is inside a group, pin all related.\n        this._pinnedColumns.forEach(col => {\n            if (col.parent) {\n                col.parent.pinned = true;\n            }\n            if (col.columnGroup) {\n                col.children.forEach(child => child.pinned = true);\n            }\n        });\n\n        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.\n        // We take into account top level columns (top level groups and non groups).\n        // If top level is unpinned the pinning handles all children to be unpinned as well.\n        for (let i = 0; i < this._columns.length; i++) {\n            if (this._columns[i].pinned && !this._columns[i].parent) {\n                // Pinned column. Check if with it the unpinned min width is exceeded.\n                const colWidth = parseInt(this._columns[i].width, 10);\n                if (currentPinnedWidth + colWidth > this.calcWidth - this.unpinnedAreaMinWidth) {\n                    // unpinned min width is exceeded. Unpin the columns and add it to the unpinned collection.\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                    newUnpinnedCols.push(this._columns[i]);\n                } else {\n                    // unpinned min width is not exceeded. Keep it pinned and add it to the pinned collection.\n                    currentPinnedWidth += colWidth;\n                    pinnedColumns.push(this._columns[i]);\n                }\n            } else if (this._columns[i].pinned && this._columns[i].parent) {\n                if (this._columns[i].topLevelParent.pinned) {\n                    pinnedColumns.push(this._columns[i]);\n                } else {\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                }\n            } else {\n                unpinnedColumns.push(this._columns[i]);\n            }\n        }\n\n        if (newUnpinnedCols.length) {\n            console.warn(\n                'igxGrid - The pinned area exceeds maximum pinned width. ' +\n                'The following columns were unpinned to prevent further issues:' +\n                newUnpinnedCols.map(col => '\"' + col.header + '\"').toString() + '. For more info see our documentation.'\n            );\n        }\n\n        // Assign the applicaple collections.\n        this._pinnedColumns = pinnedColumns;\n        this._unpinnedColumns = unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: number, column: number, page: number, groupByRecord?: IGroupByRecord): void {\n        if (this.paging) {\n            this.page = page;\n        }\n\n        this.scrollDirective(this.verticalScrollContainer, row);\n\n        const scrollRow = this.rowList.find(r => r.virtDirRow);\n        const virtDir = scrollRow ? scrollRow.virtDirRow : null;\n\n        if (this.pinnedColumns.length) {\n            if (column >= this.pinnedColumns.length) {\n                column -= this.pinnedColumns.length;\n                this.scrollDirective(virtDir, column);\n            }\n        } else {\n            this.scrollDirective(virtDir, column);\n        }\n    }\n\n    private scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void {\n        if (!directive) {\n            return;\n        }\n        directive.scrollTo(goal);\n    }\n\n    private rebuildMatchCache() {\n        this.lastSearchInfo.matchInfoCache = [];\n\n        const caseSensitive = this.lastSearchInfo.caseSensitive;\n        const exactMatch = this.lastSearchInfo.exactMatch;\n        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();\n        const data = this.filteredSortedData;\n        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);\n\n        const groupIndexData = this.getGroupIncrementData();\n        const groupByRecords = this.getGroupByRecords();\n        let collapsedRowsCount = 0;\n\n        data.forEach((dataRow, i) => {\n            const groupByRecord = groupByRecords ? groupByRecords[i] : null;\n            const groupByIncrement = groupIndexData ? groupIndexData[i] : 0;\n            const pagingIncrement = this.getPagingIncrement(groupByIncrement, groupIndexData, Math.floor(i / this.perPage));\n            let rowIndex = this.paging ? (i % this.perPage) + pagingIncrement : i + groupByIncrement;\n\n            if (this.paging && i % this.perPage === 0) {\n                collapsedRowsCount = 0;\n            }\n\n            rowIndex -= collapsedRowsCount;\n\n            if (groupByRecord && !this.isExpandedGroup(groupByRecord)) {\n                collapsedRowsCount++;\n            }\n            columnItems.forEach((c, j) => {\n                const value = c.formatter ? c.formatter(dataRow[c.field]) : dataRow[c.field];\n                if (value !== undefined && value !== null && c.searchable) {\n                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();\n                    const pageIndex = this.paging ? Math.floor(i / this.perPage) : 0;\n\n                    if (exactMatch) {\n                        if (searchValue === searchText) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: rowIndex,\n                                column: j,\n                                page: pageIndex,\n                                index: 0,\n                                groupByRecord: groupByRecord,\n                                item: dataRow\n                            });\n                        }\n                    } else {\n                        let occurenceIndex = 0;\n                        let searchIndex = searchValue.indexOf(searchText);\n\n                        while (searchIndex !== -1) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: rowIndex,\n                                column: j,\n                                page: pageIndex,\n                                index: occurenceIndex++,\n                                groupByRecord: groupByRecord,\n                                item: dataRow\n                            });\n\n                            searchValue = searchValue.substring(searchIndex + searchText.length);\n                            searchIndex = searchValue.indexOf(searchText);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        return undefined;\n    }\n\n    /**\n    * @hidden\n    */\n    protected getGroupByRecords(): IGroupByRecord[] {\n        return null;\n    }\n\n    // For paging we need just the increment between the start of the page and the current row\n    private getPagingIncrement(groupByIncrement: number, groupIndexData: number[], page: number) {\n        let pagingIncrement = 0;\n\n        if (this.paging && groupByIncrement) {\n            const lastRowOnPrevPageInrement = page ? groupIndexData[page * this.perPage - 1] : 0;\n            const firstRowOnThisPageInrement = groupIndexData[page * this.perPage];\n            // If the page ends in the middle of the group, on the next page there is\n            // one additional group by row. We need to account for this.\n            const additionalPagingIncrement = lastRowOnPrevPageInrement === firstRowOnThisPageInrement ? 1 : 0;\n            pagingIncrement = groupByIncrement - lastRowOnPrevPageInrement + additionalPagingIncrement;\n        }\n\n        return pagingIncrement;\n    }\n\n    /**\n     * @hidden\n     */\n    protected restoreHighlight(): void {\n        if (this.lastSearchInfo.searchText) {\n            const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n            const data = this.filteredSortedData;\n            const groupByIncrements = this.getGroupIncrementData();\n\n            const rowIndex = matchInfo ? data.indexOf(matchInfo.item) : -1;\n            const page = this.paging ? Math.floor(rowIndex / this.perPage) : 0;\n            let increment = groupByIncrements && rowIndex !== -1 ? groupByIncrements[rowIndex] : 0;\n            if (this.paging && increment) {\n                increment = this.getPagingIncrement(increment, groupByIncrements, page);\n            }\n\n            const row = this.paging ? (rowIndex % this.perPage) + increment : rowIndex + increment;\n\n            this.rebuildMatchCache();\n\n            if (rowIndex !== -1) {\n                if (this.collapsedHighlightedItem && groupByIncrements !== null) {\n                    this.collapsedHighlightedItem.info.page = page;\n                    this.collapsedHighlightedItem.info.rowIndex = row;\n                } else {\n                    IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                        columnIndex: activeInfo.columnIndex,\n                        rowIndex: row,\n                        index: activeInfo.index,\n                        page: page\n                    });\n\n                    this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                        if (match.column === activeInfo.columnIndex &&\n                            match.row === row &&\n                            match.index === activeInfo.index &&\n                            match.page === page) {\n                            this.lastSearchInfo.activeMatchIndex = i;\n                        }\n                    });\n                }\n            } else {\n                this.lastSearchInfo.activeMatchIndex = 0;\n                this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n            }\n        }\n    }\n\n    // This method's idea is to get by how much each data row is offset by the group by rows before it.\n    /**\n    * @hidden\n    */\n    protected getGroupIncrementData(): number[] {\n        return null;\n    }\n\n    private checkIfGridIsAdded(node): boolean {\n        if (node === this.nativeElement) {\n            return true;\n        } else {\n            for (const childNode of node.childNodes) {\n                const added = this.checkIfGridIsAdded(childNode);\n                if (added) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    notGroups(arr) {\n        return arr.filter(c => !c.columnGroup);\n    }\n\n    /*     @HostListener('keydown.pagedown', ['$event'])\n        public onKeydownPageDown(event) {\n            event.preventDefault();\n            this.nativeElement.focus();\n        }\n\n        @HostListener('keydown.pageup', ['$event'])\n        public onKeydownPageUp(event) {\n            event.preventDefault();\n            this.verticalScrollContainer.scrollPrevPage();\n            this.nativeElement.focus();\n        } */\n\n        private changeRowEditingOverlayStateOnScroll(row: IgxRowComponent<IgxGridBaseComponent>) {\n            if (!this.rowEditable || this.rowEditingOverlay.collapsed) {\n                return;\n            }\n            if (!row) {\n                this.toggleRowEditingOverlay(false);\n            } else {\n                this.repositionRowEditingOverlay(row);\n            }\n        }\n\n        /**\n     * @hidden\n     */\n    public startRowEdit(cell: {\n        rowID: any,\n        columnID: any,\n        rowIndex: any\n    }) {\n        const args: IGridEditEventArgs = {\n            rowID: cell.rowID,\n            oldValue: this.gridAPI.get_row_by_key(this.id, cell.rowID).rowData,\n            cancel: false\n        };\n        this.onRowEditEnter.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        const rowState = { rowID: cell.rowID, rowIndex: cell.rowIndex };\n        this.gridAPI.set_edit_row_state(this.id, rowState);\n        this._currentRowState = this.transactions.getAggregatedValue(args.rowID, true);\n        this.transactions.startPending();\n        this.configureRowEditingOverlay(cell.rowID);\n        this.rowEditingOverlay.open(this.rowEditSettings);\n        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;\n        this.rowEditingOverlay.element.addEventListener('wheel', this.rowEditingWheelHandler.bind(this));\n    }\n\n    /**\n     * @hidden\n     */\n    public closeRowEditingOverlay() {\n        this.gridAPI.set_edit_row_state(this.id, null);\n        this.rowEditingOverlay.element.removeEventListener('wheel', this.rowEditingWheelHandler);\n        this.rowEditPositioningStrategy.isTopInitialPosition = null;\n        this.rowEditingOverlay.close();\n        this.rowEditingOverlay.element.parentElement.style.display = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public toggleRowEditingOverlay(show) {\n        const rowStyle = this.rowEditingOverlay.element.style;\n        if (show) {\n            rowStyle.display = 'block';\n        } else {\n            rowStyle.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public repositionRowEditingOverlay(row: IgxRowComponent<IgxGridBaseComponent>) {\n        if (!this.rowEditingOverlay.collapsed) {\n            const rowStyle = this.rowEditingOverlay.element.parentElement.style;\n            if (row) {\n                rowStyle.display = '';\n                this.configureRowEditingOverlay(row.rowID);\n                this.rowEditingOverlay.reposition();\n            } else {\n                rowStyle.display = 'none';\n            }\n        }\n    }\n\n    private configureRowEditingOverlay(rowID: any) {\n        this.rowEditSettings.outlet = this.rowEditingOutletDirective;\n        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;\n        // this.rowEditPositioningStrategy.settings.target = row.element.nativeElement;\n        const targetRow = this.gridAPI.get_row_by_key(this.id, rowID);\n        if (!targetRow) {\n            return;\n        }\n        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;\n        this.toggleRowEditingOverlay(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowChangesCount() {\n        if (!this.rowInEditMode) {\n            return 0;\n        }\n        const rowChanges = this.transactions.getAggregatedValue(this.rowInEditMode.rowID, false);\n        return rowChanges ? Object.keys(rowChanges).length : 0;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.data[rowIndex], value);\n    }\n    /**\n     * TODO: Refactor\n     * @hidden\n     */\n\n    private endRowTransaction(commit: boolean, rowID: any, rowObject: IgxRowComponent<IgxGridBaseComponent>) {\n        const valueInTransactions = this.transactions.getAggregatedValue(rowID, true);\n        const rowIndex = this.gridAPI.get_row_index_in_data(this.id, rowID);  // Get actual index in data\n        const newValue = valueInTransactions ? valueInTransactions : this.gridAPI.get_all_data(this.id)[rowIndex];\n        const oldValue =  Object.assign(\n            {},\n            this.gridAPI.get_all_data(this.id)[rowIndex],\n            this._currentRowState\n        );\n        // if (this.transactions.enabled) {\n        // If transactions are enabled, old value == last commited value (as it's not applied in data yet)\n        //     const lastCommitedValue = // Last commited value (w/o pending)\n        //         this.transactions.getState(rowID) ? Object.assign({}, this.transactions.getState(rowID).value) : null;\n        //     oldValue = lastCommitedValue ? Object.assign(oldValue, lastCommitedValue) : oldValue;\n        // }\n        const currentGridState = this.gridAPI.create_grid_edit_args(this.id, rowID,\n            null,\n            newValue);\n        const emitArgs = currentGridState.args;\n        Object.assign(emitArgs, {\n            oldValue,\n            rowID,\n        });\n        if (!commit) {\n            this.onRowEditCancel.emit(emitArgs);\n        } else {\n            this.gridAPI.update_row(emitArgs.newValue, this.id, rowID, currentGridState);\n        }\n        if (emitArgs.cancel) {\n            this.transactions.startPending();\n            return;\n        }\n        this.transactions.endPending(commit);\n        this.closeRowEditingOverlay();\n    }\n\n    /**\n     * Finishes the row transactions on the current row.\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     *\n     * Binding to the event\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    public endEdit(commit = true, event?: Event) {\n        const row = this.gridAPI.get_edit_row_state(this.id);\n        const cell = this.gridAPI.get_cell_inEditMode(this.id);\n        const rowObj = row ? this.getRowByKey(row.rowID) : null;\n\n        if (commit) {\n            this.gridAPI.submit_value(this.id);\n        } else {\n            this.gridAPI.escape_editMode(this.id);\n        }\n        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {\n            return;\n        }\n        this.endRowTransaction(commit, row.rowID, rowObj);\n        const currentCell = (row && cell) ? this.gridAPI.get_cell_by_index(this.id, row.rowIndex, cell.cellID.columnID) : null;\n        if (currentCell && event) {\n            currentCell.nativeElement.focus();\n        }\n    }\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler(event: WheelEvent) {\n        if (event.deltaY > 0) {\n            this.verticalScrollContainer.scrollNext();\n        } else {\n            this.verticalScrollContainer.scrollPrev();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get dataWithAddedInTransactionRows() {\n        const result = <any>cloneArray(this.gridAPI.get_all_data(this.id));\n        if (this.transactions.enabled) {\n            result.push(...this.transactions.getAggregatedChanges(true)\n                .filter(t => t.type === TransactionType.ADD)\n                .map(t => t.newValue));\n        }\n\n        return result;\n    }\n\n    private get dataLength() {\n        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data(this.id).length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return this._exportExcel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return this._exportCsv;\n    }\n}\n","import {Directive, EmbeddedViewRef, Input, OnChanges, ChangeDetectorRef,\n     SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef, NgModule, NgZone, ViewRef, Output, EventEmitter} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({selector: '[igxTemplateOutlet]'})\nexport class IgxTemplateOutletDirective implements OnChanges {\n  private _viewRef !: EmbeddedViewRef<any>;\n\n    /**\n    * The embedded views cache. Collection is key-value paired.\n    * Key is the template id, value is the embedded view for the related template.\n    */\n  private _embeddedViewsMap: Map<string, EmbeddedViewRef<any>> = new Map();\n\n  @Input() public igxTemplateOutletContext !: Object;\n\n  @Input() public igxTemplateOutlet !: TemplateRef<any>;\n\n\n  constructor(private _viewContainerRef: ViewContainerRef,  private _zone: NgZone,  public cdr: ChangeDetectorRef) {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const recreateView = this._shouldRecreateView(changes);\n    if (recreateView) {\n        // view should be re-created due to changes in the template or context.\n        // check if we have existing view with the new template stored in the cache.\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        if (!this._viewRef || !cachedView) {\n            // if view does not exist yet\n            // or if there is no template defined in the template outlet context\n            // or if there's no such view in the cache - then re-create view.\n            this._recreateView();\n        } else {\n           // if view exists, but template has been changed and there is a view in the cache with the related template\n           // then detach old view and insert the stored one with the matching template\n           // after that update its context.\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n            this._viewRef = cachedView;\n            this._viewContainerRef.insert(this._viewRef, 0);\n            this._updateExistingContext(this.igxTemplateOutletContext);\n        }\n    } else {\n        // view should not be re-created. Check if it exists and if context exists and just update it.\n      if (this._viewRef && this.igxTemplateOutletContext) {\n          this._updateExistingContext(this.igxTemplateOutletContext);\n      }\n    }\n  }\n\n  private _recreateView() {\n     // remove and recreate\n     if (this._viewRef) {\n         this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n      }\n      if (this.igxTemplateOutlet) {\n        this._viewRef = this._viewContainerRef.createEmbeddedView(\n              this.igxTemplateOutlet, this.igxTemplateOutletContext);\n            const tmplId = this.igxTemplateOutletContext['templateID'];\n            if (tmplId) {\n                // if context contains a template id, check if we have a view for that template already stored in the cache\n                // if not create a copy and add it to the cache in detached state.\n                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.\n                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);\n                if (!res) {\n                    let emptyView = this._viewContainerRef.createEmbeddedView(\n                        this.igxTemplateOutlet, {});\n                    emptyView = this._viewContainerRef.detach(this._viewContainerRef.indexOf(emptyView)) as EmbeddedViewRef<any>;\n                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], emptyView);\n                }\n            }\n      }\n  }\n  private _shouldRecreateView(changes: SimpleChanges): boolean {\n    const ctxChange = changes['igxTemplateOutletContext'];\n    return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n  }\n\n  private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n    const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n    const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n    if (prevCtxKeys.length === currCtxKeys.length) {\n      for (const propName of currCtxKeys) {\n        if (prevCtxKeys.indexOf(propName) === -1) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  private _updateExistingContext(ctx: Object): void {\n    for (const propName of Object.keys(ctx)) {\n      (<any>this._viewRef.context)[propName] = (<any>this.igxTemplateOutletContext)[propName];\n      }\n  }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTemplateOutletDirective],\n    entryComponents: [],\n    exports: [IgxTemplateOutletDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxTemplateOutletModule {\n}\n","import {\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component, DoCheck, HostBinding, Input\n} from '@angular/core';\nimport { DisplayDensity } from '../core/displayDensity';\nimport { DataType } from '../data-operations/data-util';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridBaseComponent } from './grid-base.component';\n/**\n *@hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary',\n    template: `<ng-container *ngIf=\"column.hasSummary\">\n    <ng-container *ngFor=\"let summary of resolveSummaries\">\n        <div class=\"{{itemClass}}\" [style.height.px]=\"summaryItemHeight\">\n            <span class=\"igx-grid-summary__label\" title=\"{{ summary.label }}\">{{ summary.label }}</span>\n            <span class=\"igx-grid-summary__result\" title=\"{{ summary.summaryResult }}\">\n                {{ column.dataType === 'number' ? (summary.summaryResult | igxdecimal) : column.dataType === 'date' ? (summary.summaryResult | igxdate) : (summary.summaryResult) }}\n            </span>\n        </div>\n    </ng-container>\n</ng-container>\n`\n})\nexport class IgxGridSummaryComponent implements DoCheck {\n\n    fieldName: string;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class.igx-grid-summary--fw')\n    get widthPersistenceClass(): boolean {\n        return this.column.width !== null;\n    }\n\n    @HostBinding('class.igx-grid-summary--pinned')\n    get isPinned() {\n        return this.column.pinned;\n    }\n\n    @HostBinding('class.igx-grid-summary--pinned-last')\n    get isLastPinned() {\n        const pinnedCols = this.gridAPI.get(this.gridID).pinnedColumns;\n        if (pinnedCols.length === 0) {\n            return false;\n        } else {\n            return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;\n        }\n    }\n\n    @HostBinding('class.igx-grid-summary--empty')\n    get emptyClass(): boolean {\n        return !this.column.hasSummary;\n    }\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.column.width;\n    }\n\n    @HostBinding('class.igx-grid-summary--compact')\n    get compactCSS() {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    @HostBinding('class.igx-grid-summary--cosy')\n    get cosyCSS() {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    @HostBinding('class.igx-grid-summary')\n    get defaultCSS() {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    get dataType(): DataType {\n        return this.column.dataType;\n    }\n    public summaryItemHeight;\n    public itemClass = 'igx-grid-summary__item';\n    private displayDensity: DisplayDensity | string;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent>, public cdr: ChangeDetectorRef) { }\n\n    ngDoCheck() {\n        this.displayDensity = this.gridAPI.get(this.gridID).displayDensity;\n        this.summaryItemHeight = this.gridAPI.get(this.gridID).defaultRowHeight;\n        this.cdr.detectChanges();\n    }\n\n    get resolveSummaries(): any[] {\n        if (this.fieldName) {\n            const field = this.fieldName;\n            this.fieldName = null;\n            this.gridAPI.set_summary_by_column_name(this.gridID, field);\n            if (this.column.field === field) {\n                return this.gridAPI.get_summaries(this.gridID).get(field);\n            } else {\n                return this.gridAPI.get_summaries(this.gridID).get(this.column.field);\n            }\n        } else {\n            this.gridAPI.set_summary_by_column_name(this.gridID, this.column.field);\n            return this.gridAPI.get_summaries(this.gridID).get(this.column.field);\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    OnDestroy,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    HostBinding,\n    HostListener\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DataType } from '../../data-operations/data-util';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../drop-down/drop-down.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings } from '../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../services/overlay/position/connected-positioning-strategy';\nimport { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IChipSelectEventArgs, IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { ExpressionUI } from './grid-filtering.service';\nimport { IgxDropDownItemComponent } from '../../drop-down/drop-down-item.component';\nimport { IgxFilteringService } from './grid-filtering.service';\nimport { KEYS } from '../../core/utils';\nimport { AbsoluteScrollStrategy } from '../../services/overlay/scroll';\n\n/**\n * @hidden\n */\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-row',\n    template: `<!-- Have to apply styles inline because of the overlay outlet ... -->\n<igx-drop-down #inputGroupConditions [height]=\"'200px'\" (onSelection)=\"onConditionsChanged($event)\">\n    <igx-drop-down-item\n        *ngFor=\"let condition of conditions\"\n        [value]=\"condition\"\n        [isSelected]=\"isConditionSelected(condition)\">\n        <igx-icon fontSet=\"filtering-icons\" [name]=\"getCondition(condition).iconName\"></igx-icon>\n        <span style=\"margin-left: 16px\">{{ condition | filterCondition | titlecase }}</span>\n    </igx-drop-down-item>\n</igx-drop-down>\n\n<ng-template #defaultFilterUI>\n    <igx-input-group type=\"box\" [displayDensity]=\"'compact'\" [supressInputAutofocus]=\"true\">\n        <igx-prefix #inputGroupPrefix\n                    (click)=\"toggleConditionsDropDown(inputGroupPrefix)\"\n                    (keydown)=\"onPrefixKeyDown($event)\"\n                    tabindex=\"0\"\n                    [igxDropDownItemNavigation]=\"inputGroupConditions\">\n            <igx-icon fontSet=\"filtering-icons\" [name]=\"getIconName()\"></igx-icon>\n        </igx-prefix>\n        <input\n            #input\n            igxInput\n            tabindex=\"0\"\n            [placeholder]=\"placeholder\"\n            autocomplete=\"off\"\n            [(ngModel)]=\"value\"\n            [type]=\"type\"\n            [readonly]=\"isUnaryCondition\"\n            (keydown)=\"onInputKeyDown($event)\"/>\n            <igx-suffix *ngIf=\"input.value.length > 0\" (keydown)=\"onClearKeyDown($event)\" (click)=\"clearInput()\" tabindex=\"0\">\n                <igx-icon>clear</igx-icon>\n            </igx-suffix>\n    </igx-input-group>\n</ng-template>\n\n<ng-template #defaultDateUI>\n    <igx-datePicker tabindex=\"0\" [(ngModel)]=\"value\" [locale]=\"locale\" (onClose)=\"datePickerClose()\">\n        <ng-template igxDatePickerTemplate let-openDialog=\"openDialog\" let-displayData=\"displayData\">\n            <igx-input-group type=\"box\" [displayDensity]=\"'compact'\" [supressInputAutofocus]=\"true\">\n                <igx-prefix #inputGroupPrefix\n                            tabindex=\"0\"\n                            (click)=\"toggleConditionsDropDown(inputGroupPrefix)\"\n                            (keydown)=\"onPrefixKeyDown($event)\"\n                            [igxDropDownItemNavigation]=\"inputGroupConditions\">\n                    <igx-icon fontSet=\"filtering-icons\" [name]=\"expression.condition.iconName\"></igx-icon>\n                </igx-prefix>\n                <input #input\n                       igxInput\n                       tabindex=\"0\"\n                (click)=\"openDialog()\"\n                [placeholder]=\"placeholder\"\n                autocomplete=\"off\"\n                       [value]=\"displayData | date\"\n                       [readonly]=\"true\"\n                       (keydown)=\"onInputKeyDown($event)\"/>\n                <igx-suffix *ngIf=\"input.value.length > 0\" (keydown)=\"onClearKeyDown($event)\" (click)=\"clearInput()\" tabindex=\"0\">\n                    <igx-icon>clear</igx-icon>\n                </igx-suffix>\n            </igx-input-group>\n            </ng-template>\n    </igx-datePicker>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template; context: { $implicit: this }\"></ng-container>\n\n<button igxButton=\"icon\" class=\"igx-grid__filtering-row-scroll-start\" *ngIf=\"showArrows\" (keydown)=\"onLeftArrowKeyDown($event)\" (click)=\"scrollChipsOnArrowPress('left')\">\n    <igx-icon>navigate_before</igx-icon>\n</button>\n\n<div #container class=\"igx-grid__filtering-row-main\">\n    <div>\n         <igx-chips-area #chipsArea>\n            <ng-container *ngFor=\"let item of expressionsList; index as i; let last = last;\" tabindex=\"0\">\n                <igx-chip #chip id='chip'\n                    (onSelection)=\"onChipSelected($event, item.expression)\"\n                    (keydown)=\"onChipKeyDown($event, chip)\"\n                    (onRemove)=\"onChipRemoved($event, item)\"\n                    [selectable]=\"true\"\n                    [selected]=\"item.isSelected\"\n                    [displayDensity]=\"'cosy'\"\n                    [removable]=\"true\">\n                    <igx-icon\n                        igxPrefix\n                        fontSet=\"filtering-icons\"\n                        [name]=\"item.expression.condition.iconName\">\n                    </igx-icon>\n                    <span>{{filteringService.getChipLabel(item.expression)}}</span>\n                </igx-chip>\n\n                <span id='operand' *ngIf=\"!last\">\n                    <button igxButton (click)=\"toggleOperatorsDropDown($event, i)\" [igxDropDownItemNavigation]=\"operators\">\n                        <igx-icon>expand_more</igx-icon>\n                        <span>{{filteringService.getOperatorAsString(item.afterOperator)}}</span>\n                    </button>\n                    <igx-drop-down #operators (onSelection)=\"onLogicOperatorChanged($event, item)\">\n                            <igx-drop-down-item [value]=\"0\" [isSelected]=\"item.afterOperator === 0\">And</igx-drop-down-item>\n                            <igx-drop-down-item [value]=\"1\" [isSelected]=\"item.afterOperator === 1\">Or</igx-drop-down-item>\n                    </igx-drop-down>\n                </span>\n            </ng-container>\n        </igx-chips-area>\n    </div>\n</div>\n\n<button igxButton=\"icon\" class=\"igx-grid__filtering-row-scroll-end\" *ngIf=\"showArrows\" (click)=\"scrollChipsOnArrowPress('right')\">\n    <igx-icon>navigate_next</igx-icon>\n</button>\n\n<div #buttonsContainer class=\"igx-grid__filtering-row-editing-buttons\">\n    <button igxButton igxRipple (click)=\"clearFiltering()\" [disabled]=\"disabled\">Reset</button>\n    <button #closeButton igxButton igxRipple (click)=\"close()\">Close</button>\n</div>\n`\n})\nexport class IgxGridFilteringRowComponent implements AfterViewInit, OnDestroy {\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _conditionsOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private _operatorsOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private rootExpressionsTree: FilteringExpressionsTree;\n    private chipsAreaWidth: number;\n    private chipAreaScrollOffset = 0;\n    private conditionChanged = new Subject();\n    private unaryConditionChanged = new Subject();\n    private _column = null;\n\n    public showArrows: boolean;\n    public expression: IFilteringExpression;\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    set column(val) {\n        if (val) {\n            this._column = val;\n\n            this.expressionsList = this.filteringService.getExpressions(this._column.field);\n\n            this.resetExpression();\n\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    @Input()\n    get value(): any {\n        return this.expression ? this.expression.searchVal : null;\n    }\n\n    set value(val) {\n        if (!val && val !== 0) {\n            this.expression.searchVal = null;\n        } else {\n            this.expression.searchVal = this.transformValue(val);\n            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n                this.addExpression(true);\n            }\n        }\n\n        this.filter();\n    }\n\n    get locale() {\n        return window.navigator.language;\n    }\n\n    @ViewChild('defaultFilterUI', { read: TemplateRef })\n    protected defaultFilterUI: TemplateRef<any>;\n\n    @ViewChild('defaultDateUI', { read: TemplateRef })\n    protected defaultDateUI: TemplateRef<any>;\n\n    @ViewChild('input', { read: ElementRef })\n    protected input: ElementRef;\n\n    @ViewChild('inputGroupConditions', { read: IgxDropDownComponent })\n    protected dropDownConditions: IgxDropDownComponent;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChildren('operators', { read: IgxDropDownComponent })\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n\n    @ViewChild('inputGroupPrefix', { read: ElementRef })\n    protected inputGroupPrefix: ElementRef;\n\n    @ViewChild('container')\n    protected container: ElementRef;\n\n    @ViewChild('operand')\n    protected operand: ElementRef;\n\n    @ViewChild('closeButton')\n    protected closeButton: ElementRef;\n\n    @HostBinding('class.igx-grid__filtering-row')\n    public cssClass = 'igx-grid__filtering-row';\n\n    constructor(public filteringService: IgxFilteringService, public element: ElementRef, public cdr: ChangeDetectorRef) {\n        this.unaryConditionChanged.subscribe(() => this.unaryConditionChangedCallback());\n        this.conditionChanged.subscribe(() => this.conditionChangedCallback());\n    }\n\n    ngAfterViewInit() {\n        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;\n\n        if (this.column.dataType === DataType.Date) {\n            // TODO: revise usage of cdr.detectChanges() here\n            this.cdr.detectChanges();\n        }\n\n        this.input.nativeElement.focus();\n    }\n\n    ngOnDestroy() {\n        this.conditionChanged.unsubscribe();\n        this.unaryConditionChanged.unsubscribe();\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeydown(event) {\n        event.stopPropagation();\n        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {\n            event.preventDefault();\n        }\n    }\n\n    get disabled(): boolean {\n        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.defaultDateUI;\n        }\n\n        return this.defaultFilterUI;\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.String:\n            case DataType.Boolean:\n                return 'text';\n            case DataType.Number:\n                return 'number';\n        }\n    }\n\n    get conditions(): any {\n        return this.column.filters.instance().conditionList();\n    }\n\n    get isUnaryCondition(): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.isUnary;\n        } else {\n            return true;\n        }\n    }\n\n    get placeholder(): string {\n        if (this.expression.condition && this.expression.condition.isUnary) {\n            return this.filteringService.getChipLabel(this.expression);\n        } else {\n            return 'Add filter value';\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    public onPrefixKeyDown(event: KeyboardEvent) {\n        if ((event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) &&\n            this.dropDownConditions.collapsed) {\n            this._conditionsOverlaySettings.positionStrategy.settings.target = this.inputGroupPrefix.nativeElement;\n            this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n            event.stopImmediatePropagation();\n        } else if (event.key === KEYS.TAB && event.shiftKey) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input.\n     */\n    public onInputKeyDown(event: KeyboardEvent) {\n        if (event.key === KEYS.ENTER) {\n            this.chipsArea.chipsList.filter(chip => chip.selected = false);\n\n            let indexToDeselect = -1;\n            for (let index = 0; index < this.expressionsList.length; index++) {\n                const expression = this.expressionsList[index].expression;\n                if (expression.searchVal === null && !expression.condition.isUnary) {\n                    indexToDeselect = index;\n                }\n            }\n\n            if (indexToDeselect !== -1) {\n                this.removeExpression(indexToDeselect, this.expression);\n            }\n\n            this.resetExpression();\n            this.scrollChipsWhenAddingExpression();\n        } else if (event.key === KEYS.DOWN_ARROW) {\n            this.input.nativeElement.blur();\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * Event handler for datepicker's close.\n     */\n    public datePickerClose() {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.instance().condition(value);\n    }\n\n    /**\n     * Returns the icon name of the current condition.\n     */\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expression.searchVal === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else {\n            return this.expression.condition.iconName;\n        }\n    }\n\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    public isConditionSelected(conditionName: string): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.name === conditionName;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Clears the current filtering.\n     */\n    public clearFiltering() {\n        this.filteringService.clearFilter(this.column.field);\n        this.resetExpression();\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Clears the value of the input.\n     */\n    public clearInput() {\n        this.value = null;\n    }\n\n    /**\n     * Event handler for keydown on clear button.\n     */\n    public onClearKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.clearInput();\n        }\n    }\n\n    /**\n     * Closes the filtering edit row.\n     */\n    public close() {\n        if (this.expressionsList.length === 1 &&\n            this.expressionsList[0].expression.searchVal === null &&\n            this.expressionsList[0].expression.condition.isUnary === false) {\n            this.filteringService.clearFilter(this.column.field);\n        } else {\n            this.expressionsList.forEach((item) => {\n                if (item.expression.searchVal === null && !item.expression.condition.isUnary) {\n                    this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(item));\n                }\n            });\n        }\n\n        this.filteringService.isFilterRowVisible = false;\n        this.filteringService.filteredColumn = null;\n        this.filteringService.selectedExpression = null;\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Opens the conditions dropdown.\n     */\n    public toggleConditionsDropDown(target: any) {\n        this._conditionsOverlaySettings.positionStrategy.settings.target = target;\n        this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n    }\n\n    /**\n     * Opens the logic operators dropdown.\n     */\n    public toggleOperatorsDropDown(eventArgs, index) {\n        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;\n        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);\n    }\n\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    public onConditionsChanged(eventArgs) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expression.condition = this.getCondition(value);\n        if (this.expression.condition.isUnary) {\n            this.unaryConditionChanged.next(value);\n        } else {\n            this.conditionChanged.next(value);\n        }\n\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     *  Event handler for chip selected event.\n     */\n    public onChipSelected(eventArgs: IChipSelectEventArgs, expression: IFilteringExpression) {\n        if (eventArgs.selected) {\n            if (this.chipsArea.chipsList) {\n                this.chipsArea.chipsList.forEach((chip) => {\n                    if (chip !== eventArgs.owner) {\n                        chip.selected = false;\n                    }\n                });\n            }\n            this.expression = expression;\n\n            if (this.input) {\n                this.input.nativeElement.focus();\n            }\n        } else if (this.expression === expression) {\n            this.resetExpression();\n        }\n    }\n\n    /**\n     * Event handler for chip keydown event.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, chip: IgxChipComponent) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            chip.selected = !chip.selected;\n        }\n    }\n\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    public onLeftArrowKeyDown(event) {\n        if (event.key === KEYS.TAB) {\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * Event handler for chip removed event.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove, item.expression);\n\n        this.scrollChipsOnRemove();\n    }\n\n    /**\n     * Event handler for logic operator changed event.\n     */\n    public onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI) {\n        if (eventArgs.oldSelection) {\n            expression.afterOperator = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;\n            this.filter();\n        }\n    }\n\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    public scrollChipsOnArrowPress(arrowPosition: string) {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        if (arrowPosition === 'right') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {\n                    count++;\n                }\n            }\n\n            if (count < chipAraeChildren.length) {\n                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -\n                    Math.ceil(containerRect.right) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n\n        if (arrowPosition === 'left') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                    count++;\n                }\n            }\n\n            if (count > 0) {\n                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -\n                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n    }\n\n    private showHideArrowButtons() {\n        requestAnimationFrame(() => {\n            const containerWidth = this.container.nativeElement.getBoundingClientRect().width;\n            this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;\n\n            this.showArrows = this.chipsAreaWidth >= containerWidth;\n\n            // TODO: revise the cdr.detectChanges() usage here\n            this.cdr.detectChanges();\n        });\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n\n    private addExpression(isSelected: boolean) {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = this.expression;\n        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;\n        exprUI.isSelected = isSelected;\n\n        this.expressionsList.push(exprUI);\n\n        const length = this.expressionsList.length;\n        if (this.expressionsList[length - 2]) {\n            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private removeExpression(indexToRemove: number, expression: IFilteringExpression) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.filter();\n\n        if (this.expression === expression) {\n            this.resetExpression();\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private resetExpression() {\n        this.expression = {\n            fieldName: this.column.field,\n            condition: null,\n            searchVal: null,\n            ignoreCase: this.column.filteringIgnoreCase\n        };\n\n        if (this.column.dataType !== DataType.Boolean) {\n            this.expression.condition = this.getCondition(this.conditions[0]);\n        }\n\n        if (this.column.dataType === DataType.Date && this.input) {\n            this.input.nativeElement.value = null;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private scrollChipsWhenAddingExpression() {\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        if (!chipAraeChildren || chipAraeChildren.length === 0) {\n            return;\n        }\n\n        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);\n\n        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);\n        if (lastChipRectRight >= containerRectRight) {\n            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    private transform(offset: number) {\n        requestAnimationFrame(() => {\n            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;\n        });\n    }\n\n    private scrollChipsOnRemove() {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        for (let index = 0; index < chipAraeChildren.length; index++) {\n            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                count++;\n            }\n        }\n\n        if (count <= 2) {\n            this.chipAreaScrollOffset = 0;\n        } else {\n            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;\n            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;\n        }\n\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    private conditionChangedCallback() {\n        if (!!this.expression.searchVal || this.expression.searchVal === 0) {\n            this.filter();\n        } else if (this.value) {\n            this.value = null;\n        }\n    }\n\n    private unaryConditionChangedCallback() {\n        if (this.value) {\n            this.value = null;\n        }\n        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n            this.addExpression(true);\n        }\n        this.filter();\n    }\n\n    private filter() {\n        this.rootExpressionsTree = this.filteringService.createSimpleFilteringTree(this.column.field);\n\n        this.filteringService.filter(this.column.field, this.rootExpressionsTree);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDatePickerModule } from '../date-picker/date-picker.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IgxForOfModule } from '../directives/for-of/for_of.directive';\nimport { IgxTemplateOutletModule } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxTextHighlightModule } from '../directives/text-highlight/text-highlight.directive';\nimport { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownModule } from '../drop-down/drop-down.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from './column.component';\nimport { IgxColumnHidingModule } from './column-hiding.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridSummaryComponent } from './grid-summary.component';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxColumnResizerDirective,\n    IgxColumnMovingDragDirective,\n    IgxColumnMovingDropDirective,\n    IgxColumnMovingService,\n    IgxDecimalPipeComponent,\n    IgxDatePipeComponent\n} from './grid.common';\nimport { IgxGridTransaction } from './grid-base.component';\nimport {\n    IgxGridFilterConditionPipe,\n    IgxGridTransactionPipe\n} from './grid-common.pipes';\nimport { IgxRowComponent } from './row.component';\nimport { IgxChipsModule } from '../chips/chips.module';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxButtonGroupModule } from '../buttonGroup/buttonGroup.component';\nimport { IgxColumnPinningModule } from './column-pinning.component';\nimport { TransactionService } from '../services';\nimport { IgxBaseTransactionService } from '../services/transaction/base-transaction';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditActionsDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditTabStopDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\n\n@NgModule({\n    declarations: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxGridHeaderComponent,\n        IgxGridSummaryComponent,\n        IgxGridToolbarComponent,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxRowComponent\n\n    ],\n    entryComponents: [\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n    ],\n    exports: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxGridHeaderComponent,\n        IgxGridSummaryComponent,\n        IgxGridToolbarComponent,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxRowComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule\n    ],\n    providers: [\n        IgxSelectionAPIService,\n        IgxColumnMovingService,\n        IgxGridNavigationService,\n        { provide: IgxGridTransaction, useClass: IgxBaseTransactionService }\n    ]\n})\nexport class IgxGridCommonModule { }\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent } from '../grid-base.component';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-groupby-row',\n    template: `<ng-container #defaultGroupRow>\n    <div (click)=\"toggle()\" class=\"igx-grid__grouping-indicator\">\n        <igx-icon *ngIf=\"!expanded\" fontSet=\"material\">chevron_right</igx-icon>\n        <igx-icon *ngIf=\"expanded\" fontSet=\"material\">expand_more</igx-icon>\n    </div>\n\n    <div class=\"igx-grid__group-content\" #groupContent>\n        <ng-container *ngTemplateOutlet=\"grid.groupRowTemplate ? grid.groupRowTemplate : defaultGroupByTemplate; context: { $implicit: groupRow }\">\n        </ng-container>\n    </div>\n\n    <ng-template #defaultGroupByTemplate>\n        <div class=\"igx-group-label\">\n            <igx-icon fontSet=\"material\" class=\"igx-group-label__icon\">group_work</igx-icon>\n            <span class=\"igx-group-label__column-name\">\n            {{ groupRow.expression ? groupRow.expression.fieldName : '' }}:\n            </span>\n\n            <ng-container *ngIf=\"dataType === 'boolean' || dataType === 'string'; else default\" >\n                <span class=\"igx-group-label__text\">{{ groupRow.value }}</span>\n            </ng-container>\n            <ng-template #default>\n                <ng-container *ngIf=\"dataType === 'number'\">\n                    <span class=\"igx-group-label__text\">{{ groupRow.value | number }}</span>\n                </ng-container>\n                <ng-container *ngIf=\"dataType === 'date'\">\n                    <span class=\"igx-group-label__text\">{{ groupRow.value | date }}</span>\n                </ng-container>\n            </ng-template>\n\n            <igx-badge [value]=\"groupRow.records ? groupRow.records.length : 0\" class='igx-group-label__count-badge'></igx-badge>\n        </div>\n    </ng-template>\n</ng-container>\n`\n})\nexport class IgxGridGroupByRowComponent {\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        private selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__group-row';\n\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass = 'igx-grid__group-row--padding-level';\n\n    /**\n     * @hidden\n     */\n    protected isFocused = false;\n\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean {\n        return this.isFocused;\n    }\n\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public groupRow: IGroupByRecord;\n\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    @ViewChild('groupContent')\n    public groupContent: ElementRef;\n\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this.grid.isExpandedGroup(this.groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedBy(): string {\n        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';\n        return this.gridID + '_' + grRowExpr;\n    }\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +\n            (this.focused ? ` ${this.defaultCssClass}--active` : '');\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.isFocused = true;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.isFocused = false;\n    }\n\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle(key?) {\n        const shouldExpand = (!key && !this.expanded) || (key && !this.expanded && (key === 'arrowleft' || key === 'left'));\n        this.handleToggleScroll();\n        if (!shouldExpand) {\n            this.grid.verticalScrollContainer.getVerticalScroll().dispatchEvent(new Event('scroll'));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const alt = event.altKey;\n        const key = event.key.toLowerCase();\n\n        if (!this.isKeySupportedInGroupRow(key) || event.ctrlKey) { return; }\n\n        if (this.isToggleKey(key)) {\n            if (!alt) { return; }\n            this.toggle(key);\n            return;\n        }\n        const args = { cell: null, groupRow: this, event: event, cancel: false };\n        this.grid.onFocusChange.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        const colIndex = this._getSelectedColIndex() || 0;\n        const visibleColumnIndex = this.grid.columnList.toArray()[colIndex].visibleIndex !== -1 ?\n            this.grid.columnList.toArray()[colIndex].visibleIndex : 0;\n        switch (key) {\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(this.nativeElement, this.index, visibleColumnIndex);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(this.nativeElement, this.index, visibleColumnIndex);\n                break;\n            case 'tab':\n                if (event.shiftKey) {\n                    this.grid.navigation.navigateUp(this.nativeElement, this.index,\n                        this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex);\n                } else {\n                    this.grid.navigation.navigateDown(this.nativeElement, this.index, 0);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): any {\n        return this.gridAPI.get(this.gridID);\n    }\n\n    /**\n     * @hidden\n     */\n    get dataType(): any {\n        return this.grid.getColumnByName(this.groupRow.expression.fieldName).dataType;\n    }\n\n    private _getSelectedColIndex() {\n        const cell = this.selection.first_item(this.gridID + '-cell');\n        if (cell) {\n            return cell.columnID;\n        }\n    }\n\n    private isKeySupportedInGroupRow(key) {\n        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n            'tab'].indexOf(key) !== -1;\n    }\n\n    private isToggleKey(key) {\n        return ['left', 'right', 'arrowleft', 'arrowright'].indexOf(key) !== -1;\n    }\n    private handleToggleScroll() {\n        if (this.grid.rowList.length > 0 && this.grid.rowList.last.index ===\n            this.grid.verticalScrollContainer.igxForOf.length - 1) {\n            const groupRowIndex = this.index;\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    this.grid.nativeElement.querySelector(`[data-rowIndex=\"${groupRowIndex}\"]`).focus();\n                });\n        }\n        this.grid.toggleGroup(this.groupRow);\n    }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { ISortingExpression, SortingDirection } from '../../data-operations/sorting-expression.interface';\nimport { ISortingStrategy } from '../../data-operations/sorting-strategy';\n\nexport class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {\n\n    public groupBy(id: string, fieldName: string, dir: SortingDirection, ignoreCase: boolean, strategy: ISortingStrategy): void {\n        const groupingState = cloneArray(this.get(id).groupingExpressions);\n        const sortingState = cloneArray(this.get(id).sortingExpressions);\n        strategy = strategy ? strategy : this.getSortStrategyPerColumn(id, fieldName);\n        this.prepare_sorting_expression([sortingState, groupingState], { fieldName, dir, ignoreCase, strategy });\n        this.get(id).groupingExpressions = groupingState;\n        this.arrange_sorting_expressions(id);\n    }\n\n    public groupBy_multiple(id: string, expressions: ISortingExpression[]): void {\n        const groupingState = cloneArray(this.get(id).groupingExpressions);\n        const sortingState = cloneArray(this.get(id).sortingExpressions);\n\n        for (const each of expressions) {\n            each.strategy = each.strategy ? each.strategy : this.getSortStrategyPerColumn(id, each.fieldName);\n            this.prepare_sorting_expression([sortingState, groupingState], each);\n        }\n\n        this.get(id).groupingExpressions = groupingState;\n        this.arrange_sorting_expressions(id);\n    }\n\n    public clear_groupby(id: string, name?: string | Array<string>) {\n        const groupingState = cloneArray(this.get(id).groupingExpressions);\n        const sortingState = cloneArray(this.get(id).sortingExpressions);\n\n        if (name) {\n            const names = typeof name === 'string' ? [ name ] : name;\n            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            this.get(id).groupingExpressions = groupedCols;\n            this.get(id).sortingExpressions = newSortingExpr;\n            names.forEach((colName) => {\n                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);\n                const grpExpandState = this.get(id).groupingExpansionState;\n                /* remove expansion states related to the cleared group\n                and all with deeper hierarchy than the cleared group */\n                this.get(id).groupingExpansionState = grpExpandState\n                    .filter((val) => {\n                        return val.hierarchy && val.hierarchy.length <= grExprIndex;\n                    });\n            });\n        } else {\n            // clear all\n            this.get(id).groupingExpressions = [];\n            this.get(id).groupingExpansionState = [];\n            for (const grExpr of groupingState) {\n                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);\n                if (sortExprIndex > -1) {\n                    sortingState.splice(sortExprIndex, 1);\n                }\n            }\n            this.get(id).sortingExpressions = sortingState;\n        }\n    }\n\n    public groupBy_get_expanded_for_group(id: string, groupRow: IGroupByRecord): IGroupByExpandState {\n        const grState = this.get(id).groupingExpansionState;\n        const hierarchy = DataUtil.getHierarchy(groupRow);\n        return grState.find((state) =>\n            DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n    }\n\n    public groupBy_is_row_in_group(id: string, groupRow: IGroupByRecord, rowID): boolean {\n        const grid = this.get(id);\n        let rowInGroup = false;\n        groupRow.records.forEach(row => {\n            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {\n                rowInGroup = true;\n            }\n        });\n        return rowInGroup;\n    }\n\n    public groupBy_toggle_group(id: string, groupRow: IGroupByRecord) {\n        const grid = this.get(id);\n        const expansionState = grid.groupingExpansionState;\n        let toggleRowEditingOverlay: boolean;\n        let isEditRowInGroup = false;\n        if (grid.rowEditable) {\n            const rowState = this.get_edit_row_state(id);\n\n            // Toggle only row editing overlays that are inside current expanded/collapsed group.\n            isEditRowInGroup = rowState ? this.groupBy_is_row_in_group(id, groupRow, this.get_edit_row_state(id).rowID) : false;\n        }\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(id, groupRow);\n        if (state) {\n            state.expanded = !state.expanded;\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = state.expanded;\n            }\n        } else {\n            expansionState.push({\n                expanded: !grid.groupsExpanded,\n                hierarchy: DataUtil.getHierarchy(groupRow)\n            });\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = false;\n            }\n        }\n        this.get(id).groupingExpansionState = expansionState;\n        if (grid.rowEditable) {\n            grid.repositionRowEditingOverlay(grid.rowInEditMode);\n        }\n    }\n\n    protected remove_grouping_expression(id, fieldName) {\n        const groupingExpressions = this.get(id).groupingExpressions;\n        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);\n        if (index !== -1) {\n            groupingExpressions.splice(index, 1);\n        }\n    }\n\n    public arrange_sorting_expressions(id) {\n        const groupingState = this.get(id).groupingExpressions;\n        this.get(id).sortingExpressions.sort((a, b) => {\n            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);\n            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);\n            if (groupExprA && groupExprB) {\n                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;\n            } else if (groupExprA) {\n                return -1;\n            } else if (groupExprB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n}\n","import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';\nimport { IgxDropDirective } from '../../directives/dragdrop/dragdrop.directive';\nimport { IgxColumnMovingDragDirective } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxGridComponent } from './grid.component';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupByRow]'\n})\nexport class IgxGroupByRowTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupAreaDrop]'\n})\nexport class IgxGroupAreaDropDirective extends IgxDropDirective {\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone) {\n        super(elementRef, renderer, zone);\n    }\n\n    @HostBinding('class.igx-drop-area--hover')\n    public hovered = false;\n\n\n    public onDragEnter(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        const grid = <IgxGridComponent>column.grid;\n        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n        if (column.groupable && !isGrouped) {\n            drag.icon.innerText = 'group_work';\n            this.hovered = true;\n        } else {\n            drag.icon.innerText = 'block';\n            this.hovered = false;\n        }\n    }\n\n    public onDragLeave(event) {\n        event.detail.owner.icon.innerText = 'block';\n        this.hovered = false;\n    }\n\n    public onDragDrop(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        if (drag instanceof IgxColumnMovingDragDirective) {\n            const column: IgxColumnComponent = drag.column;\n            const grid = <IgxGridComponent>column.grid;\n            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n            if (column.groupable && !isGrouped) {\n                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,\n                    strategy: column.sortStrategy });\n            }\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IGroupByResult, ISortingStrategy } from '../../data-operations/sorting-strategy';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxGridBaseComponent } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridAPIService } from './grid-api.service';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridSort',\n    pure: true\n})\nexport class IgxGridSortingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent>) { }\n\n    public transform(collection: any[], expressions: ISortingExpression | ISortingExpression[],\n        id: string, pipeTrigger: number): any[] {\n        let strategy: ISortingStrategy;\n        const state = { expressions: [], strategy };\n        state.expressions = this.gridAPI.get(id).sortingExpressions;\n\n        if (!state.expressions.length) {\n            return collection;\n        }\n\n        // DataUtil.sort needs a sorting strategy to start with, so it makes sense to start with the strategy from the first expression\n        // sorting-strategy.ts, sortDataRecursive method then takes care and use the corresponding strategy for each expression\n        strategy = expressions[0].strategy;\n        state.strategy = strategy;\n\n        return DataUtil.sort(cloneArray(collection), state);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPreGroupBy',\n    pure: true\n})\nexport class IgxGridPreGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expression: ISortingExpression | ISortingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, pipeTrigger: number): IGroupByResult {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.get(id);\n        state.expressions = grid.groupingExpressions;\n\n        if (!state.expressions.length) {\n            return {\n                data: collection,\n                metadata: collection\n            };\n        }\n\n        state.expansion = grid.groupingExpansionState;\n        state.defaultExpanded = grid.groupsExpanded;\n\n        return DataUtil.group(cloneArray(collection), state);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPostGroupBy',\n    pure: true\n})\nexport class IgxGridPostGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: IGroupByResult, expression: ISortingExpression | ISortingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, groupsRecords: any[], pipeTrigger: number): any[] {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.get(id);\n        state.expressions = grid.groupingExpressions;\n\n        if (!state.expressions.length) {\n            return collection.data;\n        }\n\n        state.expansion = grid.groupingExpansionState;\n        state.defaultExpanded = grid.groupsExpanded;\n\n        return DataUtil.restoreGroups({\n            data: cloneArray(collection.data),\n            metadata: cloneArray(collection.metadata)\n        }, state, groupsRecords);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPaging',\n    pure: true\n})\nexport class IgxGridPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent>) { }\n\n    public transform(collection: IGroupByResult, page = 0, perPage = 15, id: string, pipeTrigger: number): IGroupByResult {\n\n        if (!this.gridAPI.get(id).paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: IGroupByResult = {\n            data: DataUtil.page(cloneArray(collection.data), state),\n            metadata: DataUtil.page(cloneArray(collection.metadata), state)\n        };\n        this.gridAPI.get(id).pagingState = state;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridFiltering',\n    pure: true\n})\nexport class IgxGridFilteringPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent>) { }\n\n    public transform(collection: any[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number) {\n        const grid = this.gridAPI.get(id);\n        const state = { expressionsTree: expressionsTree };\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        grid.filteredData = result;\n        return result;\n    }\n}\n","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren,\n    QueryList, ViewChild, ElementRef, TemplateRef, DoCheck, NgZone, ChangeDetectorRef, ComponentFactoryResolver,\n    IterableDiffers, ViewContainerRef, Inject, AfterContentInit, HostBinding, forwardRef, OnInit } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction, IFocusChangeEventArgs } from '../grid-base.component';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { cloneArray } from '../../core/utils';\nimport { IgxTextHighlightDirective } from '../../directives/text-highlight/text-highlight.directive';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective } from './grid.directives';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { DisplayDensity } from '../../core/displayDensity';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { TransactionService, Transaction, State } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxGridSortingPipe } from './grid.pipes';\nimport { IgxColumnComponent } from '../column.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\n\nlet NEXT_ID = 0;\n\nexport interface IGridFocusChangeEventArgs extends IFocusChangeEventArgs {\n    groupRow: IgxGridGroupByRowComponent;\n}\nexport interface IGroupingDoneEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n\n/**\n * **Ignite UI for Angular Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n *\n * Example:\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    providers: [IgxGridNavigationService,\n        { provide: GridBaseAPIService, useClass: IgxGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxGridComponent) },\n        IgxFilteringService\n    ],\n    selector: 'igx-grid',\n    template: `<igx-grid-toolbar role=\"rowgroup\" [style.width.px]=\"calcWidth\" *ngIf=\"shouldShowToolbar\" [gridID]=\"id\" [displayDensity]=\"displayDensity\" #toolbar>\n</igx-grid-toolbar>\n\n<ng-template #defaultPager let-api>\n    <button [disabled]=\"api.isFirstPage\" (click)=\"api.paginate(0)\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">first_page</igx-icon>\n    </button>\n    <button [disabled]=\"api.isFirstPage\" (click)=\"api.previousPage()\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">chevron_left</igx-icon>\n    </button>\n    <span>{{ api.page + 1 }} of {{ api.totalPages }}</span>\n    <button [disabled]=\"api.isLastPage\" (click)=\"api.nextPage()\" igxRipple igxRippleCentered=\"true\" igxButton=\"icon\">\n        <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n    </button>\n        <button [disabled]=\"api.isLastPage\" (click)=\"api.paginate(api.totalPages - 1)\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">last_page</igx-icon>\n    </button>\n    <select style=\"margin-left: 1rem;\" (change)=\"api.perPage = $event.target.value\">\n            <option [value]=\"val\" [selected]=\"api.perPage == val\" *ngFor=\"let val of [5, 10, 15, 25, 50, 100, 500]\">{{ val }}</option>\n    </select>\n</ng-template>\n\n<div [style.width.px]='calcWidth' class=\"igx-grid__grouparea\" *ngIf=\"groupingExpressions.length > 0 || hasGroupableColumns\" #groupArea>\n    <igx-chips-area (onReorder)=\"chipsOrderChanged($event)\" (onMoveEnd)=\"chipsMovingEnded()\">\n        <ng-container *ngFor=\"let expr of chipsGoupingExpressions; let last = last;\">\n            <igx-chip [id]=\"expr.fieldName\" [removable]=\"getColumnByName(expr.fieldName).groupable\" [draggable]=\"getColumnByName(expr.fieldName).groupable\" [displayDensity]=\"displayDensity\"\n                (onKeyDown)=\"onChipKeyDown($event)\" (onRemove)=\"onChipRemoved($event)\" (onClick)=\"getColumnByName(expr.fieldName).groupable ? onChipClicked($event): null\" [disabled]='!getColumnByName(expr.fieldName).groupable'>\n                    <span>{{ getColumnByName(expr.fieldName).header || expr.fieldName }}</span>\n                    <igx-icon igxSuffix>{{ expr.dir == 1 ? 'arrow_upward' : 'arrow_downward' }}</igx-icon>\n            </igx-chip>\n            <span class=\"igx-grid__grouparea-connector\">\n                <igx-icon [style.visibility]=\"(!last || dropAreaVisible) ? 'visible' : 'hidden'\" >arrow_forward</igx-icon>\n            </span>\n        </ng-container>\n        <div igxGroupAreaDrop [style.visibility]=\"dropAreaVisible ? 'visible' : 'hidden'\" [class]=\"groupAreaHostClass\">\n            <ng-container *ngTemplateOutlet=\"dropAreaTemplateResolved\"></ng-container>\n        </div>\n    </igx-chips-area>\n</div>\n\n<div class=\"igx-grid__thead\" role=\"rowgroup\" [style.width.px]='calcWidth' #theadRow>\n    <div class=\"igx-grid__tr\" [style.width.px]='calcWidth' role=\"row\">\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-left\"></span>\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n        <ng-container *ngIf=\"groupingExpressions.length > 0\">\n            <div class=\"igx-grid__header-indentation igx-grid__row-indentation--level-{{groupingExpressions.length}}\" #headerGroupContainer>\n                <igx-icon role=\"button\" class=\"igx-grid__group-expand-btn\" (click)=\"toggleAllGroupRows()\">reorder</igx-icon>\n            </div>\n        </ng-container>\n        <ng-container *ngIf=\"rowSelectable\">\n            <div class=\"igx-grid__cbx-selection\" #headerCheckboxContainer>\n                <igx-checkbox [checked]=\"allRowsSelected\" (change)=\"onHeaderCheckboxClick($event)\" disableRipple=\"true\" [aria-label]=\"headerCheckboxAriaLabel\" #headerCheckbox></igx-checkbox>\n            </div>\n        </ng-container>\n        <ng-container *ngIf=\"pinnedColumns.length > 0\">\n            <ng-template ngFor let-col [ngForOf]=\"onlyTopLevel(pinnedColumns)\">\n                <div class=\"igx-grid__thead-item igx-grid__th--pinned\">\n                    <igx-grid-header [igxColumnMovingDrag]=\"col\" [attr.droppable]=\"true\" [igxColumnMovingDrop]=\"col\" [gridID]=\"id\"\n                        [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [style.max-width.px]='col.width'></igx-grid-header>\n                    <igx-grid-filtering-cell *ngIf=\"allowFiltering && !col.columnGroup && filteringService.filteredColumn !== col\"\n                        [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width' [style.max-width.px]='col.width'></igx-grid-filtering-cell>\n                </div>\n            </ng-template>\n        </ng-container>\n        <ng-template igxGridFor let-col [igxGridForOf]=\"onlyTopLevel(unpinnedColumns)\" [igxForScrollOrientation]=\"'horizontal'\" [igxForScrollContainer]=\"parentVirtDir\"\n            [igxForContainerSize]='unpinnedWidth' [igxForTrackBy]='trackColumnChanges' #headerContainer>\n            <div class=\"igx-grid__thead-item\">\n                <igx-grid-header [igxColumnMovingDrag]=\"col\" [attr.droppable]=\"true\" [igxColumnMovingDrop]=\"col\" [gridID]=\"id\" [column]=\"col\"\n                    [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width' [style.max-width.px]='col.width'></igx-grid-header>\n                <igx-grid-filtering-cell *ngIf=\"allowFiltering && !col.columnGroup && filteringService.filteredColumn !== col\" [column]=\"col\"\n                    [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width' [style.max-width.px]='col.width'></igx-grid-filtering-cell>\n            </div>\n        </ng-template>\n        <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    </div>\n    <igx-grid-filtering-row *ngIf=\"filteringService.isFilterRowVisible\" [column]=\"filteringService.filteredColumn\"></igx-grid-filtering-row>\n</div>\n\n<div class=\"igx-grid__tbody\" role=\"rowgroup\" [style.height.px]='calcHeight' [style.width.px]='calcWidth' #tbody (scroll)='scrollHandler($event)' (wheel)=\"wheelHandler()\">\n    <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-left\"></span>\n    <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n    <ng-template igxGridFor let-rowData [igxGridForOf]=\"data | gridTransaction:id:pipeTrigger\n    | gridFiltering:filteringExpressionsTree:id:pipeTrigger\n    | gridSort:sortingExpressions:id:pipeTrigger\n    | gridPreGroupBy:groupingExpressions:groupingExpansionState:groupsExpanded:id:pipeTrigger\n    | gridPaging:page:perPage:id:pipeTrigger\n    | gridPostGroupBy:groupingExpressions:groupingExpansionState:groupsExpanded:id:groupsRecords:pipeTrigger\"\n    let-rowIndex=\"index\" [igxForScrollOrientation]=\"'vertical'\"\n    [igxForContainerSize]='calcHeight' [igxForItemSize]=\"rowHeight\" #verticalScrollContainer (onChunkPreload)=\"dataLoading($event)\">\n        <ng-template #record_template>\n            <igx-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [rowData]=\"rowData\" #row>\n            </igx-grid-row>\n        </ng-template>\n        <ng-template #group_template>\n            <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row>\n            </igx-grid-groupby-row>\n        </ng-template>\n        <ng-container *igxTemplateOutlet=\"isGroupByRecord(rowData) ? group_template : record_template; context: getContext(rowData) \"></ng-container>\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n    <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    <div class=\"igx-grid__row-editing-outlet\" igxOverlayOutlet #igxRowEditingOverlayOutlet></div>\n</div>\n\n\n<div class=\"igx-grid__tfoot\" role=\"rowgroup\" [style.width.px]='calcWidth' #tfoot>\n    <div *ngIf=\"hasSummarizedColumns\" class=\"igx-grid__summaries\" [style.height.px]=\"summariesHeight\" role=\"row\" #summaries>\n        <ng-container *ngIf=\"groupingExpressions.length > 0\">\n            <div class=\"igx-grid__row-indentation igx-grid__row-indentation--level-{{groupingExpressions.length}}\"></div>\n        </ng-container>\n        <ng-container *ngIf=\"summariesMargin\">\n            <div\n            class=\"igx-grid__summaries-patch\"\n            [style.min-width.px]=\"summariesMargin\"\n            [style.flex-basis.px]=\"summariesMargin\"\n            ></div>\n        </ng-container>\n        <ng-container *ngIf=\"pinnedColumns.length > 0\">\n            <igx-grid-summary [gridID]=\"id\" *ngFor=\"let col of notGroups(pinnedColumns)\"  [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width'></igx-grid-summary>\n        </ng-container>\n        <ng-template igxGridFor let-col [igxGridForOf]=\"notGroups(unpinnedColumns)\" [igxForScrollOrientation]=\"'horizontal'\" [igxForScrollContainer]=\"parentVirtDir\" [igxForContainerSize]='unpinnedWidth' [igxForTrackBy]='trackColumnChanges' #summaryContainer>\n            <igx-grid-summary [gridID]=\"id\" [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width'></igx-grid-summary>\n        </ng-template>\n    </div>\n</div>\n\n<div class=\"igx-grid__scroll\" [style.height]=\"'18px'\" #scr [hidden]=\"unpinnedWidth - totalWidth >= 0\">\n    <div class=\"igx-grid__scroll-start\" [style.width.px]='pinnedWidth' [hidden]=\"pinnedWidth === 0\"></div>\n    <div class=\"igx-grid__scroll-main\" [style.width.px]='unpinnedWidth'>\n        <ng-template igxGridFor [igxGridForOf]='[]' #scrollContainer>\n        </ng-template>\n    </div>\n</div>\n\n<div class=\"igx-paginator igx-grid-paginator\" *ngIf=\"paging\" #paginator>\n    <ng-container *ngTemplateOutlet=\"paginationTemplate ? paginationTemplate : defaultPager; context: { $implicit: this }\">\n    </ng-container>\n</div>\n\n<ng-template #emptyFilteredGrid>\n    <span class=\"igx-grid__tbody-message\">{{emptyFilteredGridMessage}}</span>\n</ng-template>\n\n<ng-template #defaultEmptyGrid>\n    <span class=\"igx-grid__tbody-message\">{{emptyGridMessage}}</span>\n</ng-template>\n\n<ng-template #defaultDropArea>\n    <igx-icon fontSet=\"material\" class=\"igx-drop-area__icon\">group_work</igx-icon>\n    <span class=\"igx-drop-area__text\">{{dropAreaMessage}}</span>\n</ng-template>\n\n<div *ngIf=\"rowEditable\" igxToggle>\n    <div [className]=\"bannerClass\">\n        <ng-container *ngTemplateOutlet=\"rowEditContainer; context: { rowChangesCount: rowChangesCount, endEdit: endEdit.bind(this) }\"></ng-container>\n    </div>\n</div>\n<ng-template #defaultRowEditText>\n    You have {{ rowChangesCount }} changes in this row\n</ng-template>\n<ng-template #defaultRowEditActions>\n    <button igxButton igxRowEditTabStop (click)=\"endEdit(false, $event)\">Cancel</button>\n    <button igxButton igxRowEditTabStop (click)=\"endEdit(true, $event)\">Done</button>\n</ng-template>\n<ng-template #defaultRowEditTemplate>\n    <div class=\"igx-banner__message\">\n        <span class=\"igx-banner__text\">\n            <ng-container *ngTemplateOutlet=\"rowEditText ? rowEditText : defaultRowEditText; context: { $implicit: rowChangesCount }\"></ng-container>\n        </span>\n    </div>\n    <div class=\"igx-banner__actions\">\n        <div class=\"igx-banner__row\">\n            <ng-container *ngTemplateOutlet=\"rowEditActions ? rowEditActions : defaultRowEditActions; context: { $implicit: endEdit.bind(this) }\"></ng-container>\n        </div>\n    </div>\n</ng-template>\n\n<div class=\"igx-grid__outlet\" #igxFilteringOverlayOutlet igxOverlayOutlet></div>\n`\n})\nexport class IgxGridComponent extends IgxGridBaseComponent implements OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-grid-${NEXT_ID++}`;\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions = [];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer;\n    private _hideGroupedColumns = false;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        if (this._id !== value) {\n            const oldId = this._id;\n            this._id = value;\n            this._gridAPI.reset(oldId, this._id);\n        }\n    }\n\n    private _gridAPI: IgxGridAPIService;\n\n    constructor(\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) _transactions: TransactionService<Transaction, State>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxGridNavigationService,\n        filteringService: IgxFilteringService) {\n            super(gridAPI, selection, _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                  filteringService);\n            this._gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    /**\n     * Returns the group by state of the `IgxGridComponent`.\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpressions(): ISortingExpression[] {\n        return this._groupingExpressions;\n    }\n\n    /**\n     * Sets the group by state of the `IgxGridComponent` and emits the `onGroupingDone`\n     * event with the appropriate arguments.\n     * ```typescript\n     * this.grid.groupingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Asc,\n     *     ignoreCase: false\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpressions(value: ISortingExpression[]) {\n        if (value && value.length > 10) {\n            throw Error('Maximum amount of grouped columns is 10.');\n        }\n        const oldExpressions: Array<ISortingExpression> = this.groupingExpressions;\n        const newExpressions: Array<ISortingExpression> = value;\n        this._groupingExpressions = cloneArray(value);\n        this.chipsGoupingExpressions = cloneArray(value);\n        if (this._gridAPI.get(this.id)) {\n            this._gridAPI.arrange_sorting_expressions(this.id);\n            /* grouping should work in conjunction with sorting\n            and without overriding separate sorting expressions */\n            this._applyGrouping();\n            this.cdr.markForCheck();\n        } else {\n            // setter called before grid is registered in grid API service\n            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);\n        }\n        if (JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {\n            const groupedCols: Array<IgxColumnComponent> | IgxColumnComponent = [];\n            const ungroupedCols: Array<IgxColumnComponent> | IgxColumnComponent = [];\n            const groupedColsArr = newExpressions.filter((obj) => {\n                return !oldExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            groupedColsArr.forEach((elem) => {\n                groupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const ungroupedColsArr = oldExpressions.filter((obj) => {\n                return !newExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            ungroupedColsArr.forEach((elem) => {\n                ungroupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const groupingDoneArgs: IGroupingDoneEventArgs = {\n                expressions: newExpressions,\n                groupedColumns: groupedCols,\n                ungroupedColumns: ungroupedCols\n            };\n            this.onGroupingDone.emit(groupingDoneArgs);\n    }\n    }\n\n    /**\n     * Returns a list of expansion states for group rows.\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * ```typescript\n     * const groupExpState = this.grid.groupingExpansionState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpansionState() {\n        return this._groupingExpandState;\n    }\n\n    /**\n     * Sets a list of expansion states for group rows.\n     * ```typescript\n     *      this.grid.groupingExpansionState = [{\n     *      expanded: false,\n     *      hierarchy: [{ fieldName: 'ID', value: 1 }]\n     *   }];\n     * // You can use DataUtil.getHierarchy(groupRow) to get the group `IgxGridRowComponent` hierarchy.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpansionState(value) {\n        const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n\n        let highlightItem = null;\n        if (this.collapsedHighlightedItem) {\n            highlightItem = this.collapsedHighlightedItem.item;\n        } else if (this.lastSearchInfo.matchInfoCache.length) {\n            highlightItem = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex].item;\n        }\n\n        this._groupingExpandState = cloneArray(value);\n\n        this.refreshSearch();\n\n        if (highlightItem !== null && this.groupingExpressions.length) {\n            const index = this.filteredSortedData.indexOf(highlightItem);\n            const groupRow = this.getGroupByRecords()[index];\n\n            if (!this.isExpandedGroup(groupRow)) {\n                IgxTextHighlightDirective.clearActiveHighlight(this.id);\n                this.collapsedHighlightedItem = {\n                    info: activeInfo,\n                    item: highlightItem\n                };\n            } else if (this.collapsedHighlightedItem !== null) {\n                const collapsedInfo = this.collapsedHighlightedItem.info;\n                IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                    columnIndex: collapsedInfo.columnIndex,\n                    rowIndex: collapsedInfo.rowIndex,\n                    index: collapsedInfo.index,\n                    page: collapsedInfo.page\n                });\n            }\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * An @Input property that determines whether created groups are rendered expanded or collapsed.\n     * The default rendered state is expanded.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public groupsExpanded = true;\n\n    /**\n     * A hierarchical representation of the group by records.\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupsRecords: IGroupByRecord[] = [];\n\n    /**\n     * An @Input property that sets whether the grouped columns should be hidden as well.\n     * The default value is \"false\"\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public get hideGroupedColumns() {\n        return this._hideGroupedColumns;\n    }\n\n    public set hideGroupedColumns(value: boolean) {\n        if (value) {\n            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();\n        } else {\n            this.groupingDiffer = null;\n        }\n        if (this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(value);\n        }\n\n        this._hideGroupedColumns = value;\n    }\n\n    /**\n     * An @Input property that sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public dropAreaMessage = 'Drag a column header and drop it here to group by that column.';\n\n    /**\n     * An @Input property that sets the template that will be rendered as a GroupBy drop area.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     *\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     * ```ts\n     * @ViewChild('myDropArea', { read: TemplateRef })\n     * public dropAreaRef: TemplateRef<any>;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public dropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Emitted when a new `IgxColumnComponent` gets grouped/ungrouped, or multiple columns get\n     * grouped/ungrouped at once by using the Group By API.\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * ```typescript\n     * groupingDone(event: IGroupingDoneEventArgs){\n     *     const expressions = event.expressions;\n     *     //the newly grouped columns\n     *     const groupedColumns = event.groupedColumns;\n     *     //the newly ungrouped columns\n     *     const ungroupedColumns = event.ungroupedColumns;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onGroupingDone = new EventEmitter<IGroupingDoneEventArgs>();\n\n    @Output()\n    public onFocusChange = new EventEmitter<IGridFocusChangeEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective })\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n\n    @ViewChildren(IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent })\n    private _groupsRowList: QueryList<IgxGridGroupByRowComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultDropArea', { read: TemplateRef })\n    public defaultDropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * A list of all group rows.\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get groupsRowList() {\n        const res = new QueryList<any>();\n        if (!this._groupsRowList) {\n            return res;\n        }\n        const rList = this._groupsRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('groupArea')\n    public groupArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get groupAreaHostClass(): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 'igx-drop-area--cosy';\n            case DisplayDensity.compact:\n                return 'igx-drop-area--compact';\n            default:\n                return 'igx-drop-area';\n        }\n    }\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group row.\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupRowTemplate(): TemplateRef<any> {\n        return this._groupRowTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group `IgxGridRowComponent`.\n     * ```typescript\n     * this.grid.groupRowTemplate = myRowTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupRowTemplate(template: TemplateRef<any>) {\n        this._groupRowTemplate = template;\n        this.markForCheck();\n    }\n\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupAreaTemplate(): TemplateRef<any> {\n        return this._groupAreaTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupAreaTemplate(template: TemplateRef<any>) {\n        this._groupAreaTemplate = template;\n        this.markForCheck();\n    }\n\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n            { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n            { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n            { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n        ]);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupBy(expression: ISortingExpression | Array<ISortingExpression>): void;\n    public groupBy(...rest): void {\n        this.endEdit(true);\n        this._gridAPI.submit_value(this.id);\n        if (rest.length === 1 && rest[0] instanceof Array) {\n            this._groupByMultiple(rest[0]);\n        } else {\n            this._groupBy(rest[0]);\n        }\n        this.cdr.detectChanges();\n        this.calculateGridSizes();\n        this.restoreHighlight();\n    }\n\n    /**\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     *\n     */\n    public clearGrouping(name?: string | Array<string>): void {\n        this._gridAPI.clear_groupby(this.id, name);\n        this.calculateGridSizes();\n        this.restoreHighlight();\n    }\n\n    /**\n     * Returns if a group is expanded or not.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        const state: IGroupByExpandState = this._getStateForGroupRow(group);\n        return state ? state.expanded : this.groupsExpanded;\n    }\n\n    /**\n     * Toggles the expansion state of a group.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleGroup(groupRow: IGroupByRecord) {\n        this._toggleGroup(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    public isGroupByRecord(record: any): boolean {\n        // return record.records instance of GroupedRecords fails under Webpack\n        return record.records && record.records.length;\n    }\n\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleAllGroupRows() {\n        this.groupingExpansionState = [];\n        this.groupsExpanded = !this.groupsExpanded;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get hasGroupableColumns(): boolean {\n        return this.columnList.some((col) => col.groupable);\n    }\n\n    private _setGroupColsVisibility(value) {\n        this.groupingExpressions.forEach((expr) => {\n            const col = this.getColumnByName(expr.fieldName);\n            col.hidden = value;\n        });\n    }\n\n    /**\n     * Returns if the grid's group by drop area is visible.\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get dropAreaVisible(): boolean {\n        return (this.draggedColumn && this.draggedColumn.groupable) ||\n            !this.chipsGoupingExpressions.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _groupBy(expression: ISortingExpression) {\n        this._gridAPI.groupBy(this.id, expression.fieldName, expression.dir, expression.ignoreCase, expression.strategy);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _groupByMultiple(expressions: ISortingExpression[]) {\n        this._gridAPI.groupBy_multiple(this.id, expressions);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState {\n        return this._gridAPI.groupBy_get_expanded_for_group(this.id, groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_toggle_group(this.id, groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _applyGrouping() {\n        this._gridAPI.sort_multiple(this.id, this._groupingExpressions);\n    }\n\n    /**\n    * @hidden\n    */\n   public getContext(rowData): any {\n        return {\n            $implicit: rowData,\n            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : 'dataRow'\n        };\n    }\n\n    // This method's idea is to get by how much each data row is offset by the group by rows before it.\n    /**\n    * @hidden\n    */\n    protected getGroupIncrementData(): number[] {\n        if (this.groupingExpressions && this.groupingExpressions.length) {\n            const groupsRecords = this.getGroupByRecords();\n            const groupByIncrements = [];\n            const values = [];\n\n            let prevHierarchy = null;\n            let increment = 0;\n\n            groupsRecords.forEach((gbr) => {\n                if (values.indexOf(gbr) === -1) {\n                    let levelIncrement = 1;\n\n                    if (prevHierarchy !== null) {\n                        levelIncrement += this.getLevelIncrement(0, gbr.groupParent, prevHierarchy.groupParent);\n                    } else {\n                        // This is the first level we stumble upon, so we haven't accounted for any of its parents\n                        levelIncrement += gbr.level;\n                    }\n\n                    increment += levelIncrement;\n                    prevHierarchy = gbr;\n                    values.push(gbr);\n                }\n\n                groupByIncrements.push(increment);\n            });\n            return groupByIncrements;\n        } else {\n            return null;\n        }\n    }\n\n    private getLevelIncrement(currentIncrement, currentHierarchy, prevHierarchy) {\n        if (currentHierarchy !== prevHierarchy && !!prevHierarchy && !!currentHierarchy) {\n            return this.getLevelIncrement(++currentIncrement, currentHierarchy.groupParent, prevHierarchy.groupParent);\n        } else {\n            return currentIncrement;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupByRecords(): IGroupByRecord[] {\n        if (this.groupingExpressions && this.groupingExpressions.length) {\n            const state = {\n                expressions: this.groupingExpressions,\n                expansion: this.groupingExpansionState,\n                defaultExpanded: this.groupsExpanded\n            };\n\n            return DataUtil.group(cloneArray(this.filteredSortedData), state).metadata;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipRemoved(event: IBaseChipEventArgs) {\n        this.clearGrouping(event.owner.id);\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsOrderChanged(event: IChipsAreaReorderEventArgs) {\n        const newGrouping = [];\n        for (let i = 0; i < event.chipsArray.length; i++) {\n            const expr = this.groupingExpressions.filter((item) => {\n                return item.fieldName === event.chipsArray[i].id;\n            })[0];\n\n            if (!this.getColumnByName(expr.fieldName).groupable) {\n                // disallow changing order if there are columns with groupable: false\n                return;\n            }\n            newGrouping.push(expr);\n        }\n        this.groupingExpansionState = [];\n        this.chipsGoupingExpressions = newGrouping;\n\n        if (event.originalEvent instanceof KeyboardEvent) {\n            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.\n            this.groupingExpressions = this.chipsGoupingExpressions;\n        }\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsMovingEnded() {\n        this.groupingExpressions = this.chipsGoupingExpressions;\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipClicked(event: IChipClickEventArgs) {\n        const sortingExpr = this.sortingExpressions;\n        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n        columnExpr.dir = 3 - columnExpr.dir;\n        this.sort(columnExpr);\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: IChipKeyDownEventArgs) {\n        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {\n            const sortingExpr = this.sortingExpressions;\n            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n            columnExpr.dir = 3 - columnExpr.dir;\n            this.sort(columnExpr);\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return this.groupArea ? this.groupArea.nativeElement.offsetHeight : 0;\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        let sum = super.getPinnedWidth(takeHidden);\n\n        if (this.groupingExpressions.length > 0 && this.headerGroupContainer) {\n            sum += this.headerGroupContainer.nativeElement.clientWidth;\n        }\n        return sum;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: number, column: number, page: number, groupByRecord?: IGroupByRecord): void {\n        if (groupByRecord && !this.isExpandedGroup(groupByRecord)) {\n            this.toggleGroup(groupByRecord);\n        }\n\n        super.scrollTo(row, column, page, groupByRecord);\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveFilteredSortedData(): any[] {\n        let data: any[] = super.resolveFilteredSortedData();\n\n        if (this.sortingExpressions &&\n            this.sortingExpressions.length > 0) {\n\n            const sortingPipe = new IgxGridSortingPipe(this._gridAPI);\n            data = sortingPipe.transform(data, this.sortingExpressions, this.id, -1);\n        }\n        return data;\n    }\n\n    /**\n    * @hidden\n    */\n   public get dropAreaTemplateResolved(): TemplateRef<any> {\n        if (this.dropAreaTemplate) {\n            return this.dropAreaTemplate;\n        } else {\n            return this.defaultDropAreaTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.groupTemplate) {\n            this._groupRowTemplate = this.groupTemplate.template;\n        }\n\n        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(this.hideGroupedColumns);\n        }\n        super.ngAfterContentInit();\n    }\n\n    public ngOnInit() {\n        super.ngOnInit();\n        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe(() => this.endEdit(true));\n    }\n\n    public ngDoCheck(): void {\n        if (this.groupingDiffer) {\n            const changes = this.groupingDiffer.diff(this.groupingExpressions);\n            if (changes && this.columnList) {\n                changes.forEachAddedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = true;\n                });\n                changes.forEachRemovedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = false;\n                });\n            }\n        }\n    }\n\n}\n","import { Component, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxRowComponent } from '../row.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-row',\n    template: `<ng-container *ngIf=\"grid.groupingExpressions.length > 0\">\n    <div class=\"igx-grid__row-indentation igx-grid__row-indentation--level-{{grid.groupingExpressions.length}}\"></div>\n</ng-container>\n<ng-container *ngIf=\"rowSelectable\">\n    <div class=\"igx-grid__cbx-selection\">\n        <igx-checkbox [checked]=\"isSelected\" (change)=\"onCheckboxClick($event)\" disableRipple=\"true\" [aria-label]=\"rowCheckboxAriaLabel\"></igx-checkbox>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"pinnedColumns.length > 0\">\n    <igx-grid-cell *ngFor=\"let col of notGroups(pinnedColumns)\" [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\"></igx-grid-cell>\n</ng-container>\n<ng-template igxGridFor let-col [igxGridForOf]=\"notGroups(unpinnedColumns)\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]='grid.unpinnedWidth' [igxForTrackBy]='grid.trackColumnChanges' #igxDirRef>\n    <igx-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\"></igx-grid-cell>\n</ng-template>\n`,\n    providers: [{provide: IgxRowComponent, useExisting: forwardRef(() => IgxGridRowComponent)}]\n})\nexport class IgxGridRowComponent extends IgxRowComponent<IgxGridComponent> {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n    IgxGroupAreaDropDirective,\n    IgxGroupByRowTemplateDirective\n} from './grid.directives';\nimport { IgxGridComponent } from './grid.component';\nimport {\n    IgxGridPagingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPreGroupingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n} from './grid.pipes';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { DeprecateMethod } from '../../core/deprecateDecorators';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxGridComponent,\n    IgxGridRowComponent,\n    IgxGridGroupByRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridPreGroupingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n  ],\n  exports: [\n    IgxGridComponent,\n    IgxGridGroupByRowComponent,\n    IgxGridRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridCommonModule\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule\n  ]\n})\nexport class IgxGridModule {\n  @DeprecateMethod('IgxGridModule.forRoot method is deprecated. Use IgxGridModule instead.')\n  public static forRoot() {\n    return {\n        ngModule: IgxGridModule\n    };\n  }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { IgxColumnComponent } from '../column.component';\nimport { first } from 'rxjs/operators';\n\nexport class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {\n    public get_all_data(id: string, transactions?: boolean): any[] {\n        const grid = this.get(id);\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;\n        return data ? data : [];\n    }\n\n    public expand_row(id: string, rowID: any) {\n        const grid = this.get(id);\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, true);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public collapse_row(id: string, rowID: any) {\n        const grid = this.get(id);\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, false);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public toggle_row_expansion(id: string, rowID: any) {\n        const grid = this.get(id);\n        const expandedStates = grid.expansionStates;\n        const treeRecord = grid.records.get(rowID);\n\n        if (treeRecord) {\n            const isExpanded = this.get_row_expansion_state(id, rowID, treeRecord.level);\n            expandedStates.set(rowID, !isExpanded);\n            grid.expansionStates = expandedStates;\n        }\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public trigger_row_expansion_toggle(id: string, row: ITreeGridRecord, expanded: boolean, event?: Event, visibleColumnIndex?) {\n        const grid = this.get(id);\n\n        if (!row.children || row.children.length <= 0 && row.expanded === expanded) {\n            return;\n        }\n\n        const args: IRowToggleEventArgs = {\n            rowID: row.rowID,\n            expanded: expanded,\n            event: event,\n            cancel: false\n        };\n        grid.onRowToggle.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n        visibleColumnIndex = visibleColumnIndex ? visibleColumnIndex : 0;\n        const groupRowIndex = super.get_row_by_key(id, row.rowID).index;\n        const shouldScroll = !(grid.unpinnedWidth - grid.totalWidth >= 0);\n        const isScrolledToBottom = grid.rowList.length > 0 && grid.rowList.last.index ===\n        grid.verticalScrollContainer.igxForOf.length - 1;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(row.rowID, expanded);\n        grid.expansionStates = expandedStates;\n\n        if (isScrolledToBottom) {\n            grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    grid.nativeElement.querySelector(\n                        `[data-rowIndex=\"${groupRowIndex}\"][data-visibleindex=\"${visibleColumnIndex}\"]`).focus();\n                });\n        }\n        if (expanded) {\n            grid.verticalScrollContainer.getVerticalScroll().dispatchEvent(new Event('scroll'));\n            if (shouldScroll) {\n                grid.parentVirtDir.getHorizontalScroll().dispatchEvent(new Event('scroll'));\n            }\n        }\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_row_expansion_state(id: string, rowID: any, indentationLevel: number): boolean {\n        const grid = this.get(id);\n        const states = grid.expansionStates;\n        const expanded = states.get(rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return indentationLevel < grid.expansionDepth;\n        }\n    }\n\n    protected update_row_in_array(id: string, value: any, rowID: any, index: number) {\n        const grid = this.get(id);\n        if (grid.primaryKey && grid.foreignKey) {\n            super.update_row_in_array(id, value, rowID, index);\n        } else {\n            const record = grid.records.get(rowID);\n            const childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;\n            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            childData[index] = value;\n        }\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number && column.visibleIndex !== 0;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ElementRef,\n    HostBinding,\n    Input,\n    IterableDiffers,\n    ViewContainerRef,\n    Output,\n    EventEmitter,\n    Inject,\n    NgZone,\n    forwardRef\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { TransactionService, HierarchicalTransaction, HierarchicalState, TransactionType } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { mergeObjects } from '../../core/utils';\nimport { IgxHierarchicalTransactionService } from '../../services';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-tree-grid',\n    template: `<igx-grid-toolbar role=\"rowgroup\" [style.width.px]=\"calcWidth\" *ngIf=\"shouldShowToolbar\" [gridID]=\"id\" [displayDensity]=\"displayDensity\" #toolbar>\n</igx-grid-toolbar>\n\n<ng-template #defaultPager let-api>\n    <button [disabled]=\"api.isFirstPage\" (click)=\"api.paginate(0)\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">first_page</igx-icon>\n    </button>\n    <button [disabled]=\"api.isFirstPage\" (click)=\"api.previousPage()\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">chevron_left</igx-icon>\n    </button>\n    <span>{{ api.page + 1 }} of {{ api.totalPages }}</span>\n    <button [disabled]=\"api.isLastPage\" (click)=\"api.nextPage()\" igxRipple igxRippleCentered=\"true\" igxButton=\"icon\">\n        <igx-icon fontSet=\"material\">chevron_right</igx-icon>\n    </button>\n        <button [disabled]=\"api.isLastPage\" (click)=\"api.paginate(api.totalPages - 1)\" igxButton=\"icon\" igxRipple igxRippleCentered=\"true\">\n        <igx-icon fontSet=\"material\">last_page</igx-icon>\n    </button>\n    <select style=\"margin-left: 1rem;\" (change)=\"api.perPage = $event.target.value\">\n            <option [value]=\"val\" [selected]=\"api.perPage == val\" *ngFor=\"let val of [5, 10, 15, 25, 50, 100, 500]\">{{ val }}</option>\n    </select>\n</ng-template>\n\n<div class=\"igx-grid__thead\" role=\"rowgroup\" [style.width.px]='calcWidth' #theadRow>\n    <div class=\"igx-grid__tr\" [style.width.px]='calcWidth' role=\"row\">\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-left\"></span>\n        <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n        <ng-container *ngIf=\"rowSelectable\">\n            <div class=\"igx-grid__cbx-selection\" #headerCheckboxContainer>\n                <igx-checkbox [checked]=\"allRowsSelected\" (change)=\"onHeaderCheckboxClick($event)\" disableRipple=\"true\" [aria-label]=\"headerCheckboxAriaLabel\" #headerCheckbox></igx-checkbox>\n            </div>\n        </ng-container>\n        <ng-container *ngIf=\"pinnedColumns.length > 0\">\n            <ng-template ngFor let-col [ngForOf]=\"onlyTopLevel(pinnedColumns)\">\n                <div class=\"igx-grid__thead-item igx-grid__th--pinned\">\n                    <igx-grid-header [igxColumnMovingDrag]=\"col\" [attr.droppable]=\"true\" [igxColumnMovingDrop]=\"col\" [gridID]=\"id\"\n                        [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\"></igx-grid-header>\n                    <igx-grid-filtering-cell *ngIf=\"allowFiltering && !col.columnGroup && filteringService.filteredColumn !== col\"\n                        [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width' [style.max-width.px]='col.width'></igx-grid-filtering-cell>\n                </div>\n            </ng-template>\n        </ng-container>\n        <ng-template igxGridFor let-col [igxGridForOf]=\"onlyTopLevel(unpinnedColumns)\" [igxForScrollOrientation]=\"'horizontal'\" [igxForScrollContainer]=\"parentVirtDir\"\n            [igxForContainerSize]='unpinnedWidth' [igxForTrackBy]='trackColumnChanges' #headerContainer>\n            <div class=\"igx-grid__thead-item\">\n                <igx-grid-header [igxColumnMovingDrag]=\"col\" [attr.droppable]=\"true\" [igxColumnMovingDrop]=\"col\" [gridID]=\"id\" [column]=\"col\"\n                    [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width'></igx-grid-header>\n                <igx-grid-filtering-cell *ngIf=\"allowFiltering && !col.columnGroup && filteringService.filteredColumn !== col\"\n                    [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width' [style.max-width.px]='col.width'></igx-grid-filtering-cell>\n            </div>\n        </ng-template>\n        <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    </div>\n    <igx-grid-filtering-row *ngIf=\"filteringService.isFilterRowVisible\" [column]=\"filteringService.filteredColumn\"></igx-grid-filtering-row>\n</div>\n\n<div class=\"igx-grid__tbody\" role=\"rowgroup\" [style.height.px]='calcHeight' [style.width.px]='calcWidth' #tbody (scroll)='scrollHandler($event)' (wheel)=\"wheelHandler()\">\n    <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length <= 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-left\"></span>\n    <span *ngIf=\"hasMovableColumns && draggedColumn && pinnedColumns.length > 0\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"left\" class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\n    <ng-template igxGridFor let-rowData [igxGridForOf]=\"data \n\t| treeGridTransaction:id:pipeTrigger\t\n\t| treeGridHierarchizing:primaryKey:foreignKey:childDataKey:id:pipeTrigger\n    | treeGridFiltering:filteringExpressionsTree:id:pipeTrigger \n    | treeGridSorting:sortingExpressions:id:pipeTrigger\n    | treeGridFlattening:id:expansionDepth:expansionStates:pipeTrigger\n    | treeGridPaging:page:perPage:id:pipeTrigger\"\n\n    let-rowIndex=\"index\" [igxForScrollOrientation]=\"'vertical'\"\n    [igxForContainerSize]='calcHeight' [igxForItemSize]=\"rowHeight\" #verticalScrollContainer (onChunkPreload)=\"dataLoading($event)\">\n        <ng-template #record_template>\n            <igx-tree-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [treeRow]=\"rowData\" #row>\n            </igx-tree-grid-row>\n        </ng-template>\n     \n        <ng-container *igxTemplateOutlet=\"record_template; context: getContext(rowData) \"></ng-container>\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n    <span *ngIf=\"hasMovableColumns && draggedColumn\" [igxColumnMovingDrop]=\"parentVirtDir\" [attr.droppable]=\"true\" id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\n    <div class=\"igx-grid__row-editing-outlet\" igxOverlayOutlet #igxRowEditingOverlayOutlet></div>\n</div>\n\n<div class=\"igx-grid__tfoot\" role=\"rowgroup\" [style.width.px]='calcWidth' #tfoot>\n    <!-- Hiding until summaries are implemented for TreeGrid -->\n    <!-- <div *ngIf=\"hasSummarizedColumns\" class=\"igx-grid__summaries\" [style.height.px]=\"summariesHeight\" role=\"row\" #summaries>\n        <ng-container *ngIf=\"summariesMargin\">\n            <div\n            class=\"igx-grid__summaries-patch\"\n            [style.min-width.px]=\"summariesMargin\"\n            [style.flex-basis.px]=\"summariesMargin\"\n            ></div>\n        </ng-container>\n        <ng-container *ngIf=\"pinnedColumns.length > 0\">\n            <igx-grid-summary [gridID]=\"id\" *ngFor=\"let col of notGroups(pinnedColumns)\"  [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width'></igx-grid-summary>\n        </ng-container>\n        <ng-template igxGridFor let-col [igxGridForOf]=\"notGroups(unpinnedColumns)\" [igxForScrollOrientation]=\"'horizontal'\" [igxForScrollContainer]=\"parentVirtDir\" [igxForContainerSize]='unpinnedWidth' [igxForTrackBy]='trackColumnChanges' #summaryContainer>\n            <igx-grid-summary [gridID]=\"id\" [column]=\"col\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]='col.width'></igx-grid-summary>\n        </ng-template>\n    </div> -->\n</div>\n\n<div class=\"igx-grid__scroll\" [style.height]=\"'18px'\" #scr [hidden]=\"unpinnedWidth - totalWidth >= 0\">\n    <div class=\"igx-grid__scroll-start\" [style.width.px]='pinnedWidth' [hidden]=\"pinnedWidth === 0\"></div>\n    <div class=\"igx-grid__scroll-main\" [style.width.px]='unpinnedWidth'>\n        <ng-template igxGridFor [igxGridForOf]='[]' #scrollContainer>\n        </ng-template>\n    </div>\n</div>\n\n<div class=\"igx-paginator igx-grid-paginator\" *ngIf=\"paging\" #paginator>\n    <ng-container *ngTemplateOutlet=\"paginationTemplate ? paginationTemplate : defaultPager; context: { $implicit: this }\">\n    </ng-container>\n</div>\n\n<ng-template #emptyFilteredGrid>\n    <span class=\"igx-grid__tbody-message\">{{emptyFilteredGridMessage}}</span>\n</ng-template>\n\n<ng-template #defaultEmptyGrid>\n    <span class=\"igx-grid__tbody-message\">{{emptyGridMessage}}</span>\n</ng-template>\n\n<div *ngIf=\"rowEditable\" igxToggle>\n    <div [className]=\"bannerClass\"> \n        <ng-container *ngTemplateOutlet=\"rowEditContainer; context: { rowChangesCount: rowChangesCount, endEdit: endEdit.bind(this) }\"></ng-container>\n    </div>\n</div>\n<ng-template #defaultRowEditTemplate >\n    <div class=\"igx-banner__message\">\n        <span class=\"igx-banner__text\">You have {{ rowChangesCount }} changes in this row</span>\n    </div>\n    <div class=\"igx-banner__actions\">\n        <div class=\"igx-banner__row\">\n            <button igxButton igxRowEditTabStop (click)=\"endEdit(false, $event)\">Cancel</button>\n            <button igxButton igxRowEditTabStop (click)=\"endEdit(true, $event)\">Done</button>\n        </div>\n    </div>\n</ng-template>\n\n<div class=\"igx-grid__outlet\" #igxFilteringOverlayOutlet igxOverlayOutlet></div>\n`,\n    providers: [ IgxGridNavigationService, { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxTreeGridComponent) }, IgxFilteringService]\n})\nexport class IgxTreeGridComponent extends IgxGridBaseComponent {\n    private _id = `igx-tree-grid-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        if (this._id !== value) {\n            const oldId = this._id;\n            this._id = value;\n            this._gridAPI.reset(oldId, this._id);\n        }\n    }\n\n    /**\n     * Get transactions service for the grid.\n     * @experimental @hidden\n     */\n    get transactions(): IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState> {\n        return this._transactions;\n    }\n\n    /**\n    * @hidden\n    */\n    public flatData: any[];\n\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public rootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public records: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRecords: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"employees\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public childDataKey;\n\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"employeeID\" [foreignKey]=\"parentID\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public foreignKey;\n\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"employeeID\" [foreignKey]=\"parentID\" cascadeOnDelete=\"false\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public cascadeOnDelete = true;\n\n    private _expansionDepth = Infinity;\n\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"employees\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionDepth(): number {\n        return this._expansionDepth;\n    }\n\n    public set expansionDepth(value: number) {\n        this._expansionDepth = value;\n        this.cdr.markForCheck();\n    }\n\n    private _expansionStates:  Map<any, boolean> = new Map<any, boolean>();\n\n    /**\n     * Returns a list of key-value pairs [row ID, expansion state]. Includes only states that differ from the default one.\n     * ```typescript\n     * const expansionStates = this.grid.expansionStates;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionStates() {\n        return this._expansionStates;\n    }\n\n    /**\n     * Sets a list of key-value pairs [row ID, expansion state].\n     * ```typescript\n     * const states = new Map<any, boolean>();\n     * states.set(1, true);\n     * this.grid.expansionStates = states;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public set expansionStates(value) {\n        this._expansionStates = this.cloneMap(value);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     * ```typescript\n     * rowToggle(event: IRowToggleEventArgs){\n     *  // the id of the row\n     *  const rowID = event.rowID;\n     *  // the new expansion state\n     *  const newExpandedState = event.expanded;\n     *  // the original event that triggered onRowToggle\n     *  const originalEvent = event.event;\n     *  // whether the event should be cancelled\n     *  event.cancel = true;\n     * }\n     * ```\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Output()\n    public onRowToggle = new EventEmitter<IRowToggleEventArgs>();\n\n    private _gridAPI: IgxTreeGridAPIService;\n\n    constructor(\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxGridNavigationService,\n        filteringService: IgxFilteringService) {\n            super(gridAPI, selection, _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                filteringService);\n        this._gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     * Returns if the `IgxTreeGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    get hasSummarizedColumns(): boolean {\n        return false;\n    }\n\n    private cloneMap(mapIn: Map<any, boolean>):  Map<any, boolean> {\n        const mapCloned: Map<any, boolean> = new Map<any, boolean>();\n\n        mapIn.forEach((value: boolean, key: any, mapObj: Map<any, boolean>) => {\n\n          mapCloned.set(key, value);\n        });\n\n        return mapCloned;\n    }\n\n    /**\n     * Expands the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be expanded.\n     * ```typescript\n     * this.grid.expandRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandRow(rowID: any) {\n        this._gridAPI.expand_row(this.id, rowID);\n    }\n\n    /**\n     * Collapses the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be collapsed.\n     * ```typescript\n     * this.grid.collapseRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseRow(rowID: any) {\n        this._gridAPI.collapse_row(this.id, rowID);\n    }\n\n    /**\n     * Toggles the expansion state of the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be toggled.\n     * ```typescript\n     * this.grid.toggleRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public toggleRow(rowID: any) {\n        this._gridAPI.toggle_row_expansion(this.id, rowID);\n    }\n\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandAll() {\n        this._expansionDepth = Infinity;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseAll() {\n        this._expansionDepth = 0;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    public addRow(data: any, parentRowID?: any) {\n        if (parentRowID) {\n            const parentRecord = this.records.get(parentRowID);\n\n            if (!parentRecord) {\n                throw Error('Invalid parent row ID!');\n            }\n\n            if (this.primaryKey && this.foreignKey) {\n                data[this.foreignKey] = parentRowID;\n                super.addRow(data);\n            } else {\n                const parentData = parentRecord.data;\n                const childKey = this.childDataKey;\n                if (this.transactions.enabled) {\n                    const rowId = this.primaryKey ? data[this.primaryKey] : data;\n                    this.transactions.add({\n                        id: rowId,\n                        parentId: parentRowID,\n                        newValue: data,\n                        type: TransactionType.ADD\n                    } as HierarchicalTransaction,\n                        null);\n                } else {\n                    if (!parentData[childKey]) {\n                        parentData[childKey] = [];\n                    }\n                    parentData[childKey].push(data);\n                }\n\n                this.onRowAdded.emit({ data });\n                this._pipeTrigger++;\n                this.cdr.markForCheck();\n\n                this.refreshSearch();\n            }\n        } else {\n            super.addRow(data);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public deleteRowById(rowId: any) {\n        if (this.transactions.enabled && this.cascadeOnDelete) {\n            this.transactions.startPending();\n        }\n\n        super.deleteRowById(rowId);\n\n        if (this.transactions.enabled && this.cascadeOnDelete) {\n            this.transactions.endPending(true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n         if (this.primaryKey && this.foreignKey) {\n            super.deleteRowFromData(rowID, index);\n\n            if (this.cascadeOnDelete) {\n                const treeRecord = this.records.get(rowID);\n                if (treeRecord && treeRecord.children && treeRecord.children.length > 0) {\n                    for (let i = 0; i < treeRecord.children.length; i++) {\n                        const child = treeRecord.children[i];\n                        super.deleteRowById(child.rowID);\n                    }\n                }\n            }\n       } else {\n            const record = this.records.get(rowID);\n            const childData = record.parent ? record.parent.data[this.childDataKey] : this.data;\n            index = this.primaryKey ? childData.map(c => c[this.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            if (this.transactions.enabled) {\n                this.transactions.add({\n                    id: rowID,\n                    type: TransactionType.DELETE,\n                    newValue: null,\n                    parentId: record.parent ? record.parent.rowID : undefined\n                },\n                this.data);\n            } else {\n                childData.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected calcMaxSummaryHeight() {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    protected restoreHighlight(): void {\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public clearSearch() {\n    }\n\n    /**\n    * @hidden\n    */\n   public getContext(rowData): any {\n        return {\n            $implicit: rowData,\n            templateID: 'dataRow'\n        };\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.flatData[rowIndex], value);\n    }\n}\n","import { Component, forwardRef, Input, ViewChildren, QueryList, HostBinding } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { State, TransactionType } from '../../services';\n\n@Component({\n    selector: 'igx-tree-grid-row',\n    template: `<ng-container *ngIf=\"rowSelectable\">\n    <div class=\"igx-grid__cbx-selection\">\n        <igx-checkbox [checked]=\"isSelected\" (change)=\"onCheckboxClick($event)\" disableRipple=\"true\" [aria-label]=\"rowCheckboxAriaLabel\"></igx-checkbox>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"pinnedColumns.length > 0\">\n    <ng-template ngFor let-col [ngForOf]=\"notGroups(pinnedColumns)\">\n        <ng-template #cellTemplate>\n            <igx-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\" #treeCell></igx-grid-cell>\n            </ng-template>\n        <ng-template #treeCellTemplate>\n            <igx-tree-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\" #treeCell></igx-tree-grid-cell>\n        </ng-template>\n        <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 ? treeCellTemplate : cellTemplate\"></ng-container>\n    </ng-template>\n</ng-container>\n<ng-template igxGridFor let-col [igxGridForOf]=\"notGroups(unpinnedColumns)\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]='grid.unpinnedWidth' [igxForTrackBy]='grid.trackColumnChanges' #igxDirRef>\n    <ng-template #cellTemplate>\n        <igx-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\" #treeCell></igx-grid-cell>\n    </ng-template>\n    <ng-template #treeCellTemplate>\n        <igx-tree-grid-cell [column]=\"col\" [row]=\"this\" [style.min-width.px]=\"col.width\" [style.flex-basis.px]=\"col.width\" [value]=\"rowData[col.field]\" [cellTemplate]=\"col.bodyTemplate\" #treeCell></igx-tree-grid-cell>\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 ? treeCellTemplate : cellTemplate\"></ng-container>\n</ng-template>\n`,\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]\n})\nexport class IgxTreeGridRowComponent extends IgxRowComponent<IgxTreeGridComponent> {\n    private _treeRow: ITreeGridRecord;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1);\n     * const cells = row.cells;\n     * ```\n     */\n    @ViewChildren('treeCell')\n    public cells: QueryList<any>;\n\n    /**\n     * The `ITreeGridRecord` passed to the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const treeRow = row.treeRow;\n     * ```\n     */\n    @Input()\n    public get treeRow(): ITreeGridRecord {\n        return this._treeRow;\n    }\n    public set treeRow(value: ITreeGridRecord) {\n        if (this._treeRow !== value) {\n            this._treeRow = value;\n            this.rowData = this._treeRow.data;\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const expanded = row.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this._treeRow.expanded;\n    }\n\n    /**\n     * Sets a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.expanded = true;\n     * ```\n     */\n    set expanded(value: boolean) {\n        (this.gridAPI as IgxTreeGridAPIService).trigger_row_expansion_toggle(this.gridID, this._treeRow, value);\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const classes = super.resolveClasses();\n        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';\n        return `${classes} ${filteredClass}`;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.hasDeletedParent(this.rowID) || super.isRowDeleted();\n    }\n\n    private hasDeletedParent(rowId: any): boolean {\n        if (this.grid.cascadeOnDelete) {\n            const node = this.grid.records.get(rowId);\n            for (const parentId of node.path) {\n                const state: State = this.grid.transactions.getState(parentId);\n                if (state && state.type === TransactionType.DELETE) {\n                    if (this.gridAPI.get_row_by_key(this.grid.id, parentId).deleted) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray, cloneHierarchicalArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ISortingExpression } from '../../../public_api';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseComponent } from '../grid';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridHierarchizing',\n    pure: true\n})\nexport class IgxTreeGridHierarchizingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.get(id);\n        let hierarchicalRecords: ITreeGridRecord[] = [];\n        const treeGridRecordsMap = new Map<any, ITreeGridRecord>();\n\n        if (primaryKey && foreignKey) {\n            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap);\n            grid.flatData = grid.data;\n        } else if (childDataKey) {\n            const flatData: any[] = [];\n            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined,\n                flatData, 0, treeGridRecordsMap);\n            grid.flatData = flatData;\n        }\n\n        grid.records = treeGridRecordsMap;\n        grid.rootRecords = hierarchicalRecords;\n        return hierarchicalRecords;\n    }\n\n    private getRowID(primaryKey: any, rowData: any) {\n        return primaryKey ? rowData[primaryKey] : rowData;\n    }\n\n    private hierarchizeFlatData(id: string, collection: any[], primaryKey: string, foreignKey: string, map: Map<any, ITreeGridRecord>):\n        ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n        const missingParentRecords: ITreeGridRecord[] = [];\n        collection.forEach(row => {\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, row),\n                data: row,\n                children: [],\n                path: []\n            };\n            const parent = map.get(row[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                if (parent) {\n                    record.path.push(...parent.path);\n                    record.path.push(parent.rowID);\n                }\n                parent.children.push(record);\n            } else {\n                missingParentRecords.push(record);\n            }\n\n            map.set(row[primaryKey], record);\n        });\n\n        missingParentRecords.forEach(record => {\n            const parent = map.get(record.data[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                result.push(record);\n            }\n        });\n\n        this.setIndentationLevels(id, result, 0);\n\n        return result;\n    }\n\n    private setIndentationLevels(id: string, collection: ITreeGridRecord[], indentationLevel: number) {\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            record.level = indentationLevel;\n            record.expanded = this.gridAPI.get_row_expansion_state(id, record.rowID, record.level);\n\n            if (record.children && record.children.length > 0) {\n                this.setIndentationLevels(id, record.children, indentationLevel + 1);\n            }\n        }\n    }\n\n    private hierarchizeRecursive(id: string, collection: any[], primaryKey: string, childDataKey: string,\n        parent: ITreeGridRecord, flatData: any[], indentationLevel: number, map: Map<any, ITreeGridRecord>): ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n\n        for (let i = 0; i < collection.length; i++) {\n            const item = collection[i];\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, item),\n                data: item,\n                parent: parent,\n                level: indentationLevel,\n                path: []\n            };\n            if (parent) {\n                record.path.push(...parent.path);\n                record.path.push(parent.rowID);\n            }\n            record.expanded = this.gridAPI.get_row_expansion_state(id, record.rowID, record.level);\n            flatData.push(item);\n            map.set(record.rowID, record);\n            record.children = item[childDataKey] ?\n                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :\n                undefined;\n            result.push(record);\n        }\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridFlattening',\n    pure: true\n})\nexport class IgxTreeGridFlatteningPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], id: string,\n        expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[] {\n\n        const grid: IgxTreeGridComponent = this.gridAPI.get(id);\n        const data: ITreeGridRecord[] = [];\n\n        grid.processedRootRecords = collection;\n        grid.processedRecords = new Map<any, ITreeGridRecord>();\n\n        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);\n\n        return data;\n    }\n\n    private getFlatDataRecursive(collection: ITreeGridRecord[], data: ITreeGridRecord[] = [],\n        expandedLevels: number, expandedStates: Map<any, boolean>, gridID: string,\n        parentExpanded: boolean) {\n        if (!collection || !collection.length) {\n            return;\n        }\n\n        for (let i = 0; i < collection.length; i++) {\n            const hierarchicalRecord = collection[i];\n\n            if (parentExpanded) {\n                data.push(hierarchicalRecord);\n            }\n\n            const grid: IgxTreeGridComponent = this.gridAPI.get(gridID);\n\n            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(gridID,\n                hierarchicalRecord.rowID, hierarchicalRecord.level);\n            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);\n\n            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);\n\n            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels,\n                expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);\n        }\n    }\n\n    private updateNonProcessedRecordExpansion(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.expanded = record.expanded;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSorting',\n    pure: true\n})\nexport class IgxTreeGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(\n        hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression | ISortingExpression[],\n        id: string,\n        pipeTrigger: number): ITreeGridRecord[] {\n        const state = { expressions: [] };\n        const grid = this.gridAPI.get(id);\n        state.expressions = grid.sortingExpressions;\n\n        let result: ITreeGridRecord[];\n        if (!state.expressions.length) {\n            result = hierarchicalData;\n        } else {\n            result = DataUtil.hierarchicalSort(hierarchicalData, state, undefined);\n        }\n\n        return result;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridPaging',\n    pure: true\n})\nexport class IgxTreeGridPagingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], page = 0, perPage = 15, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        if (!this.gridAPI.get(id).paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: ITreeGridRecord[] = DataUtil.page(cloneArray(collection), state);\n\n        this.gridAPI.get(id).pagingState = state;\n        return result;\n    }\n}\n/** @hidden */\n@Pipe({\n    name: 'treeGridTransaction',\n    pure: true\n})\nexport class IgxTreeGridTransactionPipe implements PipeTransform {\n\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    transform(collection: any[], id: string, pipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.get(id);\n        if (collection && grid.transactions.enabled) {\n            const primaryKey = grid.primaryKey;\n            if (!primaryKey) {\n                return collection;\n            }\n\n            const foreignKey = grid.foreignKey;\n            const childDataKey = grid.childDataKey;\n\n            if (foreignKey) {\n                return DataUtil.mergeTransactions(\n                    cloneArray(collection),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey);\n            } else if (childDataKey) {\n                return DataUtil.mergeHierarchicalTransactions(\n                    cloneHierarchicalArray(collection, childDataKey),\n                    grid.transactions.getAggregatedChanges(true),\n                    childDataKey,\n                    grid.primaryKey\n                );\n            }\n        }\n\n        return collection;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { valToPxlsUsingRange } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseComponent } from '../grid';\n\n@Component({\n    selector: 'igx-tree-grid-cell',\n    template: `<ng-template #defaultCell igxTextHighlight [cssClass]=\"highlightClass\" [activeCssClass]=\"activeHighlightClass\" [groupName]=\"gridID\"\n        [value]=\"formatter ? formatter(value) : value\" [row]=\"rowIndex\" [column]=\"this.column.visibleIndex\" [page]=\"this.grid.page\" [containerClass]=\"'igx-grid__td-text'\">\n    <ng-container *ngIf=\"column.dataType === 'boolean' || column.dataType === 'string' || formatter; else default\" >\n        <div class=\"igx-grid__td-text\">{{ formatter ? formatter(value) : value }}</div>\n    </ng-container>\n    <ng-template #default>\n        <div class=\"igx-grid__td-text\">{{ column.dataType === 'number' ? (value | igxdecimal) : (value | igxdate) }}</div>\n    </ng-template>\n</ng-template>\n<ng-template #inlineEditor  let-cell=\"cell\">\n    <ng-container *ngIf=\"column.dataType === 'string'\">\n        <igx-input-group>\n            <input igxInput [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'number'\">\n        <igx-input-group>\n            <input igxInput [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [igxFocus]=\"focused\"  type=\"number\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'boolean'\">\n        <igx-checkbox [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [checked]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [disableRipple]=\"true\"></igx-checkbox>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'date'\">\n        <igx-datePicker [(ngModel)]=\"gridAPI.get_cell_inEditMode(gridID).cell.editValue\" [labelVisibility]=\"false\"></igx-datePicker>\n    </ng-container>\n</ng-template>\n<ng-container *ngIf=\"!inEditMode\">\n    <ng-container *ngIf=\"indentation > 0\">\n        <div #indentationDiv class=\"igx-grid__tree-cell--padding-level-{{indentation}}\"></div>\n    </ng-container>\n    <div #indicator class=\"igx-grid__tree-grouping-indicator\" [ngStyle]=\"{'visibility': hasChildren ? 'visible' : 'hidden'}\"\n         (click)=\"toggle($event)\" (focus)=\"onIndicatorFocus($event)\" tabindex=\"-1\">\n        <igx-icon *ngIf=\"!expanded\" fontSet=\"material\">chevron_right</igx-icon>\n        <igx-icon *ngIf=\"expanded\" fontSet=\"material\">expand_more</igx-icon>\n    </div>\n</ng-container>\n<ng-container *ngTemplateOutlet=\"template; context: context\">\n</ng-container>\n`\n})\nexport class IgxTreeGridCellComponent extends IgxGridCellComponent {\n    private treeGridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>,\n                selection: IgxSelectionAPIService,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                @Inject(DOCUMENT) public document) {\n        super(gridAPI, selection, cdr, element);\n        this.treeGridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    @ViewChild('indicator', { read: ElementRef })\n    public indicator: ElementRef;\n\n    @ViewChild('indentationDiv', { read: ElementRef })\n    public indentationDiv: ElementRef;\n\n    /**\n     * @hidden\n     */\n    protected resolveStyleClasses(): string {\n        return super.resolveStyleClasses() + ' igx-grid__td--tree-cell';\n    }\n\n    /**\n     * @hidden\n     */\n    public get indentation() {\n        return this.row.treeRow.level;\n    }\n\n    /**\n     * @hidden\n     */\n    public get hasChildren() {\n        return this.row.treeRow.children && this.row.treeRow.children.length > 0;\n    }\n\n    /**\n     * @hidden\n     */\n    get expanded(): boolean {\n        return this.row.expanded;\n    }\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        this.treeGridAPI.trigger_row_expansion_toggle(this.gridID, this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n    }\n\n    /**\n     * @hidden\n     */\n    public onIndicatorFocus(event: Event) {\n        this.gridAPI.submit_value(this.gridID);\n        this.onFocus(event);\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        const indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;\n        const indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);\n        const indicatorMargin = parseFloat(indicatorStyle.marginRight);\n        let leftPadding = 0;\n        if (this.indentationDiv) {\n            const indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);\n            leftPadding = parseFloat(indentationStyle.paddingLeft);\n        }\n        const largestWidth = Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => valToPxlsUsingRange(range, child)));\n        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringState } from '../../data-operations/filtering-state.interface';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent } from '../grid';\n\n/** @hidden */\nexport class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    public filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree): ITreeGridRecord[] {\n        return this.filterImpl(data, expressionsTree, undefined);\n    }\n\n    private filterImpl(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree, parent: ITreeGridRecord): ITreeGridRecord[] {\n        let i;\n        let rec: ITreeGridRecord;\n        const len = data.length;\n        const res: ITreeGridRecord[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = DataUtil.cloneTreeGridRecord(data[i]);\n            rec.parent = parent;\n            if (rec.children) {\n                const filteredChildren = this.filterImpl(rec.children, expressionsTree, rec);\n                rec.children = filteredChildren.length > 0 ? filteredChildren : null;\n            }\n\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            } else if (rec.children && rec.children.length > 0) {\n                rec.isFilteredOutParent = true;\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        const hierarchicalRecord = <ITreeGridRecord>rec;\n        return hierarchicalRecord.data[fieldName];\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridFiltering',\n    pure: true\n})\nexport class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.get(id);\n        const state = { expressionsTree: expressionsTree };\n\n        this.resetFilteredOutProperty(grid.records);\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            grid.filteredData = null;\n            return hierarchyData;\n        }\n\n        DataUtil.mergeDefaultProperties(state, { strategy: new TreeGridFilteringStrategy() });\n        const result = this.filter(hierarchyData, state);\n        const filteredData: any[] = [];\n        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);\n        grid.filteredData = filteredData;\n\n        return result;\n    }\n\n    private resetFilteredOutProperty(map: Map<any, ITreeGridRecord>) {\n        const keys = Array.from(map.keys());\n        for (let i = 0; i < keys.length; i++) {\n            map.get(keys[i]).isFilteredOutParent = undefined;\n        }\n    }\n\n    private expandAllRecursive(grid: IgxTreeGridComponent, data: ITreeGridRecord[],\n        expandedStates: Map<any, boolean>, filteredData: any[]) {\n        for (let i = 0; i < data.length; i++) {\n            const rec = data[i];\n            filteredData.push(rec.data);\n            this.updateNonProcessedRecord(grid, rec);\n\n            if (rec.children && rec.children.length > 0) {\n                expandedStates.set(rec.rowID, true);\n                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);\n            }\n        }\n    }\n\n    private updateNonProcessedRecord(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.isFilteredOutParent = record.isFilteredOutParent;\n    }\n\n    private filter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxTreeGridHierarchizingPipe } from './tree-grid.pipes';\nimport { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';\nimport { IgxTreeGridCellComponent } from './tree-cell.component';\nimport { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';\n\n@NgModule({\n  declarations: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxTreeGridHierarchizingPipe,\n    IgxTreeGridFlatteningPipe,\n    IgxTreeGridSortingPipe,\n    IgxTreeGridFilteringPipe,\n    IgxTreeGridPagingPipe,\n    IgxTreeGridTransactionPipe\n  ],\n  exports: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxGridCommonModule\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule\n  ]\n})\nexport class IgxTreeGridModule {\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\nexport interface IListChild {\n    index: number;\n}\n\nexport enum IgxListPanState { NONE, LEFT, RIGHT }\n\n@Directive({\n    selector: '[igxEmptyList]'\n})\nexport class IgxEmptyListTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxDataLoading]'\n})\nexport class IgxDataLoadingTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemLeftPanning]'\n})\nexport class IgxListItemLeftPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemRightPanning]'\n})\nexport class IgxListItemRightPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { DOCUMENT, ÉµgetDOM as getDOM } from '@angular/platform-browser';\n\nconst EVENT_SUFFIX = 'precise';\n\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n * @hidden\n */\n@Injectable()\nexport class HammerGesturesManager {\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions = {\n        // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)\n        // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803\n        inputClass: Hammer.TouchInput,\n        recognizers: [\n            [ Hammer.Pan, { threshold: 0 } ],\n            [ Hammer.Pinch, { enable: true } ],\n            [ Hammer.Rotate, { enable: true } ],\n            [ Hammer.Swipe, {\n                direction: Hammer.DIRECTION_HORIZONTAL\n            }]\n        ]\n    };\n\n    private _hammerManagers: Array<{ element: EventTarget, manager: HammerManager; }> = [];\n\n    constructor(private _zone: NgZone, @Inject(DOCUMENT) private doc: any) {\n    }\n\n    public supports(eventName: string): boolean {\n        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    public addEventListener(element: HTMLElement,\n                            eventName: string,\n                            eventHandler: (eventObj) => void,\n                            options: object = null): () => void {\n\n        // Creating the manager bind events, must be done outside of angular\n        return this._zone.runOutsideAngular(() => {\n            let mc: HammerManager = this.getManagerForElement(element);\n            if (mc === null) {\n                // new Hammer is a shortcut for Manager with defaults\n                mc = new Hammer(element, this.hammerOptions);\n                this.addManagerForElement(element, mc);\n            }\n            const handler = (eventObj) => { this._zone.run(() => { eventHandler(eventObj); }); };\n            mc.on(eventName, handler);\n            return () => { mc.off(eventName, handler); };\n        });\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    public addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj) => void): () => void {\n        const element = this.getGlobalEventTarget(target);\n\n        // Creating the manager bind events, must be done outside of angular\n        return this.addEventListener(element as HTMLElement, eventName, eventHandler);\n    }\n\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     * @param target Target name\n     */\n    public getGlobalEventTarget(target: string): EventTarget {\n        return getDOM().getGlobalEventTarget(this.doc, target);\n    }\n\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    public setManagerOption(element: EventTarget, event: string, options: any) {\n        const manager = this.getManagerForElement(element);\n        manager.get(event).set(options);\n    }\n\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public addManagerForElement(element: EventTarget, manager: HammerManager) {\n        this._hammerManagers.push({element, manager});\n    }\n\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public getManagerForElement(element: EventTarget): HammerManager {\n        const result =  this._hammerManagers.filter((value, index, array) => {\n            return value.element === element;\n        });\n        return result.length ? result[0].manager : null;\n    }\n\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public removeManagerForElement(element: HTMLElement) {\n        let index: number = null;\n        for (let i = 0; i < this._hammerManagers.length; i++) {\n            if (element === this._hammerManagers[i].element) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== null) {\n            const item = this._hammerManagers.splice(index, 1)[0];\n            // destroy also\n            item.manager.destroy();\n        }\n    }\n\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    public destroy() {\n        for (const item of this._hammerManagers) {\n            item.manager.destroy();\n        }\n        this._hammerManagers = [];\n    }\n}\n","\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    IgxListPanState,\n    IListChild\n} from './list.common';\n\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxListComponent } from './list.component';\n\n// ====================== ITEM ================================\n// The `<igx-item>` component is a container intended for row items in\n// a `<igx-list>` container.\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-list-item',\n    template: `   \n<div *ngIf=\"!isHeader && list.listItemLeftPanningTemplate != null\" #leftPanningTmpl class=\"igx-list__item-right\"\n    [style.width.px]=\"this.element.offsetWidth\" [style.height.px]=\"this.element.offsetHeight\">\n    <ng-container *ngTemplateOutlet=\"list.listItemLeftPanningTemplate.template; context: context\">\n    </ng-container>\n</div>\n\n<div *ngIf=\"!isHeader && list.listItemRightPanningTemplate != null\" #rightPanningTmpl class=\"igx-list__item-left\"\n    [style.width.px]=\"this.element.offsetWidth\" [style.height.px]=\"this.element.offsetHeight\">\n    <ng-container *ngTemplateOutlet=\"list.listItemRightPanningTemplate.template; context: context\">\n    </ng-container>\n</div>\n\n<ng-template #itemsContent>\n    <ng-content></ng-content>\n</ng-template>\n    \n<ng-container *ngIf=\"isHeader\">\n    <ng-container *ngTemplateOutlet=\"itemsContent\">\n    </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!isHeader\">\n    <div class=\"igx-list__item-content\">\n        <ng-container *ngTemplateOutlet=\"itemsContent\">\n        </ng-container>\n    </div>\n</ng-container>\n`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IgxListItemComponent implements IListChild {\n\n    /**\n     *@hidden\n     */\n    private _panState: IgxListPanState = IgxListPanState.NONE;\n\n    /**\n     *@hidden\n     */\n    private panOffset = 0;\n\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('leftPanningTmpl')\n    public leftPanningTemplateElement;\n\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('rightPanningTmpl')\n    public rightPanningTemplateElement;\n\n    constructor(\n        @Inject(forwardRef(() => IgxListComponent))\n        public list: IgxListComponent,\n        private elementRef: ElementRef,\n        private _renderer: Renderer2) {\n    }\n\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public hidden = false;\n\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return this.isHeader ? 'separator' : 'listitem';\n    }\n\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel: string;\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    public touchAction = 'pan-y';\n\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__header')\n    get headerStyle(): boolean {\n        return this.isHeader;\n    }\n\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__item-base')\n    get innerStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this.hidden ? 'none' : '';\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(evt) {\n        this.list.onItemClicked.emit({ item: this, event: evt });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panstart', ['$event'])\n    panStart(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panmove', ['$event'])\n    panMove(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n        const isPanningToLeft = ev.deltaX < 0;\n        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {\n            this.showLeftPanTemplate();\n            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));\n        } else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {\n            this.showRightPanTemplate();\n            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panend', ['$event'])\n    panEnd(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n\n        // the translation offset of the current list item content\n        const relativeOffset = this.panOffset;\n        const widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;\n\n        if (relativeOffset === 0) {\n            return; // no panning has occured\n        }\n\n        const oldPanState = this._panState;\n        if (Math.abs(relativeOffset) < widthTriggeringGrip) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n            this.hideLeftAndRightPanTemplates();\n            return;\n        }\n\n        const dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;\n        const args = { item: this, direction: dir, keepItem: false};\n\n        if (dir === IgxListPanState.LEFT) {\n            this.list.onLeftPan.emit(args);\n        } else {\n            this.list.onRightPan.emit(args);\n        }\n\n        if (args.keepItem === true) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n        } else {\n            if (dir === IgxListPanState.LEFT) {\n                this.setContentElementLeft(this.maxLeft);\n                this._panState = IgxListPanState.LEFT;\n            } else {\n                this.setContentElementLeft(this.maxRight);\n                this._panState = IgxListPanState.RIGHT;\n            }\n        }\n\n        if (oldPanState !== this._panState) {\n            const args2 = { oldState: oldPanState, newState: this._panState, item: this };\n            this.list.onPanStateChange.emit(args2);\n        }\n        this.hideLeftAndRightPanTemplates();\n    }\n\n    /**\n     *@hidden\n     */\n    private showLeftPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');\n    }\n\n    /**\n     *@hidden\n     */\n    private showRightPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');\n    }\n\n    /**\n     *@hidden\n     */\n    private hideLeftAndRightPanTemplates() {\n        setTimeout(() => {\n            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');\n        }, 500);\n    }\n\n    /**\n     *@hidden\n     */\n    private setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {\n        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {\n            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;\n        }\n        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {\n            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;\n        }\n    }\n\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get panState(): IgxListPanState {\n        return this._panState;\n    }\n\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get index(): number {\n        return this.list.children.toArray().indexOf(this);\n    }\n\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get contentElement() {\n        const candidates = this.element.getElementsByClassName('igx-list__item-content');\n        return (candidates && candidates.length > 0) ? candidates[0] : null;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get width() {\n        if (this.element) {\n            return this.element.offsetWidth;\n        }\n    }\n\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxLeft() {\n        return -this.width;\n    }\n\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxRight() {\n        return this.width;\n    }\n\n    /**\n     *@hidden\n     */\n    private setContentElementLeft(value: number) {\n        this.panOffset = value;\n        this.contentElement.style.transform = 'translateX(' + value + 'px)';\n    }\n\n    /**\n     *@hidden\n     */\n    private isTrue(value: boolean): boolean {\n        if (typeof (value) === 'boolean') {\n            return value;\n        } else {\n            return value === 'true';\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\n\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\nimport { IgxListItemComponent } from './list-item.component';\nimport {\n    IgxDataLoadingTemplateDirective,\n    IgxEmptyListTemplateDirective,\n    IgxListPanState,\n    IgxListItemLeftPanningTemplateDirective,\n    IgxListItemRightPanningTemplateDirective} from './list.common';\n\nlet NEXT_ID = 0;\nexport interface IPanStateChangeEventArgs {\n    oldState: IgxListPanState;\n    newState: IgxListPanState;\n    item: IgxListItemComponent;\n}\n\nexport interface IListItemClickEventArgs {\n    item: IgxListItemComponent;\n    event: Event;\n}\n\nexport interface IListItemPanningEventArgs {\n    item: IgxListItemComponent;\n    direction: IgxListPanState;\n    keepItem: boolean;\n}\n\n/**\n * **Ignite UI for Angular List** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)\n *\n * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering\n * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    selector: 'igx-list',\n    template: `<ng-content></ng-content>\n\n<ng-template #defaultEmptyList>\n    <article class=\"message\">\n        <p>There are no items in the list.</p>\n    </article>\n</ng-template>\n\n<ng-template #defaultDataLoading>\n    <article class=\"message\">\n        <p>Loading data from the server...</p>\n    </article>\n</ng-template>\n\n<ng-container *ngIf=\"!children || children.length === 0\">\n    <ng-container *ngTemplateOutlet=\"template; context: context\">\n    </ng-container>\n</ng-container>\n`\n})\nexport class IgxListComponent {\n\n    constructor(public element: ElementRef) {\n    }\n\n    /**\n     * Returns a collection of all items and headers in the list.\n     * ```typescript\n     * let listChildren: QueryList = this.list.children;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChildren(forwardRef(() => IgxListItemComponent))\n    public children: QueryList<IgxListItemComponent>;\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `false`.\n     * ```typescript\n     * let emptyTemplate = this.list.emptyListTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective })\n    public emptyListTemplate: IgxEmptyListTemplateDirective;\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `true`.\n     * ```typescript\n     * let loadingTemplate = this.list.dataLoadingTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective })\n    public dataLoadingTemplate: IgxDataLoadingTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when left panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective })\n    public listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when right panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective })\n    public listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    /**\n     * Provides a threshold after which the item's panning will be completed automatically.\n     * By default this property is set to 0.5 which is 50% of the list item's width.\n     * ```typescript\n     * this.list.panEndTriggeringThreshold = 0.8;\n     * ```\n     */\n    @Input()\n    public panEndTriggeringThreshold = 0.5;\n\n    /**@hidden*/\n    @ViewChild('defaultEmptyList', { read: TemplateRef })\n    protected defaultEmptyListTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ViewChild('defaultDataLoading', { read: TemplateRef })\n    protected defaultDataLoadingTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the `id` of the list.\n     * If not set, the `id` of the first list component will be `\"igx-list-0\"`.\n     * ```html\n     * <igx-list id = \"my-first-list\"></igx-list>\n     * ```\n     * ```typescript\n     * let listId =  this.list.id;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-list-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the left panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLeftPanningAllowed = this.list.allowLeftPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowLeftPanning = false;\n\n    /**\n     * Sets/gets whether the right panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowRightPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isRightPanningAllowed = this.list.allowRightPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowRightPanning = false;\n\n    /**\n     * Sets/gets whether the list is currently loading data.\n     * Set it to display the dataLoadingTemplate while data is being retrieved.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [isLoading]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLoading = this.list.isLoading;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public isLoading = false;\n\n    /**\n     * Emits an event within the current list when left pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\" (onLeftPan)=\"onLeftPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onLeftPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     * Emits an event within the current list when right pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\" (onRightPan)=\"onRightPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onRightPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n    * Emits an event within the current list when pan gesture is executed on list item.\n    * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.\n    * ```html\n    * <igx-list (onPanStateChange) = \"onPanStateChange($event)\"></igx-list>\n    * ```\n    * @memberof IgxListComponent\n    */\n    @Output()\n    public onPanStateChange = new EventEmitter<IPanStateChangeEventArgs>();\n\n    /**\n     * Emits an event within the current list when a list item has been clicked.\n     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.\n     *  ```html\n     * <igx-list (onItemClicked) = \"onItemClicked($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onItemClicked = new EventEmitter<IListItemClickEventArgs>();\n\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let listRole =  this.list.role;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'list';\n    }\n\n    /**\n     * Returns boolean indicating if the list is empty.\n     * ```typescript\n     * let isEmpty =  this.list.isListEmpty;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list-empty')\n    public get isListEmpty(): boolean {\n        return !this.children || this.children.length === 0;\n    }\n\n    /**\n     * Returns boolean indicating if the list has a `cssClass` attribute.\n     * ```typescript\n     * let hasCssClass =  this.list.cssClass;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list')\n    public get cssClass(): boolean {\n        return this.children && this.children.length > 0;\n    }\n\n    /**\n     * Returns the `items` in the list excluding the headers.\n     * ```typescript\n     * let listItems: IgxListItemComponent[] = this.list.items;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get items(): IgxListItemComponent[] {\n        const items: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Returns the headers in the list.\n     * ```typescript\n     * let listHeaders: IgxListItemComponent[] =  this.list.headers;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get headers(): IgxListItemComponent[] {\n        const headers: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list container`\n     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.\n     * ```typescript\n     * let listComponent =  this.list.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Returns the `template` of an empty list.\n     * ```typescript\n     * let listTemplate = this.list.template;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading) {\n            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;\n        } else {\n            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;\n        }\n    }\n}\n\n/**\n * The IgxListModule provides the {@link IgxListComponent} and the {@link IgxListItemComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxListComponent, IgxListItemComponent,\n        IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective],\n    exports: [IgxListComponent, IgxListItemComponent,\n        IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective],\n    imports: [CommonModule, IgxRippleModule]\n})\nexport class IgxListModule {\n}\n","import { Component, HostBinding, Inject,\n    forwardRef, ElementRef, Input, ChangeDetectorRef, OnInit } from '@angular/core';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\n\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-body',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxExpansionPanelBodyComponent implements OnInit {\n    private _labelledBy = '';\n    private _label = '';\n    constructor(@Inject(forwardRef(() => IgxExpansionPanelComponent))\n    public panel: IgxExpansionPanelComponent, public element: ElementRef,\n    public cdr: ChangeDetectorRef) {\n    }\n    @HostBinding('class.igx-expansion-panel__body')\n    public cssClass = `igx-expansion-panel__body`;\n    public _title = '';\n\n    @Input()\n    @HostBinding('attr.aria-label')\n    public get label(): string {\n        return this._label || this.panel.id + '-region';\n    }\n    public set label(val: string) {\n        this._label = val;\n    }\n\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public get labelledBy(): string {\n        return this._labelledBy;\n    }\n    public set labelledBy(val: string) {\n        this._labelledBy = val;\n    }\n\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'region';\n\n    ngOnInit() {\n        this.labelledBy = this.panel.headerId;\n        this.label = this.panel.id + '-region';\n    }\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ContentChild,\n    forwardRef,\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, useAnimation } from '@angular/animations';\nimport { growVerOut, growVerIn } from '../animations/main';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\n\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-expansion-panel',\n    template: `<ng-content select=\"igx-expansion-panel-header\"></ng-content>\n<ng-content *ngIf=\"!collapsed\" select=\"igx-expansion-panel-body\"></ng-content>\n`\n})\nexport class IgxExpansionPanelComponent {\n\n    @Input()\n    public animationSettings: { openAnimation: AnimationReferenceMetadata, closeAnimation: AnimationReferenceMetadata } = {\n        openAnimation: growVerIn,\n        closeAnimation: growVerOut\n    };\n\n    /**\n     * Sets/gets the `id` of the expansion panel component.\n     * If not set, `id` will have value `\"igx-expansion-panel-0\"`;\n     * ```html\n     * <igx-expansion-panel id = \"my-first-expansion-panel\"></igx-expansion-panel>\n     * ```\n     * ```typescript\n     * let panelId =  this.panel.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-expansion-panel-${NEXT_ID++}`;\n\n    @HostBinding('class.igx-expansion-panel')\n    public cssClass = 'igx-expansion-panel';\n\n    @Input()\n    public collapsed = true;\n\n    @Output()\n    public onCollapsed = new EventEmitter<any>();\n\n    @Output()\n    public onExpanded = new EventEmitter<any>();\n\n    public get headerId() {\n        return this.header ? `${this.id}-header` : '';\n    }\n    constructor(\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        private builder: AnimationBuilder) { }\n\n    @ContentChild(forwardRef(() => IgxExpansionPanelBodyComponent), { read: IgxExpansionPanelBodyComponent })\n    public body: IgxExpansionPanelBodyComponent;\n\n    @ContentChild(forwardRef(() => IgxExpansionPanelHeaderComponent), { read: IgxExpansionPanelHeaderComponent })\n    public header: IgxExpansionPanelHeaderComponent;\n\n\n    private playOpenAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.openAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n\n        openAnimationPlayer.onDone(() => {\n            cb();\n            openAnimationPlayer.reset();\n        });\n\n        openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.closeAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n        closeAnimationPlayer.onDone(() => {\n            cb();\n            closeAnimationPlayer.reset();\n        });\n\n        closeAnimationPlayer.play();\n    }\n\n    collapse(evt?: Event) {\n        this.playCloseAnimation(\n            () => {\n                this.onCollapsed.emit({ event: evt, panel: this });\n                this.collapsed = true;\n            }\n        );\n    }\n\n    expand(evt?: Event) {\n        this.collapsed = false;\n        this.cdr.detectChanges();\n        this.playOpenAnimation(\n            () => {\n                this.onExpanded.emit({ event: evt, panel: this });\n            }\n        );\n    }\n\n    toggle(evt?: Event) {\n        if (this.collapsed) {\n            this.expand(evt);\n        } else {\n            this.collapse(evt);\n        }\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-title'\n})\nexport class IgxExpansionPanelTitleDirective {\n    @HostBinding('class.igx-expansion-panel__header-title')\n    public cssClass = `igx-expansion-panel__header-title`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-description'\n})\nexport class IgxExpansionPanelDescriptionDirective {\n    @HostBinding('class.igx-expansion-panel__header-description')\n    public cssClass = `igx-expansion-panel__header-description`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-icon'\n})\nexport class IgxExpansionPanelIconDirective {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Renderer2,\n    Host,\n    EventEmitter,\n    Output,\n    ContentChild\n} from '@angular/core';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelIconDirective, IgxExpansionPanelTitleDirective } from './expansion-panel.directives';\n\nexport interface IExpansionPanelEventArgs {\n    event: Event;\n    panel: IgxExpansionPanelComponent;\n}\n\n/**\n * @hidden\n */\nexport enum ICON_POSITION {\n    LEFT = 'left',\n    NONE = 'none',\n    RIGHT = 'right'\n}\n\n\n@Component({\n    selector: 'igx-expansion-panel-header',\n    template: `<div class=\"igx-expansion-panel__header-inner\" tabindex=\"0\" role=\"button\" [attr.id]=\"id\"\n[attr.aria-disabled]=\"disabled\" [attr.aria-expanded]=\"isExpanded\" [attr.aria-controls]=\"controls\">\n    <div class=\"igx-expansion-panel__title-wrapper\">\n        <ng-content select=\"igx-expansion-panel-title\"></ng-content>\n        <ng-content select=\"igx-expansion-panel-description\"></ng-content>\n    </div>\n    <ng-content></ng-content>\n    <div [class]=\"iconPositionClass\">\n        <ng-content *ngIf=\"iconTemplate\" select=\"igx-expansion-panel-icon\"></ng-content>\n        <igx-icon *ngIf=\"!iconTemplate\" fontSet=\"material\">\n            {{panel.collapsed? 'expand_more':'expand_less'}}\n        </igx-icon>\n    </div>\n</div>\n`\n})\nexport class IgxExpansionPanelHeaderComponent {\n     // properties section\n    private _iconTemplate = false;\n    public id = '';\n\n    @ContentChild(IgxExpansionPanelIconDirective)\n    public set iconTemplate(val: any) {\n        this._iconTemplate = <boolean>val;\n    }\n\n    public get iconTemplate(): any {\n        return this._iconTemplate;\n    }\n\n    @HostBinding('attr.aria-level')\n    @Input()\n    public lv = '3';\n\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'heading';\n\n    public get controls (): string {\n        return this.panel.id;\n    }\n\n    @Input()\n    public iconPosition: ICON_POSITION = ICON_POSITION.LEFT;\n\n    @Output()\n    public onInteraction = new EventEmitter<IExpansionPanelEventArgs>();\n\n     @HostBinding('class.igx-expansion-panel__header')\n     public cssClass = 'igx-expansion-panel__header';\n\n\n     @HostBinding('class.igx-expansion-panel__header--expanded')\n     public get isExpanded () {\n            return !this.panel.collapsed;\n         }\n\n    @Input()\n    @HostBinding('class.igx-expansion-panel--disabled')\n    public disabled = false;\n\n    constructor(@Host() public panel: IgxExpansionPanelComponent, public cdr: ChangeDetectorRef,\n     public elementRef: ElementRef) {\n         this.id = `${this.panel.id}-header`;\n     }\n\n     @HostListener('keydown.Enter', ['$event'])\n     @HostListener('keydown.Space', ['$event'])\n     @HostListener('keydown.Spacebar', ['$event'])\n     @HostListener('click', ['$event'])\n     public onAction(evt?: Event) {\n         if (this.disabled) {\n            evt.stopPropagation();\n            return;\n         }\n         this.onInteraction.emit({ event: evt, panel: this.panel });\n         this.panel.toggle(evt);\n         evt.preventDefault();\n     }\n\n     public get iconPositionClass(): string {\n        switch (this.iconPosition) {\n            case (ICON_POSITION.LEFT):\n                return `igx-expansion-panel__header-icon--start`;\n            case (ICON_POSITION.RIGHT):\n                return `igx-expansion-panel__header-icon--end`;\n            case (ICON_POSITION.NONE):\n                return `igx-expansion-panel__header-icon--none`;\n            default:\n                return '';\n        }\n     }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective,\n  IgxExpansionPanelIconDirective } from './expansion-panel.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n  ],\n  entryComponents: [\n  ],\n  exports: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n      IgxExpansionPanelIconDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule\n  ]\n})\nexport class IgxExpansionPanelModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)\n *\n * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation\n * state such as a \"Go Back\" button. It also supports other actions represented by icons.\n *\n * Example:\n * ```html\n * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n *   <igx-icon>search</igx-icon>\n *   <igx-icon>favorite</igx-icon>\n *   <igx-icon>more_vert</igx-icon>\n * </igx-navbar>\n * ```\n */\n\n@Component({\n    selector: 'igx-navbar',\n    template: `<nav class=\"igx-navbar\" role=\"navigation\" [attr.aria-labelledby]=\"titleId\">\n    <div class=\"igx-navbar__left\">\n        <igx-icon (click)=\"_triggerAction()\" fontSet=\"material\" *ngIf=\"isActionButtonVisible\">{{actionButtonIcon}}</igx-icon>\n        <h1 class=\"igx-navbar__title\" [attr.id]=\"titleId\">{{ title }}</h1>\n    </div>\n    <div class=\"igx-navbar__right\">\n        <ng-content></ng-content>\n    </div>\n</nav>\n`\n})\n\nexport class IgxNavbarComponent {\n    private static NEXT_ID = 1;\n    private isVisible = true;\n\n    /**\n     *An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-navbar [id]=\"'igx-navbar-12'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-navbar-${NEXT_ID++}`;\n    /**\n     *Returns whether the `IgxNavbarComponent` action button is visible, true/false.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public navBar: IgxNavbarComponent;\n     *ngAfterViewInit(){\n     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;\n     *}\n     *```\n     */\n    @Input()\n    public get isActionButtonVisible(): boolean {\n        if (!this.actionButtonIcon) {\n            return false;\n        }\n        return this.isVisible;\n    }\n\n    /**\n     *Sets whether the action button of the `IgxNavbarComponent` is visible.\n     *```html\n     *<igx-navbar [title]=\"currentView\" [isActionButtonVisible]=\"'false'\"></igx-navbar>\n     *```\n     */\n    public set isActionButtonVisible(value: boolean) {\n        this.isVisible = value;\n    }\n    /**\n     *An @Input property that sets the icon of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar [title]=\"currentView\" actionButtonIcon=\"arrow_back\"></igx-navbar>\n     *```\n     */\n    @Input() public actionButtonIcon: string;\n\n    /**\n     *An @Input property that sets the title of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input() public title: string;\n\n    /**\n     *The event that will be thrown when the action is executed,\n     *provides reference to the `IgxNavbar` component as argument\n     *```typescript\n     *public actionExc(event){\n     *    alert(\"Action Execute!\");\n     *}\n     * //..\n     *```\n     *```html\n     *<igx-navbar (onAction)=\"actionExc($event)\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Output() public onAction = new EventEmitter<IgxNavbarComponent>();\n\n    /**\n     *An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.\n     *```html\n     *<igx-navbar [titleId]=\"'igx-navbar-7'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input()\n    public titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;\n\n    /**\n     *@hidden\n     */\n    public _triggerAction() {\n        this.onAction.emit(this);\n    }\n}\n    /**\n     *The IgxNavbarModule provides the {@link IgxNavbarComponent} inside your application.\n     */\n@NgModule({\n    declarations: [IgxNavbarComponent],\n    exports: [IgxNavbarComponent],\n    imports: [IgxButtonModule, IgxIconModule, CommonModule]\n})\nexport class IgxNavbarModule {\n}\n","import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDrawerItem]',\n    exportAs: 'igxDrawerItem'\n})\nexport class IgxNavDrawerItemDirective {\n\n    /**\n     * @hidden\n     */\n    @Input('active') public active = false;\n\n    /**\n     * @hidden\n     */\n    @Input('isHeader') public isHeader = false;\n\n    /**\n     * @hidden\n     */\n    public readonly activeClass = 'igx-nav-drawer__item--active';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item')\n    get defaultCSS(): boolean {\n        return !this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--active')\n    get currentCSS(): boolean {\n        return this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--header')\n    get headerCSS(): boolean {\n        return this.isHeader;\n    }\n}\n\n@Directive({\n    selector: '[igxDrawer]'\n})\nexport class IgxNavDrawerTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n\n@Directive({\n    selector: '[igxDrawerMini]'\n})\nexport class IgxNavDrawerMiniTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Renderer,\n    SimpleChange,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { fromEvent, interval, Subscription } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from './navigation-drawer.directives';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navigation Drawer** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navdrawer.html)\n *\n * The Ignite UI Navigation Drawer is a collapsible side navigation container commonly used in combination with the Navbar.\n *\n * Example:\n * ```html\n * <igx-nav-drawer id=\"navigation\" [isOpen]=\"true\">\n *   <ng-template igxDrawer>\n *     <nav>\n *       <span igxDrawerItem [isHeader]=\"true\">Email</span>\n *       <span igxDrawerItem igxRipple>Inbox</span>\n *       <span igxDrawerItem igxRipple>Deleted</span>\n *       <span igxDrawerItem igxRipple>Sent</span>\n *     </nav>\n *   </ng-template>\n * </igx-nav-drawer>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-nav-drawer',\n    template: `<ng-template #defaultItemsTemplate>\n    <div igxDrawerItem [isHeader]=\"true\">Navigation Drawer</div>\n    <div igxDrawerItem> Start by adding</div>\n    <div igxDrawerItem> <code>&lt;ng-template igxDrawer&gt;</code> </div>\n    <div igxDrawerItem> And some items inside </div>\n    <div igxDrawerItem> Style with igxDrawerItem </div>\n    <div igxDrawerItem> and igxRipple directives</div>\n</ng-template>\n\n<div [hidden]=\"pin\"\n    class=\"igx-nav-drawer__overlay\"\n    [class.igx-nav-drawer__overlay--hidden]=\"!isOpen\"\n    (click)=\"close()\" #overlay>\n</div>\n<aside role=\"navigation\"\n    class=\"igx-nav-drawer__aside\"\n    [class.igx-nav-drawer__aside--collapsed]=\"!miniTemplate && !isOpen\"\n    [class.igx-nav-drawer__aside--mini]=\"miniTemplate && !isOpen\"\n    [class.igx-nav-drawer__aside--normal]=\"!miniTemplate || isOpen\"\n    [class.igx-nav-drawer__aside--pinned]=\"pin\"\n    [class.igx-nav-drawer__aside--right]=\"position == 'right'\" #aside>\n\n    <ng-container *ngTemplateOutlet=\"template || defaultItemsTemplate\"></ng-container>\n</aside>\n<div class=\"igx-nav-drawer__style-dummy\" #dummy></div>\n`\n})\nexport class IgxNavigationDrawerComponent implements\n    IToggleView,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    OnChanges {\n\n    @HostBinding('class') public cssClass = 'igx-nav-drawer';\n\n    /**\n     * ID of the component\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerId = this.navdrawer.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     *  <igx-nav-drawer id='navdrawer'></igx-nav-drawer>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-nav-drawer-${NEXT_ID++}`;\n\n    /**\n     * Position of the Navigation Drawer. Can be \"left\"(default) or \"right\".\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerPosition = this.navdrawer.position;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [position]=\"'left'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public position = 'left';\n\n    /**\n     * Enables the use of touch gestures to manipulate the drawer:\n     * - swipe/pan from edge to open, swipe-toggle and pan-drag.\n     *\n     * ```typescript\n     * // get\n     * let gesturesEnabled = this.navdrawer.enableGestures;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [enableGestures]='true'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public enableGestures = true;\n\n    /**\n     * State of the drawer.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsOpen = this.navdrawer.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [isOpen]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public isOpen = false;\n\n    /**\n     * When pinned the drawer is relatively positioned instead of sitting above content.\n     * May require additional layout styling.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsPinned = this.navdrawer.pin;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pin]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pin = false;\n\n    /**\n     * Minimum device width required for automatic pin to be toggled.\n     * Default is 1024, can be set to a falsy value to disable this behavior.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerPinTreshold = this.navdrawer.pinThreshold;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pinTreshold]='1024'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pinThreshold = 1024;\n\n    /**\n     * Returns nativeElement of the component.\n     *\n     * @hidden\n     */\n    get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Width of the drawer in its open state. Defaults to \"280px\".\n     *\n     * ```typescript\n     * // get\n     * let navDrawerWidth = this.navdrawer.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [width]=\"'228px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public width = '280px';\n\n    /**\n     * Width of the drawer in its mini state. Defaults to 60px.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerMiniWidth = this.navdrawer.miniWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [miniWidth]=\"'34px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public miniWidth = '60px';\n\n    /**\n     * Pinned state change output for two-way binding.\n     *\n     * ```html\n     * <igx-nav-drawer [(pin)]='isPinned'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public pinChange = new EventEmitter<boolean>(true);\n    /**\n     * Event fired as the Navigation Drawer is about to open.\n     *\n     * ```html\n     *  <igx-nav-drawer (opening)='onOpening()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opening = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has opened.\n     *\n     * ```html\n     * <igx-nav-drawer (opened)='onOpened()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opened = new EventEmitter();\n    /**\n     * Event fired as the Navigation Drawer is about to close.\n     *\n     * ```html\n     * <igx-nav-drawer (closing)='onClosing()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closing = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has closed.\n     *\n     * ```html\n     * <igx-nav-drawer (closed)='onClosed()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closed = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    get template() {\n        if (this.miniTemplate && !this.isOpen) {\n            return this.miniTemplate.template;\n        } else if (this.contentTemplate) {\n            return this.contentTemplate.template;\n        }\n    }\n\n    private _miniTemplate: IgxNavDrawerMiniTemplateDirective;\n    /**\n     * @hidden\n     */\n    public get miniTemplate(): IgxNavDrawerMiniTemplateDirective {\n        return this._miniTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerMiniTemplateDirective, { read: IgxNavDrawerMiniTemplateDirective })\n    public set miniTemplate(v: IgxNavDrawerMiniTemplateDirective) {\n        if (!this.isOpen) {\n            this.setDrawerWidth(v ? this.miniWidth : '');\n        }\n        this._miniTemplate = v;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerTemplateDirective, { read: IgxNavDrawerTemplateDirective })\n    protected contentTemplate: IgxNavDrawerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flexBasis')\n    get flexWidth() {\n        if (!this.pin) {\n            return '0px';\n        }\n        if (this.isOpen) {\n            return this.width;\n        }\n        if (this.miniTemplate && this.miniWidth) {\n            return this.miniWidth;\n        }\n\n        return '0px';\n    }\n\n    /** @hidden */\n    @HostBinding('style.order')\n    get isPinnedRight() {\n        return this.pin && this.position === 'right' ?  '1' : '0';\n    }\n\n    private _gesturesAttached = false;\n    private _widthCache: { width: number, miniWidth: number, windowWidth: number } = { width: null, miniWidth: null, windowWidth: null };\n    private _resizeObserver: Subscription;\n    private css: { [name: string]: string; } = {\n        drawer: 'igx-nav-drawer__aside',\n        mini: 'igx-nav-drawer__aside--mini',\n        overlay: 'igx-nav-drawer__overlay',\n        styleDummy: 'igx-nav-drawer__style-dummy'\n    };\n\n    @ViewChild('aside') private _drawer: ElementRef;\n    @ViewChild('overlay') private _overlay: ElementRef;\n    @ViewChild('dummy') private _styleDummy: ElementRef;\n\n   /**\n     * @hidden\n     */\n    get drawer() {\n        return this._drawer.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get overlay() {\n        return this._overlay.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get styleDummy() {\n        return this._styleDummy.nativeElement;\n    }\n\n    /** Pan animation properties */\n    private _panning = false;\n    private _panStartWidth: number;\n    private _panLimit: number;\n\n    /**\n     * Property to decide whether to change width or translate the drawer from pan gesture.\n     *\n     * @hidden\n     */\n    public get hasAnimateWidth(): boolean {\n        return this.pin || !!this.miniTemplate;\n    }\n\n    private _maxEdgeZone = 50;\n    /**\n     * Used for touch gestures (swipe and pan).\n     * Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.\n     *\n     * @hidden\n     */\n    public get maxEdgeZone() {\n        return this._maxEdgeZone;\n    }\n\n    /**\n     * Gets the Drawer width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     *\n     * @hidden\n     */\n    public get expectedWidth() {\n        return this.getExpectedWidth(false);\n    }\n\n    /**\n     * Get the Drawer mini width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     */\n    public get expectedMiniWidth() {\n        return this.getExpectedWidth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchManager() {\n        return this._touchManager;\n    }\n\n    /**\n     * Exposes optional navigation service\n     *\n     * @hidden\n     */\n    public get state() {\n        return this._state;\n    }\n\n    constructor(\n        @Inject(ElementRef) private elementRef: ElementRef,\n        @Optional() private _state: IgxNavigationService,\n        // private animate: AnimationBuilder, TODO\n        protected renderer: Renderer,\n        private _touchManager: HammerGesturesManager) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        // DOM and @Input()-s initialized\n        if (this._state) {\n            this._state.add(this.id, this);\n        }\n        if (this.isOpen) {\n            this.setDrawerWidth(this.width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // wait for template and ng-content to be ready\n        this.updateEdgeZone();\n        this.checkPinThreshold();\n\n        this.ensureEvents();\n\n        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview\n        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._touchManager.destroy();\n        if (this._state) {\n            this._state.remove(this.id);\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted\n        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {\n            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === 'true');\n            this.ensureEvents();\n        }\n        if (changes.pin && changes.pin.currentValue !== undefined) {\n            this.pin = !!(this.pin && this.pin.toString() === 'true');\n            if (this.pin) {\n                this._touchManager.destroy();\n                this._gesturesAttached = false;\n            } else {\n                this.ensureEvents();\n            }\n        }\n\n        if (changes.pinThreshold) {\n            if (this.pinThreshold) {\n                this.ensureEvents();\n                this.checkPinThreshold();\n            }\n        }\n\n        if (changes.width && this.isOpen) {\n            this.setDrawerWidth(changes.width.currentValue);\n        }\n\n        if (changes.miniWidth) {\n            if (!this.isOpen) {\n                this.setDrawerWidth(changes.miniWidth.currentValue);\n            }\n            this.updateEdgeZone();\n        }\n    }\n\n    /**\n     * Toggle the open state of the Navigation Drawer.\n     *\n     * ```typescript\n     * this.navdrawer.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Open the Navigation Drawer. Has no effect if already opened.\n     *\n     * ```typescript\n     * this.navdrawer.open();\n     * ```\n     */\n    public open() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (this.isOpen) {\n            return;\n        }\n        this.opening.emit();\n        this.isOpen = true;\n\n        // TODO: Switch to animate API when available\n        // var animationCss = this.animate.css();\n        //     animationCss\n        //         .setStyles({'width':'50px'}, {'width':'400px'})\n        //         .start(this.elementRef.nativeElement)\n        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));\n\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.setDrawerWidth(this.width);\n    }\n\n    /**\n     * Close the Navigation Drawer. Has no effect if already closed.\n     *\n     * ```typescript\n     * this.navdrawer.close();\n     * ```\n     */\n    public close() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (!this.isOpen) {\n            return;\n        }\n        this.closing.emit();\n\n        this.isOpen = false;\n        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : '');\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleClosedEvent, false);\n    }\n\n    /**\n     * @hidden\n     */\n    protected set_maxEdgeZone(value: number) {\n        this._maxEdgeZone = value;\n    }\n\n    /**\n     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     * @param [mini] - Request mini width instead\n     */\n    protected getExpectedWidth(mini?: boolean): number {\n        if (mini) {\n            if (!this.miniTemplate) {\n                return 0;\n            }\n            if (this.miniWidth) {\n                return parseFloat(this.miniWidth);\n            } else {\n                // if (!this.isOpen) { // This WON'T work due to transition timings...\n                //     return this.elementRef.nativeElement.children[1].offsetWidth;\n                // } else {\n                if (this._widthCache.miniWidth === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, true);\n                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, false);\n                }\n                return this._widthCache.miniWidth;\n            }\n        } else {\n            if (this.width) {\n                return parseFloat(this.width);\n            } else {\n                if (this._widthCache.width === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this._widthCache.width = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                }\n                return this._widthCache.width;\n            }\n        }\n    }\n\n    private getWindowWidth() {\n        return (window.innerWidth > 0) ? window.innerWidth : screen.width;\n    }\n\n    /**\n     * Sets the drawer width.\n     */\n    private setDrawerWidth(width: string) {\n        window.requestAnimationFrame(() => {\n            if (this.drawer) {\n                this.renderer.setElementStyle(this.drawer, 'width', width);\n            }\n        });\n    }\n\n    /**\n     * Get current Drawer width.\n     */\n    private getDrawerWidth(): number {\n        return this.drawer.offsetWidth;\n    }\n\n    private ensureEvents() {\n        // set listeners for swipe/pan only if needed, but just once\n        if (this.enableGestures && !this.pin && !this._gesturesAttached) {\n            // Built-in manager handler(L20887) causes endless loop and max stack exception.\n            // https://github.com/angular/angular/issues/6993\n            // Use ours for now (until beta.10):\n            // this.renderer.listen(document, \"swipe\", this.swipe);\n            this._touchManager.addGlobalEventListener('document', 'swipe', this.swipe);\n            this._gesturesAttached = true;\n\n            // this.renderer.listen(document, \"panstart\", this.panstart);\n            // this.renderer.listen(document, \"pan\", this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panstart', this.panstart);\n            this._touchManager.addGlobalEventListener('document', 'panmove', this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panend', this.panEnd);\n        }\n        if (!this._resizeObserver) {\n            this._resizeObserver = fromEvent(window, 'resize').pipe(debounce(() => interval(150)))\n                .subscribe((value) => {\n                    this.checkPinThreshold(value);\n                });\n        }\n    }\n\n    private updateEdgeZone() {\n        let maxValue;\n\n        if (this.miniTemplate) {\n            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);\n            this.set_maxEdgeZone(maxValue);\n        }\n    }\n\n    private checkPinThreshold = (evt?: Event) => {\n        let windowWidth;\n        if (this.pinThreshold) {\n            windowWidth = this.getWindowWidth();\n            if (evt && this._widthCache.windowWidth === windowWidth) {\n                return;\n            }\n            this._widthCache.windowWidth = windowWidth;\n            if (!this.pin && windowWidth >= this.pinThreshold) {\n                this.pin = true;\n                this.pinChange.emit(true);\n            } else if (this.pin && windowWidth < this.pinThreshold) {\n                this.pin = false;\n                this.pinChange.emit(false);\n            }\n        }\n    }\n\n    private swipe = (evt: HammerInput) => {\n        // TODO: Could also force input type: http://stackoverflow.com/a/27108052\n        if (!this.enableGestures || evt.pointerType !== 'touch') {\n            return;\n        }\n\n        // HammerJS swipe is horizontal-only by default, don't check deltaY\n        let deltaX;\n        let startPosition;\n        if (this.position === 'right') {\n            // when on the right use inverse of deltaX\n            deltaX = -evt.deltaX;\n            startPosition = this.getWindowWidth() - (evt.center.x + evt.distance);\n        } else {\n            deltaX = evt.deltaX;\n            startPosition = evt.center.x - evt.distance;\n        }\n        // only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:\n        if ((this.isOpen && deltaX < 0) ||\n            // positive deltaX from the edge:\n            (deltaX > 0 && startPosition < this.maxEdgeZone)) {\n            this.toggle();\n        }\n    }\n\n    private panstart = (evt: HammerInput) => { // TODO: test code\n        if (!this.enableGestures || this.pin || evt.pointerType !== 'touch') {\n            return;\n        }\n        const startPosition = this.position === 'right' ? this.getWindowWidth() - (evt.center.x + evt.distance)\n            : evt.center.x - evt.distance;\n\n        // cache width during animation, flag to allow further handling\n        if (this.isOpen || (startPosition < this.maxEdgeZone)) {\n            this._panning = true;\n            this._panStartWidth = this.getExpectedWidth(!this.isOpen);\n            this._panLimit = this.getExpectedWidth(this.isOpen);\n\n            this.renderer.setElementClass(this.overlay, 'panning', true);\n            this.renderer.setElementClass(this.drawer, 'panning', true);\n        }\n    }\n\n    private pan = (evt: HammerInput) => {\n        // TODO: input.deltaX = prevDelta.x + (center.x - offset.x);\n        // get actual delta (not total session one) from event?\n        // pan WILL also fire after a full swipe, only resize on flag\n        if (!this._panning) {\n            return;\n        }\n        const right: boolean = this.position === 'right';\n        // when on the right use inverse of deltaX\n        const deltaX = right ? -evt.deltaX : evt.deltaX;\n        let visibleWidth;\n        let newX;\n        let percent;\n\n        visibleWidth = this._panStartWidth + deltaX;\n\n        if (this.isOpen && deltaX < 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth <= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panLimit) / (this._panStartWidth - this._panLimit);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panStartWidth;\n                newX = evt.deltaX;\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n\n        } else if (!this.isOpen && deltaX > 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth >= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panStartWidth) / (this._panLimit - this._panStartWidth);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panLimit;\n                newX = (this._panLimit - visibleWidth) * (right ? 1 : -1);\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n        }\n    }\n\n    private panEnd = (evt: HammerInput) => {\n        if (this._panning) {\n            const deltaX = this.position === 'right' ? -evt.deltaX : evt.deltaX;\n            const visibleWidth: number = this._panStartWidth + deltaX;\n            this.resetPan();\n\n            // check if pan brought the drawer to 50%\n            if (this.isOpen && visibleWidth <= this._panStartWidth / 2) {\n                this.close();\n            } else if (!this.isOpen && visibleWidth >= this._panLimit / 2) {\n                this.open();\n            }\n            this._panStartWidth = null;\n        }\n    }\n\n    private resetPan() {\n        this._panning = false;\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        this.renderer.setElementClass(this.overlay, 'panning', false);\n        this.renderer.setElementClass(this.drawer, 'panning', false);\n        this.setXSize(0, '');\n    }\n\n    /**\n     * Sets the absolute position or width in case the drawer doesn't change position.\n     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.\n     * @param opacity optional value to apply to the overlay\n     */\n    private setXSize(x: number, opacity?: string) {\n        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)\n        window.requestAnimationFrame(() => {\n            if (this.hasAnimateWidth) {\n                this.renderer.setElementStyle(this.drawer, 'width', x ? Math.abs(x) + 'px' : '');\n            } else {\n                this.renderer.setElementStyle(this.drawer, 'transform', x ? 'translate3d(' + x + 'px,0,0)' : '');\n                this.renderer.setElementStyle(this.drawer, '-webkit-transform',\n                    x ? 'translate3d(' + x + 'px,0,0)' : '');\n            }\n            if (opacity !== undefined) {\n                this.renderer.setElementStyle(this.overlay, 'opacity', opacity);\n            }\n        });\n    }\n\n    private toggleOpenedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.opened.emit();\n    }\n\n    private toggleClosedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleClosedEvent, false);\n        this.closed.emit();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxNavigationDrawerComponent } from './navigation-drawer.component';\nimport {\n    IgxNavDrawerItemDirective,\n    IgxNavDrawerMiniTemplateDirective,\n    IgxNavDrawerTemplateDirective\n} from './navigation-drawer.directives';\n\n@NgModule({\n    declarations: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    exports: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    imports: [CommonModule]\n})\nexport class IgxNavigationDrawerModule {}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxProcessBarText]'\n})\nexport class IgxProcessBarTextTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Renderer2,\n    ViewChild,\n    TemplateRef,\n    ContentChild\n} from '@angular/core';\nimport { IgxProcessBarTextTemplateDirective } from './progressbar.common';\n\nconst ONE_PERCENT = 0.01;\nconst MIN_VALUE = 0;\n\nexport enum IgxTextAlign {\n    START = 'start',\n    CENTER = 'center',\n    END = 'end'\n}\n\nexport interface IChangeProgressEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n\nexport abstract class BaseProgress {\n    /**\n     * @hidden\n     */\n    private requestAnimationId: number = undefined;\n\n    /**\n     * @hidden\n     */\n    protected _valueInPercent = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _max = 100;\n    /**\n     * @hidden\n     */\n    protected _value = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _animate = true;\n\n    /**\n     * @hidden\n     */\n    protected _step;\n\n    /**\n     *Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *public valuePercent(event){\n     *    let percentValue = this.progressBar.valueInPercent;\n     *    alert(percentValue);\n     *}\n     *```\n     */\n    public get valueInPercent(): number {\n        return this._valueInPercent;\n    }\n\n    /**\n     *Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *    public setValue(event){\n     *    this.progressBar.valueInPercent = 56;\n     *}\n     * //...\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"setValue()\">setValue</button>\n     *```\n     */\n    public set valueInPercent(value: number) {\n        this._valueInPercent = value;\n    }\n\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number) {\n        this.requestAnimationId = requestAnimationFrame(\n            () => this.updateProgressSmoothly.call(this, val, step));\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number) {\n        this._value += step;\n        const passedValue = convertInPercentage(val, this._max);\n        const progressValue = convertInPercentage(this._value, this._max);\n        if (this.valueInPercent === passedValue) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else if (this.isInLimitRange(progressValue, passedValue, step)) {\n                this.updateProgress(val);\n                cancelAnimationFrame(this.requestAnimationId);\n        } else {\n            this.valueInPercent = progressValue;\n            this.requestAnimationId = requestAnimationFrame(() => this.updateProgressSmoothly.call(this, val, step));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number, step: number): number {\n        if (currentValue < prevValue) {\n            return step;\n        }\n\n        return -step;\n    }\n\n    /**\n     * @hidden\n     */\n    private isInLimitRange(val: number, comparator: number, step: number) {\n        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);\n    }\n\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit(val: number, comparator: number, step: number) {\n        return val > comparator && step > 0;\n    }\n\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit(val: number, comparator: number, step: number) {\n        return val < comparator && step < 0;\n    }\n\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n}\nlet NEXT_LINEAR_ID = 0;\nlet NEXT_CIRCULAR_ID = 0;\n@Component({\n    selector: 'igx-linear-bar',\n    template: `<div class=\"progress-linear\" [class.progress-linear--striped]=\"striped\">\n    <div class=\"progress-linear__bar\" #linearBar role=\"progressbar\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"value\">\n        <div class=\"progress-linear__bar-base\"></div>\n        <div class=\"progress-linear__bar-progress{{type ? '--' + type : ''}}\" [style.width.%]=\"valueInPercent\"></div>\n    </div>\n    <span \n        class=\"progress-linear__value{{textAlign ? '--' + textAlign : ''}}\"\n        [class.progress-linear__value--top]=\"textTop\"\n        [class.progress-linear__value--hidden]=\"!textVisibility\">\n            {{text ? text : valueInPercent + '%'}}\n    </span>\n</div>\n`\n})\nexport class IgxLinearProgressBarComponent extends BaseProgress {\n\n    /**An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     *<igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-linear-bar-${NEXT_LINEAR_ID++}`;\n\n    /**\n     *Set the position that defines where the text is aligned.\n     Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     *```typescript\n     *public positionCenter: IgxTextAlign;\n     *public ngOnInit() {\n     *    this.positionCenter = IgxTextAlign.CENTER;\n     *}\n     * //...\n     *```\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textAlign: IgxTextAlign = IgxTextAlign.START;\n\n    /**\n     *Set the text to be visible. By default it is set to true.\n     * ```html\n     *<igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     *Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     *```html\n     *<igx-linear-bar type=\"danger\" [textTop]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textTop = false;\n\n    /**\n     *Set a custom text that is displayed according to the defined position.\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public text: string;\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     *```html\n     *<igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public striped = false;\n\n    /**\n     *Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `danger`.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"danger\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public type = 'default';\n\n    /**\n     *Animation on progress `IgxLinearProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-linear-bar [animate]=\"false\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxLinearProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     *```\n     */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    set value(val) {\n        val = Number(val);\n        if (this._value === val) {\n            return;\n        }\n\n        const valueInRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInRange)) {\n            return;\n        }\n        const changedValues = {\n            currentValue: valueInRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this._animate && val >= this.step) {\n            super.runAnimation(valueInRange, updateValue);\n        } else {\n            super.updateProgressDirectly(valueInRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-linear-bar (onProgressChanged)=\"progressChange($event)\" type=\"success\">\n     *```\n     */\n    @Output() public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    constructor() {\n        super();\n    }\n}\n\n@Component({\n    selector: 'igx-circular-bar',\n    template: `<svg #svg class=\"progress-circular\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"\n    viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\" role=\"progressbar\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"value\">\n    <circle class=\"progress-circular__innercircle\" cx=\"50\" cy=\"50\" r=\"46\" />\n    <circle #circle class=\"progress-circular__circle\" cx=\"50\" cy=\"50\" r=\"46\" />\n    <text #text [class.progress-circular__text--hidden]=\"!textVisibility\" id=\"myTimer\" text-anchor=\"middle\" x=\"50\" y=\"60\">\n            <ng-container *ngTemplateOutlet=\"textTemplate ? textTemplate.template : defaultTextTemplate; context: context\">\n            </ng-container>\n    </text>\n\n    <ng-template #defaultTextTemplate>\n        <tspan class=\"progress-circular__text\"> {{textContent ? textContent: valueInPercent + '%'}}</tspan>\n    </ng-template>\n</svg>`\n})\nexport class IgxCircularProgressBarComponent extends BaseProgress {\n\n    private readonly STROKE_OPACITY_DVIDER = 100;\n    private readonly STROKE_OPACITY_ADDITION = .2;\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     *```\n     */\n    @Output()\n    public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-circular-bar-${NEXT_CIRCULAR_ID++}`;\n\n    /**\n     *Sets the text visibility. By default it is set to true.\n     *```html\n     *<igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     *```html\n     *<igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     *```\n     *```typescript\n     *let text = this.circularBar.text;\n     *```\n     */\n    @Input()\n    public text: string;\n\n    @ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective })\n    public textTemplate: IgxProcessBarTextTemplateDirective;\n\n    /**\n     * @hidden\n    */\n    public get context(): any {\n        return {\n            $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max}\n        };\n    }\n\n    /**\n    *Animation on progress `IgxCircularProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-circular-bar [animate]=\"false\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxCircularProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     *```html\n     *<igx-circular-bar [max]=\"245\" [animate]=\"false\" [value]=\"currentValue\"></igx-circular-bar>\n     *```\n     */\n    get max(): number {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-circular-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     *```\n    */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```html\n     *<igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    set value(val: number) {\n        val = Number(val);\n        if (this._value === val) {\n            return;\n        }\n\n        const valueInProperRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInProperRange)) {\n            return;\n        }\n\n        const changedValues = {\n            currentValue: valueInProperRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this.animate && val >= this.step) {\n            super.runAnimation(valueInProperRange, updateValue);\n        } else {\n            this.updateProgressDirectly(valueInProperRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    private _circleRadius = 46;\n    private _circumference = 2 * Math.PI * this._circleRadius;\n\n    @ViewChild('circle') private _svgCircle: ElementRef;\n\n    constructor(private renderer: Renderer2) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressSmoothly(val: number, step: number) {\n        // Set frames for the animation\n        const FRAMES = [{\n            strokeDashoffset: this.getProgress(this._value),\n            strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }, {\n            strokeDashoffset: this.getProgress(this.valueInPercent),\n            strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }];\n        this._svgCircle.nativeElement.animate(FRAMES, {\n            easing: 'ease-out',\n            fill: 'forwards'\n        });\n\n        super.updateProgressSmoothly(val, step);\n    }\n\n    /**\n     * @hidden\n    */\n    public get textContent(): string {\n        return this.text;\n    }\n\n    /**\n     * @hidden\n    */\n    public updateProgressDirectly(val: number) {\n        super.updateProgressDirectly(val);\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-dashoffset',\n            this.getProgress(this.valueInPercent));\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-opacity',\n            (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);\n    }\n\n    private getProgress(percentage: number) {\n        return this._circumference - (percentage * this._circumference / 100);\n    }\n}\n\nexport function getValueInProperRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n}\n\nexport function convertInPercentage(value: number, max: number) {\n    return Math.floor(100 * value / max);\n}\n\n/**\n * The IgxProgressBarModule provides the {@link IgxLinearProgressBarComponent},\n * {@link IgxCircularProgressBarComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    exports: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    imports: [CommonModule]\n})\nexport class IgxProgressBarModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, Component, ElementRef, EventEmitter,\n    forwardRef, HostBinding, Input, NgModule, OnInit, Output, Renderer2,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SliderType {\n    /**\n     * Slider with single thumb.\n     */\n    SLIDER,\n    /**\n     *  Range slider with multiple thumbs, that can mark the range.\n     */\n    RANGE\n}\n\nenum SliderHandle {\n    FROM,\n    TO\n}\n\nexport interface IRangeSliderValue {\n    lower: number;\n    upper: number;\n}\n\nexport interface ISliderValueChangeEventArgs {\n    oldValue: number | IRangeSliderValue;\n    value: number | IRangeSliderValue;\n}\n\nconst noop = () => {\n};\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [isContinuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],\n    selector: 'igx-slider',\n    template: `<div class=\"igx-slider\" [class.igx-slider--disabled]=\"disabled\" #slider (panstart)=\"showThumbsLabels()\" (panend)=\"onPanEnd($event)\"\n    (pan)=\"update($event)\" (tap)=\"onTap($event)\">\n    <div class=\"igx-slider__track\">\n        <div #track class=\"igx-slider__track-fill\"></div>\n        <div #ticks class=\"igx-slider__track-ticks\"></div>\n    </div>\n    <div class=\"igx-slider__thumbs\">\n        <div (keydown)=\"onKeyDown($event);\" (keyup)=\"hideThumbsLabels()\" (blur)=\"hideThumbLabelsOnBlur()\" (focus)=\"onFocus($event);\"\n            *ngIf=\"isRange\" class=\"igx-slider__thumb-from\" tabindex=\"1\" [ngClass]=\"{ 'igx-slider__thumb-from--active': isActiveLabel }\"\n            #thumbFrom>\n            <span class=\"label\">{{ lowerValue}}</span>\n            <span class=\"dot\"></span>\n        </div>\n        <div (keydown)=\"onKeyDown($event);\" (keyup)=\"hideThumbsLabels()\" (blur)=\"hideThumbLabelsOnBlur()\" (focus)=\"onFocus($event);\"\n            class=\"igx-slider__thumb-to\" tabindex=\"1\" [ngClass]=\"{ 'igx-slider__thumb-to--active': isActiveLabel }\" #thumbTo>\n            <span *ngIf=\"isRange\" class=\"label\">{{ upperValue}}</span>\n            <span *ngIf=\"!isRange\" class=\"label\">{{ value }}</span>\n            <span class=\"dot\"></span>\n        </div>\n    </div>\n</div>\n`\n})\nexport class IgxSliderComponent implements ControlValueAccessor, EditorProvider, OnInit, AfterViewInit {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-slider-${NEXT_ID++}`;\n    /**\n     *An @Input property that disables or enables UI interaction.\n     *```html\n     *<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     *```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     * An @Input property that marks the `IgxSliderComponent` as continuous.\n     * By default is considered that the `IgxSliderComponent` is discrete.\n     * Discrete `IgxSliderComponent` does not have ticks and does not shows bubble labels for values.\n     * ```html\n     * <igx-slider #slider [isContinuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public isContinuous = false;\n\n    /**\n     * An @Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * sliderType: SliderType = SliderType.RANGE;\n     * //...\n     * ```\n     * ```html\n     * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public type: SliderType = SliderType.SLIDER;\n\n    /**\n     *An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     *```html\n     *<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     *```\n     */\n    @Input()\n    public thumbLabelVisibilityDuration = 750;\n\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public step = 1;\n\n    /**\n     * This event is emitted when user has stopped interacting the thumb and value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<ISliderValueChangeEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public isActiveLabel = false;\n\n    private activeHandle: SliderHandle = SliderHandle.TO;\n\n    @ViewChild('slider')\n    private slider: ElementRef;\n\n    @ViewChild('track')\n    private track: ElementRef;\n\n    @ViewChild('ticks')\n    private ticks: ElementRef;\n\n    @ViewChild('thumbFrom')\n    private thumbFrom: ElementRef;\n\n    @ViewChild('thumbTo')\n    private thumbTo: ElementRef;\n\n    private _minValue = 0;\n\n    // Measures & Coordinates\n    private width = 0;\n    private xOffset = 0;\n    private xPointer = 0;\n    private pPointer = 0;\n\n    // Limit handle travel zone\n    private pMin = 0;\n    private pMax = 1;\n\n    // From/upperValue in percent values\n    private hasViewInit = false;\n    private timer;\n    private _maxValue = 100;\n    private _lowerBound?: number;\n    private _upperBound?: number;\n    private _lowerValue: number;\n    private _upperValue: number;\n    private _trackUpperBound: boolean;\n    private _trackLowerBound: boolean;\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    constructor(private renderer: Renderer2) {\n    }\n\n    /**\n     *Returns whether the `IgxSliderComponent` type is RANGE.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderRange = this.slider.isRange;\n     *}\n     * ```\n     */\n    public get isRange(): boolean {\n        const isRange: boolean = this.type === SliderType.RANGE;\n\n        return isRange;\n    }\n\n\n    /**\n     * Returns the maximum value for the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMax = this.slider.maxValue;\n     *}\n     * ```\n     */\n    public get maxValue(): number {\n        return this._maxValue;\n    }\n\n    /**\n     * Sets the maximal value for the `IgxSliderComponent`.\n     * The default maximum value is 100.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set maxValue(value: number) {\n        if (value <= this._minValue) {\n            this._maxValue = this._minValue + 1;\n        } else {\n            this._maxValue = value;\n        }\n\n        if (this._trackUpperBound) {\n            this._upperBound = this._maxValue;\n        }\n        this.invalidateValue();\n    }\n\n    /**\n     *Returns the minimal value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMin = this.slider.minValue;\n     *}\n     *```\n     */\n    public get minValue(): number {\n        return this._minValue;\n    }\n\n    /**\n     * Sets the minimal value for the `IgxSliderComponent`.\n     * The default minimal value is 0.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public set minValue(value: number) {\n        if (value >= this.maxValue) {\n            this._minValue = this.maxValue - 1;\n        } else {\n            this._minValue = value;\n        }\n\n        if (this._trackLowerBound) {\n            this._lowerBound = this._minValue;\n        }\n        this.invalidateValue();\n    }\n\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderLowBound = this.slider.lowerBound;\n     *}\n     *```\n     */\n    public get lowerBound(): number {\n        return this._lowerBound;\n    }\n\n    /**\n     * Sets the lower boundary of the `IgxSliderComponent`.\n     * If not set is the same as min value.\n     * ```html\n     * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set lowerBound(value: number) {\n        if (this._trackLowerBound) {\n            this._trackLowerBound = false;\n        }\n\n        if (value >= this.upperBound) {\n            this._lowerBound = this.minValue;\n            return;\n        }\n\n        this._lowerBound = value;\n    }\n\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     *}\n     * ```\n     */\n    public get upperBound(): number {\n        return this._upperBound;\n    }\n\n    /**\n     * Sets the upper boundary of the `IgxSliderComponent`.\n     * If not set is the same as max value.\n     * ```html\n     * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set upperBound(value: number) {\n        if (this._trackUpperBound) {\n            this._trackUpperBound = false;\n        }\n\n        if (value <= this.lowerBound) {\n            this._upperBound = this.maxValue;\n\n            return;\n        }\n\n        this._upperBound = value;\n    }\n\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     *}\n     *```\n     */\n    public get lowerValue(): number {\n        return this._lowerValue;\n    }\n\n    /**\n     *Sets the lower value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public lowValue(event){\n     *    this.slider.lowerValue = 120;\n     *}\n     *```\n     */\n    public set lowerValue(value: number) {\n        if (value < this.lowerBound || this.upperBound < value) {\n            return;\n        }\n\n        if (this.isRange && value > this.upperValue) {\n            return;\n        }\n\n        this._lowerValue = value;\n    }\n\n    /**\n     *Returns the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    let upperValue = this.slider.upperValue;\n     *}\n     *```\n     */\n    public get upperValue() {\n        return this._upperValue;\n    }\n\n    /**\n     *Sets the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    this.slider.upperValue = 120;\n     *}\n     *```\n     */\n    public set upperValue(value: number) {\n        if (value < this.lowerBound || this.upperBound < value) {\n            return;\n        }\n\n        if (this.isRange && value < this.lowerValue) {\n            return;\n        }\n\n        this._upperValue = value;\n    }\n\n    /**\n     * Returns the slider value. If the slider is of type SLIDER the returned value is number.\n     * If the slider type is RANGE the returned value is object containing lower and upper properties for the values.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public sliderValue(event){\n     *    let sliderVal = this.slider.value;\n     *}\n     *```\n     */\n    public get value(): number | IRangeSliderValue {\n        if (this.isRange) {\n            return {\n                lower: this.snapValueToStep(this.lowerValue),\n                upper: this.snapValueToStep(this.upperValue)\n            };\n        } else {\n            const val = this.snapValueToStep(this.upperValue);\n            return val;\n        }\n    }\n\n    /**\n     * Sets the slider value.\n     * If the slider is of type SLIDER the argument is number. By default if no value is set the default value is\n     * same as lower upper bound.\n     * If the slider type is RANGE the the argument is object containing lower and upper properties for the values.\n     * By default if no value is set the default value is for lower value it is the same as lower bound and if no\n     * value is set for the upper value it is the same as the upper bound.\n     * ```typescript\n     *rangeValue = {\n     *   lower: 30,\n     *   upper: 60\n     *};\n     * ```\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set value(value: number | IRangeSliderValue) {\n        if (!this.isRange) {\n            this.upperValue = this.snapValueToStep(value as number);\n        } else {\n            this.upperValue =\n                this.snapValueToStep((value as IRangeSliderValue) == null ? null : (value as IRangeSliderValue).upper);\n            this.lowerValue =\n                this.snapValueToStep((value as IRangeSliderValue) == null ? null : (value as IRangeSliderValue).lower);\n        }\n\n        this._onChangeCallback(this.value);\n\n        if (this.hasViewInit) {\n            this.positionHandlesAndUpdateTrack();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.lowerBound === undefined) {\n            this.lowerBound = this.minValue;\n            this._trackLowerBound = true;\n        }\n\n        if (this.upperBound === undefined) {\n            this.upperBound = this.maxValue;\n            this._trackUpperBound = true;\n        }\n\n        if (this.isRange) {\n            if (Number.isNaN((this.value as IRangeSliderValue).lower)) {\n                this.value = {\n                    lower: this.lowerBound,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            }\n\n            if (Number.isNaN((this.value as IRangeSliderValue).upper)) {\n                this.value = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: this.upperBound\n                };\n            }\n        } else {\n            if (Number.isNaN(this.value as number)) {\n                this.value = this.lowerBound;\n            }\n        }\n\n        this.pMin = this.valueToFraction(this.lowerBound) || 0;\n        this.pMax = this.valueToFraction(this.upperBound) || 1;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.hasViewInit = true;\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval();\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: any): void {\n        this.value = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden */\n    getEditElement() {\n        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public showThumbsLabels() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.isContinuous) {\n            return;\n        }\n\n        if (this.timer !== null) {\n            clearInterval(this.timer);\n        }\n\n        this.isActiveLabel = true;\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public onFocus($event: FocusEvent) {\n        if (this.isRange && $event.target === this.thumbFrom.nativeElement) {\n            this.activeHandle = SliderHandle.FROM;\n        }\n\n        if ($event.target === this.thumbTo.nativeElement) {\n            this.activeHandle = SliderHandle.TO;\n        }\n\n        this.toggleThumbLabel();\n    }\n    /**\n     *\n     * @hidden\n     */\n    public onPanEnd($event) {\n        this.hideThumbsLabels();\n        this.emitValueChanged(null);\n    }\n    /**\n     *\n     * @hidden\n     */\n    public hideThumbLabelsOnBlur() {\n        if (this.timer !== null) {\n            clearInterval(this.timer);\n        }\n\n        this.isActiveLabel = false;\n    }\n    /**\n     *\n     * @hidden\n     */\n    public onKeyDown($event: KeyboardEvent) {\n        if (this.disabled) {\n            return true;\n        }\n\n        let incrementSign;\n\n        if ($event.key.endsWith('Left')) {\n            incrementSign = -1;\n        } else if ($event.key.endsWith('Right')) {\n            incrementSign = 1;\n        } else {\n            return;\n        }\n\n        const value = this.value;\n\n        if (this.isRange) {\n            if (this.activeHandle === SliderHandle.FROM) {\n                const newLower = (this.value as IRangeSliderValue).lower + incrementSign * this.step;\n\n                if (newLower >= (this.value as IRangeSliderValue).upper) {\n                    this.thumbTo.nativeElement.focus();\n                    return;\n                }\n\n                this.value = {\n                    lower: newLower,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            } else {\n                const newUpper = (this.value as IRangeSliderValue).upper + incrementSign * this.step;\n\n                if (newUpper <= (this.value as IRangeSliderValue).lower) {\n                    this.thumbFrom.nativeElement.focus();\n                    return;\n                }\n\n                this.value = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: (this.value as IRangeSliderValue).upper + incrementSign * this.step\n                };\n            }\n        } else {\n            this.value = this.value as number + incrementSign * this.step;\n        }\n\n        if (this.hasValueChanged(value)) {\n            this.emitValueChanged(value);\n        }\n\n        this.showThumbsLabels();\n    }\n    /**\n     *\n     * @hidden\n     */\n    public onTap($event) {\n        const value = this.value;\n        this.update($event);\n\n        if (this.hasValueChanged(value)) {\n            this.emitValueChanged(value);\n        }\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public update($event) {\n        if (this.disabled) {\n            return;\n        }\n\n        if ($event.type === 'tap') {\n            this.toggleThumbLabel();\n        }\n\n        // Set width and offset first\n        this.setSliderWidth();\n        this.setSliderOffset();\n\n        // Then get pointer coordinates\n        this.setPointerPosition($event);\n        this.setPointerPercent();\n\n        // Find the closest handle if dual slider\n        if (this.isRange) {\n            this.closestHandle();\n        }\n\n        // Update To/From Values\n        this.setValues();\n        // this.printInfo();\n\n        // Finally do positionHandlesAndUpdateTrack the DOM\n        // based on data values\n        this.positionHandlesAndUpdateTrack();\n        this._onTouchedCallback();\n    }\n\n    /**\n     * @hidden\n     */\n    public hideThumbsLabels() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.isContinuous) {\n            return;\n        }\n\n        this.timer = setTimeout(\n            () => this.isActiveLabel = false,\n            this.thumbLabelVisibilityDuration\n        );\n    }\n\n    private invalidateValue() {\n        if (!this.isRange) {\n            if (this.value >= this._lowerBound && this.value <= this._upperBound) {\n                this.positionHandlesAndUpdateTrack();\n            } else if (this.value < this._lowerBound) {\n                this.value = this._lowerBound;\n            } else if (this.value > this._upperBound) {\n                this.value = this._upperBound;\n            }\n        } else {\n            const value = this.value as IRangeSliderValue;\n\n            if (value.lower >= this._lowerBound && value.lower <= this._upperBound) {\n                this.positionHandlesAndUpdateTrack();\n            } else if (value.lower < this._lowerBound) {\n                this.value = {\n                    lower: this._lowerBound,\n                    upper: value.upper\n                };\n            } else if (value.lower > this._upperBound) {\n                this.value = {\n                    lower: value.lower,\n                    upper: this._upperBound\n                };\n            }\n\n            if (value.upper >= this._lowerBound && value.upper <= this._upperBound) {\n                this.positionHandlesAndUpdateTrack();\n            } else if (value.upper < this._lowerBound) {\n                this.value = {\n                    lower: this._lowerBound,\n                    upper: value.upper\n                };\n            } else if (value.upper > this._upperBound) {\n                this.value = {\n                    lower: value.lower,\n                    upper: this._upperBound\n                };\n            }\n        }\n    }\n\n    private generateTickMarks(color: string, interval: number) {\n        return `repeating-linear-gradient(\n            ${'to left'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        ), repeating-linear-gradient(\n            ${'to right'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        )`;\n    }\n\n    private toggleThumbLabel() {\n        this.showThumbsLabels();\n        this.hideThumbsLabels();\n    }\n\n    private getSliderOffset(): number {\n        return this.xOffset;\n    }\n\n    private toFixed(num: number): number {\n        num = parseFloat(num.toFixed(20));\n        return num;\n    }\n\n    private positionHandle(handle: ElementRef, position: number) {\n        handle.nativeElement.style.left = `${this.valueToFraction(position) * 100}%`;\n    }\n\n    private positionHandlesAndUpdateTrack() {\n        if (!this.isRange) {\n            this.positionHandle(this.thumbTo, this.value as number);\n        } else {\n            this.positionHandle(this.thumbTo, (this.value as IRangeSliderValue).upper);\n            this.positionHandle(this.thumbFrom, (this.value as IRangeSliderValue).lower);\n        }\n\n        this.updateTrack();\n    }\n\n    private closestHandle() {\n        const fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;\n        const toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;\n        const match = this.closestTo(this.xPointer, [fromOffset, toOffset]);\n\n        if (match === toOffset) {\n            this.thumbTo.nativeElement.focus();\n        } else if (match === fromOffset) {\n            this.thumbFrom.nativeElement.focus();\n        }\n    }\n\n    private setTickInterval() {\n        if (this.isContinuous) {\n            return;\n        }\n\n        const interval = this.step > 1 ? this.step : null;\n        this.renderer.setStyle(this.ticks.nativeElement, 'background', this.generateTickMarks('white', interval));\n    }\n\n    private snapValueToStep(value: number): number {\n        const valueModStep = (value - this.minValue) % this.step;\n        let snapValue = value - valueModStep;\n\n        if (Math.abs(valueModStep) * 2 >= this.step) {\n            snapValue += (valueModStep > 0) ? this.step : (-this.step);\n        }\n\n        return parseFloat(snapValue.toFixed(20));\n    }\n\n    private closestTo(goal: number, positions: number[]): number {\n        return positions.reduce((previous, current) => {\n            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);\n        });\n    }\n\n    // Set Values for To/From based on active handle\n    private setValues() {\n        if (this.activeHandle === SliderHandle.TO) {\n            if (this.isRange) {\n                this.value = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: this.fractionToValue(this.pPointer)\n                };\n            } else {\n                this.value = this.fractionToValue(this.pPointer);\n            }\n        }\n\n        if (this.activeHandle === SliderHandle.FROM) {\n            this.value = {\n                lower: this.fractionToValue(this.pPointer),\n                upper: (this.value as IRangeSliderValue).upper\n            };\n        }\n    }\n\n    private setSliderWidth(): void {\n        this.width = this.slider.nativeElement.offsetWidth;\n    }\n\n    private setPointerPosition(e) {\n        this.xPointer = e.center.x - this.getSliderOffset();\n    }\n\n    private setSliderOffset() {\n        const rect = this.slider.nativeElement.getBoundingClientRect();\n        this.xOffset = rect.left;\n    }\n\n    private setPointerPercent() {\n        this.pPointer = this.limit(this.toFixed(this.xPointer / this.width));\n    }\n\n    private valueToFraction(value: number) {\n        return this.limit((value - this.minValue) / (this.maxValue - this.minValue));\n    }\n\n    private fractionToValue(fraction: number): number {\n        const max: number = this.maxValue;\n        const min: number = this.minValue;\n\n        return (max - min) * fraction + min;\n    }\n\n    private fractionToPercent(fraction: number): number {\n        return this.toFixed(fraction * 100);\n    }\n\n    private limit(num: number): number {\n        return Math.max(this.pMin, Math.min(num, this.pMax));\n    }\n\n    private updateTrack() {\n        const fromPosition = this.valueToFraction(this.lowerValue);\n        const toPosition = this.valueToFraction(this.upperValue);\n        const positionGap = (this.valueToFraction(this.upperValue) - this.valueToFraction(this.lowerValue));\n\n        if (!this.isRange) {\n            this.track.nativeElement.style.transform = `scaleX(${toPosition})`;\n        }\n\n        if (this.isRange) {\n            this.track.nativeElement.style.transform = `scaleX(${1})`;\n            this.track.nativeElement.style.left = `${fromPosition * 100}%`;\n            this.track.nativeElement.style.width = `${positionGap * 100}%`;\n        }\n    }\n    private hasValueChanged(oldValue) {\n        const isSliderWithDifferentValue: boolean = !this.isRange && oldValue !== this.value;\n        const isRangeWithOneDifferentValue: boolean = this.isRange &&\n            ((oldValue as IRangeSliderValue).lower !== (this.value as IRangeSliderValue).lower ||\n                (oldValue as IRangeSliderValue).upper !== (this.value as IRangeSliderValue).upper);\n\n        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;\n    }\n\n    private emitValueChanged(oldValue: number | IRangeSliderValue) {\n        this.onValueChange.emit({ oldValue, value: this.value });\n    }\n}\n\n   /**\n    *The IgxSliderModule provides the {@link IgxSliderComponent} inside your application.\n    */\n\n@NgModule({\n    declarations: [IgxSliderComponent],\n    exports: [IgxSliderComponent],\n    imports: [CommonModule]\n})\nexport class IgxSliderModule {\n}\n","import {\n    animate,\n    AnimationEvent,\n    state,\n    style,\n    transition,\n    trigger,\n    useAnimation\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    NgZone,\n    Output\n} from '@angular/core';\nimport { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Snackbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n *\n * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\n * include a link to an action such as Undo.\n *\n * Example:\n * ```html\n * <button (click)=\"snackbar.show()\">Send message</button>\n * <div>\n *   <igx-snackbar #snackbar message=\"Message sent\">\n *   </igx-snackbar>\n * </div>\n * ```\n */\n@Component({\n    animations: [\n        trigger('slideInOut', [\n            transition('void => *', [\n                useAnimation(slideInBottom, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n                        fromPosition: 'translateY(100%)',\n                        toPosition: 'translateY(0)'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(slideOutBottom, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',\n                        fromPosition: 'translateY(0)',\n                        toOpacity: 1,\n                        toPosition: 'translateY(100%)'\n                    }\n                })\n            ])\n        ]),\n        trigger('fadeInOut', [\n            transition('void => *', [\n                useAnimation(fadeIn, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'ease-out'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(fadeOut, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'ease-out'\n                    }\n                })\n            ])\n        ])\n    ],\n    selector: 'igx-snackbar',\n    template: `<div class=\"igx-snackbar\" *ngIf=\"isVisible\" (@slideInOut.start)=\"snackbarAnimationStarted($event)\" (@slideInOut.done)=\"snackbarAnimationDone($event)\"\n    [@slideInOut]=\"isVisible\">\n    <span class=\"igx-snackbar__message\" [@fadeInOut]=\"isVisible\">{{ message }}</span>\n    <button class=\"igx-snackbar__button\" igxRipple=\"white\" *ngIf=\"actionText\" [@fadeInOut] (click)=\"triggerAction()\">\n        {{ actionText }}\n    </button>\n</div>\n`\n})\nexport class IgxSnackbarComponent {\n\n    /**\n     * Sets/gets the `id` of the snackbar.\n     * If not set, the `id` of the first snackbar component  will be `\"igx-snackbar-0\"`;\n     * ```html\n     * <igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let snackbarId = this.snackbar.id;\n     * ```\n     * @memberof IgxSnackbarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-snackbar-${NEXT_ID++}`;\n    /**\n     * Sets/gets the `message` attribute.\n     * ```html\n     * <igx-snackbar [message] = \"'Snackbar Component'\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let message =  this.snackbar.message;\n     * ```\n     */\n    @Input() public message: string;\n\n    /**\n     * Enables/Disables the visibility of the snackbar.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-snackbar [isVisible] = \"true\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let isVisible =  this.snackbar.isVisible;\n     * ```\n     */\n    @Input() public isVisible = false;\n\n    /**\n     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-snackbar [autoHide] = \"false\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let autoHide =  this.snackbar.autoHide;\n     * ```\n     */\n    @Input() public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.\n     * Default value is 4000.\n     * ```html\n     * <igx-snackbar [displayTime] = \"2000\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let displayTime = this.snackbar.displayTime;\n     * ```\n     */\n    @Input() public displayTime = 4000;\n\n    /**\n     * Sets/gets the `actionText` attribute.\n     * ```html\n     * <igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n     * ```\n     */\n    @Input() public actionText?: string;\n\n    /**\n     * An event that will be emitted when the action is executed.\n     * Provides reference to the `IgxSnackbarComponent` as an argument.\n     * ```html\n     * <igx-snackbar (onAction) = \"onAction($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxSnackbarComponent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation starts.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationStarted = new EventEmitter<AnimationEvent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation ends.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationDone = new EventEmitter<AnimationEvent>();\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.\n     * ```typescript\n     * this.snackbar.show();\n     * ```\n     */\n    public show(): void {\n        clearTimeout(this.timeoutId);\n        setTimeout(this.timeoutId);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the snackbar.\n     * ```typescript\n     * this.snackbar.hide();\n     * ```\n     */\n    public hide(): void {\n        this.isVisible = false;\n        clearTimeout(this.timeoutId);\n    }\n    /**\n     *@hidden\n     */\n    public triggerAction(): void {\n        this.onAction.emit(this);\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationStarted(evt: AnimationEvent): void {\n        if (evt.fromState === 'void') {\n            this.animationStarted.emit(evt);\n        }\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationDone(evt: AnimationEvent): void {\n        if (evt.fromState === 'show') {\n            this.animationDone.emit(evt);\n        }\n    }\n}\n/**\n *The IgxSnackbarModule provides the {@link IgxSnackbarComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxSnackbarComponent],\n    exports: [IgxSnackbarComponent],\n    imports: [CommonModule]\n})\nexport class IgxSnackbarModule { }\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SwitchLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeSwitchEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Switch** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/switch.html)\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * Example:\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],\n    selector: 'igx-switch',\n    template: `<input #checkbox class=\"igx-switch__input\" type=\"checkbox\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [tabindex]=\"tabindex\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-labelledby]=\"ariaLabelledBy\"\n    [attr.aria-label]=\"ariaLabel\"\n    (change)=\"_onSwitchChange($event)\"\n    (click)=\"_onSwitchClick($event)\"\n    (focus)=\"onFocus($event)\"\n    (blur)=\"onBlur($event)\" />\n\n<label #label class =\"igx-switch__composite\" [for]=\"inputId\"\n    igxRipple\n    igxRippleTarget=\".igx-switch__ripple\"\n    [igxRippleDisabled]=\"disableRipple\"\n    [igxRippleCentered]=\"true\"\n    [igxRippleDuration]=\"300\">\n    <div class=\"igx-switch__composite-thumb\">\n        <div class=\"igx-switch__ripple\"></div>\n    </div>\n</label>\n\n<span #placeholderLabel role=\"label\"\n    [class]=\"labelClass\"\n    [id]=\"labelId\"\n    (click)=\"_onLabelClick($event)\">\n    <ng-content></ng-content>\n</span>\n`\n})\nexport class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox') public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.switch.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     * ```typescript\n     * let switchId =  this.switch.id;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-switch-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelId =  this.switch.labelId;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     * ```html\n     * <igx-switch [value] = \"switchValue\"></igx-switch>\n     * ```\n     * ```typescript\n     * let value =  this.switch.value;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     * ```html\n     * <igx-switch name = \"Switch1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let name =  this.switch.name;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.switch.tabindex;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.switch.labelPosition;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelPosition: SwitchLabelPosition | string = 'after';\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.switch.disableRipple;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRequired = this.switch.required;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.switch.ariaLabelledBy;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.switch.ariaLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     * @memberof IgxSwitchComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeSwitchEventArgs> = new EventEmitter<IChangeSwitchEventArgs>();\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * Returns the class of the switch component.\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch')\n    public cssClass = 'igx-switch';\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     * ```html\n     *  <igx-switch [checked] = \"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isChecked =  this.switch.checked;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-switch [disabled] = \"true\"><igx-switch>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.switch.disabled;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.switch.focused;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * Toggles the checked state of the switch.\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.focused = false;\n        this.change.emit({ checked: this.checked, switch: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchClick(event) {\n        event.stopPropagation();\n        this.toggle();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case SwitchLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case SwitchLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\nexport const IGX_SWITCH_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxSwitchRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]`,\n    providers: [IGX_SWITCH_REQUIRED_VALIDATOR]\n})\nexport class IgxSwitchRequiredDirective extends CheckboxRequiredValidator { }\n/**\n * The IgxSwitchModule provides the {@link IgxSwitchComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxSwitchModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { DeprecateClass } from '../core/deprecateDecorators';\nimport { IgxIconModule } from '../icon/index';\n\nexport interface ISelectTabEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar.html)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\n@Component({\n    selector: 'igx-bottom-nav',\n    template: `<div>\n    <ng-content></ng-content>\n</div>\n<div #tablist class=\"{{itemStyle}}__menu {{itemStyle}}__menu--bottom\" role=\"tablist\" aria-orientation=\"horizontal\">\n    <igx-tab *ngFor=\"let panel of panels\" [id]=\"'igx-tab-' + panel.index\" [attr.aria-label]=\"panel.label\" [attr.aria-disabled]=\"panel.disabled\"\n        [attr.aria-selected]=\"panel.isSelected\" [attr.aria-controls]=\"'igx-tab-panel-'+ panel.index\" [ngClass]=\"{\n                 'igx-bottom-nav__menu-item': !panel.isSelected && !panel.disabled,\n                 'igx-bottom-nav__menu-item--selected': panel.isSelected,\n                 'igx-bottom-nav__menu-item--disabled': panel.disabled\n             }\" [relatedPanel]=\"panel\" (click)=\"panel.select()\" role=\"tab\">\n    </igx-tab>\n</div>\n`\n})\nexport class IgxBottomNavComponent implements AfterViewInit {\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ViewChildren(forwardRef(() => IgxTabComponent)) public tabs: QueryList<IgxTabComponent>;\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabPanelComponent)) public panels: QueryList<IgxTabPanelComponent>;\n\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-bottom-nav-${NEXT_ID++}`;\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabSelected = new EventEmitter<ISelectTabEventArgs>();\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabDeselected = new EventEmitter<ISelectTabEventArgs>();\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public selectedIndex = -1;\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-bottom-nav';\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        // initial selection\n        setTimeout(() => {\n            if (this.selectedIndex === -1) {\n                const selectablePanels = this.panels.filter((p) => !p.disabled);\n                const panel = selectablePanels[0];\n\n                if (panel) {\n                    panel.select();\n                }\n            }\n        }, 0);\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('onTabSelected', ['$event'])\n    public _selectedPanelHandler(args) {\n        this.selectedIndex = args.panel.index;\n\n        this.panels.forEach((p) => {\n            if (p.index !== this.selectedIndex) {\n                this._deselectPanel(p);\n            }\n        });\n    }\n    /**\n     *@hidden\n     */\n    private _deselectPanel(panel: IgxTabPanelComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (panel.disabled || this.selectedTab.index === panel.index) {\n            return;\n        }\n\n        panel.isSelected = false;\n        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });\n    }\n}\n\n// ================================= IgxTabPanelComponent ======================================\n\n@Component({\n    selector: 'igx-tab-panel',\n    template: `<ng-content></ng-content>\n`\n})\n\nexport class IgxTabPanelComponent implements AfterContentInit, AfterViewChecked {\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-tab-panel';\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public label: string;\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public icon: string;\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public disabled: boolean;\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('attr.role') public role = 'tabpanel';\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel')\n    get styleClass(): boolean {\n        return (!this.isSelected);\n    }\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanelIsSelected;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel--selected')\n    public isSelected = false;\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray()[this.index];\n        }\n    }\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get index() {\n        if (this._tabBar.panels) {\n            return this._tabBar.panels.toArray().indexOf(this);\n        }\n    }\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n    /**\n     *@hidden\n     */\n    private _tabTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })\n    protected tabTemplate: IgxTabTemplateDirective;\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-bottom-nav__panel-${this.index}`);\n    }\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public select() {\n        if (this.disabled || this._tabBar.selectedIndex === this.index) {\n            return;\n        }\n\n        this.isSelected = true;\n        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });\n    }\n}\n\n// ======================================= IgxTabComponent ==========================================\n\n@Component({\n    selector: 'igx-tab',\n    template: `<ng-template #defaultTabTemplate>\n    <div *ngIf=\"relatedPanel.icon\" class=\"tab-icon\">\n        <igx-icon fontSet=\"material\">{{relatedPanel.icon}}</igx-icon>\n        <igx-badge [value]=\"changesCount\" [hidden]=\"changesCount === 0\"></igx-badge>\n    </div>\n    <div *ngIf=\"relatedPanel.label\" ngClass=\"tab-label\">{{relatedPanel.label}}</div>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"relatedPanel.customTabTemplate ? relatedPanel.customTabTemplate : defaultTabTemplate; context: { $implicit: relatedPanel }\">\n</ng-container>`\n})\n\nexport class IgxTabComponent {\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @HostBinding('attr.role') public role = 'tab';\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input() public relatedPanel: IgxTabPanelComponent;\n    /**\n     *@hidden\n     */\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get disabled(): boolean {\n        const panel = this.relatedPanel;\n\n        if (panel) {\n            return panel.disabled;\n        }\n    }\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get isSelected(): boolean {\n        const panel = this.relatedPanel;\n\n        if (panel) {\n            return panel.isSelected;\n        }\n    }\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get index(): number {\n        return this._tabBar.tabs.toArray().indexOf(this);\n    }\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public select() {\n        this.relatedPanel.select();\n    }\n}\n/**\n * The IgxBottomNavModule provides the {@link IgxBottomNavComponent},\n * the {@link IgxTabPanelComponent} and the {@link IgxTabComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule]\n})\nexport class IgxBottomNavModule {\n}\n","import {\n    Directive,\n    forwardRef,\n    Host,\n    HostBinding,\n    Inject,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTabsComponent } from './tabs.component';\n\nenum ButtonStyle {\n    VISIBLE = 'visible',\n    HIDDEN = 'hidden',\n    NOT_DISPLAYED = 'not_displayed'\n}\n\n@Directive({\n    selector: '[igxRightButtonStyle]'\n})\n\nexport class IgxRightButtonStyleDirective {\n    constructor(@Host() @Inject(forwardRef(() => IgxTabsComponent))\n    public tabs: IgxTabsComponent) {\n    }\n\n    private getRightButtonStyle() {\n        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;\n        const itemsContainerWidth = this.tabs.itemsContainer.nativeElement.offsetWidth;\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        const total = offset + viewPortWidth;\n\n        if (itemsContainerWidth <= headerContainerWidth && offset === 0) {\n            return ButtonStyle.NOT_DISPLAYED;\n        }\n\n        if (itemsContainerWidth > total) {\n            return ButtonStyle.VISIBLE;\n        } else {\n            return ButtonStyle.HIDDEN;\n        }\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n}\n\n@Directive({\n    selector: '[igxLeftButtonStyle]'\n})\n\nexport class IgxLeftButtonStyleDirective {\n    constructor(@Host() @Inject(forwardRef(() => IgxTabsComponent))\n    public tabs: IgxTabsComponent) {\n    }\n\n    private getLeftButtonStyle() {\n        const itemsContainerWidth = this.tabs.itemsContainer.nativeElement.offsetWidth;\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n\n        if (offset === 0) {\n            if (itemsContainerWidth <= headerContainerWidth) {\n                return ButtonStyle.NOT_DISPLAYED;\n            }\n            return ButtonStyle.HIDDEN;\n        } else {\n            return ButtonStyle.VISIBLE;\n        }\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n}\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabItemTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    Component,\n    ContentChild,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    Inject,\n    Input,\n    TemplateRef,\n    HostListener\n} from '@angular/core';\n\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsComponent } from './tabs.component';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\n\n@Component({\n    selector: 'igx-tabs-group',\n    template: `<ng-content *ngIf=\"isSelected\"></ng-content>\n`\n})\n\nexport class IgxTabsGroupComponent implements AfterContentInit, AfterViewChecked {\n    public isSelected = false;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public label: string;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public icon: string;\n\n    /**\n    * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.\n    *```html\n    *<igx-tabs-group label=\"Tab 2  Lorem ipsum dolor sit\" icon=\"home\" [disabled]=\"true\">\n    *```\n    */\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tabpanel';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClass(): string {\n        return 'igx-tabs__group';\n    }\n\n    /**\n     * An accessor that returns the `IgxTabItemComponent` component.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabComponent = this.tab.relatedTab;\n     * }\n     * ```\n     */\n    get relatedTab(): IgxTabItemComponent {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray()[this.index];\n        }\n    }\n\n    /**\n     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabIndex = this.tab.index;\n     * }\n     * ```\n     */\n    get index() {\n        if (this._tabs.groups) {\n            return this._tabs.groups.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     *@hidden\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    private _tabTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })\n    protected tabTemplate: IgxTabItemTemplateDirective;\n\n    constructor(\n        @Inject(forwardRef(() => IgxTabsComponent))\n        private _tabs: IgxTabsComponent,\n        private _element: ElementRef) {\n    }\n\n\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            const contentOffset = this._tabs.tabsContainer.nativeElement.offsetWidth * this.index;\n            this._tabs.contentsContainer.nativeElement.style.transitionDuration = `0s`;\n            this._tabs.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-item-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-tabs__group-${this.index}`);\n    }\n\n    /**\n     * A method that sets the focus on a tab.\n     * @memberOf {@link IgxTabGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public tab : IgxTabsGroupComponent;\n     *ngAfterViewInit(){\n     *    this.tab.select();\n     *}\n     *```\n     * @param focusDelay A number representing the expected delay.\n     */\n    public select(focusDelay = 50) {\n        if (this.disabled || this.isSelected) {\n            return;\n        }\n\n        this.isSelected = true;\n        this.relatedTab.tabindex = 0;\n\n        if (focusDelay !== 0) {\n            setTimeout(() => {\n                this.relatedTab.nativeTabItem.nativeElement.focus();\n            }, focusDelay);\n        }\n        this._handleSelection();\n        this._tabs.onTabItemSelected.emit({ tab: this._tabs.tabs.toArray()[this.index], group: this });\n    }\n\n    private _handleSelection() {\n        const tabElement = this.relatedTab.nativeTabItem.nativeElement;\n        const viewPortOffsetWidth = this._tabs.viewPort.nativeElement.offsetWidth;\n\n        if (tabElement.offsetLeft < this._tabs.offset) {\n            this._tabs.scrollElement(tabElement, false);\n        } else if (tabElement.offsetLeft + tabElement.offsetWidth > viewPortOffsetWidth + this._tabs.offset) {\n            this._tabs.scrollElement(tabElement, true);\n        }\n\n        const contentOffset = this._tabs.tabsContainer.nativeElement.offsetWidth * this.index;\n        this._tabs.contentsContainer.nativeElement.style.transitionDuration = `0.2s`;\n        this._tabs.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n\n        this._tabs.selectedIndicator.nativeElement.style.width = `${tabElement.offsetWidth}px`;\n        this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${tabElement.offsetLeft}px)`;\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input\n} from '@angular/core';\n\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxTabsComponent } from './tabs.component';\n\n@Component({\n    selector: 'igx-tab-item',\n    template: `<ng-template #defaultTabTemplate>\n    <div *ngIf=\"relatedGroup.icon\" class=\"igx-tabs__header-menu-item-icon\">\n        <igx-icon fontSet=\"material\">{{relatedGroup.icon}}</igx-icon>\n        <igx-badge [value]=\"changesCount\" [hidden]=\"changesCount === 0\"></igx-badge>\n    </div>\n    <div *ngIf=\"relatedGroup.label\" ngClass=\"igx-tabs__item-label\">{{relatedGroup.label}}</div>\n\n</ng-template>\n<ng-container *ngTemplateOutlet=\"relatedGroup.customTabTemplate ? relatedGroup.customTabTemplate : defaultTabTemplate; context: { $implicit: relatedGroup }\">\n</ng-container>`\n})\n\nexport class IgxTabItemComponent {\n    private _nativeTabItem;\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n\n    /**\n     * Gets the group associated with the tab.\n     * ```html\n     * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;\n     * ```\n     */\n    @Input()\n    public relatedGroup: IgxTabsGroupComponent;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex;\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        this.select();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            this._tabs.selectedIndicator.nativeElement.style.width = `${this.nativeTabItem.nativeElement.offsetWidth}px`;\n            this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${this.nativeTabItem.nativeElement.offsetLeft}px)`;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        this._onKeyDown(false);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        this._onKeyDown(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        this._onKeyDown(false, 0);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        this._onKeyDown(false, this._tabs.tabs.toArray().length - 1);\n    }\n\n    private _onKeyDown(isLeftArrow: boolean, index = null): void {\n        const tabsArray = this._tabs.tabs.toArray();\n        if (index === null) {\n            index = (isLeftArrow)\n                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1\n                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;\n        }\n        const tab = tabsArray[index];\n        const viewPortWidth = this._tabs.viewPort.nativeElement.offsetWidth;\n        const nativeTabElement = tab.nativeTabItem.nativeElement;\n        const focusDelay = (nativeTabElement.offsetWidth + nativeTabElement.offsetLeft - this._tabs.offset > viewPortWidth) ? 200 : 50;\n        tab.select(focusDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    /**\n     * @hidden\n     */\n    get nativeTabItem() {\n        return this._nativeTabItem;\n    }\n\n    /**\n     * \tGets whether the tab is disabled.\n     * ```\n     * const disabledItem = this.myTabComponent.tabs.first.disabled;\n     * ```\n     */\n    get disabled(): boolean {\n        const group = this.relatedGroup;\n\n        if (group) {\n            return group.disabled;\n        }\n    }\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * const selectedItem = this.myTabComponent.tabs.first.isSelected;\n     * ```\n     */\n    get isSelected(): boolean {\n        const group = this.relatedGroup;\n\n        if (group) {\n            return group.isSelected;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get index(): number {\n        return this._tabs.tabs.toArray().indexOf(this);\n    }\n\n    constructor(@Inject(forwardRef(() => IgxTabsComponent)) private _tabs: IgxTabsComponent, private _element: ElementRef) {\n        this._nativeTabItem = _element;\n    }\n\n    /**\n     * @hidden\n     */\n    public select(focusDelay = 50) {\n        this.relatedGroup.select(focusDelay);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';\n\nexport enum TabsType {\n    FIXED = 'fixed',\n    CONTENTFIT = 'contentfit'\n}\n\n@Component({\n    selector: 'igx-tabs',\n    template: `<!-- TODO Remove tab container from here -->\n<div #tabsContainer>\n    <div class=\"igx-tabs__header\" #headerContainer>\n        <button igxRipple class=\"igx-tabs__header-button\" igxButton=\"icon\" (click)=\"scrollLeft($event)\" igxLeftButtonStyle>\n            <igx-icon fontSet=\"material\">navigate_before</igx-icon>\n        </button>\n        <div class=\"igx-tabs__header-wrapper-fixed\" #viewPort>\n            <div #itemsContainer class=\"igx-tabs__header-wrapper-fluid\">\n                <igx-tab-item igxRipple *ngFor=\"let group of groups\" [id]=\"'igx-tab-item-' + group.index\" [attr.aria-label]=\"group.label\"\n                    [attr.aria-disabled]=\"group.disabled\" [attr.aria-selected]=\"group.isSelected\" [attr.aria-controls]=\"'igx-tab-item-group-'+ group.index\"\n                    [ngClass]=\"{\n                'igx-tabs__header-menu-item': !group.isSelected && !group.disabled,\n                'igx-tabs__header-menu-item--selected': group.isSelected,\n                'igx-tabs__header-menu-item--disabled': group.disabled }\" [relatedGroup]=\"group\" role=\"tab\">\n                </igx-tab-item>\n                <div #selectedIndicator *ngIf=\"groups.length > 0\" class=\"igx-tabs__header-menu-item-indicator\"></div>\n            </div>\n        </div>\n        <button igxRipple class=\"igx-tabs__header-button\" igxButton=\"icon\" (click)=\"scrollRight($event)\" igxRightButtonStyle>\n            <igx-icon fontSet=\"material\">navigate_next</igx-icon>\n        </button>\n    </div>\n    <div class=\"igx-tabs__content-fixed\">\n        <div #contentsContainer class=\"igx-tabs__content-fluid\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>`\n})\n\nexport class IgxTabsComponent implements AfterViewInit, OnDestroy {\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * ```typescript\n     * const tabItems = this.myTabComponent.tabs;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxTabItemComponent))\n    public tabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * Provides an observable collection of all `IgxTabsGroupComponent`s.\n     * ```typescript\n     * const groupItems = this.myTabComponent.tabs;\n     * ```\n     */\n    @ContentChildren(forwardRef(() => IgxTabsGroupComponent))\n    public groups: QueryList<IgxTabsGroupComponent>;\n\n    /**\n     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.\n     * By default the header sizing mode is `contentfit`.\n     * ```html\n     * <igx-tabs tabsType=\"fixed\">\n     *     <igx-tabs-group label=\"HOME\">Home</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     */\n    @Input('tabsType')\n    public tabsType: string | TabsType = 'contentfit';\n\n    /**\n     * An @Input property that sets the value of the `selectedIndex`.\n     * Default value is 0.\n     * ```html\n     * <igx-tabs selectedIndex=\"1\">\n     * ```\n     */\n    @Input()\n    public selectedIndex = 0;\n\n    /**\n     * Emitted when a tab item is selected.\n     * ```html\n     * <igx-tabs (onTabItemSelected)=\"itemSelected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemSelected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output() public onTabItemSelected = new EventEmitter();\n\n    /**\n     * Emitted when a tab item is deselected.\n     * ```html\n     * <igx-tabs (onTabItemDeselected)=\"itemDeselected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemDeselected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output() public onTabItemDeselected = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tabsContainer')\n    public tabsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer')\n    public headerContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('itemsContainer')\n    public itemsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('contentsContainer')\n    public contentsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectedIndicator')\n    public selectedIndicator: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('viewPort')\n    public viewPort: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    public get class() {\n        const defaultStyle = `igx-tabs`;\n        const fixedStyle = `igx-tabs--fixed`;\n        const iconStyle = `igx-tabs--icons`;\n        const iconLabelFound = this.groups.find((group) => group.icon != null && group.label != null);\n        let css;\n        switch (TabsType[this.tabsType.toUpperCase()]) {\n            case TabsType.FIXED: {\n                css = fixedStyle;\n                break;\n            }\n            default: {\n                css = defaultStyle;\n                break;\n            }\n        }\n\n        // Layout fix for items with icons\n        if (iconLabelFound !== undefined) {\n            css = `${css} ${iconStyle}`;\n        }\n\n        return css;\n    }\n\n    /**\n     * @hidden\n     */\n    public calculatedWidth: number;\n\n    /**\n     * @hidden\n     */\n    public visibleItemsWidth: number;\n\n    /**\n     * @hidden\n     */\n    public offset = 0;\n\n    private _groupChanges$: Subscription;\n\n    /**\n     * @hidden\n     */\n    public scrollLeft(event) {\n        this._scroll(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollRight(event) {\n        this._scroll(true);\n    }\n\n    private _scroll(scrollRight: boolean): void {\n        const tabsArray = this.tabs.toArray();\n        for (const tab of tabsArray) {\n            const element = tab.nativeTabItem.nativeElement;\n            if (scrollRight) {\n                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            } else {\n                if (element.offsetWidth + element.offsetLeft >= this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            }\n        }\n\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollElement(element: any, scrollRight: boolean): void {\n        requestAnimationFrame(() => {\n            const viewPortWidth = this.viewPort.nativeElement.offsetWidth;\n\n            this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;\n            this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;\n        });\n    }\n\n    /**\n     * Gets the selected `IgxTabItemComponent`.\n     * ```\n     * const selectedItem = this.myTabComponent.selectedTabItem;\n     * ```\n     */\n    get selectedTabItem(): IgxTabItemComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        setTimeout(() => {\n            if (this.selectedIndex <= 0 || this.selectedIndex >= this.groups.length) {\n                // if nothing is selected - select the first tabs group\n                this._selectGroupByIndex(0);\n            } else {\n                this._selectGroupByIndex(this.selectedIndex);\n            }\n        });\n\n        this._groupChanges$ = this.groups.changes.subscribe(() => {\n            this.resetSelectionOnCollectionChanged();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._groupChanges$) {\n            this._groupChanges$.unsubscribe();\n        }\n    }\n\n    private resetSelectionOnCollectionChanged() {\n        setTimeout(() => {\n            if (this.groups.toArray()[this.selectedIndex] !== undefined) {\n                // persist the selected index and applied it to the new collection\n                this._selectGroupByIndex(this.selectedIndex);\n            } else {\n                if (this.selectedIndex >= this.groups.length) {\n                    // in case the selected index is no longer valid, select the last group in the new collection\n                    this._selectGroupByIndex(this.groups.length - 1);\n                }\n            }\n        }, 0);\n    }\n\n    private _selectGroupByIndex(selectedIndex: number) {\n        const selectableGroups = this.groups.filter((selectableGroup) => !selectableGroup.disabled);\n        const group = selectableGroups[selectedIndex];\n\n        if (group) {\n            group.select(0);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('onTabItemSelected', ['$event'])\n    public _selectedGroupHandler(args) {\n        const prevSelectedIndex = this.selectedIndex;\n        if (prevSelectedIndex !== -1 && this.groups.toArray()[prevSelectedIndex] !== undefined) {\n            this.onTabItemDeselected.emit(\n                {\n                    tab: this.groups.toArray()[prevSelectedIndex].relatedTab,\n                    group: this.groups.toArray()[prevSelectedIndex]\n                });\n        }\n\n        this.selectedIndex = args.group.index;\n        this.groups.forEach((p) => {\n            if (p.index !== this.selectedIndex) {\n                this._deselectGroup(p);\n            }\n        });\n    }\n\n    private _deselectGroup(group: IgxTabsGroupComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (group.disabled || this.selectedTabItem.index === group.index) {\n            return;\n        }\n\n        group.isSelected = false;\n        group.relatedTab.tabindex = -1;\n    }\n}\n\n/**\n* The IgxTabsModule provides the {@link IgxTabsComponent}, {@link IgxTabsGroupComponent},\n*{@link IgxTabItemComponent}, {@link IgxTabItemTemplateDirective}, {@link IgxRightButtonStyleDirective}\n* and {@link IgxLeftButtonStyleDirective} inside your application.\n*/\n@NgModule({\n    declarations: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    exports: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]\n})\n\nexport class IgxTabsModule {\n}\n","/**\n * This file contains all the directives used by the @link IgxTimePickerComponent.\n * You should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Host,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    Output,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTimePickerComponent } from './time-picker.component';\n\n/** @hidden */\n@Directive({\n    selector: '[igxItemList]'\n})\nexport class IgxItemListDirective {\n\n    @Input('igxItemList')\n    public type: string;\n\n    public isActive: boolean;\n\n    constructor(@Host() @Inject(forwardRef(() => IgxTimePickerComponent))\n                public timePicker: IgxTimePickerComponent,\n                private elementRef: ElementRef) {}\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-time-picker__column')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__hourList')\n    get hourCSS(): boolean {\n        return this.type === 'hourList';\n    }\n\n    @HostBinding('class.igx-time-picker__minuteList')\n    get minuteCSS(): boolean {\n        return this.type === 'minuteList';\n    }\n\n    @HostBinding('class.igx-time-picker__ampmList')\n    get ampmCSS(): boolean {\n        return this.type === 'ampmList';\n    }\n\n    @HostListener('focus')\n    public onFocus() {\n        this.isActive = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    private nextItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.nextHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.nextMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.nextAmPm();\n                break;\n            }\n        }\n    }\n\n    private prevItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.prevHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.prevMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.prevAmPm();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.prevItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('hourList') !== -1) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if (listName.indexOf('minuteList') !== -1 && this.timePicker._ampmItems.length !== 0) {\n            this.timePicker.ampmList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('minuteList') !== -1) {\n            this.timePicker.hourList.nativeElement.focus();\n        } else if (listName.indexOf('ampmList') !== -1) {\n            this.timePicker.minuteList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.okButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.cancelButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onHover() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('wheel', ['$event'])\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.deltaY > 0) {\n            this.nextItem();\n        } else if (event.deltaY < 0) {\n            this.prevItem();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    public onPanMove(event) {\n        if (event.deltaY < 0) {\n            this.nextItem();\n        } else if (event.deltaY > 0) {\n            this.prevItem();\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHourItem]'\n})\nexport class IgxHourItemDirective {\n\n    @Input('igxHourItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedHour;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedHour && this.itemList.isActive;\n    }\n\n    get isSelectedHour(): boolean {\n        return this.timePicker.selectedHour === this.value;\n    }\n\n    constructor(@Host() @Inject(forwardRef(() => IgxTimePickerComponent))\n                public timePicker: IgxTimePickerComponent,\n                private itemList: IgxItemListDirective) {}\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollHourIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxMinuteItem]'\n})\nexport class IgxMinuteItemDirective {\n\n    @Input('igxMinuteItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedMinute;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedMinute && this.itemList.isActive;\n    }\n\n    get isSelectedMinute(): boolean {\n        return this.timePicker.selectedMinute === this.value;\n    }\n\n    constructor(@Host() @Inject(forwardRef(() => IgxTimePickerComponent))\n                public timePicker: IgxTimePickerComponent,\n                private itemList: IgxItemListDirective) {}\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollMinuteIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxAmPmItem]'\n})\nexport class IgxAmPmItemDirective {\n\n    @Input('igxAmPmItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedAmPm;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedAmPm && this.itemList.isActive;\n    }\n\n    get isSelectedAmPm(): boolean {\n        return this.timePicker.selectedAmPm === this.value;\n    }\n\n    constructor(@Host() @Inject(forwardRef(() => IgxTimePickerComponent))\n                public timePicker: IgxTimePickerComponent,\n                private itemList: IgxItemListDirective) {}\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollAmPmIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxTimePickerTemplate]'\n})\nexport class IgxTimePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n","import {\n    CommonModule\n} from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    AfterViewInit,\n    DoCheck,\n    ContentChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxDialogComponent, IgxDialogModule } from '../dialog/dialog.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxInputDirective } from '../directives/input/input.directive';\nimport {\n    IgxAmPmItemDirective,\n    IgxHourItemDirective,\n    IgxItemListDirective,\n    IgxMinuteItemDirective,\n    IgxTimePickerTemplateDirective\n} from './time-picker.directives';\nimport { Subscription } from 'rxjs';\nimport { EditorProvider } from '../core/edit-provider';\n\nlet NEXT_ID = 0;\nexport class TimePickerHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\nexport interface IgxTimePickerValueChangedEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\n\nexport interface IgxTimePickerValidationFailedEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxTimePickerComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: TimePickerHammerConfig\n        }\n    ],\n    selector: 'igx-time-picker',\n    styles: [':host {display: block;}'],\n    template: `<ng-template #defaultTimePickerTemplate>\n    <igx-input-group (click)=\"openDialog()\">\n        <igx-prefix>\n            <igx-icon>access_time</igx-icon>\n        </igx-prefix>\n        <label igxLabel>Time</label>\n        <input igxInput [value]=\"displayTime\" [disabled]=\"disabled\" tabindex=\"0\" readonly />\n    </igx-input-group>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\n<ng-container *ngTemplateOutlet=\"scroll\"></ng-container>\n<ng-template #scroll>\n    <igx-dialog class=\"igx-time-picker__dialog-popup\" closeOnOutsideSelect=\"true\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\"\n        [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n        <ng-container #container>\n            <div class=\"igx-time-picker__wrapper\">\n                <div class=\"igx-time-picker__header\">\n                    <h5 class=\"igx-time-picker__header-ampm\">{{ selectedAmPm }}</h5>\n                    <h2 class=\"igx-time-picker__header-hour\">\n                        <span>{{ selectedHour }}</span>:<span>{{ selectedMinute }}</span>\n                    </h2>\n                </div>\n                <div class=\"igx-time-picker__body\">\n                    <div #hourList [igxItemList]=\"'hourList'\">\n                        <span [igxHourItem]=\"hour\" *ngFor=\"let hour of hourView\">{{ hour }}</span>\n                    </div>\n                    <div #minuteList [igxItemList]=\"'minuteList'\">\n                        <span [igxMinuteItem]=\"minute\" *ngFor=\"let minute of minuteView\">{{ minute }}</span>\n                    </div>\n                    <div #ampmList [igxItemList]=\"'ampmList'\">\n                        <span [igxAmPmItem]=\"ampm\" *ngFor=\"let ampm of ampmView\">{{ ampm }}</span>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n    </igx-dialog>\n</ng-template>\n`\n})\nexport class IgxTimePickerComponent implements ControlValueAccessor, EditorProvider, OnInit, OnDestroy, DoCheck, AfterViewInit {\n\n    private _value: Date;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-time-picker-${NEXT_ID++}`;\n\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     *public date: Date = new Date(Date.now());\n     *  //...\n     *<igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set value(value: Date) {\n        if (this._isValueValid(value)) {\n            this._value = value;\n            this._onChangeCallback(value);\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: value,\n                setThroughUI: false\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     *@ViewChild(\"MyPick\")\n     *public pick: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date {\n        return this._value;\n    }\n\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public okButtonLabel = 'OK';\n\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public cancelButtonLabel = 'Cancel';\n\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes:1}`\n     * ```html\n     *<igx-time-picker [itemsDelta]=\"{hours:3, minutes:5}\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public itemsDelta = { hours: 1, minutes: 1 };\n\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     *```html\n     *public min: string = \"09:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public minValue: string;\n\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     *```html\n     *public max: string = \"18:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public maxValue: string;\n\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     *The minutes and hour spinning will wrap around by default.\n     *```html\n     *<igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     *<igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     *<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public format = 'hh:mm tt';\n\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     *```typescript\n     * @ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValueChanged(timepicker){\n     *    this.toast.show()\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     *```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<IgxTimePickerValueChangedEventArgs>();\n\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     *public min: string = \"09:00\";\n     *public max: string = \"18:00\";\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValidationFailed(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IgxTimePickerValidationFailedEventArgs>();\n\n    /**\n     * Emitted when a timePicker is being opened.\n     * ```html\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onOpen(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onOpen)=\"onOpen($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The time picker has been opened!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    @Output()\n    public onClose = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hourList')\n    public hourList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('minuteList')\n    public minuteList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ampmList')\n    public ampmList: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('defaultTimePickerTemplate', { read: TemplateRef })\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective })\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxInputDirective, { read: ElementRef })\n    private _input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxDialogComponent)\n    private _alert: IgxDialogComponent;\n\n    /**\n     * @hidden\n     */\n    public _hourItems = [];\n    /**\n     * @hidden\n     */\n    public _minuteItems = [];\n    /**\n     * @hidden\n     */\n    public _ampmItems = [];\n\n    private _isHourListLoop = this.isSpinLoop;\n    private _isMinuteListLoop = this.isSpinLoop;\n\n    private _hourView = [];\n    private _minuteView = [];\n    private _ampmView = [];\n\n    /**\n     * @hidden\n     */\n    public selectedHour: string;\n    /**\n     * @hidden\n     */\n    public selectedMinute: string;\n    /**\n     * @hidden\n     */\n    public selectedAmPm: string;\n\n    private _prevSelectedHour: string;\n    private _prevSelectedMinute: string;\n    private _prevSelectedAmPm: string;\n\n    protected dialogClosed = new Subscription();\n\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     *}\n     *```\n     */\n    public get displayTime(): string {\n        if (this.value) {\n            return this._formatTime(this.value, this.format);\n        }\n\n        return '';\n    }\n\n    /**\n     * @hidden\n     */\n    get hourView(): string[] {\n        return this._hourView;\n    }\n\n    /**\n     * @hidden\n     */\n    get minuteView(): string[] {\n        return this._minuteView;\n    }\n\n    /**\n     * @hidden\n     */\n    get ampmView(): string[] {\n        return this._ampmView;\n    }\n\n    /**\n     * opens the dialog.\n     * ```html\n     *<igx-time-picker #tp></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('tp', { read: IgxTimePickerComponent }) tp: IgxTimePickerComponent;\n     * tp.openDialog();\n     * ```\n     */\n    public openDialog(timePicker: IgxTimePickerComponent = this): void {\n        if (this.value) {\n            const foramttedTime = this._formatTime(this.value, this.format);\n            const sections = foramttedTime.split(/[\\s:]+/);\n\n            this.selectedHour = sections[0];\n            this.selectedMinute = sections[1];\n\n            if (this._ampmItems !== null) {\n                this.selectedAmPm = sections[2];\n            }\n        }\n\n        if (this.selectedHour === undefined) {\n            this.selectedHour = `${this._hourItems[3]}`;\n        }\n        if (this.selectedMinute === undefined) {\n            this.selectedMinute = '0';\n        }\n        if (this.selectedAmPm === undefined && this._ampmItems !== null) {\n            this.selectedAmPm = this._ampmItems[3];\n        }\n\n        this._prevSelectedHour = this.selectedHour;\n        this._prevSelectedMinute = this.selectedMinute;\n        this._prevSelectedAmPm = this.selectedAmPm;\n\n        this._alert.open();\n        this._onTouchedCallback();\n\n        this._updateHourView(0, 7);\n        this._updateMinuteView(0, 7);\n        this._updateAmPmView(0, 7);\n\n        if (this.selectedHour) {\n            this.scrollHourIntoView(this.selectedHour);\n        }\n        if (this.selectedMinute) {\n            this.scrollMinuteIntoView(this.selectedMinute);\n        }\n        if (this.selectedAmPm) {\n            this.scrollAmPmIntoView(this.selectedAmPm);\n        }\n\n        setTimeout(() => {\n            this.hourList.nativeElement.focus();\n        });\n\n        this.onOpen.emit(this);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this._generateHours();\n        this._generateMinutes();\n        if (this.format.indexOf('tt') !== -1) {\n            this._generateAmPm();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        this.dialogClosed = this._alert.toggleRef.onClosed.pipe().subscribe((ev) => this.handleDialogCloseAction());\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this.dialogClosed.unsubscribe();\n    }\n\n    // XXX - temporary fix related with issue #1660\n    public ngDoCheck(): void {\n        if (this.vertical && this._alert) {\n            this._alert.toggleRef.element.classList.remove('igx-time-picker');\n            this._alert.toggleRef.element.classList.add('igx-time-picker--vertical');\n        } else if (!this.vertical && this._alert) {\n            this._alert.toggleRef.element.classList.add('igx-time-picker');\n            this._alert.toggleRef.element.classList.remove('igx-time-picker--vertical');\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public handleDialogCloseAction() {\n        if (this._input) {\n            this._input.nativeElement.focus();\n        }\n        this.onClose.emit(this);\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        this.value = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this._input.nativeElement;\n    }\n\n    private _onTouchedCallback: () => void = () => { };\n\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    private _scrollItemIntoView(item: string, items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        let itemIntoView;\n        if (items) {\n            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));\n            let view;\n\n            if (index !== -1) {\n                if (isListLoop) {\n                    if (index > 0) {\n                        selectedItem = this._itemToString(items[index - 1], viewType);\n                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);\n                    } else {\n                        selectedItem = this._itemToString(items[1], viewType);\n                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);\n                    }\n                } else {\n                    view = items.slice(index - 3, index + 4);\n                    selectedItem = this._itemToString(items[index], viewType);\n                    itemIntoView = { selectedItem, view };\n                }\n                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);\n            }\n        }\n        return itemIntoView;\n    }\n\n    private _viewToString(view: any, viewType: string): any {\n        for (let i = 0; i < view.length; i++) {\n            if (typeof (view[i]) !== 'string') {\n                view[i] = this._itemToString(view[i], viewType);\n            }\n        }\n        return view;\n    }\n\n    private _itemToString(item: any, viewType: string): string {\n        if (item === null) {\n            item = '';\n        } else if (viewType && typeof (item) !== 'string') {\n            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));\n            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);\n\n            const leadZero = (viewType === 'hour') ? leadZeroHour : leadZeroMinute;\n            item = (leadZero) ? '0' + item : `${item}`;\n        }\n        return item;\n    }\n\n    private _prevItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex - 4 < 0) {\n                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3));\n            } else if (selectedIndex + 4 > itemsCount) {\n                view = items.slice(selectedIndex - 4, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            }\n\n            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];\n        } else if (selectedIndex > 3) {\n            view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            selectedItem = items[selectedIndex - 1];\n        } else if (selectedIndex === 3) {\n            view = items.slice(0, 7);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _nextItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex < 2) {\n                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5));\n            } else if (selectedIndex + 4 >= itemsCount) {\n                view = items.slice(selectedIndex - 2, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            }\n\n            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];\n        } else if (selectedIndex + 1 < itemsCount - 3) {\n            view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            selectedItem = items[selectedIndex + 1];\n        } else if (selectedIndex === itemsCount - 4) {\n            view = items.slice(selectedIndex - 3, itemsCount);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _formatTime(value: Date, format: string): string {\n        if (!value) {\n            return '';\n        } else {\n            let hour = value.getHours();\n            const minute = value.getMinutes();\n            let formattedMinute;\n            let formattedHour;\n            let amPM;\n\n            if (format.indexOf('h') !== -1) {\n                amPM = (hour > 11) ? 'PM' : 'AM';\n\n                if (hour > 12) {\n                    hour -= 12;\n                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;\n                } else if (hour === 0) {\n                    formattedHour = '12';\n                } else if (hour < 10 && format.indexOf('hh') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            } else {\n                if (hour < 10 && format.indexOf('HH') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            }\n\n            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;\n\n            return format.replace('hh', formattedHour).replace('h', formattedHour)\n                .replace('HH', formattedHour).replace('H', formattedHour)\n                .replace('mm', formattedMinute).replace('m', formattedMinute)\n                .replace('tt', amPM);\n        }\n    }\n\n    private _updateHourView(start: any, end: any): void {\n        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');\n    }\n\n    private _updateMinuteView(start: any, end: any): void {\n        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');\n    }\n\n    private _updateAmPmView(start: any, end: any): void {\n        this._ampmView = this._ampmItems.slice(start, end);\n    }\n\n    private _addEmptyItems(items: string[]): void {\n        for (let i = 0; i < 3; i++) {\n            items.push(null);\n        }\n    }\n\n    private _generateHours(): void {\n        let hourItemsCount = 24;\n        if (this.format.indexOf('h') !== -1) {\n            hourItemsCount = 13;\n        }\n\n        hourItemsCount /= this.itemsDelta.hours;\n\n        let i = this.format.indexOf('H') !== -1 ? 0 : 1;\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n            this._isHourListLoop = false;\n        }\n\n        if (hourItemsCount > 1) {\n            for (i; i < hourItemsCount; i++) {\n                this._hourItems.push(i * this.itemsDelta.hours);\n            }\n        } else {\n            this._hourItems.push(0);\n        }\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n        }\n    }\n\n    private _generateMinutes(): void {\n        const minuteItemsCount = 60 / this.itemsDelta.minutes;\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n            this._isMinuteListLoop = false;\n        }\n\n        for (let i = 0; i < minuteItemsCount; i++) {\n            this._minuteItems.push(i * this.itemsDelta.minutes);\n        }\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n        }\n    }\n\n    private _generateAmPm(): void {\n\n        this._addEmptyItems(this._ampmItems);\n\n        this._ampmItems.push('AM');\n        this._ampmItems.push('PM');\n\n        this._addEmptyItems(this._ampmItems);\n    }\n\n    private _getSelectedTime(): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        date.setHours(parseInt(this.selectedHour, 10));\n        date.setMinutes(parseInt(this.selectedMinute, 10));\n        date.setSeconds(0);\n        if (this.selectedAmPm === 'PM' && this.selectedHour !== '12') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {\n            date.setHours(0);\n        }\n        return date;\n    }\n\n    private _convertMinMaxValue(value: string): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        const sections = value.split(/[\\s:]+/);\n\n        date.setHours(parseInt(sections[0], 10));\n        date.setMinutes(parseInt(sections[1], 10));\n        date.setSeconds(0);\n        if (sections[2] && sections[2] === 'PM' && sections[0] !== '12') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (sections[2] && sections[2] && sections[0] === '12') {\n            date.setHours(0);\n        }\n\n        return date;\n    }\n\n    private _isValueValid(value: Date): boolean {\n        if (this.maxValue && value > this._convertMinMaxValue(this.maxValue)) {\n            return false;\n        } else if (this.minValue && value < this._convertMinMaxValue(this.minValue)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     *scrhintoView(tp) {\n     *tp.scrollHourIntoView('2');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #tp format=\"h:mm tt\" (onOpen)=\"scrhintoView(tp)\"></igx-time-picker>\n     *```\n     *@param item to be scrolled in view.\n     */\n    public scrollHourIntoView(item: string): void {\n        const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        if (hourIntoView) {\n            this._hourView = hourIntoView.view;\n            this.selectedHour = hourIntoView.selectedItem;\n        }\n    }\n\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     *scrMintoView(tp) {\n     *tp.scrollMinuteIntoView('3');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #tp format=\"h:mm tt\" (onOpen)=\"scrMintoView(tp)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollMinuteIntoView(item: string): void {\n        const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        if (minuteIntoView) {\n            this._minuteView = minuteIntoView.view;\n            this.selectedMinute = minuteIntoView.selectedItem;\n        }\n    }\n\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     *scrAmPmIntoView(tp) {\n     *tp.scrollAmPmIntoView('PM');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #tp format=\"h:mm tt\" (onOpen)=\"scrAmPmIntoView(tp)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollAmPmIntoView(item: string): void {\n        const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);\n        if (ampmIntoView) {\n            this._ampmView = ampmIntoView.view;\n            this.selectedAmPm = ampmIntoView.selectedItem;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextHour() {\n        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = nextHour.view;\n        this.selectedHour = nextHour.selectedItem;\n    }\n\n    /**\n     * @hidden\n     */\n    public prevHour() {\n        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = prevHour.view;\n        this.selectedHour = prevHour.selectedItem;\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMinute() {\n        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = nextMinute.view;\n        this.selectedMinute = nextMinute.selectedItem;\n    }\n\n    /**\n     * @hidden\n     */\n    public prevMinute() {\n        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = prevMinute.view;\n        this.selectedMinute = prevMinute.selectedItem;\n    }\n\n    /**\n     * @hidden\n     */\n    public nextAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex + 1 < this._ampmItems.length - 3) {\n            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);\n            this.selectedAmPm = this._ampmItems[selectedIndex + 1];\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public prevAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex > 3) {\n            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);\n            this.selectedAmPm = this._ampmItems[selectedIndex - 1];\n        }\n    }\n\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    public okButtonClick(): boolean {\n        if (this._isValueValid(this._getSelectedTime())) {\n            this._alert.close();\n            const oldValue = this.value;\n            this.value = this._getSelectedTime();\n            const args: IgxTimePickerValueChangedEventArgs = {\n                oldValue,\n                newValue: this.value\n            };\n            this.onValueChanged.emit(args);\n            return true;\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: this._getSelectedTime(),\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n            return false;\n        }\n    }\n\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    public cancelButtonClick(): void {\n        this._alert.close();\n        this.selectedHour = this._prevSelectedHour;\n        this.selectedMinute = this._prevSelectedMinute;\n        this.selectedAmPm = this._prevSelectedAmPm;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onKeydownSpace(event) {\n        this.openDialog();\n        event.preventDefault();\n    }\n\n    /**\n     * Returns an array of the hours currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let hInView = this.picker.hoursInView;\n     *}\n     *```\n     */\n    public hoursInView(): string[] {\n        return this._hourView.filter((hour) => hour !== '');\n    }\n\n    /**\n     * Returns an array of the minutes currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.minutesInView;\n     *}\n     *```\n     */\n    public minutesInView(): string[] {\n        return this._minuteView.filter((minute) => minute !== '');\n    }\n\n    /**\n     * Returns an array of the AM/PM currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let ApInView = this.picker.ampmInView;\n     *}\n     *```\n     */\n    public ampmInView(): string[] {\n        return this._ampmView.filter((ampm) => ampm !== '');\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.timePickerTemplateDirective) {\n            return this.timePickerTemplateDirective.template;\n        }\n        return this.defaultTimePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayTime: this.displayTime,\n            openDialog: () => { this.openDialog(); }\n        };\n    }\n}\n\n/**\n * The IgxTimePickerModule provides the {@link IgxTimePickerComponent} inside your application.\n */\n@NgModule({\n    declarations: [\n        IgxTimePickerComponent,\n        IgxHourItemDirective,\n        IgxItemListDirective,\n        IgxMinuteItemDirective,\n        IgxAmPmItemDirective,\n        IgxTimePickerTemplateDirective\n    ],\n    exports: [\n        IgxTimePickerComponent,\n        IgxTimePickerTemplateDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxInputGroupModule,\n        IgxDialogModule,\n        IgxIconModule\n    ],\n    providers: []\n})\nexport class IgxTimePickerModule { }\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast.html)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animate', [\n            state('show', style({\n                opacity: 1\n            })),\n            transition('* => show', animate('.20s ease')),\n            transition('show => *', animate('.40s ease-out'))\n        ])\n    ],\n    selector: 'igx-toast',\n    template: `<div [ngClass]=\"mapPositionToClassName()\" *ngIf=\"this.isVisible\" [@animate]=\"'show'\">\n    {{ message }}\n</div>\n`\n})\nexport class IgxToastComponent implements IToggleView, OnInit, OnDestroy {\n    /**\n     * Returns a list of available CSS classes.\n     * ```typescript\n     * let toastClasses =  this.toast.CSS_CLASSES;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public readonly CSS_CLASSES = {\n        IGX_TOAST_BOTTOM: 'igx-toast--bottom',\n        IGX_TOAST_MIDDLE: 'igx-toast--middle',\n        IGX_TOAST_TOP: 'igx-toast--top'\n    };\n\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-toast-${NEXT_ID++}`;\n\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShowing) = \"onShowing($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShowing = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShown) = \"onShown($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShown = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHiding) = \"onHiding($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHiding = new EventEmitter<IgxToastComponent>();\n\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHidden) = \"onHidden($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHidden = new EventEmitter<IgxToastComponent>();\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public role = 'alert';\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public displayTime = 4000;\n\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible] = \"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public isVisible = false;\n\n    /**\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message] = \"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public message: string;\n\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position] = \"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public position: IgxToastPosition = IgxToastPosition.Bottom;\n\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService) { }\n\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     * ```typescript\n     * this.toast.show();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public show(): void {\n        clearInterval(this.timeoutId);\n        this.onShowing.emit(this);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n\n        this.onShown.emit(this);\n    }\n\n    /**\n     * Hides the toast.\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public hide(): void {\n        this.onHiding.emit(this);\n        this.isVisible = false;\n        this.onHidden.emit(this);\n\n        clearInterval(this.timeoutId);\n    }\n\n    /**\n     * Wraps @show() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public open() {\n        this.show();\n    }\n\n    /**\n     * Wraps @hide() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public close() {\n        this.hide();\n    }\n\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public toggle() {\n        this.isVisible ? this.close() : this.open();\n    }\n    /**\n     * Sets/gets the class name of the toast based on the `position` value.\n     * ```typescript\n     * let className =  this.toast.mapPositionToClassName();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public mapPositionToClassName(): any {\n        if (this.position === IgxToastPosition.Top) {\n            return this.CSS_CLASSES.IGX_TOAST_TOP;\n        }\n\n        if (this.position === IgxToastPosition.Middle) {\n            return this.CSS_CLASSES.IGX_TOAST_MIDDLE;\n        }\n\n        if (this.position === IgxToastPosition.Bottom) {\n            return this.CSS_CLASSES.IGX_TOAST_BOTTOM;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n    }\n}\n\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport enum IgxToastPosition {\n    Bottom,\n    Middle,\n    Top\n}\n/**\n * The IgxToastModule provides the {@link IgxToastComponent} inside your application.\n */\n@NgModule({\n    declarations: [IgxToastComponent],\n    exports: [IgxToastComponent],\n    imports: [CommonModule]\n})\nexport class IgxToastModule { }\n"],"names":["baseParams","baseRecipe","base","baseInParams","baseOutParams","style","isDate","noop","animation","nextId","state","first","NEXT_ID","interval","Subject","IgxHierarchicalTransactionService","map","getDOM","DOCUMENT","animate"],"mappings":"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"}
