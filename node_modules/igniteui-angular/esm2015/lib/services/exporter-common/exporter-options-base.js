/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
export class IgxExporterOptionsBase {
    /**
     * @param {?} fileName
     * @param {?} _fileExtension
     */
    constructor(fileName, _fileExtension) {
        this._fileExtension = _fileExtension;
        /**
         * Specifies whether hidden columns should be exported.
         * ```typescript
         * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;
         * this.exportOptions.ignoreColumnsVisibility = true;
         * ```
         * \@memberof IgxExporterOptionsBase
         */
        this.ignoreColumnsVisibility = false;
        /**
         * Specifies whether filtered out rows should be exported.
         * ```typescript
         * let ignoreFiltering = this.exportOptions.ignoreFiltering;
         * this.exportOptions.ignoreFiltering = true;
         * ```
         * \@memberof IgxExporterOptionsBase
         */
        this.ignoreFiltering = false;
        /**
         * Specifies if the exporter should ignore the current column order in the IgxGrid.
         * ```typescript
         * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;
         * this.exportOptions.ignoreColumnsOrder = true;
         * ```
         * \@memberof IgxExporterOptionsBase
         */
        this.ignoreColumnsOrder = false;
        /**
         * Specifies whether the exported data should be sorted as in the provided IgxGrid.
         * ```typescript
         * let ignoreSorting = this.exportOptions.ignoreSorting;
         * this.exportOptions.ignoreSorting = true;
         * ```
         * \@memberof IgxExporterOptionsBase
         */
        this.ignoreSorting = false;
        this.setFileName(fileName);
    }
    /**
     * @param {?} fileName
     * @return {?}
     */
    setFileName(fileName) {
        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');
    }
    /**
     * Gets the file name which will be used for the exporting operation.
     * ```typescript
     * let fileName = this.exportOptions.fileName;
     * ```
     * \@memberof IgxExporterOptionsBase
     * @return {?}
     */
    get fileName() {
        return this._fileName;
    }
    /**
     * Sets the file name which will be used for the exporting operation.
     * ```typescript
     * this.exportOptions.fileName = 'exportedData01';
     * ```
     * \@memberof IgxExporterOptionsBase
     * @param {?} value
     * @return {?}
     */
    set fileName(value) {
        this.setFileName(value);
    }
}
function IgxExporterOptionsBase_tsickle_Closure_declarations() {
    /** @type {?} */
    IgxExporterOptionsBase.prototype._fileName;
    /**
     * Specifies whether hidden columns should be exported.
     * ```typescript
     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;
     * this.exportOptions.ignoreColumnsVisibility = true;
     * ```
     * \@memberof IgxExporterOptionsBase
     * @type {?}
     */
    IgxExporterOptionsBase.prototype.ignoreColumnsVisibility;
    /**
     * Specifies whether filtered out rows should be exported.
     * ```typescript
     * let ignoreFiltering = this.exportOptions.ignoreFiltering;
     * this.exportOptions.ignoreFiltering = true;
     * ```
     * \@memberof IgxExporterOptionsBase
     * @type {?}
     */
    IgxExporterOptionsBase.prototype.ignoreFiltering;
    /**
     * Specifies if the exporter should ignore the current column order in the IgxGrid.
     * ```typescript
     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;
     * this.exportOptions.ignoreColumnsOrder = true;
     * ```
     * \@memberof IgxExporterOptionsBase
     * @type {?}
     */
    IgxExporterOptionsBase.prototype.ignoreColumnsOrder;
    /**
     * Specifies whether the exported data should be sorted as in the provided IgxGrid.
     * ```typescript
     * let ignoreSorting = this.exportOptions.ignoreSorting;
     * this.exportOptions.ignoreSorting = true;
     * ```
     * \@memberof IgxExporterOptionsBase
     * @type {?}
     */
    IgxExporterOptionsBase.prototype.ignoreSorting;
    /** @type {?} */
    IgxExporterOptionsBase.prototype._fileExtension;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0ZXItb3B0aW9ucy1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9leHBvcnRlci1jb21tb24vZXhwb3J0ZXItb3B0aW9ucy1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxNQUFNOzs7OztJQTJDRixZQUFZLFFBQWdCLEVBQVksY0FBc0I7UUFBdEIsbUJBQWMsR0FBZCxjQUFjLENBQVE7Ozs7Ozs7Ozt1Q0FoQzdCLEtBQUs7Ozs7Ozs7OzsrQkFVYixLQUFLOzs7Ozs7Ozs7a0NBVUYsS0FBSzs7Ozs7Ozs7OzZCQVVWLEtBQUs7UUFHeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUM5Qjs7Ozs7SUFFTyxXQUFXLENBQUMsUUFBZ0I7UUFDaEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDOzs7Ozs7Ozs7O0lBVTlHLElBQUksUUFBUTtRQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0tBQ3pCOzs7Ozs7Ozs7O0lBU0QsSUFBSSxRQUFRLENBQUMsS0FBSztRQUNkLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDM0I7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJZ3hFeHBvcnRlck9wdGlvbnNCYXNlIHtcbiAgICBwcml2YXRlIF9maWxlTmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHdoZXRoZXIgaGlkZGVuIGNvbHVtbnMgc2hvdWxkIGJlIGV4cG9ydGVkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgaWdub3JlQ29sdW1uc1Zpc2liaWxpdHkgPSB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlQ29sdW1uc1Zpc2liaWxpdHk7XG4gICAgICogdGhpcy5leHBvcnRPcHRpb25zLmlnbm9yZUNvbHVtbnNWaXNpYmlsaXR5ID0gdHJ1ZTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhwb3J0ZXJPcHRpb25zQmFzZVxuICAgICAqL1xuICAgIHB1YmxpYyBpZ25vcmVDb2x1bW5zVmlzaWJpbGl0eSA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHdoZXRoZXIgZmlsdGVyZWQgb3V0IHJvd3Mgc2hvdWxkIGJlIGV4cG9ydGVkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgaWdub3JlRmlsdGVyaW5nID0gdGhpcy5leHBvcnRPcHRpb25zLmlnbm9yZUZpbHRlcmluZztcbiAgICAgKiB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlRmlsdGVyaW5nID0gdHJ1ZTtcbiAgICAgKiBgYGBcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhwb3J0ZXJPcHRpb25zQmFzZVxuICAgICAqL1xuICAgIHB1YmxpYyBpZ25vcmVGaWx0ZXJpbmcgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBpZiB0aGUgZXhwb3J0ZXIgc2hvdWxkIGlnbm9yZSB0aGUgY3VycmVudCBjb2x1bW4gb3JkZXIgaW4gdGhlIElneEdyaWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBpZ25vcmVDb2x1bW5zT3JkZXIgPSB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlQ29sdW1uc09yZGVyO1xuICAgICAqIHRoaXMuZXhwb3J0T3B0aW9ucy5pZ25vcmVDb2x1bW5zT3JkZXIgPSB0cnVlO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeHBvcnRlck9wdGlvbnNCYXNlXG4gICAgICovXG4gICAgcHVibGljIGlnbm9yZUNvbHVtbnNPcmRlciA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIGV4cG9ydGVkIGRhdGEgc2hvdWxkIGJlIHNvcnRlZCBhcyBpbiB0aGUgcHJvdmlkZWQgSWd4R3JpZC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGlnbm9yZVNvcnRpbmcgPSB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlU29ydGluZztcbiAgICAgKiB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlU29ydGluZyA9IHRydWU7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEV4cG9ydGVyT3B0aW9uc0Jhc2VcbiAgICAgKi9cbiAgICBwdWJsaWMgaWdub3JlU29ydGluZyA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoZmlsZU5hbWU6IHN0cmluZywgcHJvdGVjdGVkIF9maWxlRXh0ZW5zaW9uOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZXRGaWxlTmFtZShmaWxlTmFtZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRGaWxlTmFtZShmaWxlTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2ZpbGVOYW1lID0gZmlsZU5hbWUgKyAoZmlsZU5hbWUuZW5kc1dpdGgodGhpcy5fZmlsZUV4dGVuc2lvbikgPT09IGZhbHNlID8gdGhpcy5fZmlsZUV4dGVuc2lvbiA6ICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmaWxlIG5hbWUgd2hpY2ggd2lsbCBiZSB1c2VkIGZvciB0aGUgZXhwb3J0aW5nIG9wZXJhdGlvbi5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGZpbGVOYW1lID0gdGhpcy5leHBvcnRPcHRpb25zLmZpbGVOYW1lO1xuICAgICAqIGBgYFxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeHBvcnRlck9wdGlvbnNCYXNlXG4gICAgICovXG4gICAgZ2V0IGZpbGVOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsZU5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZmlsZSBuYW1lIHdoaWNoIHdpbGwgYmUgdXNlZCBmb3IgdGhlIGV4cG9ydGluZyBvcGVyYXRpb24uXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuZXhwb3J0T3B0aW9ucy5maWxlTmFtZSA9ICdleHBvcnRlZERhdGEwMSc7XG4gICAgICogYGBgXG4gICAgICogQG1lbWJlcm9mIElneEV4cG9ydGVyT3B0aW9uc0Jhc2VcbiAgICAgKi9cbiAgICBzZXQgZmlsZU5hbWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5zZXRGaWxlTmFtZSh2YWx1ZSk7XG4gICAgfVxuXG59XG4iXX0=