{
  "version": 3,
  "file": "ngx-material-timepicker.umd.min.js",
  "sources": [
    "ng://ngx-material-timepicker/node_modules/tslib/tslib.es6.js",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/models/time-period.enum.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/models/time-format.enum.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/services/time-adapter.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/services/ngx-material-timepicker.service.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/ngx-material-timepicker.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/timepicker-time.namespace.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/pipes/time-formatter.pipe.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/ngx-timepicker.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/overlay.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/autofocus.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/ngx-material-timepicker.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "export enum TimePeriod {\r\n    AM = 'AM',\r\n    PM = 'PM'\r\n}\r\n",
    "export enum TimeFormat {\r\n    TWELVE = 'hh:mm a',\r\n    TWENTY_FOUR = 'HH:mm'\r\n}\r\n",
    "import * as _moment from 'moment';\r\nimport {Moment, unitOfTime} from 'moment';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\nimport {TimePeriod} from '../models/time-period.enum';\r\n\r\nconst moment = _moment;\r\n\r\nexport class TimeAdapter {\r\n\r\n    static formatTime(time: string, format = 12): string {\r\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\r\n        return moment(time, TimeFormat.TWELVE).format(timeFormat);\r\n    }\r\n\r\n    static convertTimeToMoment(time: string): Moment {\r\n        return moment(time, TimeFormat.TWELVE);\r\n    }\r\n\r\n    static isTimeAvailable(time: string, min?: Moment, max?: Moment, granularity?: unitOfTime.StartOf): boolean {\r\n        if (!time) {\r\n            return;\r\n        }\r\n        const convertedTime = this.convertTimeToMoment(time);\r\n        const isAfter = (min && !max)\r\n            && convertedTime.isSameOrAfter(min, granularity);\r\n        const isBefore = (max && !min)\r\n            && convertedTime.isSameOrBefore(max, granularity);\r\n        const isBetween = (min && max)\r\n            && convertedTime.isBetween(min, max, granularity, '[]');\r\n        const isAvailable = !min && !max;\r\n\r\n        return isAfter || isBefore || isBetween || isAvailable;\r\n    }\r\n\r\n    /***\r\n     *  Format hour according to time format (12 or 24)\r\n     */\r\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\r\n        if (format === 24) {\r\n            return currentHour;\r\n        }\r\n        let hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\r\n\r\n        if (period === TimePeriod.AM && hour === 12) {\r\n            return 0;\r\n        } else if (period === TimePeriod.PM && hour === 24) {\r\n            return 12;\r\n        }\r\n        return hour;\r\n    }\r\n\r\n}\r\n",
    "import {Injectable} from '@angular/core';\r\nimport {ClockFaceTime} from '../models/clock-face-time.interface';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {TimePeriod} from '../models/time-period.enum';\r\nimport * as moment_ from 'moment';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\nimport {TimeAdapter} from './time-adapter';\r\n\r\nconst moment = moment_;\r\n\r\nconst DEFAULT_HOUR: ClockFaceTime = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE: ClockFaceTime = {\r\n    time: '00',\r\n    angle: 360\r\n};\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerService {\r\n\r\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\r\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\r\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\r\n\r\n    set hour(hour: ClockFaceTime) {\r\n        this.hourSubject.next(hour);\r\n    }\r\n\r\n    get selectedHour(): Observable<ClockFaceTime> {\r\n        return this.hourSubject.asObservable();\r\n    }\r\n\r\n    set minute(minute: ClockFaceTime) {\r\n        this.minuteSubject.next(minute);\r\n    }\r\n\r\n    get selectedMinute(): Observable<ClockFaceTime> {\r\n        return this.minuteSubject.asObservable();\r\n    }\r\n\r\n    set period(period: TimePeriod) {\r\n        this.periodSubject.next(period);\r\n    }\r\n\r\n    get selectedPeriod(): Observable<TimePeriod> {\r\n        return this.periodSubject.asObservable();\r\n    }\r\n\r\n    set defaultTime(time: string) {\r\n        const defaultTime = moment(time, TimeFormat.TWENTY_FOUR).toDate();\r\n\r\n        if (moment(defaultTime).isValid()) {\r\n            this.hour = {...DEFAULT_HOUR, time: defaultTime.getHours() === 0 ? '00' : defaultTime.getHours()};\r\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes() === 0 ? '00' : defaultTime.getMinutes()};\r\n            this.period = <TimePeriod>time.substr(time.length - 2).toUpperCase();\r\n        } else {\r\n            this.resetTime();\r\n        }\r\n    }\r\n\r\n    getFullTime(format: number): string {\r\n        const hour = this.hourSubject.getValue().time;\r\n        const minute = this.minuteSubject.getValue().time;\r\n        const period = format === 12 ? this.periodSubject.getValue() : '';\r\n\r\n        return TimeAdapter.formatTime(`${hour}:${minute} ${period}`, format);\r\n    }\r\n\r\n    private resetTime(): void {\r\n        this.hour = {...DEFAULT_HOUR};\r\n        this.minute = {...DEFAULT_MINUTE};\r\n        this.period = TimePeriod.AM;\r\n    }\r\n}\r\n",
    "import {Injectable} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerEventService {\r\n\r\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\r\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\r\n\r\n    get backdropClick(): Observable<MouseEvent> {\r\n        return this.backdropClickSubject.asObservable();\r\n    }\r\n\r\n    get keydownEvent(): Observable<KeyboardEvent> {\r\n        return this.keydownEventSubject.asObservable();\r\n    }\r\n\r\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\r\n        switch (event.type) {\r\n            case 'click':\r\n                this.backdropClickSubject.next(<MouseEvent>event);\r\n                break;\r\n            case 'keydown':\r\n                this.keydownEventSubject.next(<KeyboardEvent>event);\r\n                break;\r\n            default:\r\n                throw new Error('no such event type');\r\n        }\r\n    }\r\n\r\n}\r\n",
    "import {Component, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef} from '@angular/core';\r\nimport {ClockFaceTime} from './models/clock-face-time.interface';\r\nimport {TimePeriod} from './models/time-period.enum';\r\nimport {merge, Subscription} from 'rxjs';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {TimeUnit} from './models/time-unit.enum';\r\nimport {animate, AnimationEvent, style, transition, trigger} from '@angular/animations';\r\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\r\nimport {filter} from 'rxjs/operators';\r\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\r\nimport {Moment} from 'moment';\r\n\r\nexport enum AnimationState {\r\n    ENTER = 'enter',\r\n    LEAVE = 'leave'\r\n}\r\n\r\nconst ESCAPE = 27;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker',\r\n    template: `<div class=\"timepicker-backdrop-overlay\" *ngIf=\"isOpened\" overlay></div>\r\n<div class=\"timepicker-overlay\" *ngIf=\"isOpened\">\r\n    <div class=\"timepicker\" [@timepicker]=\"animationState\" (@timepicker.done)=\"animationDone($event)\" tabindex=\"0\">\r\n        <header class=\"timepicker__header\">\r\n            <ngx-material-timepicker-dial [format]=\"format\" [hour]=\"selectedHour?.time | timeFormatter: timeUnit.HOUR\"\r\n                                          [minute]=\"selectedMinute?.time | timeFormatter: timeUnit.MINUTE\"\r\n                                          [period]=\"selectedPeriod\" [activeTimeUnit]=\"activeTimeUnit\"\r\n                                          [minTime]=\"minTime\" [maxTime]=\"maxTime\"\r\n                                          [isEditable]=\"enableKeyboardInput\"\r\n                                          [minutesGap]=\"minutesGap\"\r\n                                          (periodChanged)=\"changePeriod($event)\"\r\n                                          (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                          (hourChanged)=\"onHourChange($event)\"\r\n                                          (minuteChanged)=\"onMinuteChange($event)\"\r\n            ></ngx-material-timepicker-dial>\r\n        </header>\r\n        <div class=\"timepicker__main-content\">\r\n            <div class=\"timepicker__body\" [ngSwitch]=\"activeTimeUnit\">\r\n                <div *ngSwitchCase=\"timeUnit.HOUR\">\r\n                    <ngx-material-timepicker-24-hours-face *ngIf=\"format === 24;else ampmHours\"\r\n                                                           (hourChange)=\"onHourChange($event)\"\r\n                                                           [selectedHour]=\"selectedHour\"\r\n                                                           [minTime]=\"minTime\"\r\n                                                           [maxTime]=\"maxTime\"\r\n                                                           [format]=\"format\"\r\n                                                           (hourSelected)=\"changeTimeUnit(timeUnit.MINUTE)\"></ngx-material-timepicker-24-hours-face>\r\n                    <ng-template #ampmHours>\r\n                        <ngx-material-timepicker-12-hours-face\r\n                            (hourChange)=\"onHourChange($event)\"\r\n                            [selectedHour]=\"selectedHour\"\r\n                            [period]=\"selectedPeriod\"\r\n                            [minTime]=\"minTime\"\r\n                            [maxTime]=\"maxTime\"\r\n                            (hourSelected)=\"changeTimeUnit(timeUnit.MINUTE)\"></ngx-material-timepicker-12-hours-face>\r\n                    </ng-template>\r\n                </div>\r\n                <ngx-material-timepicker-minutes-face *ngSwitchCase=\"timeUnit.MINUTE\"\r\n                                                      [selectedMinute]=\"selectedMinute\"\r\n                                                      [selectedHour]=\"selectedHour?.time\"\r\n                                                      [minTime]=\"minTime\"\r\n                                                      [maxTime]=\"maxTime\"\r\n                                                      [format]=\"format\"\r\n                                                      [period]=\"selectedPeriod\"\r\n                                                      [minutesGap]=\"minutesGap\"\r\n                                                      (minuteChange)=\"onMinuteChange($event)\"></ngx-material-timepicker-minutes-face>\r\n            </div>\r\n            <div class=\"timepicker__actions\">\r\n                <div (click)=\"close()\">\r\n                    <!--suppress HtmlUnknownAttribute -->\r\n                    <ng-container *ngTemplateOutlet=\"cancelBtnTmpl ? cancelBtnTmpl : cancelBtnDefault\"></ng-container>\r\n                </div>\r\n                <div (click)=\"setTime()\">\r\n                    <!--suppress HtmlUnknownAttribute -->\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"confirmBtnTmpl ? confirmBtnTmpl : confirmBtnDefault\"></ng-container>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<ng-template #cancelBtnDefault>\r\n    <ngx-material-timepicker-button>Cancel</ngx-material-timepicker-button>\r\n</ng-template>\r\n<ng-template #confirmBtnDefault>\r\n    <ngx-material-timepicker-button>Ok</ngx-material-timepicker-button>\r\n</ng-template>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-backdrop-overlay{position:fixed;top:0;bottom:0;right:0;left:0;background-color:rgba(0,0,0,.3);z-index:999;pointer-events:auto}.timepicker-overlay{position:fixed;top:0;left:0;width:100%;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;z-index:999;pointer-events:none}.timepicker{width:300px;border-radius:2px;-webkit-box-shadow:rgba(0,0,0,.25) 0 14px 45px,rgba(0,0,0,.22) 0 10px 18px;box-shadow:rgba(0,0,0,.25) 0 14px 45px,rgba(0,0,0,.22) 0 10px 18px;outline:0;position:static;z-index:999;pointer-events:auto}.timepicker__header{background-color:#00bfff;padding:15px 30px}.timepicker__body{background-color:#fff;padding:15px 5px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.timepicker__actions{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;padding:15px;background-color:#fff}@media (max-width:1023px) and (orientation:landscape){.timepicker{display:-webkit-box;display:-ms-flexbox;display:flex;width:515px}.timepicker__header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.timepicker__main-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;width:100%}.timepicker__actions{padding:5px;margin-top:-1px}}`],\r\n    animations: [\r\n        trigger('timepicker', [\r\n            transition(`* => ${AnimationState.ENTER}`, [\r\n                style({transform: 'translateY(-30%)'}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\r\n            ]),\r\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\r\n                style({transform: 'translateY(0)', opacity: 1}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\r\n            ])\r\n        ])\r\n    ],\r\n    providers: [NgxMaterialTimepickerService]\r\n})\r\nexport class NgxMaterialTimepickerComponent implements OnInit, OnDestroy {\r\n\r\n    selectedHour: ClockFaceTime;\r\n    selectedMinute: ClockFaceTime;\r\n    selectedPeriod: TimePeriod;\r\n\r\n    timeUnit = TimeUnit;\r\n    activeTimeUnit = TimeUnit.HOUR;\r\n\r\n    isOpened = false;\r\n    animationState: AnimationState;\r\n\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n    @Input('ESC') isEsc = true;\r\n    @Input() enableKeyboardInput: boolean;\r\n\r\n    @Input()\r\n    set minutesGap(gap: number) {\r\n        gap = Math.floor(gap);\r\n        this._minutesGap = gap <= 59 ? gap : 1;\r\n    }\r\n\r\n    get minutesGap(): number {\r\n        return this._minutesGap;\r\n    }\r\n\r\n    @Output() timeSet = new EventEmitter<string>();\r\n    @Output() closed = new EventEmitter<null>();\r\n\r\n    private _minutesGap: number;\r\n    private timepickerInput: TimepickerDirective;\r\n    private subscriptions: Subscription[] = [];\r\n\r\n    constructor(private timepickerService: NgxMaterialTimepickerService,\r\n                private eventService: NgxMaterialTimepickerEventService) {\r\n\r\n        this.subscriptions.push(merge(this.eventService.backdropClick,\r\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\r\n            .subscribe(() => this.close()));\r\n\r\n    }\r\n\r\n    get minTime(): string | Moment {\r\n        return this.timepickerInput && this.timepickerInput.min;\r\n    }\r\n\r\n    get maxTime(): string | Moment {\r\n        return this.timepickerInput && this.timepickerInput.max;\r\n    }\r\n\r\n    get disabled(): boolean {\r\n        return this.timepickerInput && this.timepickerInput.disabled;\r\n    }\r\n\r\n    get format(): number {\r\n        return this.timepickerInput && this.timepickerInput.format;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscriptions.push(this.timepickerService.selectedHour\r\n            .subscribe(hour => this.selectedHour = hour));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedMinute\r\n            .subscribe(minute => this.selectedMinute = minute));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedPeriod\r\n            .subscribe(period => this.selectedPeriod = period));\r\n    }\r\n\r\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\r\n    registerInput(input: TimepickerDirective): void {\r\n        if (this.timepickerInput) {\r\n            throw Error('A Timepicker can only be associated with a single input.');\r\n        }\r\n        this.timepickerInput = input;\r\n    }\r\n\r\n    onHourChange(hour: ClockFaceTime): void {\r\n        this.timepickerService.hour = hour;\r\n    }\r\n\r\n    onMinuteChange(minute: ClockFaceTime): void {\r\n        this.timepickerService.minute = minute;\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.timepickerService.period = period;\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit) {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n\r\n    setTime() {\r\n        this.timeSet.next(this.timepickerService.getFullTime(this.format));\r\n        this.close();\r\n    }\r\n\r\n    setDefaultTime(time: string): void {\r\n        this.timepickerService.defaultTime = time;\r\n    }\r\n\r\n    open() {\r\n        this.isOpened = true;\r\n        this.animationState = AnimationState.ENTER;\r\n    }\r\n\r\n    close() {\r\n        this.animationState = AnimationState.LEAVE;\r\n    }\r\n\r\n    animationDone(event: AnimationEvent): void {\r\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\r\n            this.isOpened = false;\r\n            this.activeTimeUnit = TimeUnit.HOUR;\r\n            this.closed.next();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeydown(e: KeyboardEvent) {\r\n        this.eventService.dispatchEvent(e);\r\n        e.stopPropagation();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    }\r\n}\r\n",
    "import {Pipe, PipeTransform} from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n    name: 'styleSanitizer'\r\n})\r\nexport class StyleSanitizerPipe implements PipeTransform {\r\n\r\n    constructor(private domSanitizer: DomSanitizer) {\r\n    }\r\n\r\n    transform(value: string): any {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        return this.domSanitizer.bypassSecurityTrustStyle(value);\r\n    }\r\n\r\n}\r\n",
    "import {ClockFaceTime} from './models/clock-face-time.interface';\r\nimport * as _moment from 'moment';\r\nimport {TimeAdapter} from './services/time-adapter';\r\nimport {TimeFormat} from './models/time-format.enum';\r\nimport {DisabledTimeConfig} from './models/disabled-time-config.interface';\r\n\r\nconst moment = _moment;\r\n\r\nexport namespace TimepickerTime {\r\n\r\n    export function getHours(format: number): ClockFaceTime[] {\r\n        return Array(format).fill(1).map((v, i) => {\r\n            const angleStep = 30;\r\n            const time = v + i;\r\n            const angle = angleStep * time;\r\n            return {time: time === 24 ? '00' : time, angle};\r\n        });\r\n    }\r\n\r\n    export function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\r\n        if (config.min || config.max) {\r\n\r\n            return hours.map(value => {\r\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(+value.time, config.format, config.period);\r\n                const currentTime = moment().hour(+hour).format(TimeFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\r\n                };\r\n            });\r\n        }\r\n        return hours;\r\n    }\r\n\r\n    export function getMinutes(gap = 1): ClockFaceTime[] {\r\n        const minutesCount = 60;\r\n        const angleStep = 360 / minutesCount;\r\n        const minutes = [];\r\n\r\n        for (let i = 0; i < minutesCount; i++) {\r\n            const angle = angleStep * i;\r\n            if (i % gap === 0) {\r\n                minutes.push({time: i === 0 ? '00' : i, angle: angle !== 0 ? angle : 360});\r\n            }\r\n        }\r\n        return minutes;\r\n    }\r\n\r\n    export function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\r\n        if (config.min || config.max) {\r\n\r\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\r\n\r\n            return minutes.map(value => {\r\n                const currentTime = moment().hour(hour).minute(+value.time).format(TimeFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\r\n                };\r\n            });\r\n        }\r\n        return minutes;\r\n    }\r\n}\r\n",
    "import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {Moment} from 'moment';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-minutes-face',\r\n    template: `<ngx-material-timepicker-face [faceTime]=\"minutesList\" [selectedTime]=\"selectedMinute\"\r\n                              [minutesGap]=\"minutesGap\"\r\n                              (timeChange)=\"minuteChange.next($event)\" [unit]=\"timeUnit.MINUTE\"></ngx-material-timepicker-face>\r\n`\r\n})\r\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\r\n\r\n    minutesList: ClockFaceTime[] = [];\r\n    timeUnit = TimeUnit;\r\n\r\n    @Input() selectedMinute: ClockFaceTime;\r\n    @Input() selectedHour: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\r\n            this.minutesList = TimepickerTime.disableMinutes(minutes, this.selectedHour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n",
    "import {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\n\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: '75px',\r\n        top: 'calc(50% - 75px)'\r\n    },\r\n    large: {\r\n        height: '103px',\r\n        top: 'calc(50% - 103px)'\r\n    }\r\n};\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-face',\r\n    template: `<div class=\"clock-face\" #clockFace>\r\n    <div *ngIf=\"unit !== timeUnit.MINUTE;else minutesFace\" class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\r\n             *ngFor=\"let time of faceTime.slice(0, 12); trackBy: trackByTime\">\r\n\t\t\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\r\n                  [ngClass]=\"{'active': isHourSelected(time.time), 'disabled': time.disabled}\">{{time.time}}</span>\r\n        </div>\r\n        <div class=\"clock-face__inner\" *ngIf=\"faceTime.length > 12\"\r\n             [style.top]=\"'calc(50% - ' + innerClockFaceSize + 'px)'\">\r\n            <div class=\"clock-face__number clock-face__number--inner\"\r\n                 [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\r\n                 [style.height.px]=\"innerClockFaceSize\"\r\n                 *ngFor=\"let time of faceTime.slice(12, 24); trackBy: trackByTime\">\r\n\t\t\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\r\n                  [ngClass]=\"{'active': isHourSelected(time.time), 'disabled': time.disabled}\">\r\n                {{time.time}}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <span class=\"clock-face__clock-hand\" [ngClass]=\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\"\r\n          #clockHand [hidden]=\"isClockFaceDisabled\"></span>\r\n</div>\r\n<ng-template #minutesFace>\r\n    <div class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\r\n             *ngFor=\"let time of faceTime; trackBy: trackByTime\">\r\n\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\r\n          [ngClass]=\"{'active': isMinuteSelected(time.time), 'disabled': time.disabled}\">\r\n\t{{time.time | minutesFormatter: minutesGap}}</span>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.clock-face{width:290px;height:290px;border-radius:50%;background-color:#f0f0f0;position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:20px;-webkit-box-sizing:border-box;box-sizing:border-box}.clock-face__inner{position:absolute}.clock-face__container{margin-left:-2px}.clock-face__number{position:absolute;-webkit-transform-origin:0 100%;transform-origin:0 100%;width:50px;text-align:center;z-index:2}.clock-face__number--outer{height:calc(290px / 2 - 20px)}.clock-face__number--outer>span{font-size:16px;color:#6c6c6c}.clock-face__number--inner>span{font-size:14px;color:#929292}.clock-face__number>span{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:30px;height:30px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:auto;border-radius:50%;font-weight:500;font-family:Roboto,sans-serif}.clock-face__number>span.active{background-color:#00bfff;color:#fff}.clock-face__number>span.disabled{color:#c5c5c5}.clock-face__clock-hand{height:103px;width:2px;background-color:#00bfff;-webkit-transform-origin:0 100%;transform-origin:0 100%;position:absolute;top:calc(50% - 103px);z-index:1}.clock-face__clock-hand:after{content:'';width:7px;height:7px;border-radius:50%;background-color:#00bfff;position:absolute;bottom:-3px;left:-3.5px}.clock-face__clock-hand_minute:before{content:'';width:7px;height:7px;background-color:#fff;border:4px solid #00bfff;border-radius:50%;position:absolute;top:-8px;left:calc(50% - 8px);-webkit-box-sizing:content-box;box-sizing:content-box}@media (max-width:1023px) and (orientation:landscape){.clock-face{width:225px;height:225px;padding:5px}.clock-face__number--outer{height:calc(225px / 2 - 5px)}.clock-face__clock-hand_minute:before{top:0}}`]\r\n})\r\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    isClockFaceDisabled: boolean;\r\n    innerClockFaceSize = 85;\r\n\r\n    @Input() faceTime: ClockFaceTime[];\r\n    @Input() selectedTime: ClockFaceTime;\r\n    @Input() unit: TimeUnit;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() timeSelected = new EventEmitter<null>();\r\n\r\n    @ViewChild('clockFace') clockFace: ElementRef;\r\n    @ViewChild('clockHand') clockHand: ElementRef;\r\n\r\n    private isStarted: boolean;\r\n    private touchStartHandler: () => any;\r\n    private touchEndHandler: () => any;\r\n\r\n    ngAfterViewInit() {\r\n        this.setClockHandPosition();\r\n        this.addTouchEvents();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const faceTimeChanges = changes['faceTime'];\r\n        const selectedTimeChanges = changes['selectedTime'];\r\n\r\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\r\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\r\n            /* Set time according to passed an input value */\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\r\n            this.setClockHandPosition();\r\n        }\r\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this.selectAvailableTime());\r\n        }\r\n    }\r\n\r\n\r\n    trackByTime(_, time: ClockFaceTime): string | number {\r\n        return time.time;\r\n    }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    onMousedown(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = true;\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\r\n    @HostListener('touchend', ['$event.changedTouches[0]'])\r\n    @HostListener('mousemove', ['$event'])\r\n    selectTime(e: MouseEvent | Touch): void {\r\n\r\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n\r\n        /* Get x0 and y0 of the circle */\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        /* Counting the arctangent and convert it to from radian to deg */\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        /* Get angle according to quadrant */\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        /* Check if selected time from the inner clock face (24 hours format only) */\r\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        /* Round angle according to angle step */\r\n        const angleStep = this.unit === TimeUnit.MINUTE ? 6 : 30;\r\n        const roundedAngle = isInnerClockChosen\r\n            ? roundAngle(circleAngle, angleStep) + 360\r\n            : roundAngle(circleAngle, angleStep);\r\n\r\n        const selectedTime = this.faceTime.find(val => val.angle === roundedAngle);\r\n\r\n        if (selectedTime && !selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n\r\n            /* To let know whether user ended interaction with clock face */\r\n            if (!this.isStarted) {\r\n                this.timeSelected.next();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @HostListener('mouseup', ['$event'])\r\n    onMouseup(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = false;\r\n    }\r\n\r\n    isHourSelected(hour: number): boolean {\r\n        return (hour === this.selectedTime.time) && !this.isClockFaceDisabled;\r\n    }\r\n\r\n    isMinuteSelected(minute: number): boolean {\r\n        return ((this.selectedTime.time === minute) && (minute % (this.minutesGap || 5) === 0)) && !this.isClockFaceDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.removeTouchEvents();\r\n    }\r\n\r\n    private addTouchEvents(): void {\r\n        this.touchStartHandler = this.onMousedown.bind(this);\r\n        this.touchEndHandler = this.onMouseup.bind(this);\r\n\r\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private removeTouchEvents(): void {\r\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private setClockHandPosition(): void {\r\n        if (this.format === 24) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === '00') {\r\n                this.decreaseClockHand();\r\n            } else {\r\n                this.increaseClockHand();\r\n            }\r\n        }\r\n\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n\r\n    private selectAvailableTime(): void {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n\r\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\r\n        /* Detect whether time from the inner clock face or not (24 format only) */\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n\r\n    private decreaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n\r\n    private increaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n}\r\n\r\nfunction roundAngle(angle: number, step: number): number {\r\n    return Math.round(angle / step) * step;\r\n}\r\n\r\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\r\n    if (y > y0 && x >= x0) {// II quarter\r\n        return 180 - currentAngle;\r\n    } else if (y > y0 && x < x0) {// III quarter\r\n        return 180 + currentAngle;\r\n    } else if (y < y0 && x < x0) {// IV quarter\r\n        return 360 - currentAngle;\r\n    } else {// I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\n",
    "import {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\nimport {TimeUnit} from '../models/time-unit.enum';\r\n\r\n@Pipe({\r\n    name: 'timeFormatter'\r\n})\r\nexport class TimeFormatterPipe implements PipeTransform {\r\n\r\n    transform(time: number, timeUnit: TimeUnit): any {\r\n        if (time === undefined) {\r\n            return time;\r\n        }\r\n        switch (timeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return moment.utc(time * 3600 * 1000).format('HH');\r\n            case TimeUnit.MINUTE:\r\n                return moment.utc(time * 60 * 1000).format('mm');\r\n            default:\r\n                throw new Error('no such time unit');\r\n        }\r\n    }\r\n\r\n}\r\n",
    "import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-button',\r\n    template: `<button class=\"timepicker-button\" type=\"button\">\r\n  <span><ng-content></ng-content></span>\r\n</button>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-button{display:inline-block;height:36px;min-width:88px;line-height:36px;border:12px;border-radius:2px;background-color:transparent;color:#00bfff;text-align:center;-webkit-transition:all 450ms cubic-bezier(.23,1,.32,1);transition:all 450ms cubic-bezier(.23,1,.32,1);overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;cursor:pointer;outline:0}.timepicker-button:focus,.timepicker-button:hover{background-color:rgba(153,153,153,.2)}.timepicker-button>span{font-size:14px;text-transform:uppercase;font-weight:600;padding-left:16px;padding-right:16px;font-family:Roboto,sans-serif}`]\r\n})\r\nexport class NgxMaterialTimepickerButtonComponent {\r\n}\r\n",
    "import {\r\n    Directive,\r\n    ElementRef,\r\n    forwardRef,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport {NgxMaterialTimepickerComponent} from '../ngx-material-timepicker.component';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {Moment} from 'moment';\r\nimport {TimeAdapter} from '../services/time-adapter';\r\n\r\nconst VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TimepickerDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[ngxTimepicker]',\r\n    providers: [VALUE_ACCESSOR],\r\n    host: {\r\n        '[disabled]': 'disabled',\r\n        '(input)': 'onInput($event.target.value)',\r\n        '(blur)': 'onTouched()',\r\n    },\r\n})\r\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    private _format = 12;\r\n\r\n    @Input()\r\n    set min(value: string | Moment) {\r\n        if (typeof value === 'string') {\r\n            this._min = TimeAdapter.convertTimeToMoment(value);\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    get min(): string | Moment {\r\n        return this._min;\r\n    }\r\n\r\n    private _min: string | Moment;\r\n\r\n    @Input()\r\n    set max(value: string | Moment) {\r\n        if (typeof value === 'string') {\r\n            this._max = TimeAdapter.convertTimeToMoment(value);\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    get max(): string | Moment {\r\n        return this._max;\r\n    }\r\n\r\n    private _max: string | Moment;\r\n\r\n    @Input()\r\n    set value(value: string) {\r\n        if (!value) {\r\n            this._value = '';\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        const time = TimeAdapter.formatTime(value, this._format);\r\n        if (TimeAdapter.isTimeAvailable(time, <Moment>this._min, <Moment>this._max, 'minutes')) {\r\n            this._value = time;\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        console.warn('Selected time doesn\\'t match min or max value');\r\n    }\r\n\r\n    get value(): string {\r\n        return this._value;\r\n    }\r\n\r\n    private _value = '';\r\n\r\n    @Input('ngxTimepicker')\r\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\r\n        this.registerTimepicker(picker);\r\n    }\r\n    private _timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input() disabled: boolean;\r\n    @Input() disableClick: boolean;\r\n    private timepickerSubscriptions: Subscription[] = [];\r\n    onTouched = () => {};\r\n    private onChange: (value: any) => void = () => {};\r\n\r\n    constructor(private elementRef: ElementRef) {\r\n    }\r\n\r\n    private set defaultTime(time: string) {\r\n        if (TimeAdapter.isTimeAvailable(time, <Moment>this._min, <Moment>this._max, 'minutes')) {\r\n            this._timepicker.setDefaultTime(TimeAdapter.formatTime(time, this._format));\r\n        }\r\n    }\r\n\r\n    onInput(value: string) {\r\n        this.value = value;\r\n        this.onChange(value);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['value'] && changes['value'].currentValue) {\r\n            this.defaultTime = changes['value'].currentValue;\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    writeValue(value: string): void {\r\n        this.value = value;\r\n        this.defaultTime = value;\r\n    }\r\n\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\r\n                this.value = time;\r\n                this.onChange(this._value);\r\n                this.onTouched();\r\n            }));\r\n            this.timepickerSubscriptions.push(\r\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\r\n        } else {\r\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\r\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\r\n        }\r\n    }\r\n\r\n    private updateInputValue(): void {\r\n        this.elementRef.nativeElement.value = this.value;\r\n    }\r\n\r\n}\r\n\r\n",
    "import {Directive, HostListener} from '@angular/core';\r\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\r\n\r\n@Directive({\r\n    selector: '[overlay]'\r\n})\r\nexport class OverlayDirective {\r\n\r\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\r\n    }\r\n\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(e: MouseEvent) {\r\n        this.eventService.dispatchEvent(e);\r\n        e.preventDefault();\r\n    }\r\n\r\n}\r\n",
    "import {Directive} from '@angular/core';\r\n\r\n/* To override a default toggle icon */\r\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\r\n\r\nexport class NgxMaterialTimepickerToggleIconDirective {\r\n}\r\n",
    "import {Component, ContentChild, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-toggle',\r\n    template: `<button class=\"ngx-material-timepicker-toggle\" (click)=\"open($event)\" [disabled]=\"disabled\" type=\"button\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" *ngIf=\"!customIcon\">\r\n        <path\r\n            d=\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\"/>\r\n    </svg>\r\n\r\n    <ng-content select=\"[ngxMaterialTimepickerToggleIcon]\"></ng-content>\r\n</button>\r\n`,\r\n    styles: [`.ngx-material-timepicker-toggle{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:4px;background-color:transparent;border-radius:50%;text-align:center;border:none;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:background-color .3s;transition:background-color .3s;cursor:pointer}.ngx-material-timepicker-toggle:focus{background-color:rgba(0,0,0,.07)}`]\r\n})\r\n\r\nexport class NgxMaterialTimepickerToggleComponent {\r\n\r\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    private _disabled: boolean;\r\n\r\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective) customIcon: NgxMaterialTimepickerToggleIconDirective;\r\n\r\n    open(event): void {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\n",
    "import {EventEmitter, Input, Output} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {Moment} from 'moment';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n\r\nexport class NgxMaterialTimepickerHoursFace {\r\n\r\n    @Input() selectedHour: ClockFaceTime;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() format: number;\r\n\r\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() hourSelected = new EventEmitter<null>();\r\n\r\n    hoursList: ClockFaceTime[] = [];\r\n\r\n    protected constructor(format: number) {\r\n        this.hoursList = TimepickerTime.getHours(format);\r\n    }\r\n}\r\n",
    "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-12-hours-face',\r\n    template: `<ngx-material-timepicker-face [selectedTime]=\"selectedHour\" [faceTime]=\"hoursList\"\r\n                              (timeChange)=\"hourChange.next($event)\" (timeSelected)=\"hourSelected.next()\"></ngx-material-timepicker-face>\r\n`\r\n})\r\n\r\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\r\n\r\n    @Input() period: TimePeriod;\r\n\r\n    constructor() {\r\n        super(12);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.hoursList = TimepickerTime.disableHours(this.hoursList, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n",
    "import {AfterContentInit, Component} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-24-hours-face',\r\n    template: `<ngx-material-timepicker-face [selectedTime]=\"selectedHour\" [faceTime]=\"hoursList\" [format]=\"format\"\r\n                              (timeChange)=\"hourChange.next($event)\"\r\n                              (timeSelected)=\"hourSelected.next()\"></ngx-material-timepicker-face>\r\n`\r\n})\r\n\r\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\r\n\r\n    constructor() {\r\n        super(24);\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.hoursList = TimepickerTime.disableHours(this.hoursList, {\r\n            min: this.minTime,\r\n            max: this.maxTime,\r\n            format: this.format\r\n        });\r\n    }\r\n}\r\n",
    "import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {Moment} from 'moment';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial',\r\n    template: `<div class=\"timepicker-dial\">\r\n    <div class=\"timepicker-dial__time\">\r\n        <ngx-material-timepicker-dial-control [timeList]=\"hours\" [time]=\"hour\" [timeUnit]=\"timeUnit.HOUR\"\r\n                                              [isActive]=\"activeTimeUnit === timeUnit.HOUR\"\r\n                                              [isEditable]=\"isEditable\"\r\n                                              (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                              (timeChanged)=\"changeHour($event)\">\r\n\r\n        </ngx-material-timepicker-dial-control>\r\n        <span>:</span>\r\n        <ngx-material-timepicker-dial-control [timeList]=\"minutes\" [time]=\"minute\" [timeUnit]=\"timeUnit.MINUTE\"\r\n                                              [isActive]=\"activeTimeUnit === timeUnit.MINUTE\"\r\n                                              [isEditable]=\"isEditable\"\r\n                                              (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                              (timeChanged)=\"changeMinute($event)\">\r\n\r\n        </ngx-material-timepicker-dial-control>\r\n    </div>\r\n    <ngx-material-timepicker-period class=\"timepicker-dial__period\" *ngIf=\"format !== 24\"\r\n                                    [selectedPeriod]=\"period\" [activeTimeUnit]=\"activeTimeUnit\"\r\n                                    [maxTime]=\"maxTime\" [minTime]=\"minTime\" [format]=\"format\"\r\n                                    [hours]=\"hours\" [minutes]=\"minutes\" [selectedHour]=\"hour\"\r\n                                    (periodChanged)=\"changePeriod($event)\"></ngx-material-timepicker-period>\r\n</div>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-dial{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;-webkit-tap-highlight-color:transparent}.timepicker-dial__time{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;line-height:normal;font-size:50px;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif}.timepicker-dial__period{display:block;margin-left:10px}@media (max-width:1023px) and (orientation:landscape){.timepicker-dial{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.timepicker-dial__period{margin-left:0}}`],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    hours: ClockFaceTime[];\r\n    minutes: ClockFaceTime[];\r\n\r\n    @Input() hour: number | string;\r\n    @Input() minute: number | string;\r\n    @Input() format: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() isEditable: boolean;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\r\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['format'] && changes['format'].currentValue) {\r\n            const hours = TimepickerTime.getHours(this.format);\r\n\r\n            this.hours = TimepickerTime.disableHours(hours, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['hour'] && changes['hour'].currentValue) {\r\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\r\n\r\n            this.minutes = TimepickerTime.disableMinutes(minutes, +this.hour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit): void {\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.periodChanged.next(period);\r\n    }\r\n\r\n    changeHour(hour: ClockFaceTime): void {\r\n        this.hourChanged.next(hour);\r\n    }\r\n\r\n    changeMinute(minute: ClockFaceTime): void {\r\n        this.minuteChanged.next(minute);\r\n    }\r\n}\r\n",
    "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimeFormatterPipe} from '../../pipes/time-formatter.pipe';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial-control',\r\n    template: `<!--suppress HtmlFormInputWithoutLabel -->\r\n<input class=\"timepicker-dial__control timepicker-dial__item\"\r\n       [ngClass]=\"{'timepicker-dial__item_active': isActive, 'timepicker-dial__control_editable': isEditable}\"\r\n       [(ngModel)]=\"time\" (input)=\"updateTime()\" (focus)=\"saveTimeAndChangeTimeUnit(timeUnit)\"\r\n       (blur)=\"revertTimeAndFormat()\" [readonly]=\"!isEditable\" [timepickerAutofocus]=\"isActive\">\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-dial__item{cursor:pointer;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif}.timepicker-dial__item_active{color:#fff}.timepicker-dial__control{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px}.timepicker-dial__control_editable::-moz-selection,.timepicker-dial__control_editable:focus{color:#00bfff;background-color:#fff;outline:#00bfff}.timepicker-dial__control_editable::selection,.timepicker-dial__control_editable:focus{color:#00bfff;background-color:#fff;outline:#00bfff}`]\r\n})\r\nexport class NgxMaterialTimepickerDialControlComponent {\r\n\r\n    previousTime: number | string;\r\n\r\n    @Input() timeList: ClockFaceTime[];\r\n    @Input() time: number | string;\r\n    @Input() timeUnit: TimeUnit;\r\n    @Input() isActive: boolean;\r\n    @Input() isEditable: boolean;\r\n\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\r\n\r\n    private get selectedTime(): ClockFaceTime {\r\n        return this.timeList.find(t => +t.time === +this.time);\r\n    }\r\n\r\n    saveTimeAndChangeTimeUnit(unit: TimeUnit): void {\r\n        this.previousTime = this.time;\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    updateTime(): void {\r\n        const time = this.selectedTime;\r\n        if (time && !time.disabled) {\r\n            this.timeChanged.next(time);\r\n            this.previousTime = time.time;\r\n        }\r\n    }\r\n\r\n    revertTimeAndFormat(): void {\r\n        const time = this.selectedTime;\r\n        if (!time || time.disabled) {\r\n            this.time = this.previousTime;\r\n        }\r\n        this.time = new TimeFormatterPipe().transform(+this.time, this.timeUnit);\r\n    }\r\n}\r\n",
    "import {Pipe, PipeTransform} from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'minutesFormatter'\r\n})\r\nexport class MinutesFormatterPipe implements PipeTransform {\r\n\r\n    transform(minute: number, gap = 5): number | string {\r\n        if (!minute) {\r\n            return minute;\r\n        }\r\n\r\n        return minute % gap === 0 ? minute : '';\r\n    }\r\n\r\n}\r\n",
    "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\nimport {Moment} from 'moment';\r\nimport {animate, sequence, style, transition, trigger} from '@angular/animations';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-period',\r\n    template: `<div class=\"timepicker-period\">\r\n\t\t\t<button class=\"timepicker-dial__item timepicker-period__btn\"\r\n                  [ngClass]=\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.AM}\"\r\n                  (click)=\"changePeriod(timePeriod.AM)\"\r\n                  type=\"button\">AM</button>\r\n    <button class=\"timepicker-dial__item timepicker-period__btn\"\r\n          [ngClass]=\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.PM}\"\r\n          (click)=\"changePeriod(timePeriod.PM)\"\r\n          type=\"button\">PM</button>\r\n    <div class=\"timepicker-period__warning\" [@scaleInOut] (@scaleInOut.done)=\"animationDone()\" *ngIf=\"!isPeriodAvailable\">\r\n        <p>Current time would be invalid in this period.</p>\r\n    </div>\r\n</div>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-dial__item{cursor:pointer;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif}.timepicker-dial__item_active{color:#fff}.timepicker-period{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;position:relative}.timepicker-period__btn{padding:0;border:0;background-color:transparent;font-size:18px;font-weight:500;font-family:Roboto,sans-serif;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0}.timepicker-period__warning{padding:5px 10px;border-radius:3px;background-color:rgba(0,0,0,.55);color:#fff;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning>p{margin:0;font-size:12px}`],\r\n    animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({transform: 'scale(0)'}),\r\n                animate('.2s', style({transform: 'scale(1)'})),\r\n                sequence([\r\n                    animate('3s', style({opacity: 1})),\r\n                    animate('.3s', style({opacity: 0}))\r\n                ])\r\n            ])\r\n        ])\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerPeriodComponent {\r\n\r\n    timePeriod = TimePeriod;\r\n    isPeriodAvailable = true;\r\n\r\n    @Input() selectedPeriod: TimePeriod;\r\n    @Input() format: number;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() hours: ClockFaceTime[];\r\n    @Input() minutes: ClockFaceTime[];\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() selectedHour: number | string;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\r\n        if (this.isPeriodAvailable) {\r\n            this.periodChanged.next(period);\r\n        }\r\n    }\r\n\r\n    animationDone(): void {\r\n        this.isPeriodAvailable = true;\r\n    }\r\n\r\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\r\n        const time = this.getDisabledTimeByPeriod(period);\r\n        return !time.every(t => t.disabled);\r\n    }\r\n\r\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\r\n        switch (this.activeTimeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return TimepickerTime.disableHours(this.hours, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            case TimeUnit.MINUTE:\r\n                return TimepickerTime.disableMinutes(this.minutes, +this.selectedHour, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            default:\r\n                throw new Error('no such TimeUnit');\r\n        }\r\n    }\r\n}\r\n",
    "import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[timepickerAutofocus]'\r\n})\r\nexport class AutofocusDirective implements OnChanges, OnDestroy {\r\n\r\n    @Input('timepickerAutofocus') isFocusActive: boolean;\r\n\r\n    private activeElement: HTMLElement;\r\n\r\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\r\n        this.activeElement = this.document.activeElement;\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.isFocusActive) {\r\n            this.element.nativeElement.focus();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.activeElement.focus();\r\n    }\r\n}\r\n",
    "import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgxMaterialTimepickerComponent} from './ngx-material-timepicker.component';\r\nimport {StyleSanitizerPipe} from './pipes/style-sanitizer.pipe';\r\nimport {NgxMaterialTimepickerMinutesFaceComponent} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {NgxMaterialTimepickerFaceComponent} from './components/timepicker-face/ngx-material-timepicker-face.component';\r\nimport {TimeFormatterPipe} from './pipes/time-formatter.pipe';\r\nimport {NgxMaterialTimepickerButtonComponent} from './components/timepicker-button/ngx-material-timepicker-button.component';\r\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\r\nimport {OverlayDirective} from './directives/overlay.directive';\r\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\r\nimport {NgxMaterialTimepickerToggleComponent} from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from './directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepicker12HoursFaceComponent} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\r\nimport {NgxMaterialTimepicker24HoursFaceComponent} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {NgxMaterialTimepickerDialComponent} from './components/timepicker-dial/ngx-material-timepicker-dial.component';\r\nimport {NgxMaterialTimepickerDialControlComponent} from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\r\nimport {MinutesFormatterPipe} from './pipes/minutes-formatter.pipe';\r\nimport {NgxMaterialTimepickerPeriodComponent} from './components/timepicker-period/ngx-material-timepicker-period.component';\r\nimport {AutofocusDirective} from './directives/autofocus.directive';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule\r\n    ],\r\n    exports: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        TimepickerDirective,\r\n        NgxMaterialTimepickerToggleIconDirective\r\n    ],\r\n    declarations: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepicker24HoursFaceComponent,\r\n        NgxMaterialTimepicker12HoursFaceComponent,\r\n        NgxMaterialTimepickerMinutesFaceComponent,\r\n        NgxMaterialTimepickerFaceComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        NgxMaterialTimepickerButtonComponent,\r\n        NgxMaterialTimepickerDialComponent,\r\n        NgxMaterialTimepickerDialControlComponent,\r\n        NgxMaterialTimepickerPeriodComponent,\r\n        StyleSanitizerPipe,\r\n        TimeFormatterPipe,\r\n        TimepickerDirective,\r\n        OverlayDirective,\r\n        NgxMaterialTimepickerToggleIconDirective,\r\n        AutofocusDirective,\r\n        MinutesFormatterPipe\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxMaterialTimepickerModule,\r\n            providers: [NgxMaterialTimepickerService, NgxMaterialTimepickerEventService]\r\n        };\r\n    }\r\n}\r\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "AM",
    "PM",
    "TWELVE",
    "TWENTY_FOUR",
    "moment",
    "_moment",
    "TimeAdapter",
    "formatTime",
    "time",
    "format",
    "timeFormat",
    "TimeFormat",
    "convertTimeToMoment",
    "isTimeAvailable",
    "min",
    "max",
    "granularity",
    "convertedTime",
    "isAfter",
    "isSameOrAfter",
    "isBefore",
    "isSameOrBefore",
    "isBetween",
    "formatHour",
    "currentHour",
    "period",
    "hour",
    "TimePeriod",
    "moment_",
    "DEFAULT_HOUR",
    "angle",
    "DEFAULT_MINUTE",
    "NgxMaterialTimepickerService",
    "hourSubject",
    "BehaviorSubject",
    "minuteSubject",
    "periodSubject",
    "defineProperty",
    "set",
    "next",
    "get",
    "asObservable",
    "minute",
    "defaultTime",
    "toDate",
    "isValid",
    "assign",
    "getHours",
    "getMinutes",
    "substr",
    "length",
    "toUpperCase",
    "resetTime",
    "getFullTime",
    "getValue",
    "type",
    "Injectable",
    "NgxMaterialTimepickerEventService",
    "backdropClickSubject",
    "Subject",
    "keydownEventSubject",
    "dispatchEvent",
    "event",
    "Error",
    "ENTER",
    "LEAVE",
    "ESCAPE",
    "NgxMaterialTimepickerComponent",
    "timepickerService",
    "eventService",
    "_this",
    "timeUnit",
    "TimeUnit",
    "activeTimeUnit",
    "HOUR",
    "isOpened",
    "isEsc",
    "timeSet",
    "EventEmitter",
    "closed",
    "subscriptions",
    "push",
    "merge",
    "backdropClick",
    "keydownEvent",
    "pipe",
    "filter",
    "e",
    "keyCode",
    "subscribe",
    "close",
    "_minutesGap",
    "gap",
    "Math",
    "floor",
    "timepickerInput",
    "disabled",
    "ngOnInit",
    "selectedHour",
    "selectedMinute",
    "selectedPeriod",
    "registerInput",
    "input",
    "onHourChange",
    "onMinuteChange",
    "changePeriod",
    "changeTimeUnit",
    "unit",
    "setTime",
    "setDefaultTime",
    "open",
    "animationState",
    "AnimationState",
    "animationDone",
    "phaseName",
    "toState",
    "onKeydown",
    "stopPropagation",
    "ngOnDestroy",
    "forEach",
    "subscription",
    "unsubscribe",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "animations",
    "trigger",
    "transition",
    "style",
    "transform",
    "animate",
    "opacity",
    "providers",
    "cancelBtnTmpl",
    "Input",
    "confirmBtnTmpl",
    "enableKeyboardInput",
    "minutesGap",
    "Output",
    "HostListener",
    "StyleSanitizerPipe",
    "domSanitizer",
    "value",
    "bypassSecurityTrustStyle",
    "Pipe",
    "name",
    "DomSanitizer",
    "TimepickerTime",
    "fill",
    "map",
    "v",
    "i",
    "disableHours",
    "hours",
    "config",
    "currentTime",
    "minutes",
    "disableMinutes",
    "hour_1",
    "NgxMaterialTimepickerMinutesFaceComponent",
    "minutesList",
    "minuteChange",
    "ngOnChanges",
    "changes",
    "currentValue",
    "minTime",
    "maxTime",
    "CLOCK_HAND_STYLES",
    "height",
    "top",
    "NgxMaterialTimepickerFaceComponent",
    "innerClockFaceSize",
    "timeChange",
    "timeSelected",
    "ngAfterViewInit",
    "setClockHandPosition",
    "addTouchEvents",
    "faceTimeChanges",
    "selectedTimeChanges",
    "selectedTime",
    "faceTime",
    "find",
    "setTimeout",
    "selectAvailableTime",
    "trackByTime",
    "_",
    "onMousedown",
    "preventDefault",
    "isStarted",
    "selectTime",
    "MouseEvent",
    "x0",
    "y0",
    "x",
    "y",
    "currentAngle",
    "clockFaceCords",
    "clockFace",
    "nativeElement",
    "getBoundingClientRect",
    "centerX",
    "left",
    "width",
    "centerY",
    "arctangent",
    "atan",
    "abs",
    "clientX",
    "clientY",
    "PI",
    "circleAngle",
    "isInnerClockChosen",
    "isInnerClockFace",
    "angleStep",
    "MINUTE",
    "roundedAngle",
    "roundAngle",
    "val",
    "onMouseup",
    "isHourSelected",
    "isClockFaceDisabled",
    "isMinuteSelected",
    "removeTouchEvents",
    "touchStartHandler",
    "bind",
    "touchEndHandler",
    "addEventListener",
    "removeEventListener",
    "decreaseClockHand",
    "increaseClockHand",
    "clockHand",
    "every",
    "availableTime",
    "sqrt",
    "pow",
    "step",
    "round",
    "ViewChild",
    "TimeFormatterPipe",
    "undefined",
    "moment.utc",
    "NgxMaterialTimepickerButtonComponent",
    "VALUE_ACCESSOR",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "TimepickerDirective",
    "multi",
    "elementRef",
    "_format",
    "_value",
    "timepickerSubscriptions",
    "onTouched",
    "onChange",
    "_min",
    "_max",
    "updateInputValue",
    "console",
    "warn",
    "picker",
    "registerTimepicker",
    "_timepicker",
    "onInput",
    "onClick",
    "disableClick",
    "writeValue",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "setDisabledState",
    "isDisabled",
    "s",
    "Directive",
    "host",
    "[disabled]",
    "(input)",
    "(blur)",
    "ElementRef",
    "timepicker",
    "OverlayDirective",
    "NgxMaterialTimepickerToggleIconDirective",
    "NgxMaterialTimepickerToggleComponent",
    "_disabled",
    "customIcon",
    "ContentChild",
    "NgxMaterialTimepickerHoursFace",
    "hourChange",
    "hourSelected",
    "hoursList",
    "NgxMaterialTimepicker12HoursFaceComponent",
    "_super",
    "call",
    "tslib_1.__extends",
    "NgxMaterialTimepicker24HoursFaceComponent",
    "ngAfterContentInit",
    "NgxMaterialTimepickerDialComponent",
    "periodChanged",
    "timeUnitChanged",
    "hourChanged",
    "minuteChanged",
    "changeHour",
    "changeMinute",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "isEditable",
    "NgxMaterialTimepickerDialControlComponent",
    "timeChanged",
    "timeList",
    "t",
    "saveTimeAndChangeTimeUnit",
    "previousTime",
    "updateTime",
    "revertTimeAndFormat",
    "isActive",
    "MinutesFormatterPipe",
    "NgxMaterialTimepickerPeriodComponent",
    "timePeriod",
    "isPeriodAvailable",
    "isSwitchPeriodAvailable",
    "getDisabledTimeByPeriod",
    "sequence",
    "AutofocusDirective",
    "element",
    "document",
    "activeElement",
    "isFocusActive",
    "focus",
    "decorators",
    "Optional",
    "Inject",
    "DOCUMENT",
    "NgxMaterialTimepickerModule",
    "forRoot",
    "ngModule",
    "NgModule",
    "imports",
    "CommonModule",
    "FormsModule",
    "exports",
    "declarations"
  ],
  "mappings": "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"
}
