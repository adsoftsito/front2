/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
const /** @type {?} */ FEBRUARY = 1;
/**
 * @param {?=} start
 * @param {?=} stop
 * @param {?=} step
 * @return {?}
 */
export function range(start = 0, stop, step = 1) {
    const /** @type {?} */ res = [];
    const /** @type {?} */ cur = (stop === undefined) ? 0 : start;
    const /** @type {?} */ max = (stop === undefined) ? start : stop;
    for (let /** @type {?} */ i = cur; step < 0 ? i > max : i < max; i += step) {
        res.push(i);
    }
    return res;
}
/**
 * Returns true for leap years, false for non-leap years.
 *
 * @export
 * @param {?} year
 * @return {?}
 */
export function isLeap(year) {
    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));
}
/**
 * @param {?} year
 * @param {?} month
 * @param {?} day
 * @return {?}
 */
export function weekDay(year, month, day) {
    return new Date(year, month, day).getDay();
}
/**
 * Return weekday and number of days for year, month.
 *
 * @export
 * @param {?} year
 * @param {?} month
 * @return {?}
 */
export function monthRange(year, month) {
    if ((month < 0) || (month > 11)) {
        throw new Error('Invalid month specified');
    }
    const /** @type {?} */ day = weekDay(year, month, 1);
    let /** @type {?} */ nDays = MDAYS[month];
    if ((month === FEBRUARY) && (isLeap(year))) {
        nDays++;
    }
    return [day, nDays];
}
/**
 * @record
 */
export function ICalendarDate() { }
function ICalendarDate_tsickle_Closure_declarations() {
    /** @type {?} */
    ICalendarDate.prototype.date;
    /** @type {?} */
    ICalendarDate.prototype.isCurrentMonth;
    /** @type {?} */
    ICalendarDate.prototype.isPrevMonth;
    /** @type {?} */
    ICalendarDate.prototype.isNextMonth;
}
/**
 * @record
 */
export function IFormattedParts() { }
function IFormattedParts_tsickle_Closure_declarations() {
    /** @type {?} */
    IFormattedParts.prototype.value;
    /** @type {?|undefined} */
    IFormattedParts.prototype.literal;
    /** @type {?} */
    IFormattedParts.prototype.combined;
}
/** @enum {number} */
const WEEKDAYS = {
    SUNDAY: 0,
    MONDAY: 1,
    TUESDAY: 2,
    WEDNESDAY: 3,
    THURSDAY: 4,
    FRIDAY: 5,
    SATURDAY: 6,
};
export { WEEKDAYS };
WEEKDAYS[WEEKDAYS.SUNDAY] = "SUNDAY";
WEEKDAYS[WEEKDAYS.MONDAY] = "MONDAY";
WEEKDAYS[WEEKDAYS.TUESDAY] = "TUESDAY";
WEEKDAYS[WEEKDAYS.WEDNESDAY] = "WEDNESDAY";
WEEKDAYS[WEEKDAYS.THURSDAY] = "THURSDAY";
WEEKDAYS[WEEKDAYS.FRIDAY] = "FRIDAY";
WEEKDAYS[WEEKDAYS.SATURDAY] = "SATURDAY";
export class Calendar {
    /**
     * @param {?=} firstWeekDay
     */
    constructor(firstWeekDay = WEEKDAYS.SUNDAY) {
        this._firstWeekDay = firstWeekDay;
    }
    /**
     * @return {?}
     */
    get firstWeekDay() {
        return this._firstWeekDay % 7;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set firstWeekDay(value) {
        this._firstWeekDay = value;
    }
    /**
     * Returns an array of weekdays for one week starting
     * with the currently set `firstWeekDay`
     *
     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]
     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]
     *
     * \@memberof Calendar
     * @return {?}
     *
     */
    weekdays() {
        const /** @type {?} */ res = [];
        for (const /** @type {?} */ i of range(this.firstWeekDay, this.firstWeekDay + 7)) {
            res.push(i % 7);
        }
        return res;
    }
    /**
     * Returns the date values for one month. It will always iterate throught
     * complete weeks, so it will contain dates outside the specified month.
     *
     * \@memberof Calendar
     * @param {?} year
     * @param {?} month
     * @param {?=} extraWeek
     * @return {?}
     *
     */
    monthdates(year, month, extraWeek = false) {
        let /** @type {?} */ date = new Date(year, month, 1);
        let /** @type {?} */ days = (date.getDay() - this.firstWeekDay) % 7;
        if (days < 0) {
            days = 7 - Math.abs(days);
        }
        date = this.timedelta(date, 'day', -days);
        const /** @type {?} */ res = [];
        let /** @type {?} */ value;
        while (true) {
            value = this.generateICalendarDate(date, year, month);
            res.push(value);
            date = this.timedelta(date, 'day', 1);
            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {
                if (extraWeek && res.length <= 35) {
                    for (const /** @type {?} */ i of range(0, 7)) {
                        value = this.generateICalendarDate(date, year, month);
                        res.push(value);
                        date = this.timedelta(date, 'day', 1);
                    }
                }
                break;
            }
        }
        return res;
    }
    /**
     * Returns a matrix (array of arrays) representing a month's calendar.
     * Each row represents a full week; week entries are ICalendarDate objects.
     *
     * \@memberof Calendar
     * @param {?} year
     * @param {?} month
     * @param {?=} extraWeek
     * @return {?}
     *
     */
    monthdatescalendar(year, month, extraWeek = false) {
        const /** @type {?} */ dates = this.monthdates(year, month, extraWeek);
        const /** @type {?} */ res = [];
        for (const /** @type {?} */ i of range(0, dates.length, 7)) {
            res.push(dates.slice(i, i + 7));
        }
        return res;
    }
    /**
     * @param {?} date
     * @param {?} interval
     * @param {?} units
     * @return {?}
     */
    timedelta(date, interval, units) {
        const /** @type {?} */ ret = new Date(date);
        const /** @type {?} */ checkRollover = () => {
            if (ret.getDate() !== date.getDate()) {
                ret.setDate(0);
            }
        };
        switch (interval.toLowerCase()) {
            case 'year':
                ret.setFullYear(ret.getFullYear() + units);
                checkRollover();
                break;
            case 'quarter':
                ret.setMonth(ret.getMonth() + 3 * units);
                checkRollover();
                break;
            case 'month':
                ret.setMonth(ret.getMonth() + units);
                checkRollover();
                break;
            case 'week':
                ret.setDate(ret.getDate() + 7 * units);
                break;
            case 'day':
                ret.setDate(ret.getDate() + units);
                break;
            case 'hour':
                ret.setTime(ret.getTime() + units * 3600000);
                break;
            case 'minute':
                ret.setTime(ret.getTime() + units * 60000);
                break;
            case 'second':
                ret.setTime(ret.getTime() + units * 1000);
                break;
            default:
                throw new Error('Invalid interval specifier');
        }
        return ret;
    }
    /**
     * @param {?} date
     * @param {?} locale
     * @param {?} options
     * @param {?} parts
     * @return {?}
     */
    formatToParts(date, locale, options, parts) {
        const /** @type {?} */ formatter = new Intl.DateTimeFormat(locale, options);
        const /** @type {?} */ result = {
            date,
            full: formatter.format(date)
        };
        if ((/** @type {?} */ (formatter)).formatToParts) {
            const /** @type {?} */ formattedParts = (/** @type {?} */ (formatter)).formatToParts(date);
            const /** @type {?} */ toType = (partType) => {
                const /** @type {?} */ index = formattedParts.findIndex(({ type }) => type === partType);
                const /** @type {?} */ o = { value: '', literal: '', combined: '' };
                if (partType === 'era' && index > -1) {
                    o.value = formattedParts[index].value;
                    return o;
                }
                else if (partType === 'era' && index === -1) {
                    return o;
                }
                o.value = formattedParts[index].value;
                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';
                o.combined = [o.value, o.literal].join('');
                return o;
            };
            for (const /** @type {?} */ each of parts) {
                result[each] = toType(each);
            }
        }
        else {
            for (const /** @type {?} */ each of parts) {
                result[each] = { value: '', literal: '', combined: '' };
            }
        }
        return result;
    }
    /**
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    generateICalendarDate(date, year, month) {
        return {
            date,
            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,
            isNextMonth: this.isNextMonth(date, year, month),
            isPrevMonth: this.isPreviousMonth(date, year, month)
        };
    }
    /**
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    isPreviousMonth(date, year, month) {
        if (date.getFullYear() === year) {
            return date.getMonth() < month;
        }
        return date.getFullYear() < year;
    }
    /**
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    isNextMonth(date, year, month) {
        if (date.getFullYear() === year) {
            return date.getMonth() > month;
        }
        return date.getFullYear() > year;
    }
}
function Calendar_tsickle_Closure_declarations() {
    /** @type {?} */
    Calendar.prototype._firstWeekDay;
}

//# sourceMappingURL=data:application/json;base64,