/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Directive, Component, NgModule, ChangeDetectorRef } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { IgxCheckboxModule } from '../checkbox/checkbox.component';
import { ColumnChooserBase } from './column-chooser-base';
import { ColumnChooserItemBase } from './column-chooser-item-base';
import { IgxInputGroupModule } from '../input-group/input-group.component';
export class IgxColumnPinningItemDirective extends ColumnChooserItemBase {
    constructor() {
        super('pinned');
    }
    /**
     * Returns whether a column could be pinned.
     * It's not possible to pin a column if there is not enough space for the unpinned area.
     * ```typescript
     * const columnItem: IgxColumnPinningItemDirective;
     * this.columnItem.pinnable;
     * ```
     * @return {?}
     */
    get pinnable() {
        if (this.column.grid.getUnpinnedWidth(true) - this.column.width < this.column.grid.unpinnedAreaMinWidth) {
            return false;
        }
        return true;
    }
}
IgxColumnPinningItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxColumnPinningItem]'
            },] },
];
/** @nocollapse */
IgxColumnPinningItemDirective.ctorParameters = () => [];
function IgxColumnPinningItemDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnPinningItemDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnPinningItemDirective.ctorParameters;
}
export class IgxColumnPinningComponent extends ColumnChooserBase {
    /**
     * @param {?} cdr
     */
    constructor(cdr) {
        super(cdr);
        this.cdr = cdr;
    }
    /**
     * @hidden
     * @param {?} container
     * @param {?} column
     * @return {?}
     */
    createColumnItem(container, column) {
        if (column.level !== 0) {
            return null;
        }
        const /** @type {?} */ item = new IgxColumnPinningItemDirective();
        item.container = container;
        item.column = column;
        return item;
    }
    /**
     * @hidden
     * @param {?} event
     * @param {?} columnItem
     * @return {?}
     */
    checkboxValueChange(event, columnItem) {
        if (event.checked && !columnItem.pinnable) {
            event.checkbox.checked = false;
            return false;
        }
        columnItem.value = !columnItem.value;
    }
}
IgxColumnPinningComponent.decorators = [
    { type: Component, args: [{
                preserveWhitespaces: false,
                selector: 'igx-column-pinning',
                template: `
<div class="igx-column-hiding__header">
    <h4 class="igx-column-hiding__header-title" *ngIf="title">{{ title }}</h4>

    <igx-input-group class="igx-column-hiding__header-input">
        <input igxInput
            type="text"
            [(ngModel)]="filterCriteria"
            [placeholder]="filterColumnsPrompt"
            autocomplete="off" />
    </igx-input-group>
</div>

<div class="igx-column-hiding__columns"
    [style.max-height]="columnsAreaMaxHeight">
    <igx-checkbox igxColumnPinningItem
        *ngFor="let columnItem of columnItems"
        class="igx-column-hiding__columns-item"
        (change)="checkboxValueChange($event, columnItem)"
        [checked]="columnItem.value">
        {{ columnItem.name }}
    </igx-checkbox>
</div>
`
            },] },
];
/** @nocollapse */
IgxColumnPinningComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
];
function IgxColumnPinningComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnPinningComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnPinningComponent.ctorParameters;
    /** @type {?} */
    IgxColumnPinningComponent.prototype.cdr;
}
/**
 * The IgxColumnPinningModule provides the {\@link IgxColumnPinningComponent}, {\@link IgxColumnPinningItemDirective} inside your application.
 */
export class IgxColumnPinningModule {
}
IgxColumnPinningModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxColumnPinningComponent, IgxColumnPinningItemDirective],
                exports: [IgxColumnPinningComponent],
                imports: [
                    IgxCheckboxModule,
                    IgxInputGroupModule,
                    CommonModule,
                    FormsModule
                ]
            },] },
];
function IgxColumnPinningModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnPinningModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnPinningModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXBpbm5pbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9jb2x1bW4tcGlubmluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBd0IsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUszRSxNQUFNLG9DQUFxQyxTQUFRLHFCQUFxQjtJQUVwRTtRQUNJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNuQjs7Ozs7Ozs7OztJQVVELElBQUksUUFBUTtRQUNSLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQztZQUN0RyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztLQUNmOzs7WUF0QkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSx3QkFBd0I7YUFDckM7Ozs7Ozs7Ozs7Ozs7QUFtREQsTUFBTSxnQ0FBaUMsU0FBUSxpQkFBaUI7Ozs7SUFFNUQsWUFBbUIsR0FBc0I7UUFDckMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBREksUUFBRyxHQUFILEdBQUcsQ0FBbUI7S0FFeEM7Ozs7Ozs7SUFLRCxnQkFBZ0IsQ0FBQyxTQUFjLEVBQUUsTUFBVztRQUN4QyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQztTQUNmO1FBQ0QsdUJBQU0sSUFBSSxHQUFHLElBQUksNkJBQTZCLEVBQUUsQ0FBQztRQUNqRCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDO0tBQ2Y7Ozs7Ozs7SUFLTSxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsVUFBeUM7UUFDdkUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsVUFBVSxDQUFDLEtBQUssR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7Ozs7WUF2RDVDLFNBQVMsU0FBQztnQkFDUCxtQkFBbUIsRUFBRSxLQUFLO2dCQUMxQixRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBdUJiO2FBQ0E7Ozs7WUEzRDhELGlCQUFpQjs7Ozs7Ozs7Ozs7Ozs7OztBQXdHaEYsTUFBTTs7O1lBVkwsUUFBUSxTQUFDO2dCQUNOLFlBQVksRUFBRSxDQUFDLHlCQUF5QixFQUFFLDZCQUE2QixDQUFDO2dCQUN4RSxPQUFPLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztnQkFDcEMsT0FBTyxFQUFFO29CQUNMLGlCQUFpQjtvQkFDakIsbUJBQW1CO29CQUNuQixZQUFZO29CQUNaLFdBQVc7aUJBQ2Q7YUFDSiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgTmdNb2R1bGUsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IElneENoZWNrYm94TW9kdWxlIH0gZnJvbSAnLi4vY2hlY2tib3gvY2hlY2tib3guY29tcG9uZW50JztcbmltcG9ydCB7IENvbHVtbkNob29zZXJCYXNlIH0gZnJvbSAnLi9jb2x1bW4tY2hvb3Nlci1iYXNlJztcbmltcG9ydCB7IENvbHVtbkNob29zZXJJdGVtQmFzZSB9IGZyb20gJy4vY29sdW1uLWNob29zZXItaXRlbS1iYXNlJztcbmltcG9ydCB7IElneElucHV0R3JvdXBNb2R1bGUgfSBmcm9tICcuLi9pbnB1dC1ncm91cC9pbnB1dC1ncm91cC5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hDb2x1bW5QaW5uaW5nSXRlbV0nXG59KVxuZXhwb3J0IGNsYXNzIElneENvbHVtblBpbm5pbmdJdGVtRGlyZWN0aXZlIGV4dGVuZHMgQ29sdW1uQ2hvb3Nlckl0ZW1CYXNlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigncGlubmVkJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGEgY29sdW1uIGNvdWxkIGJlIHBpbm5lZC5cbiAgICAgKiBJdCdzIG5vdCBwb3NzaWJsZSB0byBwaW4gYSBjb2x1bW4gaWYgdGhlcmUgaXMgbm90IGVub3VnaCBzcGFjZSBmb3IgdGhlIHVucGlubmVkIGFyZWEuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGNvbHVtbkl0ZW06IElneENvbHVtblBpbm5pbmdJdGVtRGlyZWN0aXZlO1xuICAgICAqIHRoaXMuY29sdW1uSXRlbS5waW5uYWJsZTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBnZXQgcGlubmFibGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbHVtbi5ncmlkLmdldFVucGlubmVkV2lkdGgodHJ1ZSkgLSB0aGlzLmNvbHVtbi53aWR0aCA8IHRoaXMuY29sdW1uLmdyaWQudW5waW5uZWRBcmVhTWluV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbkBDb21wb25lbnQoe1xuICAgIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICAgIHNlbGVjdG9yOiAnaWd4LWNvbHVtbi1waW5uaW5nJyxcbiAgICB0ZW1wbGF0ZTogYFxuPGRpdiBjbGFzcz1cImlneC1jb2x1bW4taGlkaW5nX19oZWFkZXJcIj5cbiAgICA8aDQgY2xhc3M9XCJpZ3gtY29sdW1uLWhpZGluZ19faGVhZGVyLXRpdGxlXCIgKm5nSWY9XCJ0aXRsZVwiPnt7IHRpdGxlIH19PC9oND5cblxuICAgIDxpZ3gtaW5wdXQtZ3JvdXAgY2xhc3M9XCJpZ3gtY29sdW1uLWhpZGluZ19faGVhZGVyLWlucHV0XCI+XG4gICAgICAgIDxpbnB1dCBpZ3hJbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgWyhuZ01vZGVsKV09XCJmaWx0ZXJDcml0ZXJpYVwiXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwiZmlsdGVyQ29sdW1uc1Byb21wdFwiXG4gICAgICAgICAgICBhdXRvY29tcGxldGU9XCJvZmZcIiAvPlxuICAgIDwvaWd4LWlucHV0LWdyb3VwPlxuPC9kaXY+XG5cbjxkaXYgY2xhc3M9XCJpZ3gtY29sdW1uLWhpZGluZ19fY29sdW1uc1wiXG4gICAgW3N0eWxlLm1heC1oZWlnaHRdPVwiY29sdW1uc0FyZWFNYXhIZWlnaHRcIj5cbiAgICA8aWd4LWNoZWNrYm94IGlneENvbHVtblBpbm5pbmdJdGVtXG4gICAgICAgICpuZ0Zvcj1cImxldCBjb2x1bW5JdGVtIG9mIGNvbHVtbkl0ZW1zXCJcbiAgICAgICAgY2xhc3M9XCJpZ3gtY29sdW1uLWhpZGluZ19fY29sdW1ucy1pdGVtXCJcbiAgICAgICAgKGNoYW5nZSk9XCJjaGVja2JveFZhbHVlQ2hhbmdlKCRldmVudCwgY29sdW1uSXRlbSlcIlxuICAgICAgICBbY2hlY2tlZF09XCJjb2x1bW5JdGVtLnZhbHVlXCI+XG4gICAgICAgIHt7IGNvbHVtbkl0ZW0ubmFtZSB9fVxuICAgIDwvaWd4LWNoZWNrYm94PlxuPC9kaXY+XG5gXG59KVxuZXhwb3J0IGNsYXNzIElneENvbHVtblBpbm5pbmdDb21wb25lbnQgZXh0ZW5kcyBDb2x1bW5DaG9vc2VyQmFzZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgICAgICBzdXBlcihjZHIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjcmVhdGVDb2x1bW5JdGVtKGNvbnRhaW5lcjogYW55LCBjb2x1bW46IGFueSkge1xuICAgICAgICBpZiAoY29sdW1uLmxldmVsICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtID0gbmV3IElneENvbHVtblBpbm5pbmdJdGVtRGlyZWN0aXZlKCk7XG4gICAgICAgIGl0ZW0uY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICBpdGVtLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBjaGVja2JveFZhbHVlQ2hhbmdlKGV2ZW50LCBjb2x1bW5JdGVtOiBJZ3hDb2x1bW5QaW5uaW5nSXRlbURpcmVjdGl2ZSkge1xuICAgICAgICBpZiAoZXZlbnQuY2hlY2tlZCAmJiAhY29sdW1uSXRlbS5waW5uYWJsZSkge1xuICAgICAgICAgICAgZXZlbnQuY2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbHVtbkl0ZW0udmFsdWUgPSAhY29sdW1uSXRlbS52YWx1ZTtcbiAgICB9XG59XG5cbi8qKlxuICogVGhlIElneENvbHVtblBpbm5pbmdNb2R1bGUgcHJvdmlkZXMgdGhlIHtAbGluayBJZ3hDb2x1bW5QaW5uaW5nQ29tcG9uZW50fSwge0BsaW5rIElneENvbHVtblBpbm5pbmdJdGVtRGlyZWN0aXZlfSBpbnNpZGUgeW91ciBhcHBsaWNhdGlvbi5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtJZ3hDb2x1bW5QaW5uaW5nQ29tcG9uZW50LCBJZ3hDb2x1bW5QaW5uaW5nSXRlbURpcmVjdGl2ZV0sXG4gICAgZXhwb3J0czogW0lneENvbHVtblBpbm5pbmdDb21wb25lbnRdLFxuICAgIGltcG9ydHM6IFtcbiAgICAgICAgSWd4Q2hlY2tib3hNb2R1bGUsXG4gICAgICAgIElneElucHV0R3JvdXBNb2R1bGUsXG4gICAgICAgIENvbW1vbk1vZHVsZSxcbiAgICAgICAgRm9ybXNNb2R1bGVcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIElneENvbHVtblBpbm5pbmdNb2R1bGUge1xufVxuIl19