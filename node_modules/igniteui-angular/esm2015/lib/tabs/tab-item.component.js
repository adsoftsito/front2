/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input } from '@angular/core';
import { IgxTabsGroupComponent } from './tabs-group.component';
import { IgxTabsComponent } from './tabs.component';
export class IgxTabItemComponent {
    /**
     * @param {?} _tabs
     * @param {?} _element
     */
    constructor(_tabs, _element) {
        this._tabs = _tabs;
        this._element = _element;
        this._changesCount = 0;
        /**
         * @hidden
         */
        this.role = 'tab';
        this._nativeTabItem = _element;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        this.select();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        if (this.isSelected) {
            this._tabs.selectedIndicator.nativeElement.style.width = `${this.nativeTabItem.nativeElement.offsetWidth}px`;
            this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${this.nativeTabItem.nativeElement.offsetLeft}px)`;
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownArrowRight(event) {
        this._onKeyDown(false);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownArrowLeft(event) {
        this._onKeyDown(true);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownHome(event) {
        event.preventDefault();
        this._onKeyDown(false, 0);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownEnd(event) {
        event.preventDefault();
        this._onKeyDown(false, this._tabs.tabs.toArray().length - 1);
    }
    /**
     * @param {?} isLeftArrow
     * @param {?=} index
     * @return {?}
     */
    _onKeyDown(isLeftArrow, index = null) {
        const /** @type {?} */ tabsArray = this._tabs.tabs.toArray();
        if (index === null) {
            index = (isLeftArrow)
                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1
                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;
        }
        const /** @type {?} */ tab = tabsArray[index];
        const /** @type {?} */ viewPortWidth = this._tabs.viewPort.nativeElement.offsetWidth;
        const /** @type {?} */ nativeTabElement = tab.nativeTabItem.nativeElement;
        const /** @type {?} */ focusDelay = (nativeTabElement.offsetWidth + nativeTabElement.offsetLeft - this._tabs.offset > viewPortWidth) ? 200 : 50;
        tab.select(focusDelay);
    }
    /**
     * @hidden
     * @return {?}
     */
    get changesCount() {
        return this._changesCount;
    }
    /**
     * @hidden
     * @return {?}
     */
    get nativeTabItem() {
        return this._nativeTabItem;
    }
    /**
     * 	Gets whether the tab is disabled.
     * ```
     * const disabledItem = this.myTabComponent.tabs.first.disabled;
     * ```
     * @return {?}
     */
    get disabled() {
        const /** @type {?} */ group = this.relatedGroup;
        if (group) {
            return group.disabled;
        }
    }
    /**
     * Gets whether the tab is selected.
     * ```typescript
     * const selectedItem = this.myTabComponent.tabs.first.isSelected;
     * ```
     * @return {?}
     */
    get isSelected() {
        const /** @type {?} */ group = this.relatedGroup;
        if (group) {
            return group.isSelected;
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    get index() {
        return this._tabs.tabs.toArray().indexOf(this);
    }
    /**
     * @hidden
     * @param {?=} focusDelay
     * @return {?}
     */
    select(focusDelay = 50) {
        this.relatedGroup.select(focusDelay);
    }
}
IgxTabItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-tab-item',
                template: `<ng-template #defaultTabTemplate>
    <div *ngIf="relatedGroup.icon" class="igx-tabs__header-menu-item-icon">
        <igx-icon fontSet="material">{{relatedGroup.icon}}</igx-icon>
        <igx-badge [value]="changesCount" [hidden]="changesCount === 0"></igx-badge>
    </div>
    <div *ngIf="relatedGroup.label" ngClass="igx-tabs__item-label">{{relatedGroup.label}}</div>

</ng-template>
<ng-container *ngTemplateOutlet="relatedGroup.customTabTemplate ? relatedGroup.customTabTemplate : defaultTabTemplate; context: { $implicit: relatedGroup }">
</ng-container>`
            },] },
];
/** @nocollapse */
IgxTabItemComponent.ctorParameters = () => [
    { type: IgxTabsComponent, decorators: [{ type: Inject, args: [forwardRef(() => IgxTabsComponent),] },] },
    { type: ElementRef, },
];
IgxTabItemComponent.propDecorators = {
    "relatedGroup": [{ type: Input },],
    "role": [{ type: HostBinding, args: ['attr.role',] },],
    "tabindex": [{ type: HostBinding, args: ['attr.tabindex',] },],
    "onClick": [{ type: HostListener, args: ['click', ['$event'],] },],
    "onResize": [{ type: HostListener, args: ['window:resize', ['$event'],] },],
    "onKeydownArrowRight": [{ type: HostListener, args: ['keydown.arrowright', ['$event'],] },],
    "onKeydownArrowLeft": [{ type: HostListener, args: ['keydown.arrowleft', ['$event'],] },],
    "onKeydownHome": [{ type: HostListener, args: ['keydown.home', ['$event'],] },],
    "onKeydownEnd": [{ type: HostListener, args: ['keydown.end', ['$event'],] },],
};
function IgxTabItemComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTabItemComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTabItemComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxTabItemComponent.propDecorators;
    /** @type {?} */
    IgxTabItemComponent.prototype._nativeTabItem;
    /** @type {?} */
    IgxTabItemComponent.prototype._changesCount;
    /**
     * Gets the group associated with the tab.
     * ```html
     * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;
     * ```
     * @type {?}
     */
    IgxTabItemComponent.prototype.relatedGroup;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabItemComponent.prototype.role;
    /**
     * @hidden
     * @type {?}
     */
    IgxTabItemComponent.prototype.tabindex;
    /** @type {?} */
    IgxTabItemComponent.prototype._tabs;
    /** @type {?} */
    IgxTabItemComponent.prototype._element;
}

//# sourceMappingURL=data:application/json;base64,