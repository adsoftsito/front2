/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
const HorizontalAlignment = {
    Left: -1,
    Center: -0.5,
    Right: 0,
};
export { HorizontalAlignment };
HorizontalAlignment[HorizontalAlignment.Left] = "Left";
HorizontalAlignment[HorizontalAlignment.Center] = "Center";
HorizontalAlignment[HorizontalAlignment.Right] = "Right";
/** @enum {number} */
const VerticalAlignment = {
    Top: -1,
    Middle: -0.5,
    Bottom: 0,
};
export { VerticalAlignment };
VerticalAlignment[VerticalAlignment.Top] = "Top";
VerticalAlignment[VerticalAlignment.Middle] = "Middle";
VerticalAlignment[VerticalAlignment.Bottom] = "Bottom";
export class Point {
    /**
     * @param {?} x
     * @param {?} y
     */
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
function Point_tsickle_Closure_declarations() {
    /** @type {?} */
    Point.prototype.x;
    /** @type {?} */
    Point.prototype.y;
}
/**
 * @record
 */
export function PositionSettings() { }
function PositionSettings_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    PositionSettings.prototype.target;
    /** @type {?|undefined} */
    PositionSettings.prototype.horizontalDirection;
    /** @type {?|undefined} */
    PositionSettings.prototype.verticalDirection;
    /** @type {?|undefined} */
    PositionSettings.prototype.horizontalStartPoint;
    /** @type {?|undefined} */
    PositionSettings.prototype.verticalStartPoint;
    /** @type {?|undefined} */
    PositionSettings.prototype.openAnimation;
    /** @type {?|undefined} */
    PositionSettings.prototype.closeAnimation;
}
/**
 * @record
 */
export function OverlaySettings() { }
function OverlaySettings_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    OverlaySettings.prototype.positionStrategy;
    /** @type {?|undefined} */
    OverlaySettings.prototype.scrollStrategy;
    /** @type {?|undefined} */
    OverlaySettings.prototype.modal;
    /** @type {?|undefined} */
    OverlaySettings.prototype.closeOnOutsideClick;
    /** @type {?|undefined} */
    OverlaySettings.prototype.outlet;
}
/**
 * @record
 */
export function OverlayEventArgs() { }
function OverlayEventArgs_tsickle_Closure_declarations() {
    /**
     * Id of the overlay as returned by the `show()` method
     * @type {?}
     */
    OverlayEventArgs.prototype.id;
    /**
     * Available when `Type<T>` is provided to the `show()` method and allows access to the created Component instance
     * @type {?|undefined}
     */
    OverlayEventArgs.prototype.componentRef;
}
/**
 * @record
 */
export function OverlayCancelableEventArgs() { }
function OverlayCancelableEventArgs_tsickle_Closure_declarations() {
}
/**
 * @record
 */
export function OverlayAnimationEventArgs() { }
function OverlayAnimationEventArgs_tsickle_Closure_declarations() {
    /**
     * Id of the overlay as returned by the `show()` method
     * @type {?}
     */
    OverlayAnimationEventArgs.prototype.id;
    /**
     * Animation player that will play the animation
     * @type {?}
     */
    OverlayAnimationEventArgs.prototype.animationPlayer;
    /**
     * Type of animation to be played. It should be either 'open' or 'close'
     * @type {?}
     */
    OverlayAnimationEventArgs.prototype.animationType;
}
/**
 * @hidden
 * @param {?} settings
 * @param {?} overlayWrapper
 * @return {?}
 */
export function getPointFromPositionsSettings(settings, overlayWrapper) {
    let /** @type {?} */ result = new Point(0, 0);
    if (settings.target instanceof HTMLElement) {
        const /** @type {?} */ rect = (/** @type {?} */ (settings.target)).getBoundingClientRect();
        result.x = rect.right + rect.width * settings.horizontalStartPoint;
        result.y = rect.bottom + rect.height * settings.verticalStartPoint;
    }
    else if (settings.target instanceof Point) {
        result = settings.target;
    }
    //  if for some reason overlayWrapper is not at 0,0 position, e.g. overlay is in outlet
    //  which is in element with transform,perspective or filter set, we should translate the result
    //  accordingly
    if (overlayWrapper) {
        const /** @type {?} */ overlayWrapperPosition = overlayWrapper.getBoundingClientRect();
        result.x -= overlayWrapperPosition.left;
        result.y -= overlayWrapperPosition.top;
    }
    return result;
}
/**
 * @hidden
 * @record
 */
export function OverlayInfo() { }
function OverlayInfo_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    OverlayInfo.prototype.id;
    /** @type {?|undefined} */
    OverlayInfo.prototype.elementRef;
    /** @type {?|undefined} */
    OverlayInfo.prototype.componentRef;
    /** @type {?|undefined} */
    OverlayInfo.prototype.settings;
    /** @type {?|undefined} */
    OverlayInfo.prototype.initialSize;
    /** @type {?|undefined} */
    OverlayInfo.prototype.hook;
    /** @type {?|undefined} */
    OverlayInfo.prototype.openAnimationPlayer;
    /** @type {?|undefined} */
    OverlayInfo.prototype.closeAnimationPlayer;
    /** @type {?|undefined} */
    OverlayInfo.prototype.openAnimationInnerPlayer;
    /** @type {?|undefined} */
    OverlayInfo.prototype.closeAnimationInnerPlayer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9vdmVybGF5L3V0aWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQkEsTUFBTTs7Ozs7SUFDRixZQUFtQixDQUFTLEVBQVMsQ0FBUztRQUEzQixNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQVMsTUFBQyxHQUFELENBQUMsQ0FBUTtLQUFLO0NBQ3REOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdDRCxNQUFNLHdDQUF3QyxRQUEwQixFQUFFLGNBQTJCO0lBQ2pHLHFCQUFJLE1BQU0sR0FBVSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFcEMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sWUFBWSxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLHVCQUFNLElBQUksR0FBRyxtQkFBYyxRQUFRLENBQUMsTUFBTSxFQUFDLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNwRSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsb0JBQW9CLENBQUM7UUFDbkUsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLGtCQUFrQixDQUFDO0tBQ3RFO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztLQUM1Qjs7OztJQUtELEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDakIsdUJBQU0sc0JBQXNCLEdBQUcsY0FBYyxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDdEUsTUFBTSxDQUFDLENBQUMsSUFBSSxzQkFBc0IsQ0FBQyxJQUFJLENBQUM7UUFDeEMsTUFBTSxDQUFDLENBQUMsSUFBSSxzQkFBc0IsQ0FBQyxHQUFHLENBQUM7S0FDMUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDO0NBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2xvYmFsUG9zaXRpb25TdHJhdGVneSB9IGZyb20gJy4vcG9zaXRpb24vZ2xvYmFsLXBvc2l0aW9uLXN0cmF0ZWd5JztcbmltcG9ydCB7IElQb3NpdGlvblN0cmF0ZWd5IH0gZnJvbSAnLi9wb3NpdGlvbi9JUG9zaXRpb25TdHJhdGVneSc7XG5cbmltcG9ydCB7IElTY3JvbGxTdHJhdGVneSwgTm9PcFNjcm9sbFN0cmF0ZWd5IH0gZnJvbSAnLi9zY3JvbGwnO1xuaW1wb3J0IHsgQW5pbWF0aW9uTWV0YWRhdGEsIEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhLCBBbmltYXRpb25QbGF5ZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IENvbXBvbmVudFJlZiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4T3ZlcmxheU91dGxldERpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvdG9nZ2xlL3RvZ2dsZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQ2FuY2VsYWJsZUV2ZW50QXJncyB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMnO1xuXG5leHBvcnQgZW51bSBIb3Jpem9udGFsQWxpZ25tZW50IHtcbiAgICBMZWZ0ID0gLTEsXG4gICAgQ2VudGVyID0gLTAuNSxcbiAgICBSaWdodCA9IDBcbn1cblxuZXhwb3J0IGVudW0gVmVydGljYWxBbGlnbm1lbnQge1xuICAgIFRvcCA9IC0xLFxuICAgIE1pZGRsZSA9IC0wLjUsXG4gICAgQm90dG9tID0gMFxufVxuXG5leHBvcnQgY2xhc3MgUG9pbnQge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB4OiBudW1iZXIsIHB1YmxpYyB5OiBudW1iZXIpIHsgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBvc2l0aW9uU2V0dGluZ3Mge1xuICAgIHRhcmdldD86IFBvaW50IHwgSFRNTEVsZW1lbnQ7XG4gICAgaG9yaXpvbnRhbERpcmVjdGlvbj86IEhvcml6b250YWxBbGlnbm1lbnQ7XG4gICAgdmVydGljYWxEaXJlY3Rpb24/OiBWZXJ0aWNhbEFsaWdubWVudDtcbiAgICBob3Jpem9udGFsU3RhcnRQb2ludD86IEhvcml6b250YWxBbGlnbm1lbnQ7XG4gICAgdmVydGljYWxTdGFydFBvaW50PzogVmVydGljYWxBbGlnbm1lbnQ7XG4gICAgb3BlbkFuaW1hdGlvbj86IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhO1xuICAgIGNsb3NlQW5pbWF0aW9uPzogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3ZlcmxheVNldHRpbmdzIHtcbiAgICBwb3NpdGlvblN0cmF0ZWd5PzogSVBvc2l0aW9uU3RyYXRlZ3k7XG4gICAgc2Nyb2xsU3RyYXRlZ3k/OiBJU2Nyb2xsU3RyYXRlZ3k7XG4gICAgbW9kYWw/OiBib29sZWFuO1xuICAgIGNsb3NlT25PdXRzaWRlQ2xpY2s/OiBib29sZWFuO1xuICAgIG91dGxldD86IElneE92ZXJsYXlPdXRsZXREaXJlY3RpdmUgfCBFbGVtZW50UmVmO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJsYXlFdmVudEFyZ3Mge1xuICAgIC8qKiBJZCBvZiB0aGUgb3ZlcmxheSBhcyByZXR1cm5lZCBieSB0aGUgYHNob3coKWAgbWV0aG9kICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKiogQXZhaWxhYmxlIHdoZW4gYFR5cGU8VD5gIGlzIHByb3ZpZGVkIHRvIHRoZSBgc2hvdygpYCBtZXRob2QgYW5kIGFsbG93cyBhY2Nlc3MgdG8gdGhlIGNyZWF0ZWQgQ29tcG9uZW50IGluc3RhbmNlICovXG4gICAgY29tcG9uZW50UmVmPzogQ29tcG9uZW50UmVmPHt9Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPdmVybGF5Q2FuY2VsYWJsZUV2ZW50QXJncyBleHRlbmRzIE92ZXJsYXlFdmVudEFyZ3MsIENhbmNlbGFibGVFdmVudEFyZ3Mge1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJsYXlBbmltYXRpb25FdmVudEFyZ3Mge1xuICAgIC8qKiBJZCBvZiB0aGUgb3ZlcmxheSBhcyByZXR1cm5lZCBieSB0aGUgYHNob3coKWAgbWV0aG9kICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKiogQW5pbWF0aW9uIHBsYXllciB0aGF0IHdpbGwgcGxheSB0aGUgYW5pbWF0aW9uICovXG4gICAgYW5pbWF0aW9uUGxheWVyOiBBbmltYXRpb25QbGF5ZXI7XG4gICAgLyoqIFR5cGUgb2YgYW5pbWF0aW9uIHRvIGJlIHBsYXllZC4gSXQgc2hvdWxkIGJlIGVpdGhlciAnb3Blbicgb3IgJ2Nsb3NlJyAqL1xuICAgIGFuaW1hdGlvblR5cGU6ICdvcGVuJyB8ICdjbG9zZSc7XG59XG5cbi8qKiBAaGlkZGVuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UG9pbnRGcm9tUG9zaXRpb25zU2V0dGluZ3Moc2V0dGluZ3M6IFBvc2l0aW9uU2V0dGluZ3MsIG92ZXJsYXlXcmFwcGVyOiBIVE1MRWxlbWVudCk6IFBvaW50IHtcbiAgICBsZXQgcmVzdWx0OiBQb2ludCA9IG5ldyBQb2ludCgwLCAwKTtcblxuICAgIGlmIChzZXR0aW5ncy50YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICBjb25zdCByZWN0ID0gKDxIVE1MRWxlbWVudD5zZXR0aW5ncy50YXJnZXQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICByZXN1bHQueCA9IHJlY3QucmlnaHQgKyByZWN0LndpZHRoICogc2V0dGluZ3MuaG9yaXpvbnRhbFN0YXJ0UG9pbnQ7XG4gICAgICAgIHJlc3VsdC55ID0gcmVjdC5ib3R0b20gKyByZWN0LmhlaWdodCAqIHNldHRpbmdzLnZlcnRpY2FsU3RhcnRQb2ludDtcbiAgICB9IGVsc2UgaWYgKHNldHRpbmdzLnRhcmdldCBpbnN0YW5jZW9mIFBvaW50KSB7XG4gICAgICAgIHJlc3VsdCA9IHNldHRpbmdzLnRhcmdldDtcbiAgICB9XG5cbiAgICAvLyAgaWYgZm9yIHNvbWUgcmVhc29uIG92ZXJsYXlXcmFwcGVyIGlzIG5vdCBhdCAwLDAgcG9zaXRpb24sIGUuZy4gb3ZlcmxheSBpcyBpbiBvdXRsZXRcbiAgICAvLyAgd2hpY2ggaXMgaW4gZWxlbWVudCB3aXRoIHRyYW5zZm9ybSxwZXJzcGVjdGl2ZSBvciBmaWx0ZXIgc2V0LCB3ZSBzaG91bGQgdHJhbnNsYXRlIHRoZSByZXN1bHRcbiAgICAvLyAgYWNjb3JkaW5nbHlcbiAgICBpZiAob3ZlcmxheVdyYXBwZXIpIHtcbiAgICAgICAgY29uc3Qgb3ZlcmxheVdyYXBwZXJQb3NpdGlvbiA9IG92ZXJsYXlXcmFwcGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICByZXN1bHQueCAtPSBvdmVybGF5V3JhcHBlclBvc2l0aW9uLmxlZnQ7XG4gICAgICAgIHJlc3VsdC55IC09IG92ZXJsYXlXcmFwcGVyUG9zaXRpb24udG9wO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiBAaGlkZGVuICovXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJsYXlJbmZvIHtcbiAgICBpZD86IHN0cmluZztcbiAgICBlbGVtZW50UmVmPzogRWxlbWVudFJlZjtcbiAgICBjb21wb25lbnRSZWY/OiBDb21wb25lbnRSZWY8e30+O1xuICAgIHNldHRpbmdzPzogT3ZlcmxheVNldHRpbmdzO1xuICAgIGluaXRpYWxTaXplPzogeyB3aWR0aD86IG51bWJlciwgaGVpZ2h0PzogbnVtYmVyLCB4PzogbnVtYmVyLCB5PzogbnVtYmVyIH07XG4gICAgaG9vaz86IEhUTUxFbGVtZW50O1xuICAgIG9wZW5BbmltYXRpb25QbGF5ZXI/OiBBbmltYXRpb25QbGF5ZXI7XG4gICAgY2xvc2VBbmltYXRpb25QbGF5ZXI/OiBBbmltYXRpb25QbGF5ZXI7XG4gICAgb3BlbkFuaW1hdGlvbklubmVyUGxheWVyPzogYW55O1xuICAgIGNsb3NlQW5pbWF0aW9uSW5uZXJQbGF5ZXI/OiBhbnk7XG59XG4iXX0=