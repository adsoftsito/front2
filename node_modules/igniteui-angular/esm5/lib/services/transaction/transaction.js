/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
var TransactionType = {
    ADD: 'add',
    DELETE: 'delete',
    UPDATE: 'update',
};
export { TransactionType };
/**
 * @record
 */
export function Transaction() { }
function Transaction_tsickle_Closure_declarations() {
    /** @type {?} */
    Transaction.prototype.id;
    /** @type {?} */
    Transaction.prototype.type;
    /** @type {?} */
    Transaction.prototype.newValue;
}
/**
 * \@experimental \@hidden
 * @record
 */
export function HierarchicalTransaction() { }
function HierarchicalTransaction_tsickle_Closure_declarations() {
    /** @type {?} */
    HierarchicalTransaction.prototype.parentId;
}
/**
 * @record
 */
export function State() { }
function State_tsickle_Closure_declarations() {
    /** @type {?} */
    State.prototype.value;
    /** @type {?} */
    State.prototype.recordRef;
    /** @type {?} */
    State.prototype.type;
}
/**
 * \@experimental \@hidden
 * @record
 */
export function HierarchicalState() { }
function HierarchicalState_tsickle_Closure_declarations() {
    /** @type {?} */
    HierarchicalState.prototype.parentId;
}
/**
 * \@experimental \@hidden
 * @record
 */
export function HierarchicalTransactionNode() { }
function HierarchicalTransactionNode_tsickle_Closure_declarations() {
    /** @type {?} */
    HierarchicalTransactionNode.prototype.id;
    /** @type {?|undefined} */
    HierarchicalTransactionNode.prototype.parentId;
    /** @type {?} */
    HierarchicalTransactionNode.prototype.childNodes;
}
// unsupported: template constraints.
// unsupported: template constraints.
/**
 * @record
 * @template T, S
 */
export function TransactionService() { }
function TransactionService_tsickle_Closure_declarations() {
    /**
     * Returns whether transaction is enabled for this service
     * @type {?}
     */
    TransactionService.prototype.enabled;
    /**
     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo.
     * @type {?|undefined}
     */
    TransactionService.prototype.onStateUpdate;
    /**
     * \@return if there are any transactions in the Undo stack
     * @type {?}
     */
    TransactionService.prototype.canUndo;
    /**
     * \@return if there are any transactions in the Redo stack
     * @type {?}
     */
    TransactionService.prototype.canRedo;
    /**
     * Adds provided  transaction with recordRef if any
     * \@param transaction Transaction to be added
     * \@param recordRef Reference to the value of the record in the data source related to the changed item
     * @type {?}
     */
    TransactionService.prototype.add;
    /**
     * Returns all recorded transactions in chronological order.
     * \@param id Optional record id to get transactions for
     * \@return All transaction in the service or for the specified record
     * @type {?}
     */
    TransactionService.prototype.getTransactionLog;
    /**
     * Remove the last transaction if any
     * @type {?}
     */
    TransactionService.prototype.undo;
    /**
     * Applies the last undone transaction if any
     * @type {?}
     */
    TransactionService.prototype.redo;
    /**
     * Returns aggregated changes from all transactions
     * \@param mergeChanges If set to true will merge each state's value over relate recordRef
     * and will record resulting value in the related transaction
     * \@return Collection of aggregated transactions for each changed record
     * @type {?}
     */
    TransactionService.prototype.getAggregatedChanges;
    /**
     * Returns the state of the record with provided id
     * \@param id The id of the record
     * \@return State of the record if any
     * @type {?}
     */
    TransactionService.prototype.getState;
    /**
     * Returns value of the required id including all uncommitted changes
     * \@param id The id of the record to return value for
     * \@param mergeChanges If set to true will merge state's value over relate recordRef
     * and will return merged value
     * \@return Value with changes or **null**
     * @type {?}
     */
    TransactionService.prototype.getAggregatedValue;
    /**
     * Applies all transactions over the provided data
     * \@param data Data source to update
     * @type {?}
     */
    TransactionService.prototype.commit;
    /**
     * Clears all transactions
     * @type {?}
     */
    TransactionService.prototype.clear;
    /**
     * Starts pending transactions. All transactions passed after call to startPending
     * will not be added to transaction log
     * @type {?}
     */
    TransactionService.prototype.startPending;
    /**
     * Clears all pending transactions and aggregated pending state. If commit is set to true
     * commits pending states as single transaction
     * \@param commit Should commit the pending states
     * @type {?}
     */
    TransactionService.prototype.endPending;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3RyYW5zYWN0aW9uL3RyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztTQUdVLEtBQUs7WUFDRixRQUFRO1lBQ1IsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgZW51bSBUcmFuc2FjdGlvblR5cGUge1xuICAgIEFERCA9ICdhZGQnLFxuICAgIERFTEVURSA9ICdkZWxldGUnLFxuICAgIFVQREFURSA9ICd1cGRhdGUnXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNhY3Rpb24ge1xuICAgIGlkOiBhbnk7XG4gICAgdHlwZTogVHJhbnNhY3Rpb25UeXBlO1xuICAgIG5ld1ZhbHVlOiBhbnk7XG59XG5cbi8qKiBAZXhwZXJpbWVudGFsIEBoaWRkZW4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSGllcmFyY2hpY2FsVHJhbnNhY3Rpb24gZXh0ZW5kcyBUcmFuc2FjdGlvbiB7XG4gICAgcGFyZW50SWQ6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZSB7XG4gICAgdmFsdWU6IGFueTtcbiAgICByZWNvcmRSZWY6IGFueTtcbiAgICB0eXBlOiBUcmFuc2FjdGlvblR5cGU7XG59XG5cbi8qKiBAZXhwZXJpbWVudGFsIEBoaWRkZW4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSGllcmFyY2hpY2FsU3RhdGUgZXh0ZW5kcyBTdGF0ZSB7XG4gICAgcGFyZW50SWQ6IGFueTtcbn1cblxuLyoqIEBleHBlcmltZW50YWwgQGhpZGRlbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIaWVyYXJjaGljYWxUcmFuc2FjdGlvbk5vZGUge1xuICAgIGlkOiBhbnk7XG4gICAgcGFyZW50SWQ/OiBhbnk7XG4gICAgY2hpbGROb2RlczogSGllcmFyY2hpY2FsVHJhbnNhY3Rpb25Ob2RlW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNhY3Rpb25TZXJ2aWNlPFQgZXh0ZW5kcyBUcmFuc2FjdGlvbiwgUyBleHRlbmRzIFN0YXRlPiB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRyYW5zYWN0aW9uIGlzIGVuYWJsZWQgZm9yIHRoaXMgc2VydmljZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVuYWJsZWQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBmaXJlZCB3aGVuIHRyYW5zYWN0aW9uIHN0YXRlIGhhcyBjaGFuZ2VkIC0gYWRkIHRyYW5zYWN0aW9uLCBjb21taXQgYWxsIHRyYW5zYWN0aW9ucywgdW5kbyBhbmQgcmVkby5cbiAgICAgKi9cbiAgICBvblN0YXRlVXBkYXRlPzogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgaWYgdGhlcmUgYXJlIGFueSB0cmFuc2FjdGlvbnMgaW4gdGhlIFVuZG8gc3RhY2tcbiAgICAgKi9cbiAgICBjYW5VbmRvOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgaWYgdGhlcmUgYXJlIGFueSB0cmFuc2FjdGlvbnMgaW4gdGhlIFJlZG8gc3RhY2tcbiAgICAgKi9cbiAgICBjYW5SZWRvOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBwcm92aWRlZCAgdHJhbnNhY3Rpb24gd2l0aCByZWNvcmRSZWYgaWYgYW55XG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uIFRyYW5zYWN0aW9uIHRvIGJlIGFkZGVkXG4gICAgICogQHBhcmFtIHJlY29yZFJlZiBSZWZlcmVuY2UgdG8gdGhlIHZhbHVlIG9mIHRoZSByZWNvcmQgaW4gdGhlIGRhdGEgc291cmNlIHJlbGF0ZWQgdG8gdGhlIGNoYW5nZWQgaXRlbVxuICAgICAqL1xuICAgIGFkZCh0cmFuc2FjdGlvbjogVCwgcmVjb3JkUmVmPzogYW55KTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIHJlY29yZGVkIHRyYW5zYWN0aW9ucyBpbiBjaHJvbm9sb2dpY2FsIG9yZGVyLlxuICAgICAqIEBwYXJhbSBpZCBPcHRpb25hbCByZWNvcmQgaWQgdG8gZ2V0IHRyYW5zYWN0aW9ucyBmb3JcbiAgICAgKiBAcmV0dXJucyBBbGwgdHJhbnNhY3Rpb24gaW4gdGhlIHNlcnZpY2Ugb3IgZm9yIHRoZSBzcGVjaWZpZWQgcmVjb3JkXG4gICAgICovXG4gICAgZ2V0VHJhbnNhY3Rpb25Mb2coaWQ/OiBhbnkpOiBUcmFuc2FjdGlvbltdO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBsYXN0IHRyYW5zYWN0aW9uIGlmIGFueVxuICAgICAqL1xuICAgIHVuZG8oKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIGxhc3QgdW5kb25lIHRyYW5zYWN0aW9uIGlmIGFueVxuICAgICAqL1xuICAgIHJlZG8oKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWdncmVnYXRlZCBjaGFuZ2VzIGZyb20gYWxsIHRyYW5zYWN0aW9uc1xuICAgICAqIEBwYXJhbSBtZXJnZUNoYW5nZXMgSWYgc2V0IHRvIHRydWUgd2lsbCBtZXJnZSBlYWNoIHN0YXRlJ3MgdmFsdWUgb3ZlciByZWxhdGUgcmVjb3JkUmVmXG4gICAgICogYW5kIHdpbGwgcmVjb3JkIHJlc3VsdGluZyB2YWx1ZSBpbiB0aGUgcmVsYXRlZCB0cmFuc2FjdGlvblxuICAgICAqIEByZXR1cm5zIENvbGxlY3Rpb24gb2YgYWdncmVnYXRlZCB0cmFuc2FjdGlvbnMgZm9yIGVhY2ggY2hhbmdlZCByZWNvcmRcbiAgICAgKi9cbiAgICBnZXRBZ2dyZWdhdGVkQ2hhbmdlcyhtZXJnZUNoYW5nZXM6IGJvb2xlYW4pOiBUW107XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdGF0ZSBvZiB0aGUgcmVjb3JkIHdpdGggcHJvdmlkZWQgaWRcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSByZWNvcmRcbiAgICAgKiBAcmV0dXJucyBTdGF0ZSBvZiB0aGUgcmVjb3JkIGlmIGFueVxuICAgICAqL1xuICAgIGdldFN0YXRlKGlkOiBhbnkpOiBTO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB2YWx1ZSBvZiB0aGUgcmVxdWlyZWQgaWQgaW5jbHVkaW5nIGFsbCB1bmNvbW1pdHRlZCBjaGFuZ2VzXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgcmVjb3JkIHRvIHJldHVybiB2YWx1ZSBmb3JcbiAgICAgKiBAcGFyYW0gbWVyZ2VDaGFuZ2VzIElmIHNldCB0byB0cnVlIHdpbGwgbWVyZ2Ugc3RhdGUncyB2YWx1ZSBvdmVyIHJlbGF0ZSByZWNvcmRSZWZcbiAgICAgKiBhbmQgd2lsbCByZXR1cm4gbWVyZ2VkIHZhbHVlXG4gICAgICogQHJldHVybnMgVmFsdWUgd2l0aCBjaGFuZ2VzIG9yICoqbnVsbCoqXG4gICAgICovXG4gICAgZ2V0QWdncmVnYXRlZFZhbHVlKGlkOiBhbnksIG1lcmdlQ2hhbmdlczogYm9vbGVhbik6IGFueTtcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYWxsIHRyYW5zYWN0aW9ucyBvdmVyIHRoZSBwcm92aWRlZCBkYXRhXG4gICAgICogQHBhcmFtIGRhdGEgRGF0YSBzb3VyY2UgdG8gdXBkYXRlXG4gICAgICovXG4gICAgY29tbWl0KGRhdGE6IGFueVtdKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgdHJhbnNhY3Rpb25zXG4gICAgICovXG4gICAgY2xlYXIoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBwZW5kaW5nIHRyYW5zYWN0aW9ucy4gQWxsIHRyYW5zYWN0aW9ucyBwYXNzZWQgYWZ0ZXIgY2FsbCB0byBzdGFydFBlbmRpbmdcbiAgICAgKiB3aWxsIG5vdCBiZSBhZGRlZCB0byB0cmFuc2FjdGlvbiBsb2dcbiAgICAgKi9cbiAgICBzdGFydFBlbmRpbmcoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgcGVuZGluZyB0cmFuc2FjdGlvbnMgYW5kIGFnZ3JlZ2F0ZWQgcGVuZGluZyBzdGF0ZS4gSWYgY29tbWl0IGlzIHNldCB0byB0cnVlXG4gICAgICogY29tbWl0cyBwZW5kaW5nIHN0YXRlcyBhcyBzaW5nbGUgdHJhbnNhY3Rpb25cbiAgICAgKiBAcGFyYW0gY29tbWl0IFNob3VsZCBjb21taXQgdGhlIHBlbmRpbmcgc3RhdGVzXG4gICAgICovXG4gICAgZW5kUGVuZGluZyhjb21taXQ6IGJvb2xlYW4pOiB2b2lkO1xufVxuIl19