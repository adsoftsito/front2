/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { cloneArray } from '../core/utils';
import { SortingDirection } from './sorting-expression.interface';
/**
 * @record
 */
export function ISortingStrategy() { }
function ISortingStrategy_tsickle_Closure_declarations() {
    /** @type {?} */
    ISortingStrategy.prototype.sort;
    /** @type {?} */
    ISortingStrategy.prototype.groupBy;
    /** @type {?} */
    ISortingStrategy.prototype.compareValues;
}
/**
 * @record
 */
export function IGroupByResult() { }
function IGroupByResult_tsickle_Closure_declarations() {
    /** @type {?} */
    IGroupByResult.prototype.data;
    /** @type {?} */
    IGroupByResult.prototype.metadata;
}
var SortingStrategy = /** @class */ (function () {
    function SortingStrategy() {
    }
    /**
     * @param {?} data
     * @param {?} expressions
     * @return {?}
     */
    SortingStrategy.prototype.sort = /**
     * @param {?} data
     * @param {?} expressions
     * @return {?}
     */
    function (data, expressions) {
        return this.sortDataRecursive(data, expressions);
    };
    /**
     * @param {?} data
     * @param {?} expressions
     * @return {?}
     */
    SortingStrategy.prototype.groupBy = /**
     * @param {?} data
     * @param {?} expressions
     * @return {?}
     */
    function (data, expressions) {
        var /** @type {?} */ metadata = [];
        var /** @type {?} */ grouping = this.groupDataRecursive(data, expressions, 0, null, metadata);
        return {
            data: grouping,
            metadata: metadata
        };
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    SortingStrategy.prototype.compareValues = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        var /** @type {?} */ an = (a === null || a === undefined);
        var /** @type {?} */ bn = (b === null || b === undefined);
        if (an) {
            if (bn) {
                return 0;
            }
            return -1;
        }
        else if (bn) {
            return 1;
        }
        return a > b ? 1 : a < b ? -1 : 0;
    };
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @param {?} key
     * @param {?} reverse
     * @param {?} ignoreCase
     * @param {?} strategy
     * @return {?}
     */
    SortingStrategy.prototype.compareObjects = /**
     * @param {?} obj1
     * @param {?} obj2
     * @param {?} key
     * @param {?} reverse
     * @param {?} ignoreCase
     * @param {?} strategy
     * @return {?}
     */
    function (obj1, obj2, key, reverse, ignoreCase, strategy) {
        var /** @type {?} */ a = this.getFieldValue(obj1, key);
        var /** @type {?} */ b = this.getFieldValue(obj2, key);
        if (ignoreCase) {
            a = a && a.toLowerCase ? a.toLowerCase() : a;
            b = b && b.toLowerCase ? b.toLowerCase() : b;
        }
        if (strategy) {
            return reverse * strategy.compareValues(a, b);
        }
        else {
            return reverse * this.compareValues(a, b);
        }
    };
    /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    SortingStrategy.prototype.getFieldValue = /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    function (obj, key) {
        return obj[key];
    };
    /**
     * @template T
     * @param {?} data
     * @param {?=} compareFn
     * @return {?}
     */
    SortingStrategy.prototype.arraySort = /**
     * @template T
     * @param {?} data
     * @param {?=} compareFn
     * @return {?}
     */
    function (data, compareFn) {
        return data.sort(compareFn);
    };
    /**
     * @template T
     * @param {?} data
     * @param {?} index
     * @param {?} expression
     * @return {?}
     */
    SortingStrategy.prototype.groupedRecordsByExpression = /**
     * @template T
     * @param {?} data
     * @param {?} index
     * @param {?} expression
     * @return {?}
     */
    function (data, index, expression) {
        var /** @type {?} */ i;
        var /** @type {?} */ groupval;
        var /** @type {?} */ res = [];
        var /** @type {?} */ key = expression.fieldName;
        var /** @type {?} */ len = data.length;
        res.push(data[index]);
        groupval = this.getFieldValue(data[index], key);
        index++;
        for (i = index; i < len; i++) {
            if (this.compareValues(this.getFieldValue(data[i], key), groupval) === 0) {
                res.push(data[i]);
            }
            else {
                break;
            }
        }
        return res;
    };
    /**
     * @template T
     * @param {?} data
     * @param {?} expression
     * @return {?}
     */
    SortingStrategy.prototype.sortByFieldExpression = /**
     * @template T
     * @param {?} data
     * @param {?} expression
     * @return {?}
     */
    function (data, expression) {
        var _this = this;
        var /** @type {?} */ key = expression.fieldName;
        var /** @type {?} */ firstRow = data[0];
        var /** @type {?} */ firstRowValue = firstRow ? this.getFieldValue(firstRow, key) : undefined;
        var /** @type {?} */ ignoreCase = expression.ignoreCase ?
            firstRow && (typeof firstRowValue === 'string' ||
                firstRowValue === null ||
                firstRowValue === undefined) :
            false;
        var /** @type {?} */ reverse = (expression.dir === SortingDirection.Desc ? -1 : 1);
        var /** @type {?} */ cmpFunc = function (obj1, obj2) {
            return _this.compareObjects(obj1, obj2, key, reverse, ignoreCase, expression.strategy);
        };
        return this.arraySort(data, cmpFunc);
    };
    /**
     * @template T
     * @param {?} data
     * @param {?} expressions
     * @param {?=} expressionIndex
     * @return {?}
     */
    SortingStrategy.prototype.sortDataRecursive = /**
     * @template T
     * @param {?} data
     * @param {?} expressions
     * @param {?=} expressionIndex
     * @return {?}
     */
    function (data, expressions, expressionIndex) {
        if (expressionIndex === void 0) { expressionIndex = 0; }
        var /** @type {?} */ i;
        var /** @type {?} */ j;
        var /** @type {?} */ expr;
        var /** @type {?} */ gbData;
        var /** @type {?} */ gbDataLen;
        var /** @type {?} */ exprsLen = expressions.length;
        var /** @type {?} */ dataLen = data.length;
        expressionIndex = expressionIndex || 0;
        if (expressionIndex >= exprsLen || dataLen <= 1) {
            return data;
        }
        expr = expressions[expressionIndex];
        data = this.sortByFieldExpression(data, expr);
        if (expressionIndex === exprsLen - 1) {
            return data;
        }
        // in case of multiple sorting
        for (i = 0; i < dataLen; i++) {
            gbData = this.groupedRecordsByExpression(data, i, expr);
            gbDataLen = gbData.length;
            if (gbDataLen > 1) {
                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);
            }
            for (j = 0; j < gbDataLen; j++) {
                data[i + j] = gbData[j];
            }
            i += gbDataLen - 1;
        }
        return data;
    };
    /**
     * @template T
     * @param {?} data
     * @param {?} expressions
     * @param {?} level
     * @param {?} parent
     * @param {?} metadata
     * @return {?}
     */
    SortingStrategy.prototype.groupDataRecursive = /**
     * @template T
     * @param {?} data
     * @param {?} expressions
     * @param {?} level
     * @param {?} parent
     * @param {?} metadata
     * @return {?}
     */
    function (data, expressions, level, parent, metadata) {
        var /** @type {?} */ i = 0;
        var /** @type {?} */ result = [];
        while (i < data.length) {
            var /** @type {?} */ group = this.groupedRecordsByExpression(data, i, expressions[level]);
            var /** @type {?} */ groupRow = {
                expression: expressions[level],
                level: level,
                records: cloneArray(group),
                value: group[0][expressions[level].fieldName],
                groupParent: parent
            };
            if (level < expressions.length - 1) {
                result = result.concat(this.groupDataRecursive(group, expressions, level + 1, groupRow, metadata));
            }
            else {
                try {
                    for (var group_1 = tslib_1.__values(group), group_1_1 = group_1.next(); !group_1_1.done; group_1_1 = group_1.next()) {
                        var groupItem = group_1_1.value;
                        metadata.push(groupRow);
                        result.push(groupItem);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (group_1_1 && !group_1_1.done && (_a = group_1.return)) _a.call(group_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            i += group.length;
        }
        return result;
        var e_1, _a;
    };
    return SortingStrategy;
}());
export { SortingStrategy };
var TreeGridSortingStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(TreeGridSortingStrategy, _super);
    function TreeGridSortingStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    TreeGridSortingStrategy.prototype.getFieldValue = /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    function (obj, key) {
        return obj['data'][key];
    };
    return TreeGridSortingStrategy;
}(SortingStrategy));
export { TreeGridSortingStrategy };

//# sourceMappingURL=data:application/json;base64,