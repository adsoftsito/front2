/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Component, ElementRef, HostBinding, Input, NgModule, TemplateRef, ViewChild } from '@angular/core';
import { IgxIconModule } from '../icon/index';
let /** @type {?} */ NEXT_ID = 0;
/** @enum {string} */
const Size = {
    SMALL: 'small',
    MEDIUM: 'medium',
    LARGE: 'large',
};
export { Size };
/**
 * **Ignite UI for Angular Avatar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)
 *
 * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an
 * image, someone's initials or a material icon from the google material icon set.
 *
 * Example:
 * ```html
 * <igx-avatar initials="MS" roundShape="true" size="large">
 * </igx-avatar>
 * ```
 */
export class IgxAvatarComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        /**
         * Returns the `aria-label` of the avatar.
         *
         * ```typescript
         * let ariaLabel = this.avatar.ariaLabel;
         * ```
         *
         */
        this.ariaLabel = 'avatar';
        /**
         * Returns the `role` attribute of the avatar.
         *
         * ```typescript
         * let avatarRole = this.avatar.role;
         * ```
         *
         * \@memberof IgxAvatarComponent
         */
        this.role = 'img';
        /**
         * Returns the class of the avatar.
         *
         * ```typescript
         * let avatarCLass =  this.avatar.cssClass;
         * ```
         *
         * \@memberof IgxAvatarComponent
         */
        this.cssClass = 'igx-avatar';
        /**
         * @hidden
         */
        this._size = 'small';
        /**
         * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `"igx-avatar-0"`.
         *
         * ```html
         * <igx-avatar id="my-first-avatar"></igx-avatar>
         * ```
         *
         * \@memberof IgxAvatarComponent
         */
        this.id = `igx-avatar-${NEXT_ID++}`;
        /**
         * Sets a round shape to the avatar if `roundShape` is `"true"`.
         * By default the shape of the avatar is a square.
         *
         * ```html
         * <igx-avatar roundShape = "true" ></igx-avatar>
         * ```
         *
         * \@memberof IgxAvatarComponent
         */
        this.roundShape = false;
    }
    /**
     * Returns the `size` of the avatar.
     *
     * ```typescript
     * let avatarSize =  this.avatar.size;
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @return {?}
     */
    get size() {
        return this._size;
    }
    /**
     * Sets the `size`  of the avatar.
     * By default the `size` is `"small"`. It can be set to `"medium"` or `"large"`.
     *
     * ```
     * <igx-avatar size="large"></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @param {?} value
     * @return {?}
     */
    set size(value) {
        switch (value) {
            case 'small':
            case 'medium':
            case 'large':
                this._size = value;
                break;
            default:
                this._size = 'small';
        }
    }
    /**
     * Returns the template of the avatar.
     *
     * ```typescript
     * let template = this.avatar.template;
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @return {?}
     */
    get template() {
        if (this.src) {
            return this.imageTemplate;
        }
        if (this.initials) {
            return this.initialsTemplate;
        }
        return this.iconTemplate;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        this.roleDescription = this.getRole();
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterViewInit() {
        this.elementRef.nativeElement.classList.add(`igx-avatar--${this._size}`);
    }
    /**
     * @hidden
     * @return {?}
     */
    getRole() {
        if (this.initials) {
            return 'initials type avatar';
        }
        else if (this.src) {
            return 'image type avatar';
        }
        else {
            return 'icon type avatar';
        }
    }
    /**
     * Returns the url of the `image`.
     *
     * ```typescript
     * let imageSourceUrl = this.avatar.getSrcUrl();
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @return {?}
     */
    getSrcUrl() {
        return `url(${this.src})`;
    }
}
IgxAvatarComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-avatar',
                template: `<ng-template #imageTemplate>
    <div #image [style.backgroundImage]="getSrcUrl()" class="igx-avatar__image" [style.backgroundColor]="bgColor" [attr.aria-roledescription]="roleDescription"
    ></div>
</ng-template>

<ng-template #initialsTemplate>
    <div class="igx-avatar__initials" [style.backgroundColor]="bgColor" [style.color]="color" [attr.aria-roledescription]="roleDescription">
        <span>{{initials.substring(0, 2)}}</span>
    </div>
</ng-template>

<ng-template #iconTemplate>
    <span class="igx-avatar__icon" [style.backgroundColor]="bgColor" [style.color]="color" [attr.aria-roledescription]="roleDescription">
        <igx-icon>{{icon}}</igx-icon>
    </span>
</ng-template>

<ng-container *ngTemplateOutlet="template"></ng-container>
<ng-content></ng-content>
`
            },] },
];
/** @nocollapse */
IgxAvatarComponent.ctorParameters = () => [
    { type: ElementRef, },
];
IgxAvatarComponent.propDecorators = {
    "image": [{ type: ViewChild, args: ['image',] },],
    "imageTemplate": [{ type: ViewChild, args: ['imageTemplate', { read: TemplateRef },] },],
    "initialsTemplate": [{ type: ViewChild, args: ['initialsTemplate', { read: TemplateRef },] },],
    "iconTemplate": [{ type: ViewChild, args: ['iconTemplate', { read: TemplateRef },] },],
    "ariaLabel": [{ type: HostBinding, args: ['attr.aria-label',] },],
    "role": [{ type: HostBinding, args: ['attr.role',] },],
    "cssClass": [{ type: HostBinding, args: ['class.igx-avatar',] },],
    "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
    "roundShape": [{ type: HostBinding, args: ['class.igx-avatar--rounded',] }, { type: Input },],
    "color": [{ type: Input },],
    "bgColor": [{ type: Input },],
    "initials": [{ type: Input },],
    "icon": [{ type: Input },],
    "src": [{ type: Input },],
    "size": [{ type: Input },],
};
function IgxAvatarComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxAvatarComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxAvatarComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxAvatarComponent.propDecorators;
    /**
     * This is a reference to the avatar `image` element in the DOM.
     *
     * ```typescript
     *  let image =  this.avatar.image;
     * ```
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.image;
    /**
     * @hidden
     * @type {?}
     */
    IgxAvatarComponent.prototype.imageTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxAvatarComponent.prototype.initialsTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxAvatarComponent.prototype.iconTemplate;
    /**
     * Returns the `aria-label` of the avatar.
     *
     * ```typescript
     * let ariaLabel = this.avatar.ariaLabel;
     * ```
     *
     * @type {?}
     */
    IgxAvatarComponent.prototype.ariaLabel;
    /**
     * Returns the `role` attribute of the avatar.
     *
     * ```typescript
     * let avatarRole = this.avatar.role;
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.role;
    /**
     * Returns the class of the avatar.
     *
     * ```typescript
     * let avatarCLass =  this.avatar.cssClass;
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.cssClass;
    /**
     * Returns the type of the avatar.
     * The avatar can be: `"initials type avatar"`, `"icon type avatar"` or `"image type avatar"`.
     *
     * ```typescript
     * let avatarDescription = this.avatar.roleDescription;
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.roleDescription;
    /**
     * @hidden
     * @type {?}
     */
    IgxAvatarComponent.prototype._size;
    /**
     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `"igx-avatar-0"`.
     *
     * ```html
     * <igx-avatar id="my-first-avatar"></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.id;
    /**
     * Sets a round shape to the avatar if `roundShape` is `"true"`.
     * By default the shape of the avatar is a square.
     *
     * ```html
     * <igx-avatar roundShape = "true" ></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.roundShape;
    /**
     * Sets the avatar's `initials`/`icon` color.
     *
     * ```html
     * <igx-avatar color="blue"></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.color;
    /**
     * Sets the background color of the avatar.
     *
     * ```html
     * <igx-avatar bgColor="yellow"></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.bgColor;
    /**
     * Sets `initials` to the avatar.
     *
     * ```html
     * <igx-avatar initials="MN"></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.initials;
    /**
     * Sets an `icon` to the avatar. All icons from the material icon set are supported.
     *
     * ```html
     * <igx-avatar icon="phone"></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.icon;
    /**
     * Sets the `image` source of the avatar.
     *
     * ```html
     * <igx-avatar src="images/picture.jpg"></igx-avatar>
     * ```
     *
     * \@memberof IgxAvatarComponent
     * @type {?}
     */
    IgxAvatarComponent.prototype.src;
    /** @type {?} */
    IgxAvatarComponent.prototype.elementRef;
}
/**
 * The `IgxAvatarModule` provides the {\@link IgxAvatarComponent} inside your application.
 */
export class IgxAvatarModule {
}
IgxAvatarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxAvatarComponent],
                exports: [IgxAvatarComponent],
                imports: [CommonModule, IgxIconModule]
            },] },
];
function IgxAvatarModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxAvatarModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxAvatarModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,