/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';
import { CommonModule } from '@angular/common';
import { ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Input, NgModule, Output, QueryList, TemplateRef, ViewChild, ViewChildren, Optional, Self } from '@angular/core';
import { IgxComboItemDirective, IgxComboEmptyDirective, IgxComboHeaderItemDirective, IgxComboHeaderDirective, IgxComboFooterDirective, IgxComboAddItemDirective } from './combo.directives';
import { FormsModule, ReactiveFormsModule, NgControl } from '@angular/forms';
import { IgxCheckboxComponent, IgxCheckboxModule } from '../checkbox/checkbox.component';
import { IgxSelectionAPIService } from '../core/selection';
import { cloneArray } from '../core/utils';
import { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';
import { FilteringLogic } from '../data-operations/filtering-expression.interface';
import { SortingDirection } from '../data-operations/sorting-expression.interface';
import { IgxForOfModule } from '../directives/for-of/for_of.directive';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxToggleModule } from '../directives/toggle/toggle.directive';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxDropDownModule } from '../drop-down/drop-down.component';
import { IgxIconModule } from '../icon/index';
import { IgxInputGroupModule } from '../input-group/input-group.component';
import { IgxComboItemComponent } from './combo-item.component';
import { IgxComboDropDownComponent } from './combo-dropdown.component';
import { IgxComboFilterConditionPipe, IgxComboFilteringPipe, IgxComboGroupingPipe, IgxComboSortingPipe } from './combo.pipes';
import { AbsoluteScrollStrategy } from '../services';
import { DeprecateProperty } from '../core/deprecateDecorators';
/**
 * Custom strategy to provide the combo with callback on initial positioning
 */
var /**
 * Custom strategy to provide the combo with callback on initial positioning
 */
ComboConnectedPositionStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(ComboConnectedPositionStrategy, _super);
    function ComboConnectedPositionStrategy(callback) {
        var _this = _super.call(this) || this;
        _this._callback = callback;
        return _this;
    }
    /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    ComboConnectedPositionStrategy.prototype.position = /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    function (contentElement, size, document, initialCall) {
        if (initialCall) {
            this._callback();
        }
        _super.prototype.position.call(this, contentElement, size);
    };
    return ComboConnectedPositionStrategy;
}(ConnectedPositioningStrategy));
function ComboConnectedPositionStrategy_tsickle_Closure_declarations() {
    /** @type {?} */
    ComboConnectedPositionStrategy.prototype._callback;
}
/** @enum {string} */
var DataTypes = {
    EMPTY: 'empty',
    PRIMITIVE: 'primitive',
    COMPLEX: 'complex',
    PRIMARYKEY: 'valueKey',
};
/** @enum {number} */
var IgxComboState = {
    /**
         * Combo with initial state.
         */
    INITIAL: 0,
    /**
         * Combo with valid state.
         */
    VALID: 1,
    /**
         * Combo with invalid state.
         */
    INVALID: 2,
};
export { IgxComboState };
IgxComboState[IgxComboState.INITIAL] = "INITIAL";
IgxComboState[IgxComboState.VALID] = "VALID";
IgxComboState[IgxComboState.INVALID] = "INVALID";
/**
 * @record
 */
export function IComboSelectionChangeEventArgs() { }
function IComboSelectionChangeEventArgs_tsickle_Closure_declarations() {
    /** @type {?} */
    IComboSelectionChangeEventArgs.prototype.oldSelection;
    /** @type {?} */
    IComboSelectionChangeEventArgs.prototype.newSelection;
    /** @type {?|undefined} */
    IComboSelectionChangeEventArgs.prototype.event;
}
/**
 * @record
 */
export function IComboItemAdditionEvent() { }
function IComboItemAdditionEvent_tsickle_Closure_declarations() {
    /** @type {?} */
    IComboItemAdditionEvent.prototype.oldCollection;
    /** @type {?} */
    IComboItemAdditionEvent.prototype.addedItem;
    /** @type {?} */
    IComboItemAdditionEvent.prototype.newCollection;
}
var /** @type {?} */ NEXT_ID = 0;
var /** @type {?} */ noop = function () { };
var Éµ0 = noop;
var IgxComboComponent = /** @class */ (function () {
    function IgxComboComponent(elementRef, cdr, selection, ngControl) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.selection = selection;
        this.ngControl = ngControl;
        /**
         * @hidden
         */
        this.customValueFlag = true;
        /**
         * @hidden
         */
        this.defaultFallbackGroup = 'Other';
        /**
         * @hidden
         */
        this.stringFilters = IgxStringFilteringOperand;
        /**
         * @hidden
         */
        this.boolenFilters = IgxBooleanFilteringOperand;
        /**
         * @hidden
         */
        this._filteringLogic = FilteringLogic.Or;
        /**
         * @hidden
         */
        this._filteringExpressions = [];
        /**
         * @hidden
         */
        this._sortingExpressions = [];
        /**
         * @hidden
         */
        this._groupKey = '';
        /**
         * @hidden
         */
        this._valueKey = '';
        /**
         * @hidden
         */
        this._displayKey = '';
        this._dataType = '';
        this._data = [];
        this._filteredData = [];
        this._dropdownContainer = null;
        this._searchInput = null;
        this._comboInput = null;
        this._valid = IgxComboState.INITIAL;
        this._width = '100%';
        this._onChangeCallback = noop;
        this.overlaySettings = {
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnOutsideClick: true
        };
        this._value = '';
        this._searchValue = '';
        /**
         * Emitted when item selection is changing, before the selection completes
         *
         * ```html
         * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>
         * ```
         */
        this.onSelectionChange = new EventEmitter();
        /**
         * Emitted before the dropdown is opened
         *
         * ```html
         * <igx-combo onOpening='handleOpening($event)'></igx-combo>
         * ```
         */
        this.onOpening = new EventEmitter();
        /**
         * Emitted after the dropdown is opened
         *
         * ```html
         * <igx-combo (onOpened)='handleOpened()'></igx-combo>
         * ```
         */
        this.onOpened = new EventEmitter();
        /**
         * Emitted before the dropdown is closed
         *
         * ```html
         * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>
         * ```
         */
        this.onClosing = new EventEmitter();
        /**
         * Emitted after the dropdown is closed
         *
         * ```html
         * <igx-combo (onClosed)='handleClosed()'></igx-combo>
         * ```
         */
        this.onClosed = new EventEmitter();
        /**
         * Emitted when an item is being added to the data collection
         *
         * ```html
         * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>
         * ```
         */
        this.onAddition = new EventEmitter();
        /**
         * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)
         *
         * ```html
         * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>
         * ```
         */
        this.onSearchInput = new EventEmitter();
        /**
         * Emitted when new chunk of data is loaded from the virtualization
         *
         * ```html
         * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>
         * ```
         */
        this.onDataPreLoad = new EventEmitter();
        /**
         * Gets/gets combo id.
         *
         * ```typescript
         * // get
         * let id = this.combo.id;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [id]='combo1'></igx-combo>
         * ```
         */
        this.id = "igx-combo-" + NEXT_ID++;
        /**
         * Controls whether custom values can be added to the collection
         *
         * ```typescript
         * // get
         * let comboAllowsCustomValues = this.combo.allowCustomValues;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [allowCustomValues]='true'></igx-combo>
         * ```
         */
        this.allowCustomValues = false;
        /**
         * Configures the drop down list height
         *
         * ```typescript
         * // get
         * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [itemsMaxHeight]='320'></igx-combo>
         * ```
         */
        this.itemsMaxHeight = 480;
        /**
         * Configures the drop down list item height
         *
         * ```typescript
         * // get
         * let myComboItemHeight = this.combo.itemHeight;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [itemHeight]='32'></igx-combo>
         * ```
         */
        this.itemHeight = 48;
        /**
         * @hidden
         */
        this.filteringLogic = FilteringLogic.Or;
        /**
         * Defines the placeholder value for the combo value field
         *
         * ```typescript
         * // get
         * let myComboPlaceholder = this.combo.placeholder;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>
         * ```
         */
        this.placeholder = '';
        /**
         * Defines the placeholder value for the combo dropdown search field
         *
         * ```typescript
         * // get
         * let myComboSearchPlaceholder = this.combo.searchPlaceholder;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>
         * ```
         */
        this.searchPlaceholder = 'Enter a Search Term';
        /**
         * An \@Input property that enabled/disables filtering in the list. The default is `true`.
         * ```html
         * <igx-combo [filterable]="'false'">
         * ```
         */
        this.filterable = true;
        /**
         * An \@Input property that enabled/disables combo. The default is `false`.
         * ```html
         * <igx-combo [disabled]="'true'">
         * ```
         */
        this.disabled = false;
        /**
         * An \@Input property that sets how the combo will be styled.
         * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.
         * ```html
         * <igx-combo [type]="'line'">
         * ```
         */
        this.type = 'box';
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    Object.defineProperty(IgxComboComponent.prototype, "searchInput", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._searchInput;
        },
        set: /**
         * @hidden
         * @param {?} content
         * @return {?}
         */
        function (content) {
            this._searchInput = content;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "comboInput", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._comboInput;
        },
        set: /**
         * @hidden
         * @param {?} content
         * @return {?}
         */
        function (content) {
            this._comboInput = content;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "itemTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._itemTemplate;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._itemTemplate = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "headerTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._headerTemplate;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._headerTemplate = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "footerTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._footerTemplate;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._footerTemplate = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "headerItemTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._headerItemTemplate;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._headerItemTemplate = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "addItemTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._addItemTemplate;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._addItemTemplate = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "emptyTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._emptyTemplate;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._emptyTemplate = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "oldEmptyTemplate", {
        /**
         * @hidden
         */
        set: /**
         * @hidden
         * @param {?} template
         * @return {?}
         */
        function (template) {
            if (template) {
                this.emptyTemplate = template;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "oldHeaderTemplate", {
        /**
         * @hidden
         */
        set: /**
         * @hidden
         * @param {?} template
         * @return {?}
         */
        function (template) {
            if (template) {
                this.headerTemplate = template;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "oldFooterTemplate", {
        /**
         * @hidden
         */
        set: /**
         * @hidden
         * @param {?} template
         * @return {?}
         */
        function (template) {
            if (template) {
                this.footerTemplate = template;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "oldItemTemplate", {
        /**
         * @hidden
         */
        set: /**
         * @hidden
         * @param {?} template
         * @return {?}
         */
        function (template) {
            if (template) {
                this.itemTemplate = template;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "oldAddItemTemplate", {
        /**
         * @hidden
         */
        set: /**
         * @hidden
         * @param {?} template
         * @return {?}
         */
        function (template) {
            if (template) {
                this.addItemTemplate = template;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "oldHeaderItemTemplate", {
        /**
         * @hidden
         */
        set: /**
         * @hidden
         * @param {?} template
         * @return {?}
         */
        function (template) {
            if (template) {
                this.headerItemTemplate = template;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "dropdownContainer", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._dropdownContainer;
        },
        set: /**
         * @hidden
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._dropdownContainer = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "children", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._children;
        },
        set: /**
         * @hidden
         * @param {?} list
         * @return {?}
         */
        function (list) {
            this._children = list;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "width", {
        get: /**
         * Sets the style width of the element
         *
         * ```typescript
         * // get
         * let myComboWidth = this.combo.width;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [width]='250px'></igx-combo>
         * ```
         * @return {?}
         */
        function () {
            return this._width;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._width = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "validClass", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._valid === IgxComboState.VALID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "invalidClass", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._valid === IgxComboState.INVALID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "data", {
        get: /**
         * Combo data source.
         *
         * ```html
         * <!--set-->
         * <igx-combo [data]='items'></igx-combo>
         * ```
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._data = (val) ? val : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "valueKey", {
        get: /**
         * Combo value data source propery.
         *
         * ```typescript
         * // get
         * let myComboValueKey = this.combo.valueKey;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [valueKey]='myKey'></igx-combo>
         * ```
         * @return {?}
         */
        function () {
            return this._valueKey;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._valueKey = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "displayKey", {
        /**
         * Combo text data source propery.
         *
         * ```typescript
         * // get
         * let myComboDisplayKey = this.combo.displayKey;
         *
         * // set
         * this.combo.displayKey = 'val';
         *
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [displayKey]='mydisplayKey'></igx-combo>
         * ```
         */
        get: /**
         * Combo text data source propery.
         *
         * ```typescript
         * // get
         * let myComboDisplayKey = this.combo.displayKey;
         *
         * // set
         * this.combo.displayKey = 'val';
         *
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [displayKey]='mydisplayKey'></igx-combo>
         * ```
         * @return {?}
         */
        function () {
            return this._displayKey ? this._displayKey : this._valueKey;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._displayKey = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "groupKey", {
        get: /**
         * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].
         *
         * ```typescript
         * // get
         * let currentGroupKey = this.combo.groupKey;
         * ```
         * @return {?}
         */
        function () {
            return this._groupKey;
        },
        set: /**
         * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].
         *
         * ```html
         * <!--set-->
         * <igx-combo [groupKey]='newGroupKey'></igx-combo>
         * ```
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.clearSorting(this._groupKey);
            this._groupKey = val;
            this.sort(this._groupKey);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxComboComponent.prototype.onBlur = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.dropdown.collapsed) {
            this._valid = IgxComboState.INITIAL;
            if (this.ngControl) {
                if (!this.ngControl.valid) {
                    this._valid = IgxComboState.INVALID;
                }
            }
            else if (this._hasValidators() && !this.elementRef.nativeElement.checkValidity()) {
                this._valid = IgxComboState.INVALID;
            }
        }
    };
    /**
     * @return {?}
     */
    IgxComboComponent.prototype._hasValidators = /**
     * @return {?}
     */
    function () {
        if (this.elementRef.nativeElement.hasAttribute('required')) {
            return true;
        }
        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);
    };
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    IgxComboComponent.prototype.onArrowDown = /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        evt.preventDefault();
        evt.stopPropagation();
        if (this.dropdown.collapsed) {
            this.toggle();
        }
    };
    /**
     * @hidden
     */
    // @HostListener('keydown.ArrowUp', ['$event'])
    // @HostListener('keydown.Alt.ArrowUp', ['$event'])
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    IgxComboComponent.prototype.onArrowUp = /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        evt.preventDefault();
        evt.stopPropagation();
        if (!this.dropdown.collapsed) {
            this.toggle();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    IgxComboComponent.prototype.onInputClick = /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        evt.stopPropagation();
        evt.preventDefault();
        this.toggle();
    };
    Object.defineProperty(IgxComboComponent.prototype, "virtualizationState", {
        /**
         * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`
         *
         * ```typescript
         * // get
         * let state = this.combo.virtualizationState;
         * ```
        */
        get: /**
         * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`
         *
         * ```typescript
         * // get
         * let state = this.combo.virtualizationState;
         * ```
         * @return {?}
         */
        function () {
            return this.dropdown.verticalScrollContainer.state;
        },
        /**
         * Sets the current state of the virtualized data.
         *
         * ```typescript
         * // set
         * this.combo.virtualizationState(state);
         * ```
         */
        set: /**
         * Sets the current state of the virtualized data.
         *
         * ```typescript
         * // set
         * this.combo.virtualizationState(state);
         * ```
         * @param {?} state
         * @return {?}
         */
        function (state) {
            this.dropdown.verticalScrollContainer.state = state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "totalItemCount", {
        /**
         * Gets total count of the virtual data items, when using remote service.
         *
         * ```typescript
         * // get
         * let count = this.combo.totalItemCount;
         * ```
        */
        get: /**
         * Gets total count of the virtual data items, when using remote service.
         *
         * ```typescript
         * // get
         * let count = this.combo.totalItemCount;
         * ```
         * @return {?}
         */
        function () {
            return this.dropdown.verticalScrollContainer.totalItemCount;
        },
        /**
         * Sets total count of the virtual data items, when using remote service.
         *
         * ```typescript
         * // set
         * this.combo.totalItemCount(remoteService.count);
         * ```
         */
        set: /**
         * Sets total count of the virtual data items, when using remote service.
         *
         * ```typescript
         * // set
         * this.combo.totalItemCount(remoteService.count);
         * ```
         * @param {?} count
         * @return {?}
         */
        function (count) {
            this.dropdown.verticalScrollContainer.totalItemCount = count;
            this.cdr.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "valid", {
        get: /**
         * Gets if control is valid, when used in a form
         *
         * ```typescript
         * // get
         * let valid = this.combo.valid;
         * ```
         * @return {?}
         */
        function () {
            return this._valid;
        },
        set: /**
         * Sets valid state of the combo
         *
         * ```typescript
         * // get
         * this.combo.valid(IgxComboState.INVALID);
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._valid = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "values", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            var _this = this;
            return this.valueKey !== undefined ? this.selectedItems().map(function (e) { return e[_this.valueKey]; }) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "filteringExpressions", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.filterable ? this._filteringExpressions : [];
        },
        set: /**
         * @hidden
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filteringExpressions = cloneArray(value);
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "sortingExpressions", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._sortingExpressions;
        },
        set: /**
         * @hidden
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._sortingExpressions = cloneArray(value);
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} field
     * @return {?}
     */
    IgxComboComponent.prototype.clearSorting = /**
     * @hidden
     * @param {?=} field
     * @return {?}
     */
    function (field) {
        if (field === undefined || field === null) {
            this.sortingExpressions = [];
            return;
        }
        var /** @type {?} */ currentState = cloneArray(this.sortingExpressions);
        var /** @type {?} */ index = currentState.findIndex(function (expr) { return expr.fieldName === field; });
        if (index > -1) {
            currentState.splice(index, 1);
            this.sortingExpressions = currentState;
        }
    };
    Object.defineProperty(IgxComboComponent.prototype, "value", {
        /**
         * Combo value
         *
         * ```typescript
         * // get
         * let comboValue = this.combo.value;
         * ```
         */
        get: /**
         * Combo value
         *
         * ```typescript
         * // get
         * let comboValue = this.combo.value;
         * ```
         * @return {?}
         */
        function () {
            return this._value;
        },
        /**
         * Combo value
         *
         * ```html
         * <!--set-->
         * <igx-combo [value]='newValue'></igx-combo>
         * ```
         */
        set: /**
         * Combo value
         *
         * ```html
         * <!--set-->
         * <igx-combo [value]='newValue'></igx-combo>
         * ```
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "searchValue", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._searchValue;
        },
        /**
         * @hidden
         */
        set: /**
         * @hidden
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._searchValue = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "filteredData", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.filterable ? this._filteredData : this.data;
        },
        set: /**
         * @hidden
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._filteredData = this.groupKey ? (val || []).filter(function (e) { return e.isHeader !== true; }) : val;
            this.checkMatch();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    IgxComboComponent.prototype.handleKeyUp = /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        if (evt.key === 'ArrowDown' || evt.key === 'Down') {
            this.dropdownContainer.nativeElement.focus();
            this.dropdown.onFocus();
            this.dropdown.focusedItem = this.dropdown.items[0];
        }
        else if (evt.key === 'Escape' || evt.key === 'Esc') {
            this.toggle();
        }
    };
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    IgxComboComponent.prototype.handleKeyDown = /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        if (evt.key === 'ArrowUp' || evt.key === 'Up') {
            this.onArrowUp(evt);
        }
    };
    /**
     * @return {?}
     */
    IgxComboComponent.prototype.checkMatch = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.customValueFlag = this.displayKey || this.displayKey === 0 ?
            !this.filteredData
                .some(function (e) { return (e[_this.displayKey]).toString().toLowerCase() === _this.searchValue.trim().toLowerCase(); }) &&
                this.allowCustomValues :
            !this.filteredData
                .some(function (e) { return e.toString().toLowerCase() === _this.searchValue.trim().toLowerCase(); }) && this.allowCustomValues;
    };
    /**
     * @hidden
     * @param {?=} event
     * @return {?}
     */
    IgxComboComponent.prototype.handleInputChange = /**
     * @hidden
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        if (event !== undefined) {
            this.dropdown.verticalScrollContainer.scrollTo(0);
            this.onSearchInput.emit(event);
        }
        if (this.filterable) {
            this.filter();
        }
        else {
            this.checkMatch();
        }
    };
    /**
     * @hidden
     * @param {?} fieldName
     * @param {?=} dir
     * @param {?=} ignoreCase
     * @return {?}
     */
    IgxComboComponent.prototype.sort = /**
     * @hidden
     * @param {?} fieldName
     * @param {?=} dir
     * @param {?=} ignoreCase
     * @return {?}
     */
    function (fieldName, dir, ignoreCase) {
        if (dir === void 0) { dir = SortingDirection.Asc; }
        if (ignoreCase === void 0) { ignoreCase = true; }
        if (!fieldName && fieldName !== 0) {
            return;
        }
        var /** @type {?} */ sortingState = cloneArray(this.sortingExpressions, true);
        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase);
        this.sortingExpressions = sortingState;
    };
    /**
     * @hidden
     * @param {?} val
     * @return {?}
     */
    IgxComboComponent.prototype.getValueByValueKey = /**
     * @hidden
     * @param {?} val
     * @return {?}
     */
    function (val) {
        var _this = this;
        if (!val && val !== 0) {
            return undefined;
        }
        return this.valueKey === 0 || this.valueKey ?
            this.data.filter(function (e) { return e[_this.valueKey] === val; })[0] :
            this.data.filter(function (e) { return e === val; });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} state
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @return {?}
     */
    IgxComboComponent.prototype.prepare_sorting_expression = /**
     * @hidden
     * @param {?} state
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @return {?}
     */
    function (state, fieldName, dir, ignoreCase) {
        if (dir === SortingDirection.None) {
            state.splice(state.findIndex(function (expr) { return expr.fieldName === fieldName; }), 1);
            return;
        }
        var /** @type {?} */ expression = state.find(function (expr) { return expr.fieldName === fieldName; });
        if (!expression) {
            state.push({ fieldName: fieldName, dir: dir, ignoreCase: ignoreCase });
        }
        else {
            Object.assign(expression, { fieldName: fieldName, dir: dir, ignoreCase: ignoreCase });
        }
    };
    Object.defineProperty(IgxComboComponent.prototype, "dataType", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            if (this.valueKey) {
                return DataTypes.COMPLEX;
            }
            return DataTypes.PRIMITIVE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "isRemote", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.totalItemCount > 0 &&
                this.valueKey &&
                this.dataType === DataTypes.COMPLEX;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} itemID
     * @return {?}
     */
    IgxComboComponent.prototype._stringifyItemID = /**
     * @param {?} itemID
     * @return {?}
     */
    function (itemID) {
        return this.isRemote && typeof itemID === 'object' ? JSON.stringify(itemID) : itemID;
    };
    /**
     * @param {?} itemID
     * @return {?}
     */
    IgxComboComponent.prototype._parseItemID = /**
     * @param {?} itemID
     * @return {?}
     */
    function (itemID) {
        return this.isRemote && typeof itemID === 'string' ? JSON.parse(itemID) : itemID;
    };
    /**
     * @param {?} newItem
     * @param {?=} select
     * @return {?}
     */
    IgxComboComponent.prototype.changeSelectedItem = /**
     * @param {?} newItem
     * @param {?=} select
     * @return {?}
     */
    function (newItem, select) {
        if (!newItem && newItem !== 0) {
            return;
        }
        var /** @type {?} */ newSelection = select ?
            this.selection.add_item(this.id, newItem) :
            this.selection.delete_item(this.id, newItem);
        this.triggerSelectionChange(newSelection);
    };
    /**
     * @hidden
     * @param {?} itemID
     * @param {?=} select
     * @return {?}
     */
    IgxComboComponent.prototype.setSelectedItem = /**
     * @hidden
     * @param {?} itemID
     * @param {?=} select
     * @return {?}
     */
    function (itemID, select) {
        if (select === void 0) { select = true; }
        if (itemID === undefined || itemID === null) {
            return;
        }
        var /** @type {?} */ newItem = this.dropdown.items.find(function (item) { return item.itemID === itemID; });
        if (newItem) {
            if (newItem.disabled || newItem.isHeader) {
                return;
            }
            if (!newItem.isSelected) {
                this.changeSelectedItem(itemID, true);
            }
            else {
                this.changeSelectedItem(itemID, false);
            }
        }
        else {
            var /** @type {?} */ target = typeof itemID === 'object' ? itemID : this.getValueByValueKey(itemID);
            if (target) {
                this.changeSelectedItem(target, select);
            }
        }
    };
    /**
     * @hidden
     * @param {?} item
     * @return {?}
     */
    IgxComboComponent.prototype.isItemSelected = /**
     * @hidden
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.selection.is_item_selected(this.id, this._stringifyItemID(item));
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} newSelectionAsSet
     * @return {?}
     */
    IgxComboComponent.prototype.triggerSelectionChange = /**
     * @hidden
     * @param {?} newSelectionAsSet
     * @return {?}
     */
    function (newSelectionAsSet) {
        var _this = this;
        var /** @type {?} */ oldSelection = this.dropdown.selectedItem;
        var /** @type {?} */ newSelection = newSelectionAsSet ? Array.from(newSelectionAsSet) : [];
        if (oldSelection !== newSelection) {
            var /** @type {?} */ args = { oldSelection: oldSelection, newSelection: newSelection };
            this.onSelectionChange.emit(args);
            newSelectionAsSet = this.selection.get_empty();
            for (var /** @type {?} */ i = 0; i < args.newSelection.length; i++) {
                newSelectionAsSet.add(args.newSelection[i]);
            }
            this.selection.set(this.id, newSelectionAsSet);
            this.value = this.dataType !== DataTypes.PRIMITIVE ?
                newSelection.map(function (id) { return _this._parseItemID(id)[_this.displayKey]; }).join(', ') :
                newSelection.join(', ');
            // this.isHeaderChecked();
            this._onChangeCallback(newSelection);
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxComboComponent.prototype.triggerCheck = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.cdr.detectChanges();
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxComboComponent.prototype.isAddButtonVisible = /**
     * @hidden
     * @return {?}
     */
    function () {
        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;
        return this.searchValue !== '' && this.customValueFlag;
    };
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    IgxComboComponent.prototype.handleSelectAll = /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        if (evt.checked) {
            this.selectAllItems();
        }
        else {
            this.deselectAllItems();
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxComboComponent.prototype.addItemToCollection = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (!this.searchValue) {
            return false;
        }
        var /** @type {?} */ newValue = this.searchValue.trim();
        var /** @type {?} */ addedItem = this.displayKey ? (_a = {},
            _a[this.valueKey] = newValue,
            _a[this.displayKey] = newValue,
            _a) : newValue;
        if (this.groupKey || this.groupKey === 0) {
            Object.assign(addedItem, (_b = {}, _b[this.groupKey] = this.defaultFallbackGroup, _b));
        }
        var /** @type {?} */ oldCollection = this.data;
        var /** @type {?} */ newCollection = tslib_1.__spread(this.data);
        newCollection.push(addedItem);
        var /** @type {?} */ args = {
            oldCollection: oldCollection, addedItem: addedItem, newCollection: newCollection
        };
        this.onAddition.emit(args);
        this.data.push(addedItem);
        // If you mutate the array, no pipe is invoked and the display isn't updated;
        // if you replace the array, the pipe executes and the display is updated.
        this.data = cloneArray(this.data);
        this.changeSelectedItem(addedItem, true);
        this.customValueFlag = false;
        if (this.searchInput) {
            this.searchInput.nativeElement.focus();
        }
        this.handleInputChange();
        var _a, _b;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} searchVal
     * @param {?} condition
     * @param {?} ignoreCase
     * @param {?=} fieldName
     * @return {?}
     */
    IgxComboComponent.prototype.prepare_filtering_expression = /**
     * @hidden
     * @param {?} searchVal
     * @param {?} condition
     * @param {?} ignoreCase
     * @param {?=} fieldName
     * @return {?}
     */
    function (searchVal, condition, ignoreCase, fieldName) {
        var /** @type {?} */ newArray = tslib_1.__spread(this.filteringExpressions);
        var /** @type {?} */ expression = newArray.find(function (expr) { return expr.fieldName === fieldName; });
        var /** @type {?} */ newExpression = { fieldName: fieldName, searchVal: searchVal, condition: condition, ignoreCase: ignoreCase };
        if (!expression) {
            newArray.push(newExpression);
        }
        else {
            Object.assign(expression, newExpression);
        }
        if (this.groupKey) {
            var /** @type {?} */ expression2 = newArray.find(function (expr) { return expr.fieldName === 'isHeader'; });
            var /** @type {?} */ headerExpression = {
                fieldName: 'isHeader', searchVale: '',
                condition: IgxBooleanFilteringOperand.instance().condition('true'), ignoreCase: true
            };
            if (!expression2) {
                newArray.push(headerExpression);
            }
            else {
                Object.assign(expression2, headerExpression);
            }
        }
        this.filteringExpressions = newArray;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxComboComponent.prototype.onStatusChanged = /**
     * @hidden
     * @return {?}
     */
    function () {
        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&
            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {
            this._valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxComboComponent.prototype.filter = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.prepare_filtering_expression(this.searchValue.trim(), IgxStringFilteringOperand.instance().condition('contains'), true, this.dataType === DataTypes.PRIMITIVE ? undefined : this.displayKey);
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxComboComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this._positionCallback = function () { return _this.dropdown.updateScrollPosition(); };
        this.overlaySettings.positionStrategy = new ComboConnectedPositionStrategy(this._positionCallback);
        this.overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;
        if (this.ngControl && this.ngControl.value) {
            this.triggerSelectionChange(this.ngControl.value);
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxComboComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.filteredData = tslib_1.__spread(this.data);
        if (this.ngControl) {
            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));
        }
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxComboComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this._statusChanges$) {
            this._statusChanges$.unsubscribe();
        }
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxComboComponent.prototype.dataLoading = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onDataPreLoad.emit(event);
    };
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxComboComponent.prototype.writeValue = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // selectItems can handle Array<any>, no valueKey is needed;
        this.selectItems(value, true);
        this.cdr.markForCheck();
    };
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxComboComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChangeCallback = fn;
    };
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxComboComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    IgxComboComponent.prototype.setDisabledState = /**
     * @hidden
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    Object.defineProperty(IgxComboComponent.prototype, "template", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            this._dataType = this.dataType;
            if (this.itemTemplate) {
                return this.itemTemplate;
            }
            if (this._dataType === DataTypes.COMPLEX) {
                return this.complexTemplate;
            }
            return this.primitiveTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "context", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return {
                $implicit: this
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxComboComponent.prototype.handleClearItems = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.deselectAllItems(true);
        event.stopPropagation();
    };
    /**
     * A method that opens/closes the combo.
     *
     * ```html
     * <button (click)="combo.toggle()>Toggle Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    IgxComboComponent.prototype.toggle = /**
     * A method that opens/closes the combo.
     *
     * ```html
     * <button (click)="combo.toggle()>Toggle Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    function () {
        this.dropdown.toggle(this.overlaySettings);
    };
    /**
     * A method that opens the combo.
     *
     * ```html
     * <button (click)="combo.open()>Open Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    IgxComboComponent.prototype.open = /**
     * A method that opens the combo.
     *
     * ```html
     * <button (click)="combo.open()>Open Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    function () {
        this.dropdown.open(this.overlaySettings);
    };
    /**
     * A method that closes the combo.
     *
     * ```html
     * <button (click)="combo.close()>Close Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    IgxComboComponent.prototype.close = /**
     * A method that closes the combo.
     *
     * ```html
     * <button (click)="combo.close()>Close Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    function () {
        this.dropdown.close();
    };
    Object.defineProperty(IgxComboComponent.prototype, "collapsed", {
        get: /**
         * Gets drop down state.
         *
         * ```typescript
         * // get
         * let state = this.combo.collapsed;
         * ```
         * @return {?}
         */
        function () {
            return this.dropdown.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get current selection state
     * @return {?} Array of selected items
     * ```typescript
     * // get
     * let selectedItems = this.combo.selectedItems();
     * ```
     */
    IgxComboComponent.prototype.selectedItems = /**
     * Get current selection state
     * @return {?} Array of selected items
     * ```typescript
     * // get
     * let selectedItems = this.combo.selectedItems();
     * ```
     */
    function () {
        var _this = this;
        var /** @type {?} */ items = this.dropdown.selectedItem;
        return this.isRemote ? items.map(function (item) { return _this._parseItemID(item); }) : items;
    };
    /**
     * Select defined items
     * @param {?} newItems new items to be selected
     * @param {?=} clearCurrentSelection if true clear previous selected items
     * ```typescript
     * // get
     * this.combo.selectItems(["New York", "New Jersey"]);
     * ```
     * @return {?}
     */
    IgxComboComponent.prototype.selectItems = /**
     * Select defined items
     * @param {?} newItems new items to be selected
     * @param {?=} clearCurrentSelection if true clear previous selected items
     * ```typescript
     * // get
     * this.combo.selectItems(["New York", "New Jersey"]);
     * ```
     * @return {?}
     */
    function (newItems, clearCurrentSelection) {
        if (newItems) {
            var /** @type {?} */ newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);
            this.triggerSelectionChange(newSelection);
        }
    };
    /**
     * Deselect defined items
     * @param {?} items items to deselected
     * ```typescript
     * // get
     * this.combo.deselectItems(["New York", "New Jersey"]);
     * ```
     * @return {?}
     */
    IgxComboComponent.prototype.deselectItems = /**
     * Deselect defined items
     * @param {?} items items to deselected
     * ```typescript
     * // get
     * this.combo.deselectItems(["New York", "New Jersey"]);
     * ```
     * @return {?}
     */
    function (items) {
        if (items) {
            var /** @type {?} */ newSelection = this.selection.delete_items(this.id, items);
            this.triggerSelectionChange(newSelection);
        }
    };
    /**
     * Select all (filtered) items
     * @param {?=} ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.
     * ```typescript
     * // get
     * this.combo.selectAllItems();
     * ```
     * @return {?}
     */
    IgxComboComponent.prototype.selectAllItems = /**
     * Select all (filtered) items
     * @param {?=} ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.
     * ```typescript
     * // get
     * this.combo.selectAllItems();
     * ```
     * @return {?}
     */
    function (ignoreFilter) {
        var /** @type {?} */ allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData);
        var /** @type {?} */ newSelection = this.selection.add_items(this.id, allVisible);
        this.triggerSelectionChange(newSelection);
    };
    /**
     * Deselect all (filtered) items
     * @param {?=} ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.
     * ```typescript
     * // get
     * this.combo.deselectAllItems();
     * ```
     * @return {?}
     */
    IgxComboComponent.prototype.deselectAllItems = /**
     * Deselect all (filtered) items
     * @param {?=} ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.
     * ```typescript
     * // get
     * this.combo.deselectAllItems();
     * ```
     * @return {?}
     */
    function (ignoreFilter) {
        var /** @type {?} */ newSelection = this.filteredData.length === this.data.length || ignoreFilter ?
            this.selection.get_empty() :
            this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData));
        this.triggerSelectionChange(newSelection);
    };
    IgxComboComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-combo',
                    template: "<ng-template #complex let-display let-data=\"data\" let-key=\"displayKey\">\n    {{display[key]}}\n</ng-template>\n<ng-template #primitive let-display>\n    {{display}}\n</ng-template>\n<ng-template #empty>\n    <span>The list is empty</span>\n</ng-template>\n<ng-template #addItemDefault let-control>\n    <button igxButton=\"flat\" igxRipple>Add item</button>\n</ng-template>\n<ng-template #headerItemBase let-item let-key=\"valueKey\" let-groupKey=\"groupKey\">\n    {{ item[key] }}\n</ng-template>\n\n<div class=\"igx-combo\" [style.width]=\"width\" role=\"combobox\" [attr.aria-expanded]=\"!dropdown.collapsed\" aria-haspopup=\"listbox\" [attr.aria-owns]=\"dropdown.id\">\n    <igx-input-group [type]=\"type\" (click)=\"onInputClick($event)\">\n        <input igxInput #comboInput name=\"comboInput\" type=\"text\" [(ngModel)]=\"value\" readonly [placeholder]=\"placeholder\" [disabled]=\"disabled\" (blur)=\"onBlur($event)\"/>\n        <igx-suffix *ngIf=\"value.length\" class=\"clearButton\" aria-label=\"Clear Selection\" igxRipple (click)=\"handleClearItems($event)\">\n            <igx-icon fontSet=\"material\">clear</igx-icon>\n        </igx-suffix>\n        <igx-suffix igxButton=\"icon\" class=\"dropdownToggleButton\" igxRipple>\n            <igx-icon *ngIf=\"dropdown.collapsed; else toggleUp\" fontSet=\"material\">arrow_drop_down</igx-icon>\n            <ng-template #toggleUp>\n                <igx-icon fontSet=\"material\">arrow_drop_up</igx-icon>\n            </ng-template>\n        </igx-suffix>\n    </igx-input-group>\n    <igx-combo-drop-down #igxComboDropDown class=\"igx-combo__drop-down\" [width]=\"itemsWidth || '100%'\">\n        <igx-input-group class=\"igx-combo__search\">\n            <input class=\"igx-combo-input\" igxInput #searchInput name=\"searchInput\" type=\"text\" [(ngModel)]=\"searchValue\" (ngModelChange)=\"handleInputChange($event)\"\n                (keyup)=\"handleKeyUp($event)\" (keydown)=\"handleKeyDown($event)\" (focus)=\"dropdown.onBlur($event)\" [placeholder]=\"searchPlaceholder\" aria-autocomplete=\"both\"\n                [attr.aria-owns]=\"dropdown.id\" [attr.aria-labelledby]=\"ariaLabelledBy\" />\n        </igx-input-group>\n        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: this}\">\n        </ng-container>\n        <div #dropdownItemContainer class=\"igx-combo__content\" [style.overflow]=\"'hidden'\" [style.maxHeight.px]=\"itemsMaxHeight\"\n            [igxDropDownItemNavigation]=\"dropdown\" [tabindex]=\"dropdown.collapsed ? -1 : 0\" role=\"listbox\" [attr.id]=\"dropdown.id\">\n            <ng-template igxFor let-item [igxForOf]=\"data | comboFiltering:filteringExpressions:filteringLogic | comboSorting:sortingExpressions | comboGrouping:groupKey\"\n                [igxForScrollOrientation]=\"'vertical'\" [igxForContainerSize]=\"itemsMaxHeight\"\n                [igxForItemSize]=\"itemHeight\" (onChunkPreload)=\"dataLoading($event)\" #virtualScrollContainer>\n                <igx-combo-item [value]=\"item\" isHeader={{item.isHeader}} role=\"option\">\n                    <ng-container *ngIf=\"!item.isHeader\">\n                        <igx-checkbox [checked]=\"isItemSelected(item)\" disableRipple=\"true\" disabled=\"true\" class=\"igx-combo__checkbox\"></igx-checkbox>\n                    </ng-container>\n                    <ng-container *ngIf=\"item.isHeader\">\n                        <ng-container *ngTemplateOutlet=\"headerItemTemplate ? headerItemTemplate : headerItemBase; context: {$implicit: item, data: data, valueKey: valueKey, groupKey: groupKey, displayKey: displayKey}\"></ng-container>\n                    </ng-container>\n                    <ng-container *ngIf=\"!item.isHeader\">\n                        <ng-container #listItem *ngTemplateOutlet=\"template; context: {$implicit: item, data: data, valueKey: valueKey, displayKey: displayKey};\"></ng-container>\n                    </ng-container>\n                </igx-combo-item>\n            </ng-template>\n        </div>\n        <div class=\"igx-combo__add\" *ngIf=\"filteredData.length === 0 || isAddButtonVisible()\">\n            <div class=\"igx-combo__empty\" *ngIf=\"filteredData.length === 0\">\n                <ng-container *ngTemplateOutlet=\"emptyTemplate ? emptyTemplate : empty; context: {$implicit: this}\">\n                </ng-container>\n            </div>\n            <igx-combo-item *ngIf=\"isAddButtonVisible()\" [tabindex]=\"dropdown.collapsed ? -1 : customValueFlag ? 1 : -1\" class=\"igx-combo__add-item\"\n                    igxRipple (keypress)=\"addItemToCollection()\" [isHeader]=\"false\" [disabled]=\"false\" [value]=\"'ADD ITEM'\" role=\"button\"\n                    aria-label=\"Add Item\">\n                <ng-container *ngTemplateOutlet=\"addItemTemplate ? addItemTemplate : addItemDefault; context: {$implicit: this}\">\n                </ng-container>\n            </igx-combo-item>\n        </div>\n        <ng-container *ngTemplateOutlet=\"footerTemplate; context: {$implicit: this}\">\n        </ng-container>\n    </igx-combo-drop-down>\n</div>\n"
                },] },
    ];
    /** @nocollapse */
    IgxComboComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
        { type: IgxSelectionAPIService, },
        { type: NgControl, decorators: [{ type: Self }, { type: Optional },] },
    ]; };
    IgxComboComponent.propDecorators = {
        "dropdown": [{ type: ViewChild, args: [IgxComboDropDownComponent, { read: IgxComboDropDownComponent },] },],
        "selectAllCheckbox": [{ type: ViewChild, args: ['selectAllCheckbox', { read: IgxCheckboxComponent },] },],
        "searchInput": [{ type: ViewChild, args: ['searchInput',] },],
        "comboInput": [{ type: ViewChild, args: ['comboInput',] },],
        "itemTemplate": [{ type: ContentChild, args: [IgxComboItemDirective, { read: TemplateRef },] },],
        "headerTemplate": [{ type: ContentChild, args: [IgxComboHeaderDirective, { read: TemplateRef },] },],
        "footerTemplate": [{ type: ContentChild, args: [IgxComboFooterDirective, { read: TemplateRef },] },],
        "headerItemTemplate": [{ type: ContentChild, args: [IgxComboHeaderItemDirective, { read: TemplateRef },] },],
        "addItemTemplate": [{ type: ContentChild, args: [IgxComboAddItemDirective, { read: TemplateRef },] },],
        "emptyTemplate": [{ type: ContentChild, args: [IgxComboEmptyDirective, { read: TemplateRef },] },],
        "primitiveTemplate": [{ type: ViewChild, args: ['primitive', { read: TemplateRef },] },],
        "complexTemplate": [{ type: ViewChild, args: ['complex', { read: TemplateRef },] },],
        "oldEmptyTemplate": [{ type: ContentChild, args: ['emptyTemplate', { read: TemplateRef },] },],
        "oldHeaderTemplate": [{ type: ContentChild, args: ['headerTemplate', { read: TemplateRef },] },],
        "oldFooterTemplate": [{ type: ContentChild, args: ['footerTemplate', { read: TemplateRef },] },],
        "oldItemTemplate": [{ type: ContentChild, args: ['itemTemplate', { read: TemplateRef },] },],
        "oldAddItemTemplate": [{ type: ContentChild, args: ['addItemTemplate', { read: TemplateRef },] },],
        "oldHeaderItemTemplate": [{ type: ContentChild, args: ['headerItemTemplate', { read: TemplateRef },] },],
        "dropdownContainer": [{ type: ViewChild, args: ['dropdownItemContainer',] },],
        "children": [{ type: ViewChildren, args: [IgxComboItemComponent, { read: IgxComboItemComponent },] },],
        "onSelectionChange": [{ type: Output },],
        "onOpening": [{ type: Output },],
        "onOpened": [{ type: Output },],
        "onClosing": [{ type: Output },],
        "onClosed": [{ type: Output },],
        "onAddition": [{ type: Output },],
        "onSearchInput": [{ type: Output },],
        "onDataPreLoad": [{ type: Output },],
        "id": [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
        "width": [{ type: HostBinding, args: ['style.width',] }, { type: Input },],
        "validClass": [{ type: HostBinding, args: ['class.igx-input-group--valid',] },],
        "invalidClass": [{ type: HostBinding, args: ['class.igx-input-group--invalid',] },],
        "allowCustomValues": [{ type: Input },],
        "itemsMaxHeight": [{ type: Input },],
        "itemsWidth": [{ type: Input },],
        "itemHeight": [{ type: Input },],
        "placeholder": [{ type: Input },],
        "searchPlaceholder": [{ type: Input },],
        "data": [{ type: Input },],
        "valueKey": [{ type: Input },],
        "displayKey": [{ type: Input },],
        "groupKey": [{ type: Input },],
        "filterable": [{ type: Input },],
        "ariaLabelledBy": [{ type: Input },],
        "disabled": [{ type: Input },],
        "type": [{ type: Input },],
        "onArrowDown": [{ type: HostListener, args: ['keydown.ArrowDown', ['$event'],] }, { type: HostListener, args: ['keydown.Alt.ArrowDown', ['$event'],] },],
    };
    tslib_1.__decorate([
        DeprecateProperty("Setting combo item template with '#emptyTemplate' is deprecated.\n" +
            "Use `igxComboEmpty` directive instead."),
        tslib_1.__metadata("design:type", TemplateRef),
        tslib_1.__metadata("design:paramtypes", [TemplateRef])
    ], IgxComboComponent.prototype, "oldEmptyTemplate", null);
    tslib_1.__decorate([
        DeprecateProperty("Setting combo item template with '#headerTemplate' is deprecated.\n" +
            "Use `igxComboHeader` directive instead."),
        tslib_1.__metadata("design:type", TemplateRef),
        tslib_1.__metadata("design:paramtypes", [TemplateRef])
    ], IgxComboComponent.prototype, "oldHeaderTemplate", null);
    tslib_1.__decorate([
        DeprecateProperty("Setting combo item template with '#footerTemplate' is deprecated.\n" +
            "Use `igxComboFooter` directive instead."),
        tslib_1.__metadata("design:type", TemplateRef),
        tslib_1.__metadata("design:paramtypes", [TemplateRef])
    ], IgxComboComponent.prototype, "oldFooterTemplate", null);
    tslib_1.__decorate([
        DeprecateProperty("Setting combo item template with '#itemTemplate' is deprecated.\n" +
            "Use `igxComboItem` directive instead."),
        tslib_1.__metadata("design:type", TemplateRef),
        tslib_1.__metadata("design:paramtypes", [TemplateRef])
    ], IgxComboComponent.prototype, "oldItemTemplate", null);
    tslib_1.__decorate([
        DeprecateProperty("Setting combo item template with '#addItemTemplate' is deprecated.\n" +
            "Use `igxComboAddItem` directive instead."),
        tslib_1.__metadata("design:type", TemplateRef),
        tslib_1.__metadata("design:paramtypes", [TemplateRef])
    ], IgxComboComponent.prototype, "oldAddItemTemplate", null);
    tslib_1.__decorate([
        DeprecateProperty("Setting combo item template with '#headerItemTemplate' is deprecated.\n" +
            "Use `igxComboHeaderItem` directive instead."),
        tslib_1.__metadata("design:type", TemplateRef),
        tslib_1.__metadata("design:paramtypes", [TemplateRef])
    ], IgxComboComponent.prototype, "oldHeaderItemTemplate", null);
    return IgxComboComponent;
}());
export { IgxComboComponent };
function IgxComboComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxComboComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxComboComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxComboComponent.propDecorators;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.customValueFlag;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.defaultFallbackGroup;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.stringFilters;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.boolenFilters;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype._filteringLogic;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype._filteringExpressions;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype._sortingExpressions;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype._groupKey;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype._valueKey;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype._displayKey;
    /** @type {?} */
    IgxComboComponent.prototype._addItemTemplate;
    /** @type {?} */
    IgxComboComponent.prototype._emptyTemplate;
    /** @type {?} */
    IgxComboComponent.prototype._footerTemplate;
    /** @type {?} */
    IgxComboComponent.prototype._headerTemplate;
    /** @type {?} */
    IgxComboComponent.prototype._headerItemTemplate;
    /** @type {?} */
    IgxComboComponent.prototype._itemTemplate;
    /** @type {?} */
    IgxComboComponent.prototype._dataType;
    /** @type {?} */
    IgxComboComponent.prototype._data;
    /** @type {?} */
    IgxComboComponent.prototype._filteredData;
    /** @type {?} */
    IgxComboComponent.prototype._children;
    /** @type {?} */
    IgxComboComponent.prototype._dropdownContainer;
    /** @type {?} */
    IgxComboComponent.prototype._searchInput;
    /** @type {?} */
    IgxComboComponent.prototype._comboInput;
    /** @type {?} */
    IgxComboComponent.prototype._valid;
    /** @type {?} */
    IgxComboComponent.prototype._statusChanges$;
    /** @type {?} */
    IgxComboComponent.prototype._width;
    /** @type {?} */
    IgxComboComponent.prototype._positionCallback;
    /** @type {?} */
    IgxComboComponent.prototype._onChangeCallback;
    /** @type {?} */
    IgxComboComponent.prototype.overlaySettings;
    /** @type {?} */
    IgxComboComponent.prototype._value;
    /** @type {?} */
    IgxComboComponent.prototype._searchValue;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.dropdown;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.selectAllCheckbox;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.primitiveTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.complexTemplate;
    /**
     * Emitted when item selection is changing, before the selection completes
     *
     * ```html
     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onSelectionChange;
    /**
     * Emitted before the dropdown is opened
     *
     * ```html
     * <igx-combo onOpening='handleOpening($event)'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onOpening;
    /**
     * Emitted after the dropdown is opened
     *
     * ```html
     * <igx-combo (onOpened)='handleOpened()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onOpened;
    /**
     * Emitted before the dropdown is closed
     *
     * ```html
     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onClosing;
    /**
     * Emitted after the dropdown is closed
     *
     * ```html
     * <igx-combo (onClosed)='handleClosed()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onClosed;
    /**
     * Emitted when an item is being added to the data collection
     *
     * ```html
     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onAddition;
    /**
     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)
     *
     * ```html
     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onSearchInput;
    /**
     * Emitted when new chunk of data is loaded from the virtualization
     *
     * ```html
     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onDataPreLoad;
    /**
     * Gets/gets combo id.
     *
     * ```typescript
     * // get
     * let id = this.combo.id;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [id]='combo1'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.id;
    /**
     * Controls whether custom values can be added to the collection
     *
     * ```typescript
     * // get
     * let comboAllowsCustomValues = this.combo.allowCustomValues;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [allowCustomValues]='true'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.allowCustomValues;
    /**
     * Configures the drop down list height
     *
     * ```typescript
     * // get
     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [itemsMaxHeight]='320'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.itemsMaxHeight;
    /**
     * Configures the drop down list width
     *
     * ```typescript
     * // get
     * let myComboItemsWidth = this.combo.itemsWidth;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [itemsWidth] = '"180px"'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.itemsWidth;
    /**
     * Configures the drop down list item height
     *
     * ```typescript
     * // get
     * let myComboItemHeight = this.combo.itemHeight;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [itemHeight]='32'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.itemHeight;
    /**
     * @hidden
     * @type {?}
     */
    IgxComboComponent.prototype.filteringLogic;
    /**
     * Defines the placeholder value for the combo value field
     *
     * ```typescript
     * // get
     * let myComboPlaceholder = this.combo.placeholder;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.placeholder;
    /**
     * Defines the placeholder value for the combo dropdown search field
     *
     * ```typescript
     * // get
     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.searchPlaceholder;
    /**
     * An \@Input property that enabled/disables filtering in the list. The default is `true`.
     * ```html
     * <igx-combo [filterable]="'false'">
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.filterable;
    /**
     * An \@Input property that set aria-labelledby attribute
     * ```html
     * <igx-combo [ariaLabelledBy]="'label1'">
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.ariaLabelledBy;
    /**
     * An \@Input property that enabled/disables combo. The default is `false`.
     * ```html
     * <igx-combo [disabled]="'true'">
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.disabled;
    /**
     * An \@Input property that sets how the combo will be styled.
     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.
     * ```html
     * <igx-combo [type]="'line'">
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.type;
    /** @type {?} */
    IgxComboComponent.prototype.elementRef;
    /** @type {?} */
    IgxComboComponent.prototype.cdr;
    /** @type {?} */
    IgxComboComponent.prototype.selection;
    /** @type {?} */
    IgxComboComponent.prototype.ngControl;
}
/**
 * @hidden
 */
var IgxComboModule = /** @class */ (function () {
    function IgxComboModule() {
    }
    IgxComboModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboFilterConditionPipe, IgxComboGroupingPipe,
                        IgxComboFilteringPipe, IgxComboSortingPipe, IgxComboDropDownComponent,
                        IgxComboItemDirective,
                        IgxComboEmptyDirective,
                        IgxComboHeaderItemDirective,
                        IgxComboHeaderDirective,
                        IgxComboFooterDirective,
                        IgxComboAddItemDirective],
                    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent,
                        IgxComboItemDirective,
                        IgxComboEmptyDirective,
                        IgxComboHeaderItemDirective,
                        IgxComboHeaderDirective,
                        IgxComboFooterDirective,
                        IgxComboAddItemDirective],
                    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,
                        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],
                    providers: [IgxSelectionAPIService]
                },] },
    ];
    return IgxComboModule;
}());
export { IgxComboModule };
function IgxComboModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxComboModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxComboModule.ctorParameters;
}
export { Éµ0 };

//# sourceMappingURL=data:application/json;base64,