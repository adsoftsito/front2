/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { Directive, Component, NgModule, ChangeDetectorRef } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { IgxCheckboxModule } from '../checkbox/checkbox.component';
import { ColumnChooserBase } from './column-chooser-base';
import { ColumnChooserItemBase } from './column-chooser-item-base';
import { IgxInputGroupModule } from '../input-group/input-group.component';
var IgxColumnPinningItemDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IgxColumnPinningItemDirective, _super);
    function IgxColumnPinningItemDirective() {
        return _super.call(this, 'pinned') || this;
    }
    Object.defineProperty(IgxColumnPinningItemDirective.prototype, "pinnable", {
        /**
         * Returns whether a column could be pinned.
         * It's not possible to pin a column if there is not enough space for the unpinned area.
         * ```typescript
         * const columnItem: IgxColumnPinningItemDirective;
         * this.columnItem.pinnable;
         * ```
         */
        get: /**
         * Returns whether a column could be pinned.
         * It's not possible to pin a column if there is not enough space for the unpinned area.
         * ```typescript
         * const columnItem: IgxColumnPinningItemDirective;
         * this.columnItem.pinnable;
         * ```
         * @return {?}
         */
        function () {
            if (this.column.grid.getUnpinnedWidth(true) - this.column.width < this.column.grid.unpinnedAreaMinWidth) {
                return false;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    IgxColumnPinningItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxColumnPinningItem]'
                },] },
    ];
    /** @nocollapse */
    IgxColumnPinningItemDirective.ctorParameters = function () { return []; };
    return IgxColumnPinningItemDirective;
}(ColumnChooserItemBase));
export { IgxColumnPinningItemDirective };
function IgxColumnPinningItemDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnPinningItemDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnPinningItemDirective.ctorParameters;
}
var IgxColumnPinningComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxColumnPinningComponent, _super);
    function IgxColumnPinningComponent(cdr) {
        var _this = _super.call(this, cdr) || this;
        _this.cdr = cdr;
        return _this;
    }
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} container
     * @param {?} column
     * @return {?}
     */
    IgxColumnPinningComponent.prototype.createColumnItem = /**
     * @hidden
     * @param {?} container
     * @param {?} column
     * @return {?}
     */
    function (container, column) {
        if (column.level !== 0) {
            return null;
        }
        var /** @type {?} */ item = new IgxColumnPinningItemDirective();
        item.container = container;
        item.column = column;
        return item;
    };
    /**
     * @hidden
     * @param {?} event
     * @param {?} columnItem
     * @return {?}
     */
    IgxColumnPinningComponent.prototype.checkboxValueChange = /**
     * @hidden
     * @param {?} event
     * @param {?} columnItem
     * @return {?}
     */
    function (event, columnItem) {
        if (event.checked && !columnItem.pinnable) {
            event.checkbox.checked = false;
            return false;
        }
        columnItem.value = !columnItem.value;
    };
    IgxColumnPinningComponent.decorators = [
        { type: Component, args: [{
                    preserveWhitespaces: false,
                    selector: 'igx-column-pinning',
                    template: "\n<div class=\"igx-column-hiding__header\">\n    <h4 class=\"igx-column-hiding__header-title\" *ngIf=\"title\">{{ title }}</h4>\n\n    <igx-input-group class=\"igx-column-hiding__header-input\">\n        <input igxInput\n            type=\"text\"\n            [(ngModel)]=\"filterCriteria\"\n            [placeholder]=\"filterColumnsPrompt\"\n            autocomplete=\"off\" />\n    </igx-input-group>\n</div>\n\n<div class=\"igx-column-hiding__columns\"\n    [style.max-height]=\"columnsAreaMaxHeight\">\n    <igx-checkbox igxColumnPinningItem\n        *ngFor=\"let columnItem of columnItems\"\n        class=\"igx-column-hiding__columns-item\"\n        (change)=\"checkboxValueChange($event, columnItem)\"\n        [checked]=\"columnItem.value\">\n        {{ columnItem.name }}\n    </igx-checkbox>\n</div>\n"
                },] },
    ];
    /** @nocollapse */
    IgxColumnPinningComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
    ]; };
    return IgxColumnPinningComponent;
}(ColumnChooserBase));
export { IgxColumnPinningComponent };
function IgxColumnPinningComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnPinningComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnPinningComponent.ctorParameters;
    /** @type {?} */
    IgxColumnPinningComponent.prototype.cdr;
}
/**
 * The IgxColumnPinningModule provides the {\@link IgxColumnPinningComponent}, {\@link IgxColumnPinningItemDirective} inside your application.
 */
var IgxColumnPinningModule = /** @class */ (function () {
    function IgxColumnPinningModule() {
    }
    IgxColumnPinningModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxColumnPinningComponent, IgxColumnPinningItemDirective],
                    exports: [IgxColumnPinningComponent],
                    imports: [
                        IgxCheckboxModule,
                        IgxInputGroupModule,
                        CommonModule,
                        FormsModule
                    ]
                },] },
    ];
    return IgxColumnPinningModule;
}());
export { IgxColumnPinningModule };
function IgxColumnPinningModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxColumnPinningModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxColumnPinningModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXBpbm5pbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9jb2x1bW4tcGlubmluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQXdCLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbkUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbkUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7O0lBS3hCLHlEQUFxQjtJQUVwRTtlQUNJLGtCQUFNLFFBQVEsQ0FBQztLQUNsQjtJQVVELHNCQUFJLG1EQUFRO1FBUlo7Ozs7Ozs7V0FPRzs7Ozs7Ozs7OztRQUNIO1lBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO2dCQUN0RyxNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ2hCO1lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztTQUNmOzs7T0FBQTs7Z0JBdEJKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsd0JBQXdCO2lCQUNyQzs7Ozt3Q0FYRDtFQVltRCxxQkFBcUI7U0FBM0QsNkJBQTZCOzs7Ozs7Ozs7OztJQWtESyxxREFBaUI7SUFFNUQsbUNBQW1CLEdBQXNCO1FBQXpDLFlBQ0ksa0JBQU0sR0FBRyxDQUFDLFNBQ2I7UUFGa0IsU0FBRyxHQUFILEdBQUcsQ0FBbUI7O0tBRXhDO0lBRUQ7O09BRUc7Ozs7Ozs7SUFDSCxvREFBZ0I7Ozs7OztJQUFoQixVQUFpQixTQUFjLEVBQUUsTUFBVztRQUN4QyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQztTQUNmO1FBQ0QscUJBQU0sSUFBSSxHQUFHLElBQUksNkJBQTZCLEVBQUUsQ0FBQztRQUNqRCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDO0tBQ2Y7Ozs7Ozs7SUFLTSx1REFBbUI7Ozs7OztjQUFDLEtBQUssRUFBRSxVQUF5QztRQUN2RSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDeEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDaEI7UUFDRCxVQUFVLENBQUMsS0FBSyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQzs7O2dCQXZENUMsU0FBUyxTQUFDO29CQUNQLG1CQUFtQixFQUFFLEtBQUs7b0JBQzFCLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFFBQVEsRUFBRSw2eUJBdUJiO2lCQUNBOzs7O2dCQTNEOEQsaUJBQWlCOztvQ0FGaEY7RUE4RCtDLGlCQUFpQjtTQUFuRCx5QkFBeUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0JBa0NyQyxRQUFRLFNBQUM7b0JBQ04sWUFBWSxFQUFFLENBQUMseUJBQXlCLEVBQUUsNkJBQTZCLENBQUM7b0JBQ3hFLE9BQU8sRUFBRSxDQUFDLHlCQUF5QixDQUFDO29CQUNwQyxPQUFPLEVBQUU7d0JBQ0wsaUJBQWlCO3dCQUNqQixtQkFBbUI7d0JBQ25CLFlBQVk7d0JBQ1osV0FBVztxQkFDZDtpQkFDSjs7aUNBekdEOztTQTBHYSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIE5nTW9kdWxlLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBJZ3hDaGVja2JveE1vZHVsZSB9IGZyb20gJy4uL2NoZWNrYm94L2NoZWNrYm94LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2x1bW5DaG9vc2VyQmFzZSB9IGZyb20gJy4vY29sdW1uLWNob29zZXItYmFzZSc7XG5pbXBvcnQgeyBDb2x1bW5DaG9vc2VySXRlbUJhc2UgfSBmcm9tICcuL2NvbHVtbi1jaG9vc2VyLWl0ZW0tYmFzZSc7XG5pbXBvcnQgeyBJZ3hJbnB1dEdyb3VwTW9kdWxlIH0gZnJvbSAnLi4vaW5wdXQtZ3JvdXAvaW5wdXQtZ3JvdXAuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Q29sdW1uUGlubmluZ0l0ZW1dJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDb2x1bW5QaW5uaW5nSXRlbURpcmVjdGl2ZSBleHRlbmRzIENvbHVtbkNob29zZXJJdGVtQmFzZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3Bpbm5lZCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciBhIGNvbHVtbiBjb3VsZCBiZSBwaW5uZWQuXG4gICAgICogSXQncyBub3QgcG9zc2libGUgdG8gcGluIGEgY29sdW1uIGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggc3BhY2UgZm9yIHRoZSB1bnBpbm5lZCBhcmVhLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBjb2x1bW5JdGVtOiBJZ3hDb2x1bW5QaW5uaW5nSXRlbURpcmVjdGl2ZTtcbiAgICAgKiB0aGlzLmNvbHVtbkl0ZW0ucGlubmFibGU7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IHBpbm5hYmxlKCkge1xuICAgICAgICBpZiAodGhpcy5jb2x1bW4uZ3JpZC5nZXRVbnBpbm5lZFdpZHRoKHRydWUpIC0gdGhpcy5jb2x1bW4ud2lkdGggPCB0aGlzLmNvbHVtbi5ncmlkLnVucGlubmVkQXJlYU1pbldpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgICBzZWxlY3RvcjogJ2lneC1jb2x1bW4tcGlubmluZycsXG4gICAgdGVtcGxhdGU6IGBcbjxkaXYgY2xhc3M9XCJpZ3gtY29sdW1uLWhpZGluZ19faGVhZGVyXCI+XG4gICAgPGg0IGNsYXNzPVwiaWd4LWNvbHVtbi1oaWRpbmdfX2hlYWRlci10aXRsZVwiICpuZ0lmPVwidGl0bGVcIj57eyB0aXRsZSB9fTwvaDQ+XG5cbiAgICA8aWd4LWlucHV0LWdyb3VwIGNsYXNzPVwiaWd4LWNvbHVtbi1oaWRpbmdfX2hlYWRlci1pbnB1dFwiPlxuICAgICAgICA8aW5wdXQgaWd4SW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIFsobmdNb2RlbCldPVwiZmlsdGVyQ3JpdGVyaWFcIlxuICAgICAgICAgICAgW3BsYWNlaG9sZGVyXT1cImZpbHRlckNvbHVtbnNQcm9tcHRcIlxuICAgICAgICAgICAgYXV0b2NvbXBsZXRlPVwib2ZmXCIgLz5cbiAgICA8L2lneC1pbnB1dC1ncm91cD5cbjwvZGl2PlxuXG48ZGl2IGNsYXNzPVwiaWd4LWNvbHVtbi1oaWRpbmdfX2NvbHVtbnNcIlxuICAgIFtzdHlsZS5tYXgtaGVpZ2h0XT1cImNvbHVtbnNBcmVhTWF4SGVpZ2h0XCI+XG4gICAgPGlneC1jaGVja2JveCBpZ3hDb2x1bW5QaW5uaW5nSXRlbVxuICAgICAgICAqbmdGb3I9XCJsZXQgY29sdW1uSXRlbSBvZiBjb2x1bW5JdGVtc1wiXG4gICAgICAgIGNsYXNzPVwiaWd4LWNvbHVtbi1oaWRpbmdfX2NvbHVtbnMtaXRlbVwiXG4gICAgICAgIChjaGFuZ2UpPVwiY2hlY2tib3hWYWx1ZUNoYW5nZSgkZXZlbnQsIGNvbHVtbkl0ZW0pXCJcbiAgICAgICAgW2NoZWNrZWRdPVwiY29sdW1uSXRlbS52YWx1ZVwiPlxuICAgICAgICB7eyBjb2x1bW5JdGVtLm5hbWUgfX1cbiAgICA8L2lneC1jaGVja2JveD5cbjwvZGl2PlxuYFxufSlcbmV4cG9ydCBjbGFzcyBJZ3hDb2x1bW5QaW5uaW5nQ29tcG9uZW50IGV4dGVuZHMgQ29sdW1uQ2hvb3NlckJhc2Uge1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICAgICAgc3VwZXIoY2RyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY3JlYXRlQ29sdW1uSXRlbShjb250YWluZXI6IGFueSwgY29sdW1uOiBhbnkpIHtcbiAgICAgICAgaWYgKGNvbHVtbi5sZXZlbCAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbSA9IG5ldyBJZ3hDb2x1bW5QaW5uaW5nSXRlbURpcmVjdGl2ZSgpO1xuICAgICAgICBpdGVtLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgaXRlbS5jb2x1bW4gPSBjb2x1bW47XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2hlY2tib3hWYWx1ZUNoYW5nZShldmVudCwgY29sdW1uSXRlbTogSWd4Q29sdW1uUGlubmluZ0l0ZW1EaXJlY3RpdmUpIHtcbiAgICAgICAgaWYgKGV2ZW50LmNoZWNrZWQgJiYgIWNvbHVtbkl0ZW0ucGlubmFibGUpIHtcbiAgICAgICAgICAgIGV2ZW50LmNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb2x1bW5JdGVtLnZhbHVlID0gIWNvbHVtbkl0ZW0udmFsdWU7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoZSBJZ3hDb2x1bW5QaW5uaW5nTW9kdWxlIHByb3ZpZGVzIHRoZSB7QGxpbmsgSWd4Q29sdW1uUGlubmluZ0NvbXBvbmVudH0sIHtAbGluayBJZ3hDb2x1bW5QaW5uaW5nSXRlbURpcmVjdGl2ZX0gaW5zaWRlIHlvdXIgYXBwbGljYXRpb24uXG4gKi9cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbSWd4Q29sdW1uUGlubmluZ0NvbXBvbmVudCwgSWd4Q29sdW1uUGlubmluZ0l0ZW1EaXJlY3RpdmVdLFxuICAgIGV4cG9ydHM6IFtJZ3hDb2x1bW5QaW5uaW5nQ29tcG9uZW50XSxcbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIElneENoZWNrYm94TW9kdWxlLFxuICAgICAgICBJZ3hJbnB1dEdyb3VwTW9kdWxlLFxuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIEZvcm1zTW9kdWxlXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hDb2x1bW5QaW5uaW5nTW9kdWxlIHtcbn1cbiJdfQ==