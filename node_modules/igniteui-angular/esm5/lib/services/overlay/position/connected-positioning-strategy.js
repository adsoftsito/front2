/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { HorizontalAlignment, VerticalAlignment, getPointFromPositionsSettings } from './../utilities';
import { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';
var ConnectedPositioningStrategy = /** @class */ (function () {
    function ConnectedPositioningStrategy(settings) {
        this._defaultSettings = {
            // default Point(0, 0) in getPointFromPositionsSettings
            target: null,
            horizontalDirection: HorizontalAlignment.Right,
            verticalDirection: VerticalAlignment.Bottom,
            horizontalStartPoint: HorizontalAlignment.Left,
            verticalStartPoint: VerticalAlignment.Bottom,
            openAnimation: scaleInVerTop,
            closeAnimation: scaleOutVerTop
        };
        this.settings = Object.assign({}, this._defaultSettings, settings);
    }
    // we no longer use the element inside the position() as its dimensions are cached in rect
    /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    ConnectedPositioningStrategy.prototype.position = /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    function (contentElement, size, document, initialCall) {
        var /** @type {?} */ startPoint = getPointFromPositionsSettings(this.settings, contentElement.parentElement);
        contentElement.style.top = startPoint.y + this.settings.verticalDirection * size.height + 'px';
        contentElement.style.left = startPoint.x + this.settings.horizontalDirection * size.width + 'px';
    };
    return ConnectedPositioningStrategy;
}());
export { ConnectedPositioningStrategy };
function ConnectedPositioningStrategy_tsickle_Closure_declarations() {
    /** @type {?} */
    ConnectedPositioningStrategy.prototype._defaultSettings;
    /** @type {?} */
    ConnectedPositioningStrategy.prototype.settings;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGVkLXBvc2l0aW9uaW5nLXN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9vdmVybGF5L3Bvc2l0aW9uL2Nvbm5lY3RlZC1wb3NpdGlvbmluZy1zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUEyQixtQkFBbUIsRUFBRSxpQkFBaUIsRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hJLE9BQU8sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFekUsSUFBQTtJQWFFLHNDQUFZLFFBQTJCO2dDQVpNOztZQUUzQyxNQUFNLEVBQUUsSUFBSTtZQUNaLG1CQUFtQixFQUFFLG1CQUFtQixDQUFDLEtBQUs7WUFDOUMsaUJBQWlCLEVBQUUsaUJBQWlCLENBQUMsTUFBTTtZQUMzQyxvQkFBb0IsRUFBRSxtQkFBbUIsQ0FBQyxJQUFJO1lBQzlDLGtCQUFrQixFQUFFLGlCQUFpQixDQUFDLE1BQU07WUFDNUMsYUFBYSxFQUFFLGFBQWE7WUFDNUIsY0FBYyxFQUFFLGNBQWM7U0FDL0I7UUFJQyxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUNwRTtJQUVELDBGQUEwRjs7Ozs7Ozs7SUFDMUYsK0NBQVE7Ozs7Ozs7SUFBUixVQUFTLGNBQTJCLEVBQUUsSUFBc0MsRUFBRSxRQUFtQixFQUFFLFdBQXFCO1FBQ3RILHFCQUFNLFVBQVUsR0FBRyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUU5RixjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDL0YsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0tBQ2xHO3VDQTNCSDtJQTRCQyxDQUFBO0FBeEJELHdDQXdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElQb3NpdGlvblN0cmF0ZWd5IH0gZnJvbSAnLi9JUG9zaXRpb25TdHJhdGVneSc7XG5pbXBvcnQgeyBQb3NpdGlvblNldHRpbmdzLCBQb2ludCwgSG9yaXpvbnRhbEFsaWdubWVudCwgVmVydGljYWxBbGlnbm1lbnQsIGdldFBvaW50RnJvbVBvc2l0aW9uc1NldHRpbmdzIH0gZnJvbSAnLi8uLi91dGlsaXRpZXMnO1xuaW1wb3J0IHsgc2NhbGVJblZlclRvcCwgc2NhbGVPdXRWZXJUb3AgfSBmcm9tICcuLi8uLi8uLi9hbmltYXRpb25zL21haW4nO1xuXG5leHBvcnQgY2xhc3MgQ29ubmVjdGVkUG9zaXRpb25pbmdTdHJhdGVneSBpbXBsZW1lbnRzIElQb3NpdGlvblN0cmF0ZWd5IHtcbiAgcHJpdmF0ZSBfZGVmYXVsdFNldHRpbmdzOiBQb3NpdGlvblNldHRpbmdzID0ge1xuICAgIC8vIGRlZmF1bHQgUG9pbnQoMCwgMCkgaW4gZ2V0UG9pbnRGcm9tUG9zaXRpb25zU2V0dGluZ3NcbiAgICB0YXJnZXQ6IG51bGwsXG4gICAgaG9yaXpvbnRhbERpcmVjdGlvbjogSG9yaXpvbnRhbEFsaWdubWVudC5SaWdodCxcbiAgICB2ZXJ0aWNhbERpcmVjdGlvbjogVmVydGljYWxBbGlnbm1lbnQuQm90dG9tLFxuICAgIGhvcml6b250YWxTdGFydFBvaW50OiBIb3Jpem9udGFsQWxpZ25tZW50LkxlZnQsXG4gICAgdmVydGljYWxTdGFydFBvaW50OiBWZXJ0aWNhbEFsaWdubWVudC5Cb3R0b20sXG4gICAgb3BlbkFuaW1hdGlvbjogc2NhbGVJblZlclRvcCxcbiAgICBjbG9zZUFuaW1hdGlvbjogc2NhbGVPdXRWZXJUb3BcbiAgfTtcblxuICBwdWJsaWMgc2V0dGluZ3M6IFBvc2l0aW9uU2V0dGluZ3M7XG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzPzogUG9zaXRpb25TZXR0aW5ncykge1xuICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9kZWZhdWx0U2V0dGluZ3MsIHNldHRpbmdzKTtcbiAgfVxuXG4gIC8vIHdlIG5vIGxvbmdlciB1c2UgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBwb3NpdGlvbigpIGFzIGl0cyBkaW1lbnNpb25zIGFyZSBjYWNoZWQgaW4gcmVjdFxuICBwb3NpdGlvbihjb250ZW50RWxlbWVudDogSFRNTEVsZW1lbnQsIHNpemU6IHsgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXJ9LCBkb2N1bWVudD86IERvY3VtZW50LCBpbml0aWFsQ2FsbD86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBjb25zdCBzdGFydFBvaW50ID0gZ2V0UG9pbnRGcm9tUG9zaXRpb25zU2V0dGluZ3ModGhpcy5zZXR0aW5ncywgY29udGVudEVsZW1lbnQucGFyZW50RWxlbWVudCk7XG5cbiAgICBjb250ZW50RWxlbWVudC5zdHlsZS50b3AgPSBzdGFydFBvaW50LnkgKyB0aGlzLnNldHRpbmdzLnZlcnRpY2FsRGlyZWN0aW9uICogc2l6ZS5oZWlnaHQgKyAncHgnO1xuICAgIGNvbnRlbnRFbGVtZW50LnN0eWxlLmxlZnQgPSBzdGFydFBvaW50LnggKyB0aGlzLnNldHRpbmdzLmhvcml6b250YWxEaXJlY3Rpb24gKiBzaXplLndpZHRoICsgJ3B4JztcbiAgfVxufVxuXG4iXX0=