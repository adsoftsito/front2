/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, HostListener, Input, ViewChild, } from '@angular/core';
import { IgxSelectionAPIService } from '../../core/selection';
import { GridBaseAPIService } from '../api.service';
import { first } from 'rxjs/operators';
var IgxGridGroupByRowComponent = /** @class */ (function () {
    function IgxGridGroupByRowComponent(gridAPI, selection, element, cdr) {
        this.gridAPI = gridAPI;
        this.selection = selection;
        this.element = element;
        this.cdr = cdr;
        /**
         * @hidden
         */
        this.defaultCssClass = 'igx-grid__group-row';
        /**
         * @hidden
         */
        this.paddingIndentationCssClass = 'igx-grid__group-row--padding-level';
        /**
         * @hidden
         */
        this.isFocused = false;
        /**
         * @hidden
         */
        this.tabindex = 0;
    }
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "focused", {
        /**
         * Returns whether the row is focused.
         * ```
         * let gridRowFocused = this.grid1.rowList.first.focused;
         * ```
         */
        get: /**
         * Returns whether the row is focused.
         * ```
         * let gridRowFocused = this.grid1.rowList.first.focused;
         * ```
         * @return {?}
         */
        function () {
            return this.isFocused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "expanded", {
        get: /**
         * Returns whether the group row is expanded.
         * ```typescript
         * const groupRowExpanded = this.grid1.rowList.first.expanded;
         * ```
         * @return {?}
         */
        function () {
            return this.grid.isExpandedGroup(this.groupRow);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "describedBy", {
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            var /** @type {?} */ grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';
            return this.gridID + '_' + grRowExpr;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "dataRowIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "nativeElement", {
        /**
         * Returns a reference to the underlying HTML element.
         * ```typescript
         * const groupRowElement = this.nativeElement;
         * ```
         */
        get: /**
         * Returns a reference to the underlying HTML element.
         * ```typescript
         * const groupRowElement = this.nativeElement;
         * ```
         * @return {?}
         */
        function () {
            return this.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "styleClasses", {
        get: /**
         * Returns the style classes applied to the group rows.
         * ```typescript
         * const groupCssStyles = this.grid1.rowList.first.styleClasses;
         * ```
         * @return {?}
         */
        function () {
            return this.defaultCssClass + " " + (this.paddingIndentationCssClass + "-") + this.groupRow.level +
                (this.focused ? " " + this.defaultCssClass + "--active" : '');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @return {?}
     */
    IgxGridGroupByRowComponent.prototype.onFocus = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.isFocused = true;
    };
    /**
     * @hidden
     * @return {?}
     */
    IgxGridGroupByRowComponent.prototype.onBlur = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.isFocused = false;
    };
    /**
     * Toggles the group row.
     * ```typescript
     * this.grid1.rowList.first.toggle()
     * ```
     * @param {?=} key
     * @return {?}
     */
    IgxGridGroupByRowComponent.prototype.toggle = /**
     * Toggles the group row.
     * ```typescript
     * this.grid1.rowList.first.toggle()
     * ```
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        var /** @type {?} */ shouldExpand = (!key && !this.expanded) || (key && !this.expanded && (key === 'arrowleft' || key === 'left'));
        this.handleToggleScroll();
        if (!shouldExpand) {
            this.grid.verticalScrollContainer.getVerticalScroll().dispatchEvent(new Event('scroll'));
        }
    };
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxGridGroupByRowComponent.prototype.onKeydown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        var /** @type {?} */ alt = event.altKey;
        var /** @type {?} */ key = event.key.toLowerCase();
        if (!this.isKeySupportedInGroupRow(key) || event.ctrlKey) {
            return;
        }
        if (this.isToggleKey(key)) {
            if (!alt) {
                return;
            }
            this.toggle(key);
            return;
        }
        var /** @type {?} */ args = { cell: null, groupRow: this, event: event, cancel: false };
        this.grid.onFocusChange.emit(args);
        if (args.cancel) {
            return;
        }
        var /** @type {?} */ colIndex = this._getSelectedColIndex() || 0;
        var /** @type {?} */ visibleColumnIndex = this.grid.columnList.toArray()[colIndex].visibleIndex !== -1 ?
            this.grid.columnList.toArray()[colIndex].visibleIndex : 0;
        switch (key) {
            case 'arrowdown':
            case 'down':
                this.grid.navigation.navigateDown(this.nativeElement, this.index, visibleColumnIndex);
                break;
            case 'arrowup':
            case 'up':
                this.grid.navigation.navigateUp(this.nativeElement, this.index, visibleColumnIndex);
                break;
            case 'tab':
                if (event.shiftKey) {
                    this.grid.navigation.navigateUp(this.nativeElement, this.index, this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex);
                }
                else {
                    this.grid.navigation.navigateDown(this.nativeElement, this.index, 0);
                }
                break;
        }
    };
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "grid", {
        /**
         * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.
         * ```typescript
         * this.grid1.rowList.first.grid;
         * ```
         */
        get: /**
         * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.
         * ```typescript
         * this.grid1.rowList.first.grid;
         * ```
         * @return {?}
         */
        function () {
            return this.gridAPI.get(this.gridID);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridGroupByRowComponent.prototype, "dataType", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.grid.getColumnByName(this.groupRow.expression.fieldName).dataType;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridGroupByRowComponent.prototype._getSelectedColIndex = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ cell = this.selection.first_item(this.gridID + '-cell');
        if (cell) {
            return cell.columnID;
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    IgxGridGroupByRowComponent.prototype.isKeySupportedInGroupRow = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',
            'tab'].indexOf(key) !== -1;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    IgxGridGroupByRowComponent.prototype.isToggleKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return ['left', 'right', 'arrowleft', 'arrowright'].indexOf(key) !== -1;
    };
    /**
     * @return {?}
     */
    IgxGridGroupByRowComponent.prototype.handleToggleScroll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.grid.rowList.length > 0 && this.grid.rowList.last.index ===
            this.grid.verticalScrollContainer.igxForOf.length - 1) {
            var /** @type {?} */ groupRowIndex_1 = this.index;
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                _this.grid.nativeElement.querySelector("[data-rowIndex=\"" + groupRowIndex_1 + "\"]").focus();
            });
        }
        this.grid.toggleGroup(this.groupRow);
    };
    IgxGridGroupByRowComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    selector: 'igx-grid-groupby-row',
                    template: "<ng-container #defaultGroupRow>\n    <div (click)=\"toggle()\" class=\"igx-grid__grouping-indicator\">\n        <igx-icon *ngIf=\"!expanded\" fontSet=\"material\">chevron_right</igx-icon>\n        <igx-icon *ngIf=\"expanded\" fontSet=\"material\">expand_more</igx-icon>\n    </div>\n\n    <div class=\"igx-grid__group-content\" #groupContent>\n        <ng-container *ngTemplateOutlet=\"grid.groupRowTemplate ? grid.groupRowTemplate : defaultGroupByTemplate; context: { $implicit: groupRow }\">\n        </ng-container>\n    </div>\n\n    <ng-template #defaultGroupByTemplate>\n        <div class=\"igx-group-label\">\n            <igx-icon fontSet=\"material\" class=\"igx-group-label__icon\">group_work</igx-icon>\n            <span class=\"igx-group-label__column-name\">\n            {{ groupRow.expression ? groupRow.expression.fieldName : '' }}:\n            </span>\n\n            <ng-container *ngIf=\"dataType === 'boolean' || dataType === 'string'; else default\" >\n                <span class=\"igx-group-label__text\">{{ groupRow.value }}</span>\n            </ng-container>\n            <ng-template #default>\n                <ng-container *ngIf=\"dataType === 'number'\">\n                    <span class=\"igx-group-label__text\">{{ groupRow.value | number }}</span>\n                </ng-container>\n                <ng-container *ngIf=\"dataType === 'date'\">\n                    <span class=\"igx-group-label__text\">{{ groupRow.value | date }}</span>\n                </ng-container>\n            </ng-template>\n\n            <igx-badge [value]=\"groupRow.records ? groupRow.records.length : 0\" class='igx-group-label__count-badge'></igx-badge>\n        </div>\n    </ng-template>\n</ng-container>\n"
                },] },
    ];
    /** @nocollapse */
    IgxGridGroupByRowComponent.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
        { type: IgxSelectionAPIService, },
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
    ]; };
    IgxGridGroupByRowComponent.propDecorators = {
        "index": [{ type: Input },],
        "gridID": [{ type: Input },],
        "groupRow": [{ type: Input },],
        "groupContent": [{ type: ViewChild, args: ['groupContent',] },],
        "expanded": [{ type: HostBinding, args: ['attr.aria-expanded',] },],
        "tabindex": [{ type: HostBinding, args: ['attr.tabindex',] },],
        "describedBy": [{ type: HostBinding, args: ['attr.aria-describedby',] },],
        "dataRowIndex": [{ type: HostBinding, args: ['attr.data-rowIndex',] },],
        "styleClasses": [{ type: HostBinding, args: ['class',] },],
        "onFocus": [{ type: HostListener, args: ['focus',] },],
        "onBlur": [{ type: HostListener, args: ['blur',] },],
        "onKeydown": [{ type: HostListener, args: ['keydown', ['$event'],] },],
    };
    return IgxGridGroupByRowComponent;
}());
export { IgxGridGroupByRowComponent };
function IgxGridGroupByRowComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridGroupByRowComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridGroupByRowComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxGridGroupByRowComponent.propDecorators;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.defaultCssClass;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.paddingIndentationCssClass;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.isFocused;
    /**
     * An \@Input property that sets the index of the row.
     * ```html
     * <igx-grid-groupby-row [gridID]="id" [index]="rowIndex" [groupRow]="rowData" #row></igx-grid-groupby-row>
     * ```
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.index;
    /**
     * An \@Input property that sets the id of the grid the row belongs to.
     * ```html
     * <igx-grid-groupby-row [gridID]="id" [index]="rowIndex" [groupRow]="rowData" #row></igx-grid-groupby-row>
     * ```
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.gridID;
    /**
     * An \@Input property that specifies the group record the component renders for.
     * ```typescript
     * <igx-grid-groupby-row [gridID]="id" [index]="rowIndex" [groupRow]="rowData" #row></igx-grid-groupby-row>
     * ```
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.groupRow;
    /**
     * Returns a reference of the content of the group.
     * ```typescript
     * const groupRowContent = this.grid1.rowList.first.groupContent;
     * ```
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.groupContent;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridGroupByRowComponent.prototype.tabindex;
    /** @type {?} */
    IgxGridGroupByRowComponent.prototype.gridAPI;
    /** @type {?} */
    IgxGridGroupByRowComponent.prototype.selection;
    /** @type {?} */
    IgxGridGroupByRowComponent.prototype.element;
    /** @type {?} */
    IgxGridGroupByRowComponent.prototype.cdr;
}

//# sourceMappingURL=data:application/json;base64,