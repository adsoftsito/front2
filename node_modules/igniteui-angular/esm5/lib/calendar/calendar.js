/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
var /** @type {?} */ MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var /** @type {?} */ FEBRUARY = 1;
/**
 * @param {?=} start
 * @param {?=} stop
 * @param {?=} step
 * @return {?}
 */
export function range(start, stop, step) {
    if (start === void 0) { start = 0; }
    if (step === void 0) { step = 1; }
    var /** @type {?} */ res = [];
    var /** @type {?} */ cur = (stop === undefined) ? 0 : start;
    var /** @type {?} */ max = (stop === undefined) ? start : stop;
    for (var /** @type {?} */ i = cur; step < 0 ? i > max : i < max; i += step) {
        res.push(i);
    }
    return res;
}
/**
 * Returns true for leap years, false for non-leap years.
 *
 * @export
 * @param {?} year
 * @return {?}
 */
export function isLeap(year) {
    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));
}
/**
 * @param {?} year
 * @param {?} month
 * @param {?} day
 * @return {?}
 */
export function weekDay(year, month, day) {
    return new Date(year, month, day).getDay();
}
/**
 * Return weekday and number of days for year, month.
 *
 * @export
 * @param {?} year
 * @param {?} month
 * @return {?}
 */
export function monthRange(year, month) {
    if ((month < 0) || (month > 11)) {
        throw new Error('Invalid month specified');
    }
    var /** @type {?} */ day = weekDay(year, month, 1);
    var /** @type {?} */ nDays = MDAYS[month];
    if ((month === FEBRUARY) && (isLeap(year))) {
        nDays++;
    }
    return [day, nDays];
}
/**
 * @record
 */
export function ICalendarDate() { }
function ICalendarDate_tsickle_Closure_declarations() {
    /** @type {?} */
    ICalendarDate.prototype.date;
    /** @type {?} */
    ICalendarDate.prototype.isCurrentMonth;
    /** @type {?} */
    ICalendarDate.prototype.isPrevMonth;
    /** @type {?} */
    ICalendarDate.prototype.isNextMonth;
}
/**
 * @record
 */
export function IFormattedParts() { }
function IFormattedParts_tsickle_Closure_declarations() {
    /** @type {?} */
    IFormattedParts.prototype.value;
    /** @type {?|undefined} */
    IFormattedParts.prototype.literal;
    /** @type {?} */
    IFormattedParts.prototype.combined;
}
/** @enum {number} */
var WEEKDAYS = {
    SUNDAY: 0,
    MONDAY: 1,
    TUESDAY: 2,
    WEDNESDAY: 3,
    THURSDAY: 4,
    FRIDAY: 5,
    SATURDAY: 6,
};
export { WEEKDAYS };
WEEKDAYS[WEEKDAYS.SUNDAY] = "SUNDAY";
WEEKDAYS[WEEKDAYS.MONDAY] = "MONDAY";
WEEKDAYS[WEEKDAYS.TUESDAY] = "TUESDAY";
WEEKDAYS[WEEKDAYS.WEDNESDAY] = "WEDNESDAY";
WEEKDAYS[WEEKDAYS.THURSDAY] = "THURSDAY";
WEEKDAYS[WEEKDAYS.FRIDAY] = "FRIDAY";
WEEKDAYS[WEEKDAYS.SATURDAY] = "SATURDAY";
var Calendar = /** @class */ (function () {
    function Calendar(firstWeekDay) {
        if (firstWeekDay === void 0) { firstWeekDay = WEEKDAYS.SUNDAY; }
        this._firstWeekDay = firstWeekDay;
    }
    Object.defineProperty(Calendar.prototype, "firstWeekDay", {
        get: /**
         * @return {?}
         */
        function () {
            return this._firstWeekDay % 7;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._firstWeekDay = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns an array of weekdays for one week starting
     * with the currently set `firstWeekDay`
     *
     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]
     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]
     *
     * \@memberof Calendar
     * @return {?}
     *
     */
    Calendar.prototype.weekdays = /**
     * Returns an array of weekdays for one week starting
     * with the currently set `firstWeekDay`
     *
     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]
     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]
     *
     * \@memberof Calendar
     * @return {?}
     *
     */
    function () {
        var /** @type {?} */ res = [];
        try {
            for (var _a = tslib_1.__values(range(this.firstWeekDay, this.firstWeekDay + 7)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var i = _b.value;
                res.push(i % 7);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return res;
        var e_1, _c;
    };
    /**
     * Returns the date values for one month. It will always iterate throught
     * complete weeks, so it will contain dates outside the specified month.
     *
     * \@memberof Calendar
     * @param {?} year
     * @param {?} month
     * @param {?=} extraWeek
     * @return {?}
     *
     */
    Calendar.prototype.monthdates = /**
     * Returns the date values for one month. It will always iterate throught
     * complete weeks, so it will contain dates outside the specified month.
     *
     * \@memberof Calendar
     * @param {?} year
     * @param {?} month
     * @param {?=} extraWeek
     * @return {?}
     *
     */
    function (year, month, extraWeek) {
        if (extraWeek === void 0) { extraWeek = false; }
        var /** @type {?} */ date = new Date(year, month, 1);
        var /** @type {?} */ days = (date.getDay() - this.firstWeekDay) % 7;
        if (days < 0) {
            days = 7 - Math.abs(days);
        }
        date = this.timedelta(date, 'day', -days);
        var /** @type {?} */ res = [];
        var /** @type {?} */ value;
        while (true) {
            value = this.generateICalendarDate(date, year, month);
            res.push(value);
            date = this.timedelta(date, 'day', 1);
            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {
                if (extraWeek && res.length <= 35) {
                    try {
                        for (var _a = tslib_1.__values(range(0, 7)), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var i = _b.value;
                            value = this.generateICalendarDate(date, year, month);
                            res.push(value);
                            date = this.timedelta(date, 'day', 1);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                break;
            }
        }
        return res;
        var e_2, _c;
    };
    /**
     * Returns a matrix (array of arrays) representing a month's calendar.
     * Each row represents a full week; week entries are ICalendarDate objects.
     *
     * \@memberof Calendar
     * @param {?} year
     * @param {?} month
     * @param {?=} extraWeek
     * @return {?}
     *
     */
    Calendar.prototype.monthdatescalendar = /**
     * Returns a matrix (array of arrays) representing a month's calendar.
     * Each row represents a full week; week entries are ICalendarDate objects.
     *
     * \@memberof Calendar
     * @param {?} year
     * @param {?} month
     * @param {?=} extraWeek
     * @return {?}
     *
     */
    function (year, month, extraWeek) {
        if (extraWeek === void 0) { extraWeek = false; }
        var /** @type {?} */ dates = this.monthdates(year, month, extraWeek);
        var /** @type {?} */ res = [];
        try {
            for (var _a = tslib_1.__values(range(0, dates.length, 7)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var i = _b.value;
                res.push(dates.slice(i, i + 7));
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return res;
        var e_3, _c;
    };
    /**
     * @param {?} date
     * @param {?} interval
     * @param {?} units
     * @return {?}
     */
    Calendar.prototype.timedelta = /**
     * @param {?} date
     * @param {?} interval
     * @param {?} units
     * @return {?}
     */
    function (date, interval, units) {
        var /** @type {?} */ ret = new Date(date);
        var /** @type {?} */ checkRollover = function () {
            if (ret.getDate() !== date.getDate()) {
                ret.setDate(0);
            }
        };
        switch (interval.toLowerCase()) {
            case 'year':
                ret.setFullYear(ret.getFullYear() + units);
                checkRollover();
                break;
            case 'quarter':
                ret.setMonth(ret.getMonth() + 3 * units);
                checkRollover();
                break;
            case 'month':
                ret.setMonth(ret.getMonth() + units);
                checkRollover();
                break;
            case 'week':
                ret.setDate(ret.getDate() + 7 * units);
                break;
            case 'day':
                ret.setDate(ret.getDate() + units);
                break;
            case 'hour':
                ret.setTime(ret.getTime() + units * 3600000);
                break;
            case 'minute':
                ret.setTime(ret.getTime() + units * 60000);
                break;
            case 'second':
                ret.setTime(ret.getTime() + units * 1000);
                break;
            default:
                throw new Error('Invalid interval specifier');
        }
        return ret;
    };
    /**
     * @param {?} date
     * @param {?} locale
     * @param {?} options
     * @param {?} parts
     * @return {?}
     */
    Calendar.prototype.formatToParts = /**
     * @param {?} date
     * @param {?} locale
     * @param {?} options
     * @param {?} parts
     * @return {?}
     */
    function (date, locale, options, parts) {
        var /** @type {?} */ formatter = new Intl.DateTimeFormat(locale, options);
        var /** @type {?} */ result = {
            date: date,
            full: formatter.format(date)
        };
        if ((/** @type {?} */ (formatter)).formatToParts) {
            var /** @type {?} */ formattedParts_1 = (/** @type {?} */ (formatter)).formatToParts(date);
            var /** @type {?} */ toType = function (partType) {
                var /** @type {?} */ index = formattedParts_1.findIndex(function (_a) {
                    var type = _a.type;
                    return type === partType;
                });
                var /** @type {?} */ o = { value: '', literal: '', combined: '' };
                if (partType === 'era' && index > -1) {
                    o.value = formattedParts_1[index].value;
                    return o;
                }
                else if (partType === 'era' && index === -1) {
                    return o;
                }
                o.value = formattedParts_1[index].value;
                o.literal = formattedParts_1[index + 1] ? formattedParts_1[index + 1].value : '';
                o.combined = [o.value, o.literal].join('');
                return o;
            };
            try {
                for (var parts_1 = tslib_1.__values(parts), parts_1_1 = parts_1.next(); !parts_1_1.done; parts_1_1 = parts_1.next()) {
                    var each = parts_1_1.value;
                    result[each] = toType(each);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (parts_1_1 && !parts_1_1.done && (_a = parts_1.return)) _a.call(parts_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        else {
            try {
                for (var parts_2 = tslib_1.__values(parts), parts_2_1 = parts_2.next(); !parts_2_1.done; parts_2_1 = parts_2.next()) {
                    var each = parts_2_1.value;
                    result[each] = { value: '', literal: '', combined: '' };
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (parts_2_1 && !parts_2_1.done && (_b = parts_2.return)) _b.call(parts_2);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        return result;
        var e_4, _a, e_5, _b;
    };
    /**
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    Calendar.prototype.generateICalendarDate = /**
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (date, year, month) {
        return {
            date: date,
            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,
            isNextMonth: this.isNextMonth(date, year, month),
            isPrevMonth: this.isPreviousMonth(date, year, month)
        };
    };
    /**
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    Calendar.prototype.isPreviousMonth = /**
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (date, year, month) {
        if (date.getFullYear() === year) {
            return date.getMonth() < month;
        }
        return date.getFullYear() < year;
    };
    /**
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    Calendar.prototype.isNextMonth = /**
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (date, year, month) {
        if (date.getFullYear() === year) {
            return date.getMonth() > month;
        }
        return date.getFullYear() > year;
    };
    return Calendar;
}());
export { Calendar };
function Calendar_tsickle_Closure_declarations() {
    /** @type {?} */
    Calendar.prototype._firstWeekDay;
}

//# sourceMappingURL=data:application/json;base64,