import { Transaction, State } from './transaction';
import { IgxBaseTransactionService } from './base-transaction';
import { EventEmitter } from '@angular/core';
export declare class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {
    protected _transactions: T[];
    protected _redoStack: {
        transaction: T;
        recordRef: any;
        useInUndo?: boolean;
    }[];
    protected _undoStack: {
        transaction: T;
        recordRef: any;
        useInUndo?: boolean;
    }[];
    protected _states: Map<any, S>;
    readonly canUndo: boolean;
    readonly canRedo: boolean;
    onStateUpdate: EventEmitter<void>;
    add(transaction: T, recordRef?: any): void;
    private addTransaction(transaction, states, recordRef?, useInUndo?);
    getTransactionLog(id?: any): T[];
    getAggregatedChanges(mergeChanges: boolean): T[];
    getState(id: any): S;
    readonly enabled: boolean;
    getAggregatedValue(id: any, mergeChanges: boolean): any;
    endPending(commit: boolean): void;
    commit(data: any[]): void;
    clear(): void;
    undo(): void;
    redo(): void;
    /**
     * Verifies if the passed transaction is correct. If not throws an exception.
     * @param transaction Transaction to be verified
     */
    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void;
    /**
     * Updates the provided states collection according to passed transaction and recordRef
     * @param states States collection to apply the update to
     * @param transaction Transaction to apply to the current state
     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied
     */
    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void;
    /**
     * Compares the state with recordRef and clears all duplicated values. If any state ends as
     * empty object removes it from states.
     * @param state State to clean
     */
    protected cleanState(id: any, states: Map<any, S>): void;
}
