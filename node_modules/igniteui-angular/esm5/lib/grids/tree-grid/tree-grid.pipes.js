/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { cloneArray, cloneHierarchicalArray } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { GridBaseAPIService } from '../api.service';
/**
 * @hidden
 */
var IgxTreeGridHierarchizingPipe = /** @class */ (function () {
    function IgxTreeGridHierarchizingPipe(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} collection
     * @param {?} primaryKey
     * @param {?} foreignKey
     * @param {?} childDataKey
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxTreeGridHierarchizingPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} primaryKey
     * @param {?} foreignKey
     * @param {?} childDataKey
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (collection, primaryKey, foreignKey, childDataKey, id, pipeTrigger) {
        var /** @type {?} */ grid = this.gridAPI.get(id);
        var /** @type {?} */ hierarchicalRecords = [];
        var /** @type {?} */ treeGridRecordsMap = new Map();
        if (primaryKey && foreignKey) {
            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap);
            grid.flatData = grid.data;
        }
        else if (childDataKey) {
            var /** @type {?} */ flatData = [];
            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined, flatData, 0, treeGridRecordsMap);
            grid.flatData = flatData;
        }
        grid.records = treeGridRecordsMap;
        grid.rootRecords = hierarchicalRecords;
        return hierarchicalRecords;
    };
    /**
     * @param {?} primaryKey
     * @param {?} rowData
     * @return {?}
     */
    IgxTreeGridHierarchizingPipe.prototype.getRowID = /**
     * @param {?} primaryKey
     * @param {?} rowData
     * @return {?}
     */
    function (primaryKey, rowData) {
        return primaryKey ? rowData[primaryKey] : rowData;
    };
    /**
     * @param {?} id
     * @param {?} collection
     * @param {?} primaryKey
     * @param {?} foreignKey
     * @param {?} map
     * @return {?}
     */
    IgxTreeGridHierarchizingPipe.prototype.hierarchizeFlatData = /**
     * @param {?} id
     * @param {?} collection
     * @param {?} primaryKey
     * @param {?} foreignKey
     * @param {?} map
     * @return {?}
     */
    function (id, collection, primaryKey, foreignKey, map) {
        var _this = this;
        var /** @type {?} */ result = [];
        var /** @type {?} */ missingParentRecords = [];
        collection.forEach(function (row) {
            var /** @type {?} */ record = {
                rowID: _this.getRowID(primaryKey, row),
                data: row,
                children: [],
                path: []
            };
            var /** @type {?} */ parent = map.get(row[foreignKey]);
            if (parent) {
                record.parent = parent;
                if (parent) {
                    (_a = record.path).push.apply(_a, tslib_1.__spread(parent.path));
                    record.path.push(parent.rowID);
                }
                parent.children.push(record);
            }
            else {
                missingParentRecords.push(record);
            }
            map.set(row[primaryKey], record);
            var _a;
        });
        missingParentRecords.forEach(function (record) {
            var /** @type {?} */ parent = map.get(record.data[foreignKey]);
            if (parent) {
                record.parent = parent;
                parent.children.push(record);
            }
            else {
                result.push(record);
            }
        });
        this.setIndentationLevels(id, result, 0);
        return result;
    };
    /**
     * @param {?} id
     * @param {?} collection
     * @param {?} indentationLevel
     * @return {?}
     */
    IgxTreeGridHierarchizingPipe.prototype.setIndentationLevels = /**
     * @param {?} id
     * @param {?} collection
     * @param {?} indentationLevel
     * @return {?}
     */
    function (id, collection, indentationLevel) {
        for (var /** @type {?} */ i = 0; i < collection.length; i++) {
            var /** @type {?} */ record = collection[i];
            record.level = indentationLevel;
            record.expanded = this.gridAPI.get_row_expansion_state(id, record.rowID, record.level);
            if (record.children && record.children.length > 0) {
                this.setIndentationLevels(id, record.children, indentationLevel + 1);
            }
        }
    };
    /**
     * @param {?} id
     * @param {?} collection
     * @param {?} primaryKey
     * @param {?} childDataKey
     * @param {?} parent
     * @param {?} flatData
     * @param {?} indentationLevel
     * @param {?} map
     * @return {?}
     */
    IgxTreeGridHierarchizingPipe.prototype.hierarchizeRecursive = /**
     * @param {?} id
     * @param {?} collection
     * @param {?} primaryKey
     * @param {?} childDataKey
     * @param {?} parent
     * @param {?} flatData
     * @param {?} indentationLevel
     * @param {?} map
     * @return {?}
     */
    function (id, collection, primaryKey, childDataKey, parent, flatData, indentationLevel, map) {
        var /** @type {?} */ result = [];
        for (var /** @type {?} */ i = 0; i < collection.length; i++) {
            var /** @type {?} */ item = collection[i];
            var /** @type {?} */ record = {
                rowID: this.getRowID(primaryKey, item),
                data: item,
                parent: parent,
                level: indentationLevel,
                path: []
            };
            if (parent) {
                (_a = record.path).push.apply(_a, tslib_1.__spread(parent.path));
                record.path.push(parent.rowID);
            }
            record.expanded = this.gridAPI.get_row_expansion_state(id, record.rowID, record.level);
            flatData.push(item);
            map.set(record.rowID, record);
            record.children = item[childDataKey] ?
                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :
                undefined;
            result.push(record);
        }
        return result;
        var _a;
    };
    IgxTreeGridHierarchizingPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'treeGridHierarchizing',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    IgxTreeGridHierarchizingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
    ]; };
    return IgxTreeGridHierarchizingPipe;
}());
export { IgxTreeGridHierarchizingPipe };
function IgxTreeGridHierarchizingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridHierarchizingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridHierarchizingPipe.ctorParameters;
    /** @type {?} */
    IgxTreeGridHierarchizingPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
var IgxTreeGridFlatteningPipe = /** @class */ (function () {
    function IgxTreeGridFlatteningPipe(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} collection
     * @param {?} id
     * @param {?} expandedLevels
     * @param {?} expandedStates
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxTreeGridFlatteningPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} id
     * @param {?} expandedLevels
     * @param {?} expandedStates
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (collection, id, expandedLevels, expandedStates, pipeTrigger) {
        var /** @type {?} */ grid = this.gridAPI.get(id);
        var /** @type {?} */ data = [];
        grid.processedRootRecords = collection;
        grid.processedRecords = new Map();
        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);
        return data;
    };
    /**
     * @param {?} collection
     * @param {?=} data
     * @param {?=} expandedLevels
     * @param {?=} expandedStates
     * @param {?=} gridID
     * @param {?=} parentExpanded
     * @return {?}
     */
    IgxTreeGridFlatteningPipe.prototype.getFlatDataRecursive = /**
     * @param {?} collection
     * @param {?=} data
     * @param {?=} expandedLevels
     * @param {?=} expandedStates
     * @param {?=} gridID
     * @param {?=} parentExpanded
     * @return {?}
     */
    function (collection, data, expandedLevels, expandedStates, gridID, parentExpanded) {
        if (data === void 0) { data = []; }
        if (!collection || !collection.length) {
            return;
        }
        for (var /** @type {?} */ i = 0; i < collection.length; i++) {
            var /** @type {?} */ hierarchicalRecord = collection[i];
            if (parentExpanded) {
                data.push(hierarchicalRecord);
            }
            var /** @type {?} */ grid = this.gridAPI.get(gridID);
            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(gridID, hierarchicalRecord.rowID, hierarchicalRecord.level);
            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);
            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);
            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels, expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);
        }
    };
    /**
     * @param {?} grid
     * @param {?} record
     * @return {?}
     */
    IgxTreeGridFlatteningPipe.prototype.updateNonProcessedRecordExpansion = /**
     * @param {?} grid
     * @param {?} record
     * @return {?}
     */
    function (grid, record) {
        var /** @type {?} */ rec = grid.records.get(record.rowID);
        rec.expanded = record.expanded;
    };
    IgxTreeGridFlatteningPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'treeGridFlattening',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    IgxTreeGridFlatteningPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
    ]; };
    return IgxTreeGridFlatteningPipe;
}());
export { IgxTreeGridFlatteningPipe };
function IgxTreeGridFlatteningPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridFlatteningPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridFlatteningPipe.ctorParameters;
    /** @type {?} */
    IgxTreeGridFlatteningPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
var IgxTreeGridSortingPipe = /** @class */ (function () {
    function IgxTreeGridSortingPipe(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} hierarchicalData
     * @param {?} expressions
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxTreeGridSortingPipe.prototype.transform = /**
     * @param {?} hierarchicalData
     * @param {?} expressions
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (hierarchicalData, expressions, id, pipeTrigger) {
        var /** @type {?} */ state = { expressions: [] };
        var /** @type {?} */ grid = this.gridAPI.get(id);
        state.expressions = grid.sortingExpressions;
        var /** @type {?} */ result;
        if (!state.expressions.length) {
            result = hierarchicalData;
        }
        else {
            result = DataUtil.hierarchicalSort(hierarchicalData, state, undefined);
        }
        return result;
    };
    IgxTreeGridSortingPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'treeGridSorting',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    IgxTreeGridSortingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
    ]; };
    return IgxTreeGridSortingPipe;
}());
export { IgxTreeGridSortingPipe };
function IgxTreeGridSortingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridSortingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridSortingPipe.ctorParameters;
    /** @type {?} */
    IgxTreeGridSortingPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
var IgxTreeGridPagingPipe = /** @class */ (function () {
    function IgxTreeGridPagingPipe(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} collection
     * @param {?=} page
     * @param {?=} perPage
     * @param {?=} id
     * @param {?=} pipeTrigger
     * @return {?}
     */
    IgxTreeGridPagingPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?=} page
     * @param {?=} perPage
     * @param {?=} id
     * @param {?=} pipeTrigger
     * @return {?}
     */
    function (collection, page, perPage, id, pipeTrigger) {
        if (page === void 0) { page = 0; }
        if (perPage === void 0) { perPage = 15; }
        if (!this.gridAPI.get(id).paging) {
            return collection;
        }
        var /** @type {?} */ state = {
            index: page,
            recordsPerPage: perPage
        };
        var /** @type {?} */ result = DataUtil.page(cloneArray(collection), state);
        this.gridAPI.get(id).pagingState = state;
        return result;
    };
    IgxTreeGridPagingPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'treeGridPaging',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    IgxTreeGridPagingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
    ]; };
    return IgxTreeGridPagingPipe;
}());
export { IgxTreeGridPagingPipe };
function IgxTreeGridPagingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridPagingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridPagingPipe.ctorParameters;
    /** @type {?} */
    IgxTreeGridPagingPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
var IgxTreeGridTransactionPipe = /** @class */ (function () {
    function IgxTreeGridTransactionPipe(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} collection
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxTreeGridTransactionPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (collection, id, pipeTrigger) {
        var /** @type {?} */ grid = this.gridAPI.get(id);
        if (collection && grid.transactions.enabled) {
            var /** @type {?} */ primaryKey = grid.primaryKey;
            if (!primaryKey) {
                return collection;
            }
            var /** @type {?} */ foreignKey = grid.foreignKey;
            var /** @type {?} */ childDataKey = grid.childDataKey;
            if (foreignKey) {
                return DataUtil.mergeTransactions(cloneArray(collection), grid.transactions.getAggregatedChanges(true), grid.primaryKey);
            }
            else if (childDataKey) {
                return DataUtil.mergeHierarchicalTransactions(cloneHierarchicalArray(collection, childDataKey), grid.transactions.getAggregatedChanges(true), childDataKey, grid.primaryKey);
            }
        }
        return collection;
    };
    IgxTreeGridTransactionPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'treeGridTransaction',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    IgxTreeGridTransactionPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
    ]; };
    return IgxTreeGridTransactionPipe;
}());
export { IgxTreeGridTransactionPipe };
function IgxTreeGridTransactionPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxTreeGridTransactionPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxTreeGridTransactionPipe.ctorParameters;
    /** @type {?} */
    IgxTreeGridTransactionPipe.prototype.gridAPI;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ncmlkLnBpcGVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy90cmVlLWdyaWQvdHJlZS1ncmlkLnBpcGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUUzRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7SUFnQmhELHNDQUFZLE9BQWlEO1FBQ3pELElBQUksQ0FBQyxPQUFPLHFCQUEwQixPQUFPLENBQUEsQ0FBQztLQUNqRDs7Ozs7Ozs7OztJQUVNLGdEQUFTOzs7Ozs7Ozs7Y0FBQyxVQUFpQixFQUFFLFVBQWtCLEVBQUUsVUFBa0IsRUFBRSxZQUFvQixFQUM1RixFQUFVLEVBQUUsV0FBbUI7UUFDL0IscUJBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLHFCQUFJLG1CQUFtQixHQUFzQixFQUFFLENBQUM7UUFDaEQscUJBQU0sa0JBQWtCLEdBQUcsSUFBSSxHQUFHLEVBQXdCLENBQUM7UUFFM0QsRUFBRSxDQUFDLENBQUMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDM0IsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBQzNHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztTQUM3QjtRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FB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QzVDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUN4QjtZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO2dCQUN0QixNQUFNLENBQUMsUUFBUSxDQUFDLDZCQUE2QixDQUN6QyxzQkFBc0IsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLEVBQ2hELElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEVBQzVDLFlBQVksRUFDWixJQUFJLENBQUMsVUFBVSxDQUNsQixDQUFDO2FBQ0w7U0FDSjtRQUVELE1BQU0sQ0FBQyxVQUFVLENBQUM7S0FDckI7O2dCQXZDSixJQUFJLFNBQUM7b0JBQ0YsSUFBSSxFQUFFLHFCQUFxQjtvQkFDM0IsSUFBSSxFQUFFLElBQUk7aUJBQ2I7Ozs7Z0JBN1BRLGtCQUFrQjs7cUNBSjNCOztTQWtRYSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjbG9uZUFycmF5LCBjbG9uZUhpZXJhcmNoaWNhbEFycmF5IH0gZnJvbSAnLi4vLi4vY29yZS91dGlscyc7XG5pbXBvcnQgeyBEYXRhVXRpbCB9IGZyb20gJy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9kYXRhLXV0aWwnO1xuaW1wb3J0IHsgSWd4VHJlZUdyaWRBUElTZXJ2aWNlIH0gZnJvbSAnLi90cmVlLWdyaWQtYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgR3JpZEJhc2VBUElTZXJ2aWNlIH0gZnJvbSAnLi4vYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgSWd4VHJlZUdyaWRDb21wb25lbnQgfSBmcm9tICcuL3RyZWUtZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSVNvcnRpbmdFeHByZXNzaW9uIH0gZnJvbSAnLi4vLi4vLi4vcHVibGljX2FwaSc7XG5pbXBvcnQgeyBJVHJlZUdyaWRSZWNvcmQgfSBmcm9tICcuL3RyZWUtZ3JpZC5pbnRlcmZhY2VzJztcbmltcG9ydCB7IElneEdyaWRCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vZ3JpZCc7XG5cbi8qKlxuICpAaGlkZGVuXG4gKi9cbkBQaXBlKHtcbiAgICBuYW1lOiAndHJlZUdyaWRIaWVyYXJjaGl6aW5nJyxcbiAgICBwdXJlOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneFRyZWVHcmlkSGllcmFyY2hpemluZ1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICBwcml2YXRlIGdyaWRBUEk6IElneFRyZWVHcmlkQVBJU2VydmljZTtcblxuICAgIGNvbnN0cnVjdG9yKGdyaWRBUEk6IEdyaWRCYXNlQVBJU2VydmljZTxJZ3hHcmlkQmFzZUNvbXBvbmVudD4pIHtcbiAgICAgICAgdGhpcy5ncmlkQVBJID0gPElneFRyZWVHcmlkQVBJU2VydmljZT5ncmlkQVBJO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cmFuc2Zvcm0oY29sbGVjdGlvbjogYW55W10sIHByaW1hcnlLZXk6IHN0cmluZywgZm9yZWlnbktleTogc3RyaW5nLCBjaGlsZERhdGFLZXk6IHN0cmluZyxcbiAgICAgICAgaWQ6IHN0cmluZywgcGlwZVRyaWdnZXI6IG51bWJlcik6IElUcmVlR3JpZFJlY29yZFtdIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMuZ3JpZEFQSS5nZXQoaWQpO1xuICAgICAgICBsZXQgaGllcmFyY2hpY2FsUmVjb3JkczogSVRyZWVHcmlkUmVjb3JkW10gPSBbXTtcbiAgICAgICAgY29uc3QgdHJlZUdyaWRSZWNvcmRzTWFwID0gbmV3IE1hcDxhbnksIElUcmVlR3JpZFJlY29yZD4oKTtcblxuICAgICAgICBpZiAocHJpbWFyeUtleSAmJiBmb3JlaWduS2V5KSB7XG4gICAgICAgICAgICBoaWVyYXJjaGljYWxSZWNvcmRzID0gdGhpcy5oaWVyYXJjaGl6ZUZsYXREYXRhKGlkLCBjb2xsZWN0aW9uLCBwcmltYXJ5S2V5LCBmb3JlaWduS2V5LCB0cmVlR3JpZFJlY29yZHNNYXApO1xuICAgICAgICAgICAgZ3JpZC5mbGF0RGF0YSA9IGdyaWQuZGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZERhdGFLZXkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZsYXREYXRhOiBhbnlbXSA9IFtdO1xuICAgICAgICAgICAgaGllcmFyY2hpY2FsUmVjb3JkcyA9IHRoaXMuaGllcmFyY2hpemVSZWN1cnNpdmUoaWQsIGNvbGxlY3Rpb24sIHByaW1hcnlLZXksIGNoaWxkRGF0YUtleSwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZsYXREYXRhLCAwLCB0cmVlR3JpZFJlY29yZHNNYXApO1xuICAgICAgICAgICAgZ3JpZC5mbGF0RGF0YSA9IGZsYXREYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgZ3JpZC5yZWNvcmRzID0gdHJlZUdyaWRSZWNvcmRzTWFwO1xuICAgICAgICBncmlkLnJvb3RSZWNvcmRzID0gaGllcmFyY2hpY2FsUmVjb3JkcztcbiAgICAgICAgcmV0dXJuIGhpZXJhcmNoaWNhbFJlY29yZHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRSb3dJRChwcmltYXJ5S2V5OiBhbnksIHJvd0RhdGE6IGFueSkge1xuICAgICAgICByZXR1cm4gcHJpbWFyeUtleSA/IHJvd0RhdGFbcHJpbWFyeUtleV0gOiByb3dEYXRhO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGllcmFyY2hpemVGbGF0RGF0YShpZDogc3RyaW5nLCBjb2xsZWN0aW9uOiBhbnlbXSwgcHJpbWFyeUtleTogc3RyaW5nLCBmb3JlaWduS2V5OiBzdHJpbmcsIG1hcDogTWFwPGFueSwgSVRyZWVHcmlkUmVjb3JkPik6XG4gICAgICAgIElUcmVlR3JpZFJlY29yZFtdIHtcbiAgICAgICAgY29uc3QgcmVzdWx0OiBJVHJlZUdyaWRSZWNvcmRbXSA9IFtdO1xuICAgICAgICBjb25zdCBtaXNzaW5nUGFyZW50UmVjb3JkczogSVRyZWVHcmlkUmVjb3JkW10gPSBbXTtcbiAgICAgICAgY29sbGVjdGlvbi5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICAgICAgICBjb25zdCByZWNvcmQ6IElUcmVlR3JpZFJlY29yZCA9IHtcbiAgICAgICAgICAgICAgICByb3dJRDogdGhpcy5nZXRSb3dJRChwcmltYXJ5S2V5LCByb3cpLFxuICAgICAgICAgICAgICAgIGRhdGE6IHJvdyxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICAgICAgcGF0aDogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBtYXAuZ2V0KHJvd1tmb3JlaWduS2V5XSk7XG4gICAgICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY29yZC5wYXRoLnB1c2goLi4ucGFyZW50LnBhdGgpO1xuICAgICAgICAgICAgICAgICAgICByZWNvcmQucGF0aC5wdXNoKHBhcmVudC5yb3dJRCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbi5wdXNoKHJlY29yZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1pc3NpbmdQYXJlbnRSZWNvcmRzLnB1c2gocmVjb3JkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWFwLnNldChyb3dbcHJpbWFyeUtleV0sIHJlY29yZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1pc3NpbmdQYXJlbnRSZWNvcmRzLmZvckVhY2gocmVjb3JkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IG1hcC5nZXQocmVjb3JkLmRhdGFbZm9yZWlnbktleV0pO1xuICAgICAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgICAgIHJlY29yZC5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2gocmVjb3JkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocmVjb3JkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zZXRJbmRlbnRhdGlvbkxldmVscyhpZCwgcmVzdWx0LCAwKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0SW5kZW50YXRpb25MZXZlbHMoaWQ6IHN0cmluZywgY29sbGVjdGlvbjogSVRyZWVHcmlkUmVjb3JkW10sIGluZGVudGF0aW9uTGV2ZWw6IG51bWJlcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbGxlY3Rpb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZCA9IGNvbGxlY3Rpb25baV07XG4gICAgICAgICAgICByZWNvcmQubGV2ZWwgPSBpbmRlbnRhdGlvbkxldmVsO1xuICAgICAgICAgICAgcmVjb3JkLmV4cGFuZGVkID0gdGhpcy5ncmlkQVBJLmdldF9yb3dfZXhwYW5zaW9uX3N0YXRlKGlkLCByZWNvcmQucm93SUQsIHJlY29yZC5sZXZlbCk7XG5cbiAgICAgICAgICAgIGlmIChyZWNvcmQuY2hpbGRyZW4gJiYgcmVjb3JkLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEluZGVudGF0aW9uTGV2ZWxzKGlkLCByZWNvcmQuY2hpbGRyZW4sIGluZGVudGF0aW9uTGV2ZWwgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGllcmFyY2hpemVSZWN1cnNpdmUoaWQ6IHN0cmluZywgY29sbGVjdGlvbjogYW55W10sIHByaW1hcnlLZXk6IHN0cmluZywgY2hpbGREYXRhS2V5OiBzdHJpbmcsXG4gICAgICAgIHBhcmVudDogSVRyZWVHcmlkUmVjb3JkLCBmbGF0RGF0YTogYW55W10sIGluZGVudGF0aW9uTGV2ZWw6IG51bWJlciwgbWFwOiBNYXA8YW55LCBJVHJlZUdyaWRSZWNvcmQ+KTogSVRyZWVHcmlkUmVjb3JkW10ge1xuICAgICAgICBjb25zdCByZXN1bHQ6IElUcmVlR3JpZFJlY29yZFtdID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xsZWN0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gY29sbGVjdGlvbltpXTtcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZDogSVRyZWVHcmlkUmVjb3JkID0ge1xuICAgICAgICAgICAgICAgIHJvd0lEOiB0aGlzLmdldFJvd0lEKHByaW1hcnlLZXksIGl0ZW0pLFxuICAgICAgICAgICAgICAgIGRhdGE6IGl0ZW0sXG4gICAgICAgICAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgICAgICAgICAgbGV2ZWw6IGluZGVudGF0aW9uTGV2ZWwsXG4gICAgICAgICAgICAgICAgcGF0aDogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkLnBhdGgucHVzaCguLi5wYXJlbnQucGF0aCk7XG4gICAgICAgICAgICAgICAgcmVjb3JkLnBhdGgucHVzaChwYXJlbnQucm93SUQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjb3JkLmV4cGFuZGVkID0gdGhpcy5ncmlkQVBJLmdldF9yb3dfZXhwYW5zaW9uX3N0YXRlKGlkLCByZWNvcmQucm93SUQsIHJlY29yZC5sZXZlbCk7XG4gICAgICAgICAgICBmbGF0RGF0YS5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgbWFwLnNldChyZWNvcmQucm93SUQsIHJlY29yZCk7XG4gICAgICAgICAgICByZWNvcmQuY2hpbGRyZW4gPSBpdGVtW2NoaWxkRGF0YUtleV0gP1xuICAgICAgICAgICAgICAgIHRoaXMuaGllcmFyY2hpemVSZWN1cnNpdmUoaWQsIGl0ZW1bY2hpbGREYXRhS2V5XSwgcHJpbWFyeUtleSwgY2hpbGREYXRhS2V5LCByZWNvcmQsIGZsYXREYXRhLCBpbmRlbnRhdGlvbkxldmVsICsgMSwgbWFwKSA6XG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocmVjb3JkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4vKipcbiAqQGhpZGRlblxuICovXG5AUGlwZSh7XG4gICAgbmFtZTogJ3RyZWVHcmlkRmxhdHRlbmluZycsXG4gICAgcHVyZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hUcmVlR3JpZEZsYXR0ZW5pbmdQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSBncmlkQVBJOiBJZ3hUcmVlR3JpZEFQSVNlcnZpY2U7XG5cbiAgICBjb25zdHJ1Y3RvcihncmlkQVBJOiBHcmlkQmFzZUFQSVNlcnZpY2U8SWd4R3JpZEJhc2VDb21wb25lbnQ+KSB7XG4gICAgICAgIHRoaXMuZ3JpZEFQSSA9IDxJZ3hUcmVlR3JpZEFQSVNlcnZpY2U+Z3JpZEFQSTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdHJhbnNmb3JtKGNvbGxlY3Rpb246IElUcmVlR3JpZFJlY29yZFtdLCBpZDogc3RyaW5nLFxuICAgICAgICBleHBhbmRlZExldmVsczogbnVtYmVyLCBleHBhbmRlZFN0YXRlczogTWFwPGFueSwgYm9vbGVhbj4sIHBpcGVUcmlnZ2VyOiBudW1iZXIpOiBhbnlbXSB7XG5cbiAgICAgICAgY29uc3QgZ3JpZDogSWd4VHJlZUdyaWRDb21wb25lbnQgPSB0aGlzLmdyaWRBUEkuZ2V0KGlkKTtcbiAgICAgICAgY29uc3QgZGF0YTogSVRyZWVHcmlkUmVjb3JkW10gPSBbXTtcblxuICAgICAgICBncmlkLnByb2Nlc3NlZFJvb3RSZWNvcmRzID0gY29sbGVjdGlvbjtcbiAgICAgICAgZ3JpZC5wcm9jZXNzZWRSZWNvcmRzID0gbmV3IE1hcDxhbnksIElUcmVlR3JpZFJlY29yZD4oKTtcblxuICAgICAgICB0aGlzLmdldEZsYXREYXRhUmVjdXJzaXZlKGNvbGxlY3Rpb24sIGRhdGEsIGV4cGFuZGVkTGV2ZWxzLCBleHBhbmRlZFN0YXRlcywgaWQsIHRydWUpO1xuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RmxhdERhdGFSZWN1cnNpdmUoY29sbGVjdGlvbjogSVRyZWVHcmlkUmVjb3JkW10sIGRhdGE6IElUcmVlR3JpZFJlY29yZFtdID0gW10sXG4gICAgICAgIGV4cGFuZGVkTGV2ZWxzOiBudW1iZXIsIGV4cGFuZGVkU3RhdGVzOiBNYXA8YW55LCBib29sZWFuPiwgZ3JpZElEOiBzdHJpbmcsXG4gICAgICAgIHBhcmVudEV4cGFuZGVkOiBib29sZWFuKSB7XG4gICAgICAgIGlmICghY29sbGVjdGlvbiB8fCAhY29sbGVjdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaGllcmFyY2hpY2FsUmVjb3JkID0gY29sbGVjdGlvbltpXTtcblxuICAgICAgICAgICAgaWYgKHBhcmVudEV4cGFuZGVkKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKGhpZXJhcmNoaWNhbFJlY29yZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGdyaWQ6IElneFRyZWVHcmlkQ29tcG9uZW50ID0gdGhpcy5ncmlkQVBJLmdldChncmlkSUQpO1xuXG4gICAgICAgICAgICBoaWVyYXJjaGljYWxSZWNvcmQuZXhwYW5kZWQgPSB0aGlzLmdyaWRBUEkuZ2V0X3Jvd19leHBhbnNpb25fc3RhdGUoZ3JpZElELFxuICAgICAgICAgICAgICAgIGhpZXJhcmNoaWNhbFJlY29yZC5yb3dJRCwgaGllcmFyY2hpY2FsUmVjb3JkLmxldmVsKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTm9uUHJvY2Vzc2VkUmVjb3JkRXhwYW5zaW9uKGdyaWQsIGhpZXJhcmNoaWNhbFJlY29yZCk7XG5cbiAgICAgICAgICAgIGdyaWQucHJvY2Vzc2VkUmVjb3Jkcy5zZXQoaGllcmFyY2hpY2FsUmVjb3JkLnJvd0lELCBoaWVyYXJjaGljYWxSZWNvcmQpO1xuXG4gICAgICAgICAgICB0aGlzLmdldEZsYXREYXRhUmVjdXJzaXZlKGhpZXJhcmNoaWNhbFJlY29yZC5jaGlsZHJlbiwgZGF0YSwgZXhwYW5kZWRMZXZlbHMsXG4gICAgICAgICAgICAgICAgZXhwYW5kZWRTdGF0ZXMsIGdyaWRJRCwgcGFyZW50RXhwYW5kZWQgJiYgaGllcmFyY2hpY2FsUmVjb3JkLmV4cGFuZGVkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlTm9uUHJvY2Vzc2VkUmVjb3JkRXhwYW5zaW9uKGdyaWQ6IElneFRyZWVHcmlkQ29tcG9uZW50LCByZWNvcmQ6IElUcmVlR3JpZFJlY29yZCkge1xuICAgICAgICBjb25zdCByZWMgPSBncmlkLnJlY29yZHMuZ2V0KHJlY29yZC5yb3dJRCk7XG4gICAgICAgIHJlYy5leHBhbmRlZCA9IHJlY29yZC5leHBhbmRlZDtcbiAgICB9XG59XG5cbi8qKiBAaGlkZGVuICovXG5AUGlwZSh7XG4gICAgbmFtZTogJ3RyZWVHcmlkU29ydGluZycsXG4gICAgcHVyZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hUcmVlR3JpZFNvcnRpbmdQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSBncmlkQVBJOiBJZ3hUcmVlR3JpZEFQSVNlcnZpY2U7XG5cbiAgICBjb25zdHJ1Y3RvcihncmlkQVBJOiBHcmlkQmFzZUFQSVNlcnZpY2U8SWd4R3JpZEJhc2VDb21wb25lbnQ+KSB7XG4gICAgICAgIHRoaXMuZ3JpZEFQSSA9IDxJZ3hUcmVlR3JpZEFQSVNlcnZpY2U+Z3JpZEFQSTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdHJhbnNmb3JtKFxuICAgICAgICBoaWVyYXJjaGljYWxEYXRhOiBJVHJlZUdyaWRSZWNvcmRbXSxcbiAgICAgICAgZXhwcmVzc2lvbnM6IElTb3J0aW5nRXhwcmVzc2lvbiB8IElTb3J0aW5nRXhwcmVzc2lvbltdLFxuICAgICAgICBpZDogc3RyaW5nLFxuICAgICAgICBwaXBlVHJpZ2dlcjogbnVtYmVyKTogSVRyZWVHcmlkUmVjb3JkW10ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHsgZXhwcmVzc2lvbnM6IFtdIH07XG4gICAgICAgIGNvbnN0IGdyaWQgPSB0aGlzLmdyaWRBUEkuZ2V0KGlkKTtcbiAgICAgICAgc3RhdGUuZXhwcmVzc2lvbnMgPSBncmlkLnNvcnRpbmdFeHByZXNzaW9ucztcblxuICAgICAgICBsZXQgcmVzdWx0OiBJVHJlZUdyaWRSZWNvcmRbXTtcbiAgICAgICAgaWYgKCFzdGF0ZS5leHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhpZXJhcmNoaWNhbERhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBEYXRhVXRpbC5oaWVyYXJjaGljYWxTb3J0KGhpZXJhcmNoaWNhbERhdGEsIHN0YXRlLCB1bmRlZmluZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbi8qKiBAaGlkZGVuICovXG5AUGlwZSh7XG4gICAgbmFtZTogJ3RyZWVHcmlkUGFnaW5nJyxcbiAgICBwdXJlOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneFRyZWVHcmlkUGFnaW5nUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHByaXZhdGUgZ3JpZEFQSTogSWd4VHJlZUdyaWRBUElTZXJ2aWNlO1xuXG4gICAgY29uc3RydWN0b3IoZ3JpZEFQSTogR3JpZEJhc2VBUElTZXJ2aWNlPElneEdyaWRCYXNlQ29tcG9uZW50Pikge1xuICAgICAgICB0aGlzLmdyaWRBUEkgPSA8SWd4VHJlZUdyaWRBUElTZXJ2aWNlPmdyaWRBUEk7XG4gICAgfVxuXG4gICAgcHVibGljIHRyYW5zZm9ybShjb2xsZWN0aW9uOiBJVHJlZUdyaWRSZWNvcmRbXSwgcGFnZSA9IDAsIHBlclBhZ2UgPSAxNSwgaWQ6IHN0cmluZywgcGlwZVRyaWdnZXI6IG51bWJlcik6IElUcmVlR3JpZFJlY29yZFtdIHtcbiAgICAgICAgaWYgKCF0aGlzLmdyaWRBUEkuZ2V0KGlkKS5wYWdpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgICAgICBpbmRleDogcGFnZSxcbiAgICAgICAgICAgIHJlY29yZHNQZXJQYWdlOiBwZXJQYWdlXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0OiBJVHJlZUdyaWRSZWNvcmRbXSA9IERhdGFVdGlsLnBhZ2UoY2xvbmVBcnJheShjb2xsZWN0aW9uKSwgc3RhdGUpO1xuXG4gICAgICAgIHRoaXMuZ3JpZEFQSS5nZXQoaWQpLnBhZ2luZ1N0YXRlID0gc3RhdGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuLyoqIEBoaWRkZW4gKi9cbkBQaXBlKHtcbiAgICBuYW1lOiAndHJlZUdyaWRUcmFuc2FjdGlvbicsXG4gICAgcHVyZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hUcmVlR3JpZFRyYW5zYWN0aW9uUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gICAgcHJpdmF0ZSBncmlkQVBJOiBJZ3hUcmVlR3JpZEFQSVNlcnZpY2U7XG5cbiAgICBjb25zdHJ1Y3RvcihncmlkQVBJOiBHcmlkQmFzZUFQSVNlcnZpY2U8SWd4R3JpZEJhc2VDb21wb25lbnQ+KSB7XG4gICAgICAgIHRoaXMuZ3JpZEFQSSA9IDxJZ3hUcmVlR3JpZEFQSVNlcnZpY2U+Z3JpZEFQSTtcbiAgICB9XG5cbiAgICB0cmFuc2Zvcm0oY29sbGVjdGlvbjogYW55W10sIGlkOiBzdHJpbmcsIHBpcGVUcmlnZ2VyOiBudW1iZXIpOiBhbnlbXSB7XG4gICAgICAgIGNvbnN0IGdyaWQ6IElneFRyZWVHcmlkQ29tcG9uZW50ID0gdGhpcy5ncmlkQVBJLmdldChpZCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uICYmIGdyaWQudHJhbnNhY3Rpb25zLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHByaW1hcnlLZXkgPSBncmlkLnByaW1hcnlLZXk7XG4gICAgICAgICAgICBpZiAoIXByaW1hcnlLZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZm9yZWlnbktleSA9IGdyaWQuZm9yZWlnbktleTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkRGF0YUtleSA9IGdyaWQuY2hpbGREYXRhS2V5O1xuXG4gICAgICAgICAgICBpZiAoZm9yZWlnbktleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBEYXRhVXRpbC5tZXJnZVRyYW5zYWN0aW9ucyhcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVBcnJheShjb2xsZWN0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgZ3JpZC50cmFuc2FjdGlvbnMuZ2V0QWdncmVnYXRlZENoYW5nZXModHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgIGdyaWQucHJpbWFyeUtleSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkRGF0YUtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBEYXRhVXRpbC5tZXJnZUhpZXJhcmNoaWNhbFRyYW5zYWN0aW9ucyhcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVIaWVyYXJjaGljYWxBcnJheShjb2xsZWN0aW9uLCBjaGlsZERhdGFLZXkpLFxuICAgICAgICAgICAgICAgICAgICBncmlkLnRyYW5zYWN0aW9ucy5nZXRBZ2dyZWdhdGVkQ2hhbmdlcyh0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGREYXRhS2V5LFxuICAgICAgICAgICAgICAgICAgICBncmlkLnByaW1hcnlLZXlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxufVxuIl19