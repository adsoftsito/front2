/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input } from '@angular/core';
import { IgxDropDownComponent } from './drop-down.component';
/**
 * The `<igx-drop-down-item>` is a container intended for row items in
 * a `<igx-drop-down>` container.
 */
export class IgxDropDownItemBase {
    /**
     * @param {?} dropDown
     * @param {?} elementRef
     */
    constructor(dropDown, elementRef) {
        this.dropDown = dropDown;
        this.elementRef = elementRef;
        /**
         * @hidden
         */
        this._isFocused = false;
        /**
         * Sets/gets if the given item is header
         * ```typescript
         *  // get
         *  let mySelectedItem = this.dropdown.selectedItem;
         *  let isMyItemHeader = mySelectedItem.isHeader;
         * ```
         *
         * ```html
         *  <!--set-->
         *  <igx-dropdown-item *ngFor="let item of items">
         *      <div *ngIf="items.indexOf(item) === 5; then item.isHeader = true">
         *          {{item.field}}
         *           </div>
         *  </igx-drop-down-item>
         * ```
         */
        this.isHeader = false;
        /**
         * Sets/gets if the given item is disabled
         *
         * ```typescript
         *  // get
         *  let mySelectedItem = this.dropdown.selectedItem;
         *  let myItemIsDisabled = mySelectedItem.disabled;
         * ```
         *
         * ```html
         *  <igx-drop-down-item *ngFor="let item of items" disabled={{!item.disabled}}>
         *      <div>
         *          {{item.field}}
         *      </div>
         *  </igx-drop-down-item>
         * ```
         */
        this.disabled = false;
    }
    /**
     * @hidden
     * @return {?}
     */
    get itemID() {
        return;
    }
    /**
     * @hidden
     * @return {?}
     */
    get itemStyle() {
        return !this.isHeader;
    }
    /**
     * Gets if the item is the currently selected one in the dropdown
     *
     * ```typescript
     *  let mySelectedItem = this.dropdown.selectedItem;
     *  let isMyItemSelected = mySelectedItem.isSelected; // true
     * ```
     * @return {?}
     */
    get isSelected() {
        return this.dropDown.selectedItem === this;
    }
    /**
     * @hidden
     * @return {?}
     */
    get selectedStyle() {
        return this.isSelected;
    }
    /**
     * Sets/gets if the given item is focused
     * ```typescript
     *  let mySelectedItem = this.dropdown.selectedItem;
     *  let isMyItemFocused = mySelectedItem.isFocused;
     * ```
     * @return {?}
     */
    get isFocused() {
        return this._isFocused;
    }
    /**
     * ```html
     *  <igx-drop-down-item *ngFor="let item of items" isFocused={{!item.isFocused}}>
     *      <div>
     *          {{item.field}}
     *      </div>
     *  </igx-drop-down-item>
     * ```
     * @param {?} value
     * @return {?}
     */
    set isFocused(value) {
        if (this.disabled || this.isHeader) {
            this._isFocused = false;
            return;
        }
        if (this.dropDown.allowItemsFocus && value && !this.dropDown.collapsed) {
            this.elementRef.nativeElement.focus({ preventScroll: true });
        }
        this._isFocused = value;
    }
    /**
     * @hidden
     * @return {?}
     */
    get setTabIndex() {
        const /** @type {?} */ shouldSetTabIndex = this.dropDown.allowItemsFocus && !(this.disabled || this.isHeader);
        if (shouldSetTabIndex) {
            return 0;
        }
        else {
            return null;
        }
    }
    /**
     * Gets item index
     * @hidden
     * @return {?}
     */
    get index() {
        return this.dropDown.items.indexOf(this);
    }
    /**
     * Gets item element height
     * @hidden
     * @return {?}
     */
    get elementHeight() {
        return this.elementRef.nativeElement.clientHeight;
    }
    /**
     * Get item html element
     * @hidden
     * @return {?}
     */
    get element() {
        return this.elementRef;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    clicked(event) {
        if (this.disabled || this.isHeader) {
            const /** @type {?} */ focusedItem = this.dropDown.items.find((item) => item.isFocused);
            if (this.dropDown.allowItemsFocus && focusedItem) {
                focusedItem.elementRef.nativeElement.focus({ preventScroll: true });
            }
            return;
        }
        this.dropDown.navigateItem(this.index);
        this.dropDown.selectItem(this, event);
    }
    /**
     * @hidden
     * @return {?}
     */
    markItemSelected() {
        this.dropDown.setSelectedItem(this.index);
        this.dropDown.close();
    }
}
IgxDropDownItemBase.propDecorators = {
    "value": [{ type: Input },],
    "itemStyle": [{ type: HostBinding, args: ['class.igx-drop-down__item',] },],
    "selectedStyle": [{ type: HostBinding, args: ['attr.aria-selected',] }, { type: HostBinding, args: ['class.igx-drop-down__item--selected',] },],
    "isFocused": [{ type: HostBinding, args: ['class.igx-drop-down__item--focused',] },],
    "isHeader": [{ type: Input }, { type: HostBinding, args: ['class.igx-drop-down__header',] },],
    "disabled": [{ type: Input }, { type: HostBinding, args: ['class.igx-drop-down__item--disabled',] },],
    "setTabIndex": [{ type: HostBinding, args: ['attr.tabindex',] },],
    "clicked": [{ type: HostListener, args: ['click', ['$event'],] },],
};
function IgxDropDownItemBase_tsickle_Closure_declarations() {
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxDropDownItemBase.propDecorators;
    /**
     * @hidden
     * @type {?}
     */
    IgxDropDownItemBase.prototype._isFocused;
    /**
     * Gets/sets the value of the item if the item is databound
     *
     * ```typescript
     * // usage in IgxDropDownItemComponent
     * // get
     * let mySelectedItemValue = this.dropdown.selectedItem.value;
     *
     * // set
     * let mySelectedItem = this.dropdown.selectedItem;
     * mySelectedItem.value = { id: 123, name: 'Example Name' }
     *
     * // usage in IgxComboItemComponent
     * // get
     * let myComboItemValue = this.combo.items[0].value;
     * ```
     * @type {?}
     */
    IgxDropDownItemBase.prototype.value;
    /**
     * Sets/gets if the given item is header
     * ```typescript
     *  // get
     *  let mySelectedItem = this.dropdown.selectedItem;
     *  let isMyItemHeader = mySelectedItem.isHeader;
     * ```
     *
     * ```html
     *  <!--set-->
     *  <igx-dropdown-item *ngFor="let item of items">
     *      <div *ngIf="items.indexOf(item) === 5; then item.isHeader = true">
     *          {{item.field}}
     *           </div>
     *  </igx-drop-down-item>
     * ```
     * @type {?}
     */
    IgxDropDownItemBase.prototype.isHeader;
    /**
     * Sets/gets if the given item is disabled
     *
     * ```typescript
     *  // get
     *  let mySelectedItem = this.dropdown.selectedItem;
     *  let myItemIsDisabled = mySelectedItem.disabled;
     * ```
     *
     * ```html
     *  <igx-drop-down-item *ngFor="let item of items" disabled={{!item.disabled}}>
     *      <div>
     *          {{item.field}}
     *      </div>
     *  </igx-drop-down-item>
     * ```
     * @type {?}
     */
    IgxDropDownItemBase.prototype.disabled;
    /** @type {?} */
    IgxDropDownItemBase.prototype.dropDown;
    /** @type {?} */
    IgxDropDownItemBase.prototype.elementRef;
}
export class IgxDropDownItemComponent extends IgxDropDownItemBase {
    /**
     * @param {?} dropDown
     * @param {?} elementRef
     */
    constructor(dropDown, elementRef) {
        super(dropDown, elementRef);
        this.dropDown = dropDown;
        this.elementRef = elementRef;
        /**
         * @hidden
         */
        this._isSelected = false;
    }
    /**
     * Sets/Gets if the item is the currently selected one in the dropdown
     *
     * ```typescript
     *  let mySelectedItem = this.dropdown.selectedItem;
     *  let isMyItemSelected = mySelectedItem.isSelected; // true
     * ```
     * @return {?}
     */
    get isSelected() {
        return this._isSelected;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isSelected(value) {
        if (this.isHeader) {
            return;
        }
        this._isSelected = value;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.isSelected) {
            const /** @type {?} */ dropDownSelectedItem = this.dropDown.selectedItem;
            if (!dropDownSelectedItem || this !== dropDownSelectedItem) {
                this.dropDown.selectItem(this);
            }
        }
    }
}
IgxDropDownItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-drop-down-item',
                template: `<ng-content></ng-content>`
            },] },
];
/** @nocollapse */
IgxDropDownItemComponent.ctorParameters = () => [
    { type: IgxDropDownComponent, decorators: [{ type: Inject, args: [forwardRef(() => IgxDropDownComponent),] },] },
    { type: ElementRef, },
];
IgxDropDownItemComponent.propDecorators = {
    "isSelected": [{ type: Input },],
};
function IgxDropDownItemComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxDropDownItemComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxDropDownItemComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxDropDownItemComponent.propDecorators;
    /**
     * @hidden
     * @type {?}
     */
    IgxDropDownItemComponent.prototype._isSelected;
    /** @type {?} */
    IgxDropDownItemComponent.prototype.dropDown;
    /** @type {?} */
    IgxDropDownItemComponent.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,