/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { filteringStateDefaults } from './filtering-state.interface';
import { SortingStateDefaults } from './sorting-state.interface';
import { TreeGridSortingStrategy } from './sorting-strategy';
import { PagingError } from './paging-state.interface';
import { TransactionType } from '../services';
import { mergeObjects, cloneValue } from '../core/utils';
/** @enum {string} */
const DataType = {
    String: 'string',
    Number: 'number',
    Boolean: 'boolean',
    Date: 'date',
};
export { DataType };
/**
 * @hidden
 */
export class DataUtil {
    /**
     * @param {?} target
     * @param {?} defaults
     * @return {?}
     */
    static mergeDefaultProperties(target, defaults) {
        if (!defaults) {
            return target;
        }
        if (!target) {
            target = Object.assign({}, defaults);
            return target;
        }
        Object
            .keys(defaults)
            .forEach((key) => {
            if (target[key] === undefined && defaults[key] !== undefined) {
                target[key] = defaults[key];
            }
        });
        return target;
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    static sort(data, state) {
        // set defaults
        DataUtil.mergeDefaultProperties(state, SortingStateDefaults);
        // apply default settings for each sorting expression(if not set)
        return state.strategy.sort(data, state.expressions);
    }
    /**
     * @param {?} hierarchicalData
     * @param {?} state
     * @param {?} parent
     * @return {?}
     */
    static hierarchicalSort(hierarchicalData, state, parent) {
        state.strategy = new TreeGridSortingStrategy();
        let /** @type {?} */ res = [];
        hierarchicalData.forEach((hr) => {
            const /** @type {?} */ rec = DataUtil.cloneTreeGridRecord(hr);
            rec.parent = parent;
            if (rec.children) {
                rec.children = DataUtil.hierarchicalSort(rec.children, state, rec);
            }
            res.push(rec);
        });
        res = DataUtil.sort(res, state);
        return res;
    }
    /**
     * @param {?} hierarchicalRecord
     * @return {?}
     */
    static cloneTreeGridRecord(hierarchicalRecord) {
        const /** @type {?} */ rec = {
            rowID: hierarchicalRecord.rowID,
            data: hierarchicalRecord.data,
            children: hierarchicalRecord.children,
            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,
            level: hierarchicalRecord.level,
            expanded: hierarchicalRecord.expanded,
            path: [...hierarchicalRecord.path]
        };
        return rec;
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    static group(data, state) {
        // set defaults
        DataUtil.mergeDefaultProperties(state, SortingStateDefaults);
        // apply default settings for each grouping expression(if not set)
        return state.strategy.groupBy(data, state.expressions);
    }
    /**
     * @param {?} groupData
     * @param {?} state
     * @param {?=} groupsRecords
     * @return {?}
     */
    static restoreGroups(groupData, state, groupsRecords = []) {
        DataUtil.mergeDefaultProperties(state, SortingStateDefaults);
        if (state.expressions.length === 0) {
            return groupData.data;
        }
        return this.restoreGroupsRecursive(groupData, 1, state.expressions.length, state.expansion, state.defaultExpanded, groupsRecords);
    }
    /**
     * @param {?} groupData
     * @param {?} level
     * @param {?} depth
     * @param {?} expansion
     * @param {?} defaultExpanded
     * @param {?} groupsRecords
     * @return {?}
     */
    static restoreGroupsRecursive(groupData, level, depth, expansion, defaultExpanded, groupsRecords) {
        let /** @type {?} */ i = 0;
        let /** @type {?} */ j;
        let /** @type {?} */ result = [];
        // empty the array without changing reference
        groupsRecords.splice(0, groupsRecords.length);
        if (level !== depth) {
            groupData.data = this.restoreGroupsRecursive(groupData, level + 1, depth, expansion, defaultExpanded, groupsRecords);
        }
        while (i < groupData.data.length) {
            const /** @type {?} */ g = level === depth ? groupData.metadata[i] :
                groupData.data[i].groupParent;
            for (j = i + 1; j < groupData.data.length; j++) {
                const /** @type {?} */ h = level === depth ? groupData.metadata[j] :
                    groupData.data[j].groupParent;
                if (h && g !== h && g.level === h.level) {
                    break;
                }
            }
            const /** @type {?} */ hierarchy = this.getHierarchy(g);
            const /** @type {?} */ expandState = expansion.find((state) => this.isHierarchyMatch(state.hierarchy || [{ fieldName: g.expression.fieldName, value: g.value }], hierarchy));
            const /** @type {?} */ expanded = expandState ? expandState.expanded : defaultExpanded;
            result.push(g);
            groupsRecords.push(g);
            g['groups'] = groupData.data.slice(i, j).filter((e) => e.records && e.records.length && e.level === g.level + 1);
            while (groupsRecords.length) {
                if (groupsRecords[0].level + 1 > level) {
                    groupsRecords.shift();
                }
                else {
                    break;
                }
            }
            if (expanded) {
                result = result.concat(groupData.data.slice(i, j));
            }
            i = j;
        }
        return result;
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    static page(data, state) {
        if (!state) {
            return data;
        }
        const /** @type {?} */ len = data.length;
        const /** @type {?} */ index = state.index;
        const /** @type {?} */ res = [];
        const /** @type {?} */ recordsPerPage = state.recordsPerPage;
        state.metadata = {
            countPages: 0,
            countRecords: data.length,
            error: PagingError.None
        };
        if (index < 0 || isNaN(index)) {
            state.metadata.error = PagingError.IncorrectPageIndex;
            return res;
        }
        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {
            state.metadata.error = PagingError.IncorrectRecordsPerPage;
            return res;
        }
        state.metadata.countPages = Math.ceil(len / recordsPerPage);
        if (!len) {
            return data;
        }
        if (index >= state.metadata.countPages) {
            state.metadata.error = PagingError.IncorrectPageIndex;
            return res;
        }
        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    static filter(data, state) {
        // set defaults
        DataUtil.mergeDefaultProperties(state, filteringStateDefaults);
        if (!state.strategy) {
            return data;
        }
        return state.strategy.filter(data, state.expressionsTree);
    }
    /**
     * @template T
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    static process(data, state) {
        if (!state) {
            return data;
        }
        if (state.filtering) {
            data = DataUtil.filter(data, state.filtering);
        }
        if (state.sorting) {
            data = DataUtil.sort(data, state.sorting);
        }
        if (state.paging) {
            data = DataUtil.page(data, state.paging);
        }
        return data;
    }
    /**
     * @param {?} gRow
     * @return {?}
     */
    static getHierarchy(gRow) {
        const /** @type {?} */ hierarchy = [];
        if (gRow !== undefined && gRow.expression) {
            hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });
            while (gRow.groupParent) {
                gRow = gRow.groupParent;
                hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });
            }
        }
        return hierarchy;
    }
    /**
     * @param {?} h1
     * @param {?} h2
     * @return {?}
     */
    static isHierarchyMatch(h1, h2) {
        if (h1.length !== h2.length) {
            return false;
        }
        return h1.every((level, index) => {
            return level.fieldName === h2[index].fieldName && level.value === h2[index].value;
        });
    }
    /**
     * Merges all changes from provided transactions into provided data collection
     * @template T
     * @param {?} data Collection to merge
     * @param {?} transactions Transactions to merge into data
     * @param {?=} primaryKey Primary key of the collection, if any
     * @return {?}
     */
    static mergeTransactions(data, transactions, primaryKey) {
        data.forEach((item, index) => {
            const /** @type {?} */ rowId = primaryKey ? item[primaryKey] : item;
            const /** @type {?} */ transaction = transactions.find(t => t.id === rowId);
            if (Array.isArray(item.children)) {
                this.mergeTransactions(item.children, transactions, primaryKey);
            }
            if (transaction && transaction.type === TransactionType.UPDATE) {
                data[index] = transaction.newValue;
            }
        });
        data.push(...transactions
            .filter(t => t.type === TransactionType.ADD)
            .map(t => t.newValue));
        return data;
    }
    /**
     * \@experimental \@hidden
     * @param {?} data
     * @param {?} transactions
     * @param {?} childDataKey
     * @param {?=} primaryKey
     * @param {?=} parentKey
     * @return {?}
     */
    static mergeHierarchicalTransactions(data, transactions, childDataKey, primaryKey, parentKey) {
        for (let /** @type {?} */ index = 0; index < data.length; index++) {
            const /** @type {?} */ dataItem = data[index];
            const /** @type {?} */ rowId = primaryKey ? dataItem[primaryKey] : dataItem;
            const /** @type {?} */ updateTransaction = transactions.filter(t => t.type === TransactionType.UPDATE).find(t => t.id === rowId);
            const /** @type {?} */ addedTransactions = transactions.filter(t => t.type === TransactionType.ADD).filter(t => t.parentId === rowId);
            if (updateTransaction || addedTransactions.length > 0) {
                data[index] = mergeObjects(cloneValue(dataItem), updateTransaction && updateTransaction.newValue);
            }
            if (addedTransactions.length > 0) {
                if (!data[index][childDataKey]) {
                    data[index][childDataKey] = [];
                }
                for (const /** @type {?} */ addedTransaction of addedTransactions) {
                    data[index][childDataKey].push(addedTransaction.newValue);
                }
            }
            if (data[index][childDataKey]) {
                data[index][childDataKey] = this.mergeHierarchicalTransactions(data[index][childDataKey], transactions, childDataKey, primaryKey, rowId);
            }
        }
        return data;
    }
}

//# sourceMappingURL=data:application/json;base64,