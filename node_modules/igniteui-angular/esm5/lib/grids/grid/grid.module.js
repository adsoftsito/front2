/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { IgxGroupAreaDropDirective, IgxGroupByRowTemplateDirective } from './grid.directives';
import { IgxGridComponent } from './grid.component';
import { IgxGridPagingPipe, IgxGridPostGroupingPipe, IgxGridPreGroupingPipe, IgxGridSortingPipe, IgxGridFilteringPipe } from './grid.pipes';
import { IgxGridGroupByRowComponent } from './groupby-row.component';
import { IgxGridRowComponent } from './grid-row.component';
import { IgxChipsModule } from '../../chips/chips.module';
import { IgxGridCommonModule } from '../grid-common.module';
import { DeprecateMethod } from '../../core/deprecateDecorators';
/**
 * @hidden
 */
var IgxGridModule = /** @class */ (function () {
    function IgxGridModule() {
    }
    /**
     * @return {?}
     */
    IgxGridModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: IgxGridModule
        };
    };
    IgxGridModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        IgxGridComponent,
                        IgxGridRowComponent,
                        IgxGridGroupByRowComponent,
                        IgxGroupByRowTemplateDirective,
                        IgxGroupAreaDropDirective,
                        IgxGridPreGroupingPipe,
                        IgxGridPostGroupingPipe,
                        IgxGridPagingPipe,
                        IgxGridSortingPipe,
                        IgxGridFilteringPipe
                    ],
                    exports: [
                        IgxGridComponent,
                        IgxGridGroupByRowComponent,
                        IgxGridRowComponent,
                        IgxGroupByRowTemplateDirective,
                        IgxGroupAreaDropDirective,
                        IgxGridCommonModule
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        IgxChipsModule,
                        IgxGridCommonModule
                    ]
                },] },
    ];
    tslib_1.__decorate([
        DeprecateMethod('IgxGridModule.forRoot method is deprecated. Use IgxGridModule instead.'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], IgxGridModule, "forRoot", null);
    return IgxGridModule;
}());
export { IgxGridModule };
function IgxGridModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL2dyaWQvZ3JpZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUNILHlCQUF5QixFQUN6Qiw4QkFBOEIsRUFDakMsTUFBTSxtQkFBbUIsQ0FBQztBQUMzQixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNwRCxPQUFPLEVBQ0gsaUJBQWlCLEVBQ2pCLHVCQUF1QixFQUN2QixzQkFBc0IsRUFDdEIsa0JBQWtCLEVBQ2xCLG9CQUFvQixFQUN2QixNQUFNLGNBQWMsQ0FBQztBQUN0QixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7Ozs7Ozs7O0lBbUNqRCxxQkFBTzs7OztRQUNuQixNQUFNLENBQUM7WUFDSCxRQUFRLEVBQUUsYUFBYTtTQUMxQixDQUFDO0tBQ0g7O2dCQWxDRixRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFO3dCQUNaLGdCQUFnQjt3QkFDaEIsbUJBQW1CO3dCQUNuQiwwQkFBMEI7d0JBQzFCLDhCQUE4Qjt3QkFDOUIseUJBQXlCO3dCQUN6QixzQkFBc0I7d0JBQ3RCLHVCQUF1Qjt3QkFDdkIsaUJBQWlCO3dCQUNqQixrQkFBa0I7d0JBQ2xCLG9CQUFvQjtxQkFDckI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNQLGdCQUFnQjt3QkFDaEIsMEJBQTBCO3dCQUMxQixtQkFBbUI7d0JBQ25CLDhCQUE4Qjt3QkFDOUIseUJBQXlCO3dCQUN6QixtQkFBbUI7cUJBQ3BCO29CQUNELE9BQU8sRUFBRTt3QkFDUCxZQUFZO3dCQUNaLFdBQVc7d0JBQ1gsY0FBYzt3QkFDZCxtQkFBbUI7cUJBQ3BCO2lCQUNGOzs7UUFFRSxlQUFlLENBQUMsd0VBQXdFLENBQUM7Ozs7c0NBS3pGO3dCQTFESDs7U0FvRGEsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1xuICAgIElneEdyb3VwQXJlYURyb3BEaXJlY3RpdmUsXG4gICAgSWd4R3JvdXBCeVJvd1RlbXBsYXRlRGlyZWN0aXZlXG59IGZyb20gJy4vZ3JpZC5kaXJlY3RpdmVzJztcbmltcG9ydCB7IElneEdyaWRDb21wb25lbnQgfSBmcm9tICcuL2dyaWQuY29tcG9uZW50JztcbmltcG9ydCB7XG4gICAgSWd4R3JpZFBhZ2luZ1BpcGUsXG4gICAgSWd4R3JpZFBvc3RHcm91cGluZ1BpcGUsXG4gICAgSWd4R3JpZFByZUdyb3VwaW5nUGlwZSxcbiAgICBJZ3hHcmlkU29ydGluZ1BpcGUsXG4gICAgSWd4R3JpZEZpbHRlcmluZ1BpcGVcbn0gZnJvbSAnLi9ncmlkLnBpcGVzJztcbmltcG9ydCB7IElneEdyaWRHcm91cEJ5Um93Q29tcG9uZW50IH0gZnJvbSAnLi9ncm91cGJ5LXJvdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4R3JpZFJvd0NvbXBvbmVudCB9IGZyb20gJy4vZ3JpZC1yb3cuY29tcG9uZW50JztcbmltcG9ydCB7IElneENoaXBzTW9kdWxlIH0gZnJvbSAnLi4vLi4vY2hpcHMvY2hpcHMubW9kdWxlJztcbmltcG9ydCB7IElneEdyaWRDb21tb25Nb2R1bGUgfSBmcm9tICcuLi9ncmlkLWNvbW1vbi5tb2R1bGUnO1xuaW1wb3J0IHsgRGVwcmVjYXRlTWV0aG9kIH0gZnJvbSAnLi4vLi4vY29yZS9kZXByZWNhdGVEZWNvcmF0b3JzJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIElneEdyaWRDb21wb25lbnQsXG4gICAgSWd4R3JpZFJvd0NvbXBvbmVudCxcbiAgICBJZ3hHcmlkR3JvdXBCeVJvd0NvbXBvbmVudCxcbiAgICBJZ3hHcm91cEJ5Um93VGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgSWd4R3JvdXBBcmVhRHJvcERpcmVjdGl2ZSxcbiAgICBJZ3hHcmlkUHJlR3JvdXBpbmdQaXBlLFxuICAgIElneEdyaWRQb3N0R3JvdXBpbmdQaXBlLFxuICAgIElneEdyaWRQYWdpbmdQaXBlLFxuICAgIElneEdyaWRTb3J0aW5nUGlwZSxcbiAgICBJZ3hHcmlkRmlsdGVyaW5nUGlwZVxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgSWd4R3JpZENvbXBvbmVudCxcbiAgICBJZ3hHcmlkR3JvdXBCeVJvd0NvbXBvbmVudCxcbiAgICBJZ3hHcmlkUm93Q29tcG9uZW50LFxuICAgIElneEdyb3VwQnlSb3dUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICBJZ3hHcm91cEFyZWFEcm9wRGlyZWN0aXZlLFxuICAgIElneEdyaWRDb21tb25Nb2R1bGVcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZSxcbiAgICBJZ3hDaGlwc01vZHVsZSxcbiAgICBJZ3hHcmlkQ29tbW9uTW9kdWxlXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgSWd4R3JpZE1vZHVsZSB7XG4gIEBEZXByZWNhdGVNZXRob2QoJ0lneEdyaWRNb2R1bGUuZm9yUm9vdCBtZXRob2QgaXMgZGVwcmVjYXRlZC4gVXNlIElneEdyaWRNb2R1bGUgaW5zdGVhZC4nKVxuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmdNb2R1bGU6IElneEdyaWRNb2R1bGVcbiAgICB9O1xuICB9XG59XG4iXX0=