/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { TransactionType } from './transaction';
import { Injectable } from '@angular/core';
import { IgxTransactionService } from '..';
// unsupported: template constraints.
// unsupported: template constraints.
/**
 * \@experimental \@hidden
 * @template T, S
 */
var IgxHierarchicalTransactionService = /** @class */ (function (_super) {
    tslib_1.__extends(IgxHierarchicalTransactionService, _super);
    function IgxHierarchicalTransactionService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} mergeChanges
     * @return {?}
     */
    IgxHierarchicalTransactionService.prototype.getAggregatedChanges = /**
     * @param {?} mergeChanges
     * @return {?}
     */
    function (mergeChanges) {
        var _this = this;
        var /** @type {?} */ result = [];
        this._states.forEach(function (state, key) {
            var /** @type {?} */ value = mergeChanges ? _this.mergeValues(state.recordRef, state.value) : state.value;
            _this.clearArraysFromObject(value);
            result.push(/** @type {?} */ ({ id: key, parentId: state.parentId, newValue: value, type: state.type }));
        });
        return result;
    };
    /**
     * @param {?} states
     * @param {?} transaction
     * @param {?=} recordRef
     * @return {?}
     */
    IgxHierarchicalTransactionService.prototype.updateState = /**
     * @param {?} states
     * @param {?} transaction
     * @param {?=} recordRef
     * @return {?}
     */
    function (states, transaction, recordRef) {
        _super.prototype.updateState.call(this, states, transaction, recordRef);
        var /** @type {?} */ currentState = states.get(transaction.id);
        if (currentState && transaction.type === TransactionType.ADD) {
            currentState.parentId = transaction.parentId;
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    IgxHierarchicalTransactionService.prototype.clearArraysFromObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        try {
            for (var _a = tslib_1.__values(Object.keys(obj)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var prop = _b.value;
                if (Array.isArray(obj[prop])) {
                    delete obj[prop];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _c;
    };
    IgxHierarchicalTransactionService.decorators = [
        { type: Injectable },
    ];
    return IgxHierarchicalTransactionService;
}(IgxTransactionService));
export { IgxHierarchicalTransactionService };
function IgxHierarchicalTransactionService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxHierarchicalTransactionService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxHierarchicalTransactionService.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWd4LWhpZXJhcmNoaWNhbC10cmFuc2FjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvdHJhbnNhY3Rpb24vaWd4LWhpZXJhcmNoaWNhbC10cmFuc2FjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBOEMsZUFBZSxFQUErQixNQUFNLGVBQWUsQ0FBQztBQUN6SCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLElBQUksQ0FBQzs7Ozs7Ozs7SUFLL0IsNkRBQTJCOzs7Ozs7OztJQUU1QixnRUFBb0I7Ozs7Y0FBQyxZQUFxQjs7UUFDN0MscUJBQU0sTUFBTSxHQUFRLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQVEsRUFBRSxHQUFRO1lBQ3BDLHFCQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDMUYsS0FBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxJQUFJLG1CQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFPLEVBQUMsQ0FBQztTQUM5RixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsTUFBTSxDQUFDOzs7Ozs7OztJQUdSLHVEQUFXOzs7Ozs7SUFBckIsVUFBc0IsTUFBbUIsRUFBRSxXQUFjLEVBQUUsU0FBZTtRQUN0RSxpQkFBTSxXQUFXLFlBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNsRCxxQkFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEQsRUFBRSxDQUFDLENBQUMsWUFBWSxJQUFJLFdBQVcsQ0FBQyxJQUFJLEtBQUssZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDM0QsWUFBWSxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO1NBQ2hEO0tBQ0o7Ozs7O0lBR08saUVBQXFCOzs7O2NBQUMsR0FBTzs7WUFDakMsR0FBRyxDQUFDLENBQWUsSUFBQSxLQUFBLGlCQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsZ0JBQUE7Z0JBQTlCLElBQU0sSUFBSSxXQUFBO2dCQUNYLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMzQixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDcEI7YUFDSjs7Ozs7Ozs7Ozs7O2dCQTVCUixVQUFVOzs0Q0FMWDtFQU9ZLHFCQUFxQjtTQURwQixpQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIaWVyYXJjaGljYWxUcmFuc2FjdGlvbiwgSGllcmFyY2hpY2FsU3RhdGUsIFRyYW5zYWN0aW9uVHlwZSwgSGllcmFyY2hpY2FsVHJhbnNhY3Rpb25Ob2RlIH0gZnJvbSAnLi90cmFuc2FjdGlvbic7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hUcmFuc2FjdGlvblNlcnZpY2UgfSBmcm9tICcuLic7XG5cbi8qKiBAZXhwZXJpbWVudGFsIEBoaWRkZW4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJZ3hIaWVyYXJjaGljYWxUcmFuc2FjdGlvblNlcnZpY2U8VCBleHRlbmRzIEhpZXJhcmNoaWNhbFRyYW5zYWN0aW9uLCBTIGV4dGVuZHMgSGllcmFyY2hpY2FsU3RhdGU+XG4gICAgZXh0ZW5kcyBJZ3hUcmFuc2FjdGlvblNlcnZpY2U8VCwgUz4ge1xuXG4gICAgcHVibGljIGdldEFnZ3JlZ2F0ZWRDaGFuZ2VzKG1lcmdlQ2hhbmdlczogYm9vbGVhbik6IFRbXSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdDogVFtdID0gW107XG4gICAgICAgIHRoaXMuX3N0YXRlcy5mb3JFYWNoKChzdGF0ZTogUywga2V5OiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbWVyZ2VDaGFuZ2VzID8gdGhpcy5tZXJnZVZhbHVlcyhzdGF0ZS5yZWNvcmRSZWYsIHN0YXRlLnZhbHVlKSA6IHN0YXRlLnZhbHVlO1xuICAgICAgICAgICAgdGhpcy5jbGVhckFycmF5c0Zyb21PYmplY3QodmFsdWUpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goeyBpZDoga2V5LCBwYXJlbnRJZDogc3RhdGUucGFyZW50SWQsIG5ld1ZhbHVlOiB2YWx1ZSwgdHlwZTogc3RhdGUudHlwZSB9IGFzIFQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdXBkYXRlU3RhdGUoc3RhdGVzOiBNYXA8YW55LCBTPiwgdHJhbnNhY3Rpb246IFQsIHJlY29yZFJlZj86IGFueSk6IHZvaWQge1xuICAgICAgICBzdXBlci51cGRhdGVTdGF0ZShzdGF0ZXMsIHRyYW5zYWN0aW9uLCByZWNvcmRSZWYpO1xuICAgICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSBzdGF0ZXMuZ2V0KHRyYW5zYWN0aW9uLmlkKTtcbiAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZSAmJiB0cmFuc2FjdGlvbi50eXBlID09PSBUcmFuc2FjdGlvblR5cGUuQUREKSB7XG4gICAgICAgICAgICBjdXJyZW50U3RhdGUucGFyZW50SWQgPSB0cmFuc2FjdGlvbi5wYXJlbnRJZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vICBUT0RPOiByZW1vdmUgdGhpcyBtZXRob2QuIEZvcmNlIGNsb25pbmcgdG8gc3RyaXAgY2hpbGQgYXJyYXlzIHdoZW4gbmVlZGVkIGluc3RlYWRcbiAgICBwcml2YXRlIGNsZWFyQXJyYXlzRnJvbU9iamVjdChvYmo6IHt9KSB7XG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBPYmplY3Qua2V5cyhvYmopKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmpbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG9ialtwcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==