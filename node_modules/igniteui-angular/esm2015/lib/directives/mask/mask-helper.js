/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @hidden
 */
export const /** @type {?} */ MASK_FLAGS = ['C', '&', 'a', 'A', '?', 'L', '9', '0', '#'];
/**
 * @hidden
 */
export const /** @type {?} */ KEYS = {
    Ctrl: 17,
    Z: 90,
    Y: 89,
    X: 88,
    BACKSPACE: 8,
    DELETE: 46
};
/**
 * @hidden
 */
export class MaskHelper {
    /**
     * @return {?}
     */
    get cursor() {
        return this._cursor;
    }
    /**
     * @param {?} value
     * @param {?} maskOptions
     * @param {?} cursor
     * @return {?}
     */
    parseValueByMask(value, maskOptions, cursor) {
        let /** @type {?} */ inputValue = value;
        const /** @type {?} */ mask = maskOptions.format;
        const /** @type {?} */ literals = this.getMaskLiterals(mask);
        const /** @type {?} */ literalKeys = Array.from(literals.keys());
        const /** @type {?} */ nonLiteralIndeces = this.getNonLiteralIndeces(mask, literalKeys);
        if (inputValue.length < mask.length) {
            // BACKSPACE, DELETE
            if (inputValue === '' && cursor === -1) {
                this._cursor = 0;
                return this.parseValueByMaskOnInit(value, maskOptions);
            } // workaround for IE 'x' button
            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {
                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);
                this._cursor = cursor + 1;
            }
            else {
                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);
                this._cursor = cursor + 1;
                for (let /** @type {?} */ i = this._cursor; i < 0; i--) {
                    if (literalKeys.indexOf(this._cursor) !== -1) {
                        this._cursor--;
                    }
                    else {
                        break;
                    }
                }
            }
        }
        else {
            const /** @type {?} */ char = inputValue[cursor];
            let /** @type {?} */ isCharValid = this.validateCharOnPostion(char, cursor, mask);
            if (nonLiteralIndeces.indexOf(cursor) !== -1) {
                inputValue = this.replaceCharAt(inputValue, cursor, '');
                if (isCharValid) {
                    inputValue = this.replaceCharAt(inputValue, cursor, char);
                    this._cursor = cursor + 1;
                }
                else {
                    this._cursor = cursor;
                }
            }
            else {
                inputValue = this.replaceCharAt(inputValue, cursor, '');
                this._cursor = ++cursor;
                for (let /** @type {?} */ i = cursor; i < mask.length; i++) {
                    if (literalKeys.indexOf(this._cursor) !== -1) {
                        this._cursor = ++cursor;
                    }
                    else {
                        isCharValid = this.validateCharOnPostion(char, cursor, mask);
                        if (isCharValid) {
                            inputValue = this.replaceCharAt(inputValue, cursor, char);
                            this._cursor = ++cursor;
                            break;
                        }
                        else {
                            break;
                        }
                    }
                }
            }
        }
        return inputValue;
    }
    /**
     * @param {?} inputVal
     * @param {?} maskOptions
     * @return {?}
     */
    parseValueByMaskOnInit(inputVal, maskOptions) {
        let /** @type {?} */ outputVal = '';
        let /** @type {?} */ value = '';
        const /** @type {?} */ mask = maskOptions.format;
        const /** @type {?} */ literals = this.getMaskLiterals(mask);
        const /** @type {?} */ literalKeys = Array.from(literals.keys());
        const /** @type {?} */ nonLiteralIndeces = this.getNonLiteralIndeces(mask, literalKeys);
        const /** @type {?} */ literalValues = Array.from(literals.values());
        if (inputVal != null) {
            value = inputVal.toString();
        }
        for (const /** @type {?} */ maskSym of mask) {
            outputVal += maskOptions.promptChar;
        }
        literals.forEach((val, key) => {
            outputVal = this.replaceCharAt(outputVal, key, val);
        });
        if (!value) {
            return outputVal;
        }
        const /** @type {?} */ nonLiteralValues = this.getNonLiteralValues(value, literalValues);
        for (let /** @type {?} */ i = 0; i < nonLiteralValues.length; i++) {
            const /** @type {?} */ char = nonLiteralValues[i];
            const /** @type {?} */ isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);
            if (!isCharValid && char !== maskOptions.promptChar) {
                nonLiteralValues[i] = maskOptions.promptChar;
            }
        }
        if (nonLiteralValues.length > nonLiteralIndeces.length) {
            nonLiteralValues.splice(nonLiteralIndeces.length);
        }
        let /** @type {?} */ pos = 0;
        for (const /** @type {?} */ nonLiteralValue of nonLiteralValues) {
            const /** @type {?} */ char = nonLiteralValue;
            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);
        }
        return outputVal;
    }
    /**
     * @param {?} value
     * @param {?} maskOptions
     * @return {?}
     */
    restoreValueFromMask(value, maskOptions) {
        let /** @type {?} */ outputVal = '';
        const /** @type {?} */ mask = maskOptions.format;
        const /** @type {?} */ literals = this.getMaskLiterals(mask);
        const /** @type {?} */ literalValues = Array.from(literals.values());
        for (const /** @type {?} */ val of value) {
            if (literalValues.indexOf(val) === -1) {
                if (val !== maskOptions.promptChar) {
                    outputVal += val;
                }
            }
        }
        return outputVal;
    }
    /**
     * @param {?} value
     * @param {?} maskOptions
     * @param {?} cursor
     * @param {?} selection
     * @return {?}
     */
    parseValueByMaskUponSelection(value, maskOptions, cursor, selection) {
        let /** @type {?} */ isCharValid;
        let /** @type {?} */ inputValue = value;
        const /** @type {?} */ char = inputValue[cursor];
        const /** @type {?} */ mask = maskOptions.format;
        const /** @type {?} */ literals = this.getMaskLiterals(mask);
        const /** @type {?} */ literalKeys = Array.from(literals.keys());
        const /** @type {?} */ nonLiteralIndeces = this.getNonLiteralIndeces(mask, literalKeys);
        if (!this.data) {
            this._cursor = cursor < 0 ? ++cursor : cursor;
            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {
                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);
                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :
                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);
                selection--;
                if (selection > 0) {
                    for (let /** @type {?} */ i = 0; i < selection; i++) {
                        cursor++;
                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?
                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :
                            this.insertCharAt(inputValue, cursor, mask[cursor]);
                    }
                }
            }
            else {
                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);
                this._cursor++;
                selection--;
                let /** @type {?} */ isMarked = false;
                if (selection > 0) {
                    cursor = this._cursor;
                    for (let /** @type {?} */ i = 0; i < selection; i++) {
                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {
                            isCharValid = this.validateCharOnPostion(char, cursor, mask);
                            if (isCharValid && !isMarked) {
                                inputValue = this.insertCharAt(inputValue, cursor, char);
                                cursor++;
                                this._cursor++;
                                isMarked = true;
                            }
                            else {
                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);
                                cursor++;
                            }
                        }
                        else {
                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);
                            if (cursor === this._cursor) {
                                this._cursor++;
                            }
                            cursor++;
                        }
                    }
                }
            }
        }
        else {
            if (inputValue === '' && cursor === -1) {
                this._cursor = 0;
                return this.parseValueByMaskOnInit(value, maskOptions);
            } // workaround for IE 'x' button
            if (this._cursor < 0) {
                this._cursor++;
                cursor++;
            }
            cursor++;
            this._cursor = cursor;
            for (let /** @type {?} */ i = 0; i < selection; i++) {
                if (nonLiteralIndeces.indexOf(cursor) !== -1) {
                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);
                    cursor++;
                }
                else {
                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);
                    cursor++;
                }
            }
        }
        return inputValue;
    }
    /**
     * @param {?} value
     * @param {?} maskOptions
     * @param {?} cursor
     * @param {?} clipboardData
     * @param {?} selection
     * @return {?}
     */
    parseValueByMaskUponCopyPaste(value, maskOptions, cursor, clipboardData, selection) {
        let /** @type {?} */ inputValue = value;
        const /** @type {?} */ mask = maskOptions.format;
        const /** @type {?} */ literals = this.getMaskLiterals(mask);
        const /** @type {?} */ literalKeys = Array.from(literals.keys());
        const /** @type {?} */ nonLiteralIndeces = this.getNonLiteralIndeces(mask, literalKeys);
        const /** @type {?} */ selectionEnd = cursor + selection;
        this._cursor = cursor;
        for (const /** @type {?} */ clipboardSym of clipboardData) {
            const /** @type {?} */ char = clipboardSym;
            if (this._cursor > mask.length) {
                return inputValue;
            }
            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {
                const /** @type {?} */ isCharValid = this.validateCharOnPostion(char, this._cursor, mask);
                if (isCharValid) {
                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);
                }
            }
            else {
                for (let /** @type {?} */ i = cursor; i < mask.length; i++) {
                    if (literalKeys.indexOf(this._cursor) !== -1) {
                        this._cursor++;
                    }
                    else {
                        const /** @type {?} */ isCharValid = this.validateCharOnPostion(char, this._cursor, mask);
                        if (isCharValid) {
                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);
                        }
                        break;
                    }
                }
            }
            selection--;
        }
        if (selection > 0) {
            for (let /** @type {?} */ i = this._cursor; i < selectionEnd; i++) {
                if (literalKeys.indexOf(this._cursor) !== -1) {
                    this._cursor++;
                }
                else {
                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);
                }
            }
        }
        return inputValue;
    }
    /**
     * @param {?} inputChar
     * @param {?} position
     * @param {?} mask
     * @return {?}
     */
    validateCharOnPostion(inputChar, position, mask) {
        let /** @type {?} */ regex;
        let /** @type {?} */ isValid;
        const /** @type {?} */ letterOrDigitRegEx = '[\\d\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z]';
        const /** @type {?} */ letterDigitOrSpaceRegEx = '[\\d\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z\\u0020]';
        const /** @type {?} */ letterRegEx = '[\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z]';
        const /** @type {?} */ letteSpaceRegEx = '[\\u00C0-\\u1FFF\\u2C00-\\uD7FFa-zA-Z\\u0020]';
        const /** @type {?} */ digitRegEx = '[\\d]';
        const /** @type {?} */ digitSpaceRegEx = '[\\d\\u0020]';
        const /** @type {?} */ digitSpecialRegEx = '[\\d-\\+]';
        switch (mask.charAt(position)) {
            case 'C':
                isValid = inputChar !== '';
                break;
            case '&':
                regex = new RegExp('[\\u0020]');
                isValid = !regex.test(inputChar);
                break;
            case 'a':
                regex = new RegExp(letterDigitOrSpaceRegEx);
                isValid = regex.test(inputChar);
                break;
            case 'A':
                regex = new RegExp(letterOrDigitRegEx);
                isValid = regex.test(inputChar);
                break;
            case '?':
                regex = new RegExp(letteSpaceRegEx);
                isValid = regex.test(inputChar);
                break;
            case 'L':
                regex = new RegExp(letterRegEx);
                isValid = regex.test(inputChar);
                break;
            case '0':
                regex = new RegExp(digitRegEx);
                isValid = regex.test(inputChar);
                break;
            case '9':
                regex = new RegExp(digitSpaceRegEx);
                isValid = regex.test(inputChar);
                break;
            case '#':
                regex = new RegExp(digitSpecialRegEx);
                isValid = regex.test(inputChar);
                break;
            default: {
                isValid = null;
            }
        }
        return isValid;
    }
    /**
     * @param {?} strValue
     * @param {?} index
     * @param {?} char
     * @return {?}
     */
    replaceCharAt(strValue, index, char) {
        if (strValue !== undefined) {
            return strValue.substring(0, index) + char + strValue.substring(index + 1);
        }
    }
    /**
     * @param {?} strValue
     * @param {?} index
     * @param {?} char
     * @return {?}
     */
    insertCharAt(strValue, index, char) {
        if (strValue !== undefined) {
            return strValue.substring(0, index) + char + strValue.substring(index);
        }
    }
    /**
     * @param {?} mask
     * @return {?}
     */
    getMaskLiterals(mask) {
        const /** @type {?} */ literals = new Map();
        for (let /** @type {?} */ i = 0; i < mask.length; i++) {
            const /** @type {?} */ char = mask.charAt(i);
            if (MASK_FLAGS.indexOf(char) === -1) {
                literals.set(i, char);
            }
        }
        return literals;
    }
    /**
     * @param {?} mask
     * @param {?} literalKeys
     * @return {?}
     */
    getNonLiteralIndeces(mask, literalKeys) {
        const /** @type {?} */ nonLiteralsIndeces = new Array();
        for (let /** @type {?} */ i = 0; i < mask.length; i++) {
            if (literalKeys.indexOf(i) === -1) {
                nonLiteralsIndeces.push(i);
            }
        }
        return nonLiteralsIndeces;
    }
    /**
     * @param {?} value
     * @param {?} literalValues
     * @return {?}
     */
    getNonLiteralValues(value, literalValues) {
        const /** @type {?} */ nonLiteralValues = new Array();
        for (const /** @type {?} */ val of value) {
            if (literalValues.indexOf(val) === -1) {
                nonLiteralValues.push(val);
            }
        }
        return nonLiteralValues;
    }
}
function MaskHelper_tsickle_Closure_declarations() {
    /** @type {?} */
    MaskHelper.prototype._cursor;
    /** @type {?} */
    MaskHelper.prototype.data;
}

//# sourceMappingURL=data:application/json;base64,