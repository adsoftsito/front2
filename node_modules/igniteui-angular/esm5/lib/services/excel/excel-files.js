/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ExcelStrings } from './excel-strings';
/**
 * @hidden
 */
var /**
 * @hidden
 */
RootRelsFile = /** @class */ (function () {
    function RootRelsFile() {
    }
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    RootRelsFile.prototype.writeElement = /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    function (folder, worksheetData) {
        folder.file('.rels', ExcelStrings.getRels());
    };
    return RootRelsFile;
}());
/**
 * @hidden
 */
export { RootRelsFile };
/**
 * @hidden
 */
var /**
 * @hidden
 */
AppFile = /** @class */ (function () {
    function AppFile() {
    }
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    AppFile.prototype.writeElement = /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    function (folder, worksheetData) {
        folder.file('app.xml', ExcelStrings.getApp());
    };
    return AppFile;
}());
/**
 * @hidden
 */
export { AppFile };
/**
 * @hidden
 */
var /**
 * @hidden
 */
CoreFile = /** @class */ (function () {
    function CoreFile() {
    }
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    CoreFile.prototype.writeElement = /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    function (folder, worksheetData) {
        folder.file('core.xml', ExcelStrings.getCore());
    };
    return CoreFile;
}());
/**
 * @hidden
 */
export { CoreFile };
/**
 * @hidden
 */
var /**
 * @hidden
 */
WorkbookRelsFile = /** @class */ (function () {
    function WorkbookRelsFile() {
    }
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    WorkbookRelsFile.prototype.writeElement = /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    function (folder, worksheetData) {
        var /** @type {?} */ hasSharedStrings = worksheetData.isEmpty === false;
        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));
    };
    return WorkbookRelsFile;
}());
/**
 * @hidden
 */
export { WorkbookRelsFile };
/**
 * @hidden
 */
var /**
 * @hidden
 */
ThemeFile = /** @class */ (function () {
    function ThemeFile() {
    }
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    ThemeFile.prototype.writeElement = /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    function (folder, worksheetData) {
        folder.file('theme1.xml', ExcelStrings.getTheme());
    };
    return ThemeFile;
}());
/**
 * @hidden
 */
export { ThemeFile };
/**
 * @hidden
 */
var WorksheetFile = /** @class */ (function () {
    function WorksheetFile() {
    }
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    WorksheetFile.prototype.writeElement = /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    function (folder, worksheetData) {
        var /** @type {?} */ sheetData = [];
        var /** @type {?} */ cols = [];
        var /** @type {?} */ dimension;
        var /** @type {?} */ dictionary = worksheetData.dataDictionary;
        var /** @type {?} */ freezePane = '';
        if (worksheetData.isEmpty) {
            sheetData.push('<sheetData/>');
            dimension = 'A1';
        }
        else {
            sheetData.push('<sheetData>');
            var /** @type {?} */ height = worksheetData.options.rowHeight;
            var /** @type {?} */ rowHeight = height ? ' ht="' + height + '" customHeight="1"' : '';
            sheetData.push("<row r=\"1\"" + rowHeight + ">");
            for (var /** @type {?} */ i = 0; i < worksheetData.columnCount; i++) {
                var /** @type {?} */ column = ExcelStrings.getExcelColumn(i) + 1;
                var /** @type {?} */ value = dictionary.saveValue(worksheetData.keys[i], i, true);
                sheetData.push("<c r=\"" + column + "\" t=\"s\"><v>" + value + "</v></c>");
            }
            sheetData.push('</row>');
            for (var /** @type {?} */ i = 1; i < worksheetData.rowCount; i++) {
                sheetData.push("<row r=\"" + (i + 1) + "\"" + rowHeight + ">");
                for (var /** @type {?} */ j = 0; j < worksheetData.columnCount; j++) {
                    var /** @type {?} */ cellData = WorksheetFile.getCellData(worksheetData, i, j);
                    sheetData.push(cellData);
                }
                sheetData.push('</row>');
            }
            sheetData.push('</sheetData>');
            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;
            cols.push('<cols>');
            for (var /** @type {?} */ i = 0; i < worksheetData.columnCount; i++) {
                var /** @type {?} */ width = dictionary.columnWidths[i];
                // Use the width provided in the options if it exists
                var /** @type {?} */ widthInTwips = worksheetData.options.columnWidth ?
                    worksheetData.options.columnWidth :
                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);
                cols.push("<col min=\"" + (i + 1) + "\" max=\"" + (i + 1) + "\" width=\"" + widthInTwips + "\" customWidth=\"1\"/>");
            }
            cols.push('</cols>');
            if (worksheetData.indexOfLastPinnedColumn !== -1 &&
                !worksheetData.options.ignorePinning &&
                !worksheetData.options.ignoreColumnsOrder) {
                var /** @type {?} */ frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;
                var /** @type {?} */ firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';
                freezePane = "<pane xSplit=\"" + frozenColumnCount + "\" topLeftCell=\"" + firstCell + "\" activePane=\"topRight\" state=\"frozen\"/>";
            }
        }
        var /** @type {?} */ hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;
        folder.file('sheet1.xml', ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable));
    };
    /**
     * @param {?} worksheetData
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    WorksheetFile.getCellData = /**
     * @param {?} worksheetData
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (worksheetData, row, column) {
        var /** @type {?} */ dictionary = worksheetData.dataDictionary;
        var /** @type {?} */ columnName = ExcelStrings.getExcelColumn(column) + (row + 1);
        var /** @type {?} */ columnHeader = worksheetData.keys[column];
        var /** @type {?} */ cellValue = worksheetData.isSpecialData ?
            worksheetData.data[row - 1] :
            worksheetData.data[row - 1][columnHeader];
        if (cellValue === undefined || cellValue === null) {
            return "<c r=\"" + columnName + "\" s=\"1\"/>";
        }
        else {
            var /** @type {?} */ savedValue = dictionary.saveValue(cellValue, column, false);
            var /** @type {?} */ isSavedAsString = savedValue !== -1;
            var /** @type {?} */ value = isSavedAsString ? savedValue : cellValue;
            var /** @type {?} */ type = isSavedAsString ? " t=\"s\"" : '';
            var /** @type {?} */ format = isSavedAsString ? '' : " s=\"1\"";
            return "<c r=\"" + columnName + "\"" + type + format + "><v>" + value + "</v></c>";
        }
    };
    WorksheetFile.MIN_WIDTH = 8.34;
    return WorksheetFile;
}());
export { WorksheetFile };
function WorksheetFile_tsickle_Closure_declarations() {
    /** @type {?} */
    WorksheetFile.MIN_WIDTH;
}
/**
 * @hidden
 */
var /**
 * @hidden
 */
StyleFile = /** @class */ (function () {
    function StyleFile() {
    }
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    StyleFile.prototype.writeElement = /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    function (folder, worksheetData) {
        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));
    };
    return StyleFile;
}());
/**
 * @hidden
 */
export { StyleFile };
/**
 * @hidden
 */
var /**
 * @hidden
 */
WorkbookFile = /** @class */ (function () {
    function WorkbookFile() {
    }
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    WorkbookFile.prototype.writeElement = /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    function (folder, worksheetData) {
        folder.file('workbook.xml', ExcelStrings.getWorkbook());
    };
    return WorkbookFile;
}());
/**
 * @hidden
 */
export { WorkbookFile };
/**
 * @hidden
 */
var /**
 * @hidden
 */
ContentTypesFile = /** @class */ (function () {
    function ContentTypesFile() {
    }
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    ContentTypesFile.prototype.writeElement = /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    function (folder, worksheetData) {
        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));
    };
    return ContentTypesFile;
}());
/**
 * @hidden
 */
export { ContentTypesFile };
/**
 * @hidden
 */
var /**
 * @hidden
 */
SharedStringsFile = /** @class */ (function () {
    function SharedStringsFile() {
    }
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    SharedStringsFile.prototype.writeElement = /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    function (folder, worksheetData) {
        var /** @type {?} */ dict = worksheetData.dataDictionary;
        var /** @type {?} */ sortedValues = dict.getKeys();
        var /** @type {?} */ sharedStrings = new Array(sortedValues.length);
        try {
            for (var sortedValues_1 = tslib_1.__values(sortedValues), sortedValues_1_1 = sortedValues_1.next(); !sortedValues_1_1.done; sortedValues_1_1 = sortedValues_1.next()) {
                var value = sortedValues_1_1.value;
                sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (sortedValues_1_1 && !sortedValues_1_1.done && (_a = sortedValues_1.return)) _a.call(sortedValues_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(dict.stringsCount, sortedValues.length, sharedStrings.join('')));
        var e_1, _a;
    };
    return SharedStringsFile;
}());
/**
 * @hidden
 */
export { SharedStringsFile };
/**
 * @hidden
 */
var /**
 * @hidden
 */
TablesFile = /** @class */ (function () {
    function TablesFile() {
    }
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    TablesFile.prototype.writeElement = /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    function (folder, worksheetData) {
        var /** @type {?} */ columnCount = worksheetData.columnCount;
        var /** @type {?} */ lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;
        var /** @type {?} */ dimension = 'A1:' + lastColumn;
        var /** @type {?} */ values = worksheetData.keys;
        var /** @type {?} */ sortString = '';
        var /** @type {?} */ tableColumns = '<tableColumns count="' + columnCount + '">';
        for (var /** @type {?} */ i = 0; i < columnCount; i++) {
            var /** @type {?} */ value = values[i];
            tableColumns += '<tableColumn id="' + (i + 1) + '" name="' + value + '"/>';
        }
        tableColumns += '</tableColumns>';
        if (worksheetData.sort) {
            var /** @type {?} */ sortingExpression = worksheetData.sort;
            var /** @type {?} */ sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));
            var /** @type {?} */ dir = sortingExpression.dir - 1;
            sortString = "<sortState ref=\"A2:" + lastColumn + "\"><sortCondition descending=\"" + dir + "\" ref=\"" + sc + "1:" + sc + "15\"/></sortState>";
        }
        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));
    };
    return TablesFile;
}());
/**
 * @hidden
 */
export { TablesFile };
/**
 * @hidden
 */
var /**
 * @hidden
 */
WorksheetRelsFile = /** @class */ (function () {
    function WorksheetRelsFile() {
    }
    /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    WorksheetRelsFile.prototype.writeElement = /**
     * @param {?} folder
     * @param {?} worksheetData
     * @return {?}
     */
    function (folder, worksheetData) {
        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());
    };
    return WorksheetRelsFile;
}());
/**
 * @hidden
 */
export { WorksheetRelsFile };

//# sourceMappingURL=data:application/json;base64,