/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectorRef, Component, Input, TemplateRef, ViewChild, HostBinding, ElementRef, HostListener } from '@angular/core';
import { IgxColumnComponent } from '../column.component';
import { IgxChipsAreaComponent, IgxChipComponent } from '../../chips';
import { IgxFilteringService } from './grid-filtering.service';
import { cloneArray } from '../../core/utils';
import { IgxGridNavigationService } from '../grid-navigation.service';
/**
 * @hidden
 */
var IgxGridFilteringCellComponent = /** @class */ (function () {
    function IgxGridFilteringCellComponent(cdr, filteringService, navService) {
        this.cdr = cdr;
        this.filteringService = filteringService;
        this.navService = navService;
        this.baseClass = 'igx-grid__filtering-cell-indicator';
        this.currentTemplate = null;
        this.moreFiltersCount = 0;
        this.cssClass = 'igx-grid__filtering-cell';
        this.filteringService.subscribeToEvents();
    }
    Object.defineProperty(IgxGridFilteringCellComponent.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            // HACK - think of a better solution
            var /** @type {?} */ colWidth = this.column.width;
            var /** @type {?} */ isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;
            if (isPercentageWidth) {
                var /** @type {?} */ firstContentCell = this.column.cells[0];
                if (firstContentCell) {
                    return firstContentCell.nativeElement.getBoundingClientRect().width + 'px';
                }
            }
            else {
                return this.column.width;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringCellComponent.prototype, "isLastPinned", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ pinnedCols = this.filteringService.grid.pinnedColumns;
            if (pinnedCols.length === 0) {
                return false;
            }
            else {
                return pinnedCols.indexOf(this.column) === pinnedCols.length - 1;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.filteringService.columnToChipToFocus.set(this.column.field, false);
        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);
    };
    /**
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.updateFilterCellArea();
    };
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.onTabKeyDown = /**
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        if (eventArgs.shiftKey) {
            if (this.column.visibleIndex > 0 && !this.navService.isColumnLeftFullyVisible(this.column.visibleIndex - 1)) {
                eventArgs.preventDefault();
                this.filteringService.grid.headerContainer.scrollTo(this.column.visibleIndex - 1);
            }
            else if (this.column.visibleIndex === 0) {
                eventArgs.preventDefault();
            }
        }
        else {
            if (this.column.visibleIndex === this.filteringService.grid.columnList.length - 1) {
                if (this.currentTemplate === this.defaultFilter) {
                    if (this.isMoreIconVisible() === false) {
                        if (this.moreIcon.nativeElement === document.activeElement) {
                            this.navService.goToFirstCell();
                        }
                    }
                    else if (this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(".igx-chip__item") ===
                        document.activeElement) {
                        this.navService.goToFirstCell();
                    }
                }
                else {
                    this.navService.goToFirstCell();
                }
            }
            else if (!this.navService.isColumnFullyVisible(this.column.visibleIndex + 1)) {
                eventArgs.preventDefault();
                this.filteringService.grid.headerContainer.scrollTo(this.column.visibleIndex + 1);
            }
        }
        eventArgs.stopPropagation();
    };
    /**
     * Returns the chip to be focused.
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.getChipToFocus = /**
     * Returns the chip to be focused.
     * @return {?}
     */
    function () {
        return this.filteringService.columnToChipToFocus.get(this.column.field);
    };
    /**
     * Updates the filtering cell area.
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.updateFilterCellArea = /**
     * Updates the filtering cell area.
     * @return {?}
     */
    function () {
        this.expressionsList = this.filteringService.getExpressions(this.column.field);
        this.updateVisibleFilters();
    };
    Object.defineProperty(IgxGridFilteringCellComponent.prototype, "template", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.column.filterable) {
                this.currentTemplate = null;
                return null;
            }
            var /** @type {?} */ expressionTree = this.column.filteringExpressionsTree;
            if (!expressionTree || expressionTree.filteringOperands.length === 0) {
                this.currentTemplate = this.emptyFilter;
                return this.emptyFilter;
            }
            if (this.filteringService.isFilterComplex(this.column.field)) {
                this.currentTemplate = this.complexFilter;
                return this.complexFilter;
            }
            this.currentTemplate = this.defaultFilter;
            return this.defaultFilter;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Chip clicked event handler.
     * @param {?=} expression
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.onChipClicked = /**
     * Chip clicked event handler.
     * @param {?=} expression
     * @return {?}
     */
    function (expression) {
        if (expression) {
            this.expressionsList.forEach(function (item) {
                item.isSelected = (item.expression === expression);
            });
        }
        else if (this.expressionsList.length > 0) {
            this.expressionsList.forEach(function (item) {
                item.isSelected = false;
            });
            this.expressionsList[0].isSelected = true;
        }
        this.filteringService.filteredColumn = this.column;
        this.filteringService.isFilterRowVisible = true;
        this.filteringService.selectedExpression = expression;
    };
    /**
     * Chip removed event handler.
     * @param {?} eventArgs
     * @param {?} item
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.onChipRemoved = /**
     * Chip removed event handler.
     * @param {?} eventArgs
     * @param {?} item
     * @return {?}
     */
    function (eventArgs, item) {
        var /** @type {?} */ indexToRemove = this.expressionsList.indexOf(item);
        this.removeExpression(indexToRemove);
    };
    /**
     * Clears the filtering.
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.clearFiltering = /**
     * Clears the filtering.
     * @return {?}
     */
    function () {
        this.filteringService.clearFilter(this.column.field);
        this.cdr.detectChanges();
    };
    /**
     * Chip keydown event handler.
     * @param {?} eventArgs
     * @param {?=} expression
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.onChipKeyDown = /**
     * Chip keydown event handler.
     * @param {?} eventArgs
     * @param {?=} expression
     * @return {?}
     */
    function (eventArgs, expression) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            eventArgs.preventDefault();
            this.onChipClicked(expression);
        }
    };
    /**
     * Returns the filtering indicator class.
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.filteringIndicatorClass = /**
     * Returns the filtering indicator class.
     * @return {?}
     */
    function () {
        return _a = {},
            _a[this.baseClass] = !this.isMoreIconVisible(),
            _a[this.baseClass + "--hidden"] = this.isMoreIconVisible(),
            _a;
        var _a;
    };
    /**
     * Focus a chip depending on the current visible template.
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.focusChip = /**
     * Focus a chip depending on the current visible template.
     * @return {?}
     */
    function () {
        if (this.currentTemplate === this.defaultFilter) {
            if (this.isMoreIconVisible() === false) {
                this.moreIcon.nativeElement.focus();
            }
            else {
                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(".igx-chip__item").focus();
            }
        }
        else if (this.currentTemplate === this.emptyFilter) {
            this.ghostChip.elementRef.nativeElement.querySelector(".igx-chip__item").focus();
        }
        else if (this.currentTemplate === this.complexFilter) {
            this.complexChip.elementRef.nativeElement.querySelector(".igx-chip__item").focus();
        }
    };
    /**
     * @param {?} indexToRemove
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.removeExpression = /**
     * @param {?} indexToRemove
     * @return {?}
     */
    function (indexToRemove) {
        if (indexToRemove === 0 && this.expressionsList.length === 1) {
            this.clearFiltering();
            return;
        }
        this.filteringService.removeExpression(this.column.field, indexToRemove);
        this.updateVisibleFilters();
        this.filter();
    };
    /**
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.filter = /**
     * @return {?}
     */
    function () {
        this.rootExpressionsTree = this.filteringService.createSimpleFilteringTree(this.column.field);
        this.filteringService.filter(this.column.field, this.rootExpressionsTree);
    };
    /**
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.isMoreIconVisible = /**
     * @return {?}
     */
    function () {
        return this.filteringService.columnToMoreIconHidden.get(this.column.field);
    };
    /**
     * @return {?}
     */
    IgxGridFilteringCellComponent.prototype.updateVisibleFilters = /**
     * @return {?}
     */
    function () {
        this.visibleExpressionsList = cloneArray(this.expressionsList);
        // TODO: revise the usage of this.cdr.detectChanges() here
        this.cdr.detectChanges();
        if (this.moreIcon) {
            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);
        }
        if (this.chipsArea && this.expressionsList.length > 1) {
            var /** @type {?} */ areaWidth = this.chipsArea.element.nativeElement.offsetWidth;
            var /** @type {?} */ viewWidth = 0;
            var /** @type {?} */ chipsAreaElements = this.chipsArea.element.nativeElement.children;
            var /** @type {?} */ visibleChipsCount = 0;
            var /** @type {?} */ moreIconWidth = this.moreIcon.nativeElement.offsetWidth -
                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);
            for (var /** @type {?} */ index = 0; index < chipsAreaElements.length - 1; index++) {
                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {
                    viewWidth += chipsAreaElements[index].offsetWidth;
                    if (index % 2 === 0) {
                        visibleChipsCount++;
                    }
                    else {
                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);
                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);
                    }
                }
                else {
                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {
                        visibleChipsCount--;
                    }
                    else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {
                        visibleChipsCount--;
                    }
                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;
                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);
                    this.visibleExpressionsList.splice(visibleChipsCount);
                    break;
                }
            }
            this.cdr.detectChanges();
        }
    };
    IgxGridFilteringCellComponent.decorators = [
        { type: Component, args: [{
                    preserveWhitespaces: false,
                    selector: 'igx-grid-filtering-cell',
                    template: "<ng-template #emptyFilter>\n        <igx-chips-area [attr.draggable]=\"false\" class=\"igx-filtering-chips\">\n            <igx-chip #ghostChip [attr.draggable]=\"false\" (click)=\"onChipClicked()\" (keydown)=\"onChipKeyDown($event)\" [displayDensity]=\"'cosy'\">\n                <igx-icon [attr.draggable]=\"false\" igxPrefix>filter_list</igx-icon>\n                <span [attr.draggable]=\"false\">Filter</span>\n            </igx-chip>\n        </igx-chips-area>\n</ng-template>\n\n<ng-template #defaultFilter>\n    <igx-chips-area #chipsArea class=\"igx-filtering-chips\">\n        <ng-container *ngFor=\"let item of visibleExpressionsList; let last = last;\" >\n            <igx-chip\n                [removable]=\"true\"\n                [displayDensity]=\"'cosy'\"\n                (click)=\"onChipClicked(item.expression)\"\n                (keydown)=\"onChipKeyDown($event, item.expression)\"\n                (onRemove)=\"onChipRemoved($event, item)\">\n                <igx-icon igxPrefix\n                    fontSet=\"filtering-icons\"\n                    [name]=\"item.expression.condition.iconName\">\n                </igx-icon>\n                <span #label>\n                    {{filteringService.getChipLabel(item.expression)}}\n                </span>\n            </igx-chip>\n            <span class=\"igx-filtering-chips__connector\" *ngIf=\"!last\">{{filteringService.getOperatorAsString(item.afterOperator)}}</span>\n        </ng-container>\n        <div #moreIcon [ngClass]=\"filteringIndicatorClass()\" (click)=\"onChipClicked()\" tabindex=\"0\">\n            <igx-icon>filter_list</igx-icon>\n            <igx-badge [value]=\"moreFiltersCount\"></igx-badge>\n        </div>\n    </igx-chips-area>\n</ng-template>\n\n<ng-template #complexFilter>\n    <igx-chip #complexChip [removable]=\"true\" [displayDensity]=\"'cosy'\" (onRemove)=\"clearFiltering()\">\n        <igx-icon igxPrefix>filter_list</igx-icon>\n        <span>Complex Filter</span>\n    </igx-chip>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template; context: { $implicit: this }\"></ng-container>\n"
                },] },
    ];
    /** @nocollapse */
    IgxGridFilteringCellComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
        { type: IgxFilteringService, },
        { type: IgxGridNavigationService, },
    ]; };
    IgxGridFilteringCellComponent.propDecorators = {
        "column": [{ type: Input },],
        "emptyFilter": [{ type: ViewChild, args: ['emptyFilter', { read: TemplateRef },] },],
        "defaultFilter": [{ type: ViewChild, args: ['defaultFilter', { read: TemplateRef },] },],
        "complexFilter": [{ type: ViewChild, args: ['complexFilter', { read: TemplateRef },] },],
        "chipsArea": [{ type: ViewChild, args: ['chipsArea', { read: IgxChipsAreaComponent },] },],
        "moreIcon": [{ type: ViewChild, args: ['moreIcon', { read: ElementRef },] },],
        "ghostChip": [{ type: ViewChild, args: ['ghostChip', { read: IgxChipComponent },] },],
        "complexChip": [{ type: ViewChild, args: ['complexChip', { read: IgxChipComponent },] },],
        "width": [{ type: HostBinding, args: ['style.min-width',] }, { type: HostBinding, args: ['style.max-width',] }, { type: HostBinding, args: ['style.flex-basis',] },],
        "cssClass": [{ type: HostBinding, args: ['class.igx-grid__filtering-cell',] },],
        "isLastPinned": [{ type: HostBinding, args: ['class.igx-grid__th--pinned-last',] },],
        "onTabKeyDown": [{ type: HostListener, args: ['keydown.shift.tab', ['$event'],] }, { type: HostListener, args: ['keydown.tab', ['$event'],] },],
    };
    return IgxGridFilteringCellComponent;
}());
export { IgxGridFilteringCellComponent };
function IgxGridFilteringCellComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridFilteringCellComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridFilteringCellComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxGridFilteringCellComponent.propDecorators;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.rootExpressionsTree;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.expressionsList;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.baseClass;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.currentTemplate;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.visibleExpressionsList;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.moreFiltersCount;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.column;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.emptyFilter;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.defaultFilter;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.complexFilter;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.chipsArea;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.moreIcon;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.ghostChip;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.complexChip;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.cssClass;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.cdr;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.filteringService;
    /** @type {?} */
    IgxGridFilteringCellComponent.prototype.navService;
}

//# sourceMappingURL=data:application/json;base64,