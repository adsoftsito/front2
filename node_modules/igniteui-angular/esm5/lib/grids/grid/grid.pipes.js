/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { cloneArray } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { GridBaseAPIService } from '../api.service';
/**
 * @hidden
 */
var IgxGridSortingPipe = /** @class */ (function () {
    function IgxGridSortingPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    /**
     * @param {?} collection
     * @param {?} expressions
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxGridSortingPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} expressions
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (collection, expressions, id, pipeTrigger) {
        var /** @type {?} */ strategy;
        var /** @type {?} */ state = { expressions: [], strategy: strategy };
        state.expressions = this.gridAPI.get(id).sortingExpressions;
        if (!state.expressions.length) {
            return collection;
        }
        // DataUtil.sort needs a sorting strategy to start with, so it makes sense to start with the strategy from the first expression
        // sorting-strategy.ts, sortDataRecursive method then takes care and use the corresponding strategy for each expression
        strategy = expressions[0].strategy;
        state.strategy = strategy;
        return DataUtil.sort(cloneArray(collection), state);
    };
    IgxGridSortingPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gridSort',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    IgxGridSortingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
    ]; };
    return IgxGridSortingPipe;
}());
export { IgxGridSortingPipe };
function IgxGridSortingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridSortingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridSortingPipe.ctorParameters;
    /** @type {?} */
    IgxGridSortingPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
var IgxGridPreGroupingPipe = /** @class */ (function () {
    function IgxGridPreGroupingPipe(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} collection
     * @param {?} expression
     * @param {?} expansion
     * @param {?} defaultExpanded
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxGridPreGroupingPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} expression
     * @param {?} expansion
     * @param {?} defaultExpanded
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (collection, expression, expansion, defaultExpanded, id, pipeTrigger) {
        var /** @type {?} */ state = { expressions: [], expansion: [], defaultExpanded: defaultExpanded };
        var /** @type {?} */ grid = this.gridAPI.get(id);
        state.expressions = grid.groupingExpressions;
        if (!state.expressions.length) {
            return {
                data: collection,
                metadata: collection
            };
        }
        state.expansion = grid.groupingExpansionState;
        state.defaultExpanded = grid.groupsExpanded;
        return DataUtil.group(cloneArray(collection), state);
    };
    IgxGridPreGroupingPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gridPreGroupBy',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    IgxGridPreGroupingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
    ]; };
    return IgxGridPreGroupingPipe;
}());
export { IgxGridPreGroupingPipe };
function IgxGridPreGroupingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridPreGroupingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridPreGroupingPipe.ctorParameters;
    /** @type {?} */
    IgxGridPreGroupingPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
var IgxGridPostGroupingPipe = /** @class */ (function () {
    function IgxGridPostGroupingPipe(gridAPI) {
        this.gridAPI = /** @type {?} */ (gridAPI);
    }
    /**
     * @param {?} collection
     * @param {?} expression
     * @param {?} expansion
     * @param {?} defaultExpanded
     * @param {?} id
     * @param {?} groupsRecords
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxGridPostGroupingPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} expression
     * @param {?} expansion
     * @param {?} defaultExpanded
     * @param {?} id
     * @param {?} groupsRecords
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (collection, expression, expansion, defaultExpanded, id, groupsRecords, pipeTrigger) {
        var /** @type {?} */ state = { expressions: [], expansion: [], defaultExpanded: defaultExpanded };
        var /** @type {?} */ grid = this.gridAPI.get(id);
        state.expressions = grid.groupingExpressions;
        if (!state.expressions.length) {
            return collection.data;
        }
        state.expansion = grid.groupingExpansionState;
        state.defaultExpanded = grid.groupsExpanded;
        return DataUtil.restoreGroups({
            data: cloneArray(collection.data),
            metadata: cloneArray(collection.metadata)
        }, state, groupsRecords);
    };
    IgxGridPostGroupingPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gridPostGroupBy',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    IgxGridPostGroupingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
    ]; };
    return IgxGridPostGroupingPipe;
}());
export { IgxGridPostGroupingPipe };
function IgxGridPostGroupingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridPostGroupingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridPostGroupingPipe.ctorParameters;
    /** @type {?} */
    IgxGridPostGroupingPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
var IgxGridPagingPipe = /** @class */ (function () {
    function IgxGridPagingPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    /**
     * @param {?} collection
     * @param {?=} page
     * @param {?=} perPage
     * @param {?=} id
     * @param {?=} pipeTrigger
     * @return {?}
     */
    IgxGridPagingPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?=} page
     * @param {?=} perPage
     * @param {?=} id
     * @param {?=} pipeTrigger
     * @return {?}
     */
    function (collection, page, perPage, id, pipeTrigger) {
        if (page === void 0) { page = 0; }
        if (perPage === void 0) { perPage = 15; }
        if (!this.gridAPI.get(id).paging) {
            return collection;
        }
        var /** @type {?} */ state = {
            index: page,
            recordsPerPage: perPage
        };
        var /** @type {?} */ result = {
            data: DataUtil.page(cloneArray(collection.data), state),
            metadata: DataUtil.page(cloneArray(collection.metadata), state)
        };
        this.gridAPI.get(id).pagingState = state;
        return result;
    };
    IgxGridPagingPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gridPaging',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    IgxGridPagingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
    ]; };
    return IgxGridPagingPipe;
}());
export { IgxGridPagingPipe };
function IgxGridPagingPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridPagingPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridPagingPipe.ctorParameters;
    /** @type {?} */
    IgxGridPagingPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
var IgxGridFilteringPipe = /** @class */ (function () {
    function IgxGridFilteringPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    /**
     * @param {?} collection
     * @param {?} expressionsTree
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxGridFilteringPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} expressionsTree
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (collection, expressionsTree, id, pipeTrigger) {
        var /** @type {?} */ grid = this.gridAPI.get(id);
        var /** @type {?} */ state = { expressionsTree: expressionsTree };
        if (!state.expressionsTree ||
            !state.expressionsTree.filteringOperands ||
            state.expressionsTree.filteringOperands.length === 0) {
            return collection;
        }
        var /** @type {?} */ result = DataUtil.filter(cloneArray(collection), state);
        grid.filteredData = result;
        return result;
    };
    IgxGridFilteringPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gridFiltering',
                    pure: true
                },] },
    ];
    /** @nocollapse */
    IgxGridFilteringPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService, },
    ]; };
    return IgxGridFilteringPipe;
}());
export { IgxGridFilteringPipe };
function IgxGridFilteringPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxGridFilteringPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxGridFilteringPipe.ctorParameters;
    /** @type {?} */
    IgxGridFilteringPipe.prototype.gridAPI;
}

//# sourceMappingURL=data:application/json;base64,