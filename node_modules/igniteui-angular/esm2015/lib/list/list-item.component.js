/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, Renderer2, ViewChild } from '@angular/core';
import { IgxListPanState } from './list.common';
import { HammerGesturesManager } from '../core/touch';
import { IgxListComponent } from './list.component';
export class IgxListItemComponent {
    /**
     * @param {?} list
     * @param {?} elementRef
     * @param {?} _renderer
     */
    constructor(list, elementRef, _renderer) {
        this.list = list;
        this.elementRef = elementRef;
        this._renderer = _renderer;
        /**
         * @hidden
         */
        this._panState = IgxListPanState.NONE;
        /**
         * @hidden
         */
        this.panOffset = 0;
        /**
         * Sets/gets whether the `list item` is hidden.
         * By default the `hidden` value is `false`.
         * ```html
         * <igx-list-item [hidden] = "true">Hidden Item</igx-list-item>
         * ```
         * ```typescript
         * let isHidden =  this.listItem.hidden;
         * ```
         * \@memberof IgxListItemComponent
         */
        this.hidden = false;
        /**
         * Gets the `touch-action` style of the `list item`.
         * ```typescript
         * let touchAction = this.listItem.touchAction;
         * ```
         */
        this.touchAction = 'pan-y';
    }
    /**
     * Gets the `role` attribute of the `list item`.
     * ```typescript
     * let itemRole =  this.listItem.role;
     * ```
     * \@memberof IgxListItemComponent
     * @return {?}
     */
    get role() {
        return this.isHeader ? 'separator' : 'listitem';
    }
    /**
     * Indicates whether `list item` should have header style.
     * ```typescript
     * let headerStyle =  this.listItem.headerStyle;
     * ```
     * \@memberof IgxListItemComponent
     * @return {?}
     */
    get headerStyle() {
        return this.isHeader;
    }
    /**
     * Applies the inner style of the `list item` if the item is not counted as header.
     * ```typescript
     * let innerStyle =  this.listItem.innerStyle;
     * ```
     * \@memberof IgxListItemComponent
     * @return {?}
     */
    get innerStyle() {
        return !this.isHeader;
    }
    /**
     * Returns string value which describes the display mode of the `list item`.
     * ```typescript
     * let isHidden = this.listItem.display;
     * ```
     * \@memberof IgxListItemComponent
     * @return {?}
     */
    get display() {
        return this.hidden ? 'none' : '';
    }
    /**
     * @hidden
     * @param {?} evt
     * @return {?}
     */
    clicked(evt) {
        this.list.onItemClicked.emit({ item: this, event: evt });
    }
    /**
     * @hidden
     * @param {?} ev
     * @return {?}
     */
    panStart(ev) {
        if (this.isTrue(this.isHeader)) {
            return;
        }
        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {
            return;
        }
    }
    /**
     * @hidden
     * @param {?} ev
     * @return {?}
     */
    panMove(ev) {
        if (this.isTrue(this.isHeader)) {
            return;
        }
        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {
            return;
        }
        const /** @type {?} */ isPanningToLeft = ev.deltaX < 0;
        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {
            this.showLeftPanTemplate();
            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));
        }
        else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {
            this.showRightPanTemplate();
            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));
        }
    }
    /**
     * @hidden
     * @param {?} ev
     * @return {?}
     */
    panEnd(ev) {
        if (this.isTrue(this.isHeader)) {
            return;
        }
        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {
            return;
        }
        // the translation offset of the current list item content
        const /** @type {?} */ relativeOffset = this.panOffset;
        const /** @type {?} */ widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;
        if (relativeOffset === 0) {
            return; // no panning has occured
        }
        const /** @type {?} */ oldPanState = this._panState;
        if (Math.abs(relativeOffset) < widthTriggeringGrip) {
            this.setContentElementLeft(0);
            this._panState = IgxListPanState.NONE;
            this.hideLeftAndRightPanTemplates();
            return;
        }
        const /** @type {?} */ dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;
        const /** @type {?} */ args = { item: this, direction: dir, keepItem: false };
        if (dir === IgxListPanState.LEFT) {
            this.list.onLeftPan.emit(args);
        }
        else {
            this.list.onRightPan.emit(args);
        }
        if (args.keepItem === true) {
            this.setContentElementLeft(0);
            this._panState = IgxListPanState.NONE;
        }
        else {
            if (dir === IgxListPanState.LEFT) {
                this.setContentElementLeft(this.maxLeft);
                this._panState = IgxListPanState.LEFT;
            }
            else {
                this.setContentElementLeft(this.maxRight);
                this._panState = IgxListPanState.RIGHT;
            }
        }
        if (oldPanState !== this._panState) {
            const /** @type {?} */ args2 = { oldState: oldPanState, newState: this._panState, item: this };
            this.list.onPanStateChange.emit(args2);
        }
        this.hideLeftAndRightPanTemplates();
    }
    /**
     * @hidden
     * @return {?}
     */
    showLeftPanTemplate() {
        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');
    }
    /**
     * @hidden
     * @return {?}
     */
    showRightPanTemplate() {
        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');
    }
    /**
     * @hidden
     * @return {?}
     */
    hideLeftAndRightPanTemplates() {
        setTimeout(() => {
            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');
        }, 500);
    }
    /**
     * @hidden
     * @param {?} leftVisibility
     * @param {?} rightVisibility
     * @return {?}
     */
    setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {
        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {
            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;
        }
        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {
            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;
        }
    }
    /**
     * Gets the `panState` of a `list item`.
     * ```typescript
     * let itemPanState =  this.listItem.panState;
     * ```
     * \@memberof IgxListItemComponent
     * @return {?}
     */
    get panState() {
        return this._panState;
    }
    /**
     * Gets the `index` of a `list item`.
     * ```typescript
     * let itemIndex =  this.listItem.index;
     * ```
     * \@memberof IgxListItemComponent
     * @return {?}
     */
    get index() {
        return this.list.children.toArray().indexOf(this);
    }
    /**
     * Returns an element reference to the list item.
     * ```typescript
     * let listItemElement =  this.listItem.element.
     * ```
     * \@memberof IgxListItemComponent
     * @return {?}
     */
    get element() {
        return this.elementRef.nativeElement;
    }
    /**
     * Returns a reference container which contains the list item's content.
     * ```typescript
     * let listItemContainer =  this.listItem.contentElement.
     * ```
     * \@memberof IgxListItemComponent
     * @return {?}
     */
    get contentElement() {
        const /** @type {?} */ candidates = this.element.getElementsByClassName('igx-list__item-content');
        return (candidates && candidates.length > 0) ? candidates[0] : null;
    }
    /**
     * Returns the `context` object which represents the `template context` binding into the `list item container`
     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.
     * ```typescript
     * let listItemComponent = this.listItem.context;
     * ```
     * @return {?}
     */
    get context() {
        return {
            $implicit: this
        };
    }
    /**
     * Gets the width of a `list item`.
     * ```typescript
     * let itemWidth = this.listItem.width;
     * ```
     * \@memberof IgxListItemComponent
     * @return {?}
     */
    get width() {
        if (this.element) {
            return this.element.offsetWidth;
        }
    }
    /**
     * Gets the maximum left position of the `list item`.
     * ```typescript
     * let maxLeft = this.listItem.maxLeft;
     * ```
     * \@memberof IgxListItemComponent
     * @return {?}
     */
    get maxLeft() {
        return -this.width;
    }
    /**
     * Gets the maximum right position of the `list item`.
     * ```typescript
     * let maxRight = this.listItem.maxRight;
     * ```
     * \@memberof IgxListItemComponent
     * @return {?}
     */
    get maxRight() {
        return this.width;
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    setContentElementLeft(value) {
        this.panOffset = value;
        this.contentElement.style.transform = 'translateX(' + value + 'px)';
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    isTrue(value) {
        if (typeof (value) === 'boolean') {
            return value;
        }
        else {
            return value === 'true';
        }
    }
}
IgxListItemComponent.decorators = [
    { type: Component, args: [{
                providers: [HammerGesturesManager],
                selector: 'igx-list-item',
                template: `   
<div *ngIf="!isHeader && list.listItemLeftPanningTemplate != null" #leftPanningTmpl class="igx-list__item-right"
    [style.width.px]="this.element.offsetWidth" [style.height.px]="this.element.offsetHeight">
    <ng-container *ngTemplateOutlet="list.listItemLeftPanningTemplate.template; context: context">
    </ng-container>
</div>

<div *ngIf="!isHeader && list.listItemRightPanningTemplate != null" #rightPanningTmpl class="igx-list__item-left"
    [style.width.px]="this.element.offsetWidth" [style.height.px]="this.element.offsetHeight">
    <ng-container *ngTemplateOutlet="list.listItemRightPanningTemplate.template; context: context">
    </ng-container>
</div>

<ng-template #itemsContent>
    <ng-content></ng-content>
</ng-template>
    
<ng-container *ngIf="isHeader">
    <ng-container *ngTemplateOutlet="itemsContent">
    </ng-container>
</ng-container>

<ng-container *ngIf="!isHeader">
    <div class="igx-list__item-content">
        <ng-container *ngTemplateOutlet="itemsContent">
        </ng-container>
    </div>
</ng-container>
`,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
IgxListItemComponent.ctorParameters = () => [
    { type: IgxListComponent, decorators: [{ type: Inject, args: [forwardRef(() => IgxListComponent),] },] },
    { type: ElementRef, },
    { type: Renderer2, },
];
IgxListItemComponent.propDecorators = {
    "leftPanningTemplateElement": [{ type: ViewChild, args: ['leftPanningTmpl',] },],
    "rightPanningTemplateElement": [{ type: ViewChild, args: ['rightPanningTmpl',] },],
    "isHeader": [{ type: Input },],
    "hidden": [{ type: Input },],
    "role": [{ type: HostBinding, args: ['attr.role',] },],
    "ariaLabel": [{ type: HostBinding, args: ['attr.aria-label',] },],
    "touchAction": [{ type: HostBinding, args: ['style.touch-action',] },],
    "headerStyle": [{ type: HostBinding, args: ['class.igx-list__header',] },],
    "innerStyle": [{ type: HostBinding, args: ['class.igx-list__item-base',] },],
    "display": [{ type: HostBinding, args: ['style.display',] },],
    "clicked": [{ type: HostListener, args: ['click', ['$event'],] },],
    "panStart": [{ type: HostListener, args: ['panstart', ['$event'],] },],
    "panMove": [{ type: HostListener, args: ['panmove', ['$event'],] },],
    "panEnd": [{ type: HostListener, args: ['panend', ['$event'],] },],
};
function IgxListItemComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IgxListItemComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IgxListItemComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    IgxListItemComponent.propDecorators;
    /**
     * @hidden
     * @type {?}
     */
    IgxListItemComponent.prototype._panState;
    /**
     * @hidden
     * @type {?}
     */
    IgxListItemComponent.prototype.panOffset;
    /**
     * Provides a reference to the template's base element shown when left panning a list item.
     * ```typescript
     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;
     * ```
     * @type {?}
     */
    IgxListItemComponent.prototype.leftPanningTemplateElement;
    /**
     * Provides a reference to the template's base element shown when right panning a list item.
     * ```typescript
     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;
     * ```
     * @type {?}
     */
    IgxListItemComponent.prototype.rightPanningTemplateElement;
    /**
     * Sets/gets whether the `list item` is a header.
     * ```html
     * <igx-list-item [isHeader] = "true">Header</igx-list-item>
     * ```
     * ```typescript
     * let isHeader =  this.listItem.isHeader;
     * ```
     * \@memberof IgxListItemComponent
     * @type {?}
     */
    IgxListItemComponent.prototype.isHeader;
    /**
     * Sets/gets whether the `list item` is hidden.
     * By default the `hidden` value is `false`.
     * ```html
     * <igx-list-item [hidden] = "true">Hidden Item</igx-list-item>
     * ```
     * ```typescript
     * let isHidden =  this.listItem.hidden;
     * ```
     * \@memberof IgxListItemComponent
     * @type {?}
     */
    IgxListItemComponent.prototype.hidden;
    /**
     * Sets/gets the `aria-label` attribute of the `list item`.
     * ```typescript
     * this.listItem.ariaLabel = "Item1";
     * ```
     * ```typescript
     * let itemAriaLabel = this.listItem.ariaLabel;
     * ```
     * \@memberof IgxListItemComponent
     * @type {?}
     */
    IgxListItemComponent.prototype.ariaLabel;
    /**
     * Gets the `touch-action` style of the `list item`.
     * ```typescript
     * let touchAction = this.listItem.touchAction;
     * ```
     * @type {?}
     */
    IgxListItemComponent.prototype.touchAction;
    /** @type {?} */
    IgxListItemComponent.prototype.list;
    /** @type {?} */
    IgxListItemComponent.prototype.elementRef;
    /** @type {?} */
    IgxListItemComponent.prototype._renderer;
}

//# sourceMappingURL=data:application/json;base64,